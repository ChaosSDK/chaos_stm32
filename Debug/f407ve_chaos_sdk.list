
f407ve_chaos_sdk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a2c  0800d248  0800d248  0001d248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc74  0800fc74  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc74  0800fc74  0001fc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc7c  0800fc7c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc7c  0800fc7c  0001fc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc80  0800fc80  0001fc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800fc84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000d0c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000eec  20000eec  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166fb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d76  00000000  00000000  0003690b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0003a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  0003b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029193  00000000  00000000  0003c630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f99  00000000  00000000  000657c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2843  00000000  00000000  0007f75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161f9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000574c  00000000  00000000  00161ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d230 	.word	0x0800d230

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d230 	.word	0x0800d230

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_GPIO_Init+0x9c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xa0>)
 800106a:	f004 ff43 	bl	8005ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NP_dir_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NP_dir_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xa0>)
 8001088:	f004 fd98 	bl	8005bbc <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f004 fb76 	bl	8005790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f818 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff ffa6 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ac:	f000 fa90 	bl	80015d0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010b0:	f000 f9ba 	bl	8001428 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010b4:	2108      	movs	r1, #8
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <main+0x34>)
 80010b8:	f005 fc9c 	bl	80069f4 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <main+0x38>)
 80010c4:	f004 ff16 	bl	8005ef4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80010c8:	f000 fb26 	bl	8001718 <app_main>
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x30>
 80010ce:	bf00      	nop
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40020400 	.word	0x40020400

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fdf0 	bl	8008ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemClock_Config+0xd0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemClock_Config+0xd0>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a22      	ldr	r2, [pc, #136]	; (80011ac <SystemClock_Config+0xd4>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800114c:	23a8      	movs	r3, #168	; 0xa8
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fee3 	bl	8005f28 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 f822 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2105      	movs	r1, #5
 800118a:	4618      	mov	r0, r3
 800118c:	f005 f944 	bl	8006418 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f80b 	bl	80011b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800119a:	f005 fa23 	bl	80065e4 <HAL_RCC_EnableCSS>
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001210:	f005 fb2c 	bl	800686c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x8>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f004 faea 	bl	8005834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART1_IRQHandler+0x10>)
 800126a:	f006 fab1 	bl	80077d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000248 	.word	0x20000248

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f007 fa2b 	bl	80086ec <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f004 fa2b 	bl	800576c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f007 f990 	bl	80086ec <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	20000ef0 	.word	0x20000ef0

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_TIM4_Init+0xe8>)
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <MX_TIM4_Init+0xec>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM4_Init+0xe8>)
 800146c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM4_Init+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001480:	f005 fa0f 	bl	80068a2 <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800148a:	f7ff fe91 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	4619      	mov	r1, r3
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <MX_TIM4_Init+0xe8>)
 800149c:	f005 fc34 	bl	8006d08 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014a6:	f7ff fe83 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014aa:	4819      	ldr	r0, [pc, #100]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ac:	f005 fa48 	bl	8006940 <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014b6:	f7ff fe7b 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ca:	f005 fff5 	bl	80074b8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014d4:	f7ff fe6c 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80014dc:	f241 0368 	movw	r3, #4200	; 0x1068
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014f2:	f005 fb47 	bl	8006b84 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f7ff fe58 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001502:	f000 f82b 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000200 	.word	0x20000200
 8001514:	40000800 	.word	0x40000800

08001518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40000800 	.word	0x40000800
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_TIM_MspPostInit+0x68>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d11e      	bne.n	80015bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PP_step_Pin;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PP_step_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_TIM_MspPostInit+0x70>)
 80015b8:	f004 fb00 	bl	8005bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART1_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001608:	f005 ffd2 	bl	80075b0 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fdcd 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000248 	.word	0x20000248
 8001620:	40011000 	.word	0x40011000

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_UART_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d134      	bne.n	80016b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_UART_MspInit+0x98>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_UART_MspInit+0x9c>)
 800169c:	f004 fa8e 	bl	8005bbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f004 f9c0 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f004 f9d9 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ee:	f7ff fe89 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f007 fa8b 	bl	8008c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fcd1 	bl	800109c <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001708:	0800fc84 	.word	0x0800fc84
  ldr r2, =_sbss
 800170c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001710:	20000eec 	.word	0x20000eec

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <app_main>:

#include "board_pkg.h"


void app_main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af02      	add	r7, sp, #8
	int state = newEntities(5);
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fde0 	bl	80022e4 <newEntities>
 8001724:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "app_main: error entity allocation");
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10e      	bne.n	800174a <app_main+0x32>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf0c      	ite	eq
 8001732:	2301      	moveq	r3, #1
 8001734:	2300      	movne	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <app_main+0x4c>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	230e      	movs	r3, #14
 8001740:	4a09      	ldr	r2, [pc, #36]	; (8001768 <app_main+0x50>)
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <app_main+0x54>)
 8001744:	f003 fef0 	bl	8005528 <__M_Error>
 8001748:	e008      	b.n	800175c <app_main+0x44>
	entityBoardInit();
 800174a:	f000 f811 	bl	8001770 <entityBoardInit>


	init_stm32_communicator();
 800174e:	f003 ff4d 	bl	80055ec <init_stm32_communicator>
//	if(a == 0) {
//		int b =0;
//	}

	while(1) {
		proceedIncommingMessage();
 8001752:	f003 ff7d 	bl	8005650 <proceedIncommingMessage>
		entityBoardProceed();
 8001756:	f000 f9e3 	bl	8001b20 <entityBoardProceed>
		proceedIncommingMessage();
 800175a:	e7fa      	b.n	8001752 <app_main+0x3a>
	}
}
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800d27c 	.word	0x0800d27c
 8001768:	0800d248 	.word	0x0800d248
 800176c:	0800d264 	.word	0x0800d264

08001770 <entityBoardInit>:
boards_t* board_entry = NULL;

extern TIM_HandleTypeDef htim4;

void entityBoardInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b090      	sub	sp, #64	; 0x40
 8001774:	af06      	add	r7, sp, #24
	reg board_entityNum = ENTITY_NUMBER_ERROR;
 8001776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177a:	607b      	str	r3, [r7, #4]
	reg fieldNumber = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	603b      	str	r3, [r7, #0]

	int state = initEntity(&board_entityNum, (17 + 10 + 2), sizeof(boards_t), "BID ", 0, 0, NULL);
 8001780:	1d38      	adds	r0, r7, #4
 8001782:	2300      	movs	r3, #0
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2300      	movs	r3, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <entityBoardInit+0xd8>)
 8001790:	2270      	movs	r2, #112	; 0x70
 8001792:	211d      	movs	r1, #29
 8001794:	f000 fdf8 	bl	8002388 <initEntity>
 8001798:	6278      	str	r0, [r7, #36]	; 0x24
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "entityBoardInit: initEntity Error");
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <entityBoardInit+0x4e>
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <entityBoardInit+0xdc>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2310      	movs	r3, #16
 80017b4:	4a26      	ldr	r2, [pc, #152]	; (8001850 <entityBoardInit+0xe0>)
 80017b6:	4827      	ldr	r0, [pc, #156]	; (8001854 <entityBoardInit+0xe4>)
 80017b8:	f003 feb6 	bl	8005528 <__M_Error>
 80017bc:	e181      	b.n	8001ac2 <entityBoardInit+0x352>

	Entity* const entity = getEntityPointer(board_entityNum);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	61bb      	str	r3, [r7, #24]
 */

// getter entity pointer by entity number
STATIC_FORCEINLINE Entity * getEntityPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <entityBoardInit+0xe8>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d206      	bcs.n	80017da <entityBoardInit+0x6a>
        return entityInfo.entities[entityNumber];
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <entityBoardInit+0xe8>)
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	e000      	b.n	80017dc <entityBoardInit+0x6c>
    }
    return NULLPTR(Entity*);
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
	M_Assert_BreakSaveCheck((entity == NULL), M_EMPTY, return, "entityBoardInit: entity is null");
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10e      	bne.n	8001802 <entityBoardInit+0x92>
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <entityBoardInit+0xec>)
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2313      	movs	r3, #19
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <entityBoardInit+0xe0>)
 80017fa:	4819      	ldr	r0, [pc, #100]	; (8001860 <entityBoardInit+0xf0>)
 80017fc:	f003 fe94 	bl	8005528 <__M_Error>
 8001800:	e15f      	b.n	8001ac2 <entityBoardInit+0x352>

	boards_t* entry = getVoidPointer(board_entityNum);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	617b      	str	r3, [r7, #20]
}

// getter data pointer by entity number
STATIC_FORCEINLINE void * getVoidPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <entityBoardInit+0xe8>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <entityBoardInit+0xb0>
        return entityInfo.entities[entityNumber]->pointer;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <entityBoardInit+0xe8>)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	e000      	b.n	8001822 <entityBoardInit+0xb2>
    }
    return NULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
	M_Assert_BreakSaveCheck((entry == NULL), M_EMPTY, return, "entityBoardInit: entry is null");
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d120      	bne.n	800186c <entityBoardInit+0xfc>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <entityBoardInit+0xf4>)
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2316      	movs	r3, #22
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <entityBoardInit+0xe0>)
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <entityBoardInit+0xf8>)
 8001842:	f003 fe71 	bl	8005528 <__M_Error>
 8001846:	e13c      	b.n	8001ac2 <entityBoardInit+0x352>
 8001848:	0800d2a0 	.word	0x0800d2a0
 800184c:	0800d2e0 	.word	0x0800d2e0
 8001850:	0800d2a8 	.word	0x0800d2a8
 8001854:	0800d2c8 	.word	0x0800d2c8
 8001858:	20000290 	.word	0x20000290
 800185c:	0800d318 	.word	0x0800d318
 8001860:	0800d304 	.word	0x0800d304
 8001864:	0800d348 	.word	0x0800d348
 8001868:	0800d338 	.word	0x0800d338

	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, boardId), 	UINT8_TYPE, 	"B   ", &entry->boardId);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4639      	mov	r1, r7
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	4b95      	ldr	r3, [pc, #596]	; (8001ac8 <entityBoardInit+0x358>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2301      	movs	r3, #1
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	2201      	movs	r2, #1
 800187e:	6a38      	ldr	r0, [r7, #32]
 8001880:	f000 fe94 	bl	80025ac <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, major), 		UINT8_TYPE, 	"VerH", &entry->major);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	3301      	adds	r3, #1
 8001888:	4639      	mov	r1, r7
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <entityBoardInit+0x35c>)
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	2201      	movs	r2, #1
 8001898:	6a38      	ldr	r0, [r7, #32]
 800189a:	f000 fe87 	bl	80025ac <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, minor), 		UINT8_TYPE, 	"VerM", &entry->minor);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3302      	adds	r3, #2
 80018a2:	4639      	mov	r1, r7
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	4b8a      	ldr	r3, [pc, #552]	; (8001ad0 <entityBoardInit+0x360>)
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	2201      	movs	r2, #1
 80018b2:	6a38      	ldr	r0, [r7, #32]
 80018b4:	f000 fe7a 	bl	80025ac <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, patch), 		UINT16_TYPE, 	"VerL", &entry->patch);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3304      	adds	r3, #4
 80018bc:	4639      	mov	r1, r7
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <entityBoardInit+0x364>)
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2304      	movs	r3, #4
 80018ca:	2201      	movs	r2, #1
 80018cc:	6a38      	ldr	r0, [r7, #32]
 80018ce:	f000 fe6d 	bl	80025ac <initField>

    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _1), UINT8_TYPE,                "F1", &entry->_1);
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3306      	adds	r3, #6
 80018d6:	4639      	mov	r1, r7
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <entityBoardInit+0x368>)
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2301      	movs	r3, #1
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2306      	movs	r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	6a38      	ldr	r0, [r7, #32]
 80018e8:	f000 fe60 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _2), UINT8_TYPE,                "F2", &entry->_2);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3307      	adds	r3, #7
 80018f0:	4639      	mov	r1, r7
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	4b79      	ldr	r3, [pc, #484]	; (8001adc <entityBoardInit+0x36c>)
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2307      	movs	r3, #7
 80018fe:	2200      	movs	r2, #0
 8001900:	6a38      	ldr	r0, [r7, #32]
 8001902:	f000 fe53 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _3), UINT16_TYPE,               "F3", &entry->_3);
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3308      	adds	r3, #8
 800190a:	4639      	mov	r1, r7
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <entityBoardInit+0x370>)
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2302      	movs	r3, #2
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2308      	movs	r3, #8
 8001918:	2200      	movs	r2, #0
 800191a:	6a38      	ldr	r0, [r7, #32]
 800191c:	f000 fe46 	bl	80025ac <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _4), UINT24_TYPE,               "F4", &entry->_4);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _5), UINT32_TYPE,               "F5", &entry->_5);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3310      	adds	r3, #16
 8001924:	4639      	mov	r1, r7
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <entityBoardInit+0x374>)
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2303      	movs	r3, #3
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2310      	movs	r3, #16
 8001932:	2200      	movs	r2, #0
 8001934:	6a38      	ldr	r0, [r7, #32]
 8001936:	f000 fe39 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _6), UINT64_TYPE,               "F6", &entry->_6);
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3318      	adds	r3, #24
 800193e:	4639      	mov	r1, r7
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <entityBoardInit+0x378>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2304      	movs	r3, #4
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2318      	movs	r3, #24
 800194c:	2200      	movs	r2, #0
 800194e:	6a38      	ldr	r0, [r7, #32]
 8001950:	f000 fe2c 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _7), CHAR_TYPE,                 "F7", &entry->_7);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	3320      	adds	r3, #32
 8001958:	4639      	mov	r1, r7
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	4b63      	ldr	r3, [pc, #396]	; (8001aec <entityBoardInit+0x37c>)
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2305      	movs	r3, #5
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2320      	movs	r3, #32
 8001966:	2200      	movs	r2, #0
 8001968:	6a38      	ldr	r0, [r7, #32]
 800196a:	f000 fe1f 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _8), INT8_TYPE,                 "F8", &entry->_8);
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3321      	adds	r3, #33	; 0x21
 8001972:	4639      	mov	r1, r7
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <entityBoardInit+0x380>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2306      	movs	r3, #6
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2321      	movs	r3, #33	; 0x21
 8001980:	2200      	movs	r2, #0
 8001982:	6a38      	ldr	r0, [r7, #32]
 8001984:	f000 fe12 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _9), INT16_TYPE,                "F9", &entry->_9);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	3322      	adds	r3, #34	; 0x22
 800198c:	4639      	mov	r1, r7
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <entityBoardInit+0x384>)
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2307      	movs	r3, #7
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2322      	movs	r3, #34	; 0x22
 800199a:	2200      	movs	r2, #0
 800199c:	6a38      	ldr	r0, [r7, #32]
 800199e:	f000 fe05 	bl	80025ac <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _10), INT24_TYPE,               "F10", &entry->_10);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _11), INT32_TYPE,               "F11", &entry->_11);
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3328      	adds	r3, #40	; 0x28
 80019a6:	4639      	mov	r1, r7
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <entityBoardInit+0x388>)
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2308      	movs	r3, #8
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2328      	movs	r3, #40	; 0x28
 80019b4:	2200      	movs	r2, #0
 80019b6:	6a38      	ldr	r0, [r7, #32]
 80019b8:	f000 fdf8 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _12), INT64_TYPE,               "F12", &entry->_12);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3330      	adds	r3, #48	; 0x30
 80019c0:	4639      	mov	r1, r7
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <entityBoardInit+0x38c>)
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2309      	movs	r3, #9
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2330      	movs	r3, #48	; 0x30
 80019ce:	2200      	movs	r2, #0
 80019d0:	6a38      	ldr	r0, [r7, #32]
 80019d2:	f000 fdeb 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _13), FLOAT_TYPE,               "F13", &entry->_13);
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	4639      	mov	r1, r7
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <entityBoardInit+0x390>)
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	230a      	movs	r3, #10
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2338      	movs	r3, #56	; 0x38
 80019e8:	2200      	movs	r2, #0
 80019ea:	6a38      	ldr	r0, [r7, #32]
 80019ec:	f000 fdde 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _14), DOUBLE_TYPE,              "F14", &entry->_14);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3340      	adds	r3, #64	; 0x40
 80019f4:	4639      	mov	r1, r7
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <entityBoardInit+0x394>)
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	230b      	movs	r3, #11
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	2200      	movs	r2, #0
 8001a04:	6a38      	ldr	r0, [r7, #32]
 8001a06:	f000 fdd1 	bl	80025ac <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _15), LONG_DOUBLE_TYPE,         "F15", &entry->_15);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _16), BOOL_TYPE,                "F16", &entry->_16);
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3350      	adds	r3, #80	; 0x50
 8001a0e:	4639      	mov	r1, r7
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <entityBoardInit+0x398>)
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	230d      	movs	r3, #13
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2350      	movs	r3, #80	; 0x50
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6a38      	ldr	r0, [r7, #32]
 8001a20:	f000 fdc4 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK /*| ENTITY_ATOMIC_MSK*/), offsetof(boards_t, _17), /*REG_TYPE*/UINT32_TYPE,                 "F17", &entry->_17);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3354      	adds	r3, #84	; 0x54
 8001a28:	4639      	mov	r1, r7
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <entityBoardInit+0x39c>)
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	2303      	movs	r3, #3
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2354      	movs	r3, #84	; 0x54
 8001a36:	2218      	movs	r2, #24
 8001a38:	6a38      	ldr	r0, [r7, #32]
 8001a3a:	f000 fdb7 	bl	80025ac <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _18), SREG_TYPE,                "F18", &entry->_18);

    initFieldArray(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, data), UINT8_TYPE, sizeof(entry->data), NULL, entry->data, 1);
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	335c      	adds	r3, #92	; 0x5c
 8001a42:	4639      	mov	r1, r7
 8001a44:	2201      	movs	r2, #1
 8001a46:	9204      	str	r2, [sp, #16]
 8001a48:	9303      	str	r3, [sp, #12]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	230a      	movs	r3, #10
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2301      	movs	r3, #1
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	235c      	movs	r3, #92	; 0x5c
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6a38      	ldr	r0, [r7, #32]
 8001a5c:	f000 fe9a 	bl	8002794 <initFieldArray>
    initFieldPointer(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, ptr), UINT8_TYPE,                "REG", &entry->ptr);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	3368      	adds	r3, #104	; 0x68
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	613a      	str	r2, [r7, #16]
 8001a68:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <entityBoardInit+0x3a0>)
 8001a6a:	60fa      	str	r2, [r7, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr);
STATIC_FORCEINLINE int initFieldPointer(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], reg* const field_ptr)
{
	return initField(entityInst, fieldNumber, bitFlags | ENTITY_POINTER_MSK, shift, type, descr, field_ptr);
 8001a6e:	2208      	movs	r2, #8
 8001a70:	4639      	mov	r1, r7
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2368      	movs	r3, #104	; 0x68
 8001a80:	6938      	ldr	r0, [r7, #16]
 8001a82:	f000 fd93 	bl	80025ac <initField>

    entry->_17 = /*(reg)&entry->data[0]*/(reg)&htim4.Instance->ARR;
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <entityBoardInit+0x3a4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	332c      	adds	r3, #44	; 0x2c
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
    entry->ptr = (reg)&entry->data[1];
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	335d      	adds	r3, #93	; 0x5d
 8001a96:	461a      	mov	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	669a      	str	r2, [r3, #104]	; 0x68

	entry->boardId 	= INIT_BOARD_ID;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
	entry->major 	= BOARD_MAJOR;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	705a      	strb	r2, [r3, #1]
	entry->minor 	= BOARD_MINOR;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	709a      	strb	r2, [r3, #2]
	entry->patch	= BOARD_PATCHLEVEL;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	809a      	strh	r2, [r3, #4]
	board_entry 	= entry;
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <entityBoardInit+0x3a8>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	6013      	str	r3, [r2, #0]

	board_entry->_13 = 3.444;
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <entityBoardInit+0x3a8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <entityBoardInit+0x3ac>)
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	0800d368 	.word	0x0800d368
 8001acc:	0800d370 	.word	0x0800d370
 8001ad0:	0800d378 	.word	0x0800d378
 8001ad4:	0800d380 	.word	0x0800d380
 8001ad8:	0800d388 	.word	0x0800d388
 8001adc:	0800d38c 	.word	0x0800d38c
 8001ae0:	0800d390 	.word	0x0800d390
 8001ae4:	0800d394 	.word	0x0800d394
 8001ae8:	0800d398 	.word	0x0800d398
 8001aec:	0800d39c 	.word	0x0800d39c
 8001af0:	0800d3a0 	.word	0x0800d3a0
 8001af4:	0800d3a4 	.word	0x0800d3a4
 8001af8:	0800d3a8 	.word	0x0800d3a8
 8001afc:	0800d3ac 	.word	0x0800d3ac
 8001b00:	0800d3b0 	.word	0x0800d3b0
 8001b04:	0800d3b4 	.word	0x0800d3b4
 8001b08:	0800d3b8 	.word	0x0800d3b8
 8001b0c:	0800d3bc 	.word	0x0800d3bc
 8001b10:	0800d3c0 	.word	0x0800d3c0
 8001b14:	20000200 	.word	0x20000200
 8001b18:	2000028c 	.word	0x2000028c
 8001b1c:	405c6a7f 	.word	0x405c6a7f

08001b20 <entityBoardProceed>:

void entityBoardProceed(void)
{
 8001b20:	b598      	push	{r3, r4, r7, lr}
 8001b22:	af00      	add	r7, sp, #0
//	if((HAL_GetTick() - lastTime) > 1000) {
//		board_entry->
//	}
//
//	lastTime = HAL_GetTick();
	board_entry->_5 = HAL_GetTick();
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <entityBoardProceed+0x14>)
 8001b26:	681c      	ldr	r4, [r3, #0]
 8001b28:	f003 fe98 	bl	800585c <HAL_GetTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	6123      	str	r3, [r4, #16]
	//board_entry->_13 = 3.444;
}
 8001b30:	bf00      	nop
 8001b32:	bd98      	pop	{r3, r4, r7, pc}
 8001b34:	2000028c 	.word	0x2000028c

08001b38 <HAL_UART_RxCpltCallback>:



// uart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_UART_RxCpltCallback+0x54>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d11c      	bne.n	8001b84 <HAL_UART_RxCpltCallback+0x4c>

		RawParser_dma_receiveByte(&comm.rawparser, comm.receiveByte);
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_UART_RxCpltCallback+0x58>)
 8001b4c:	f893 3a34 	ldrb.w	r3, [r3, #2612]	; 0xa34
 8001b50:	75fb      	strb	r3, [r7, #23]

// receive functions-----------------------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_receiveByte(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == NULL), M_EMPTY, return, "RawParser_dma_receiveByte: No valid input");
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_UART_RxCpltCallback+0x5c>)
 8001b54:	613b      	str	r3, [r7, #16]
    reg m_receivePos            = self->m_receivePos;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_UART_RxCpltCallback+0x58>)
 8001b58:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001b5c:	60fb      	str	r3, [r7, #12]

    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	7dfa      	ldrb	r2, [r7, #23]
 8001b6a:	701a      	strb	r2, [r3, #0]
    ++m_receivePos;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]

    self->m_receivePos = m_receivePos;
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_UART_RxCpltCallback+0x58>)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
		HAL_UART_Receive_IT(huart, (uint8_t*) &comm.receiveByte, 1);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <HAL_UART_RxCpltCallback+0x60>)
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f005 fdf5 	bl	800776e <HAL_UART_Receive_IT>
	}
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	200002a0 	.word	0x200002a0
 8001b94:	200002a8 	.word	0x200002a8
 8001b98:	20000cd4 	.word	0x20000cd4

08001b9c <CallbackManager_init>:
    CallbackManager_init(m_manager);
    return m_manager;
}

void CallbackManager_init(CallbackManager_t * const self)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af04      	add	r7, sp, #16
 8001ba2:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_init: no valid input data", ENA, LIB);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d112      	bne.n	8001bd0 <CallbackManager_init+0x34>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <CallbackManager_init+0x60>)
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <CallbackManager_init+0x64>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2314      	movs	r3, #20
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <CallbackManager_init+0x68>)
 8001bc8:	480f      	ldr	r0, [pc, #60]	; (8001c08 <CallbackManager_init+0x6c>)
 8001bca:	f003 fcad 	bl	8005528 <__M_Error>
 8001bce:	e011      	b.n	8001bf4 <CallbackManager_init+0x58>
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e007      	b.n	8001be6 <CallbackManager_init+0x4a>
        self->workers[i] = (CallbackWorker)NULL;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3301      	adds	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2bff      	cmp	r3, #255	; 0xff
 8001bea:	d9f4      	bls.n	8001bd6 <CallbackManager_init+0x3a>
        self->ctx[i] = NULL;
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
    }

#ifndef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx = NULL;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	0800d424 	.word	0x0800d424
 8001c00:	0800d490 	.word	0x0800d490
 8001c04:	0800d3c4 	.word	0x0800d3c4
 8001c08:	0800d46c 	.word	0x0800d46c

08001c0c <CallbackManager_addWorker>:

    return 0;
}

void CallbackManager_addWorker(CallbackManager_t * const self, const CallBManIdType id, const CallbackWorker worker, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af04      	add	r7, sp, #16
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d112      	bne.n	8001c48 <CallbackManager_addWorker+0x3c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <CallbackManager_addWorker+0x54>)
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	2301      	movs	r3, #1
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <CallbackManager_addWorker+0x58>)
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	232d      	movs	r3, #45	; 0x2d
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <CallbackManager_addWorker+0x5c>)
 8001c40:	480a      	ldr	r0, [pc, #40]	; (8001c6c <CallbackManager_addWorker+0x60>)
 8001c42:	f003 fc71 	bl	8005528 <__M_Error>
 8001c46:	e008      	b.n	8001c5a <CallbackManager_addWorker+0x4e>

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    self->workers[id] = worker;
 8001c48:	7afa      	ldrb	r2, [r7, #11]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx[id] = PREPROCESSOR_CTX_TYPE_CAST(ctx);
#else
    self->ctx = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	0800d424 	.word	0x0800d424
 8001c64:	0800d514 	.word	0x0800d514
 8001c68:	0800d3c4 	.word	0x0800d3c4
 8001c6c:	0800d46c 	.word	0x0800d46c

08001c70 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
int CallbackManager_proceed(const CallbackManager_t* const self, const CallBManIdType id,
                            u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b08b      	sub	sp, #44	; 0x2c
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input data", ENA, LIB);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d113      	bne.n	8001cae <CallbackManager_proceed+0x3e>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <CallbackManager_proceed+0x84>)
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <CallbackManager_proceed+0x88>)
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2341      	movs	r3, #65	; 0x41
 8001ca2:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <CallbackManager_proceed+0x8c>)
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <CallbackManager_proceed+0x90>)
 8001ca6:	f003 fc3f 	bl	8005528 <__M_Error>
 8001caa:	2300      	movs	r3, #0
 8001cac:	e01e      	b.n	8001cec <CallbackManager_proceed+0x7c>
#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    // move to cash
    const CallbackWorker worker = self->workers[id];
 8001cae:	7afa      	ldrb	r2, [r7, #11]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb6:	617b      	str	r3, [r7, #20]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx[id];
#else
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001cbe:	613b      	str	r3, [r7, #16]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    // do logic
    M_Assert_SafeFunctionCall((worker != (CallbackWorker)NULL), {
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <CallbackManager_proceed+0x6a>
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697c      	ldr	r4, [r7, #20]
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	47a0      	blx	r4
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e008      	b.n	8001cec <CallbackManager_proceed+0x7c>
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <CallbackManager_proceed+0x94>)
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2351      	movs	r3, #81	; 0x51
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <CallbackManager_proceed+0x8c>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <CallbackManager_proceed+0x98>)
 8001ce6:	f003 fc3d 	bl	8005564 <__M_Warning>
                                  worker(inputData, outputData, size, maxOutBufferSize, ctx);
                                  return 1;
                              });
    return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	0800d424 	.word	0x0800d424
 8001cf8:	0800d548 	.word	0x0800d548
 8001cfc:	0800d3c4 	.word	0x0800d3c4
 8001d00:	0800d46c 	.word	0x0800d46c
 8001d04:	0800d59c 	.word	0x0800d59c
 8001d08:	0800d578 	.word	0x0800d578

08001d0c <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	460a      	mov	r2, r1
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	4053      	eors	r3, r2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <fast_crc8_maxim_byte+0x2c>)
 8001d28:	5c9b      	ldrb	r3, [r3, r2]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	0800f688 	.word	0x0800f688

08001d3c <entityCMD>:
#ifdef C_ENTITY_FRAMEWORK_LIB_ENA
#include "entity_packet.h"
#include "smart_assert.h"

void entityCMD(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b0b7      	sub	sp, #220	; 0xdc
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
	M_Assert_Break((inputData == NULL) || (outputData == NULL) || (size == NULL), M_EMPTY, return, "entityCMD: invalid input");
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <entityCMD+0x20>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <entityCMD+0x20>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d114      	bne.n	8001d86 <entityCMD+0x4a>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <entityCMD+0x32>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <entityCMD+0x32>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <entityCMD+0x36>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <entityCMD+0x38>
 8001d72:	2300      	movs	r3, #0
 8001d74:	b2d9      	uxtb	r1, r3
 8001d76:	4baa      	ldr	r3, [pc, #680]	; (8002020 <entityCMD+0x2e4>)
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	4aa9      	ldr	r2, [pc, #676]	; (8002024 <entityCMD+0x2e8>)
 8001d7e:	48aa      	ldr	r0, [pc, #680]	; (8002028 <entityCMD+0x2ec>)
 8001d80:	f003 fbd2 	bl	8005528 <__M_Error>
 8001d84:	e20a      	b.n	800219c <entityCMD+0x460>

	const reg sizeInternal = (*size);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	M_Assert_Break((sizeInternal == 0) || (maxOutBufferSize == 0), M_EMPTY, return, "entityCMD: invalid input size");
 8001d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <entityCMD+0x60>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d112      	bne.n	8001dc2 <entityCMD+0x86>
 8001d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <entityCMD+0x6e>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <entityCMD+0x72>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <entityCMD+0x74>
 8001dae:	2300      	movs	r3, #0
 8001db0:	b2d9      	uxtb	r1, r3
 8001db2:	4b9e      	ldr	r3, [pc, #632]	; (800202c <entityCMD+0x2f0>)
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	230d      	movs	r3, #13
 8001db8:	4a9a      	ldr	r2, [pc, #616]	; (8002024 <entityCMD+0x2e8>)
 8001dba:	489d      	ldr	r0, [pc, #628]	; (8002030 <entityCMD+0x2f4>)
 8001dbc:	f003 fbb4 	bl	8005528 <__M_Error>
 8001dc0:	e1ec      	b.n	800219c <entityCMD+0x460>

	reg Wpos = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	reg Rpos = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40
	reg entitySize = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
	const u8 cmd = inputData[0];
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


	// write header------------------------------------------
	outputData[0] =   cmd;                     // CMD_ID
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8001dde:	701a      	strb	r2, [r3, #0]

	// do logic------------------------------------------
	switch(cmd) {
 8001de0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001de4:	2b0b      	cmp	r3, #11
 8001de6:	f200 81d3 	bhi.w	8002190 <entityCMD+0x454>
 8001dea:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <entityCMD+0xb4>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e4b 	.word	0x08001e4b
 8001df4:	08001ee9 	.word	0x08001ee9
 8001df8:	08001fdb 	.word	0x08001fdb
 8001dfc:	080020b9 	.word	0x080020b9
 8001e00:	08002091 	.word	0x08002091
 8001e04:	08002149 	.word	0x08002149
 8001e08:	08002171 	.word	0x08002171
 8001e0c:	08002171 	.word	0x08002171
 8001e10:	08002191 	.word	0x08002191
 8001e14:	08002191 	.word	0x08002191
 8001e18:	08001e2f 	.word	0x08001e2f
 8001e1c:	08001e21 	.word	0x08001e21

	/* **********************************************************************************************************************************
	 *  ENTITY PING
	 */
	case ENTITY_PING_CMD: {
		entitySize = 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c

#ifdef USE_ENTITY_PING
		outputData[1] = entities_ping();
#else
		outputData[1] = 1;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
#endif /* USE_ENTITY_PING */
		break;}
 8001e2c:	e1b0      	b.n	8002190 <entityCMD+0x454>

	/* **********************************************************************************************************************************
	 *  READ MAIN TYPE DIMENSIONS
	 */
	case ENTITY_READ_DIMENSIONS: {
		readEntitiesSizes((outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e3c:	1ad2      	subs	r2, r2, r3
 8001e3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e42:	4619      	mov	r1, r3
 8001e44:	f000 fe0a 	bl	8002a5c <readEntitiesSizes>
		break;}
 8001e48:	e1a2      	b.n	8002190 <entityCMD+0x454>
	 */
	case READ_ENTITY_DESCRIPTIONS: {
		//ENTITY_DBG_ASSERT_BUF( (Rpos + (ENTITIES_SIZEOF << 1)) > sizeInternal, M_EMPTY, return, "entityCMD: read size more than buffer");

		// read entity start
		TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber = readEntityNumberFromBuf(&inputData[Rpos]);
 8001e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
/************************************************************************************
 *  Macro for user copy
 */
STATIC_FORCEINLINE void MY_CTYPE_USER_DATA_MEMCPY(reg n, const void* from, void* to)
{
    switch (n) {
 8001e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d013      	beq.n	8001e9a <entityCMD+0x15e>
 8001e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d106      	bne.n	8001e88 <entityCMD+0x14c>
//    case sizeof(u64): *(u64*)to = *(u64*)from; break;
//    case sizeof(u32): *(u32*)to = *(u32*)from; break;
//    case sizeof(u16): *(u16*)to = *(u16*)from; break;
//-------------------- NOT WORK --------------------------------------------------------
    case 0: break;
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8001e7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e009      	b.n	8001e9c <entityCMD+0x160>
    default: memcpy(to, from, n); break;
 8001e88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e8c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001e90:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001e94:	f006 fef2 	bl	8008c7c <memcpy>
 8001e98:	e000      	b.n	8001e9c <entityCMD+0x160>
    case 0: break;
 8001e9a:	bf00      	nop
    }
}
 8001e9c:	bf00      	nop
#if (MAX_NUBER_OF_ENTITIES < 256U)
	entityNumber = *(inputData);
#else

    ENTITY_BYTE_CPY(ENTITIES_SIZEOF, inputData, &entityNumber);
    entityNumber &= 0x0000FFFFUL;
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
#endif /* (MAX_NUBER_OF_ENTITIES < 256U) */
    //----------------- END --------------------------------------------------------------------------------

    return entityNumber;
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		Rpos += ENTITIES_SIZEOF;
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	3302      	adds	r3, #2
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40

		// read number of entity
		//        TYPEOF_STRUCT(EntityInfo, entities_count) len; //(WARNING!!!) do not supported on old version!!!!!!!
		//        readEntityNumberFromBuf(&len, &inputData[Rpos]);
		//        Rpos += ENTITIES_SIZEOF;
		const TYPEOF_STRUCT(EntityInfo, entities_count) len = inputData[Rpos++]; // support on old version (this is glitch!!!)
 8001eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	643a      	str	r2, [r7, #64]	; 0x40
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// read descriptions function
		readEntitiesDescriptions(startEntityNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ec6:	18d1      	adds	r1, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	460a      	mov	r2, r1
 8001eda:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001ede:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001ee2:	f000 fe59 	bl	8002b98 <readEntitiesDescriptions>
		break;}
 8001ee6:	e153      	b.n	8002190 <entityCMD+0x454>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
}

// read entity & field number from input buffer by next position
STATIC_FORCEINLINE void readEntityFieldNumbersfromBuf(TYPEOF_STRUCT(EntityInfo, entities_count)* const entityNumber, TYPEOF_STRUCT(Entity, fields_count)* const fieldNumber, u8* const inputData, reg* const Rpos)
{
    reg Rpos_internal = (*Rpos);
 8001eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read entity number
     */
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001ef4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001efc:	4413      	add	r3, r2
 8001efe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 8001f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <entityCMD+0x20c>
 8001f20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d106      	bne.n	8001f36 <entityCMD+0x1fa>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8001f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e009      	b.n	8001f4a <entityCMD+0x20e>
    default: memcpy(to, from, n); break;
 8001f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f3e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f42:	f006 fe9b 	bl	8008c7c <memcpy>
 8001f46:	e000      	b.n	8001f4a <entityCMD+0x20e>
    case 0: break;
 8001f48:	bf00      	nop
}
 8001f4a:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    return entityNumber;
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
    Rpos_internal += ENTITIES_SIZEOF;
 8001f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read field number
     */
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001f60:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f68:	4413      	add	r3, r2
 8001f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fieldNumber = *(inputData);
 8001f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    return fieldNumber;
 8001f78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001f7c:	867b      	strh	r3, [r7, #50]	; 0x32
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f82:	3301      	adds	r3, #1
 8001f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    //----------------- END -----------------------------------------------
    (*Rpos) = Rpos_internal;
 8001f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f8c:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001f8e:	bf00      	nop
		TYPEOF_STRUCT(Entity, fields_count)         startFieldNumber;
		TYPEOF_STRUCT(Entity, fields_count)         len;
		readEntityFieldNumbersfromBuf(&entityNumber, &startFieldNumber, inputData, &Rpos);

		//read number of fields
		len = readFieldNumberFromBuf(&inputData[Rpos]);
 8001f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	fieldNumber = *(inputData);
 8001f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    return fieldNumber;
 8001fa4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001fa8:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		Rpos += ENTITY_FIELD_SIZEOF;
 8001fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fae:	3301      	adds	r3, #1
 8001fb0:	643b      	str	r3, [r7, #64]	; 0x40

		readEntityFields(entityNumber, startFieldNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001fb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fb4:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fbc:	18d4      	adds	r4, r2, r3
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4623      	mov	r3, r4
 8001fd4:	f000 fe9c 	bl	8002d10 <readEntityFields>
		break;}
 8001fd8:	e0da      	b.n	8002190 <entityCMD+0x454>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    reg Rpos_internal = (*Rpos);
 8001fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001fe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fea:	4413      	add	r3, r2
 8001fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fee:	2302      	movs	r3, #2
 8001ff0:	677b      	str	r3, [r7, #116]	; 0x74
 8001ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ff4:	673b      	str	r3, [r7, #112]	; 0x70
 8001ff6:	f107 0320 	add.w	r3, r7, #32
 8001ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
    switch (n) {
 8001ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d018      	beq.n	8002034 <entityCMD+0x2f8>
 8002002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002004:	2b01      	cmp	r3, #1
 8002006:	d104      	bne.n	8002012 <entityCMD+0x2d6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	e011      	b.n	8002036 <entityCMD+0x2fa>
    default: memcpy(to, from, n); break;
 8002012:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002014:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002016:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002018:	f006 fe30 	bl	8008c7c <memcpy>
 800201c:	e00b      	b.n	8002036 <entityCMD+0x2fa>
 800201e:	bf00      	nop
 8002020:	0800d620 	.word	0x0800d620
 8002024:	0800d5b0 	.word	0x0800d5b0
 8002028:	0800d5e0 	.word	0x0800d5e0
 800202c:	0800d66c 	.word	0x0800d66c
 8002030:	0800d63c 	.word	0x0800d63c
    case 0: break;
 8002034:	bf00      	nop
}
 8002036:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	b29b      	uxth	r3, r3
 800203c:	623b      	str	r3, [r7, #32]
    return entityNumber;
 800203e:	6a3b      	ldr	r3, [r7, #32]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    Rpos_internal += ENTITIES_SIZEOF;
 8002042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002044:	3302      	adds	r3, #2
 8002046:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8002048:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800204c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800204e:	4413      	add	r3, r2
 8002050:	66bb      	str	r3, [r7, #104]	; 0x68
	fieldNumber = *(inputData);
 8002052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    return fieldNumber;
 800205a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800205e:	84fb      	strh	r3, [r7, #38]	; 0x26
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8002060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002062:	3301      	adds	r3, #1
 8002064:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*Rpos) = Rpos_internal;
 8002066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002068:	643b      	str	r3, [r7, #64]	; 0x40
}
 800206a:	bf00      	nop

		TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
		TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
		readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

		readFieldValue(entityNumber, fieldNumber, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 800206c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800206e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002076:	18d4      	adds	r4, r2, r3
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	4622      	mov	r2, r4
 800208a:	f000 ff61 	bl	8002f50 <readFieldValue>
		break;}
 800208e:	e07f      	b.n	8002190 <entityCMD+0x454>

	case READ_SEVERAL_VALUES: {
		entitySize = (sizeInternal - 1U);
 8002090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002094:	3b01      	subs	r3, #1
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
		readSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	18d0      	adds	r0, r2, r3
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020a4:	18d1      	adds	r1, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80020b2:	f001 f8d9 	bl	8003268 <readSeveralFieldsValues>
		break;}
 80020b6:	e06b      	b.n	8002190 <entityCMD+0x454>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	663b      	str	r3, [r7, #96]	; 0x60
    reg Rpos_internal = (*Rpos);
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80020c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c4:	4413      	add	r3, r2
 80020c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80020c8:	2302      	movs	r3, #2
 80020ca:	657b      	str	r3, [r7, #84]	; 0x54
 80020cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (n) {
 80020d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <entityCMD+0x3bc>
 80020dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d104      	bne.n	80020ec <entityCMD+0x3b0>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80020e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e006      	b.n	80020fa <entityCMD+0x3be>
    default: memcpy(to, from, n); break;
 80020ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020f2:	f006 fdc3 	bl	8008c7c <memcpy>
 80020f6:	e000      	b.n	80020fa <entityCMD+0x3be>
    case 0: break;
 80020f8:	bf00      	nop
}
 80020fa:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	617b      	str	r3, [r7, #20]
    return entityNumber;
 8002102:	697b      	ldr	r3, [r7, #20]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002104:	61fb      	str	r3, [r7, #28]
    Rpos_internal += ENTITIES_SIZEOF;
 8002106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002108:	3302      	adds	r3, #2
 800210a:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800210c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800210e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002110:	4413      	add	r3, r2
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
	fieldNumber = *(inputData);
 8002114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    return fieldNumber;
 800211c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8002120:	837b      	strh	r3, [r7, #26]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8002122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002124:	3301      	adds	r3, #1
 8002126:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*Rpos) = Rpos_internal;
 8002128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
}
 800212c:	bf00      	nop

		TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
		TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
		readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

		setFieldValue(entityNumber, fieldNumber, (inputData + Rpos), (sizeInternal - Rpos));
 800212e:	69f8      	ldr	r0, [r7, #28]
 8002130:	8b79      	ldrh	r1, [r7, #26]
 8002132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	18d4      	adds	r4, r2, r3
 8002138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4622      	mov	r2, r4
 8002142:	f001 faed 	bl	8003720 <setFieldValue>
		break;}
 8002146:	e023      	b.n	8002190 <entityCMD+0x454>

	case WRITE_SEVERAL_VALUES: {
		entitySize = (sizeInternal - 1U);
 8002148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800214c:	3b01      	subs	r3, #1
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
		setSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	18d0      	adds	r0, r2, r3
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800215c:	18d1      	adds	r1, r2, r3
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800216a:	f001 fc1d 	bl	80039a8 <setSeveralFieldsValues>
		break;}
 800216e:	e00f      	b.n	8002190 <entityCMD+0x454>
	/* **********************************************************************************************************************************
	 *  WRITE/READ Values
	 */
	case READ_SEVERAL_VALUES_GLUED :
	case WRITE_SEVERAL_VALUES_GLUED: {
		proceedGluedValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	18d0      	adds	r0, r2, r3
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800217c:	18d1      	adds	r1, r2, r3
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800218a:	f001 fe55 	bl	8003e38 <proceedGluedValues>
		break;}
 800218e:	bf00      	nop
	case ENTITY_FLASH_OPERATION: {
		break;}

	}

	(*size) = (Wpos + entitySize);
 8002190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
	UNUSED(ctx);
}
 800219c:	37d4      	adds	r7, #212	; 0xd4
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	bf00      	nop

080021a4 <deleteEntitityFieldsInternal>:
 * **********************************************************************************************************************************
 */

/// delete some entity for internal using
static void deleteEntitityFieldsInternal(const reg entityNumber)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((entityNumber > entityInfo.entities_count), M_EMPTY, return, "deleteEntitityFieldsInternal: No entity for delete!!!");
 80021ac:	4b35      	ldr	r3, [pc, #212]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d910      	bls.n	80021d8 <deleteEntitityFieldsInternal+0x34>
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	bf8c      	ite	hi
 80021c0:	2301      	movhi	r3, #1
 80021c2:	2300      	movls	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <deleteEntitityFieldsInternal+0xe4>)
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	231b      	movs	r3, #27
 80021ce:	4a2f      	ldr	r2, [pc, #188]	; (800228c <deleteEntitityFieldsInternal+0xe8>)
 80021d0:	482f      	ldr	r0, [pc, #188]	; (8002290 <deleteEntitityFieldsInternal+0xec>)
 80021d2:	f003 f9a9 	bl	8005528 <__M_Error>
 80021d6:	e051      	b.n	800227c <deleteEntitityFieldsInternal+0xd8>
    M_Assert_BreakSaveCheck((entityInfo.entities[entityNumber] == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]))), M_EMPTY, return, "initEntity: entity number: %d is null", entityNumber);
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <deleteEntitityFieldsInternal+0x70>
 80021e8:	4b26      	ldr	r3, [pc, #152]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4619      	mov	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <deleteEntitityFieldsInternal+0xf0>)
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	231c      	movs	r3, #28
 800220a:	4a20      	ldr	r2, [pc, #128]	; (800228c <deleteEntitityFieldsInternal+0xe8>)
 800220c:	4822      	ldr	r0, [pc, #136]	; (8002298 <deleteEntitityFieldsInternal+0xf4>)
 800220e:	f003 f98b 	bl	8005528 <__M_Error>
 8002212:	e033      	b.n	800227c <deleteEntitityFieldsInternal+0xd8>
    if(entityInfo.entities[entityNumber]->isHeap) {
        free(entityInfo.entities[entityNumber]->pointer);
        entityInfo.entities[entityNumber]->pointer = NULL;
    }
#else
    free(entityInfo.entities[entityNumber]->pointer);
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f006 fd22 	bl	8008c6c <free>
    entityInfo.entities[entityNumber]->pointer = NULL;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
#endif /* USE_ENTITY_USER_SPACE */

    free(entityInfo.entities[entityNumber]->fields);
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4618      	mov	r0, r3
 8002248:	f006 fd10 	bl	8008c6c <free>
    entityInfo.entities[entityNumber]->fields = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]->fields));
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]

    free(entityInfo.entities[entityNumber]);
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f006 fcff 	bl	8008c6c <free>
    entityInfo.entities[entityNumber] = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]));
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000290 	.word	0x20000290
 8002288:	0800d6ec 	.word	0x0800d6ec
 800228c:	0800d68c 	.word	0x0800d68c
 8002290:	0800d6c0 	.word	0x0800d6c0
 8002294:	0800d788 	.word	0x0800d788
 8002298:	0800d724 	.word	0x0800d724

0800229c <deleteEntities>:
}


/// delete all entities and deallocation all memory
void deleteEntities(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <deleteEntities+0x44>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	603b      	str	r3, [r7, #0]

    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	e005      	b.n	80022ba <deleteEntities+0x1e>
        deleteEntitityFieldsInternal(i);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff78 	bl	80021a4 <deleteEntitityFieldsInternal>
    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3301      	adds	r3, #1
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d3f5      	bcc.n	80022ae <deleteEntities+0x12>
    }

    free(entityInfo.entities);
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <deleteEntities+0x44>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f006 fcd0 	bl	8008c6c <free>
    memset(&entityInfo, 0, sizeof(entityInfo));
 80022cc:	220c      	movs	r2, #12
 80022ce:	2100      	movs	r1, #0
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <deleteEntities+0x44>)
 80022d2:	f006 fcfb 	bl	8008ccc <memset>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000290 	.word	0x20000290

080022e4 <newEntities>:



/// allocation new entities pointers
int newEntities(const reg numberOfEntities)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af04      	add	r7, sp, #16
 80022ea:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((numberOfEntities > MAX_NUBER_OF_ENTITIES), M_EMPTY, return ENTITY_ERROR, "newEntities: No valid input number of entities, value: %d, max: %d", numberOfEntities, MAX_NUBER_OF_ENTITIES);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022f2:	d915      	bls.n	8002320 <newEntities+0x3c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022fa:	bf8c      	ite	hi
 80022fc:	2301      	movhi	r3, #1
 80022fe:	2300      	movls	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <newEntities+0x8c>)
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2359      	movs	r3, #89	; 0x59
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <newEntities+0x90>)
 8002316:	4818      	ldr	r0, [pc, #96]	; (8002378 <newEntities+0x94>)
 8002318:	f003 f906 	bl	8005528 <__M_Error>
 800231c:	2300      	movs	r3, #0
 800231e:	e022      	b.n	8002366 <newEntities+0x82>

    deleteEntities(); // delete all entities
 8002320:	f7ff ffbc 	bl	800229c <deleteEntities>

    entityInfo.entities = (Entity**) calloc(numberOfEntities, sizeof(Entity*)); // allocation & initialization all entity pointers
 8002324:	2104      	movs	r1, #4
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f006 f9d8 	bl	80086dc <calloc>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <newEntities+0x98>)
 8002332:	609a      	str	r2, [r3, #8]
    M_Assert_BreakSaveCheck((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities))), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entity pointers");
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <newEntities+0x98>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d110      	bne.n	800235e <newEntities+0x7a>
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <newEntities+0x98>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4619      	mov	r1, r3
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <newEntities+0x9c>)
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	235e      	movs	r3, #94	; 0x5e
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <newEntities+0x90>)
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <newEntities+0xa0>)
 8002356:	f003 f8e7 	bl	8005528 <__M_Error>
 800235a:	2300      	movs	r3, #0
 800235c:	e003      	b.n	8002366 <newEntities+0x82>

    entityInfo.allocated_entity_pointers = numberOfEntities;
 800235e:	4a07      	ldr	r2, [pc, #28]	; (800237c <newEntities+0x98>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]
    return ENTITY_OK;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	0800d808 	.word	0x0800d808
 8002374:	0800d68c 	.word	0x0800d68c
 8002378:	0800d7dc 	.word	0x0800d7dc
 800237c:	20000290 	.word	0x20000290
 8002380:	0800d894 	.word	0x0800d894
 8002384:	0800d84c 	.word	0x0800d84c

08002388 <initEntity>:


/// allocation entitites pointer & fields
int initEntity(reg* const entityNumber, const reg NumberOfFields, const reg pointerSize, const char descr[ENTITY_DESCRIPTION_SIZE], const b isCustomSpace, const b isHeap, void* arg)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b093      	sub	sp, #76	; 0x4c
 800238c:	af04      	add	r7, sp, #16
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((NumberOfFields > MAX_NUBER_OF_FIELDS), M_EMPTY, return ENTITY_ERROR, "initEntity: No valid input number of fields, value: %d, max: %d", NumberOfFields, MAX_NUBER_OF_FIELDS);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2bff      	cmp	r3, #255	; 0xff
 800239a:	d913      	bls.n	80023c4 <initEntity+0x3c>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	bf8c      	ite	hi
 80023a2:	2301      	movhi	r3, #1
 80023a4:	2300      	movls	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	23ff      	movs	r3, #255	; 0xff
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	4b71      	ldr	r3, [pc, #452]	; (8002578 <initEntity+0x1f0>)
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2368      	movs	r3, #104	; 0x68
 80023b8:	4a70      	ldr	r2, [pc, #448]	; (800257c <initEntity+0x1f4>)
 80023ba:	4871      	ldr	r0, [pc, #452]	; (8002580 <initEntity+0x1f8>)
 80023bc:	f003 f8b4 	bl	8005528 <__M_Error>
 80023c0:	2300      	movs	r3, #0
 80023c2:	e0d4      	b.n	800256e <initEntity+0x1e6>

    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80023c4:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <initEntity+0x1fc>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    const TYPEOF_STRUCT(EntityInfo, allocated_entity_pointers) allocated_entity_pointers = entityInfo.allocated_entity_pointers;
 80023ca:	4b6e      	ldr	r3, [pc, #440]	; (8002584 <initEntity+0x1fc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    M_Assert_BreakSaveCheck((entities_count >= allocated_entity_pointers), M_EMPTY, return ENTITY_ERROR, "initEntity: There is no free entity for initialization!!!, use /newEntities/ function before");
 80023d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d310      	bcc.n	80023fa <initEntity+0x72>
 80023d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	bf2c      	ite	cs
 80023e0:	2301      	movcs	r3, #1
 80023e2:	2300      	movcc	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	4b67      	ldr	r3, [pc, #412]	; (8002588 <initEntity+0x200>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	236d      	movs	r3, #109	; 0x6d
 80023ee:	4a63      	ldr	r2, [pc, #396]	; (800257c <initEntity+0x1f4>)
 80023f0:	4866      	ldr	r0, [pc, #408]	; (800258c <initEntity+0x204>)
 80023f2:	f003 f899 	bl	8005528 <__M_Error>
 80023f6:	2300      	movs	r3, #0
 80023f8:	e0b9      	b.n	800256e <initEntity+0x1e6>

    char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	f107 0318 	add.w	r3, r7, #24
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	721a      	strb	r2, [r3, #8]

    // allocation pointer to Entity--------------------------------------------------------------------------------------------------------------------------------------------------------------
    Entity* const new_entity = entityInfo.entities[entities_count] = (Entity*) calloc(1, sizeof(Entity));
 800240a:	4b5e      	ldr	r3, [pc, #376]	; (8002584 <initEntity+0x1fc>)
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	18d4      	adds	r4, r2, r3
 8002414:	2110      	movs	r1, #16
 8002416:	2001      	movs	r0, #1
 8002418:	f006 f960 	bl	80086dc <calloc>
 800241c:	4603      	mov	r3, r0
 800241e:	6023      	str	r3, [r4, #0]
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    M_Assert_BreakSaveCheck(new_entity == NULLPTR(Entity*), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entitity");
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <initEntity+0xc2>
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	4b55      	ldr	r3, [pc, #340]	; (8002590 <initEntity+0x208>)
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2373      	movs	r3, #115	; 0x73
 800243e:	4a4f      	ldr	r2, [pc, #316]	; (800257c <initEntity+0x1f4>)
 8002440:	4854      	ldr	r0, [pc, #336]	; (8002594 <initEntity+0x20c>)
 8002442:	f003 f871 	bl	8005528 <__M_Error>
 8002446:	2300      	movs	r3, #0
 8002448:	e091      	b.n	800256e <initEntity+0x1e6>

    // copy entity description-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if(descr) {
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <initEntity+0xd4>
        memcpy(new_entity->descr, descr, ENTITY_DESCRIPTION_SIZE);
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	3304      	adds	r3, #4
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e00a      	b.n	8002472 <initEntity+0xea>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)descr, (u8 *)new_entity->descr);
    } else {
        sprintf(str, "E%d", entities_count);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002462:	494d      	ldr	r1, [pc, #308]	; (8002598 <initEntity+0x210>)
 8002464:	4618      	mov	r0, r3
 8002466:	f007 fd6b 	bl	8009f40 <siprintf>
        memcpy(new_entity->descr, str, ENTITY_DESCRIPTION_SIZE);
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	3304      	adds	r3, #4
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, (isCustomSpace ? "newEntities: Invalid user input space" : "newEntities: No memory for allocation Entitity"));

#else

    new_entity->pointer = calloc(1, pointerSize);
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	2001      	movs	r0, #1
 8002476:	f006 f931 	bl	80086dc <calloc>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	601a      	str	r2, [r3, #0]
    UNUSED(isCustomSpace);
    UNUSED(isHeap);
    UNUSED(arg);

    M_Assert_BreakSaveCheck((new_entity->pointer == NULL), {
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d113      	bne.n	80024b2 <initEntity+0x12a>
 800248a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800248c:	f7ff fe8a 	bl	80021a4 <deleteEntitityFieldsInternal>
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <initEntity+0x208>)
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2396      	movs	r3, #150	; 0x96
 80024a6:	4a35      	ldr	r2, [pc, #212]	; (800257c <initEntity+0x1f4>)
 80024a8:	483c      	ldr	r0, [pc, #240]	; (800259c <initEntity+0x214>)
 80024aa:	f003 f83d 	bl	8005528 <__M_Error>
 80024ae:	2300      	movs	r3, #0
 80024b0:	e05d      	b.n	800256e <initEntity+0x1e6>

#endif /* USE_ENTITY_USER_SPACE */


    // allocation pointer to Fields------------------------------------------------------------------------------------------------------------------------------------------------------------
    new_entity->fields = (EntityField*) calloc(NumberOfFields, sizeof(EntityField));
 80024b2:	2120      	movs	r1, #32
 80024b4:	68b8      	ldr	r0, [r7, #8]
 80024b6:	f006 f911 	bl	80086dc <calloc>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	60da      	str	r2, [r3, #12]
    M_Assert_BreakSaveCheck((new_entity->fields == NULLPTR(TYPEOF_STRUCT(Entity, fields))), {
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d113      	bne.n	80024f2 <initEntity+0x16a>
 80024ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024cc:	f7ff fe6a 	bl	80021a4 <deleteEntitityFieldsInternal>
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <initEntity+0x218>)
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	239f      	movs	r3, #159	; 0x9f
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <initEntity+0x1f4>)
 80024e8:	482e      	ldr	r0, [pc, #184]	; (80025a4 <initEntity+0x21c>)
 80024ea:	f003 f81d 	bl	8005528 <__M_Error>
 80024ee:	2300      	movs	r3, #0
 80024f0:	e03d      	b.n	800256e <initEntity+0x1e6>
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, "newEntities: No memory for allocation EntityField");

    new_entity->fields_count = NumberOfFields;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	811a      	strh	r2, [r3, #8]

    // initialization Fields-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    for(reg i = 0; i < NumberOfFields; ++i) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
 80024fe:	e028      	b.n	8002552 <initEntity+0x1ca>
        EntityField* const    field = &new_entity->fields[i];
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	4413      	add	r3, r2
 800250a:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef USE_ENTITY_CALLBACKS

#   ifdef USE_ENTITY_READ_CALLBACK
        field->rdCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
        field->rdCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
#   endif /* USE_ENTITY_READ_CALLBACK */

#   ifdef USE_ENTITY_WRITE_CALLBACK
        field->wrCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
        field->wrCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
#   endif /* USE_ENTITY_WRITE_CALLBACK */

#endif /* USE_ENTITY_CALLBACKS */

        field->bitFlags  = 0;
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
        field->shift     = 0;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	2200      	movs	r2, #0
 800252e:	615a      	str	r2, [r3, #20]
        field->type      = VOID_TYPE;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	2200      	movs	r2, #0
 8002534:	761a      	strb	r2, [r3, #24]

        sprintf(str, "F%d", i);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253c:	491a      	ldr	r1, [pc, #104]	; (80025a8 <initEntity+0x220>)
 800253e:	4618      	mov	r0, r3
 8002540:	f007 fcfe 	bl	8009f40 <siprintf>
        memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	3319      	adds	r3, #25
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]
    for(reg i = 0; i < NumberOfFields; ++i) {
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	3301      	adds	r3, #1
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
 8002552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3d2      	bcc.n	8002500 <initEntity+0x178>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);
    }

    (*entityNumber) = entities_count;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	601a      	str	r2, [r3, #0]
    ++entities_count;
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	3301      	adds	r3, #1
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
    entityInfo.entities_count = entities_count;
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <initEntity+0x1fc>)
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	6053      	str	r3, [r2, #4]
    return ENTITY_OK;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	373c      	adds	r7, #60	; 0x3c
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	bf00      	nop
 8002578:	0800d8f4 	.word	0x0800d8f4
 800257c:	0800d68c 	.word	0x0800d68c
 8002580:	0800d8cc 	.word	0x0800d8cc
 8002584:	20000290 	.word	0x20000290
 8002588:	0800d964 	.word	0x0800d964
 800258c:	0800d934 	.word	0x0800d934
 8002590:	0800d9e4 	.word	0x0800d9e4
 8002594:	0800d9c4 	.word	0x0800d9c4
 8002598:	0800da14 	.word	0x0800da14
 800259c:	0800da18 	.word	0x0800da18
 80025a0:	0800da78 	.word	0x0800da78
 80025a4:	0800da38 	.word	0x0800da38
 80025a8:	0800daac 	.word	0x0800daac

080025ac <initField>:
 * **********************************************************************************************************************************
 */

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	; 0x40
 80025b0:	af04      	add	r7, sp, #16
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL), M_EMPTY, return ENTITY_ERROR, "initField: No valid input");
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <initField+0x1a>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d112      	bne.n	80025ec <initField+0x40>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <initField+0x26>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <initField+0x2a>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <initField+0x2c>
 80025d6:	2300      	movs	r3, #0
 80025d8:	b2d9      	uxtb	r1, r3
 80025da:	4b62      	ldr	r3, [pc, #392]	; (8002764 <initField+0x1b8>)
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	23cf      	movs	r3, #207	; 0xcf
 80025e0:	4a61      	ldr	r2, [pc, #388]	; (8002768 <initField+0x1bc>)
 80025e2:	4862      	ldr	r0, [pc, #392]	; (800276c <initField+0x1c0>)
 80025e4:	f002 ffa0 	bl	8005528 <__M_Error>
 80025e8:	2300      	movs	r3, #0
 80025ea:	e0b7      	b.n	800275c <initField+0x1b0>

//#ifdef USE_ENTITY_REGISTER
//    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && !(type == REG_TYPE || type == SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initField: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
//#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	891b      	ldrh	r3, [r3, #8]
 80025f6:	857b      	strh	r3, [r7, #42]	; 0x2a

    M_Assert_BreakElseSaveCheck((fields_count > fieldNumber_readed), {
 80025f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f080 8099 	bcs.w	8002734 <initField+0x188>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	015b      	lsls	r3, r3, #5
 800260a:	4413      	add	r3, r2
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <initField+0x88>
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	4b53      	ldr	r3, [pc, #332]	; (8002770 <initField+0x1c4>)
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	23da      	movs	r3, #218	; 0xda
 8002628:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <initField+0x1bc>)
 800262a:	4852      	ldr	r0, [pc, #328]	; (8002774 <initField+0x1c8>)
 800262c:	f002 ff7c 	bl	8005528 <__M_Error>
 8002630:	2300      	movs	r3, #0
 8002632:	e093      	b.n	800275c <initField+0x1b0>
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	615a      	str	r2, [r3, #20]
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002646:	761a      	strb	r2, [r3, #24]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10f      	bne.n	8002678 <initField+0xcc>
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4619      	mov	r1, r3
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <initField+0x1cc>)
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	23e1      	movs	r3, #225	; 0xe1
 800266c:	4a3e      	ldr	r2, [pc, #248]	; (8002768 <initField+0x1bc>)
 800266e:	4843      	ldr	r0, [pc, #268]	; (800277c <initField+0x1d0>)
 8002670:	f002 ff5a 	bl	8005528 <__M_Error>
 8002674:	2300      	movs	r3, #0
 8002676:	e071      	b.n	800275c <initField+0x1b0>
 8002678:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800267c:	61fb      	str	r3, [r7, #28]
}


STATIC_FORCEINLINE reg getMYCTypeLen(reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b11      	cmp	r3, #17
 8002682:	d804      	bhi.n	800268e <initField+0xe2>
        return typeLengthMappingArray[type];
 8002684:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <initField+0x1d4>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	e000      	b.n	8002690 <initField+0xe4>
    }
    return 0;
 800268e:	2300      	movs	r3, #0
 8002690:	2b04      	cmp	r3, #4
 8002692:	d924      	bls.n	80026de <initField+0x132>
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01f      	beq.n	80026de <initField+0x132>
 800269e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80026a2:	61bb      	str	r3, [r7, #24]
    if(type < TYPE_ARRAY_LENGTH) {
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b11      	cmp	r3, #17
 80026a8:	d804      	bhi.n	80026b4 <initField+0x108>
        return typeLengthMappingArray[type];
 80026aa:	4a35      	ldr	r2, [pc, #212]	; (8002780 <initField+0x1d4>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b2:	e000      	b.n	80026b6 <initField+0x10a>
    return 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d906      	bls.n	80026c8 <initField+0x11c>
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <initField+0x11c>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <initField+0x11e>
 80026c8:	2300      	movs	r3, #0
 80026ca:	b2d9      	uxtb	r1, r3
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <initField+0x1d8>)
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	23e2      	movs	r3, #226	; 0xe2
 80026d2:	4a25      	ldr	r2, [pc, #148]	; (8002768 <initField+0x1bc>)
 80026d4:	482c      	ldr	r0, [pc, #176]	; (8002788 <initField+0x1dc>)
 80026d6:	f002 ff27 	bl	8005528 <__M_Error>
 80026da:	2300      	movs	r3, #0
 80026dc:	e03e      	b.n	800275c <initField+0x1b0>
 80026de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <initField+0x142>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	3319      	adds	r3, #25
 80026e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <initField+0x178>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10c      	bne.n	8002718 <initField+0x16c>
 80026fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002702:	617b      	str	r3, [r7, #20]
    if(type < TYPE_ARRAY_LENGTH) {
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b11      	cmp	r3, #17
 8002708:	d804      	bhi.n	8002714 <initField+0x168>
        return typeLengthMappingArray[type];
 800270a:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <initField+0x1d4>)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	e002      	b.n	800271a <initField+0x16e>
    return 0;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <initField+0x16e>
 8002718:	2304      	movs	r3, #4
 800271a:	461a      	mov	r2, r3
 800271c:	2100      	movs	r1, #0
 800271e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002720:	f006 fad4 	bl	8008ccc <memset>
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	3301      	adds	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	2301      	movs	r3, #1
 8002732:	e013      	b.n	800275c <initField+0x1b0>
 8002734:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002738:	429a      	cmp	r2, r3
 800273a:	bf34      	ite	cc
 800273c:	2301      	movcc	r3, #1
 800273e:	2300      	movcs	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002746:	9302      	str	r3, [sp, #8]
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <initField+0x1e0>)
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	23d8      	movs	r3, #216	; 0xd8
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <initField+0x1bc>)
 8002754:	480e      	ldr	r0, [pc, #56]	; (8002790 <initField+0x1e4>)
 8002756:	f002 fee7 	bl	8005528 <__M_Error>
                                    ++fieldNumber_readed;
                                    (*fieldNumber) = fieldNumber_readed;
                                    return ENTITY_OK;
                                }, M_EMPTY, M_EMPTY, "initField: fieldNumber: &d,  is too long than allocated fields_count: %d", fieldNumber_readed, fields_count);

    return ENTITY_ERROR;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3730      	adds	r7, #48	; 0x30
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	0800daec 	.word	0x0800daec
 8002768:	0800d68c 	.word	0x0800d68c
 800276c:	0800dab0 	.word	0x0800dab0
 8002770:	0800db2c 	.word	0x0800db2c
 8002774:	0800db08 	.word	0x0800db08
 8002778:	0800db58 	.word	0x0800db58
 800277c:	0800db48 	.word	0x0800db48
 8002780:	0800f788 	.word	0x0800f788
 8002784:	0800dbc0 	.word	0x0800dbc0
 8002788:	0800db74 	.word	0x0800db74
 800278c:	0800dc28 	.word	0x0800dc28
 8002790:	0800dbe0 	.word	0x0800dbe0

08002794 <initFieldArray>:

/// init field-array
int initFieldArray(Entity* const entityInst, reg* const fieldNumber, TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const int arrayLen, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr, const int startNum)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b096      	sub	sp, #88	; 0x58
 8002798:	af04      	add	r7, sp, #16
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL) || (arrayLen == 0), M_EMPTY, return ENTITY_ERROR, "initFieldArray: No valid input");
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <initFieldArray+0x20>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <initFieldArray+0x20>
 80027ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d116      	bne.n	80027e2 <initFieldArray+0x4e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <initFieldArray+0x32>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <initFieldArray+0x32>
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <initFieldArray+0x36>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <initFieldArray+0x38>
 80027ca:	2300      	movs	r3, #0
 80027cc:	b2d9      	uxtb	r1, r3
 80027ce:	4b93      	ldr	r3, [pc, #588]	; (8002a1c <initFieldArray+0x288>)
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	f240 1301 	movw	r3, #257	; 0x101
 80027d6:	4a92      	ldr	r2, [pc, #584]	; (8002a20 <initFieldArray+0x28c>)
 80027d8:	4892      	ldr	r0, [pc, #584]	; (8002a24 <initFieldArray+0x290>)
 80027da:	f002 fea5 	bl	8005528 <__M_Error>
 80027de:	2300      	movs	r3, #0
 80027e0:	e118      	b.n	8002a14 <initFieldArray+0x280>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && (type != REG_TYPE || type != SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initFieldArray: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d022      	beq.n	8002832 <initFieldArray+0x9e>
 80027ec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d103      	bne.n	80027fc <initFieldArray+0x68>
 80027f4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80027f8:	2b11      	cmp	r3, #17
 80027fa:	d01a      	beq.n	8002832 <initFieldArray+0x9e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <initFieldArray+0x86>
 8002806:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800280a:	2b10      	cmp	r3, #16
 800280c:	d103      	bne.n	8002816 <initFieldArray+0x82>
 800280e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002812:	2b11      	cmp	r3, #17
 8002814:	d001      	beq.n	800281a <initFieldArray+0x86>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <initFieldArray+0x88>
 800281a:	2300      	movs	r3, #0
 800281c:	b2d9      	uxtb	r1, r3
 800281e:	4b82      	ldr	r3, [pc, #520]	; (8002a28 <initFieldArray+0x294>)
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002826:	4a7e      	ldr	r2, [pc, #504]	; (8002a20 <initFieldArray+0x28c>)
 8002828:	4880      	ldr	r0, [pc, #512]	; (8002a2c <initFieldArray+0x298>)
 800282a:	f002 fe7d 	bl	8005528 <__M_Error>
 800282e:	2300      	movs	r3, #0
 8002830:	e0f0      	b.n	8002a14 <initFieldArray+0x280>
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	647b      	str	r3, [r7, #68]	; 0x44
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	891b      	ldrh	r3, [r3, #8]
 800283c:	87fb      	strh	r3, [r7, #62]	; 0x3e

#ifdef USE_ENTITY_POINTER
	const reg typeLen = (bitFlags & ENTITY_POINTER_MSK) ? sizeof(reg) : getMYCTypeLen(type);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10c      	bne.n	8002862 <initFieldArray+0xce>
 8002848:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
    if(type < TYPE_ARRAY_LENGTH) {
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	2b11      	cmp	r3, #17
 8002852:	d804      	bhi.n	800285e <initFieldArray+0xca>
        return typeLengthMappingArray[type];
 8002854:	4a76      	ldr	r2, [pc, #472]	; (8002a30 <initFieldArray+0x29c>)
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	e002      	b.n	8002864 <initFieldArray+0xd0>
    return 0;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <initFieldArray+0xd0>
 8002862:	2304      	movs	r3, #4
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
#else
	const reg typeLen = getMYCTypeLen(type);
#endif /* USE_ENTITY_POINTER */

    const reg need_count = (fieldNumber_readed + arrayLen);
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800286a:	4413      	add	r3, r2
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    M_Assert_BreakSaveCheck(fields_count < need_count, M_EMPTY, return ENTITY_ERROR, "initFieldArray: need fields Number: &d,  is too long than allocated fields_count: %d", need_count, fields_count);
 800286e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002872:	429a      	cmp	r2, r3
 8002874:	d915      	bls.n	80028a2 <initFieldArray+0x10e>
 8002876:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800287a:	429a      	cmp	r2, r3
 800287c:	bf8c      	ite	hi
 800287e:	2301      	movhi	r3, #1
 8002880:	2300      	movls	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4619      	mov	r1, r3
 8002886:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002888:	9302      	str	r3, [sp, #8]
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	4b69      	ldr	r3, [pc, #420]	; (8002a34 <initFieldArray+0x2a0>)
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f240 1311 	movw	r3, #273	; 0x111
 8002896:	4a62      	ldr	r2, [pc, #392]	; (8002a20 <initFieldArray+0x28c>)
 8002898:	4867      	ldr	r0, [pc, #412]	; (8002a38 <initFieldArray+0x2a4>)
 800289a:	f002 fe45 	bl	8005528 <__M_Error>
 800289e:	2300      	movs	r3, #0
 80028a0:	e0b8      	b.n	8002a14 <initFieldArray+0x280>

	char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	721a      	strb	r2, [r3, #8]
	bitFlags |= ENTITY_ARRAY_MSK;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < arrayLen; ++i) {
 80028ba:	2300      	movs	r3, #0
 80028bc:	643b      	str	r3, [r7, #64]	; 0x40
 80028be:	e094      	b.n	80029ea <initFieldArray+0x256>
		EntityField* const    field = &entityInst->fields[fieldNumber_readed];
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	4413      	add	r3, r2
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
		M_Assert_BreakSaveCheck((field == NULLPTR(EntityField *)), M_EMPTY, return ENTITY_ERROR, "initFieldArray: No valid field");
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d110      	bne.n	80028f4 <initFieldArray+0x160>
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4619      	mov	r1, r3
 80028e0:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <initFieldArray+0x2a8>)
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	f240 1317 	movw	r3, #279	; 0x117
 80028e8:	4a4d      	ldr	r2, [pc, #308]	; (8002a20 <initFieldArray+0x28c>)
 80028ea:	4855      	ldr	r0, [pc, #340]	; (8002a40 <initFieldArray+0x2ac>)
 80028ec:	f002 fe1c 	bl	8005528 <__M_Error>
 80028f0:	2300      	movs	r3, #0
 80028f2:	e08f      	b.n	8002a14 <initFieldArray+0x280>

		field->bitFlags   = bitFlags;
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	611a      	str	r2, [r3, #16]
		field->shift      = shift;
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	615a      	str	r2, [r3, #20]
		field->type       = type;
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8002906:	761a      	strb	r2, [r3, #24]

		// check pointer
		void* ptr = entityInst->pointer + shift;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4413      	add	r3, r2
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
		M_Assert_BreakSaveCheck((ptr == NULL), M_EMPTY, return ENTITY_ERROR, "initFieldArray: No valid pointer");
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d110      	bne.n	800293a <initFieldArray+0x1a6>
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4619      	mov	r1, r3
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <initFieldArray+0x2b0>)
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f240 131f 	movw	r3, #287	; 0x11f
 800292e:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <initFieldArray+0x28c>)
 8002930:	4845      	ldr	r0, [pc, #276]	; (8002a48 <initFieldArray+0x2b4>)
 8002932:	f002 fdf9 	bl	8005528 <__M_Error>
 8002936:	2300      	movs	r3, #0
 8002938:	e06c      	b.n	8002a14 <initFieldArray+0x280>
		M_Assert_BreakSaveCheck(
 800293a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    if(type < TYPE_ARRAY_LENGTH) {
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	2b11      	cmp	r3, #17
 8002944:	d804      	bhi.n	8002950 <initFieldArray+0x1bc>
        return typeLengthMappingArray[type];
 8002946:	4a3a      	ldr	r2, [pc, #232]	; (8002a30 <initFieldArray+0x29c>)
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	e000      	b.n	8002952 <initFieldArray+0x1be>
    return 0;
 8002950:	2300      	movs	r3, #0
 8002952:	2b04      	cmp	r3, #4
 8002954:	d925      	bls.n	80029a2 <initFieldArray+0x20e>
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <initFieldArray+0x20e>
 8002960:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002964:	623b      	str	r3, [r7, #32]
    if(type < TYPE_ARRAY_LENGTH) {
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b11      	cmp	r3, #17
 800296a:	d804      	bhi.n	8002976 <initFieldArray+0x1e2>
        return typeLengthMappingArray[type];
 800296c:	4a30      	ldr	r2, [pc, #192]	; (8002a30 <initFieldArray+0x29c>)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	e000      	b.n	8002978 <initFieldArray+0x1e4>
    return 0;
 8002976:	2300      	movs	r3, #0
 8002978:	2b04      	cmp	r3, #4
 800297a:	d906      	bls.n	800298a <initFieldArray+0x1f6>
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <initFieldArray+0x1f6>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <initFieldArray+0x1f8>
 800298a:	2300      	movs	r3, #0
 800298c:	b2d9      	uxtb	r1, r3
 800298e:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <initFieldArray+0x2b8>)
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002996:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <initFieldArray+0x28c>)
 8002998:	482d      	ldr	r0, [pc, #180]	; (8002a50 <initFieldArray+0x2bc>)
 800299a:	f002 fdc5 	bl	8005528 <__M_Error>
 800299e:	2300      	movs	r3, #0
 80029a0:	e038      	b.n	8002a14 <initFieldArray+0x280>
		                                    		( getMYCTypeLen(type) > sizeof(reg) ) &&
													( (reg)ptr & (sizeof(reg) - 1) 			), M_EMPTY, return ENTITY_ERROR, "initFieldArray: Alignment error!!!");


		// copy array descr
		if(descr) {
 80029a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <initFieldArray+0x228>
			sprintf(str, "%s%d", descr, (i + startNum));
 80029a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ac:	4413      	add	r3, r2
 80029ae:	f107 0010 	add.w	r0, r7, #16
 80029b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b4:	4927      	ldr	r1, [pc, #156]	; (8002a54 <initFieldArray+0x2c0>)
 80029b6:	f007 fac3 	bl	8009f40 <siprintf>
 80029ba:	e008      	b.n	80029ce <initFieldArray+0x23a>
		} else {
			sprintf(str, ":[%d]", (i + startNum));
 80029bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029c0:	441a      	add	r2, r3
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	4924      	ldr	r1, [pc, #144]	; (8002a58 <initFieldArray+0x2c4>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f007 fab9 	bl	8009f40 <siprintf>
		}
		memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	3319      	adds	r3, #25
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	601a      	str	r2, [r3, #0]

		shift += typeLen;
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	4413      	add	r3, r2
 80029dc:	603b      	str	r3, [r7, #0]
		++fieldNumber_readed;
 80029de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e0:	3301      	adds	r3, #1
 80029e2:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < arrayLen; ++i) {
 80029e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e6:	3301      	adds	r3, #1
 80029e8:	643b      	str	r3, [r7, #64]	; 0x40
 80029ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ee:	429a      	cmp	r2, r3
 80029f0:	f6ff af66 	blt.w	80028c0 <initFieldArray+0x12c>
	}

	if(field_ptr) {
 80029f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <initFieldArray+0x278>
		memset(field_ptr, 0, (arrayLen * typeLen));
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	2100      	movs	r1, #0
 8002a06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002a08:	f006 f960 	bl	8008ccc <memset>
	}

	(*fieldNumber) = fieldNumber_readed;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a10:	601a      	str	r2, [r3, #0]
	return ENTITY_OK;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3748      	adds	r7, #72	; 0x48
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	0800dcc0 	.word	0x0800dcc0
 8002a20:	0800d68c 	.word	0x0800d68c
 8002a24:	0800dc74 	.word	0x0800dc74
 8002a28:	0800dd2c 	.word	0x0800dd2c
 8002a2c:	0800dce0 	.word	0x0800dce0
 8002a30:	0800f788 	.word	0x0800f788
 8002a34:	0800dda4 	.word	0x0800dda4
 8002a38:	0800dd88 	.word	0x0800dd88
 8002a3c:	0800ddfc 	.word	0x0800ddfc
 8002a40:	0800db08 	.word	0x0800db08
 8002a44:	0800de1c 	.word	0x0800de1c
 8002a48:	0800db48 	.word	0x0800db48
 8002a4c:	0800de40 	.word	0x0800de40
 8002a50:	0800db74 	.word	0x0800db74
 8002a54:	0800de64 	.word	0x0800de64
 8002a58:	0800de6c 	.word	0x0800de6c

08002a5c <readEntitiesSizes>:
}

#endif /* USE_ENTITY_PING */

int readEntitiesSizes(u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: No allocated entities or invalid input");
 8002a68:	4b44      	ldr	r3, [pc, #272]	; (8002b7c <readEntitiesSizes+0x120>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <readEntitiesSizes+0x20>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <readEntitiesSizes+0x20>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <readEntitiesSizes+0x4e>
 8002a7c:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <readEntitiesSizes+0x120>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <readEntitiesSizes+0x34>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <readEntitiesSizes+0x34>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <readEntitiesSizes+0x38>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <readEntitiesSizes+0x3a>
 8002a94:	2300      	movs	r3, #0
 8002a96:	b2d9      	uxtb	r1, r3
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <readEntitiesSizes+0x124>)
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	231f      	movs	r3, #31
 8002a9e:	4a39      	ldr	r2, [pc, #228]	; (8002b84 <readEntitiesSizes+0x128>)
 8002aa0:	4839      	ldr	r0, [pc, #228]	; (8002b88 <readEntitiesSizes+0x12c>)
 8002aa2:	f002 fd41 	bl	8005528 <__M_Error>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e064      	b.n	8002b74 <readEntitiesSizes+0x118>
    ENTITY_DBG_ASSERT_BUF(maxOutBufferSize < (8 + TYPE_ARRAY_LENGTH), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: sizes read more than buffer");
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b19      	cmp	r3, #25
 8002aae:	d80f      	bhi.n	8002ad0 <readEntitiesSizes+0x74>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b19      	cmp	r3, #25
 8002ab4:	bf94      	ite	ls
 8002ab6:	2301      	movls	r3, #1
 8002ab8:	2300      	movhi	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <readEntitiesSizes+0x130>)
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <readEntitiesSizes+0x128>)
 8002ac6:	4832      	ldr	r0, [pc, #200]	; (8002b90 <readEntitiesSizes+0x134>)
 8002ac8:	f002 fd2e 	bl	8005528 <__M_Error>
 8002acc:	2300      	movs	r3, #0
 8002ace:	e051      	b.n	8002b74 <readEntitiesSizes+0x118>

    reg pos = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

    // main sizes -----------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_OK;                              // OK byte
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	617a      	str	r2, [r7, #20]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	617a      	str	r2, [r7, #20]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]

    // entities sizes -------------------------------------------------------------------------------------
    outputData[pos++] = ENTITIES_SIZEOF;                        // entities count sizeof
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	617a      	str	r2, [r7, #20]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]

    // fields sizes --------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_FIELD_SIZEOF;                    // fields count sizeof
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	617a      	str	r2, [r7, #20]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]

    outputData[pos++] = SIZEOF_STRUCT(EntityField, bitFlags);   // fields bitFlags sizeof
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	617a      	str	r2, [r7, #20]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	2204      	movs	r2, #4
 8002b18:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = SIZEOF_STRUCT(EntityField, shift);      // fields shift sizeof
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	617a      	str	r2, [r7, #20]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	2204      	movs	r2, #4
 8002b26:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = 1;                                      // fields type sizeof
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	617a      	str	r2, [r7, #20]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]

    // system types sizes --------------------------------------------------------------------------------
    outputData[pos++] = TYPE_ARRAY_LENGTH;                      // size array types
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	617a      	str	r2, [r7, #20]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	2212      	movs	r2, #18
 8002b42:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e00d      	b.n	8002b66 <readEntitiesSizes+0x10a>
        outputData[pos++] = typeLengthMappingArray[i];          // copy array types
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <readEntitiesSizes+0x138>)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	617a      	str	r2, [r7, #20]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	b2ca      	uxtb	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3301      	adds	r3, #1
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b11      	cmp	r3, #17
 8002b6a:	d9ee      	bls.n	8002b4a <readEntitiesSizes+0xee>
    }

    (*size) = pos;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000290 	.word	0x20000290
 8002b80:	0800e2b4 	.word	0x0800e2b4
 8002b84:	0800e210 	.word	0x0800e210
 8002b88:	0800e244 	.word	0x0800e244
 8002b8c:	0800e31c 	.word	0x0800e31c
 8002b90:	0800e2f0 	.word	0x0800e2f0
 8002b94:	0800f788 	.word	0x0800f788

08002b98 <readEntitiesDescriptions>:

int readEntitiesDescriptions(const TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber, TYPEOF_STRUCT(EntityInfo, entities_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[0].descr, ... entities[entities_count].descr}
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08e      	sub	sp, #56	; 0x38
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (2 + ENTITIES_SIZEOF)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesDescriptions: No allocated entities or invalid input");
 8002ba6:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <readEntitiesDescriptions+0x160>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <readEntitiesDescriptions+0x28>
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d905      	bls.n	8002bc0 <readEntitiesDescriptions+0x28>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <readEntitiesDescriptions+0x28>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d119      	bne.n	8002bf4 <readEntitiesDescriptions+0x5c>
 8002bc0:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <readEntitiesDescriptions+0x160>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <readEntitiesDescriptions+0x42>
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d905      	bls.n	8002bda <readEntitiesDescriptions+0x42>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <readEntitiesDescriptions+0x42>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <readEntitiesDescriptions+0x46>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <readEntitiesDescriptions+0x48>
 8002bde:	2300      	movs	r3, #0
 8002be0:	b2d9      	uxtb	r1, r3
 8002be2:	4b46      	ldr	r3, [pc, #280]	; (8002cfc <readEntitiesDescriptions+0x164>)
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <readEntitiesDescriptions+0x168>)
 8002bea:	4846      	ldr	r0, [pc, #280]	; (8002d04 <readEntitiesDescriptions+0x16c>)
 8002bec:	f002 fc9c 	bl	8005528 <__M_Error>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e07d      	b.n	8002cf0 <readEntitiesDescriptions+0x158>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <readEntitiesDescriptions+0x160>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24

    if(startEntityNumber < entities_count) {
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d26e      	bcs.n	8002ce0 <readEntitiesDescriptions+0x148>
        reg pos = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c

        outputData[pos++] = ENTITY_OK;
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	2204      	movs	r2, #4
 8002c20:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(EntityInfo, entities_count) tmp = (entities_count - startEntityNumber);
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	623b      	str	r3, [r7, #32]
        len = MIN(tmp, len);
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bf28      	it	cs
 8002c32:	4613      	movcs	r3, r2
 8002c34:	60bb      	str	r3, [r7, #8]
        //#else
        //        len &= 0xFFFFUL;
        //        ENTITY_BYTE_CPY(ENTITIES_SIZEOF, (u8*)&len, &outputData[pos]);
        //        pos += ENTITIES_SIZEOF;
        //#endif /* MAX_NUBER_OF_ENTITIES < 256 */
        outputData[pos++] = (u8)(len & 0xFFU); // support on old version (this is glitch!!!)
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
        //---------------------------================================----------------------------------==================================-----------------------------------================================---------------------------===========================---------------------------=========================------------------------
        len += startEntityNumber;
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60bb      	str	r3, [r7, #8]

        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c52:	e03c      	b.n	8002cce <readEntitiesDescriptions+0x136>

            ENTITY_DBG_ASSERT_BUF( (pos + ENTITY_DESCRIPTION_SIZE) > maxOutBufferSize, M_EMPTY, {
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	3304      	adds	r3, #4
 8002c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d210      	bcs.n	8002c80 <readEntitiesDescriptions+0xe8>
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	3304      	adds	r3, #4
 8002c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c64:	429a      	cmp	r2, r3
 8002c66:	bf34      	ite	cc
 8002c68:	2301      	movcc	r3, #1
 8002c6a:	2300      	movcs	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <readEntitiesDescriptions+0x170>)
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	235a      	movs	r3, #90	; 0x5a
 8002c76:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <readEntitiesDescriptions+0x168>)
 8002c78:	4824      	ldr	r0, [pc, #144]	; (8002d0c <readEntitiesDescriptions+0x174>)
 8002c7a:	f002 fc55 	bl	8005528 <__M_Error>
 8002c7e:	e030      	b.n	8002ce2 <readEntitiesDescriptions+0x14a>
                                       goto error;
                                   }, "readEntitiesDescriptions: description read size more than buffer");


            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)entityInfo.entities[i]->descr, &outputData[pos]);
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <readEntitiesDescriptions+0x160>)
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	1d1a      	adds	r2, r3, #4
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	440b      	add	r3, r1
 8002c94:	2104      	movs	r1, #4
 8002c96:	61f9      	str	r1, [r7, #28]
 8002c98:	61ba      	str	r2, [r7, #24]
 8002c9a:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <readEntitiesDescriptions+0x126>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d104      	bne.n	8002cb2 <readEntitiesDescriptions+0x11a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e006      	b.n	8002cc0 <readEntitiesDescriptions+0x128>
    default: memcpy(to, from, n); break;
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	69b9      	ldr	r1, [r7, #24]
 8002cb6:	6978      	ldr	r0, [r7, #20]
 8002cb8:	f005 ffe0 	bl	8008c7c <memcpy>
 8002cbc:	e000      	b.n	8002cc0 <readEntitiesDescriptions+0x128>
    case 0: break;
 8002cbe:	bf00      	nop
}
 8002cc0:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	3301      	adds	r3, #1
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3be      	bcc.n	8002c54 <readEntitiesDescriptions+0xbc>
        }

        (*size) = pos;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cda:	601a      	str	r2, [r3, #0]
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e007      	b.n	8002cf0 <readEntitiesDescriptions+0x158>
        goto error;
 8002ce0:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000290 	.word	0x20000290
 8002cfc:	0800e3ec 	.word	0x0800e3ec
 8002d00:	0800e210 	.word	0x0800e210
 8002d04:	0800e34c 	.word	0x0800e34c
 8002d08:	0800e464 	.word	0x0800e464
 8002d0c:	0800e430 	.word	0x0800e430

08002d10 <readEntityFields>:

int readEntityFields(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) startFieldNumber, TYPEOF_STRUCT(Entity, fields_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[entityNum].fields[startFieldNum], ... entities[num].fields[entities[num].fields_count]}
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b096      	sub	sp, #88	; 0x58
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	817b      	strh	r3, [r7, #10]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	813b      	strh	r3, [r7, #8]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITY_FIELD_SIZEOF << 1))) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntityFields: No allocated entities or invalid input");
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <readEntityFields+0x228>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <readEntityFields+0x2c>
 8002d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d905      	bls.n	8002d3c <readEntityFields+0x2c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <readEntityFields+0x2c>
 8002d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d119      	bne.n	8002d70 <readEntityFields+0x60>
 8002d3c:	4b7e      	ldr	r3, [pc, #504]	; (8002f38 <readEntityFields+0x228>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <readEntityFields+0x46>
 8002d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d905      	bls.n	8002d56 <readEntityFields+0x46>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <readEntityFields+0x46>
 8002d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <readEntityFields+0x4a>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <readEntityFields+0x4c>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	b2d9      	uxtb	r1, r3
 8002d5e:	4b77      	ldr	r3, [pc, #476]	; (8002f3c <readEntityFields+0x22c>)
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2376      	movs	r3, #118	; 0x76
 8002d64:	4a76      	ldr	r2, [pc, #472]	; (8002f40 <readEntityFields+0x230>)
 8002d66:	4877      	ldr	r0, [pc, #476]	; (8002f44 <readEntityFields+0x234>)
 8002d68:	f002 fbde 	bl	8005528 <__M_Error>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e0df      	b.n	8002f30 <readEntityFields+0x220>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002d70:	4b71      	ldr	r3, [pc, #452]	; (8002f38 <readEntityFields+0x228>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
    const Entity* const entity = entityInfo.entities[entityNumber];
 8002d76:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <readEntityFields+0x228>)
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	643b      	str	r3, [r7, #64]	; 0x40
    const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 8002d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d86:	891b      	ldrh	r3, [r3, #8]
 8002d88:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	f080 80c6 	bcs.w	8002f20 <readEntityFields+0x210>
 8002d94:	897a      	ldrh	r2, [r7, #10]
 8002d96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	f080 80c1 	bcs.w	8002f20 <readEntityFields+0x210>
        reg pos = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	64fb      	str	r3, [r7, #76]	; 0x4c

        outputData[pos++] = ENTITY_OK;
 8002da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]

#if (MAX_NUBER_OF_FIELDS < 256U)
        outputData[pos++] = (u8)(startFieldNumber & 0xFFU);                             /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	897a      	ldrh	r2, [r7, #10]
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(Entity, fields_count) tmp = (fields_count - startFieldNumber);
 8002dc0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
        len = MIN(tmp, len);
 8002dc8:	893a      	ldrh	r2, [r7, #8]
 8002dca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf28      	it	cs
 8002dd0:	4613      	movcs	r3, r2
 8002dd2:	813b      	strh	r3, [r7, #8]
        outputData[pos++] = (u8)(len & 0xFFU);
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	893a      	ldrh	r2, [r7, #8]
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]
        ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, (u8*)&len, &outputData[pos]);
        pos += ENTITY_FIELD_SIZEOF;

#endif /* MAX_NUBER_OF_FIELDS < 256 */

        len += startFieldNumber;
 8002de4:	893a      	ldrh	r2, [r7, #8]
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	4413      	add	r3, r2
 8002dea:	813b      	strh	r3, [r7, #8]

        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002dec:	897b      	ldrh	r3, [r7, #10]
 8002dee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002df2:	e089      	b.n	8002f08 <readEntityFields+0x1f8>
            const EntityField* const field = &entity->fields[i];
 8002df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002dfc:	015b      	lsls	r3, r3, #5
 8002dfe:	4413      	add	r3, r2
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38

            ENTITY_DBG_ASSERT_BUF( ((pos + (sizeof(field->bitFlags) + sizeof(field->shift) + 1 + ENTITY_DESCRIPTION_SIZE)) > maxOutBufferSize), M_EMPTY, {
 8002e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e04:	330d      	adds	r3, #13
 8002e06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d210      	bcs.n	8002e2e <readEntityFields+0x11e>
 8002e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0e:	330d      	adds	r3, #13
 8002e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e12:	429a      	cmp	r2, r3
 8002e14:	bf34      	ite	cc
 8002e16:	2301      	movcc	r3, #1
 8002e18:	2300      	movcs	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <readEntityFields+0x238>)
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	239a      	movs	r3, #154	; 0x9a
 8002e24:	4a46      	ldr	r2, [pc, #280]	; (8002f40 <readEntityFields+0x230>)
 8002e26:	4849      	ldr	r0, [pc, #292]	; (8002f4c <readEntityFields+0x23c>)
 8002e28:	f002 fb7e 	bl	8005528 <__M_Error>
 8002e2c:	e079      	b.n	8002f22 <readEntityFields+0x212>

            //            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
            //            pos += ENTITY_DESCRIPTION_SIZE;
            //-----------------=============================-----------------------------------===========================-----------------------------=================================-------------------------------===========================-------------------======================
            // this is glitch
            ENTITY_BYTE_CPY(1, (u8 *)&field->bitFlags, &outputData[pos]);
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	f103 0210 	add.w	r2, r3, #16
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	440b      	add	r3, r1
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	61f9      	str	r1, [r7, #28]
 8002e3e:	61ba      	str	r2, [r7, #24]
 8002e40:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <readEntityFields+0x154>
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d104      	bne.n	8002e58 <readEntityFields+0x148>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e006      	b.n	8002e66 <readEntityFields+0x156>
    default: memcpy(to, from, n); break;
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	6978      	ldr	r0, [r7, #20]
 8002e5e:	f005 ff0d 	bl	8008c7c <memcpy>
 8002e62:	e000      	b.n	8002e66 <readEntityFields+0x156>
    case 0: break;
 8002e64:	bf00      	nop
}
 8002e66:	bf00      	nop
            pos += 1;
 8002e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	64fb      	str	r3, [r7, #76]	; 0x4c

            ENTITY_BYTE_CPY(2, (u8 *)&field->shift, &outputData[pos]);
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	f103 0214 	add.w	r2, r3, #20
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e78:	440b      	add	r3, r1
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8002e80:	623b      	str	r3, [r7, #32]
    switch (n) {
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <readEntityFields+0x194>
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d104      	bne.n	8002e98 <readEntityFields+0x188>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e006      	b.n	8002ea6 <readEntityFields+0x196>
    default: memcpy(to, from, n); break;
 8002e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e9c:	6a38      	ldr	r0, [r7, #32]
 8002e9e:	f005 feed 	bl	8008c7c <memcpy>
 8002ea2:	e000      	b.n	8002ea6 <readEntityFields+0x196>
    case 0: break;
 8002ea4:	bf00      	nop
}
 8002ea6:	bf00      	nop
            pos += 2;
 8002ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eaa:	3302      	adds	r3, #2
 8002eac:	64fb      	str	r3, [r7, #76]	; 0x4c

            outputData[pos++] = (field->type & 0xFFU);
 8002eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eba:	7e12      	ldrb	r2, [r2, #24]
 8002ebc:	701a      	strb	r2, [r3, #0]

            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	f103 0219 	add.w	r2, r3, #25
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec8:	440b      	add	r3, r1
 8002eca:	2104      	movs	r1, #4
 8002ecc:	6379      	str	r1, [r7, #52]	; 0x34
 8002ece:	633a      	str	r2, [r7, #48]	; 0x30
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <readEntityFields+0x1e4>
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d104      	bne.n	8002ee8 <readEntityFields+0x1d8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	e006      	b.n	8002ef6 <readEntityFields+0x1e6>
    default: memcpy(to, from, n); break;
 8002ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eee:	f005 fec5 	bl	8008c7c <memcpy>
 8002ef2:	e000      	b.n	8002ef6 <readEntityFields+0x1e6>
    case 0: break;
 8002ef4:	bf00      	nop
}
 8002ef6:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	3304      	adds	r3, #4
 8002efc:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002efe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f02:	3301      	adds	r3, #1
 8002f04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f08:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	f4ff af70 	bcc.w	8002df4 <readEntityFields+0xe4>
            //------------------------------=========================================--------------------------------------===================================--------------------------------------=============================---------------------------------========================

        }

        (*size) = pos;
 8002f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f18:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002f1a:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e007      	b.n	8002f30 <readEntityFields+0x220>
        goto error;
 8002f20:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3750      	adds	r7, #80	; 0x50
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000290 	.word	0x20000290
 8002f3c:	0800e554 	.word	0x0800e554
 8002f40:	0800e210 	.word	0x0800e210
 8002f44:	0800e4a8 	.word	0x0800e4a8
 8002f48:	0800e5fc 	.word	0x0800e5fc
 8002f4c:	0800e590 	.word	0x0800e590

08002f50 <readFieldValue>:
/* ******************************************************************************************************************
 * READ one field value
 *
 */
int readFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{ //send {0x01 , prt + 0, ... , ptr + getTypeLen(entities[no].fields[fieldNo].type)}
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b0a5      	sub	sp, #148	; 0x94
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 2) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readFieldValue: No allocated entities or invalid input");
 8002f60:	4b95      	ldr	r3, [pc, #596]	; (80031b8 <readFieldValue+0x268>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <readFieldValue+0x2c>
 8002f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d905      	bls.n	8002f7c <readFieldValue+0x2c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <readFieldValue+0x2c>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11a      	bne.n	8002fb2 <readFieldValue+0x62>
 8002f7c:	4b8e      	ldr	r3, [pc, #568]	; (80031b8 <readFieldValue+0x268>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <readFieldValue+0x48>
 8002f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d905      	bls.n	8002f98 <readFieldValue+0x48>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <readFieldValue+0x48>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <readFieldValue+0x4c>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <readFieldValue+0x4e>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	b2d9      	uxtb	r1, r3
 8002fa0:	4b86      	ldr	r3, [pc, #536]	; (80031bc <readFieldValue+0x26c>)
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	23d0      	movs	r3, #208	; 0xd0
 8002fa6:	4a86      	ldr	r2, [pc, #536]	; (80031c0 <readFieldValue+0x270>)
 8002fa8:	4886      	ldr	r0, [pc, #536]	; (80031c4 <readFieldValue+0x274>)
 8002faa:	f002 fabd 	bl	8005528 <__M_Error>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e156      	b.n	8003260 <readFieldValue+0x310>

    Entity*         const       entity  = entityInfo.entities[entityNumber];
 8002fb2:	4b81      	ldr	r3, [pc, #516]	; (80031b8 <readFieldValue+0x268>)
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    EntityField*    const       field   = &entity->fields[fieldNumber];
 8002fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	897b      	ldrh	r3, [r7, #10]
 8002fca:	015b      	lsls	r3, r3, #5
 8002fcc:	4413      	add	r3, r2
 8002fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8002fd2:	4b79      	ldr	r3, [pc, #484]	; (80031b8 <readFieldValue+0x268>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8002fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fdc:	891b      	ldrh	r3, [r3, #8]
 8002fde:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	f080 8132 	bcs.w	8003250 <readFieldValue+0x300>
 8002fec:	897a      	ldrh	r2, [r7, #10]
 8002fee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	f080 812c 	bcs.w	8003250 <readFieldValue+0x300>
        const u8        type    = field->type;
 8002ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ffc:	7e1b      	ldrb	r3, [r3, #24]
 8002ffe:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
        const reg       typeLen = getMYCTypeLen(type);
 8003002:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8003006:	667b      	str	r3, [r7, #100]	; 0x64
    if(type < TYPE_ARRAY_LENGTH) {
 8003008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300a:	2b11      	cmp	r3, #17
 800300c:	d804      	bhi.n	8003018 <readFieldValue+0xc8>
        return typeLengthMappingArray[type];
 800300e:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <readFieldValue+0x278>)
 8003010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003016:	e000      	b.n	800301a <readFieldValue+0xca>
    return 0;
 8003018:	2300      	movs	r3, #0
 800301a:	677b      	str	r3, [r7, #116]	; 0x74
        void*     ptr     = (entity->pointer + field->shift);
 800301c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4413      	add	r3, r2
 800302a:	673b      	str	r3, [r7, #112]	; 0x70

        reg pos = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	66fb      	str	r3, [r7, #108]	; 0x6c

        outputData[pos++] = ENTITY_OK;
 8003030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = type;    /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 800304c:	701a      	strb	r2, [r3, #0]

        ENTITY_DBG_ASSERT_BUF(((pos + typeLen) > maxOutBufferSize), M_EMPTY, {
 800304e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003052:	4413      	add	r3, r2
 8003054:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003058:	429a      	cmp	r2, r3
 800305a:	d212      	bcs.n	8003082 <readFieldValue+0x132>
 800305c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800305e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003060:	4413      	add	r3, r2
 8003062:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003066:	429a      	cmp	r2, r3
 8003068:	bf34      	ite	cc
 800306a:	2301      	movcc	r3, #1
 800306c:	2300      	movcs	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	4b56      	ldr	r3, [pc, #344]	; (80031cc <readFieldValue+0x27c>)
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	23e2      	movs	r3, #226	; 0xe2
 8003078:	4a51      	ldr	r2, [pc, #324]	; (80031c0 <readFieldValue+0x270>)
 800307a:	4855      	ldr	r0, [pc, #340]	; (80031d0 <readFieldValue+0x280>)
 800307c:	f002 fa54 	bl	8005528 <__M_Error>
 8003080:	e0e7      	b.n	8003252 <readFieldValue+0x302>
                                  goto error;
                              }, "readFieldValue: field read size more than buffer");

        proceedReadEntity(field->bitFlags, ptr, &outputData[pos], typeLen);
 8003082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	440b      	add	r3, r1
 800308e:	663a      	str	r2, [r7, #96]	; 0x60
 8003090:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003092:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003094:	65bb      	str	r3, [r7, #88]	; 0x58
 8003096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003098:	657b      	str	r3, [r7, #84]	; 0x54
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800309a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d033      	beq.n	800310c <readFieldValue+0x1bc>
 80030a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d02e      	beq.n	800310c <readFieldValue+0x1bc>
										const void* reg_ptr_from = ptr ? (const void*) (* REG_TYPE_DC(ptr)) : 0;
 80030ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <readFieldValue+0x16a>
 80030b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e000      	b.n	80030bc <readFieldValue+0x16c>
 80030ba:	2300      	movs	r3, #0
 80030bc:	653b      	str	r3, [r7, #80]	; 0x50
										if(reg_ptr_from) {
 80030be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01d      	beq.n	8003100 <readFieldValue+0x1b0>
											const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 80030c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	2304      	movs	r3, #4
 80030cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ce:	f107 0318 	add.w	r3, r7, #24
 80030d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d6:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 80030d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <readFieldValue+0x1aa>
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d104      	bne.n	80030ee <readFieldValue+0x19e>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80030e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e006      	b.n	80030fc <readFieldValue+0x1ac>
    default: memcpy(to, from, n); break;
 80030ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80030f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80030f4:	f005 fdc2 	bl	8008c7c <memcpy>
 80030f8:	e000      	b.n	80030fc <readFieldValue+0x1ac>
    case 0: break;
 80030fa:	bf00      	nop
}
 80030fc:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80030fe:	e08b      	b.n	8003218 <readFieldValue+0x2c8>
											memset(outputData, 0, sizeof(reg));
 8003100:	2204      	movs	r2, #4
 8003102:	2100      	movs	r1, #0
 8003104:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003106:	f005 fde1 	bl	8008ccc <memset>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800310a:	e085      	b.n	8003218 <readFieldValue+0x2c8>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 800310c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d021      	beq.n	800315a <readFieldValue+0x20a>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 8003116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <readFieldValue+0x1d2>
 800311c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e000      	b.n	8003124 <readFieldValue+0x1d4>
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	2304      	movs	r3, #4
 8003128:	643b      	str	r3, [r7, #64]	; 0x40
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <readFieldValue+0x206>
 800313a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313c:	2b01      	cmp	r3, #1
 800313e:	d104      	bne.n	800314a <readFieldValue+0x1fa>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e006      	b.n	8003158 <readFieldValue+0x208>
    default: memcpy(to, from, n); break;
 800314a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800314c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800314e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003150:	f005 fd94 	bl	8008c7c <memcpy>
 8003154:	e000      	b.n	8003158 <readFieldValue+0x208>
    case 0: break;
 8003156:	bf00      	nop
}
 8003158:	e05e      	b.n	8003218 <readFieldValue+0x2c8>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 800315a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d037      	beq.n	80031d4 <readFieldValue+0x284>
										const void* reg_ptr_from = ptr ? (const void *)(* REG_TYPE_DC(ptr)) : 0;
 8003164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <readFieldValue+0x220>
 800316a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e000      	b.n	8003172 <readFieldValue+0x222>
 8003170:	2300      	movs	r3, #0
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
										if(reg_ptr_from) {
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	2b00      	cmp	r3, #0
 8003178:	d018      	beq.n	80031ac <readFieldValue+0x25c>
 800317a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317c:	633b      	str	r3, [r7, #48]	; 0x30
 800317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <readFieldValue+0x258>
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	2b01      	cmp	r3, #1
 8003190:	d104      	bne.n	800319c <readFieldValue+0x24c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e006      	b.n	80031aa <readFieldValue+0x25a>
    default: memcpy(to, from, n); break;
 800319c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a2:	f005 fd6b 	bl	8008c7c <memcpy>
 80031a6:	e000      	b.n	80031aa <readFieldValue+0x25a>
    case 0: break;
 80031a8:	bf00      	nop
}
 80031aa:	e035      	b.n	8003218 <readFieldValue+0x2c8>
											memset(outputData, 0, typeLen);
 80031ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031ae:	2100      	movs	r1, #0
 80031b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80031b2:	f005 fd8b 	bl	8008ccc <memset>
}
 80031b6:	e02f      	b.n	8003218 <readFieldValue+0x2c8>
 80031b8:	20000290 	.word	0x20000290
 80031bc:	0800e6bc 	.word	0x0800e6bc
 80031c0:	0800e210 	.word	0x0800e210
 80031c4:	0800e630 	.word	0x0800e630
 80031c8:	0800f788 	.word	0x0800f788
 80031cc:	0800e71c 	.word	0x0800e71c
 80031d0:	0800e6f4 	.word	0x0800e6f4
                                    	if(ptr) {
 80031d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d018      	beq.n	800320c <readFieldValue+0x2bc>
 80031da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e0:	623b      	str	r3, [r7, #32]
 80031e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e4:	61fb      	str	r3, [r7, #28]
    switch (n) {
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <readFieldValue+0x2b8>
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d104      	bne.n	80031fc <readFieldValue+0x2ac>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e006      	b.n	800320a <readFieldValue+0x2ba>
    default: memcpy(to, from, n); break;
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	6a39      	ldr	r1, [r7, #32]
 8003200:	69f8      	ldr	r0, [r7, #28]
 8003202:	f005 fd3b 	bl	8008c7c <memcpy>
 8003206:	e000      	b.n	800320a <readFieldValue+0x2ba>
    case 0: break;
 8003208:	bf00      	nop
}
 800320a:	e005      	b.n	8003218 <readFieldValue+0x2c8>
                                    		memset(outputData, 0, typeLen);
 800320c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800320e:	2100      	movs	r1, #0
 8003210:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003212:	f005 fd5b 	bl	8008ccc <memset>
}
 8003216:	e7ff      	b.n	8003218 <readFieldValue+0x2c8>
 8003218:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 800321a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	66bb      	str	r3, [r7, #104]	; 0x68
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <readFieldValue+0x2ec>
            __entityCallback(entity, field, ptr, field->rdCallback.context);
 8003228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003230:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003232:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003236:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800323a:	47a0      	blx	r4
        }
#endif /* USE_ENTITY_READ_CALLBACK */

        pos += typeLen;
 800323c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800323e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003240:	4413      	add	r3, r2
 8003242:	66fb      	str	r3, [r7, #108]	; 0x6c
        (*size) = pos;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003248:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 800324a:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 800324c:	2301      	movs	r3, #1
 800324e:	e007      	b.n	8003260 <readFieldValue+0x310>
        goto error;
 8003250:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	378c      	adds	r7, #140	; 0x8c
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <readSeveralFieldsValues>:
 * READ several fields values
 *
 */

int readSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b0b7      	sub	sp, #220	; 0xdc
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readSeveralFieldsValues: No allocated entities or invalid input");
 8003276:	4ba7      	ldr	r3, [pc, #668]	; (8003514 <readSeveralFieldsValues+0x2ac>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <readSeveralFieldsValues+0x2e>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d908      	bls.n	8003296 <readSeveralFieldsValues+0x2e>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <readSeveralFieldsValues+0x2e>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <readSeveralFieldsValues+0x2e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11d      	bne.n	80032d2 <readSeveralFieldsValues+0x6a>
 8003296:	4b9f      	ldr	r3, [pc, #636]	; (8003514 <readSeveralFieldsValues+0x2ac>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <readSeveralFieldsValues+0x4e>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d908      	bls.n	80032b6 <readSeveralFieldsValues+0x4e>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <readSeveralFieldsValues+0x4e>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <readSeveralFieldsValues+0x4e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <readSeveralFieldsValues+0x52>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <readSeveralFieldsValues+0x54>
 80032ba:	2300      	movs	r3, #0
 80032bc:	b2d9      	uxtb	r1, r3
 80032be:	4b96      	ldr	r3, [pc, #600]	; (8003518 <readSeveralFieldsValues+0x2b0>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	f44f 7384 	mov.w	r3, #264	; 0x108
 80032c6:	4a95      	ldr	r2, [pc, #596]	; (800351c <readSeveralFieldsValues+0x2b4>)
 80032c8:	4895      	ldr	r0, [pc, #596]	; (8003520 <readSeveralFieldsValues+0x2b8>)
 80032ca:	f002 f92d 	bl	8005528 <__M_Error>
 80032ce:	2300      	movs	r3, #0
 80032d0:	e221      	b.n	8003716 <readSeveralFieldsValues+0x4ae>

    const reg inputMsgSize = (*size);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Wpos = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Rpos = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80032e4:	4b8b      	ldr	r3, [pc, #556]	; (8003514 <readSeveralFieldsValues+0x2ac>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 80032ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4413      	add	r3, r2
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 80032fe:	e1a7      	b.n	8003650 <readSeveralFieldsValues+0x3e8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    reg Rpos_internal = (*Rpos);
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 800330c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003314:	4413      	add	r3, r2
 8003316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800331a:	2302      	movs	r3, #2
 800331c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003320:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003328:	f107 0318 	add.w	r3, r7, #24
 800332c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    switch (n) {
 8003330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <readSeveralFieldsValues+0xf8>
 8003338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d106      	bne.n	800334e <readSeveralFieldsValues+0xe6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e009      	b.n	8003362 <readSeveralFieldsValues+0xfa>
    default: memcpy(to, from, n); break;
 800334e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003352:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003356:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800335a:	f005 fc8f 	bl	8008c7c <memcpy>
 800335e:	e000      	b.n	8003362 <readSeveralFieldsValues+0xfa>
    case 0: break;
 8003360:	bf00      	nop
}
 8003362:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	b29b      	uxth	r3, r3
 8003368:	61bb      	str	r3, [r7, #24]
    return entityNumber;
 800336a:	69bb      	ldr	r3, [r7, #24]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 800336c:	623b      	str	r3, [r7, #32]
    Rpos_internal += ENTITIES_SIZEOF;
 800336e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003372:	3302      	adds	r3, #2
 8003374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003378:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800337c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003380:	4413      	add	r3, r2
 8003382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	fieldNumber = *(inputData);
 8003386:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    return fieldNumber;
 8003390:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003394:	83fb      	strh	r3, [r7, #30]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003396:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800339a:	3301      	adds	r3, #1
 800339c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*Rpos) = Rpos_internal;
 80033a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033a6:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 80033a8:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <readSeveralFieldsValues+0x2ac>)
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 80033b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	8bfb      	ldrh	r3, [r7, #30]
 80033c0:	015b      	lsls	r3, r3, #5
 80033c2:	4413      	add	r3, r2
 80033c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 80033c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033cc:	891b      	ldrh	r3, [r3, #8]
 80033ce:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033d8:	429a      	cmp	r2, r3
 80033da:	f240 8146 	bls.w	800366a <readSeveralFieldsValues+0x402>
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f240 8140 	bls.w	800366a <readSeveralFieldsValues+0x402>

            const reg typeLen = getMYCTypeLen(field->type);
 80033ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033ee:	7e1b      	ldrb	r3, [r3, #24]
 80033f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(type < TYPE_ARRAY_LENGTH) {
 80033f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033f8:	2b11      	cmp	r3, #17
 80033fa:	d805      	bhi.n	8003408 <readSeveralFieldsValues+0x1a0>
        return typeLengthMappingArray[type];
 80033fc:	4a49      	ldr	r2, [pc, #292]	; (8003524 <readSeveralFieldsValues+0x2bc>)
 80033fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003406:	e000      	b.n	800340a <readSeveralFieldsValues+0x1a2>
    return 0;
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, {
 800340e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003416:	4413      	add	r3, r2
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d214      	bcs.n	8003448 <readSeveralFieldsValues+0x1e0>
 800341e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003426:	4413      	add	r3, r2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	bf34      	ite	cc
 800342e:	2301      	movcc	r3, #1
 8003430:	2300      	movcs	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	4b3c      	ldr	r3, [pc, #240]	; (8003528 <readSeveralFieldsValues+0x2c0>)
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f240 1321 	movw	r3, #289	; 0x121
 800343e:	4a37      	ldr	r2, [pc, #220]	; (800351c <readSeveralFieldsValues+0x2b4>)
 8003440:	483a      	ldr	r0, [pc, #232]	; (800352c <readSeveralFieldsValues+0x2c4>)
 8003442:	f002 f871 	bl	8005528 <__M_Error>
 8003446:	e111      	b.n	800366c <readSeveralFieldsValues+0x404>
                                      goto error;
                                  }, "readSeveralFieldsValues: field size more than buffer");

            ptr = (entity->pointer + field->shift);
 8003448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	4413      	add	r3, r2
 8003456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 800345a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003466:	440b      	add	r3, r1
 8003468:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800346c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003470:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003474:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800347a:	67bb      	str	r3, [r7, #120]	; 0x78
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800347c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d036      	beq.n	80034f6 <readSeveralFieldsValues+0x28e>
 8003488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d030      	beq.n	80034f6 <readSeveralFieldsValues+0x28e>
										const void* reg_ptr_from = ptr ? (const void*) (* REG_TYPE_DC(ptr)) : 0;
 8003494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <readSeveralFieldsValues+0x23c>
 800349c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	e000      	b.n	80034a6 <readSeveralFieldsValues+0x23e>
 80034a4:	2300      	movs	r3, #0
 80034a6:	677b      	str	r3, [r7, #116]	; 0x74
										if(reg_ptr_from) {
 80034a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01d      	beq.n	80034ea <readSeveralFieldsValues+0x282>
											const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 80034ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	2304      	movs	r3, #4
 80034b6:	673b      	str	r3, [r7, #112]	; 0x70
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034c0:	66bb      	str	r3, [r7, #104]	; 0x68
    switch (n) {
 80034c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00d      	beq.n	80034e4 <readSeveralFieldsValues+0x27c>
 80034c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d104      	bne.n	80034d8 <readSeveralFieldsValues+0x270>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e006      	b.n	80034e6 <readSeveralFieldsValues+0x27e>
    default: memcpy(to, from, n); break;
 80034d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80034da:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80034dc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80034de:	f005 fbcd 	bl	8008c7c <memcpy>
 80034e2:	e000      	b.n	80034e6 <readSeveralFieldsValues+0x27e>
    case 0: break;
 80034e4:	bf00      	nop
}
 80034e6:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80034e8:	e094      	b.n	8003614 <readSeveralFieldsValues+0x3ac>
											memset(outputData, 0, sizeof(reg));
 80034ea:	2204      	movs	r2, #4
 80034ec:	2100      	movs	r1, #0
 80034ee:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80034f0:	f005 fbec 	bl	8008ccc <memset>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80034f4:	e08e      	b.n	8003614 <readSeveralFieldsValues+0x3ac>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80034f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d032      	beq.n	8003568 <readSeveralFieldsValues+0x300>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 8003502:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d012      	beq.n	8003530 <readSeveralFieldsValues+0x2c8>
 800350a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	e00f      	b.n	8003532 <readSeveralFieldsValues+0x2ca>
 8003512:	bf00      	nop
 8003514:	20000290 	.word	0x20000290
 8003518:	0800e820 	.word	0x0800e820
 800351c:	0800e210 	.word	0x0800e210
 8003520:	0800e750 	.word	0x0800e750
 8003524:	0800f788 	.word	0x0800f788
 8003528:	0800e888 	.word	0x0800e888
 800352c:	0800e860 	.word	0x0800e860
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	2304      	movs	r3, #4
 8003536:	667b      	str	r3, [r7, #100]	; 0x64
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	663b      	str	r3, [r7, #96]	; 0x60
 800353e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003540:	65fb      	str	r3, [r7, #92]	; 0x5c
    switch (n) {
 8003542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <readSeveralFieldsValues+0x2fc>
 8003548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800354a:	2b01      	cmp	r3, #1
 800354c:	d104      	bne.n	8003558 <readSeveralFieldsValues+0x2f0>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800354e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e006      	b.n	8003566 <readSeveralFieldsValues+0x2fe>
    default: memcpy(to, from, n); break;
 8003558:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800355a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800355c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800355e:	f005 fb8d 	bl	8008c7c <memcpy>
 8003562:	e000      	b.n	8003566 <readSeveralFieldsValues+0x2fe>
    case 0: break;
 8003564:	bf00      	nop
}
 8003566:	e055      	b.n	8003614 <readSeveralFieldsValues+0x3ac>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d02b      	beq.n	80035cc <readSeveralFieldsValues+0x364>
										const void* reg_ptr_from = ptr ? (const void *)(* REG_TYPE_DC(ptr)) : 0;
 8003574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <readSeveralFieldsValues+0x31c>
 800357c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e000      	b.n	8003586 <readSeveralFieldsValues+0x31e>
 8003584:	2300      	movs	r3, #0
 8003586:	65bb      	str	r3, [r7, #88]	; 0x58
										if(reg_ptr_from) {
 8003588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <readSeveralFieldsValues+0x358>
 800358e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003590:	657b      	str	r3, [r7, #84]	; 0x54
 8003592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003594:	653b      	str	r3, [r7, #80]	; 0x50
 8003596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (n) {
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00d      	beq.n	80035bc <readSeveralFieldsValues+0x354>
 80035a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d104      	bne.n	80035b0 <readSeveralFieldsValues+0x348>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80035a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e006      	b.n	80035be <readSeveralFieldsValues+0x356>
    default: memcpy(to, from, n); break;
 80035b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80035b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80035b6:	f005 fb61 	bl	8008c7c <memcpy>
 80035ba:	e000      	b.n	80035be <readSeveralFieldsValues+0x356>
    case 0: break;
 80035bc:	bf00      	nop
}
 80035be:	e029      	b.n	8003614 <readSeveralFieldsValues+0x3ac>
											memset(outputData, 0, typeLen);
 80035c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035c2:	2100      	movs	r1, #0
 80035c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80035c6:	f005 fb81 	bl	8008ccc <memset>
}
 80035ca:	e023      	b.n	8003614 <readSeveralFieldsValues+0x3ac>
                                    	if(ptr) {
 80035cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d019      	beq.n	8003608 <readSeveralFieldsValues+0x3a0>
 80035d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035dc:	647b      	str	r3, [r7, #68]	; 0x44
 80035de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
    switch (n) {
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <readSeveralFieldsValues+0x39c>
 80035e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d104      	bne.n	80035f8 <readSeveralFieldsValues+0x390>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80035ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e006      	b.n	8003606 <readSeveralFieldsValues+0x39e>
    default: memcpy(to, from, n); break;
 80035f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80035fe:	f005 fb3d 	bl	8008c7c <memcpy>
 8003602:	e000      	b.n	8003606 <readSeveralFieldsValues+0x39e>
    case 0: break;
 8003604:	bf00      	nop
}
 8003606:	e005      	b.n	8003614 <readSeveralFieldsValues+0x3ac>
                                    		memset(outputData, 0, typeLen);
 8003608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800360a:	2100      	movs	r1, #0
 800360c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800360e:	f005 fb5d 	bl	8008ccc <memset>
}
 8003612:	e7ff      	b.n	8003614 <readSeveralFieldsValues+0x3ac>
 8003614:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
            const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8003616:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <readSeveralFieldsValues+0x3d8>
                __entityCallback(entity, field, ptr, field->rdCallback.context);
 8003628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003636:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800363a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800363e:	47a0      	blx	r4
            }
#endif /* USE_ENTITY_READ_CALLBACK */

            Wpos += typeLen;
 8003640:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003648:	4413      	add	r3, r2
 800364a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 800364e:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	3302      	adds	r3, #2
 8003654:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003658:	429a      	cmp	r2, r3
 800365a:	f63f ae51 	bhi.w	8003300 <readSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003664:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003666:	2301      	movs	r3, #1
 8003668:	e055      	b.n	8003716 <readSeveralFieldsValues+0x4ae>
            goto error;
 800366a:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    outputData[Wpos++] = ENTITY_ERROR;
 8003672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	4413      	add	r3, r2
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800368a:	4413      	add	r3, r2
 800368c:	2202      	movs	r2, #2
 800368e:	633a      	str	r2, [r7, #48]	; 0x30
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003692:	f107 0320 	add.w	r3, r7, #32
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <readSeveralFieldsValues+0x452>
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d104      	bne.n	80036ae <readSeveralFieldsValues+0x446>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e006      	b.n	80036bc <readSeveralFieldsValues+0x454>
    default: memcpy(to, from, n); break;
 80036ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036b4:	f005 fae2 	bl	8008c7c <memcpy>
 80036b8:	e000      	b.n	80036bc <readSeveralFieldsValues+0x454>
    case 0: break;
 80036ba:	bf00      	nop
}
 80036bc:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 80036be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036c2:	3302      	adds	r3, #2
 80036c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036ce:	4413      	add	r3, r2
 80036d0:	2201      	movs	r2, #1
 80036d2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d6:	f107 031e 	add.w	r3, r7, #30
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
    switch (n) {
 80036dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <readSeveralFieldsValues+0x496>
 80036e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d104      	bne.n	80036f2 <readSeveralFieldsValues+0x48a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e006      	b.n	8003700 <readSeveralFieldsValues+0x498>
    default: memcpy(to, from, n); break;
 80036f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036f8:	f005 fac0 	bl	8008c7c <memcpy>
 80036fc:	e000      	b.n	8003700 <readSeveralFieldsValues+0x498>
    case 0: break;
 80036fe:	bf00      	nop
}
 8003700:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 8003702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003706:	3301      	adds	r3, #1
 8003708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    (*size) = Wpos;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003712:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	37d4      	adds	r7, #212	; 0xd4
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}
 800371e:	bf00      	nop

08003720 <setFieldValue>:
/* ******************************************************************************************************************
 * WRITE one field value
 *
 */
int setFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const inputData, const reg inputBufferSize)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b0a5      	sub	sp, #148	; 0x94
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (inputData == NULL) || (inputBufferSize == 0)), M_EMPTY, return ENTITY_ERROR, "setFieldValue: No allocated entities or invalid input");
 8003730:	4b96      	ldr	r3, [pc, #600]	; (800398c <setFieldValue+0x26c>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <setFieldValue+0x24>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <setFieldValue+0x24>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d117      	bne.n	8003774 <setFieldValue+0x54>
 8003744:	4b91      	ldr	r3, [pc, #580]	; (800398c <setFieldValue+0x26c>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <setFieldValue+0x38>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <setFieldValue+0x38>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <setFieldValue+0x3c>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <setFieldValue+0x3e>
 800375c:	2300      	movs	r3, #0
 800375e:	b2d9      	uxtb	r1, r3
 8003760:	4b8b      	ldr	r3, [pc, #556]	; (8003990 <setFieldValue+0x270>)
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f44f 73a9 	mov.w	r3, #338	; 0x152
 8003768:	4a8a      	ldr	r2, [pc, #552]	; (8003994 <setFieldValue+0x274>)
 800376a:	488b      	ldr	r0, [pc, #556]	; (8003998 <setFieldValue+0x278>)
 800376c:	f001 fedc 	bl	8005528 <__M_Error>
 8003770:	2300      	movs	r3, #0
 8003772:	e107      	b.n	8003984 <setFieldValue+0x264>

    Entity* const entity = entityInfo.entities[entityNumber];
 8003774:	4b85      	ldr	r3, [pc, #532]	; (800398c <setFieldValue+0x26c>)
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    EntityField* const field = &entity->fields[fieldNumber];
 8003784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	015b      	lsls	r3, r3, #5
 800378e:	4413      	add	r3, r2
 8003790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8003794:	4b7d      	ldr	r3, [pc, #500]	; (800398c <setFieldValue+0x26c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	67fb      	str	r3, [r7, #124]	; 0x7c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 800379a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800379e:	891b      	ldrh	r3, [r3, #8]
 80037a0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 80037a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	677b      	str	r3, [r7, #116]	; 0x74

    if((entityNumber < entities_count) && (fieldNumber < fields_count) && ((bitFlags & ENTITY_READ_ONLY_MSK) == 0)) {
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f080 80e6 	bcs.w	8003982 <setFieldValue+0x262>
 80037b6:	897a      	ldrh	r2, [r7, #10]
 80037b8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80037bc:	429a      	cmp	r2, r3
 80037be:	f080 80e0 	bcs.w	8003982 <setFieldValue+0x262>
 80037c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 80da 	bne.w	8003982 <setFieldValue+0x262>
        void* const ptr = (entity->pointer + field->shift);
 80037ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4413      	add	r3, r2
 80037dc:	673b      	str	r3, [r7, #112]	; 0x70
        const reg typeLen = getMYCTypeLen(field->type);
 80037de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037e2:	7e1b      	ldrb	r3, [r3, #24]
 80037e4:	667b      	str	r3, [r7, #100]	; 0x64
    if(type < TYPE_ARRAY_LENGTH) {
 80037e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037e8:	2b11      	cmp	r3, #17
 80037ea:	d804      	bhi.n	80037f6 <setFieldValue+0xd6>
        return typeLengthMappingArray[type];
 80037ec:	4a6b      	ldr	r2, [pc, #428]	; (800399c <setFieldValue+0x27c>)
 80037ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	e000      	b.n	80037f8 <setFieldValue+0xd8>
    return 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	66fb      	str	r3, [r7, #108]	; 0x6c

        ENTITY_DBG_ASSERT_BUF((typeLen > inputBufferSize), M_EMPTY, {
 80037fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d911      	bls.n	8003826 <setFieldValue+0x106>
 8003802:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	bf8c      	ite	hi
 800380a:	2301      	movhi	r3, #1
 800380c:	2300      	movls	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <setFieldValue+0x280>)
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	f240 135f 	movw	r3, #351	; 0x15f
 800381a:	4a5e      	ldr	r2, [pc, #376]	; (8003994 <setFieldValue+0x274>)
 800381c:	4861      	ldr	r0, [pc, #388]	; (80039a4 <setFieldValue+0x284>)
 800381e:	f001 fe83 	bl	8005528 <__M_Error>
 8003822:	2300      	movs	r3, #0
 8003824:	e0ae      	b.n	8003984 <setFieldValue+0x264>
 8003826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003828:	663b      	str	r3, [r7, #96]	; 0x60
 800382a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800382c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	65bb      	str	r3, [r7, #88]	; 0x58
 8003832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003834:	657b      	str	r3, [r7, #84]	; 0x54
	if(!ptr) {
 8003836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 808e 	beq.w	800395a <setFieldValue+0x23a>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800383e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d028      	beq.n	800389a <setFieldValue+0x17a>
 8003848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d023      	beq.n	800389a <setFieldValue+0x17a>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 8003852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
										if(reg_ptr_to) {
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d07f      	beq.n	800395e <setFieldValue+0x23e>
 800385e:	2304      	movs	r3, #4
 8003860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
 8003866:	f107 0318 	add.w	r3, r7, #24
 800386a:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <setFieldValue+0x16e>
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d104      	bne.n	8003882 <setFieldValue+0x162>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e006      	b.n	8003890 <setFieldValue+0x170>
    default: memcpy(to, from, n); break;
 8003882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003884:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003886:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003888:	f005 f9f8 	bl	8008c7c <memcpy>
 800388c:	e000      	b.n	8003890 <setFieldValue+0x170>
    case 0: break;
 800388e:	bf00      	nop
}
 8003890:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003896:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003898:	e061      	b.n	800395e <setFieldValue+0x23e>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 800389a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01d      	beq.n	80038e0 <setFieldValue+0x1c0>
 80038a4:	2304      	movs	r3, #4
 80038a6:	643b      	str	r3, [r7, #64]	; 0x40
 80038a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 80038b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <setFieldValue+0x1b4>
 80038b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d104      	bne.n	80038c8 <setFieldValue+0x1a8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e006      	b.n	80038d6 <setFieldValue+0x1b6>
    default: memcpy(to, from, n); break;
 80038c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038ce:	f005 f9d5 	bl	8008c7c <memcpy>
 80038d2:	e000      	b.n	80038d6 <setFieldValue+0x1b6>
    case 0: break;
 80038d4:	bf00      	nop
}
 80038d6:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e03f      	b.n	8003960 <setFieldValue+0x240>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80038e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01e      	beq.n	8003928 <setFieldValue+0x208>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 80038ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
                                        if(reg_ptr_to) {
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d034      	beq.n	8003960 <setFieldValue+0x240>
 80038f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
 80038fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <setFieldValue+0x204>
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	2b01      	cmp	r3, #1
 800390c:	d104      	bne.n	8003918 <setFieldValue+0x1f8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e006      	b.n	8003926 <setFieldValue+0x206>
    default: memcpy(to, from, n); break;
 8003918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800391c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800391e:	f005 f9ad 	bl	8008c7c <memcpy>
 8003922:	e000      	b.n	8003926 <setFieldValue+0x206>
    case 0: break;
 8003924:	bf00      	nop
}
 8003926:	e01b      	b.n	8003960 <setFieldValue+0x240>
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
 800392c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003932:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <setFieldValue+0x236>
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	2b01      	cmp	r3, #1
 800393e:	d104      	bne.n	800394a <setFieldValue+0x22a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	e006      	b.n	8003958 <setFieldValue+0x238>
    default: memcpy(to, from, n); break;
 800394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394c:	6a39      	ldr	r1, [r7, #32]
 800394e:	69f8      	ldr	r0, [r7, #28]
 8003950:	f005 f994 	bl	8008c7c <memcpy>
 8003954:	e000      	b.n	8003958 <setFieldValue+0x238>
    case 0: break;
 8003956:	bf00      	nop
}
 8003958:	e002      	b.n	8003960 <setFieldValue+0x240>
		return;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <setFieldValue+0x240>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800395e:	bf00      	nop

        proceedWriteEntity(bitFlags, ptr, inputData, typeLen);


#ifdef USE_ENTITY_WRITE_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003960:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	66bb      	str	r3, [r7, #104]	; 0x68
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <setFieldValue+0x262>
            __entityCallback(entity, field, ptr, field->wrCallback.context);
 800396e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003976:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003978:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800397c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003980:	47a0      	blx	r4
#endif /* USE_ENTITY_WRITE_CALLBACK */

    }

    UNUSED(inputBufferSize);
    return ENTITY_OK;
 8003982:	2301      	movs	r3, #1
}
 8003984:	4618      	mov	r0, r3
 8003986:	378c      	adds	r7, #140	; 0x8c
 8003988:	46bd      	mov	sp, r7
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	20000290 	.word	0x20000290
 8003990:	0800e938 	.word	0x0800e938
 8003994:	0800e210 	.word	0x0800e210
 8003998:	0800e8c0 	.word	0x0800e8c0
 800399c:	0800f788 	.word	0x0800f788
 80039a0:	0800e98c 	.word	0x0800e98c
 80039a4:	0800e970 	.word	0x0800e970

080039a8 <setSeveralFieldsValues>:
/* ******************************************************************************************************************
 * WRITE several fields values
 *
 */
int setSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b0b9      	sub	sp, #228	; 0xe4
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "setSeveralFieldsValues: No allocated entities or invalid input");
 80039b6:	4bb2      	ldr	r3, [pc, #712]	; (8003c80 <setSeveralFieldsValues+0x2d8>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <setSeveralFieldsValues+0x2e>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d908      	bls.n	80039d6 <setSeveralFieldsValues+0x2e>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <setSeveralFieldsValues+0x2e>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <setSeveralFieldsValues+0x2e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11d      	bne.n	8003a12 <setSeveralFieldsValues+0x6a>
 80039d6:	4baa      	ldr	r3, [pc, #680]	; (8003c80 <setSeveralFieldsValues+0x2d8>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <setSeveralFieldsValues+0x4e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d908      	bls.n	80039f6 <setSeveralFieldsValues+0x4e>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <setSeveralFieldsValues+0x4e>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <setSeveralFieldsValues+0x4e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <setSeveralFieldsValues+0x52>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <setSeveralFieldsValues+0x54>
 80039fa:	2300      	movs	r3, #0
 80039fc:	b2d9      	uxtb	r1, r3
 80039fe:	4ba1      	ldr	r3, [pc, #644]	; (8003c84 <setSeveralFieldsValues+0x2dc>)
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	f240 137b 	movw	r3, #379	; 0x17b
 8003a06:	4aa0      	ldr	r2, [pc, #640]	; (8003c88 <setSeveralFieldsValues+0x2e0>)
 8003a08:	48a0      	ldr	r0, [pc, #640]	; (8003c8c <setSeveralFieldsValues+0x2e4>)
 8003a0a:	f001 fd8d 	bl	8005528 <__M_Error>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e20e      	b.n	8003e30 <setSeveralFieldsValues+0x488>

    const reg inputMsgSize = (*size);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    reg Wpos = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    reg Rpos = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003a24:	4b96      	ldr	r3, [pc, #600]	; (8003c80 <setSeveralFieldsValues+0x2d8>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8003a2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4413      	add	r3, r2
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8003a3e:	e194      	b.n	8003d6a <setSeveralFieldsValues+0x3c2>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    reg Rpos_internal = (*Rpos);
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003a4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a54:	4413      	add	r3, r2
 8003a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a68:	f107 031c 	add.w	r3, r7, #28
 8003a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    switch (n) {
 8003a70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <setSeveralFieldsValues+0xf8>
 8003a78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d106      	bne.n	8003a8e <setSeveralFieldsValues+0xe6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e009      	b.n	8003aa2 <setSeveralFieldsValues+0xfa>
    default: memcpy(to, from, n); break;
 8003a8e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003a92:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003a96:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003a9a:	f005 f8ef 	bl	8008c7c <memcpy>
 8003a9e:	e000      	b.n	8003aa2 <setSeveralFieldsValues+0xfa>
    case 0: break;
 8003aa0:	bf00      	nop
}
 8003aa2:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	61fb      	str	r3, [r7, #28]
    return entityNumber;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
    Rpos_internal += ENTITIES_SIZEOF;
 8003aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003ab8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	fieldNumber = *(inputData);
 8003ac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    return fieldNumber;
 8003ad0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003ad4:	847b      	strh	r3, [r7, #34]	; 0x22
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003ad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ada:	3301      	adds	r3, #1
 8003adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*Rpos) = Rpos_internal;
 8003ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ae6:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 8003ae8:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <setSeveralFieldsValues+0x2d8>)
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        EntityField* const field = &entity->fields[fieldNumber];
 8003af8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b00:	015b      	lsls	r3, r3, #5
 8003b02:	4413      	add	r3, r2
 8003b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b0c:	891b      	ldrh	r3, [r3, #8]
 8003b0e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003b22:	429a      	cmp	r2, r3
 8003b24:	f240 812e 	bls.w	8003d84 <setSeveralFieldsValues+0x3dc>
 8003b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b2a:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	f240 8128 	bls.w	8003d84 <setSeveralFieldsValues+0x3dc>
            const reg typeLen = getMYCTypeLen(field->type);
 8003b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b38:	7e1b      	ldrb	r3, [r3, #24]
 8003b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(type < TYPE_ARRAY_LENGTH) {
 8003b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b42:	2b11      	cmp	r3, #17
 8003b44:	d805      	bhi.n	8003b52 <setSeveralFieldsValues+0x1aa>
        return typeLengthMappingArray[type];
 8003b46:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <setSeveralFieldsValues+0x2e8>)
 8003b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b50:	e000      	b.n	8003b54 <setSeveralFieldsValues+0x1ac>
    return 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

            ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, {
 8003b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b5e:	4413      	add	r3, r2
 8003b60:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d214      	bcs.n	8003b92 <setSeveralFieldsValues+0x1ea>
 8003b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b6e:	4413      	add	r3, r2
 8003b70:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003b74:	429a      	cmp	r2, r3
 8003b76:	bf34      	ite	cc
 8003b78:	2301      	movcc	r3, #1
 8003b7a:	2300      	movcs	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4b44      	ldr	r3, [pc, #272]	; (8003c94 <setSeveralFieldsValues+0x2ec>)
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8003b88:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <setSeveralFieldsValues+0x2e0>)
 8003b8a:	4843      	ldr	r0, [pc, #268]	; (8003c98 <setSeveralFieldsValues+0x2f0>)
 8003b8c:	f001 fccc 	bl	8005528 <__M_Error>
 8003b90:	e0f9      	b.n	8003d86 <setSeveralFieldsValues+0x3de>
                                      goto error;
                                  }, "setSeveralFieldsValues: field read size more than buffer");


            if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8003b92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 80df 	bne.w	8003d5e <setSeveralFieldsValues+0x3b6>

                ptr = (entity->pointer + field->shift);
 8003ba0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	4413      	add	r3, r2
 8003bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bbc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003bc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bc4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
	if(!ptr) {
 8003bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80a9 	beq.w	8003d2e <setSeveralFieldsValues+0x386>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02c      	beq.n	8003c42 <setSeveralFieldsValues+0x29a>
 8003be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d026      	beq.n	8003c42 <setSeveralFieldsValues+0x29a>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 8003bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	67bb      	str	r3, [r7, #120]	; 0x78
										if(reg_ptr_to) {
 8003bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8097 	beq.w	8003d32 <setSeveralFieldsValues+0x38a>
 8003c04:	2304      	movs	r3, #4
 8003c06:	677b      	str	r3, [r7, #116]	; 0x74
 8003c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c0c:	673b      	str	r3, [r7, #112]	; 0x70
 8003c0e:	f107 0318 	add.w	r3, r7, #24
 8003c12:	66fb      	str	r3, [r7, #108]	; 0x6c
    switch (n) {
 8003c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <setSeveralFieldsValues+0x28e>
 8003c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d104      	bne.n	8003c2a <setSeveralFieldsValues+0x282>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e006      	b.n	8003c38 <setSeveralFieldsValues+0x290>
    default: memcpy(to, from, n); break;
 8003c2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c2c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003c2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c30:	f005 f824 	bl	8008c7c <memcpy>
 8003c34:	e000      	b.n	8003c38 <setSeveralFieldsValues+0x290>
    case 0: break;
 8003c36:	bf00      	nop
}
 8003c38:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c3e:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003c40:	e077      	b.n	8003d32 <setSeveralFieldsValues+0x38a>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02d      	beq.n	8003caa <setSeveralFieldsValues+0x302>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c56:	667b      	str	r3, [r7, #100]	; 0x64
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	663b      	str	r3, [r7, #96]	; 0x60
    switch (n) {
 8003c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <setSeveralFieldsValues+0x2f4>
 8003c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d104      	bne.n	8003c74 <setSeveralFieldsValues+0x2cc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c6c:	781a      	ldrb	r2, [r3, #0]
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e014      	b.n	8003c9e <setSeveralFieldsValues+0x2f6>
    default: memcpy(to, from, n); break;
 8003c74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c78:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003c7a:	f004 ffff 	bl	8008c7c <memcpy>
 8003c7e:	e00e      	b.n	8003c9e <setSeveralFieldsValues+0x2f6>
 8003c80:	20000290 	.word	0x20000290
 8003c84:	0800e9b8 	.word	0x0800e9b8
 8003c88:	0800e210 	.word	0x0800e210
 8003c8c:	0800e750 	.word	0x0800e750
 8003c90:	0800f788 	.word	0x0800f788
 8003c94:	0800ea1c 	.word	0x0800ea1c
 8003c98:	0800e9f8 	.word	0x0800e9f8
    case 0: break;
 8003c9c:	bf00      	nop
}
 8003c9e:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e044      	b.n	8003d34 <setSeveralFieldsValues+0x38c>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d020      	beq.n	8003cf8 <setSeveralFieldsValues+0x350>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 8003cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
                                        if(reg_ptr_to) {
 8003cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d037      	beq.n	8003d34 <setSeveralFieldsValues+0x38c>
 8003cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd0:	653b      	str	r3, [r7, #80]	; 0x50
    switch (n) {
 8003cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <setSeveralFieldsValues+0x34c>
 8003cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d104      	bne.n	8003ce8 <setSeveralFieldsValues+0x340>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e006      	b.n	8003cf6 <setSeveralFieldsValues+0x34e>
    default: memcpy(to, from, n); break;
 8003ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003cee:	f004 ffc5 	bl	8008c7c <memcpy>
 8003cf2:	e000      	b.n	8003cf6 <setSeveralFieldsValues+0x34e>
    case 0: break;
 8003cf4:	bf00      	nop
}
 8003cf6:	e01d      	b.n	8003d34 <setSeveralFieldsValues+0x38c>
 8003cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 8003d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <setSeveralFieldsValues+0x382>
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d104      	bne.n	8003d1e <setSeveralFieldsValues+0x376>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e006      	b.n	8003d2c <setSeveralFieldsValues+0x384>
    default: memcpy(to, from, n); break;
 8003d1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d20:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003d24:	f004 ffaa 	bl	8008c7c <memcpy>
 8003d28:	e000      	b.n	8003d2c <setSeveralFieldsValues+0x384>
    case 0: break;
 8003d2a:	bf00      	nop
}
 8003d2c:	e002      	b.n	8003d34 <setSeveralFieldsValues+0x38c>
		return;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <setSeveralFieldsValues+0x38c>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003d32:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003d3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <setSeveralFieldsValues+0x3b6>
                    __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003d50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d54:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003d58:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8003d5c:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_WRITE_CALLBACK */

            }

            Rpos += typeLen;
 8003d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d64:	4413      	add	r3, r2
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003d68:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f63f ae64 	bhi.w	8003a40 <setSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d7e:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e055      	b.n	8003e30 <setSeveralFieldsValues+0x488>
            goto error;
 8003d84:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    outputData[Wpos++] = ENTITY_ERROR;
 8003d8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4413      	add	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003da4:	4413      	add	r3, r2
 8003da6:	2202      	movs	r2, #2
 8003da8:	637a      	str	r2, [r7, #52]	; 0x34
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
 8003dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <setSeveralFieldsValues+0x42c>
 8003db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d104      	bne.n	8003dc8 <setSeveralFieldsValues+0x420>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e006      	b.n	8003dd6 <setSeveralFieldsValues+0x42e>
    default: memcpy(to, from, n); break;
 8003dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dce:	f004 ff55 	bl	8008c7c <memcpy>
 8003dd2:	e000      	b.n	8003dd6 <setSeveralFieldsValues+0x42e>
    case 0: break;
 8003dd4:	bf00      	nop
}
 8003dd6:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 8003dd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ddc:	3302      	adds	r3, #2
 8003dde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003de8:	4413      	add	r3, r2
 8003dea:	2201      	movs	r2, #1
 8003dec:	643a      	str	r2, [r7, #64]	; 0x40
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8003df4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 8003df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <setSeveralFieldsValues+0x470>
 8003dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d104      	bne.n	8003e0c <setSeveralFieldsValues+0x464>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e006      	b.n	8003e1a <setSeveralFieldsValues+0x472>
    default: memcpy(to, from, n); break;
 8003e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e12:	f004 ff33 	bl	8008c7c <memcpy>
 8003e16:	e000      	b.n	8003e1a <setSeveralFieldsValues+0x472>
    case 0: break;
 8003e18:	bf00      	nop
}
 8003e1a:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 8003e1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e20:	3301      	adds	r3, #1
 8003e22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    (*size) = Wpos;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e2c:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	37dc      	adds	r7, #220	; 0xdc
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <proceedGluedValues>:
/* ******************************************************************************************************************
 * GLUED functions fields values
 *
 */
int proceedGluedValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b0db      	sub	sp, #364	; 0x16c
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 8003e42:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 8003e46:	6020      	str	r0, [r4, #0]
 8003e48:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8003e4c:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8003e50:	6001      	str	r1, [r0, #0]
 8003e52:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8003e56:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 8003e5a:	600a      	str	r2, [r1, #0]
 8003e5c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003e60:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003e64:	6013      	str	r3, [r2, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 3) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: No allocated entities or invalid input");
 8003e66:	4bb8      	ldr	r3, [pc, #736]	; (8004148 <proceedGluedValues+0x310>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01b      	beq.n	8003ea6 <proceedGluedValues+0x6e>
 8003e6e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d914      	bls.n	8003ea6 <proceedGluedValues+0x6e>
 8003e7c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e80:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <proceedGluedValues+0x6e>
 8003e8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e8e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <proceedGluedValues+0x6e>
 8003e98:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e9c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d12e      	bne.n	8003f04 <proceedGluedValues+0xcc>
 8003ea6:	4ba8      	ldr	r3, [pc, #672]	; (8004148 <proceedGluedValues+0x310>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01b      	beq.n	8003ee6 <proceedGluedValues+0xae>
 8003eae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003eb2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d914      	bls.n	8003ee6 <proceedGluedValues+0xae>
 8003ebc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003ec0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <proceedGluedValues+0xae>
 8003eca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003ece:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d006      	beq.n	8003ee6 <proceedGluedValues+0xae>
 8003ed8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003edc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <proceedGluedValues+0xb2>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <proceedGluedValues+0xb4>
 8003eea:	2300      	movs	r3, #0
 8003eec:	b2d9      	uxtb	r1, r3
 8003eee:	4b97      	ldr	r3, [pc, #604]	; (800414c <proceedGluedValues+0x314>)
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	f240 13c9 	movw	r3, #457	; 0x1c9
 8003ef6:	4a96      	ldr	r2, [pc, #600]	; (8004150 <proceedGluedValues+0x318>)
 8003ef8:	4896      	ldr	r0, [pc, #600]	; (8004154 <proceedGluedValues+0x31c>)
 8003efa:	f001 fb15 	bl	8005528 <__M_Error>
 8003efe:	2300      	movs	r3, #0
 8003f00:	f000 bdf7 	b.w	8004af2 <proceedGluedValues+0xcba>

    const reg inputMsgSize = (*size);
 8003f04:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003f08:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    reg Wpos = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    reg Rpos = 0;
 8003f1a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003f26:	4b88      	ldr	r3, [pc, #544]	; (8004148 <proceedGluedValues+0x310>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    u8 cmd = inputData[Rpos++];
 8003f2e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1c59      	adds	r1, r3, #1
 8003f3a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003f3e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003f42:	6011      	str	r1, [r2, #0]
 8003f44:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003f48:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

    if(cmd == WRITE_SEVERAL_VALUES_GLUED) {
 8003f56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	f040 82a4 	bne.w	80044a8 <proceedGluedValues+0x670>
        const u8 writeRequestCnt = inputData[Rpos++];
 8003f60:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003f64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003f70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003f7a:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f8e:	e23e      	b.n	800440e <proceedGluedValues+0x5d6>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize),
 8003f90:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3303      	adds	r3, #3
 8003f9c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d218      	bcs.n	8003fd6 <proceedGluedValues+0x19e>
 8003fa4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3303      	adds	r3, #3
 8003fb0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bf34      	ite	cc
 8003fb8:	2301      	movcc	r3, #1
 8003fba:	2300      	movcs	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4b65      	ldr	r3, [pc, #404]	; (8004158 <proceedGluedValues+0x320>)
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003fc8:	4a61      	ldr	r2, [pc, #388]	; (8004150 <proceedGluedValues+0x318>)
 8003fca:	4864      	ldr	r0, [pc, #400]	; (800415c <proceedGluedValues+0x324>)
 8003fcc:	f001 faac 	bl	8005528 <__M_Error>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f000 bd8e 	b.w	8004af2 <proceedGluedValues+0xcba>
 8003fd6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003fda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    reg Rpos_internal = (*Rpos);
 8003fe4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003ff2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003ff6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004000:	2302      	movs	r3, #2
 8004002:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800400a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800400e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004012:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    switch (n) {
 8004016:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d013      	beq.n	8004046 <proceedGluedValues+0x20e>
 800401e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004022:	2b01      	cmp	r3, #1
 8004024:	d106      	bne.n	8004034 <proceedGluedValues+0x1fc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e009      	b.n	8004048 <proceedGluedValues+0x210>
    default: memcpy(to, from, n); break;
 8004034:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004038:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800403c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8004040:	f004 fe1c 	bl	8008c7c <memcpy>
 8004044:	e000      	b.n	8004048 <proceedGluedValues+0x210>
    case 0: break;
 8004046:	bf00      	nop
}
 8004048:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 800404a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800404e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b29a      	uxth	r2, r3
 8004056:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800405a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800405e:	601a      	str	r2, [r3, #0]
    return entityNumber;
 8004060:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004064:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004068:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 800406a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800406e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004072:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 8004074:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004078:	3302      	adds	r3, #2
 800407a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800407e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004086:	4413      	add	r3, r2
 8004088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	fieldNumber = *(inputData);
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    return fieldNumber;
 8004096:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800409a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800409e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80040a2:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80040a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040a8:	3301      	adds	r3, #1
 80040aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*Rpos) = Rpos_internal;
 80040ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80040b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040b6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80040ba:	601a      	str	r2, [r3, #0]
}
 80040bc:	bf00      	nop
                                  M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <proceedGluedValues+0x310>)
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80040c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            EntityField* const field = &entity->fields[fieldNumber];
 80040d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80040e0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	015b      	lsls	r3, r3, #5
 80040e8:	4413      	add	r3, r2
 80040ea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80040ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80040f2:	891b      	ldrh	r3, [r3, #8]
 80040f4:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
            const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 80040f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8004102:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004110:	429a      	cmp	r2, r3
 8004112:	f240 8177 	bls.w	8004404 <proceedGluedValues+0x5cc>
 8004116:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800411a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 8004124:	429a      	cmp	r2, r3
 8004126:	f240 816d 	bls.w	8004404 <proceedGluedValues+0x5cc>
                const reg typeLen = getMYCTypeLen(field->type);
 800412a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800412e:	7e1b      	ldrb	r3, [r3, #24]
 8004130:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if(type < TYPE_ARRAY_LENGTH) {
 8004134:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004138:	2b11      	cmp	r3, #17
 800413a:	d813      	bhi.n	8004164 <proceedGluedValues+0x32c>
        return typeLengthMappingArray[type];
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <proceedGluedValues+0x328>)
 800413e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	e00e      	b.n	8004166 <proceedGluedValues+0x32e>
 8004148:	20000290 	.word	0x20000290
 800414c:	0800eafc 	.word	0x0800eafc
 8004150:	0800e210 	.word	0x0800e210
 8004154:	0800ea58 	.word	0x0800ea58
 8004158:	0800eb7c 	.word	0x0800eb7c
 800415c:	0800eb38 	.word	0x0800eb38
 8004160:	0800f788 	.word	0x0800f788
    return 0;
 8004164:	2300      	movs	r3, #0
 8004166:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

                ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 800416a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800416e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004178:	4413      	add	r3, r2
 800417a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800417e:	429a      	cmp	r2, r3
 8004180:	d21a      	bcs.n	80041b8 <proceedGluedValues+0x380>
 8004182:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004186:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004190:	4413      	add	r3, r2
 8004192:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004196:	429a      	cmp	r2, r3
 8004198:	bf34      	ite	cc
 800419a:	2301      	movcc	r3, #1
 800419c:	2300      	movcs	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	4bbd      	ldr	r3, [pc, #756]	; (8004498 <proceedGluedValues+0x660>)
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 80041aa:	4abc      	ldr	r2, [pc, #752]	; (800449c <proceedGluedValues+0x664>)
 80041ac:	48bc      	ldr	r0, [pc, #752]	; (80044a0 <proceedGluedValues+0x668>)
 80041ae:	f001 f9bb 	bl	8005528 <__M_Error>
 80041b2:	2300      	movs	r3, #0
 80041b4:	f000 bc9d 	b.w	8004af2 <proceedGluedValues+0xcba>

                if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 80041b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 8112 	bne.w	80043ea <proceedGluedValues+0x5b2>

                    ptr = (entity->pointer + field->shift);
 80041c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4413      	add	r3, r2
 80041d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 80041d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80041e6:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	4413      	add	r3, r2
 80041ee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80041f2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80041f6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80041fa:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80041fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004202:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if(!ptr) {
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80d3 	beq.w	80043ba <proceedGluedValues+0x582>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004214:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d03d      	beq.n	800429c <proceedGluedValues+0x464>
 8004220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d037      	beq.n	800429c <proceedGluedValues+0x464>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
										if(reg_ptr_to) {
 8004236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80bf 	beq.w	80043be <proceedGluedValues+0x586>
 8004240:	2304      	movs	r3, #4
 8004242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800424e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004252:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    switch (n) {
 8004256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d013      	beq.n	8004286 <proceedGluedValues+0x44e>
 800425e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004262:	2b01      	cmp	r3, #1
 8004264:	d106      	bne.n	8004274 <proceedGluedValues+0x43c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e009      	b.n	8004288 <proceedGluedValues+0x450>
    default: memcpy(to, from, n); break;
 8004274:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004278:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800427c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004280:	f004 fcfc 	bl	8008c7c <memcpy>
 8004284:	e000      	b.n	8004288 <proceedGluedValues+0x450>
    case 0: break;
 8004286:	bf00      	nop
}
 8004288:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 800428a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800428e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004298:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800429a:	e090      	b.n	80043be <proceedGluedValues+0x586>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 800429c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02d      	beq.n	8004304 <proceedGluedValues+0x4cc>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042b6:	f107 0320 	add.w	r3, r7, #32
 80042ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    switch (n) {
 80042be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d013      	beq.n	80042ee <proceedGluedValues+0x4b6>
 80042c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d106      	bne.n	80042dc <proceedGluedValues+0x4a4>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80042ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e009      	b.n	80042f0 <proceedGluedValues+0x4b8>
    default: memcpy(to, from, n); break;
 80042dc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042e0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80042e4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80042e8:	f004 fcc8 	bl	8008c7c <memcpy>
 80042ec:	e000      	b.n	80042f0 <proceedGluedValues+0x4b8>
    case 0: break;
 80042ee:	bf00      	nop
}
 80042f0:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 80042f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e05d      	b.n	80043c0 <proceedGluedValues+0x588>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8004304:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02e      	beq.n	800436e <proceedGluedValues+0x536>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 8004310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                                        if(reg_ptr_to) {
 800431a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04e      	beq.n	80043c0 <proceedGluedValues+0x588>
 8004322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    switch (n) {
 800433a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d013      	beq.n	800436a <proceedGluedValues+0x532>
 8004342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004346:	2b01      	cmp	r3, #1
 8004348:	d106      	bne.n	8004358 <proceedGluedValues+0x520>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800434a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	e009      	b.n	800436c <proceedGluedValues+0x534>
    default: memcpy(to, from, n); break;
 8004358:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800435c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8004360:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004364:	f004 fc8a 	bl	8008c7c <memcpy>
 8004368:	e000      	b.n	800436c <proceedGluedValues+0x534>
    case 0: break;
 800436a:	bf00      	nop
}
 800436c:	e028      	b.n	80043c0 <proceedGluedValues+0x588>
 800436e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    switch (n) {
 8004386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800438a:	2b00      	cmp	r3, #0
 800438c:	d013      	beq.n	80043b6 <proceedGluedValues+0x57e>
 800438e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004392:	2b01      	cmp	r3, #1
 8004394:	d106      	bne.n	80043a4 <proceedGluedValues+0x56c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	e009      	b.n	80043b8 <proceedGluedValues+0x580>
    default: memcpy(to, from, n); break;
 80043a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043a8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80043ac:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80043b0:	f004 fc64 	bl	8008c7c <memcpy>
 80043b4:	e000      	b.n	80043b8 <proceedGluedValues+0x580>
    case 0: break;
 80043b6:	bf00      	nop
}
 80043b8:	e002      	b.n	80043c0 <proceedGluedValues+0x588>
		return;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <proceedGluedValues+0x588>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80043be:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                    const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 80043c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80043ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <proceedGluedValues+0x5b2>
                        __entityCallback(entity, field, ptr, field->wrCallback.context);
 80043d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80043dc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80043e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80043e4:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80043e8:	47a0      	blx	r4
                    }
#endif /* USE_ENTITY_WRITE_CALLBACK */

                }

                Rpos += typeLen;
 80043ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043f8:	441a      	add	r2, r3
 80043fa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004402:	601a      	str	r2, [r3, #0]
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8004404:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004408:	3301      	adds	r3, #1
 800440a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800440e:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8004412:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004416:	429a      	cmp	r2, r3
 8004418:	f4ff adba 	bcc.w	8003f90 <proceedGluedValues+0x158>
            }
        }

        ENTITY_DBG_ASSERT_BUF(((Rpos + 1) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 800441c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004420:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800442c:	429a      	cmp	r2, r3
 800442e:	d217      	bcs.n	8004460 <proceedGluedValues+0x628>
 8004430:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004434:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3301      	adds	r3, #1
 800443c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004440:	429a      	cmp	r2, r3
 8004442:	bf34      	ite	cc
 8004444:	2301      	movcc	r3, #1
 8004446:	2300      	movcs	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4619      	mov	r1, r3
 800444c:	4b12      	ldr	r3, [pc, #72]	; (8004498 <proceedGluedValues+0x660>)
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	f240 13fb 	movw	r3, #507	; 0x1fb
 8004454:	4a11      	ldr	r2, [pc, #68]	; (800449c <proceedGluedValues+0x664>)
 8004456:	4813      	ldr	r0, [pc, #76]	; (80044a4 <proceedGluedValues+0x66c>)
 8004458:	f001 f866 	bl	8005528 <__M_Error>
 800445c:	2300      	movs	r3, #0
 800445e:	e348      	b.n	8004af2 <proceedGluedValues+0xcba>
        cmd = inputData[Rpos];
 8004460:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800446e:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	4413      	add	r3, r2
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        if(cmd == SEVERAL_VALUES_GLUED_END) {
 800447c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004480:	2b09      	cmp	r3, #9
 8004482:	d111      	bne.n	80044a8 <proceedGluedValues+0x670>
            (*size) = 0;
 8004484:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004488:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
            return ENTITY_OK;
 8004492:	2301      	movs	r3, #1
 8004494:	e32d      	b.n	8004af2 <proceedGluedValues+0xcba>
 8004496:	bf00      	nop
 8004498:	0800ebb8 	.word	0x0800ebb8
 800449c:	0800e210 	.word	0x0800e210
 80044a0:	0800e9f8 	.word	0x0800e9f8
 80044a4:	0800ebf0 	.word	0x0800ebf0
        }
    }

    if(cmd == READ_SEVERAL_VALUES_GLUED) {
 80044a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	f040 8317 	bne.w	8004ae0 <proceedGluedValues+0xca8>
        ENTITY_DBG_ASSERT_BUF(((Rpos + 2) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 80044b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3302      	adds	r3, #2
 80044be:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d217      	bcs.n	80044f6 <proceedGluedValues+0x6be>
 80044c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3302      	adds	r3, #2
 80044d2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80044d6:	429a      	cmp	r2, r3
 80044d8:	bf34      	ite	cc
 80044da:	2301      	movcc	r3, #1
 80044dc:	2300      	movcs	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	4619      	mov	r1, r3
 80044e2:	4bc3      	ldr	r3, [pc, #780]	; (80047f0 <proceedGluedValues+0x9b8>)
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	f240 2305 	movw	r3, #517	; 0x205
 80044ea:	4ac2      	ldr	r2, [pc, #776]	; (80047f4 <proceedGluedValues+0x9bc>)
 80044ec:	48c2      	ldr	r0, [pc, #776]	; (80047f8 <proceedGluedValues+0x9c0>)
 80044ee:	f001 f81b 	bl	8005528 <__M_Error>
 80044f2:	2300      	movs	r3, #0
 80044f4:	e2fd      	b.n	8004af2 <proceedGluedValues+0xcba>

        const u8 readRequestCnt = inputData[Rpos++];
 80044f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	1c59      	adds	r1, r3, #1
 8004502:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004506:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800450a:	6011      	str	r1, [r2, #0]
 800450c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004510:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        outputData[Wpos++] = READ_SEVERAL_VALUES_GLUED;
 800451e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8004528:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800452c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4413      	add	r3, r2
 8004534:	2206      	movs	r2, #6
 8004536:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = readRequestCnt;
 8004538:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8004542:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004546:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4413      	add	r3, r2
 800454e:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8004552:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = inputData[Rpos++];
 8004554:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004558:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	1c59      	adds	r1, r3, #1
 8004560:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004564:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004568:	6011      	str	r1, [r2, #0]
 800456a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800456e:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	441a      	add	r2, r3
 8004576:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800457a:	1c59      	adds	r1, r3, #1
 800457c:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 8004580:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004584:	f5a1 71ac 	sub.w	r1, r1, #344	; 0x158
 8004588:	6809      	ldr	r1, [r1, #0]
 800458a:	440b      	add	r3, r1
 800458c:	7812      	ldrb	r2, [r2, #0]
 800458e:	701a      	strb	r2, [r3, #0]

        for(reg i = 0; i < readRequestCnt; ++i) {
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004596:	e29c      	b.n	8004ad2 <proceedGluedValues+0xc9a>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field request size more than buffer");
 8004598:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800459c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3303      	adds	r3, #3
 80045a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d217      	bcs.n	80045dc <proceedGluedValues+0x7a4>
 80045ac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3303      	adds	r3, #3
 80045b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80045bc:	429a      	cmp	r2, r3
 80045be:	bf34      	ite	cc
 80045c0:	2301      	movcc	r3, #1
 80045c2:	2300      	movcs	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	4619      	mov	r1, r3
 80045c8:	4b8c      	ldr	r3, [pc, #560]	; (80047fc <proceedGluedValues+0x9c4>)
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	f240 230d 	movw	r3, #525	; 0x20d
 80045d0:	4a88      	ldr	r2, [pc, #544]	; (80047f4 <proceedGluedValues+0x9bc>)
 80045d2:	488b      	ldr	r0, [pc, #556]	; (8004800 <proceedGluedValues+0x9c8>)
 80045d4:	f000 ffa8 	bl	8005528 <__M_Error>
 80045d8:	2300      	movs	r3, #0
 80045da:	e28a      	b.n	8004af2 <proceedGluedValues+0xcba>
 80045dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045e0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    reg Rpos_internal = (*Rpos);
 80045ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80045f8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80045fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004600:	4413      	add	r3, r2
 8004602:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004606:	2302      	movs	r3, #2
 8004608:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800460c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004614:	f107 031c 	add.w	r3, r7, #28
 8004618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 800461c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004620:	2b00      	cmp	r3, #0
 8004622:	d013      	beq.n	800464c <proceedGluedValues+0x814>
 8004624:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004628:	2b01      	cmp	r3, #1
 800462a:	d106      	bne.n	800463a <proceedGluedValues+0x802>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800462c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e009      	b.n	800464e <proceedGluedValues+0x816>
    default: memcpy(to, from, n); break;
 800463a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800463e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004642:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004646:	f004 fb19 	bl	8008c7c <memcpy>
 800464a:	e000      	b.n	800464e <proceedGluedValues+0x816>
    case 0: break;
 800464c:	bf00      	nop
}
 800464e:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8004650:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004654:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b29a      	uxth	r2, r3
 800465c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004660:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004664:	601a      	str	r2, [r3, #0]
    return entityNumber;
 8004666:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800466a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800466e:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8004670:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004678:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 800467a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800467e:	3302      	adds	r3, #2
 8004680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8004684:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800468c:	4413      	add	r3, r2
 800468e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fieldNumber = *(inputData);
 8004692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    return fieldNumber;
 800469c:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80046a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046a4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80046a8:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80046aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046ae:	3301      	adds	r3, #1
 80046b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*Rpos) = Rpos_internal;
 80046b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 80046c4:	4b4f      	ldr	r3, [pc, #316]	; (8004804 <proceedGluedValues+0x9cc>)
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            EntityField* const field = &entity->fields[fieldNumber];
 80046dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046e6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	015b      	lsls	r3, r3, #5
 80046ee:	4413      	add	r3, r2
 80046f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80046f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046f8:	891b      	ldrh	r3, [r3, #8]
 80046fa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80046fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800470c:	429a      	cmp	r2, r3
 800470e:	f240 81d9 	bls.w	8004ac4 <proceedGluedValues+0xc8c>
 8004712:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004716:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8004720:	429a      	cmp	r2, r3
 8004722:	f240 81cf 	bls.w	8004ac4 <proceedGluedValues+0xc8c>
                const reg typeLen = getMYCTypeLen(field->type);
 8004726:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800472a:	7e1b      	ldrb	r3, [r3, #24]
 800472c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if(type < TYPE_ARRAY_LENGTH) {
 8004730:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004734:	2b11      	cmp	r3, #17
 8004736:	d805      	bhi.n	8004744 <proceedGluedValues+0x90c>
        return typeLengthMappingArray[type];
 8004738:	4a33      	ldr	r2, [pc, #204]	; (8004808 <proceedGluedValues+0x9d0>)
 800473a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800473e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004742:	e000      	b.n	8004746 <proceedGluedValues+0x90e>
    return 0;
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

                ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");
 800474a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004752:	4413      	add	r3, r2
 8004754:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004758:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d219      	bcs.n	8004796 <proceedGluedValues+0x95e>
 8004762:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476a:	4413      	add	r3, r2
 800476c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004770:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	bf34      	ite	cc
 800477a:	2301      	movcc	r3, #1
 800477c:	2300      	movcs	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	4619      	mov	r1, r3
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <proceedGluedValues+0x9d4>)
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	f44f 7306 	mov.w	r3, #536	; 0x218
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <proceedGluedValues+0x9bc>)
 800478c:	4820      	ldr	r0, [pc, #128]	; (8004810 <proceedGluedValues+0x9d8>)
 800478e:	f000 fecb 	bl	8005528 <__M_Error>
 8004792:	2300      	movs	r3, #0
 8004794:	e1ad      	b.n	8004af2 <proceedGluedValues+0xcba>

                ptr = (entity->pointer + field->shift);
 8004796:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4413      	add	r3, r2
 80047a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 80047a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047b2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80047b6:	6819      	ldr	r1, [r3, #0]
 80047b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80047bc:	440b      	add	r3, r1
 80047be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80047c4:	67ba      	str	r2, [r7, #120]	; 0x78
 80047c6:	677b      	str	r3, [r7, #116]	; 0x74
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047cc:	673b      	str	r3, [r7, #112]	; 0x70
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80047ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d056      	beq.n	8004886 <proceedGluedValues+0xa4e>
 80047d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d051      	beq.n	8004886 <proceedGluedValues+0xa4e>
										const void* reg_ptr_from = ptr ? (const void*) (* REG_TYPE_DC(ptr)) : 0;
 80047e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d015      	beq.n	8004814 <proceedGluedValues+0x9dc>
 80047e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	e013      	b.n	8004816 <proceedGluedValues+0x9de>
 80047ee:	bf00      	nop
 80047f0:	0800ebb8 	.word	0x0800ebb8
 80047f4:	0800e210 	.word	0x0800e210
 80047f8:	0800ec0c 	.word	0x0800ec0c
 80047fc:	0800ec28 	.word	0x0800ec28
 8004800:	0800eb38 	.word	0x0800eb38
 8004804:	20000290 	.word	0x20000290
 8004808:	0800f788 	.word	0x0800f788
 800480c:	0800eb7c 	.word	0x0800eb7c
 8004810:	0800e860 	.word	0x0800e860
 8004814:	2300      	movs	r3, #0
 8004816:	66fb      	str	r3, [r7, #108]	; 0x6c
										if(reg_ptr_from) {
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02d      	beq.n	800487a <proceedGluedValues+0xa42>
											const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 800481e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004826:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	2304      	movs	r3, #4
 800482e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004830:	f107 0318 	add.w	r3, r7, #24
 8004834:	667b      	str	r3, [r7, #100]	; 0x64
 8004836:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800483a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800483e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004840:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004844:	2b00      	cmp	r3, #0
 8004846:	d015      	beq.n	8004874 <proceedGluedValues+0xa3c>
 8004848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800484a:	2b01      	cmp	r3, #1
 800484c:	d108      	bne.n	8004860 <proceedGluedValues+0xa28>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800484e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004856:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e00a      	b.n	8004876 <proceedGluedValues+0xa3e>
    default: memcpy(to, from, n); break;
 8004860:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004864:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004868:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800486a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	f004 fa05 	bl	8008c7c <memcpy>
 8004872:	e000      	b.n	8004876 <proceedGluedValues+0xa3e>
    case 0: break;
 8004874:	bf00      	nop
}
 8004876:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004878:	e106      	b.n	8004a88 <proceedGluedValues+0xc50>
											memset(outputData, 0, sizeof(reg));
 800487a:	2204      	movs	r2, #4
 800487c:	2100      	movs	r1, #0
 800487e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004880:	f004 fa24 	bl	8008ccc <memset>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004884:	e100      	b.n	8004a88 <proceedGluedValues+0xc50>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8004886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d04d      	beq.n	800492c <proceedGluedValues+0xaf4>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 8004890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <proceedGluedValues+0xa64>
 8004896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	e000      	b.n	800489e <proceedGluedValues+0xa66>
 800489c:	2300      	movs	r3, #0
 800489e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80048a2:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048b0:	2204      	movs	r2, #4
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048bc:	f107 0214 	add.w	r2, r7, #20
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048cc:	601a      	str	r2, [r3, #0]
    switch (n) {
 80048ce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d025      	beq.n	8004928 <proceedGluedValues+0xaf0>
 80048dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10c      	bne.n	8004904 <proceedGluedValues+0xacc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80048ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e012      	b.n	800492a <proceedGluedValues+0xaf2>
    default: memcpy(to, from, n); break;
 8004904:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004908:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800490c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004910:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8004914:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004918:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	6809      	ldr	r1, [r1, #0]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	f004 f9ab 	bl	8008c7c <memcpy>
 8004926:	e000      	b.n	800492a <proceedGluedValues+0xaf2>
    case 0: break;
 8004928:	bf00      	nop
}
 800492a:	e0ad      	b.n	8004a88 <proceedGluedValues+0xc50>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 800492c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d05e      	beq.n	80049f4 <proceedGluedValues+0xbbc>
										const void* reg_ptr_from = ptr ? (const void *)(* REG_TYPE_DC(ptr)) : 0;
 8004936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <proceedGluedValues+0xb0c>
 800493c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	e000      	b.n	8004946 <proceedGluedValues+0xb0e>
 8004944:	2200      	movs	r2, #0
 8004946:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800494a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800494e:	601a      	str	r2, [r3, #0]
										if(reg_ptr_from) {
 8004950:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004954:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d044      	beq.n	80049e8 <proceedGluedValues+0xbb0>
 800495e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004962:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004966:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800496e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004972:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004976:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004982:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004986:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004988:	601a      	str	r2, [r3, #0]
    switch (n) {
 800498a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800498e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d025      	beq.n	80049e4 <proceedGluedValues+0xbac>
 8004998:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800499c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10c      	bne.n	80049c0 <proceedGluedValues+0xb88>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80049a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e012      	b.n	80049e6 <proceedGluedValues+0xbae>
    default: memcpy(to, from, n); break;
 80049c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049c4:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80049c8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049cc:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 80049d0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	6809      	ldr	r1, [r1, #0]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	f004 f94d 	bl	8008c7c <memcpy>
 80049e2:	e000      	b.n	80049e6 <proceedGluedValues+0xbae>
    case 0: break;
 80049e4:	bf00      	nop
}
 80049e6:	e04f      	b.n	8004a88 <proceedGluedValues+0xc50>
											memset(outputData, 0, typeLen);
 80049e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80049ea:	2100      	movs	r1, #0
 80049ec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80049ee:	f004 f96d 	bl	8008ccc <memset>
}
 80049f2:	e049      	b.n	8004a88 <proceedGluedValues+0xc50>
                                    	if(ptr) {
 80049f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d040      	beq.n	8004a7c <proceedGluedValues+0xc44>
 80049fa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a0a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a1c:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004a1e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a22:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d025      	beq.n	8004a78 <proceedGluedValues+0xc40>
 8004a2c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d10c      	bne.n	8004a54 <proceedGluedValues+0xc1c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004a3a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a3e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e012      	b.n	8004a7a <proceedGluedValues+0xc42>
    default: memcpy(to, from, n); break;
 8004a54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a58:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8004a5c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a60:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 8004a64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	6809      	ldr	r1, [r1, #0]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	f004 f903 	bl	8008c7c <memcpy>
 8004a76:	e000      	b.n	8004a7a <proceedGluedValues+0xc42>
    case 0: break;
 8004a78:	bf00      	nop
}
 8004a7a:	e005      	b.n	8004a88 <proceedGluedValues+0xc50>
                                    		memset(outputData, 0, typeLen);
 8004a7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004a7e:	2100      	movs	r1, #0
 8004a80:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004a82:	f004 f923 	bl	8008ccc <memset>
}
 8004a86:	e7ff      	b.n	8004a88 <proceedGluedValues+0xc50>
 8004a88:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8004a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8004a94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <proceedGluedValues+0xc7c>
                    __entityCallback(entity, field, ptr, field->rdCallback.context);
 8004a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8004aa6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004aaa:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004aae:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004ab2:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_READ_CALLBACK */

                Wpos += typeLen;
 8004ab4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004abc:	4413      	add	r3, r2
 8004abe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8004ac2:	e001      	b.n	8004ac8 <proceedGluedValues+0xc90>
            } else {
                return ENTITY_ERROR;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e014      	b.n	8004af2 <proceedGluedValues+0xcba>
        for(reg i = 0; i < readRequestCnt; ++i) {
 8004ac8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004acc:	3301      	adds	r3, #1
 8004ace:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004ada:	429a      	cmp	r2, r3
 8004adc:	f4ff ad5c 	bcc.w	8004598 <proceedGluedValues+0x760>
            }
        }
    }

    (*size) = Wpos;
 8004ae0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ae4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004aee:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8004af0:	2301      	movs	r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd90      	pop	{r4, r7, pc}

08004afc <rawParser_dma_init>:
    }
    return self;
}

int rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: No input data valid ");
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <rawParser_dma_init+0x32>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4b23      	ldr	r3, [pc, #140]	; (8004bac <rawParser_dma_init+0xb0>)
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2348      	movs	r3, #72	; 0x48
 8004b22:	4a23      	ldr	r2, [pc, #140]	; (8004bb0 <rawParser_dma_init+0xb4>)
 8004b24:	4823      	ldr	r0, [pc, #140]	; (8004bb4 <rawParser_dma_init+0xb8>)
 8004b26:	f000 fcff 	bl	8005528 <__M_Error>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e03a      	b.n	8004ba4 <rawParser_dma_init+0xa8>

    self->m_startByte = packStart;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	701a      	strb	r2, [r3, #0]
    self->m_receivePackLen = 0;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
    self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	22ff      	movs	r2, #255	; 0xff
 8004b3e:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

    self->m_triggerSB = 0;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
    self->m_receivePos = 0;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    self->m_receiveReadPos = 0;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    self->m_receiveHandlePos = 0;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    self->TX.data = self->m_sendBuffer;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#else
    self->TX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    self->TX.size = 0;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
    self->RX.data = self->m_receiveFrameBuffer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
#else
    self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

    self->RX.size = 0;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

    self->uniRXPosition = 0;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return D_RAW_P_OK;
 8004ba2:	2301      	movs	r3, #1
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	0800ecec 	.word	0x0800ecec
 8004bb0:	0800ec60 	.word	0x0800ec60
 8004bb4:	0800ec9c 	.word	0x0800ec9c

08004bb8 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af04      	add	r7, sp, #16
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	70bb      	strb	r3, [r7, #2]
    if (newFrame) {
 8004bc8:	78bb      	ldrb	r3, [r7, #2]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
    	//M_Assert_Warning(self->receiveState < RAW_P_DMA_RECEIVE_CRC_0 , M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: last packet error!!!");

    	self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	22ff      	movs	r2, #255	; 0xff
 8004bd2:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

        self->m_receiveHandlePos = 0;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
    }

    switch(self->receiveState) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 8004bec:	2b0d      	cmp	r3, #13
 8004bee:	f200 80d1 	bhi.w	8004d94 <RawParser_dma_proceedByte+0x1dc>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <RawParser_dma_proceedByte+0x40>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c31 	.word	0x08004c31
 8004bfc:	08004d95 	.word	0x08004d95
 8004c00:	08004d95 	.word	0x08004d95
 8004c04:	08004cbf 	.word	0x08004cbf
 8004c08:	08004d11 	.word	0x08004d11
 8004c0c:	08004d95 	.word	0x08004d95
 8004c10:	08004d95 	.word	0x08004d95
 8004c14:	08004d95 	.word	0x08004d95
 8004c18:	08004d95 	.word	0x08004d95
 8004c1c:	08004d95 	.word	0x08004d95
 8004c20:	08004d95 	.word	0x08004d95
 8004c24:	08004d95 	.word	0x08004d95
 8004c28:	08004d59 	.word	0x08004d59
 8004c2c:	08004d7d 	.word	0x08004d7d

    case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd f866 	bl	8001d0c <fast_crc8_maxim_byte>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        if(RECEIVE_EXTENDED_LEN_CMD == ch) {
            self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
        } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

            const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d902      	bls.n	8004c5a <RawParser_dma_proceedByte+0xa2>
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	e000      	b.n	8004c5c <RawParser_dma_proceedByte+0xa4>
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6053      	str	r3, [r2, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60bb      	str	r3, [r7, #8]
            self->m_receiveHandlePos = 0;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2203      	movs	r2, #3
 8004c72:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

            M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d803      	bhi.n	8004c86 <RawParser_dma_proceedByte+0xce>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 8089 	bne.w	8004d98 <RawParser_dma_proceedByte+0x1e0>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8c:	d802      	bhi.n	8004c94 <RawParser_dma_proceedByte+0xdc>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <RawParser_dma_proceedByte+0xe0>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <RawParser_dma_proceedByte+0xe2>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	b2d9      	uxtb	r1, r3
 8004c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca0:	9302      	str	r3, [sp, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	; (8004da4 <RawParser_dma_proceedByte+0x1ec>)
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	23cd      	movs	r3, #205	; 0xcd
 8004cac:	4a3e      	ldr	r2, [pc, #248]	; (8004da8 <RawParser_dma_proceedByte+0x1f0>)
 8004cae:	483f      	ldr	r0, [pc, #252]	; (8004dac <RawParser_dma_proceedByte+0x1f4>)
 8004cb0:	f000 fc58 	bl	8005564 <__M_Warning>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	220c      	movs	r2, #12
 8004cb8:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
        }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        break;}
 8004cbc:	e06c      	b.n	8004d98 <RawParser_dma_proceedByte+0x1e0>

        break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    case RAW_P_DMA_RECEIVE_DATA: {
        reg rx_pos = self->m_receiveHandlePos;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 8004cc4:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fd f81b 	bl	8001d0c <fast_crc8_maxim_byte>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
#endif /* D_RAW_P_CRC_ENA */

        self->RX.data[rx_pos] = ch;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 2624 	ldr.w	r2, [r3, #1572]	; 0x624
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	701a      	strb	r2, [r3, #0]
        ++rx_pos;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]

        if (rx_pos == self->m_receivePackLen) {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d103      	bne.n	8004d06 <RawParser_dma_proceedByte+0x14e>

#ifdef D_RAW_P_CRC_ENA
            D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
            self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2204      	movs	r2, #4
 8004d02:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
            self->RX.size = self->m_receivePackLen;
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
        }

        self->m_receiveHandlePos = rx_pos;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        break;}
 8004d0e:	e044      	b.n	8004d9a <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

        if(self->m_receiveCalcCRC == ch) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d109      	bne.n	8004d30 <RawParser_dma_proceedByte+0x178>
            self->RX.size = self->m_receivePackLen;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	220d      	movs	r2, #13
 8004d2a:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
        self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

        break;}
 8004d2e:	e034      	b.n	8004d9a <RawParser_dma_proceedByte+0x1e2>
            M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive CRC8 error, rx_crc: %d, calc_crc: %d", ch, self->m_receiveCalcCRC);
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	f892 2608 	ldrb.w	r2, [r2, #1544]	; 0x608
 8004d38:	9202      	str	r2, [sp, #8]
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <RawParser_dma_proceedByte+0x1f8>)
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	f240 1323 	movw	r3, #291	; 0x123
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <RawParser_dma_proceedByte+0x1f0>)
 8004d46:	2101      	movs	r1, #1
 8004d48:	481a      	ldr	r0, [pc, #104]	; (8004db4 <RawParser_dma_proceedByte+0x1fc>)
 8004d4a:	f000 fc0b 	bl	8005564 <__M_Warning>
            self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	220c      	movs	r2, #12
 8004d52:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        break;}
 8004d56:	e020      	b.n	8004d9a <RawParser_dma_proceedByte+0x1e2>

#endif /* D_RAW_P_CRC_ENA */


    case RAW_P_DMA_RECEIVE_ERR:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive error, byte: %d, rx_len: %d, max_rxlen: %d", ch, self->m_receivePackLen, D_RAW_P_RX_BUF_SIZE);
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6852      	ldr	r2, [r2, #4]
 8004d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d62:	9103      	str	r1, [sp, #12]
 8004d64:	9202      	str	r2, [sp, #8]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <RawParser_dma_proceedByte+0x200>)
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <RawParser_dma_proceedByte+0x1f0>)
 8004d72:	2101      	movs	r1, #1
 8004d74:	480f      	ldr	r0, [pc, #60]	; (8004db4 <RawParser_dma_proceedByte+0x1fc>)
 8004d76:	f000 fbf5 	bl	8005564 <__M_Warning>
        break;
 8004d7a:	e00e      	b.n	8004d9a <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_OK:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: LAST Received OK, byte: %d is not received because no SB", ch);
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <RawParser_dma_proceedByte+0x204>)
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004d88:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <RawParser_dma_proceedByte+0x1f0>)
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4809      	ldr	r0, [pc, #36]	; (8004db4 <RawParser_dma_proceedByte+0x1fc>)
 8004d8e:	f000 fbe9 	bl	8005564 <__M_Warning>
        break;
 8004d92:	e002      	b.n	8004d9a <RawParser_dma_proceedByte+0x1e2>

    default:
        break;
 8004d94:	bf00      	nop
 8004d96:	e000      	b.n	8004d9a <RawParser_dma_proceedByte+0x1e2>
        break;}
 8004d98:	bf00      	nop
    }
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	0800ed98 	.word	0x0800ed98
 8004da8:	0800ec60 	.word	0x0800ec60
 8004dac:	0800ed68 	.word	0x0800ed68
 8004db0:	0800edf4 	.word	0x0800edf4
 8004db4:	0800ede8 	.word	0x0800ede8
 8004db8:	0800ee3c 	.word	0x0800ee3c
 8004dbc:	0800ee8c 	.word	0x0800ee8c

08004dc0 <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid input");
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d110      	bne.n	8004df0 <RawParser_dma_proceed+0x30>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4b33      	ldr	r3, [pc, #204]	; (8004eac <RawParser_dma_proceed+0xec>)
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8004de4:	4a32      	ldr	r2, [pc, #200]	; (8004eb0 <RawParser_dma_proceed+0xf0>)
 8004de6:	4833      	ldr	r0, [pc, #204]	; (8004eb4 <RawParser_dma_proceed+0xf4>)
 8004de8:	f000 fb9e 	bl	8005528 <__M_Error>
 8004dec:	2300      	movs	r3, #0
 8004dee:	e059      	b.n	8004ea4 <RawParser_dma_proceed+0xe4>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	613b      	str	r3, [r7, #16]
            reg   receiveReadPos      = self->m_receiveReadPos    & (D_RAW_P_RX_BUF_SIZE - 1U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 8004e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e06:	617b      	str	r3, [r7, #20]
    self->RX.size = 0;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

//    if(receivePos_saved == receiveReadPos) { // may be needed
//        return &self->RX;
//    }

    while (receivePos_saved != receiveReadPos) {
 8004e10:	e03b      	b.n	8004e8a <RawParser_dma_proceed+0xca>

        const u8 ch = self->m_receiveBuffer[receiveReadPos];
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	3308      	adds	r3, #8
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	73fb      	strb	r3, [r7, #15]

        if (self->m_triggerSB) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 360a 	ldrb.w	r3, [r3, #1546]	; 0x60a
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d016      	beq.n	8004e56 <RawParser_dma_proceed+0x96>
            if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	7bfa      	ldrb	r2, [r7, #15]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d106      	bne.n	8004e40 <RawParser_dma_proceed+0x80>
                RawParser_dma_proceedByte(self, ch, 0);
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2200      	movs	r2, #0
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff febd 	bl	8004bb8 <RawParser_dma_proceedByte>
 8004e3e:	e005      	b.n	8004e4c <RawParser_dma_proceed+0x8c>
            } else { //{SB}{!SB} -> {SB} and newframe
                RawParser_dma_proceedByte(self, ch, 1);
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2201      	movs	r2, #1
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff feb6 	bl	8004bb8 <RawParser_dma_proceedByte>
            }
            self->m_triggerSB = 0;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8004e54:	e00f      	b.n	8004e76 <RawParser_dma_proceed+0xb6>
        } else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	7bfa      	ldrb	r2, [r7, #15]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d104      	bne.n	8004e6a <RawParser_dma_proceed+0xaa>
            self->m_triggerSB = 1;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8004e68:	e005      	b.n	8004e76 <RawParser_dma_proceed+0xb6>
        } else { //{!SB}{!SB} -> {!SB}
            RawParser_dma_proceedByte(self, ch, 0);
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fea1 	bl	8004bb8 <RawParser_dma_proceedByte>
        }

        receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	617b      	str	r3, [r7, #20]

        if(self->RX.size != 0) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <RawParser_dma_proceed+0xd4>
    while (receivePos_saved != receiveReadPos) {
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d1bf      	bne.n	8004e12 <RawParser_dma_proceed+0x52>
 8004e92:	e000      	b.n	8004e96 <RawParser_dma_proceed+0xd6>
#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
            /* Now decode -- encoded codeword size must be passed */
            rscode_decode(&self->rs_ecc, self->RX.data, self->RX.size);
            self->RX.size -= RSCODE_NPAR;
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */
            break;
 8004e94:	bf00      	nop
        }
    }

    self->m_receiveReadPos = receiveReadPos;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    return &self->RX;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f203 6324 	addw	r3, r3, #1572	; 0x624
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	0800ef04 	.word	0x0800ef04
 8004eb0:	0800ec60 	.word	0x0800ec60
 8004eb4:	0800eee0 	.word	0x0800eee0

08004eb8 <RawParser_dma_shieldFrame>:

// slow shield functions (slow & more copy)-----------------------------------------------------------------------------------------
RawParser_Frame_t* RawParser_dma_shieldFrame(RawParser_dma_t* const self, const u8* data, reg len)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08c      	sub	sp, #48	; 0x30
 8004ebc:	af04      	add	r7, sp, #16
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_shieldFrame: No valid input");
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d110      	bne.n	8004eec <RawParser_dma_shieldFrame+0x34>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4b57      	ldr	r3, [pc, #348]	; (8005038 <RawParser_dma_shieldFrame+0x180>)
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 8004ee0:	4a56      	ldr	r2, [pc, #344]	; (800503c <RawParser_dma_shieldFrame+0x184>)
 8004ee2:	4857      	ldr	r0, [pc, #348]	; (8005040 <RawParser_dma_shieldFrame+0x188>)
 8004ee4:	f000 fb20 	bl	8005528 <__M_Error>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e0a1      	b.n	8005030 <RawParser_dma_shieldFrame+0x178>
    M_Assert_Break((data == (u8*)NULL) || len == 0, M_EMPTY, {
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <RawParser_dma_shieldFrame+0x40>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d119      	bne.n	8004f2c <RawParser_dma_shieldFrame+0x74>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <RawParser_dma_shieldFrame+0x4c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <RawParser_dma_shieldFrame+0x50>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <RawParser_dma_shieldFrame+0x52>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	b2d9      	uxtb	r1, r3
 8004f0c:	4b4a      	ldr	r3, [pc, #296]	; (8005038 <RawParser_dma_shieldFrame+0x180>)
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	f240 13d3 	movw	r3, #467	; 0x1d3
 8004f14:	4a49      	ldr	r2, [pc, #292]	; (800503c <RawParser_dma_shieldFrame+0x184>)
 8004f16:	484b      	ldr	r0, [pc, #300]	; (8005044 <RawParser_dma_shieldFrame+0x18c>)
 8004f18:	f000 fb06 	bl	8005528 <__M_Error>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8004f2a:	e081      	b.n	8005030 <RawParser_dma_shieldFrame+0x178>

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    RawParser_dma_startTransmittPacket(self, (len + RSCODE_NPAR));
    rs_encode_data_onlyParity(&self->rs_ecc, data, len);
#else
    RawParser_dma_startTransmittPacket(self, len);
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f892 	bl	8005058 <RawParser_dma_startTransmittPacket>

#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    while(len--) {
 8004f34:	e073      	b.n	800501e <RawParser_dma_shieldFrame+0x166>
        RawParser_dma_addTxByteCRC(self, *data++);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	60ba      	str	r2, [r7, #8]
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	4613      	mov	r3, r2
 8004f44:	76fb      	strb	r3, [r7, #27]

#ifdef D_RAW_P_CRC_ENA
// elementary byte adding functions with calc crc----------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_addTxByteCRC(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10e      	bne.n	8004f6a <RawParser_dma_shieldFrame+0xb2>
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <RawParser_dma_shieldFrame+0x190>)
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	23a1      	movs	r3, #161	; 0xa1
 8004f60:	4a3a      	ldr	r2, [pc, #232]	; (800504c <RawParser_dma_shieldFrame+0x194>)
 8004f62:	4837      	ldr	r0, [pc, #220]	; (8005040 <RawParser_dma_shieldFrame+0x188>)
 8004f64:	f000 fae0 	bl	8005528 <__M_Error>
 8004f68:	e059      	b.n	800501e <RawParser_dma_shieldFrame+0x166>
#   ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#   endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    // move to cash
    u8* const   TX_data   = self->TX.data;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004f70:	617b      	str	r3, [r7, #20]
    reg         TX_size   = self->TX.size;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004f78:	613b      	str	r3, [r7, #16]


#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2bfd      	cmp	r3, #253	; 0xfd
 8004f7e:	d113      	bne.n	8004fa8 <RawParser_dma_shieldFrame+0xf0>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2bfd      	cmp	r3, #253	; 0xfd
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3301      	adds	r3, #1
 8004f92:	22fd      	movs	r2, #253	; 0xfd
 8004f94:	9202      	str	r2, [sp, #8]
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <RawParser_dma_shieldFrame+0x198>)
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	23b1      	movs	r3, #177	; 0xb1
 8004f9e:	4a2b      	ldr	r2, [pc, #172]	; (800504c <RawParser_dma_shieldFrame+0x194>)
 8004fa0:	482c      	ldr	r0, [pc, #176]	; (8005054 <RawParser_dma_shieldFrame+0x19c>)
 8004fa2:	f000 fac1 	bl	8005528 <__M_Error>
 8004fa6:	e03a      	b.n	800501e <RawParser_dma_shieldFrame+0x166>
#   else
    M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */


    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004fae:	7efa      	ldrb	r2, [r7, #27]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fc feaa 	bl	8001d0c <fast_crc8_maxim_byte>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609

    TX_data[TX_size++] = byte;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	613a      	str	r2, [r7, #16]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4413      	add	r3, r2
 8004fcc:	7efa      	ldrb	r2, [r7, #27]
 8004fce:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	7efa      	ldrb	r2, [r7, #27]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d11d      	bne.n	8005016 <RawParser_dma_shieldFrame+0x15e>

#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2bfd      	cmp	r3, #253	; 0xfd
 8004fde:	d113      	bne.n	8005008 <RawParser_dma_shieldFrame+0x150>
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2bfd      	cmp	r3, #253	; 0xfd
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	22fd      	movs	r2, #253	; 0xfd
 8004ff4:	9202      	str	r2, [sp, #8]
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	4b15      	ldr	r3, [pc, #84]	; (8005050 <RawParser_dma_shieldFrame+0x198>)
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	23bd      	movs	r3, #189	; 0xbd
 8004ffe:	4a13      	ldr	r2, [pc, #76]	; (800504c <RawParser_dma_shieldFrame+0x194>)
 8005000:	4814      	ldr	r0, [pc, #80]	; (8005054 <RawParser_dma_shieldFrame+0x19c>)
 8005002:	f000 fa91 	bl	8005528 <__M_Error>
 8005006:	e00a      	b.n	800501e <RawParser_dma_shieldFrame+0x166>
#   else
        M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */

        TX_data[TX_size++] = byte;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	613a      	str	r2, [r7, #16]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4413      	add	r3, r2
 8005012:	7efa      	ldrb	r2, [r7, #27]
 8005014:	701a      	strb	r2, [r3, #0]
    }

    self->TX.size = TX_size;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    while(len--) {
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	1e5a      	subs	r2, r3, #1
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d186      	bne.n	8004f36 <RawParser_dma_shieldFrame+0x7e>
    for (unsigned i = 0; i < RSCODE_NPAR; ++i) {
        RawParser_dma_addTxByteCRC(self, pBytes[RSCODE_NPAR-1-i]);
    }
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return RawParser_dma_finishTransmittPacket(self);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f91f 	bl	800526c <RawParser_dma_finishTransmittPacket>
 800502e:	4603      	mov	r3, r0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	0800ef2c 	.word	0x0800ef2c
 800503c:	0800ec60 	.word	0x0800ec60
 8005040:	0800eee0 	.word	0x0800eee0
 8005044:	0800ef58 	.word	0x0800ef58
 8005048:	0800efb4 	.word	0x0800efb4
 800504c:	0800ef78 	.word	0x0800ef78
 8005050:	0800f00c 	.word	0x0800f00c
 8005054:	0800efe0 	.word	0x0800efe0

08005058 <RawParser_dma_startTransmittPacket>:

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
void RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen) /////////////////////////////////////////////////////
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08c      	sub	sp, #48	; 0x30
 800505c:	af04      	add	r7, sp, #16
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input");
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10f      	bne.n	8005088 <RawParser_dma_startTransmittPacket+0x30>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	4619      	mov	r1, r3
 8005076:	4b70      	ldr	r3, [pc, #448]	; (8005238 <RawParser_dma_startTransmittPacket+0x1e0>)
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	f240 13f3 	movw	r3, #499	; 0x1f3
 800507e:	4a6f      	ldr	r2, [pc, #444]	; (800523c <RawParser_dma_startTransmittPacket+0x1e4>)
 8005080:	486f      	ldr	r0, [pc, #444]	; (8005240 <RawParser_dma_startTransmittPacket+0x1e8>)
 8005082:	f000 fa51 	bl	8005528 <__M_Error>
 8005086:	e0d3      	b.n	8005230 <RawParser_dma_startTransmittPacket+0x1d8>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    M_Assert_Break((predictedLen == 0), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length");
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10f      	bne.n	80050ae <RawParser_dma_startTransmittPacket+0x56>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	4619      	mov	r1, r3
 800509c:	4b69      	ldr	r3, [pc, #420]	; (8005244 <RawParser_dma_startTransmittPacket+0x1ec>)
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	f240 13fd 	movw	r3, #509	; 0x1fd
 80050a4:	4a65      	ldr	r2, [pc, #404]	; (800523c <RawParser_dma_startTransmittPacket+0x1e4>)
 80050a6:	4868      	ldr	r0, [pc, #416]	; (8005248 <RawParser_dma_startTransmittPacket+0x1f0>)
 80050a8:	f000 fa3e 	bl	8005528 <__M_Error>
 80050ac:	e0c0      	b.n	8005230 <RawParser_dma_startTransmittPacket+0x1d8>

#if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE // control undefined behavior
    M_Assert_Break( ((predictedLen + 4) > (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_MAX_PROTOCOL_LEN);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2bfd      	cmp	r3, #253	; 0xfd
 80050b4:	d914      	bls.n	80050e0 <RawParser_dma_startTransmittPacket+0x88>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	3304      	adds	r3, #4
 80050ba:	2bfd      	cmp	r3, #253	; 0xfd
 80050bc:	bf8c      	ite	hi
 80050be:	2301      	movhi	r3, #1
 80050c0:	2300      	movls	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	23fe      	movs	r3, #254	; 0xfe
 80050c8:	9302      	str	r3, [sp, #8]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	4b5f      	ldr	r3, [pc, #380]	; (800524c <RawParser_dma_startTransmittPacket+0x1f4>)
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d6:	4a59      	ldr	r2, [pc, #356]	; (800523c <RawParser_dma_startTransmittPacket+0x1e4>)
 80050d8:	485d      	ldr	r0, [pc, #372]	; (8005250 <RawParser_dma_startTransmittPacket+0x1f8>)
 80050da:	f000 fa25 	bl	8005528 <__M_Error>
 80050de:	e0a7      	b.n	8005230 <RawParser_dma_startTransmittPacket+0x1d8>
    M_Assert_Warning((predictedLen > (D_RAW_P_MAX_PROTOCOL_LEN >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_MAX_PROTOCOL_LEN >> 1));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b7f      	cmp	r3, #127	; 0x7f
 80050e4:	d912      	bls.n	800510c <RawParser_dma_startTransmittPacket+0xb4>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b7f      	cmp	r3, #127	; 0x7f
 80050ea:	bf8c      	ite	hi
 80050ec:	2301      	movhi	r3, #1
 80050ee:	2300      	movls	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	4619      	mov	r1, r3
 80050f4:	237f      	movs	r3, #127	; 0x7f
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	4b55      	ldr	r3, [pc, #340]	; (8005254 <RawParser_dma_startTransmittPacket+0x1fc>)
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	f240 2301 	movw	r3, #513	; 0x201
 8005104:	4a4d      	ldr	r2, [pc, #308]	; (800523c <RawParser_dma_startTransmittPacket+0x1e4>)
 8005106:	4854      	ldr	r0, [pc, #336]	; (8005258 <RawParser_dma_startTransmittPacket+0x200>)
 8005108:	f000 fa2c 	bl	8005564 <__M_Warning>
    M_Assert_Warning((predictedLen > (D_RAW_P_TX_BUF_SIZE >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - buffer size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_TX_BUF_SIZE >> 1));
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */


#ifdef D_RAW_P_CRC_ENA
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	22ff      	movs	r2, #255	; 0xff
 8005110:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    D_RAW_P_CRC_START(self->m_transmittCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

    const u8 startByte = self->m_startByte;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	77fb      	strb	r3, [r7, #31]


    self->TX.size = 0;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    self->TX.data[self->TX.size++] = startByte;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800512e:	1c58      	adds	r0, r3, #1
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	f8c1 0620 	str.w	r0, [r1, #1568]	; 0x620
 8005136:	4413      	add	r3, r2
 8005138:	7ffa      	ldrb	r2, [r7, #31]
 800513a:	701a      	strb	r2, [r3, #0]
        RawParser_dma_addTxByteCRC(self, (u8)((predictedLen >> 8U) & 0x000000FFUL));

    } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        RawParser_dma_addTxByteCRC(self, (u8)(((predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen) & 0x000000FFUL));
 800513c:	7ffb      	ldrb	r3, [r7, #31]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d304      	bcc.n	800514e <RawParser_dma_startTransmittPacket+0xf6>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	3301      	adds	r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e001      	b.n	8005152 <RawParser_dma_startTransmittPacket+0xfa>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	61ba      	str	r2, [r7, #24]
 8005156:	75fb      	strb	r3, [r7, #23]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10e      	bne.n	800517c <RawParser_dma_startTransmittPacket+0x124>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	4619      	mov	r1, r3
 800516c:	4b3b      	ldr	r3, [pc, #236]	; (800525c <RawParser_dma_startTransmittPacket+0x204>)
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	23a1      	movs	r3, #161	; 0xa1
 8005172:	4a3b      	ldr	r2, [pc, #236]	; (8005260 <RawParser_dma_startTransmittPacket+0x208>)
 8005174:	4832      	ldr	r0, [pc, #200]	; (8005240 <RawParser_dma_startTransmittPacket+0x1e8>)
 8005176:	f000 f9d7 	bl	8005528 <__M_Error>
 800517a:	e059      	b.n	8005230 <RawParser_dma_startTransmittPacket+0x1d8>
    u8* const   TX_data   = self->TX.data;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8005182:	613b      	str	r3, [r7, #16]
    reg         TX_size   = self->TX.size;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800518a:	60fb      	str	r3, [r7, #12]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2bfd      	cmp	r3, #253	; 0xfd
 8005190:	d113      	bne.n	80051ba <RawParser_dma_startTransmittPacket+0x162>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2bfd      	cmp	r3, #253	; 0xfd
 8005196:	bf0c      	ite	eq
 8005198:	2301      	moveq	r3, #1
 800519a:	2300      	movne	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	4619      	mov	r1, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	22fd      	movs	r2, #253	; 0xfd
 80051a6:	9202      	str	r2, [sp, #8]
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <RawParser_dma_startTransmittPacket+0x20c>)
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	23b1      	movs	r3, #177	; 0xb1
 80051b0:	4a2b      	ldr	r2, [pc, #172]	; (8005260 <RawParser_dma_startTransmittPacket+0x208>)
 80051b2:	482d      	ldr	r0, [pc, #180]	; (8005268 <RawParser_dma_startTransmittPacket+0x210>)
 80051b4:	f000 f9b8 	bl	8005528 <__M_Error>
 80051b8:	e03a      	b.n	8005230 <RawParser_dma_startTransmittPacket+0x1d8>
    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 80051c0:	7dfa      	ldrb	r2, [r7, #23]
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fc fda1 	bl	8001d0c <fast_crc8_maxim_byte>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    TX_data[TX_size++] = byte;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	60fa      	str	r2, [r7, #12]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	7dfa      	ldrb	r2, [r7, #23]
 80051e0:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	7dfa      	ldrb	r2, [r7, #23]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d11d      	bne.n	8005228 <RawParser_dma_startTransmittPacket+0x1d0>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2bfd      	cmp	r3, #253	; 0xfd
 80051f0:	d113      	bne.n	800521a <RawParser_dma_startTransmittPacket+0x1c2>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2bfd      	cmp	r3, #253	; 0xfd
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	4619      	mov	r1, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	22fd      	movs	r2, #253	; 0xfd
 8005206:	9202      	str	r2, [sp, #8]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <RawParser_dma_startTransmittPacket+0x20c>)
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	23bd      	movs	r3, #189	; 0xbd
 8005210:	4a13      	ldr	r2, [pc, #76]	; (8005260 <RawParser_dma_startTransmittPacket+0x208>)
 8005212:	4815      	ldr	r0, [pc, #84]	; (8005268 <RawParser_dma_startTransmittPacket+0x210>)
 8005214:	f000 f988 	bl	8005528 <__M_Error>
 8005218:	e00a      	b.n	8005230 <RawParser_dma_startTransmittPacket+0x1d8>
        TX_data[TX_size++] = byte;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	60fa      	str	r2, [r7, #12]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	7dfa      	ldrb	r2, [r7, #23]
 8005226:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */
}
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	0800f05c 	.word	0x0800f05c
 800523c:	0800ec60 	.word	0x0800ec60
 8005240:	0800eee0 	.word	0x0800eee0
 8005244:	0800f0a4 	.word	0x0800f0a4
 8005248:	0800f090 	.word	0x0800f090
 800524c:	0800f118 	.word	0x0800f118
 8005250:	0800f0e0 	.word	0x0800f0e0
 8005254:	0800f198 	.word	0x0800f198
 8005258:	0800f164 	.word	0x0800f164
 800525c:	0800efb4 	.word	0x0800efb4
 8005260:	0800ef78 	.word	0x0800ef78
 8005264:	0800f00c 	.word	0x0800f00c
 8005268:	0800efe0 	.word	0x0800efe0

0800526c <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af04      	add	r7, sp, #16
 8005272:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_startTransmittPacket: No valid input");
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d110      	bne.n	800529c <RawParser_dma_finishTransmittPacket+0x30>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	4619      	mov	r1, r3
 8005288:	4b3b      	ldr	r3, [pc, #236]	; (8005378 <RawParser_dma_finishTransmittPacket+0x10c>)
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	f44f 730a 	mov.w	r3, #552	; 0x228
 8005290:	4a3a      	ldr	r2, [pc, #232]	; (800537c <RawParser_dma_finishTransmittPacket+0x110>)
 8005292:	483b      	ldr	r0, [pc, #236]	; (8005380 <RawParser_dma_finishTransmittPacket+0x114>)
 8005294:	f000 f948 	bl	8005528 <__M_Error>
 8005298:	2300      	movs	r3, #0
 800529a:	e068      	b.n	800536e <RawParser_dma_finishTransmittPacket+0x102>
#ifdef D_RAW_P_CRC_ENA
    D_RAW_P_CRC_FINAL(self->m_transmittCalcCRC);

#   ifdef D_RAW_P_USE_CRC8

    RawParser_dma_addTxByte(self, self->m_transmittCalcCRC);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 2609 	ldrb.w	r2, [r3, #1545]	; 0x609
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	4613      	mov	r3, r2
 80052a8:	74fb      	strb	r3, [r7, #19]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid input");
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10e      	bne.n	80052ce <RawParser_dma_finishTransmittPacket+0x62>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	4619      	mov	r1, r3
 80052be:	4b31      	ldr	r3, [pc, #196]	; (8005384 <RawParser_dma_finishTransmittPacket+0x118>)
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2379      	movs	r3, #121	; 0x79
 80052c4:	4a30      	ldr	r2, [pc, #192]	; (8005388 <RawParser_dma_finishTransmittPacket+0x11c>)
 80052c6:	482e      	ldr	r0, [pc, #184]	; (8005380 <RawParser_dma_finishTransmittPacket+0x114>)
 80052c8:	f000 f92e 	bl	8005528 <__M_Error>
 80052cc:	e04c      	b.n	8005368 <RawParser_dma_finishTransmittPacket+0xfc>
    u8* const   TX_data   = self->TX.data;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 80052d4:	60fb      	str	r3, [r7, #12]
    reg         TX_size   = self->TX.size;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 80052dc:	60bb      	str	r3, [r7, #8]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2bfd      	cmp	r3, #253	; 0xfd
 80052e2:	d113      	bne.n	800530c <RawParser_dma_finishTransmittPacket+0xa0>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2bfd      	cmp	r3, #253	; 0xfd
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	4619      	mov	r1, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3301      	adds	r3, #1
 80052f6:	22fd      	movs	r2, #253	; 0xfd
 80052f8:	9202      	str	r2, [sp, #8]
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <RawParser_dma_finishTransmittPacket+0x120>)
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2389      	movs	r3, #137	; 0x89
 8005302:	4a21      	ldr	r2, [pc, #132]	; (8005388 <RawParser_dma_finishTransmittPacket+0x11c>)
 8005304:	4822      	ldr	r0, [pc, #136]	; (8005390 <RawParser_dma_finishTransmittPacket+0x124>)
 8005306:	f000 f90f 	bl	8005528 <__M_Error>
 800530a:	e02d      	b.n	8005368 <RawParser_dma_finishTransmittPacket+0xfc>
    TX_data[TX_size++] = byte;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	60ba      	str	r2, [r7, #8]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	7cfa      	ldrb	r2, [r7, #19]
 8005318:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	7cfa      	ldrb	r2, [r7, #19]
 8005320:	429a      	cmp	r2, r3
 8005322:	d11d      	bne.n	8005360 <RawParser_dma_finishTransmittPacket+0xf4>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2bfd      	cmp	r3, #253	; 0xfd
 8005328:	d113      	bne.n	8005352 <RawParser_dma_finishTransmittPacket+0xe6>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2bfd      	cmp	r3, #253	; 0xfd
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	4619      	mov	r1, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	3301      	adds	r3, #1
 800533c:	22fd      	movs	r2, #253	; 0xfd
 800533e:	9202      	str	r2, [sp, #8]
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <RawParser_dma_finishTransmittPacket+0x120>)
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2392      	movs	r3, #146	; 0x92
 8005348:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <RawParser_dma_finishTransmittPacket+0x11c>)
 800534a:	4811      	ldr	r0, [pc, #68]	; (8005390 <RawParser_dma_finishTransmittPacket+0x124>)
 800534c:	f000 f8ec 	bl	8005528 <__M_Error>
 8005350:	e00a      	b.n	8005368 <RawParser_dma_finishTransmittPacket+0xfc>
        TX_data[TX_size++] = byte;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	60ba      	str	r2, [r7, #8]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	7cfa      	ldrb	r2, [r7, #19]
 800535e:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    RawParser_dma_addTxByte(self, (u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

    return &self->TX;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f203 631c 	addw	r3, r3, #1564	; 0x61c
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	0800f05c 	.word	0x0800f05c
 800537c:	0800ec60 	.word	0x0800ec60
 8005380:	0800eee0 	.word	0x0800eee0
 8005384:	0800f23c 	.word	0x0800f23c
 8005388:	0800ef78 	.word	0x0800ef78
 800538c:	0800f264 	.word	0x0800f264
 8005390:	0800efe0 	.word	0x0800efe0

08005394 <__M_SEND_ASSERT_MSG>:

static inline void __M_SEND_ASSERT_MSG(const char* const header,
                                const char* const expr_str, const unsigned char expr,
                                const char* const file, const int line,
                                const char* const msg, va_list args)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)

    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b5b      	cmp	r3, #91	; 0x5b
 80053aa:	d175      	bne.n	8005498 <__M_SEND_ASSERT_MSG+0x104>
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	3302      	adds	r3, #2
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b5d      	cmp	r3, #93	; 0x5d
 80053b4:	d170      	bne.n	8005498 <__M_SEND_ASSERT_MSG+0x104>

        int assertEna = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
        char* descr = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]

        switch(__M_ASSERT_DATA(msg)) {
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	3301      	adds	r3, #1
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b73      	cmp	r3, #115	; 0x73
 80053c6:	d015      	beq.n	80053f4 <__M_SEND_ASSERT_MSG+0x60>
 80053c8:	2b73      	cmp	r3, #115	; 0x73
 80053ca:	dc23      	bgt.n	8005414 <__M_SEND_ASSERT_MSG+0x80>
 80053cc:	2b65      	cmp	r3, #101	; 0x65
 80053ce:	d019      	beq.n	8005404 <__M_SEND_ASSERT_MSG+0x70>
 80053d0:	2b65      	cmp	r3, #101	; 0x65
 80053d2:	dc1f      	bgt.n	8005414 <__M_SEND_ASSERT_MSG+0x80>
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	f000 8095 	beq.w	8005504 <__M_SEND_ASSERT_MSG+0x170>
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d11a      	bne.n	8005414 <__M_SEND_ASSERT_MSG+0x80>

        case 'd':
            // get library info
            assertEna = va_arg(args, const int);
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	1d1a      	adds	r2, r3, #4
 80053e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	1d1a      	adds	r2, r3, #4
 80053ec:	62ba      	str	r2, [r7, #40]	; 0x28
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	613b      	str	r3, [r7, #16]
            break;
 80053f2:	e00f      	b.n	8005414 <__M_SEND_ASSERT_MSG+0x80>

        case 's':
            // get library info
            assertEna = 1;
 80053f4:	2301      	movs	r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	613b      	str	r3, [r7, #16]
            break;
 8005402:	e007      	b.n	8005414 <__M_SEND_ASSERT_MSG+0x80>

        case 'e':
            // get library info
            assertEna = va_arg(args, const int);
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	62ba      	str	r2, [r7, #40]	; 0x28
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	617b      	str	r3, [r7, #20]
            descr = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	613b      	str	r3, [r7, #16]
            break;
 8005412:	bf00      	nop

        }

#   if !defined(M_MESSAGE_ALWAYS_ENABLE)
        // send message if enabled message
        if(assertEna) {
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d076      	beq.n	8005508 <__M_SEND_ASSERT_MSG+0x174>
#   endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) */
            fprintf(stderr, "\n%s\n", header);
 800541a:	4b3d      	ldr	r3, [pc, #244]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	493c      	ldr	r1, [pc, #240]	; (8005514 <__M_SEND_ASSERT_MSG+0x180>)
 8005424:	4618      	mov	r0, r3
 8005426:	f003 fb11 	bl	8008a4c <fiprintf>
            fprintf(stderr, "Library Name: %s\n", descr);
 800542a:	4b39      	ldr	r3, [pc, #228]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4939      	ldr	r1, [pc, #228]	; (8005518 <__M_SEND_ASSERT_MSG+0x184>)
 8005434:	4618      	mov	r0, r3
 8005436:	f003 fb09 	bl	8008a4c <fiprintf>
            fprintf(stderr, "Assert failed:\t");
 800543a:	4b35      	ldr	r3, [pc, #212]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	220f      	movs	r2, #15
 8005442:	2101      	movs	r1, #1
 8005444:	4835      	ldr	r0, [pc, #212]	; (800551c <__M_SEND_ASSERT_MSG+0x188>)
 8005446:	f003 fbd3 	bl	8008bf0 <fwrite>
            vfprintf(stderr, &msg[3], args);
 800544a:	4b31      	ldr	r3, [pc, #196]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68d8      	ldr	r0, [r3, #12]
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	3303      	adds	r3, #3
 8005454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005456:	4619      	mov	r1, r3
 8005458:	f003 fe90 	bl	800917c <vfiprintf>
            fprintf(stderr, "\n");
 800545c:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4619      	mov	r1, r3
 8005464:	200a      	movs	r0, #10
 8005466:	f003 fb3b 	bl	8008ae0 <fputc>

#   if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 800546a:	4b29      	ldr	r3, [pc, #164]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68d8      	ldr	r0, [r3, #12]
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	492a      	ldr	r1, [pc, #168]	; (8005520 <__M_SEND_ASSERT_MSG+0x18c>)
 8005476:	f003 fae9 	bl	8008a4c <fiprintf>
#   endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#   if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 800547a:	4b25      	ldr	r3, [pc, #148]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68d8      	ldr	r0, [r3, #12]
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	4927      	ldr	r1, [pc, #156]	; (8005524 <__M_SEND_ASSERT_MSG+0x190>)
 8005486:	f003 fae1 	bl	8008a4c <fiprintf>
#   endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */
            fflush(stderr);
 800548a:	4b21      	ldr	r3, [pc, #132]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4618      	mov	r0, r3
 8005492:	f003 f9f3 	bl	800887c <fflush>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8005496:	e037      	b.n	8005508 <__M_SEND_ASSERT_MSG+0x174>
        (void)assertEna;
    } else {

#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

        fprintf(stderr, "\n%s\n", header);
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	491c      	ldr	r1, [pc, #112]	; (8005514 <__M_SEND_ASSERT_MSG+0x180>)
 80054a2:	4618      	mov	r0, r3
 80054a4:	f003 fad2 	bl	8008a4c <fiprintf>
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
        fprintf(stderr, "Assert failed:\t");
 80054a8:	4b19      	ldr	r3, [pc, #100]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	220f      	movs	r2, #15
 80054b0:	2101      	movs	r1, #1
 80054b2:	481a      	ldr	r0, [pc, #104]	; (800551c <__M_SEND_ASSERT_MSG+0x188>)
 80054b4:	f003 fb9c 	bl	8008bf0 <fwrite>
        vfprintf(stderr, msg, args);
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054c2:	4618      	mov	r0, r3
 80054c4:	f003 fe5a 	bl	800917c <vfiprintf>
        fprintf(stderr, "\n");
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	4619      	mov	r1, r3
 80054d0:	200a      	movs	r0, #10
 80054d2:	f003 fb05 	bl	8008ae0 <fputc>
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

#if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68d8      	ldr	r0, [r3, #12]
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	490f      	ldr	r1, [pc, #60]	; (8005520 <__M_SEND_ASSERT_MSG+0x18c>)
 80054e2:	f003 fab3 	bl	8008a4c <fiprintf>
#endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68d8      	ldr	r0, [r3, #12]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	490c      	ldr	r1, [pc, #48]	; (8005524 <__M_SEND_ASSERT_MSG+0x190>)
 80054f2:	f003 faab 	bl	8008a4c <fiprintf>
#endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */

        fflush(stderr);
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <__M_SEND_ASSERT_MSG+0x17c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f003 f9bd 	bl	800887c <fflush>
 8005502:	e002      	b.n	800550a <__M_SEND_ASSERT_MSG+0x176>
            return;
 8005504:	bf00      	nop
 8005506:	e000      	b.n	800550a <__M_SEND_ASSERT_MSG+0x176>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8005508:	bf00      	nop
    (void)expr;
    (void)file;
    (void)line;
    (void)msg;
    (void)args;
}
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	2000000c 	.word	0x2000000c
 8005514:	0800f3b4 	.word	0x0800f3b4
 8005518:	0800f3bc 	.word	0x0800f3bc
 800551c:	0800f3d0 	.word	0x0800f3d0
 8005520:	0800f3e0 	.word	0x0800f3e0
 8005524:	0800f3fc 	.word	0x0800f3fc

08005528 <__M_Error>:

void __M_Error(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af04      	add	r7, sp, #16
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	460b      	mov	r3, r1
 8005536:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8005538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800553c:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("PROGRAMM EXIT WITH ERROR!!!", expr_str, expr, file, line, msg, args);
 800553e:	7afa      	ldrb	r2, [r7, #11]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	4803      	ldr	r0, [pc, #12]	; (8005560 <__M_Error+0x38>)
 8005552:	f7ff ff1f 	bl	8005394 <__M_SEND_ASSERT_MSG>
    va_end(args);
    //abort(); // exit programm
}
 8005556:	bf00      	nop
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	0800f414 	.word	0x0800f414

08005564 <__M_Warning>:

void __M_Warning(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af04      	add	r7, sp, #16
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	460b      	mov	r3, r1
 8005572:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8005574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005578:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("WARNING!!!", expr_str, expr, file, line, msg, args);
 800557a:	7afa      	ldrb	r2, [r7, #11]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	9302      	str	r3, [sp, #8]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	4803      	ldr	r0, [pc, #12]	; (800559c <__M_Warning+0x38>)
 800558e:	f7ff ff01 	bl	8005394 <__M_SEND_ASSERT_MSG>
    va_end(args);
}
 8005592:	bf00      	nop
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	0800f430 	.word	0x0800f430

080055a0 <ping_worker>:
#include <string.h>



void ping_worker(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	static u8 counte = 0;


	memcpy(outputData, inputData, (*size));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	68f9      	ldr	r1, [r7, #12]
 80055b6:	68b8      	ldr	r0, [r7, #8]
 80055b8:	f003 fb60 	bl	8008c7c <memcpy>
	outputData[(*size)] = counte;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	4413      	add	r3, r2
 80055c4:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <ping_worker+0x48>)
 80055c6:	7812      	ldrb	r2, [r2, #0]
 80055c8:	701a      	strb	r2, [r3, #0]
	++(*size);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
	++counte;
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <ping_worker+0x48>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	4b02      	ldr	r3, [pc, #8]	; (80055e8 <ping_worker+0x48>)
 80055de:	701a      	strb	r2, [r3, #0]
	UNUSED(maxOutBufferSize);
	UNUSED(ctx);
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	2000029c 	.word	0x2000029c

080055ec <init_stm32_communicator>:

Communicator_t comm;
extern UART_HandleTypeDef huart1;

int init_stm32_communicator(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
	int state = rawParser_dma_init(&comm.rawparser, 0x1A);
 80055f2:	211a      	movs	r1, #26
 80055f4:	4810      	ldr	r0, [pc, #64]	; (8005638 <init_stm32_communicator+0x4c>)
 80055f6:	f7ff fa81 	bl	8004afc <rawParser_dma_init>
 80055fa:	6078      	str	r0, [r7, #4]
	if(state != D_RAW_P_OK) {
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d001      	beq.n	8005606 <init_stm32_communicator+0x1a>
		return D_RAW_P_ERROR;
 8005602:	2300      	movs	r3, #0
 8005604:	e014      	b.n	8005630 <init_stm32_communicator+0x44>
	}

	// init callback manager
	CallbackManager_init(&comm.manager);
 8005606:	480d      	ldr	r0, [pc, #52]	; (800563c <init_stm32_communicator+0x50>)
 8005608:	f7fc fac8 	bl	8001b9c <CallbackManager_init>
	CallbackManager_addWorker(&comm.manager, 0x00, ping_worker, NULL);
 800560c:	2300      	movs	r3, #0
 800560e:	4a0c      	ldr	r2, [pc, #48]	; (8005640 <init_stm32_communicator+0x54>)
 8005610:	2100      	movs	r1, #0
 8005612:	480a      	ldr	r0, [pc, #40]	; (800563c <init_stm32_communicator+0x50>)
 8005614:	f7fc fafa 	bl	8001c0c <CallbackManager_addWorker>
	CallbackManager_addWorker(&comm.manager, 0xF0, entityCMD, NULL);
 8005618:	2300      	movs	r3, #0
 800561a:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <init_stm32_communicator+0x58>)
 800561c:	21f0      	movs	r1, #240	; 0xf0
 800561e:	4807      	ldr	r0, [pc, #28]	; (800563c <init_stm32_communicator+0x50>)
 8005620:	f7fc faf4 	bl	8001c0c <CallbackManager_addWorker>

	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8005624:	2201      	movs	r2, #1
 8005626:	4908      	ldr	r1, [pc, #32]	; (8005648 <init_stm32_communicator+0x5c>)
 8005628:	4808      	ldr	r0, [pc, #32]	; (800564c <init_stm32_communicator+0x60>)
 800562a:	f002 f8a0 	bl	800776e <HAL_UART_Receive_IT>
	return state;
 800562e:	687b      	ldr	r3, [r7, #4]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	200002a0 	.word	0x200002a0
 800563c:	200008d0 	.word	0x200008d0
 8005640:	080055a1 	.word	0x080055a1
 8005644:	08001d3d 	.word	0x08001d3d
 8005648:	20000cd4 	.word	0x20000cd4
 800564c:	20000248 	.word	0x20000248

08005650 <proceedIncommingMessage>:


void proceedIncommingMessage(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8005656:	2201      	movs	r2, #1
 8005658:	493a      	ldr	r1, [pc, #232]	; (8005744 <proceedIncommingMessage+0xf4>)
 800565a:	483b      	ldr	r0, [pc, #236]	; (8005748 <proceedIncommingMessage+0xf8>)
 800565c:	f002 f887 	bl	800776e <HAL_UART_Receive_IT>

	// move to cash--------------------------------------------------------------
	const RawParser_Frame_t* const Rxframe = RawParser_dma_proceed(&comm.rawparser);
 8005660:	483a      	ldr	r0, [pc, #232]	; (800574c <proceedIncommingMessage+0xfc>)
 8005662:	f7ff fbad 	bl	8004dc0 <RawParser_dma_proceed>
 8005666:	6178      	str	r0, [r7, #20]
	u8* const input_data 	= Rxframe->data;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]
	reg input_size 			= Rxframe->size;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	603b      	str	r3, [r7, #0]

//	if(input_size == 0) {
//		return;
//	}

	const boards_t* const board_entry_internal = board_entry;
 8005674:	4b36      	ldr	r3, [pc, #216]	; (8005750 <proceedIncommingMessage+0x100>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60fb      	str	r3, [r7, #12]

	const u8 bid 		= input_data[0];
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	72fb      	strb	r3, [r7, #11]
	const u8 cmd_id 	= input_data[1];
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	72bb      	strb	r3, [r7, #10]

	// do logic ------------------------------------------------------------------

	M_Assert_Break(((Rxframe == NULL) || (input_data == NULL) || (board_entry_internal == NULL)), M_EMPTY, return, "proceedIncommingMessage: No valid descriptors");
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <proceedIncommingMessage+0x48>
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <proceedIncommingMessage+0x48>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d114      	bne.n	80056c2 <proceedIncommingMessage+0x72>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <proceedIncommingMessage+0x5a>
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <proceedIncommingMessage+0x5a>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <proceedIncommingMessage+0x5e>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <proceedIncommingMessage+0x60>
 80056ae:	2300      	movs	r3, #0
 80056b0:	b2d9      	uxtb	r1, r3
 80056b2:	4b28      	ldr	r3, [pc, #160]	; (8005754 <proceedIncommingMessage+0x104>)
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	2335      	movs	r3, #53	; 0x35
 80056b8:	4a27      	ldr	r2, [pc, #156]	; (8005758 <proceedIncommingMessage+0x108>)
 80056ba:	4828      	ldr	r0, [pc, #160]	; (800575c <proceedIncommingMessage+0x10c>)
 80056bc:	f7ff ff34 	bl	8005528 <__M_Error>
 80056c0:	e03c      	b.n	800573c <proceedIncommingMessage+0xec>

//	// check input size and board id
	if((input_size < 2U) || (bid != board_entry_internal->boardId)) {
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d936      	bls.n	8005736 <proceedIncommingMessage+0xe6>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	7afa      	ldrb	r2, [r7, #11]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d131      	bne.n	8005736 <proceedIncommingMessage+0xe6>
		return;
	}

	// call worker
	input_size -= 2;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	3b02      	subs	r3, #2
 80056d6:	603b      	str	r3, [r7, #0]
	if(!CallbackManager_proceed(&comm.manager, cmd_id, &input_data[2], &comm.outputData[2], &input_size, (D_RAW_P_TX_BUF_SIZE - 2U))) {
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1c9a      	adds	r2, r3, #2
 80056dc:	7ab9      	ldrb	r1, [r7, #10]
 80056de:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	463b      	mov	r3, r7
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <proceedIncommingMessage+0x110>)
 80056ea:	481e      	ldr	r0, [pc, #120]	; (8005764 <proceedIncommingMessage+0x114>)
 80056ec:	f7fc fac0 	bl	8001c70 <CallbackManager_proceed>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <proceedIncommingMessage+0xaa>
		input_size = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	603b      	str	r3, [r7, #0]
	}

//	// check if worker want to send packet
	if(input_size == 0) {
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01c      	beq.n	800573a <proceedIncommingMessage+0xea>
		return;
	}

	comm.outputData[0] = bid;
 8005700:	4a12      	ldr	r2, [pc, #72]	; (800574c <proceedIncommingMessage+0xfc>)
 8005702:	7afb      	ldrb	r3, [r7, #11]
 8005704:	f882 3a35 	strb.w	r3, [r2, #2613]	; 0xa35
	comm.outputData[1] = cmd_id;
 8005708:	4a10      	ldr	r2, [pc, #64]	; (800574c <proceedIncommingMessage+0xfc>)
 800570a:	7abb      	ldrb	r3, [r7, #10]
 800570c:	f882 3a36 	strb.w	r3, [r2, #2614]	; 0xa36

	const RawParser_Frame_t* const Txframe = RawParser_dma_shieldFrame(&comm.rawparser, comm.outputData, (input_size + 2));
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	3302      	adds	r3, #2
 8005714:	461a      	mov	r2, r3
 8005716:	4914      	ldr	r1, [pc, #80]	; (8005768 <proceedIncommingMessage+0x118>)
 8005718:	480c      	ldr	r0, [pc, #48]	; (800574c <proceedIncommingMessage+0xfc>)
 800571a:	f7ff fbcd 	bl	8004eb8 <RawParser_dma_shieldFrame>
 800571e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, Txframe->data, Txframe->size, 1000);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	b29a      	uxth	r2, r3
 800572a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800572e:	4806      	ldr	r0, [pc, #24]	; (8005748 <proceedIncommingMessage+0xf8>)
 8005730:	f001 ff8b 	bl	800764a <HAL_UART_Transmit>
 8005734:	e002      	b.n	800573c <proceedIncommingMessage+0xec>
		return;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <proceedIncommingMessage+0xec>
		return;
 800573a:	bf00      	nop
}
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000cd4 	.word	0x20000cd4
 8005748:	20000248 	.word	0x20000248
 800574c:	200002a0 	.word	0x200002a0
 8005750:	2000028c 	.word	0x2000028c
 8005754:	0800f640 	.word	0x0800f640
 8005758:	0800f5c8 	.word	0x0800f5c8
 800575c:	0800f5f0 	.word	0x0800f5f0
 8005760:	20000cd7 	.word	0x20000cd7
 8005764:	200008d0 	.word	0x200008d0
 8005768:	20000cd5 	.word	0x20000cd5

0800576c <__io_putchar>:
#include "main.h"
#include "stm32_printf.h"

extern UART_HandleTypeDef huart1;
PUTCHAR_PROTOTYPE
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8005774:	1d39      	adds	r1, r7, #4
 8005776:	f04f 33ff 	mov.w	r3, #4294967295
 800577a:	2201      	movs	r2, #1
 800577c:	4803      	ldr	r0, [pc, #12]	; (800578c <__io_putchar+0x20>)
 800577e:	f001 ff64 	bl	800764a <HAL_UART_Transmit>
	return ch;
 8005782:	687b      	ldr	r3, [r7, #4]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000248 	.word	0x20000248

08005790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005794:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <HAL_Init+0x40>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a0d      	ldr	r2, [pc, #52]	; (80057d0 <HAL_Init+0x40>)
 800579a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800579e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_Init+0x40>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <HAL_Init+0x40>)
 80057a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057ac:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <HAL_Init+0x40>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a07      	ldr	r2, [pc, #28]	; (80057d0 <HAL_Init+0x40>)
 80057b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057b8:	2003      	movs	r0, #3
 80057ba:	f000 f92b 	bl	8005a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057be:	200f      	movs	r0, #15
 80057c0:	f000 f808 	bl	80057d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057c4:	f7fb fcfa 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40023c00 	.word	0x40023c00

080057d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057dc:	4b12      	ldr	r3, [pc, #72]	; (8005828 <HAL_InitTick+0x54>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b12      	ldr	r3, [pc, #72]	; (800582c <HAL_InitTick+0x58>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	4619      	mov	r1, r3
 80057e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f943 	bl	8005a7e <HAL_SYSTICK_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e00e      	b.n	8005820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b0f      	cmp	r3, #15
 8005806:	d80a      	bhi.n	800581e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005808:	2200      	movs	r2, #0
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	f000 f90b 	bl	8005a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005814:	4a06      	ldr	r2, [pc, #24]	; (8005830 <HAL_InitTick+0x5c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	e000      	b.n	8005820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000000 	.word	0x20000000
 800582c:	20000008 	.word	0x20000008
 8005830:	20000004 	.word	0x20000004

08005834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_IncTick+0x20>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <HAL_IncTick+0x24>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4413      	add	r3, r2
 8005844:	4a04      	ldr	r2, [pc, #16]	; (8005858 <HAL_IncTick+0x24>)
 8005846:	6013      	str	r3, [r2, #0]
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000008 	.word	0x20000008
 8005858:	20000ed8 	.word	0x20000ed8

0800585c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return uwTick;
 8005860:	4b03      	ldr	r3, [pc, #12]	; (8005870 <HAL_GetTick+0x14>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	4618      	mov	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20000ed8 	.word	0x20000ed8

08005874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005890:	4013      	ands	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800589c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058a6:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <__NVIC_SetPriorityGrouping+0x44>)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	60d3      	str	r3, [r2, #12]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	e000ed00 	.word	0xe000ed00

080058bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <__NVIC_GetPriorityGrouping+0x18>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	f003 0307 	and.w	r3, r3, #7
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	db0b      	blt.n	8005902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	f003 021f 	and.w	r2, r3, #31
 80058f0:	4907      	ldr	r1, [pc, #28]	; (8005910 <__NVIC_EnableIRQ+0x38>)
 80058f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2001      	movs	r0, #1
 80058fa:	fa00 f202 	lsl.w	r2, r0, r2
 80058fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	e000e100 	.word	0xe000e100

08005914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	6039      	str	r1, [r7, #0]
 800591e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005924:	2b00      	cmp	r3, #0
 8005926:	db0a      	blt.n	800593e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	490c      	ldr	r1, [pc, #48]	; (8005960 <__NVIC_SetPriority+0x4c>)
 800592e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005932:	0112      	lsls	r2, r2, #4
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	440b      	add	r3, r1
 8005938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800593c:	e00a      	b.n	8005954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4908      	ldr	r1, [pc, #32]	; (8005964 <__NVIC_SetPriority+0x50>)
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	3b04      	subs	r3, #4
 800594c:	0112      	lsls	r2, r2, #4
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	440b      	add	r3, r1
 8005952:	761a      	strb	r2, [r3, #24]
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000e100 	.word	0xe000e100
 8005964:	e000ed00 	.word	0xe000ed00

08005968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	; 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f1c3 0307 	rsb	r3, r3, #7
 8005982:	2b04      	cmp	r3, #4
 8005984:	bf28      	it	cs
 8005986:	2304      	movcs	r3, #4
 8005988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3304      	adds	r3, #4
 800598e:	2b06      	cmp	r3, #6
 8005990:	d902      	bls.n	8005998 <NVIC_EncodePriority+0x30>
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3b03      	subs	r3, #3
 8005996:	e000      	b.n	800599a <NVIC_EncodePriority+0x32>
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43da      	mvns	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	401a      	ands	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059b0:	f04f 31ff 	mov.w	r1, #4294967295
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	43d9      	mvns	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c0:	4313      	orrs	r3, r2
         );
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3724      	adds	r7, #36	; 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3b01      	subs	r3, #1
 80059dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059e0:	d301      	bcc.n	80059e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059e2:	2301      	movs	r3, #1
 80059e4:	e00f      	b.n	8005a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059e6:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <SysTick_Config+0x40>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059ee:	210f      	movs	r1, #15
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	f7ff ff8e 	bl	8005914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <SysTick_Config+0x40>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059fe:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <SysTick_Config+0x40>)
 8005a00:	2207      	movs	r2, #7
 8005a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000e010 	.word	0xe000e010

08005a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff29 	bl	8005874 <__NVIC_SetPriorityGrouping>
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b086      	sub	sp, #24
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	4603      	mov	r3, r0
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a3c:	f7ff ff3e 	bl	80058bc <__NVIC_GetPriorityGrouping>
 8005a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	6978      	ldr	r0, [r7, #20]
 8005a48:	f7ff ff8e 	bl	8005968 <NVIC_EncodePriority>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff5d 	bl	8005914 <__NVIC_SetPriority>
}
 8005a5a:	bf00      	nop
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	4603      	mov	r3, r0
 8005a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ff31 	bl	80058d8 <__NVIC_EnableIRQ>
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff ffa2 	bl	80059d0 <SysTick_Config>
 8005a8c:	4603      	mov	r3, r0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005aa4:	f7ff feda 	bl	800585c <HAL_GetTick>
 8005aa8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d008      	beq.n	8005ac8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2280      	movs	r2, #128	; 0x80
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e052      	b.n	8005b6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0216 	bic.w	r2, r2, #22
 8005ad6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ae6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <HAL_DMA_Abort+0x62>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0208 	bic.w	r2, r2, #8
 8005b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b18:	e013      	b.n	8005b42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b1a:	f7ff fe9f 	bl	800585c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b05      	cmp	r3, #5
 8005b26:	d90c      	bls.n	8005b42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2203      	movs	r2, #3
 8005b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e015      	b.n	8005b6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e4      	bne.n	8005b1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b54:	223f      	movs	r2, #63	; 0x3f
 8005b56:	409a      	lsls	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d004      	beq.n	8005b94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e00c      	b.n	8005bae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2205      	movs	r2, #5
 8005b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b089      	sub	sp, #36	; 0x24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	e16b      	b.n	8005eb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bd8:	2201      	movs	r2, #1
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4013      	ands	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	f040 815a 	bne.w	8005eaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d005      	beq.n	8005c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d130      	bne.n	8005c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	2203      	movs	r2, #3
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c44:	2201      	movs	r2, #1
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4013      	ands	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	091b      	lsrs	r3, r3, #4
 8005c5a:	f003 0201 	and.w	r2, r3, #1
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d017      	beq.n	8005cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	2203      	movs	r2, #3
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4013      	ands	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d123      	bne.n	8005d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	08da      	lsrs	r2, r3, #3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3208      	adds	r2, #8
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	220f      	movs	r2, #15
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	08da      	lsrs	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3208      	adds	r2, #8
 8005cfa:	69b9      	ldr	r1, [r7, #24]
 8005cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4013      	ands	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 0203 	and.w	r2, r3, #3
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80b4 	beq.w	8005eaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b60      	ldr	r3, [pc, #384]	; (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	4a5f      	ldr	r2, [pc, #380]	; (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d50:	6453      	str	r3, [r2, #68]	; 0x44
 8005d52:	4b5d      	ldr	r3, [pc, #372]	; (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d5e:	4a5b      	ldr	r2, [pc, #364]	; (8005ecc <HAL_GPIO_Init+0x310>)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3302      	adds	r3, #2
 8005d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	220f      	movs	r2, #15
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a52      	ldr	r2, [pc, #328]	; (8005ed0 <HAL_GPIO_Init+0x314>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02b      	beq.n	8005de2 <HAL_GPIO_Init+0x226>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a51      	ldr	r2, [pc, #324]	; (8005ed4 <HAL_GPIO_Init+0x318>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d025      	beq.n	8005dde <HAL_GPIO_Init+0x222>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a50      	ldr	r2, [pc, #320]	; (8005ed8 <HAL_GPIO_Init+0x31c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01f      	beq.n	8005dda <HAL_GPIO_Init+0x21e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a4f      	ldr	r2, [pc, #316]	; (8005edc <HAL_GPIO_Init+0x320>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d019      	beq.n	8005dd6 <HAL_GPIO_Init+0x21a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a4e      	ldr	r2, [pc, #312]	; (8005ee0 <HAL_GPIO_Init+0x324>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_GPIO_Init+0x216>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a4d      	ldr	r2, [pc, #308]	; (8005ee4 <HAL_GPIO_Init+0x328>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00d      	beq.n	8005dce <HAL_GPIO_Init+0x212>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a4c      	ldr	r2, [pc, #304]	; (8005ee8 <HAL_GPIO_Init+0x32c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <HAL_GPIO_Init+0x20e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a4b      	ldr	r2, [pc, #300]	; (8005eec <HAL_GPIO_Init+0x330>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d101      	bne.n	8005dc6 <HAL_GPIO_Init+0x20a>
 8005dc2:	2307      	movs	r3, #7
 8005dc4:	e00e      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	e00c      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dca:	2306      	movs	r3, #6
 8005dcc:	e00a      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dce:	2305      	movs	r3, #5
 8005dd0:	e008      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	e006      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e004      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e002      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005de2:	2300      	movs	r3, #0
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	f002 0203 	and.w	r2, r2, #3
 8005dea:	0092      	lsls	r2, r2, #2
 8005dec:	4093      	lsls	r3, r2
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005df4:	4935      	ldr	r1, [pc, #212]	; (8005ecc <HAL_GPIO_Init+0x310>)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e02:	4b3b      	ldr	r3, [pc, #236]	; (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e26:	4a32      	ldr	r2, [pc, #200]	; (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e2c:	4b30      	ldr	r3, [pc, #192]	; (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e50:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e56:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e7a:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e80:	4b1b      	ldr	r3, [pc, #108]	; (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ea4:	4a12      	ldr	r2, [pc, #72]	; (8005ef0 <HAL_GPIO_Init+0x334>)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	f67f ae90 	bls.w	8005bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	3724      	adds	r7, #36	; 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	40020000 	.word	0x40020000
 8005ed4:	40020400 	.word	0x40020400
 8005ed8:	40020800 	.word	0x40020800
 8005edc:	40020c00 	.word	0x40020c00
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40021400 	.word	0x40021400
 8005ee8:	40021800 	.word	0x40021800
 8005eec:	40021c00 	.word	0x40021c00
 8005ef0:	40013c00 	.word	0x40013c00

08005ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
 8005f00:	4613      	mov	r3, r2
 8005f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f04:	787b      	ldrb	r3, [r7, #1]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f0a:	887a      	ldrh	r2, [r7, #2]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f10:	e003      	b.n	8005f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f12:	887b      	ldrh	r3, [r7, #2]
 8005f14:	041a      	lsls	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	619a      	str	r2, [r3, #24]
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e267      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d075      	beq.n	8006032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f46:	4b88      	ldr	r3, [pc, #544]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d00c      	beq.n	8005f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f52:	4b85      	ldr	r3, [pc, #532]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d112      	bne.n	8005f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f5e:	4b82      	ldr	r3, [pc, #520]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f6a:	d10b      	bne.n	8005f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6c:	4b7e      	ldr	r3, [pc, #504]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d05b      	beq.n	8006030 <HAL_RCC_OscConfig+0x108>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d157      	bne.n	8006030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e242      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8c:	d106      	bne.n	8005f9c <HAL_RCC_OscConfig+0x74>
 8005f8e:	4b76      	ldr	r3, [pc, #472]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a75      	ldr	r2, [pc, #468]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e01d      	b.n	8005fd8 <HAL_RCC_OscConfig+0xb0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x98>
 8005fa6:	4b70      	ldr	r3, [pc, #448]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a6f      	ldr	r2, [pc, #444]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	4b6d      	ldr	r3, [pc, #436]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a6c      	ldr	r2, [pc, #432]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	e00b      	b.n	8005fd8 <HAL_RCC_OscConfig+0xb0>
 8005fc0:	4b69      	ldr	r3, [pc, #420]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a68      	ldr	r2, [pc, #416]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4b66      	ldr	r3, [pc, #408]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a65      	ldr	r2, [pc, #404]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d013      	beq.n	8006008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe0:	f7ff fc3c 	bl	800585c <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fe8:	f7ff fc38 	bl	800585c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b64      	cmp	r3, #100	; 0x64
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e207      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffa:	4b5b      	ldr	r3, [pc, #364]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0xc0>
 8006006:	e014      	b.n	8006032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006008:	f7ff fc28 	bl	800585c <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006010:	f7ff fc24 	bl	800585c <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b64      	cmp	r3, #100	; 0x64
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e1f3      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006022:	4b51      	ldr	r3, [pc, #324]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f0      	bne.n	8006010 <HAL_RCC_OscConfig+0xe8>
 800602e:	e000      	b.n	8006032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d063      	beq.n	8006106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800603e:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800604a:	4b47      	ldr	r3, [pc, #284]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006052:	2b08      	cmp	r3, #8
 8006054:	d11c      	bne.n	8006090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006056:	4b44      	ldr	r3, [pc, #272]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d116      	bne.n	8006090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006062:	4b41      	ldr	r3, [pc, #260]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_RCC_OscConfig+0x152>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d001      	beq.n	800607a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e1c7      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607a:	4b3b      	ldr	r3, [pc, #236]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4937      	ldr	r1, [pc, #220]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800608e:	e03a      	b.n	8006106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d020      	beq.n	80060da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006098:	4b34      	ldr	r3, [pc, #208]	; (800616c <HAL_RCC_OscConfig+0x244>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609e:	f7ff fbdd 	bl	800585c <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060a6:	f7ff fbd9 	bl	800585c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e1a8      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b8:	4b2b      	ldr	r3, [pc, #172]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f0      	beq.n	80060a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c4:	4b28      	ldr	r3, [pc, #160]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4925      	ldr	r1, [pc, #148]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	600b      	str	r3, [r1, #0]
 80060d8:	e015      	b.n	8006106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <HAL_RCC_OscConfig+0x244>)
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7ff fbbc 	bl	800585c <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060e8:	f7ff fbb8 	bl	800585c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e187      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060fa:	4b1b      	ldr	r3, [pc, #108]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d036      	beq.n	8006180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800611a:	4b15      	ldr	r3, [pc, #84]	; (8006170 <HAL_RCC_OscConfig+0x248>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7ff fb9c 	bl	800585c <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006128:	f7ff fb98 	bl	800585c <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e167      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613a:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <HAL_RCC_OscConfig+0x240>)
 800613c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x200>
 8006146:	e01b      	b.n	8006180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006148:	4b09      	ldr	r3, [pc, #36]	; (8006170 <HAL_RCC_OscConfig+0x248>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800614e:	f7ff fb85 	bl	800585c <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006154:	e00e      	b.n	8006174 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006156:	f7ff fb81 	bl	800585c <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d907      	bls.n	8006174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e150      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
 8006168:	40023800 	.word	0x40023800
 800616c:	42470000 	.word	0x42470000
 8006170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006174:	4b88      	ldr	r3, [pc, #544]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1ea      	bne.n	8006156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8097 	beq.w	80062bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006192:	4b81      	ldr	r3, [pc, #516]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10f      	bne.n	80061be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	4b7d      	ldr	r3, [pc, #500]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	4a7c      	ldr	r2, [pc, #496]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ac:	6413      	str	r3, [r2, #64]	; 0x40
 80061ae:	4b7a      	ldr	r3, [pc, #488]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ba:	2301      	movs	r3, #1
 80061bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061be:	4b77      	ldr	r3, [pc, #476]	; (800639c <HAL_RCC_OscConfig+0x474>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d118      	bne.n	80061fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ca:	4b74      	ldr	r3, [pc, #464]	; (800639c <HAL_RCC_OscConfig+0x474>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a73      	ldr	r2, [pc, #460]	; (800639c <HAL_RCC_OscConfig+0x474>)
 80061d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061d6:	f7ff fb41 	bl	800585c <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061de:	f7ff fb3d 	bl	800585c <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e10c      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f0:	4b6a      	ldr	r3, [pc, #424]	; (800639c <HAL_RCC_OscConfig+0x474>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0f0      	beq.n	80061de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d106      	bne.n	8006212 <HAL_RCC_OscConfig+0x2ea>
 8006204:	4b64      	ldr	r3, [pc, #400]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	4a63      	ldr	r2, [pc, #396]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	6713      	str	r3, [r2, #112]	; 0x70
 8006210:	e01c      	b.n	800624c <HAL_RCC_OscConfig+0x324>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b05      	cmp	r3, #5
 8006218:	d10c      	bne.n	8006234 <HAL_RCC_OscConfig+0x30c>
 800621a:	4b5f      	ldr	r3, [pc, #380]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	4a5e      	ldr	r2, [pc, #376]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006220:	f043 0304 	orr.w	r3, r3, #4
 8006224:	6713      	str	r3, [r2, #112]	; 0x70
 8006226:	4b5c      	ldr	r3, [pc, #368]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	4a5b      	ldr	r2, [pc, #364]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	6713      	str	r3, [r2, #112]	; 0x70
 8006232:	e00b      	b.n	800624c <HAL_RCC_OscConfig+0x324>
 8006234:	4b58      	ldr	r3, [pc, #352]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	4a57      	ldr	r2, [pc, #348]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	6713      	str	r3, [r2, #112]	; 0x70
 8006240:	4b55      	ldr	r3, [pc, #340]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006244:	4a54      	ldr	r2, [pc, #336]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006246:	f023 0304 	bic.w	r3, r3, #4
 800624a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d015      	beq.n	8006280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006254:	f7ff fb02 	bl	800585c <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800625a:	e00a      	b.n	8006272 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800625c:	f7ff fafe 	bl	800585c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f241 3288 	movw	r2, #5000	; 0x1388
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e0cb      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006272:	4b49      	ldr	r3, [pc, #292]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ee      	beq.n	800625c <HAL_RCC_OscConfig+0x334>
 800627e:	e014      	b.n	80062aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006280:	f7ff faec 	bl	800585c <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006286:	e00a      	b.n	800629e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006288:	f7ff fae8 	bl	800585c <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f241 3288 	movw	r2, #5000	; 0x1388
 8006296:	4293      	cmp	r3, r2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e0b5      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800629e:	4b3e      	ldr	r3, [pc, #248]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1ee      	bne.n	8006288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d105      	bne.n	80062bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b0:	4b39      	ldr	r3, [pc, #228]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	4a38      	ldr	r2, [pc, #224]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 80062b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80a1 	beq.w	8006408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062c6:	4b34      	ldr	r3, [pc, #208]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 030c 	and.w	r3, r3, #12
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d05c      	beq.n	800638c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d141      	bne.n	800635e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062da:	4b31      	ldr	r3, [pc, #196]	; (80063a0 <HAL_RCC_OscConfig+0x478>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7ff fabc 	bl	800585c <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e8:	f7ff fab8 	bl	800585c <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e087      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fa:	4b27      	ldr	r3, [pc, #156]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69da      	ldr	r2, [r3, #28]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	019b      	lsls	r3, r3, #6
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	3b01      	subs	r3, #1
 8006320:	041b      	lsls	r3, r3, #16
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	061b      	lsls	r3, r3, #24
 800632a:	491b      	ldr	r1, [pc, #108]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 800632c:	4313      	orrs	r3, r2
 800632e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006330:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <HAL_RCC_OscConfig+0x478>)
 8006332:	2201      	movs	r2, #1
 8006334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006336:	f7ff fa91 	bl	800585c <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800633e:	f7ff fa8d 	bl	800585c <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e05c      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006350:	4b11      	ldr	r3, [pc, #68]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f0      	beq.n	800633e <HAL_RCC_OscConfig+0x416>
 800635c:	e054      	b.n	8006408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <HAL_RCC_OscConfig+0x478>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006364:	f7ff fa7a 	bl	800585c <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800636c:	f7ff fa76 	bl	800585c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e045      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637e:	4b06      	ldr	r3, [pc, #24]	; (8006398 <HAL_RCC_OscConfig+0x470>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x444>
 800638a:	e03d      	b.n	8006408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d107      	bne.n	80063a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e038      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
 8006398:	40023800 	.word	0x40023800
 800639c:	40007000 	.word	0x40007000
 80063a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063a4:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <HAL_RCC_OscConfig+0x4ec>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d028      	beq.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063bc:	429a      	cmp	r2, r3
 80063be:	d121      	bne.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d11a      	bne.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063d4:	4013      	ands	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063dc:	4293      	cmp	r3, r2
 80063de:	d111      	bne.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	3b01      	subs	r3, #1
 80063ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d107      	bne.n	8006404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800

08006418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e0cc      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800642c:	4b68      	ldr	r3, [pc, #416]	; (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d90c      	bls.n	8006454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b65      	ldr	r3, [pc, #404]	; (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006442:	4b63      	ldr	r3, [pc, #396]	; (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d001      	beq.n	8006454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0b8      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d020      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800646c:	4b59      	ldr	r3, [pc, #356]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	4a58      	ldr	r2, [pc, #352]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006484:	4b53      	ldr	r3, [pc, #332]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4a52      	ldr	r2, [pc, #328]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800648e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006490:	4b50      	ldr	r3, [pc, #320]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	494d      	ldr	r1, [pc, #308]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d044      	beq.n	8006538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d107      	bne.n	80064c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064b6:	4b47      	ldr	r3, [pc, #284]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d119      	bne.n	80064f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e07f      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d003      	beq.n	80064d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d107      	bne.n	80064e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064d6:	4b3f      	ldr	r3, [pc, #252]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e06f      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e6:	4b3b      	ldr	r3, [pc, #236]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e067      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064f6:	4b37      	ldr	r3, [pc, #220]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f023 0203 	bic.w	r2, r3, #3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4934      	ldr	r1, [pc, #208]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	4313      	orrs	r3, r2
 8006506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006508:	f7ff f9a8 	bl	800585c <HAL_GetTick>
 800650c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650e:	e00a      	b.n	8006526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006510:	f7ff f9a4 	bl	800585c <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e04f      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006526:	4b2b      	ldr	r3, [pc, #172]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 020c 	and.w	r2, r3, #12
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	429a      	cmp	r2, r3
 8006536:	d1eb      	bne.n	8006510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006538:	4b25      	ldr	r3, [pc, #148]	; (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d20c      	bcs.n	8006560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006546:	4b22      	ldr	r3, [pc, #136]	; (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800654e:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d001      	beq.n	8006560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e032      	b.n	80065c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800656c:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4916      	ldr	r1, [pc, #88]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	4313      	orrs	r3, r2
 800657c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	490e      	ldr	r1, [pc, #56]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	4313      	orrs	r3, r2
 800659c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800659e:	f000 f82d 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 80065a2:	4602      	mov	r2, r0
 80065a4:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	091b      	lsrs	r3, r3, #4
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	490a      	ldr	r1, [pc, #40]	; (80065d8 <HAL_RCC_ClockConfig+0x1c0>)
 80065b0:	5ccb      	ldrb	r3, [r1, r3]
 80065b2:	fa22 f303 	lsr.w	r3, r2, r3
 80065b6:	4a09      	ldr	r2, [pc, #36]	; (80065dc <HAL_RCC_ClockConfig+0x1c4>)
 80065b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <HAL_RCC_ClockConfig+0x1c8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff f908 	bl	80057d4 <HAL_InitTick>

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40023c00 	.word	0x40023c00
 80065d4:	40023800 	.word	0x40023800
 80065d8:	0800f670 	.word	0x0800f670
 80065dc:	20000000 	.word	0x20000000
 80065e0:	20000004 	.word	0x20000004

080065e4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <HAL_RCC_EnableCSS+0x14>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	4247004c 	.word	0x4247004c

080065fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b094      	sub	sp, #80	; 0x50
 8006602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	647b      	str	r3, [r7, #68]	; 0x44
 8006608:	2300      	movs	r3, #0
 800660a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800660c:	2300      	movs	r3, #0
 800660e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006614:	4b79      	ldr	r3, [pc, #484]	; (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 030c 	and.w	r3, r3, #12
 800661c:	2b08      	cmp	r3, #8
 800661e:	d00d      	beq.n	800663c <HAL_RCC_GetSysClockFreq+0x40>
 8006620:	2b08      	cmp	r3, #8
 8006622:	f200 80e1 	bhi.w	80067e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x34>
 800662a:	2b04      	cmp	r3, #4
 800662c:	d003      	beq.n	8006636 <HAL_RCC_GetSysClockFreq+0x3a>
 800662e:	e0db      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006630:	4b73      	ldr	r3, [pc, #460]	; (8006800 <HAL_RCC_GetSysClockFreq+0x204>)
 8006632:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006634:	e0db      	b.n	80067ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006636:	4b72      	ldr	r3, [pc, #456]	; (8006800 <HAL_RCC_GetSysClockFreq+0x204>)
 8006638:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800663a:	e0d8      	b.n	80067ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800663c:	4b6f      	ldr	r3, [pc, #444]	; (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006644:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006646:	4b6d      	ldr	r3, [pc, #436]	; (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d063      	beq.n	800671a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006652:	4b6a      	ldr	r3, [pc, #424]	; (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	2200      	movs	r2, #0
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38
 800665c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006664:	633b      	str	r3, [r7, #48]	; 0x30
 8006666:	2300      	movs	r3, #0
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
 800666a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f04f 0100 	mov.w	r1, #0
 800667a:	0159      	lsls	r1, r3, #5
 800667c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006680:	0150      	lsls	r0, r2, #5
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4621      	mov	r1, r4
 8006688:	1a51      	subs	r1, r2, r1
 800668a:	6139      	str	r1, [r7, #16]
 800668c:	4629      	mov	r1, r5
 800668e:	eb63 0301 	sbc.w	r3, r3, r1
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066a0:	4659      	mov	r1, fp
 80066a2:	018b      	lsls	r3, r1, #6
 80066a4:	4651      	mov	r1, sl
 80066a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066aa:	4651      	mov	r1, sl
 80066ac:	018a      	lsls	r2, r1, #6
 80066ae:	4651      	mov	r1, sl
 80066b0:	ebb2 0801 	subs.w	r8, r2, r1
 80066b4:	4659      	mov	r1, fp
 80066b6:	eb63 0901 	sbc.w	r9, r3, r1
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ce:	4690      	mov	r8, r2
 80066d0:	4699      	mov	r9, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	eb18 0303 	adds.w	r3, r8, r3
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	462b      	mov	r3, r5
 80066dc:	eb49 0303 	adc.w	r3, r9, r3
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066ee:	4629      	mov	r1, r5
 80066f0:	028b      	lsls	r3, r1, #10
 80066f2:	4621      	mov	r1, r4
 80066f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066f8:	4621      	mov	r1, r4
 80066fa:	028a      	lsls	r2, r1, #10
 80066fc:	4610      	mov	r0, r2
 80066fe:	4619      	mov	r1, r3
 8006700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006702:	2200      	movs	r2, #0
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
 8006706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800670c:	f7fa fabc 	bl	8000c88 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4613      	mov	r3, r2
 8006716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006718:	e058      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800671a:	4b38      	ldr	r3, [pc, #224]	; (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	099b      	lsrs	r3, r3, #6
 8006720:	2200      	movs	r2, #0
 8006722:	4618      	mov	r0, r3
 8006724:	4611      	mov	r1, r2
 8006726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	2300      	movs	r3, #0
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	f04f 0000 	mov.w	r0, #0
 800673c:	f04f 0100 	mov.w	r1, #0
 8006740:	0159      	lsls	r1, r3, #5
 8006742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006746:	0150      	lsls	r0, r2, #5
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4641      	mov	r1, r8
 800674e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006752:	4649      	mov	r1, r9
 8006754:	eb63 0b01 	sbc.w	fp, r3, r1
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800676c:	ebb2 040a 	subs.w	r4, r2, sl
 8006770:	eb63 050b 	sbc.w	r5, r3, fp
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	00eb      	lsls	r3, r5, #3
 800677e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006782:	00e2      	lsls	r2, r4, #3
 8006784:	4614      	mov	r4, r2
 8006786:	461d      	mov	r5, r3
 8006788:	4643      	mov	r3, r8
 800678a:	18e3      	adds	r3, r4, r3
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	464b      	mov	r3, r9
 8006790:	eb45 0303 	adc.w	r3, r5, r3
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067a2:	4629      	mov	r1, r5
 80067a4:	028b      	lsls	r3, r1, #10
 80067a6:	4621      	mov	r1, r4
 80067a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067ac:	4621      	mov	r1, r4
 80067ae:	028a      	lsls	r2, r1, #10
 80067b0:	4610      	mov	r0, r2
 80067b2:	4619      	mov	r1, r3
 80067b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b6:	2200      	movs	r2, #0
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	61fa      	str	r2, [r7, #28]
 80067bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067c0:	f7fa fa62 	bl	8000c88 <__aeabi_uldivmod>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4613      	mov	r3, r2
 80067ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	0c1b      	lsrs	r3, r3, #16
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	3301      	adds	r3, #1
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80067dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067e6:	e002      	b.n	80067ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_RCC_GetSysClockFreq+0x204>)
 80067ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3750      	adds	r7, #80	; 0x50
 80067f4:	46bd      	mov	sp, r7
 80067f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067fa:	bf00      	nop
 80067fc:	40023800 	.word	0x40023800
 8006800:	00f42400 	.word	0x00f42400

08006804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006808:	4b03      	ldr	r3, [pc, #12]	; (8006818 <HAL_RCC_GetHCLKFreq+0x14>)
 800680a:	681b      	ldr	r3, [r3, #0]
}
 800680c:	4618      	mov	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000000 	.word	0x20000000

0800681c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006820:	f7ff fff0 	bl	8006804 <HAL_RCC_GetHCLKFreq>
 8006824:	4602      	mov	r2, r0
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	0a9b      	lsrs	r3, r3, #10
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	4903      	ldr	r1, [pc, #12]	; (8006840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006832:	5ccb      	ldrb	r3, [r1, r3]
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006838:	4618      	mov	r0, r3
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40023800 	.word	0x40023800
 8006840:	0800f680 	.word	0x0800f680

08006844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006848:	f7ff ffdc 	bl	8006804 <HAL_RCC_GetHCLKFreq>
 800684c:	4602      	mov	r2, r0
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	0b5b      	lsrs	r3, r3, #13
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	4903      	ldr	r1, [pc, #12]	; (8006868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800685a:	5ccb      	ldrb	r3, [r1, r3]
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40023800 	.word	0x40023800
 8006868:	0800f680 	.word	0x0800f680

0800686c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006870:	4b06      	ldr	r3, [pc, #24]	; (800688c <HAL_RCC_NMI_IRQHandler+0x20>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006878:	2b80      	cmp	r3, #128	; 0x80
 800687a:	d104      	bne.n	8006886 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800687c:	f000 f80a 	bl	8006894 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006882:	2280      	movs	r2, #128	; 0x80
 8006884:	701a      	strb	r2, [r3, #0]
  }
}
 8006886:	bf00      	nop
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800
 8006890:	4002380e 	.word	0x4002380e

08006894 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e041      	b.n	8006938 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d106      	bne.n	80068ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7fa fe25 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2202      	movs	r2, #2
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f000 fad9 	bl	8006e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e041      	b.n	80069d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f839 	bl	80069de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 fa8a 	bl	8006e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d109      	bne.n	8006a18 <HAL_TIM_PWM_Start+0x24>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	bf14      	ite	ne
 8006a10:	2301      	movne	r3, #1
 8006a12:	2300      	moveq	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	e022      	b.n	8006a5e <HAL_TIM_PWM_Start+0x6a>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d109      	bne.n	8006a32 <HAL_TIM_PWM_Start+0x3e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e015      	b.n	8006a5e <HAL_TIM_PWM_Start+0x6a>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d109      	bne.n	8006a4c <HAL_TIM_PWM_Start+0x58>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	bf14      	ite	ne
 8006a44:	2301      	movne	r3, #1
 8006a46:	2300      	moveq	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	e008      	b.n	8006a5e <HAL_TIM_PWM_Start+0x6a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	bf14      	ite	ne
 8006a58:	2301      	movne	r3, #1
 8006a5a:	2300      	moveq	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e07c      	b.n	8006b60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <HAL_TIM_PWM_Start+0x82>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a74:	e013      	b.n	8006a9e <HAL_TIM_PWM_Start+0xaa>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d104      	bne.n	8006a86 <HAL_TIM_PWM_Start+0x92>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a84:	e00b      	b.n	8006a9e <HAL_TIM_PWM_Start+0xaa>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Start+0xa2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a94:	e003      	b.n	8006a9e <HAL_TIM_PWM_Start+0xaa>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fce0 	bl	800746c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a2d      	ldr	r2, [pc, #180]	; (8006b68 <HAL_TIM_PWM_Start+0x174>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIM_PWM_Start+0xcc>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <HAL_TIM_PWM_Start+0x178>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d101      	bne.n	8006ac4 <HAL_TIM_PWM_Start+0xd0>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_TIM_PWM_Start+0xd2>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <HAL_TIM_PWM_Start+0x174>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d022      	beq.n	8006b2a <HAL_TIM_PWM_Start+0x136>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aec:	d01d      	beq.n	8006b2a <HAL_TIM_PWM_Start+0x136>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <HAL_TIM_PWM_Start+0x17c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d018      	beq.n	8006b2a <HAL_TIM_PWM_Start+0x136>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <HAL_TIM_PWM_Start+0x180>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <HAL_TIM_PWM_Start+0x136>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <HAL_TIM_PWM_Start+0x184>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00e      	beq.n	8006b2a <HAL_TIM_PWM_Start+0x136>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a16      	ldr	r2, [pc, #88]	; (8006b6c <HAL_TIM_PWM_Start+0x178>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d009      	beq.n	8006b2a <HAL_TIM_PWM_Start+0x136>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a18      	ldr	r2, [pc, #96]	; (8006b7c <HAL_TIM_PWM_Start+0x188>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d004      	beq.n	8006b2a <HAL_TIM_PWM_Start+0x136>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <HAL_TIM_PWM_Start+0x18c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d111      	bne.n	8006b4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b06      	cmp	r3, #6
 8006b3a:	d010      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4c:	e007      	b.n	8006b5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00
 8006b7c:	40014000 	.word	0x40014000
 8006b80:	40001800 	.word	0x40001800

08006b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e0ae      	b.n	8006d00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b0c      	cmp	r3, #12
 8006bae:	f200 809f 	bhi.w	8006cf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bed 	.word	0x08006bed
 8006bbc:	08006cf1 	.word	0x08006cf1
 8006bc0:	08006cf1 	.word	0x08006cf1
 8006bc4:	08006cf1 	.word	0x08006cf1
 8006bc8:	08006c2d 	.word	0x08006c2d
 8006bcc:	08006cf1 	.word	0x08006cf1
 8006bd0:	08006cf1 	.word	0x08006cf1
 8006bd4:	08006cf1 	.word	0x08006cf1
 8006bd8:	08006c6f 	.word	0x08006c6f
 8006bdc:	08006cf1 	.word	0x08006cf1
 8006be0:	08006cf1 	.word	0x08006cf1
 8006be4:	08006cf1 	.word	0x08006cf1
 8006be8:	08006caf 	.word	0x08006caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f9f0 	bl	8006fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0208 	orr.w	r2, r2, #8
 8006c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699a      	ldr	r2, [r3, #24]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0204 	bic.w	r2, r2, #4
 8006c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6999      	ldr	r1, [r3, #24]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	619a      	str	r2, [r3, #24]
      break;
 8006c2a:	e064      	b.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fa40 	bl	80070b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6999      	ldr	r1, [r3, #24]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	021a      	lsls	r2, r3, #8
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	619a      	str	r2, [r3, #24]
      break;
 8006c6c:	e043      	b.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fa95 	bl	80071a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0208 	orr.w	r2, r2, #8
 8006c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69da      	ldr	r2, [r3, #28]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0204 	bic.w	r2, r2, #4
 8006c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	69d9      	ldr	r1, [r3, #28]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	61da      	str	r2, [r3, #28]
      break;
 8006cac:	e023      	b.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fae9 	bl	800728c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69d9      	ldr	r1, [r3, #28]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	021a      	lsls	r2, r3, #8
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	61da      	str	r2, [r3, #28]
      break;
 8006cee:	e002      	b.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_TIM_ConfigClockSource+0x1c>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e0b4      	b.n	8006e8e <HAL_TIM_ConfigClockSource+0x186>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5c:	d03e      	beq.n	8006ddc <HAL_TIM_ConfigClockSource+0xd4>
 8006d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d62:	f200 8087 	bhi.w	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6a:	f000 8086 	beq.w	8006e7a <HAL_TIM_ConfigClockSource+0x172>
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d72:	d87f      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
 8006d74:	2b70      	cmp	r3, #112	; 0x70
 8006d76:	d01a      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0xa6>
 8006d78:	2b70      	cmp	r3, #112	; 0x70
 8006d7a:	d87b      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b60      	cmp	r3, #96	; 0x60
 8006d7e:	d050      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0x11a>
 8006d80:	2b60      	cmp	r3, #96	; 0x60
 8006d82:	d877      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
 8006d84:	2b50      	cmp	r3, #80	; 0x50
 8006d86:	d03c      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0xfa>
 8006d88:	2b50      	cmp	r3, #80	; 0x50
 8006d8a:	d873      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
 8006d8c:	2b40      	cmp	r3, #64	; 0x40
 8006d8e:	d058      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x13a>
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d86f      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
 8006d94:	2b30      	cmp	r3, #48	; 0x30
 8006d96:	d064      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x15a>
 8006d98:	2b30      	cmp	r3, #48	; 0x30
 8006d9a:	d86b      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d060      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x15a>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d867      	bhi.n	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d05c      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x15a>
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d05a      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x15a>
 8006dac:	e062      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6899      	ldr	r1, [r3, #8]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f000 fb35 	bl	800742c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	609a      	str	r2, [r3, #8]
      break;
 8006dda:	e04f      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	6899      	ldr	r1, [r3, #8]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f000 fb1e 	bl	800742c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dfe:	609a      	str	r2, [r3, #8]
      break;
 8006e00:	e03c      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6859      	ldr	r1, [r3, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f000 fa92 	bl	8007338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2150      	movs	r1, #80	; 0x50
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 faeb 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e20:	e02c      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6859      	ldr	r1, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f000 fab1 	bl	8007396 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2160      	movs	r1, #96	; 0x60
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fadb 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e40:	e01c      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6859      	ldr	r1, [r3, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f000 fa72 	bl	8007338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2140      	movs	r1, #64	; 0x40
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 facb 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e60:	e00c      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f000 fac2 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e72:	e003      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	73fb      	strb	r3, [r7, #15]
      break;
 8006e78:	e000      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a40      	ldr	r2, [pc, #256]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a3d      	ldr	r2, [pc, #244]	; (8006fb0 <TIM_Base_SetConfig+0x118>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a3c      	ldr	r2, [pc, #240]	; (8006fb4 <TIM_Base_SetConfig+0x11c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a3b      	ldr	r2, [pc, #236]	; (8006fb8 <TIM_Base_SetConfig+0x120>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a3a      	ldr	r2, [pc, #232]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d108      	bne.n	8006eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2f      	ldr	r2, [pc, #188]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d02b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef8:	d027      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a2c      	ldr	r2, [pc, #176]	; (8006fb0 <TIM_Base_SetConfig+0x118>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d023      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2b      	ldr	r2, [pc, #172]	; (8006fb4 <TIM_Base_SetConfig+0x11c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d01f      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2a      	ldr	r2, [pc, #168]	; (8006fb8 <TIM_Base_SetConfig+0x120>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d017      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <TIM_Base_SetConfig+0x128>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a27      	ldr	r2, [pc, #156]	; (8006fc4 <TIM_Base_SetConfig+0x12c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00f      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a26      	ldr	r2, [pc, #152]	; (8006fc8 <TIM_Base_SetConfig+0x130>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a25      	ldr	r2, [pc, #148]	; (8006fcc <TIM_Base_SetConfig+0x134>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d007      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a24      	ldr	r2, [pc, #144]	; (8006fd0 <TIM_Base_SetConfig+0x138>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d003      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <TIM_Base_SetConfig+0x13c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d108      	bne.n	8006f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_Base_SetConfig+0xf8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a0c      	ldr	r2, [pc, #48]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d103      	bne.n	8006f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	615a      	str	r2, [r3, #20]
}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40010400 	.word	0x40010400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800
 8006fcc:	40001800 	.word	0x40001800
 8006fd0:	40001c00 	.word	0x40001c00
 8006fd4:	40002000 	.word	0x40002000

08006fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f023 0201 	bic.w	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 0302 	bic.w	r3, r3, #2
 8007020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <TIM_OC1_SetConfig+0xd8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC1_SetConfig+0x64>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a1f      	ldr	r2, [pc, #124]	; (80070b4 <TIM_OC1_SetConfig+0xdc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d10c      	bne.n	8007056 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0308 	bic.w	r3, r3, #8
 8007042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 0304 	bic.w	r3, r3, #4
 8007054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC1_SetConfig+0xd8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC1_SetConfig+0x8e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC1_SetConfig+0xdc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d111      	bne.n	800708a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800706c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40010400 	.word	0x40010400

080070b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f023 0210 	bic.w	r2, r3, #16
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f023 0320 	bic.w	r3, r3, #32
 8007102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a22      	ldr	r2, [pc, #136]	; (800719c <TIM_OC2_SetConfig+0xe4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_OC2_SetConfig+0x68>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <TIM_OC2_SetConfig+0xe8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10d      	bne.n	800713c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <TIM_OC2_SetConfig+0xe4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC2_SetConfig+0x94>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <TIM_OC2_SetConfig+0xe8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d113      	bne.n	8007174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800715a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000
 80071a0:	40010400 	.word	0x40010400

080071a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a21      	ldr	r2, [pc, #132]	; (8007284 <TIM_OC3_SetConfig+0xe0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_OC3_SetConfig+0x66>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a20      	ldr	r2, [pc, #128]	; (8007288 <TIM_OC3_SetConfig+0xe4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d10d      	bne.n	8007226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <TIM_OC3_SetConfig+0xe0>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d003      	beq.n	8007236 <TIM_OC3_SetConfig+0x92>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a15      	ldr	r2, [pc, #84]	; (8007288 <TIM_OC3_SetConfig+0xe4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d113      	bne.n	800725e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800723c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400

0800728c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	031b      	lsls	r3, r3, #12
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a12      	ldr	r2, [pc, #72]	; (8007330 <TIM_OC4_SetConfig+0xa4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_OC4_SetConfig+0x68>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a11      	ldr	r2, [pc, #68]	; (8007334 <TIM_OC4_SetConfig+0xa8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d109      	bne.n	8007308 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	019b      	lsls	r3, r3, #6
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40010000 	.word	0x40010000
 8007334:	40010400 	.word	0x40010400

08007338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f023 030a 	bic.w	r3, r3, #10
 8007374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007396:	b480      	push	{r7}
 8007398:	b087      	sub	sp, #28
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0210 	bic.w	r2, r3, #16
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	f043 0307 	orr.w	r3, r3, #7
 8007418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	609a      	str	r2, [r3, #8]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	021a      	lsls	r2, r3, #8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	431a      	orrs	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	2201      	movs	r2, #1
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1a      	ldr	r2, [r3, #32]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	43db      	mvns	r3, r3
 800748e:	401a      	ands	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f003 031f 	and.w	r3, r3, #31
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	fa01 f303 	lsl.w	r3, r1, r3
 80074a4:	431a      	orrs	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e05a      	b.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a21      	ldr	r2, [pc, #132]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d022      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d01d      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1d      	ldr	r2, [pc, #116]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d018      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1b      	ldr	r2, [pc, #108]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1a      	ldr	r2, [pc, #104]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00e      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d009      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d004      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a15      	ldr	r2, [pc, #84]	; (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d10c      	bne.n	8007574 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4313      	orrs	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40010000 	.word	0x40010000
 8007598:	40000400 	.word	0x40000400
 800759c:	40000800 	.word	0x40000800
 80075a0:	40000c00 	.word	0x40000c00
 80075a4:	40010400 	.word	0x40010400
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40001800 	.word	0x40001800

080075b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e03f      	b.n	8007642 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fa f824 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2224      	movs	r2, #36	; 0x24
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fddf 	bl	80081b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695a      	ldr	r2, [r3, #20]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b08a      	sub	sp, #40	; 0x28
 800764e:	af02      	add	r7, sp, #8
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	603b      	str	r3, [r7, #0]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b20      	cmp	r3, #32
 8007668:	d17c      	bne.n	8007764 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_UART_Transmit+0x2c>
 8007670:	88fb      	ldrh	r3, [r7, #6]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e075      	b.n	8007766 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_UART_Transmit+0x3e>
 8007684:	2302      	movs	r3, #2
 8007686:	e06e      	b.n	8007766 <HAL_UART_Transmit+0x11c>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2221      	movs	r2, #33	; 0x21
 800769a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800769e:	f7fe f8dd 	bl	800585c <HAL_GetTick>
 80076a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	88fa      	ldrh	r2, [r7, #6]
 80076a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	88fa      	ldrh	r2, [r7, #6]
 80076ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b8:	d108      	bne.n	80076cc <HAL_UART_Transmit+0x82>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	e003      	b.n	80076d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076dc:	e02a      	b.n	8007734 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2200      	movs	r2, #0
 80076e6:	2180      	movs	r1, #128	; 0x80
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fb1f 	bl	8007d2c <UART_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e036      	b.n	8007766 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10b      	bne.n	8007716 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800770c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	3302      	adds	r3, #2
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	e007      	b.n	8007726 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	3301      	adds	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1cf      	bne.n	80076de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2200      	movs	r2, #0
 8007746:	2140      	movs	r1, #64	; 0x40
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 faef 	bl	8007d2c <UART_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e006      	b.n	8007766 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	e000      	b.n	8007766 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007764:	2302      	movs	r3, #2
  }
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	4613      	mov	r3, r2
 800777a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b20      	cmp	r3, #32
 8007786:	d11d      	bne.n	80077c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <HAL_UART_Receive_IT+0x26>
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e016      	b.n	80077c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Receive_IT+0x38>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e00f      	b.n	80077c6 <HAL_UART_Receive_IT+0x58>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	461a      	mov	r2, r3
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 fb24 	bl	8007e08 <UART_Start_Receive_IT>
 80077c0:	4603      	mov	r3, r0
 80077c2:	e000      	b.n	80077c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077c4:	2302      	movs	r3, #2
  }
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b0ba      	sub	sp, #232	; 0xe8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800780e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10f      	bne.n	8007836 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <HAL_UART_IRQHandler+0x66>
 8007822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fc07 	bl	8008042 <UART_Receive_IT>
      return;
 8007834:	e256      	b.n	8007ce4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 80de 	beq.w	80079fc <HAL_UART_IRQHandler+0x22c>
 8007840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007850:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 80d1 	beq.w	80079fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800785a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <HAL_UART_IRQHandler+0xae>
 8007866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	f043 0201 	orr.w	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00b      	beq.n	80078a2 <HAL_UART_IRQHandler+0xd2>
 800788a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	f043 0202 	orr.w	r2, r3, #2
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00b      	beq.n	80078c6 <HAL_UART_IRQHandler+0xf6>
 80078ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	f043 0204 	orr.w	r2, r3, #4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d011      	beq.n	80078f6 <HAL_UART_IRQHandler+0x126>
 80078d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d105      	bne.n	80078ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0208 	orr.w	r2, r3, #8
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 81ed 	beq.w	8007cda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <HAL_UART_IRQHandler+0x14e>
 800790c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007910:	f003 0320 	and.w	r3, r3, #32
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fb92 	bl	8008042 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	bf0c      	ite	eq
 800792c:	2301      	moveq	r3, #1
 800792e:	2300      	movne	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d103      	bne.n	800794a <HAL_UART_IRQHandler+0x17a>
 8007942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d04f      	beq.n	80079ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa9a 	bl	8007e84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d141      	bne.n	80079e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3314      	adds	r3, #20
 8007964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800797c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3314      	adds	r3, #20
 8007986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800798a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800798e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1d9      	bne.n	800795e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d013      	beq.n	80079da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	4a7d      	ldr	r2, [pc, #500]	; (8007bac <HAL_UART_IRQHandler+0x3dc>)
 80079b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe f8d9 	bl	8005b76 <HAL_DMA_Abort_IT>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d016      	beq.n	80079f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079d4:	4610      	mov	r0, r2
 80079d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	e00e      	b.n	80079f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f990 	bl	8007d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	e00a      	b.n	80079f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f98c 	bl	8007d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	e006      	b.n	80079f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f988 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079f6:	e170      	b.n	8007cda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	bf00      	nop
    return;
 80079fa:	e16e      	b.n	8007cda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	f040 814a 	bne.w	8007c9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0a:	f003 0310 	and.w	r3, r3, #16
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 8143 	beq.w	8007c9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 813c 	beq.w	8007c9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a22:	2300      	movs	r3, #0
 8007a24:	60bb      	str	r3, [r7, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	f040 80b4 	bne.w	8007bb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 8140 	beq.w	8007cde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a66:	429a      	cmp	r2, r3
 8007a68:	f080 8139 	bcs.w	8007cde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7e:	f000 8088 	beq.w	8007b92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	330c      	adds	r3, #12
 8007aaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007aae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007aba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1d9      	bne.n	8007a82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3314      	adds	r3, #20
 8007ad4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae0:	f023 0301 	bic.w	r3, r3, #1
 8007ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3314      	adds	r3, #20
 8007aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007af2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007af6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e1      	bne.n	8007ace <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3314      	adds	r3, #20
 8007b10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3314      	adds	r3, #20
 8007b2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e3      	bne.n	8007b0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b62:	f023 0310 	bic.w	r3, r3, #16
 8007b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b74:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e3      	bne.n	8007b50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fd ff82 	bl	8005a96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f8b6 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ba8:	e099      	b.n	8007cde <HAL_UART_IRQHandler+0x50e>
 8007baa:	bf00      	nop
 8007bac:	08007f4b 	.word	0x08007f4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 808b 	beq.w	8007ce2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8086 	beq.w	8007ce2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007bfa:	647a      	str	r2, [r7, #68]	; 0x44
 8007bfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e3      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3314      	adds	r3, #20
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3314      	adds	r3, #20
 8007c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c32:	633a      	str	r2, [r7, #48]	; 0x30
 8007c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e3      	bne.n	8007c0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	330c      	adds	r3, #12
 8007c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0310 	bic.w	r3, r3, #16
 8007c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c78:	61fa      	str	r2, [r7, #28]
 8007c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	69b9      	ldr	r1, [r7, #24]
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	617b      	str	r3, [r7, #20]
   return(result);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e3      	bne.n	8007c54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f83e 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c98:	e023      	b.n	8007ce2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <HAL_UART_IRQHandler+0x4ea>
 8007ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f95d 	bl	8007f72 <UART_Transmit_IT>
    return;
 8007cb8:	e014      	b.n	8007ce4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x514>
 8007cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f99d 	bl	8008012 <UART_EndTransmit_IT>
    return;
 8007cd8:	e004      	b.n	8007ce4 <HAL_UART_IRQHandler+0x514>
    return;
 8007cda:	bf00      	nop
 8007cdc:	e002      	b.n	8007ce4 <HAL_UART_IRQHandler+0x514>
      return;
 8007cde:	bf00      	nop
 8007ce0:	e000      	b.n	8007ce4 <HAL_UART_IRQHandler+0x514>
      return;
 8007ce2:	bf00      	nop
  }
}
 8007ce4:	37e8      	adds	r7, #232	; 0xe8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop

08007cec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b090      	sub	sp, #64	; 0x40
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d3c:	e050      	b.n	8007de0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d04c      	beq.n	8007de0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d4c:	f7fd fd86 	bl	800585c <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d241      	bcs.n	8007de0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d7c:	637a      	str	r2, [r7, #52]	; 0x34
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e5      	bne.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3314      	adds	r3, #20
 8007d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3314      	adds	r3, #20
 8007dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007db0:	623a      	str	r2, [r7, #32]
 8007db2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	69f9      	ldr	r1, [r7, #28]
 8007db6:	6a3a      	ldr	r2, [r7, #32]
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e5      	bne.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e00f      	b.n	8007e00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4013      	ands	r3, r2
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	461a      	mov	r2, r3
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d09f      	beq.n	8007d3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3740      	adds	r7, #64	; 0x40
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	88fa      	ldrh	r2, [r7, #6]
 8007e26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2222      	movs	r2, #34	; 0x22
 8007e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d007      	beq.n	8007e56 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e54:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695a      	ldr	r2, [r3, #20]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0201 	orr.w	r2, r2, #1
 8007e64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0220 	orr.w	r2, r2, #32
 8007e74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b095      	sub	sp, #84	; 0x54
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	330c      	adds	r3, #12
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	330c      	adds	r3, #12
 8007eaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eac:	643a      	str	r2, [r7, #64]	; 0x40
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eb4:	e841 2300 	strex	r3, r2, [r1]
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e5      	bne.n	8007e8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3314      	adds	r3, #20
 8007ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3314      	adds	r3, #20
 8007ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e5      	bne.n	8007ec0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d119      	bne.n	8007f30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	330c      	adds	r3, #12
 8007f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f023 0310 	bic.w	r3, r3, #16
 8007f12:	647b      	str	r3, [r7, #68]	; 0x44
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f1c:	61ba      	str	r2, [r7, #24]
 8007f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f20:	6979      	ldr	r1, [r7, #20]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	e841 2300 	strex	r3, r2, [r1]
 8007f28:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e5      	bne.n	8007efc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f3e:	bf00      	nop
 8007f40:	3754      	adds	r7, #84	; 0x54
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f7ff fecb 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b21      	cmp	r3, #33	; 0x21
 8007f84:	d13e      	bne.n	8008004 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8e:	d114      	bne.n	8007fba <UART_Transmit_IT+0x48>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d110      	bne.n	8007fba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	1c9a      	adds	r2, r3, #2
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	621a      	str	r2, [r3, #32]
 8007fb8:	e008      	b.n	8007fcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	1c59      	adds	r1, r3, #1
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	6211      	str	r1, [r2, #32]
 8007fc4:	781a      	ldrb	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10f      	bne.n	8008000 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ffe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	e000      	b.n	8008006 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008004:	2302      	movs	r3, #2
  }
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008028:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff fe5a 	bl	8007cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b08c      	sub	sp, #48	; 0x30
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b22      	cmp	r3, #34	; 0x22
 8008054:	f040 80ab 	bne.w	80081ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008060:	d117      	bne.n	8008092 <UART_Receive_IT+0x50>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d113      	bne.n	8008092 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008080:	b29a      	uxth	r2, r3
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	1c9a      	adds	r2, r3, #2
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	629a      	str	r2, [r3, #40]	; 0x28
 8008090:	e026      	b.n	80080e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008098:	2300      	movs	r3, #0
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a4:	d007      	beq.n	80080b6 <UART_Receive_IT+0x74>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <UART_Receive_IT+0x82>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	e008      	b.n	80080d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	4619      	mov	r1, r3
 80080ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d15a      	bne.n	80081aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0220 	bic.w	r2, r2, #32
 8008102:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695a      	ldr	r2, [r3, #20]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0201 	bic.w	r2, r2, #1
 8008122:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008130:	2b01      	cmp	r3, #1
 8008132:	d135      	bne.n	80081a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	330c      	adds	r3, #12
 8008140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	613b      	str	r3, [r7, #16]
   return(result);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f023 0310 	bic.w	r3, r3, #16
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	330c      	adds	r3, #12
 8008158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815a:	623a      	str	r2, [r7, #32]
 800815c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	69f9      	ldr	r1, [r7, #28]
 8008160:	6a3a      	ldr	r2, [r7, #32]
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	61bb      	str	r3, [r7, #24]
   return(result);
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e5      	bne.n	800813a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b10      	cmp	r3, #16
 800817a:	d10a      	bne.n	8008192 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff fdbb 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
 800819e:	e002      	b.n	80081a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7f9 fcc9 	bl	8001b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e002      	b.n	80081b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e000      	b.n	80081b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081ae:	2302      	movs	r3, #2
  }
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3730      	adds	r7, #48	; 0x30
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081bc:	b0c0      	sub	sp, #256	; 0x100
 80081be:	af00      	add	r7, sp, #0
 80081c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	68d9      	ldr	r1, [r3, #12]
 80081d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	ea40 0301 	orr.w	r3, r0, r1
 80081e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008210:	f021 010c 	bic.w	r1, r1, #12
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800821e:	430b      	orrs	r3, r1
 8008220:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800822e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008232:	6999      	ldr	r1, [r3, #24]
 8008234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	ea40 0301 	orr.w	r3, r0, r1
 800823e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	4b8f      	ldr	r3, [pc, #572]	; (8008484 <UART_SetConfig+0x2cc>)
 8008248:	429a      	cmp	r2, r3
 800824a:	d005      	beq.n	8008258 <UART_SetConfig+0xa0>
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b8d      	ldr	r3, [pc, #564]	; (8008488 <UART_SetConfig+0x2d0>)
 8008254:	429a      	cmp	r2, r3
 8008256:	d104      	bne.n	8008262 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008258:	f7fe faf4 	bl	8006844 <HAL_RCC_GetPCLK2Freq>
 800825c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008260:	e003      	b.n	800826a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008262:	f7fe fadb 	bl	800681c <HAL_RCC_GetPCLK1Freq>
 8008266:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800826a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008274:	f040 810c 	bne.w	8008490 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800827c:	2200      	movs	r2, #0
 800827e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008282:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008286:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800828a:	4622      	mov	r2, r4
 800828c:	462b      	mov	r3, r5
 800828e:	1891      	adds	r1, r2, r2
 8008290:	65b9      	str	r1, [r7, #88]	; 0x58
 8008292:	415b      	adcs	r3, r3
 8008294:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008296:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800829a:	4621      	mov	r1, r4
 800829c:	eb12 0801 	adds.w	r8, r2, r1
 80082a0:	4629      	mov	r1, r5
 80082a2:	eb43 0901 	adc.w	r9, r3, r1
 80082a6:	f04f 0200 	mov.w	r2, #0
 80082aa:	f04f 0300 	mov.w	r3, #0
 80082ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082ba:	4690      	mov	r8, r2
 80082bc:	4699      	mov	r9, r3
 80082be:	4623      	mov	r3, r4
 80082c0:	eb18 0303 	adds.w	r3, r8, r3
 80082c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082c8:	462b      	mov	r3, r5
 80082ca:	eb49 0303 	adc.w	r3, r9, r3
 80082ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082e6:	460b      	mov	r3, r1
 80082e8:	18db      	adds	r3, r3, r3
 80082ea:	653b      	str	r3, [r7, #80]	; 0x50
 80082ec:	4613      	mov	r3, r2
 80082ee:	eb42 0303 	adc.w	r3, r2, r3
 80082f2:	657b      	str	r3, [r7, #84]	; 0x54
 80082f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80082fc:	f7f8 fcc4 	bl	8000c88 <__aeabi_uldivmod>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4b61      	ldr	r3, [pc, #388]	; (800848c <UART_SetConfig+0x2d4>)
 8008306:	fba3 2302 	umull	r2, r3, r3, r2
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	011c      	lsls	r4, r3, #4
 800830e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008312:	2200      	movs	r2, #0
 8008314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008318:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800831c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008320:	4642      	mov	r2, r8
 8008322:	464b      	mov	r3, r9
 8008324:	1891      	adds	r1, r2, r2
 8008326:	64b9      	str	r1, [r7, #72]	; 0x48
 8008328:	415b      	adcs	r3, r3
 800832a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800832c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008330:	4641      	mov	r1, r8
 8008332:	eb12 0a01 	adds.w	sl, r2, r1
 8008336:	4649      	mov	r1, r9
 8008338:	eb43 0b01 	adc.w	fp, r3, r1
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008348:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800834c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008350:	4692      	mov	sl, r2
 8008352:	469b      	mov	fp, r3
 8008354:	4643      	mov	r3, r8
 8008356:	eb1a 0303 	adds.w	r3, sl, r3
 800835a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800835e:	464b      	mov	r3, r9
 8008360:	eb4b 0303 	adc.w	r3, fp, r3
 8008364:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008374:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008378:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800837c:	460b      	mov	r3, r1
 800837e:	18db      	adds	r3, r3, r3
 8008380:	643b      	str	r3, [r7, #64]	; 0x40
 8008382:	4613      	mov	r3, r2
 8008384:	eb42 0303 	adc.w	r3, r2, r3
 8008388:	647b      	str	r3, [r7, #68]	; 0x44
 800838a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800838e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008392:	f7f8 fc79 	bl	8000c88 <__aeabi_uldivmod>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4611      	mov	r1, r2
 800839c:	4b3b      	ldr	r3, [pc, #236]	; (800848c <UART_SetConfig+0x2d4>)
 800839e:	fba3 2301 	umull	r2, r3, r3, r1
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	2264      	movs	r2, #100	; 0x64
 80083a6:	fb02 f303 	mul.w	r3, r2, r3
 80083aa:	1acb      	subs	r3, r1, r3
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083b2:	4b36      	ldr	r3, [pc, #216]	; (800848c <UART_SetConfig+0x2d4>)
 80083b4:	fba3 2302 	umull	r2, r3, r3, r2
 80083b8:	095b      	lsrs	r3, r3, #5
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083c0:	441c      	add	r4, r3
 80083c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083d4:	4642      	mov	r2, r8
 80083d6:	464b      	mov	r3, r9
 80083d8:	1891      	adds	r1, r2, r2
 80083da:	63b9      	str	r1, [r7, #56]	; 0x38
 80083dc:	415b      	adcs	r3, r3
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083e4:	4641      	mov	r1, r8
 80083e6:	1851      	adds	r1, r2, r1
 80083e8:	6339      	str	r1, [r7, #48]	; 0x30
 80083ea:	4649      	mov	r1, r9
 80083ec:	414b      	adcs	r3, r1
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80083fc:	4659      	mov	r1, fp
 80083fe:	00cb      	lsls	r3, r1, #3
 8008400:	4651      	mov	r1, sl
 8008402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008406:	4651      	mov	r1, sl
 8008408:	00ca      	lsls	r2, r1, #3
 800840a:	4610      	mov	r0, r2
 800840c:	4619      	mov	r1, r3
 800840e:	4603      	mov	r3, r0
 8008410:	4642      	mov	r2, r8
 8008412:	189b      	adds	r3, r3, r2
 8008414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008418:	464b      	mov	r3, r9
 800841a:	460a      	mov	r2, r1
 800841c:	eb42 0303 	adc.w	r3, r2, r3
 8008420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008430:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008438:	460b      	mov	r3, r1
 800843a:	18db      	adds	r3, r3, r3
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
 800843e:	4613      	mov	r3, r2
 8008440:	eb42 0303 	adc.w	r3, r2, r3
 8008444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800844a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800844e:	f7f8 fc1b 	bl	8000c88 <__aeabi_uldivmod>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <UART_SetConfig+0x2d4>)
 8008458:	fba3 1302 	umull	r1, r3, r3, r2
 800845c:	095b      	lsrs	r3, r3, #5
 800845e:	2164      	movs	r1, #100	; 0x64
 8008460:	fb01 f303 	mul.w	r3, r1, r3
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	3332      	adds	r3, #50	; 0x32
 800846a:	4a08      	ldr	r2, [pc, #32]	; (800848c <UART_SetConfig+0x2d4>)
 800846c:	fba2 2303 	umull	r2, r3, r2, r3
 8008470:	095b      	lsrs	r3, r3, #5
 8008472:	f003 0207 	and.w	r2, r3, #7
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4422      	add	r2, r4
 800847e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008480:	e105      	b.n	800868e <UART_SetConfig+0x4d6>
 8008482:	bf00      	nop
 8008484:	40011000 	.word	0x40011000
 8008488:	40011400 	.word	0x40011400
 800848c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008494:	2200      	movs	r2, #0
 8008496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800849a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800849e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084a2:	4642      	mov	r2, r8
 80084a4:	464b      	mov	r3, r9
 80084a6:	1891      	adds	r1, r2, r2
 80084a8:	6239      	str	r1, [r7, #32]
 80084aa:	415b      	adcs	r3, r3
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
 80084ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084b2:	4641      	mov	r1, r8
 80084b4:	1854      	adds	r4, r2, r1
 80084b6:	4649      	mov	r1, r9
 80084b8:	eb43 0501 	adc.w	r5, r3, r1
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	00eb      	lsls	r3, r5, #3
 80084c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084ca:	00e2      	lsls	r2, r4, #3
 80084cc:	4614      	mov	r4, r2
 80084ce:	461d      	mov	r5, r3
 80084d0:	4643      	mov	r3, r8
 80084d2:	18e3      	adds	r3, r4, r3
 80084d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084d8:	464b      	mov	r3, r9
 80084da:	eb45 0303 	adc.w	r3, r5, r3
 80084de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80084fe:	4629      	mov	r1, r5
 8008500:	008b      	lsls	r3, r1, #2
 8008502:	4621      	mov	r1, r4
 8008504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008508:	4621      	mov	r1, r4
 800850a:	008a      	lsls	r2, r1, #2
 800850c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008510:	f7f8 fbba 	bl	8000c88 <__aeabi_uldivmod>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4b60      	ldr	r3, [pc, #384]	; (800869c <UART_SetConfig+0x4e4>)
 800851a:	fba3 2302 	umull	r2, r3, r3, r2
 800851e:	095b      	lsrs	r3, r3, #5
 8008520:	011c      	lsls	r4, r3, #4
 8008522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008526:	2200      	movs	r2, #0
 8008528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800852c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008530:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008534:	4642      	mov	r2, r8
 8008536:	464b      	mov	r3, r9
 8008538:	1891      	adds	r1, r2, r2
 800853a:	61b9      	str	r1, [r7, #24]
 800853c:	415b      	adcs	r3, r3
 800853e:	61fb      	str	r3, [r7, #28]
 8008540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008544:	4641      	mov	r1, r8
 8008546:	1851      	adds	r1, r2, r1
 8008548:	6139      	str	r1, [r7, #16]
 800854a:	4649      	mov	r1, r9
 800854c:	414b      	adcs	r3, r1
 800854e:	617b      	str	r3, [r7, #20]
 8008550:	f04f 0200 	mov.w	r2, #0
 8008554:	f04f 0300 	mov.w	r3, #0
 8008558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800855c:	4659      	mov	r1, fp
 800855e:	00cb      	lsls	r3, r1, #3
 8008560:	4651      	mov	r1, sl
 8008562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008566:	4651      	mov	r1, sl
 8008568:	00ca      	lsls	r2, r1, #3
 800856a:	4610      	mov	r0, r2
 800856c:	4619      	mov	r1, r3
 800856e:	4603      	mov	r3, r0
 8008570:	4642      	mov	r2, r8
 8008572:	189b      	adds	r3, r3, r2
 8008574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008578:	464b      	mov	r3, r9
 800857a:	460a      	mov	r2, r1
 800857c:	eb42 0303 	adc.w	r3, r2, r3
 8008580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	67bb      	str	r3, [r7, #120]	; 0x78
 800858e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800859c:	4649      	mov	r1, r9
 800859e:	008b      	lsls	r3, r1, #2
 80085a0:	4641      	mov	r1, r8
 80085a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085a6:	4641      	mov	r1, r8
 80085a8:	008a      	lsls	r2, r1, #2
 80085aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085ae:	f7f8 fb6b 	bl	8000c88 <__aeabi_uldivmod>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4b39      	ldr	r3, [pc, #228]	; (800869c <UART_SetConfig+0x4e4>)
 80085b8:	fba3 1302 	umull	r1, r3, r3, r2
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	2164      	movs	r1, #100	; 0x64
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	3332      	adds	r3, #50	; 0x32
 80085ca:	4a34      	ldr	r2, [pc, #208]	; (800869c <UART_SetConfig+0x4e4>)
 80085cc:	fba2 2303 	umull	r2, r3, r2, r3
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085d6:	441c      	add	r4, r3
 80085d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085dc:	2200      	movs	r2, #0
 80085de:	673b      	str	r3, [r7, #112]	; 0x70
 80085e0:	677a      	str	r2, [r7, #116]	; 0x74
 80085e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085e6:	4642      	mov	r2, r8
 80085e8:	464b      	mov	r3, r9
 80085ea:	1891      	adds	r1, r2, r2
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	415b      	adcs	r3, r3
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085f6:	4641      	mov	r1, r8
 80085f8:	1851      	adds	r1, r2, r1
 80085fa:	6039      	str	r1, [r7, #0]
 80085fc:	4649      	mov	r1, r9
 80085fe:	414b      	adcs	r3, r1
 8008600:	607b      	str	r3, [r7, #4]
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800860e:	4659      	mov	r1, fp
 8008610:	00cb      	lsls	r3, r1, #3
 8008612:	4651      	mov	r1, sl
 8008614:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008618:	4651      	mov	r1, sl
 800861a:	00ca      	lsls	r2, r1, #3
 800861c:	4610      	mov	r0, r2
 800861e:	4619      	mov	r1, r3
 8008620:	4603      	mov	r3, r0
 8008622:	4642      	mov	r2, r8
 8008624:	189b      	adds	r3, r3, r2
 8008626:	66bb      	str	r3, [r7, #104]	; 0x68
 8008628:	464b      	mov	r3, r9
 800862a:	460a      	mov	r2, r1
 800862c:	eb42 0303 	adc.w	r3, r2, r3
 8008630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	663b      	str	r3, [r7, #96]	; 0x60
 800863c:	667a      	str	r2, [r7, #100]	; 0x64
 800863e:	f04f 0200 	mov.w	r2, #0
 8008642:	f04f 0300 	mov.w	r3, #0
 8008646:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800864a:	4649      	mov	r1, r9
 800864c:	008b      	lsls	r3, r1, #2
 800864e:	4641      	mov	r1, r8
 8008650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008654:	4641      	mov	r1, r8
 8008656:	008a      	lsls	r2, r1, #2
 8008658:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800865c:	f7f8 fb14 	bl	8000c88 <__aeabi_uldivmod>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4b0d      	ldr	r3, [pc, #52]	; (800869c <UART_SetConfig+0x4e4>)
 8008666:	fba3 1302 	umull	r1, r3, r3, r2
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	2164      	movs	r1, #100	; 0x64
 800866e:	fb01 f303 	mul.w	r3, r1, r3
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	3332      	adds	r3, #50	; 0x32
 8008678:	4a08      	ldr	r2, [pc, #32]	; (800869c <UART_SetConfig+0x4e4>)
 800867a:	fba2 2303 	umull	r2, r3, r2, r3
 800867e:	095b      	lsrs	r3, r3, #5
 8008680:	f003 020f 	and.w	r2, r3, #15
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4422      	add	r2, r4
 800868c:	609a      	str	r2, [r3, #8]
}
 800868e:	bf00      	nop
 8008690:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008694:	46bd      	mov	sp, r7
 8008696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800869a:	bf00      	nop
 800869c:	51eb851f 	.word	0x51eb851f

080086a0 <__assert_func>:
 80086a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086a2:	4614      	mov	r4, r2
 80086a4:	461a      	mov	r2, r3
 80086a6:	4b09      	ldr	r3, [pc, #36]	; (80086cc <__assert_func+0x2c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4605      	mov	r5, r0
 80086ac:	68d8      	ldr	r0, [r3, #12]
 80086ae:	b14c      	cbz	r4, 80086c4 <__assert_func+0x24>
 80086b0:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <__assert_func+0x30>)
 80086b2:	9100      	str	r1, [sp, #0]
 80086b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086b8:	4906      	ldr	r1, [pc, #24]	; (80086d4 <__assert_func+0x34>)
 80086ba:	462b      	mov	r3, r5
 80086bc:	f000 f9c6 	bl	8008a4c <fiprintf>
 80086c0:	f002 fc20 	bl	800af04 <abort>
 80086c4:	4b04      	ldr	r3, [pc, #16]	; (80086d8 <__assert_func+0x38>)
 80086c6:	461c      	mov	r4, r3
 80086c8:	e7f3      	b.n	80086b2 <__assert_func+0x12>
 80086ca:	bf00      	nop
 80086cc:	2000000c 	.word	0x2000000c
 80086d0:	0800f7d0 	.word	0x0800f7d0
 80086d4:	0800f7dd 	.word	0x0800f7dd
 80086d8:	0800f80b 	.word	0x0800f80b

080086dc <calloc>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <calloc+0xc>)
 80086de:	460a      	mov	r2, r1
 80086e0:	4601      	mov	r1, r0
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	f000 bafa 	b.w	8008cdc <_calloc_r>
 80086e8:	2000000c 	.word	0x2000000c

080086ec <__errno>:
 80086ec:	4b01      	ldr	r3, [pc, #4]	; (80086f4 <__errno+0x8>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	2000000c 	.word	0x2000000c

080086f8 <__sflush_r>:
 80086f8:	898a      	ldrh	r2, [r1, #12]
 80086fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fe:	4605      	mov	r5, r0
 8008700:	0710      	lsls	r0, r2, #28
 8008702:	460c      	mov	r4, r1
 8008704:	d458      	bmi.n	80087b8 <__sflush_r+0xc0>
 8008706:	684b      	ldr	r3, [r1, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	dc05      	bgt.n	8008718 <__sflush_r+0x20>
 800870c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	dc02      	bgt.n	8008718 <__sflush_r+0x20>
 8008712:	2000      	movs	r0, #0
 8008714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800871a:	2e00      	cmp	r6, #0
 800871c:	d0f9      	beq.n	8008712 <__sflush_r+0x1a>
 800871e:	2300      	movs	r3, #0
 8008720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008724:	682f      	ldr	r7, [r5, #0]
 8008726:	602b      	str	r3, [r5, #0]
 8008728:	d032      	beq.n	8008790 <__sflush_r+0x98>
 800872a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	075a      	lsls	r2, r3, #29
 8008730:	d505      	bpl.n	800873e <__sflush_r+0x46>
 8008732:	6863      	ldr	r3, [r4, #4]
 8008734:	1ac0      	subs	r0, r0, r3
 8008736:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008738:	b10b      	cbz	r3, 800873e <__sflush_r+0x46>
 800873a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800873c:	1ac0      	subs	r0, r0, r3
 800873e:	2300      	movs	r3, #0
 8008740:	4602      	mov	r2, r0
 8008742:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008744:	6a21      	ldr	r1, [r4, #32]
 8008746:	4628      	mov	r0, r5
 8008748:	47b0      	blx	r6
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	d106      	bne.n	800875e <__sflush_r+0x66>
 8008750:	6829      	ldr	r1, [r5, #0]
 8008752:	291d      	cmp	r1, #29
 8008754:	d82c      	bhi.n	80087b0 <__sflush_r+0xb8>
 8008756:	4a2a      	ldr	r2, [pc, #168]	; (8008800 <__sflush_r+0x108>)
 8008758:	40ca      	lsrs	r2, r1
 800875a:	07d6      	lsls	r6, r2, #31
 800875c:	d528      	bpl.n	80087b0 <__sflush_r+0xb8>
 800875e:	2200      	movs	r2, #0
 8008760:	6062      	str	r2, [r4, #4]
 8008762:	04d9      	lsls	r1, r3, #19
 8008764:	6922      	ldr	r2, [r4, #16]
 8008766:	6022      	str	r2, [r4, #0]
 8008768:	d504      	bpl.n	8008774 <__sflush_r+0x7c>
 800876a:	1c42      	adds	r2, r0, #1
 800876c:	d101      	bne.n	8008772 <__sflush_r+0x7a>
 800876e:	682b      	ldr	r3, [r5, #0]
 8008770:	b903      	cbnz	r3, 8008774 <__sflush_r+0x7c>
 8008772:	6560      	str	r0, [r4, #84]	; 0x54
 8008774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008776:	602f      	str	r7, [r5, #0]
 8008778:	2900      	cmp	r1, #0
 800877a:	d0ca      	beq.n	8008712 <__sflush_r+0x1a>
 800877c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008780:	4299      	cmp	r1, r3
 8008782:	d002      	beq.n	800878a <__sflush_r+0x92>
 8008784:	4628      	mov	r0, r5
 8008786:	f000 fabf 	bl	8008d08 <_free_r>
 800878a:	2000      	movs	r0, #0
 800878c:	6360      	str	r0, [r4, #52]	; 0x34
 800878e:	e7c1      	b.n	8008714 <__sflush_r+0x1c>
 8008790:	6a21      	ldr	r1, [r4, #32]
 8008792:	2301      	movs	r3, #1
 8008794:	4628      	mov	r0, r5
 8008796:	47b0      	blx	r6
 8008798:	1c41      	adds	r1, r0, #1
 800879a:	d1c7      	bne.n	800872c <__sflush_r+0x34>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0c4      	beq.n	800872c <__sflush_r+0x34>
 80087a2:	2b1d      	cmp	r3, #29
 80087a4:	d001      	beq.n	80087aa <__sflush_r+0xb2>
 80087a6:	2b16      	cmp	r3, #22
 80087a8:	d101      	bne.n	80087ae <__sflush_r+0xb6>
 80087aa:	602f      	str	r7, [r5, #0]
 80087ac:	e7b1      	b.n	8008712 <__sflush_r+0x1a>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b4:	81a3      	strh	r3, [r4, #12]
 80087b6:	e7ad      	b.n	8008714 <__sflush_r+0x1c>
 80087b8:	690f      	ldr	r7, [r1, #16]
 80087ba:	2f00      	cmp	r7, #0
 80087bc:	d0a9      	beq.n	8008712 <__sflush_r+0x1a>
 80087be:	0793      	lsls	r3, r2, #30
 80087c0:	680e      	ldr	r6, [r1, #0]
 80087c2:	bf08      	it	eq
 80087c4:	694b      	ldreq	r3, [r1, #20]
 80087c6:	600f      	str	r7, [r1, #0]
 80087c8:	bf18      	it	ne
 80087ca:	2300      	movne	r3, #0
 80087cc:	eba6 0807 	sub.w	r8, r6, r7
 80087d0:	608b      	str	r3, [r1, #8]
 80087d2:	f1b8 0f00 	cmp.w	r8, #0
 80087d6:	dd9c      	ble.n	8008712 <__sflush_r+0x1a>
 80087d8:	6a21      	ldr	r1, [r4, #32]
 80087da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087dc:	4643      	mov	r3, r8
 80087de:	463a      	mov	r2, r7
 80087e0:	4628      	mov	r0, r5
 80087e2:	47b0      	blx	r6
 80087e4:	2800      	cmp	r0, #0
 80087e6:	dc06      	bgt.n	80087f6 <__sflush_r+0xfe>
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	e78e      	b.n	8008714 <__sflush_r+0x1c>
 80087f6:	4407      	add	r7, r0
 80087f8:	eba8 0800 	sub.w	r8, r8, r0
 80087fc:	e7e9      	b.n	80087d2 <__sflush_r+0xda>
 80087fe:	bf00      	nop
 8008800:	20400001 	.word	0x20400001

08008804 <_fflush_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	690b      	ldr	r3, [r1, #16]
 8008808:	4605      	mov	r5, r0
 800880a:	460c      	mov	r4, r1
 800880c:	b913      	cbnz	r3, 8008814 <_fflush_r+0x10>
 800880e:	2500      	movs	r5, #0
 8008810:	4628      	mov	r0, r5
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	b118      	cbz	r0, 800881e <_fflush_r+0x1a>
 8008816:	6983      	ldr	r3, [r0, #24]
 8008818:	b90b      	cbnz	r3, 800881e <_fflush_r+0x1a>
 800881a:	f000 f899 	bl	8008950 <__sinit>
 800881e:	4b14      	ldr	r3, [pc, #80]	; (8008870 <_fflush_r+0x6c>)
 8008820:	429c      	cmp	r4, r3
 8008822:	d11b      	bne.n	800885c <_fflush_r+0x58>
 8008824:	686c      	ldr	r4, [r5, #4]
 8008826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0ef      	beq.n	800880e <_fflush_r+0xa>
 800882e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008830:	07d0      	lsls	r0, r2, #31
 8008832:	d404      	bmi.n	800883e <_fflush_r+0x3a>
 8008834:	0599      	lsls	r1, r3, #22
 8008836:	d402      	bmi.n	800883e <_fflush_r+0x3a>
 8008838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800883a:	f000 fa0c 	bl	8008c56 <__retarget_lock_acquire_recursive>
 800883e:	4628      	mov	r0, r5
 8008840:	4621      	mov	r1, r4
 8008842:	f7ff ff59 	bl	80086f8 <__sflush_r>
 8008846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008848:	07da      	lsls	r2, r3, #31
 800884a:	4605      	mov	r5, r0
 800884c:	d4e0      	bmi.n	8008810 <_fflush_r+0xc>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	059b      	lsls	r3, r3, #22
 8008852:	d4dd      	bmi.n	8008810 <_fflush_r+0xc>
 8008854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008856:	f000 f9ff 	bl	8008c58 <__retarget_lock_release_recursive>
 800885a:	e7d9      	b.n	8008810 <_fflush_r+0xc>
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <_fflush_r+0x70>)
 800885e:	429c      	cmp	r4, r3
 8008860:	d101      	bne.n	8008866 <_fflush_r+0x62>
 8008862:	68ac      	ldr	r4, [r5, #8]
 8008864:	e7df      	b.n	8008826 <_fflush_r+0x22>
 8008866:	4b04      	ldr	r3, [pc, #16]	; (8008878 <_fflush_r+0x74>)
 8008868:	429c      	cmp	r4, r3
 800886a:	bf08      	it	eq
 800886c:	68ec      	ldreq	r4, [r5, #12]
 800886e:	e7da      	b.n	8008826 <_fflush_r+0x22>
 8008870:	0800f930 	.word	0x0800f930
 8008874:	0800f950 	.word	0x0800f950
 8008878:	0800f910 	.word	0x0800f910

0800887c <fflush>:
 800887c:	4601      	mov	r1, r0
 800887e:	b920      	cbnz	r0, 800888a <fflush+0xe>
 8008880:	4b04      	ldr	r3, [pc, #16]	; (8008894 <fflush+0x18>)
 8008882:	4905      	ldr	r1, [pc, #20]	; (8008898 <fflush+0x1c>)
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	f000 b933 	b.w	8008af0 <_fwalk_reent>
 800888a:	4b04      	ldr	r3, [pc, #16]	; (800889c <fflush+0x20>)
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	f7ff bfb9 	b.w	8008804 <_fflush_r>
 8008892:	bf00      	nop
 8008894:	0800f970 	.word	0x0800f970
 8008898:	08008805 	.word	0x08008805
 800889c:	2000000c 	.word	0x2000000c

080088a0 <std>:
 80088a0:	2300      	movs	r3, #0
 80088a2:	b510      	push	{r4, lr}
 80088a4:	4604      	mov	r4, r0
 80088a6:	e9c0 3300 	strd	r3, r3, [r0]
 80088aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ae:	6083      	str	r3, [r0, #8]
 80088b0:	8181      	strh	r1, [r0, #12]
 80088b2:	6643      	str	r3, [r0, #100]	; 0x64
 80088b4:	81c2      	strh	r2, [r0, #14]
 80088b6:	6183      	str	r3, [r0, #24]
 80088b8:	4619      	mov	r1, r3
 80088ba:	2208      	movs	r2, #8
 80088bc:	305c      	adds	r0, #92	; 0x5c
 80088be:	f000 fa05 	bl	8008ccc <memset>
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <std+0x38>)
 80088c4:	6263      	str	r3, [r4, #36]	; 0x24
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <std+0x3c>)
 80088c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80088ca:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <std+0x40>)
 80088cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <std+0x44>)
 80088d0:	6224      	str	r4, [r4, #32]
 80088d2:	6323      	str	r3, [r4, #48]	; 0x30
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	bf00      	nop
 80088d8:	08009f81 	.word	0x08009f81
 80088dc:	08009fa3 	.word	0x08009fa3
 80088e0:	08009fdb 	.word	0x08009fdb
 80088e4:	08009fff 	.word	0x08009fff

080088e8 <_cleanup_r>:
 80088e8:	4901      	ldr	r1, [pc, #4]	; (80088f0 <_cleanup_r+0x8>)
 80088ea:	f000 b901 	b.w	8008af0 <_fwalk_reent>
 80088ee:	bf00      	nop
 80088f0:	08008805 	.word	0x08008805

080088f4 <__sfmoreglue>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	2268      	movs	r2, #104	; 0x68
 80088f8:	1e4d      	subs	r5, r1, #1
 80088fa:	4355      	muls	r5, r2
 80088fc:	460e      	mov	r6, r1
 80088fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008902:	f000 fa6d 	bl	8008de0 <_malloc_r>
 8008906:	4604      	mov	r4, r0
 8008908:	b140      	cbz	r0, 800891c <__sfmoreglue+0x28>
 800890a:	2100      	movs	r1, #0
 800890c:	e9c0 1600 	strd	r1, r6, [r0]
 8008910:	300c      	adds	r0, #12
 8008912:	60a0      	str	r0, [r4, #8]
 8008914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008918:	f000 f9d8 	bl	8008ccc <memset>
 800891c:	4620      	mov	r0, r4
 800891e:	bd70      	pop	{r4, r5, r6, pc}

08008920 <__sfp_lock_acquire>:
 8008920:	4801      	ldr	r0, [pc, #4]	; (8008928 <__sfp_lock_acquire+0x8>)
 8008922:	f000 b998 	b.w	8008c56 <__retarget_lock_acquire_recursive>
 8008926:	bf00      	nop
 8008928:	20000edd 	.word	0x20000edd

0800892c <__sfp_lock_release>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__sfp_lock_release+0x8>)
 800892e:	f000 b993 	b.w	8008c58 <__retarget_lock_release_recursive>
 8008932:	bf00      	nop
 8008934:	20000edd 	.word	0x20000edd

08008938 <__sinit_lock_acquire>:
 8008938:	4801      	ldr	r0, [pc, #4]	; (8008940 <__sinit_lock_acquire+0x8>)
 800893a:	f000 b98c 	b.w	8008c56 <__retarget_lock_acquire_recursive>
 800893e:	bf00      	nop
 8008940:	20000ede 	.word	0x20000ede

08008944 <__sinit_lock_release>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__sinit_lock_release+0x8>)
 8008946:	f000 b987 	b.w	8008c58 <__retarget_lock_release_recursive>
 800894a:	bf00      	nop
 800894c:	20000ede 	.word	0x20000ede

08008950 <__sinit>:
 8008950:	b510      	push	{r4, lr}
 8008952:	4604      	mov	r4, r0
 8008954:	f7ff fff0 	bl	8008938 <__sinit_lock_acquire>
 8008958:	69a3      	ldr	r3, [r4, #24]
 800895a:	b11b      	cbz	r3, 8008964 <__sinit+0x14>
 800895c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008960:	f7ff bff0 	b.w	8008944 <__sinit_lock_release>
 8008964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008968:	6523      	str	r3, [r4, #80]	; 0x50
 800896a:	4b13      	ldr	r3, [pc, #76]	; (80089b8 <__sinit+0x68>)
 800896c:	4a13      	ldr	r2, [pc, #76]	; (80089bc <__sinit+0x6c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	62a2      	str	r2, [r4, #40]	; 0x28
 8008972:	42a3      	cmp	r3, r4
 8008974:	bf04      	itt	eq
 8008976:	2301      	moveq	r3, #1
 8008978:	61a3      	streq	r3, [r4, #24]
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f820 	bl	80089c0 <__sfp>
 8008980:	6060      	str	r0, [r4, #4]
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f81c 	bl	80089c0 <__sfp>
 8008988:	60a0      	str	r0, [r4, #8]
 800898a:	4620      	mov	r0, r4
 800898c:	f000 f818 	bl	80089c0 <__sfp>
 8008990:	2200      	movs	r2, #0
 8008992:	60e0      	str	r0, [r4, #12]
 8008994:	2104      	movs	r1, #4
 8008996:	6860      	ldr	r0, [r4, #4]
 8008998:	f7ff ff82 	bl	80088a0 <std>
 800899c:	68a0      	ldr	r0, [r4, #8]
 800899e:	2201      	movs	r2, #1
 80089a0:	2109      	movs	r1, #9
 80089a2:	f7ff ff7d 	bl	80088a0 <std>
 80089a6:	68e0      	ldr	r0, [r4, #12]
 80089a8:	2202      	movs	r2, #2
 80089aa:	2112      	movs	r1, #18
 80089ac:	f7ff ff78 	bl	80088a0 <std>
 80089b0:	2301      	movs	r3, #1
 80089b2:	61a3      	str	r3, [r4, #24]
 80089b4:	e7d2      	b.n	800895c <__sinit+0xc>
 80089b6:	bf00      	nop
 80089b8:	0800f970 	.word	0x0800f970
 80089bc:	080088e9 	.word	0x080088e9

080089c0 <__sfp>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	4607      	mov	r7, r0
 80089c4:	f7ff ffac 	bl	8008920 <__sfp_lock_acquire>
 80089c8:	4b1e      	ldr	r3, [pc, #120]	; (8008a44 <__sfp+0x84>)
 80089ca:	681e      	ldr	r6, [r3, #0]
 80089cc:	69b3      	ldr	r3, [r6, #24]
 80089ce:	b913      	cbnz	r3, 80089d6 <__sfp+0x16>
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7ff ffbd 	bl	8008950 <__sinit>
 80089d6:	3648      	adds	r6, #72	; 0x48
 80089d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089dc:	3b01      	subs	r3, #1
 80089de:	d503      	bpl.n	80089e8 <__sfp+0x28>
 80089e0:	6833      	ldr	r3, [r6, #0]
 80089e2:	b30b      	cbz	r3, 8008a28 <__sfp+0x68>
 80089e4:	6836      	ldr	r6, [r6, #0]
 80089e6:	e7f7      	b.n	80089d8 <__sfp+0x18>
 80089e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089ec:	b9d5      	cbnz	r5, 8008a24 <__sfp+0x64>
 80089ee:	4b16      	ldr	r3, [pc, #88]	; (8008a48 <__sfp+0x88>)
 80089f0:	60e3      	str	r3, [r4, #12]
 80089f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089f6:	6665      	str	r5, [r4, #100]	; 0x64
 80089f8:	f000 f92c 	bl	8008c54 <__retarget_lock_init_recursive>
 80089fc:	f7ff ff96 	bl	800892c <__sfp_lock_release>
 8008a00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a08:	6025      	str	r5, [r4, #0]
 8008a0a:	61a5      	str	r5, [r4, #24]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a14:	f000 f95a 	bl	8008ccc <memset>
 8008a18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a20:	4620      	mov	r0, r4
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a24:	3468      	adds	r4, #104	; 0x68
 8008a26:	e7d9      	b.n	80089dc <__sfp+0x1c>
 8008a28:	2104      	movs	r1, #4
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7ff ff62 	bl	80088f4 <__sfmoreglue>
 8008a30:	4604      	mov	r4, r0
 8008a32:	6030      	str	r0, [r6, #0]
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1d5      	bne.n	80089e4 <__sfp+0x24>
 8008a38:	f7ff ff78 	bl	800892c <__sfp_lock_release>
 8008a3c:	230c      	movs	r3, #12
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	e7ee      	b.n	8008a20 <__sfp+0x60>
 8008a42:	bf00      	nop
 8008a44:	0800f970 	.word	0x0800f970
 8008a48:	ffff0001 	.word	0xffff0001

08008a4c <fiprintf>:
 8008a4c:	b40e      	push	{r1, r2, r3}
 8008a4e:	b503      	push	{r0, r1, lr}
 8008a50:	4601      	mov	r1, r0
 8008a52:	ab03      	add	r3, sp, #12
 8008a54:	4805      	ldr	r0, [pc, #20]	; (8008a6c <fiprintf+0x20>)
 8008a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	f000 fa5d 	bl	8008f1c <_vfiprintf_r>
 8008a62:	b002      	add	sp, #8
 8008a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a68:	b003      	add	sp, #12
 8008a6a:	4770      	bx	lr
 8008a6c:	2000000c 	.word	0x2000000c

08008a70 <_fputc_r>:
 8008a70:	b570      	push	{r4, r5, r6, lr}
 8008a72:	460e      	mov	r6, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	4605      	mov	r5, r0
 8008a78:	b118      	cbz	r0, 8008a82 <_fputc_r+0x12>
 8008a7a:	6983      	ldr	r3, [r0, #24]
 8008a7c:	b90b      	cbnz	r3, 8008a82 <_fputc_r+0x12>
 8008a7e:	f7ff ff67 	bl	8008950 <__sinit>
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <_fputc_r+0x64>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	d11a      	bne.n	8008abe <_fputc_r+0x4e>
 8008a88:	686c      	ldr	r4, [r5, #4]
 8008a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a8c:	07d8      	lsls	r0, r3, #31
 8008a8e:	d405      	bmi.n	8008a9c <_fputc_r+0x2c>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	0599      	lsls	r1, r3, #22
 8008a94:	d402      	bmi.n	8008a9c <_fputc_r+0x2c>
 8008a96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a98:	f000 f8dd 	bl	8008c56 <__retarget_lock_acquire_recursive>
 8008a9c:	4622      	mov	r2, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	f001 f9ef 	bl	8009e84 <_putc_r>
 8008aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aa8:	07da      	lsls	r2, r3, #31
 8008aaa:	4605      	mov	r5, r0
 8008aac:	d405      	bmi.n	8008aba <_fputc_r+0x4a>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	059b      	lsls	r3, r3, #22
 8008ab2:	d402      	bmi.n	8008aba <_fputc_r+0x4a>
 8008ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ab6:	f000 f8cf 	bl	8008c58 <__retarget_lock_release_recursive>
 8008aba:	4628      	mov	r0, r5
 8008abc:	bd70      	pop	{r4, r5, r6, pc}
 8008abe:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <_fputc_r+0x68>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	d101      	bne.n	8008ac8 <_fputc_r+0x58>
 8008ac4:	68ac      	ldr	r4, [r5, #8]
 8008ac6:	e7e0      	b.n	8008a8a <_fputc_r+0x1a>
 8008ac8:	4b04      	ldr	r3, [pc, #16]	; (8008adc <_fputc_r+0x6c>)
 8008aca:	429c      	cmp	r4, r3
 8008acc:	bf08      	it	eq
 8008ace:	68ec      	ldreq	r4, [r5, #12]
 8008ad0:	e7db      	b.n	8008a8a <_fputc_r+0x1a>
 8008ad2:	bf00      	nop
 8008ad4:	0800f930 	.word	0x0800f930
 8008ad8:	0800f950 	.word	0x0800f950
 8008adc:	0800f910 	.word	0x0800f910

08008ae0 <fputc>:
 8008ae0:	4b02      	ldr	r3, [pc, #8]	; (8008aec <fputc+0xc>)
 8008ae2:	460a      	mov	r2, r1
 8008ae4:	4601      	mov	r1, r0
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	f7ff bfc2 	b.w	8008a70 <_fputc_r>
 8008aec:	2000000c 	.word	0x2000000c

08008af0 <_fwalk_reent>:
 8008af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af4:	4606      	mov	r6, r0
 8008af6:	4688      	mov	r8, r1
 8008af8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008afc:	2700      	movs	r7, #0
 8008afe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b02:	f1b9 0901 	subs.w	r9, r9, #1
 8008b06:	d505      	bpl.n	8008b14 <_fwalk_reent+0x24>
 8008b08:	6824      	ldr	r4, [r4, #0]
 8008b0a:	2c00      	cmp	r4, #0
 8008b0c:	d1f7      	bne.n	8008afe <_fwalk_reent+0xe>
 8008b0e:	4638      	mov	r0, r7
 8008b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b14:	89ab      	ldrh	r3, [r5, #12]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d907      	bls.n	8008b2a <_fwalk_reent+0x3a>
 8008b1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	d003      	beq.n	8008b2a <_fwalk_reent+0x3a>
 8008b22:	4629      	mov	r1, r5
 8008b24:	4630      	mov	r0, r6
 8008b26:	47c0      	blx	r8
 8008b28:	4307      	orrs	r7, r0
 8008b2a:	3568      	adds	r5, #104	; 0x68
 8008b2c:	e7e9      	b.n	8008b02 <_fwalk_reent+0x12>
	...

08008b30 <_fwrite_r>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	9c08      	ldr	r4, [sp, #32]
 8008b36:	468a      	mov	sl, r1
 8008b38:	4690      	mov	r8, r2
 8008b3a:	fb02 f903 	mul.w	r9, r2, r3
 8008b3e:	4605      	mov	r5, r0
 8008b40:	b118      	cbz	r0, 8008b4a <_fwrite_r+0x1a>
 8008b42:	6983      	ldr	r3, [r0, #24]
 8008b44:	b90b      	cbnz	r3, 8008b4a <_fwrite_r+0x1a>
 8008b46:	f7ff ff03 	bl	8008950 <__sinit>
 8008b4a:	4b26      	ldr	r3, [pc, #152]	; (8008be4 <_fwrite_r+0xb4>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d123      	bne.n	8008b98 <_fwrite_r+0x68>
 8008b50:	686c      	ldr	r4, [r5, #4]
 8008b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b54:	07de      	lsls	r6, r3, #31
 8008b56:	d405      	bmi.n	8008b64 <_fwrite_r+0x34>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	0598      	lsls	r0, r3, #22
 8008b5c:	d402      	bmi.n	8008b64 <_fwrite_r+0x34>
 8008b5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b60:	f000 f879 	bl	8008c56 <__retarget_lock_acquire_recursive>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	0719      	lsls	r1, r3, #28
 8008b68:	d520      	bpl.n	8008bac <_fwrite_r+0x7c>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	b1f3      	cbz	r3, 8008bac <_fwrite_r+0x7c>
 8008b6e:	2600      	movs	r6, #0
 8008b70:	454e      	cmp	r6, r9
 8008b72:	d029      	beq.n	8008bc8 <_fwrite_r+0x98>
 8008b74:	68a7      	ldr	r7, [r4, #8]
 8008b76:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8008b7a:	3f01      	subs	r7, #1
 8008b7c:	2f00      	cmp	r7, #0
 8008b7e:	60a7      	str	r7, [r4, #8]
 8008b80:	da04      	bge.n	8008b8c <_fwrite_r+0x5c>
 8008b82:	69a3      	ldr	r3, [r4, #24]
 8008b84:	429f      	cmp	r7, r3
 8008b86:	db19      	blt.n	8008bbc <_fwrite_r+0x8c>
 8008b88:	290a      	cmp	r1, #10
 8008b8a:	d017      	beq.n	8008bbc <_fwrite_r+0x8c>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	6022      	str	r2, [r4, #0]
 8008b92:	7019      	strb	r1, [r3, #0]
 8008b94:	3601      	adds	r6, #1
 8008b96:	e7eb      	b.n	8008b70 <_fwrite_r+0x40>
 8008b98:	4b13      	ldr	r3, [pc, #76]	; (8008be8 <_fwrite_r+0xb8>)
 8008b9a:	429c      	cmp	r4, r3
 8008b9c:	d101      	bne.n	8008ba2 <_fwrite_r+0x72>
 8008b9e:	68ac      	ldr	r4, [r5, #8]
 8008ba0:	e7d7      	b.n	8008b52 <_fwrite_r+0x22>
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <_fwrite_r+0xbc>)
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	bf08      	it	eq
 8008ba8:	68ec      	ldreq	r4, [r5, #12]
 8008baa:	e7d2      	b.n	8008b52 <_fwrite_r+0x22>
 8008bac:	4621      	mov	r1, r4
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f002 f93a 	bl	800ae28 <__swsetup_r>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d0da      	beq.n	8008b6e <_fwrite_r+0x3e>
 8008bb8:	2600      	movs	r6, #0
 8008bba:	e005      	b.n	8008bc8 <_fwrite_r+0x98>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f002 f8ce 	bl	800ad60 <__swbuf_r>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d1e5      	bne.n	8008b94 <_fwrite_r+0x64>
 8008bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bca:	07da      	lsls	r2, r3, #31
 8008bcc:	d405      	bmi.n	8008bda <_fwrite_r+0xaa>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	059b      	lsls	r3, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_fwrite_r+0xaa>
 8008bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bd6:	f000 f83f 	bl	8008c58 <__retarget_lock_release_recursive>
 8008bda:	fbb6 f0f8 	udiv	r0, r6, r8
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	bf00      	nop
 8008be4:	0800f930 	.word	0x0800f930
 8008be8:	0800f950 	.word	0x0800f950
 8008bec:	0800f910 	.word	0x0800f910

08008bf0 <fwrite>:
 8008bf0:	b507      	push	{r0, r1, r2, lr}
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	460a      	mov	r2, r1
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	4803      	ldr	r0, [pc, #12]	; (8008c08 <fwrite+0x18>)
 8008bfc:	6800      	ldr	r0, [r0, #0]
 8008bfe:	f7ff ff97 	bl	8008b30 <_fwrite_r>
 8008c02:	b003      	add	sp, #12
 8008c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c08:	2000000c 	.word	0x2000000c

08008c0c <__libc_init_array>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	4d0d      	ldr	r5, [pc, #52]	; (8008c44 <__libc_init_array+0x38>)
 8008c10:	4c0d      	ldr	r4, [pc, #52]	; (8008c48 <__libc_init_array+0x3c>)
 8008c12:	1b64      	subs	r4, r4, r5
 8008c14:	10a4      	asrs	r4, r4, #2
 8008c16:	2600      	movs	r6, #0
 8008c18:	42a6      	cmp	r6, r4
 8008c1a:	d109      	bne.n	8008c30 <__libc_init_array+0x24>
 8008c1c:	4d0b      	ldr	r5, [pc, #44]	; (8008c4c <__libc_init_array+0x40>)
 8008c1e:	4c0c      	ldr	r4, [pc, #48]	; (8008c50 <__libc_init_array+0x44>)
 8008c20:	f004 fb06 	bl	800d230 <_init>
 8008c24:	1b64      	subs	r4, r4, r5
 8008c26:	10a4      	asrs	r4, r4, #2
 8008c28:	2600      	movs	r6, #0
 8008c2a:	42a6      	cmp	r6, r4
 8008c2c:	d105      	bne.n	8008c3a <__libc_init_array+0x2e>
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
 8008c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c34:	4798      	blx	r3
 8008c36:	3601      	adds	r6, #1
 8008c38:	e7ee      	b.n	8008c18 <__libc_init_array+0xc>
 8008c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3e:	4798      	blx	r3
 8008c40:	3601      	adds	r6, #1
 8008c42:	e7f2      	b.n	8008c2a <__libc_init_array+0x1e>
 8008c44:	0800fc7c 	.word	0x0800fc7c
 8008c48:	0800fc7c 	.word	0x0800fc7c
 8008c4c:	0800fc7c 	.word	0x0800fc7c
 8008c50:	0800fc80 	.word	0x0800fc80

08008c54 <__retarget_lock_init_recursive>:
 8008c54:	4770      	bx	lr

08008c56 <__retarget_lock_acquire_recursive>:
 8008c56:	4770      	bx	lr

08008c58 <__retarget_lock_release_recursive>:
 8008c58:	4770      	bx	lr
	...

08008c5c <malloc>:
 8008c5c:	4b02      	ldr	r3, [pc, #8]	; (8008c68 <malloc+0xc>)
 8008c5e:	4601      	mov	r1, r0
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	f000 b8bd 	b.w	8008de0 <_malloc_r>
 8008c66:	bf00      	nop
 8008c68:	2000000c 	.word	0x2000000c

08008c6c <free>:
 8008c6c:	4b02      	ldr	r3, [pc, #8]	; (8008c78 <free+0xc>)
 8008c6e:	4601      	mov	r1, r0
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	f000 b849 	b.w	8008d08 <_free_r>
 8008c76:	bf00      	nop
 8008c78:	2000000c 	.word	0x2000000c

08008c7c <memcpy>:
 8008c7c:	440a      	add	r2, r1
 8008c7e:	4291      	cmp	r1, r2
 8008c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c84:	d100      	bne.n	8008c88 <memcpy+0xc>
 8008c86:	4770      	bx	lr
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c92:	4291      	cmp	r1, r2
 8008c94:	d1f9      	bne.n	8008c8a <memcpy+0xe>
 8008c96:	bd10      	pop	{r4, pc}

08008c98 <memmove>:
 8008c98:	4288      	cmp	r0, r1
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	eb01 0402 	add.w	r4, r1, r2
 8008ca0:	d902      	bls.n	8008ca8 <memmove+0x10>
 8008ca2:	4284      	cmp	r4, r0
 8008ca4:	4623      	mov	r3, r4
 8008ca6:	d807      	bhi.n	8008cb8 <memmove+0x20>
 8008ca8:	1e43      	subs	r3, r0, #1
 8008caa:	42a1      	cmp	r1, r4
 8008cac:	d008      	beq.n	8008cc0 <memmove+0x28>
 8008cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cb6:	e7f8      	b.n	8008caa <memmove+0x12>
 8008cb8:	4402      	add	r2, r0
 8008cba:	4601      	mov	r1, r0
 8008cbc:	428a      	cmp	r2, r1
 8008cbe:	d100      	bne.n	8008cc2 <memmove+0x2a>
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cca:	e7f7      	b.n	8008cbc <memmove+0x24>

08008ccc <memset>:
 8008ccc:	4402      	add	r2, r0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d100      	bne.n	8008cd6 <memset+0xa>
 8008cd4:	4770      	bx	lr
 8008cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cda:	e7f9      	b.n	8008cd0 <memset+0x4>

08008cdc <_calloc_r>:
 8008cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cde:	fba1 2402 	umull	r2, r4, r1, r2
 8008ce2:	b94c      	cbnz	r4, 8008cf8 <_calloc_r+0x1c>
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	9201      	str	r2, [sp, #4]
 8008ce8:	f000 f87a 	bl	8008de0 <_malloc_r>
 8008cec:	9a01      	ldr	r2, [sp, #4]
 8008cee:	4605      	mov	r5, r0
 8008cf0:	b930      	cbnz	r0, 8008d00 <_calloc_r+0x24>
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	b003      	add	sp, #12
 8008cf6:	bd30      	pop	{r4, r5, pc}
 8008cf8:	220c      	movs	r2, #12
 8008cfa:	6002      	str	r2, [r0, #0]
 8008cfc:	2500      	movs	r5, #0
 8008cfe:	e7f8      	b.n	8008cf2 <_calloc_r+0x16>
 8008d00:	4621      	mov	r1, r4
 8008d02:	f7ff ffe3 	bl	8008ccc <memset>
 8008d06:	e7f4      	b.n	8008cf2 <_calloc_r+0x16>

08008d08 <_free_r>:
 8008d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d0a:	2900      	cmp	r1, #0
 8008d0c:	d044      	beq.n	8008d98 <_free_r+0x90>
 8008d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d12:	9001      	str	r0, [sp, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f1a1 0404 	sub.w	r4, r1, #4
 8008d1a:	bfb8      	it	lt
 8008d1c:	18e4      	addlt	r4, r4, r3
 8008d1e:	f003 fb83 	bl	800c428 <__malloc_lock>
 8008d22:	4a1e      	ldr	r2, [pc, #120]	; (8008d9c <_free_r+0x94>)
 8008d24:	9801      	ldr	r0, [sp, #4]
 8008d26:	6813      	ldr	r3, [r2, #0]
 8008d28:	b933      	cbnz	r3, 8008d38 <_free_r+0x30>
 8008d2a:	6063      	str	r3, [r4, #4]
 8008d2c:	6014      	str	r4, [r2, #0]
 8008d2e:	b003      	add	sp, #12
 8008d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d34:	f003 bb7e 	b.w	800c434 <__malloc_unlock>
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	d908      	bls.n	8008d4e <_free_r+0x46>
 8008d3c:	6825      	ldr	r5, [r4, #0]
 8008d3e:	1961      	adds	r1, r4, r5
 8008d40:	428b      	cmp	r3, r1
 8008d42:	bf01      	itttt	eq
 8008d44:	6819      	ldreq	r1, [r3, #0]
 8008d46:	685b      	ldreq	r3, [r3, #4]
 8008d48:	1949      	addeq	r1, r1, r5
 8008d4a:	6021      	streq	r1, [r4, #0]
 8008d4c:	e7ed      	b.n	8008d2a <_free_r+0x22>
 8008d4e:	461a      	mov	r2, r3
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	b10b      	cbz	r3, 8008d58 <_free_r+0x50>
 8008d54:	42a3      	cmp	r3, r4
 8008d56:	d9fa      	bls.n	8008d4e <_free_r+0x46>
 8008d58:	6811      	ldr	r1, [r2, #0]
 8008d5a:	1855      	adds	r5, r2, r1
 8008d5c:	42a5      	cmp	r5, r4
 8008d5e:	d10b      	bne.n	8008d78 <_free_r+0x70>
 8008d60:	6824      	ldr	r4, [r4, #0]
 8008d62:	4421      	add	r1, r4
 8008d64:	1854      	adds	r4, r2, r1
 8008d66:	42a3      	cmp	r3, r4
 8008d68:	6011      	str	r1, [r2, #0]
 8008d6a:	d1e0      	bne.n	8008d2e <_free_r+0x26>
 8008d6c:	681c      	ldr	r4, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	6053      	str	r3, [r2, #4]
 8008d72:	4421      	add	r1, r4
 8008d74:	6011      	str	r1, [r2, #0]
 8008d76:	e7da      	b.n	8008d2e <_free_r+0x26>
 8008d78:	d902      	bls.n	8008d80 <_free_r+0x78>
 8008d7a:	230c      	movs	r3, #12
 8008d7c:	6003      	str	r3, [r0, #0]
 8008d7e:	e7d6      	b.n	8008d2e <_free_r+0x26>
 8008d80:	6825      	ldr	r5, [r4, #0]
 8008d82:	1961      	adds	r1, r4, r5
 8008d84:	428b      	cmp	r3, r1
 8008d86:	bf04      	itt	eq
 8008d88:	6819      	ldreq	r1, [r3, #0]
 8008d8a:	685b      	ldreq	r3, [r3, #4]
 8008d8c:	6063      	str	r3, [r4, #4]
 8008d8e:	bf04      	itt	eq
 8008d90:	1949      	addeq	r1, r1, r5
 8008d92:	6021      	streq	r1, [r4, #0]
 8008d94:	6054      	str	r4, [r2, #4]
 8008d96:	e7ca      	b.n	8008d2e <_free_r+0x26>
 8008d98:	b003      	add	sp, #12
 8008d9a:	bd30      	pop	{r4, r5, pc}
 8008d9c:	20000ee0 	.word	0x20000ee0

08008da0 <sbrk_aligned>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	4e0e      	ldr	r6, [pc, #56]	; (8008ddc <sbrk_aligned+0x3c>)
 8008da4:	460c      	mov	r4, r1
 8008da6:	6831      	ldr	r1, [r6, #0]
 8008da8:	4605      	mov	r5, r0
 8008daa:	b911      	cbnz	r1, 8008db2 <sbrk_aligned+0x12>
 8008dac:	f001 f8b2 	bl	8009f14 <_sbrk_r>
 8008db0:	6030      	str	r0, [r6, #0]
 8008db2:	4621      	mov	r1, r4
 8008db4:	4628      	mov	r0, r5
 8008db6:	f001 f8ad 	bl	8009f14 <_sbrk_r>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d00a      	beq.n	8008dd4 <sbrk_aligned+0x34>
 8008dbe:	1cc4      	adds	r4, r0, #3
 8008dc0:	f024 0403 	bic.w	r4, r4, #3
 8008dc4:	42a0      	cmp	r0, r4
 8008dc6:	d007      	beq.n	8008dd8 <sbrk_aligned+0x38>
 8008dc8:	1a21      	subs	r1, r4, r0
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f001 f8a2 	bl	8009f14 <_sbrk_r>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d101      	bne.n	8008dd8 <sbrk_aligned+0x38>
 8008dd4:	f04f 34ff 	mov.w	r4, #4294967295
 8008dd8:	4620      	mov	r0, r4
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	20000ee4 	.word	0x20000ee4

08008de0 <_malloc_r>:
 8008de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de4:	1ccd      	adds	r5, r1, #3
 8008de6:	f025 0503 	bic.w	r5, r5, #3
 8008dea:	3508      	adds	r5, #8
 8008dec:	2d0c      	cmp	r5, #12
 8008dee:	bf38      	it	cc
 8008df0:	250c      	movcc	r5, #12
 8008df2:	2d00      	cmp	r5, #0
 8008df4:	4607      	mov	r7, r0
 8008df6:	db01      	blt.n	8008dfc <_malloc_r+0x1c>
 8008df8:	42a9      	cmp	r1, r5
 8008dfa:	d905      	bls.n	8008e08 <_malloc_r+0x28>
 8008dfc:	230c      	movs	r3, #12
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	2600      	movs	r6, #0
 8008e02:	4630      	mov	r0, r6
 8008e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e08:	4e2e      	ldr	r6, [pc, #184]	; (8008ec4 <_malloc_r+0xe4>)
 8008e0a:	f003 fb0d 	bl	800c428 <__malloc_lock>
 8008e0e:	6833      	ldr	r3, [r6, #0]
 8008e10:	461c      	mov	r4, r3
 8008e12:	bb34      	cbnz	r4, 8008e62 <_malloc_r+0x82>
 8008e14:	4629      	mov	r1, r5
 8008e16:	4638      	mov	r0, r7
 8008e18:	f7ff ffc2 	bl	8008da0 <sbrk_aligned>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	4604      	mov	r4, r0
 8008e20:	d14d      	bne.n	8008ebe <_malloc_r+0xde>
 8008e22:	6834      	ldr	r4, [r6, #0]
 8008e24:	4626      	mov	r6, r4
 8008e26:	2e00      	cmp	r6, #0
 8008e28:	d140      	bne.n	8008eac <_malloc_r+0xcc>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4638      	mov	r0, r7
 8008e30:	eb04 0803 	add.w	r8, r4, r3
 8008e34:	f001 f86e 	bl	8009f14 <_sbrk_r>
 8008e38:	4580      	cmp	r8, r0
 8008e3a:	d13a      	bne.n	8008eb2 <_malloc_r+0xd2>
 8008e3c:	6821      	ldr	r1, [r4, #0]
 8008e3e:	3503      	adds	r5, #3
 8008e40:	1a6d      	subs	r5, r5, r1
 8008e42:	f025 0503 	bic.w	r5, r5, #3
 8008e46:	3508      	adds	r5, #8
 8008e48:	2d0c      	cmp	r5, #12
 8008e4a:	bf38      	it	cc
 8008e4c:	250c      	movcc	r5, #12
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff ffa5 	bl	8008da0 <sbrk_aligned>
 8008e56:	3001      	adds	r0, #1
 8008e58:	d02b      	beq.n	8008eb2 <_malloc_r+0xd2>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	442b      	add	r3, r5
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	e00e      	b.n	8008e80 <_malloc_r+0xa0>
 8008e62:	6822      	ldr	r2, [r4, #0]
 8008e64:	1b52      	subs	r2, r2, r5
 8008e66:	d41e      	bmi.n	8008ea6 <_malloc_r+0xc6>
 8008e68:	2a0b      	cmp	r2, #11
 8008e6a:	d916      	bls.n	8008e9a <_malloc_r+0xba>
 8008e6c:	1961      	adds	r1, r4, r5
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	6025      	str	r5, [r4, #0]
 8008e72:	bf18      	it	ne
 8008e74:	6059      	strne	r1, [r3, #4]
 8008e76:	6863      	ldr	r3, [r4, #4]
 8008e78:	bf08      	it	eq
 8008e7a:	6031      	streq	r1, [r6, #0]
 8008e7c:	5162      	str	r2, [r4, r5]
 8008e7e:	604b      	str	r3, [r1, #4]
 8008e80:	4638      	mov	r0, r7
 8008e82:	f104 060b 	add.w	r6, r4, #11
 8008e86:	f003 fad5 	bl	800c434 <__malloc_unlock>
 8008e8a:	f026 0607 	bic.w	r6, r6, #7
 8008e8e:	1d23      	adds	r3, r4, #4
 8008e90:	1af2      	subs	r2, r6, r3
 8008e92:	d0b6      	beq.n	8008e02 <_malloc_r+0x22>
 8008e94:	1b9b      	subs	r3, r3, r6
 8008e96:	50a3      	str	r3, [r4, r2]
 8008e98:	e7b3      	b.n	8008e02 <_malloc_r+0x22>
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	bf0c      	ite	eq
 8008ea0:	6032      	streq	r2, [r6, #0]
 8008ea2:	605a      	strne	r2, [r3, #4]
 8008ea4:	e7ec      	b.n	8008e80 <_malloc_r+0xa0>
 8008ea6:	4623      	mov	r3, r4
 8008ea8:	6864      	ldr	r4, [r4, #4]
 8008eaa:	e7b2      	b.n	8008e12 <_malloc_r+0x32>
 8008eac:	4634      	mov	r4, r6
 8008eae:	6876      	ldr	r6, [r6, #4]
 8008eb0:	e7b9      	b.n	8008e26 <_malloc_r+0x46>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	603b      	str	r3, [r7, #0]
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	f003 fabc 	bl	800c434 <__malloc_unlock>
 8008ebc:	e7a1      	b.n	8008e02 <_malloc_r+0x22>
 8008ebe:	6025      	str	r5, [r4, #0]
 8008ec0:	e7de      	b.n	8008e80 <_malloc_r+0xa0>
 8008ec2:	bf00      	nop
 8008ec4:	20000ee0 	.word	0x20000ee0

08008ec8 <__sfputc_r>:
 8008ec8:	6893      	ldr	r3, [r2, #8]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	b410      	push	{r4}
 8008ed0:	6093      	str	r3, [r2, #8]
 8008ed2:	da08      	bge.n	8008ee6 <__sfputc_r+0x1e>
 8008ed4:	6994      	ldr	r4, [r2, #24]
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	db01      	blt.n	8008ede <__sfputc_r+0x16>
 8008eda:	290a      	cmp	r1, #10
 8008edc:	d103      	bne.n	8008ee6 <__sfputc_r+0x1e>
 8008ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee2:	f001 bf3d 	b.w	800ad60 <__swbuf_r>
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	1c58      	adds	r0, r3, #1
 8008eea:	6010      	str	r0, [r2, #0]
 8008eec:	7019      	strb	r1, [r3, #0]
 8008eee:	4608      	mov	r0, r1
 8008ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <__sfputs_r>:
 8008ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef8:	4606      	mov	r6, r0
 8008efa:	460f      	mov	r7, r1
 8008efc:	4614      	mov	r4, r2
 8008efe:	18d5      	adds	r5, r2, r3
 8008f00:	42ac      	cmp	r4, r5
 8008f02:	d101      	bne.n	8008f08 <__sfputs_r+0x12>
 8008f04:	2000      	movs	r0, #0
 8008f06:	e007      	b.n	8008f18 <__sfputs_r+0x22>
 8008f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0c:	463a      	mov	r2, r7
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7ff ffda 	bl	8008ec8 <__sfputc_r>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d1f3      	bne.n	8008f00 <__sfputs_r+0xa>
 8008f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f1c <_vfiprintf_r>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	460d      	mov	r5, r1
 8008f22:	b09d      	sub	sp, #116	; 0x74
 8008f24:	4614      	mov	r4, r2
 8008f26:	4698      	mov	r8, r3
 8008f28:	4606      	mov	r6, r0
 8008f2a:	b118      	cbz	r0, 8008f34 <_vfiprintf_r+0x18>
 8008f2c:	6983      	ldr	r3, [r0, #24]
 8008f2e:	b90b      	cbnz	r3, 8008f34 <_vfiprintf_r+0x18>
 8008f30:	f7ff fd0e 	bl	8008950 <__sinit>
 8008f34:	4b89      	ldr	r3, [pc, #548]	; (800915c <_vfiprintf_r+0x240>)
 8008f36:	429d      	cmp	r5, r3
 8008f38:	d11b      	bne.n	8008f72 <_vfiprintf_r+0x56>
 8008f3a:	6875      	ldr	r5, [r6, #4]
 8008f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f3e:	07d9      	lsls	r1, r3, #31
 8008f40:	d405      	bmi.n	8008f4e <_vfiprintf_r+0x32>
 8008f42:	89ab      	ldrh	r3, [r5, #12]
 8008f44:	059a      	lsls	r2, r3, #22
 8008f46:	d402      	bmi.n	8008f4e <_vfiprintf_r+0x32>
 8008f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f4a:	f7ff fe84 	bl	8008c56 <__retarget_lock_acquire_recursive>
 8008f4e:	89ab      	ldrh	r3, [r5, #12]
 8008f50:	071b      	lsls	r3, r3, #28
 8008f52:	d501      	bpl.n	8008f58 <_vfiprintf_r+0x3c>
 8008f54:	692b      	ldr	r3, [r5, #16]
 8008f56:	b9eb      	cbnz	r3, 8008f94 <_vfiprintf_r+0x78>
 8008f58:	4629      	mov	r1, r5
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f001 ff64 	bl	800ae28 <__swsetup_r>
 8008f60:	b1c0      	cbz	r0, 8008f94 <_vfiprintf_r+0x78>
 8008f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f64:	07dc      	lsls	r4, r3, #31
 8008f66:	d50e      	bpl.n	8008f86 <_vfiprintf_r+0x6a>
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	b01d      	add	sp, #116	; 0x74
 8008f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f72:	4b7b      	ldr	r3, [pc, #492]	; (8009160 <_vfiprintf_r+0x244>)
 8008f74:	429d      	cmp	r5, r3
 8008f76:	d101      	bne.n	8008f7c <_vfiprintf_r+0x60>
 8008f78:	68b5      	ldr	r5, [r6, #8]
 8008f7a:	e7df      	b.n	8008f3c <_vfiprintf_r+0x20>
 8008f7c:	4b79      	ldr	r3, [pc, #484]	; (8009164 <_vfiprintf_r+0x248>)
 8008f7e:	429d      	cmp	r5, r3
 8008f80:	bf08      	it	eq
 8008f82:	68f5      	ldreq	r5, [r6, #12]
 8008f84:	e7da      	b.n	8008f3c <_vfiprintf_r+0x20>
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	0598      	lsls	r0, r3, #22
 8008f8a:	d4ed      	bmi.n	8008f68 <_vfiprintf_r+0x4c>
 8008f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f8e:	f7ff fe63 	bl	8008c58 <__retarget_lock_release_recursive>
 8008f92:	e7e9      	b.n	8008f68 <_vfiprintf_r+0x4c>
 8008f94:	2300      	movs	r3, #0
 8008f96:	9309      	str	r3, [sp, #36]	; 0x24
 8008f98:	2320      	movs	r3, #32
 8008f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fa2:	2330      	movs	r3, #48	; 0x30
 8008fa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009168 <_vfiprintf_r+0x24c>
 8008fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fac:	f04f 0901 	mov.w	r9, #1
 8008fb0:	4623      	mov	r3, r4
 8008fb2:	469a      	mov	sl, r3
 8008fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb8:	b10a      	cbz	r2, 8008fbe <_vfiprintf_r+0xa2>
 8008fba:	2a25      	cmp	r2, #37	; 0x25
 8008fbc:	d1f9      	bne.n	8008fb2 <_vfiprintf_r+0x96>
 8008fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8008fc2:	d00b      	beq.n	8008fdc <_vfiprintf_r+0xc0>
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ff93 	bl	8008ef6 <__sfputs_r>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f000 80aa 	beq.w	800912a <_vfiprintf_r+0x20e>
 8008fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd8:	445a      	add	r2, fp
 8008fda:	9209      	str	r2, [sp, #36]	; 0x24
 8008fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 80a2 	beq.w	800912a <_vfiprintf_r+0x20e>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff0:	f10a 0a01 	add.w	sl, sl, #1
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	9307      	str	r3, [sp, #28]
 8008ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ffe:	4654      	mov	r4, sl
 8009000:	2205      	movs	r2, #5
 8009002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009006:	4858      	ldr	r0, [pc, #352]	; (8009168 <_vfiprintf_r+0x24c>)
 8009008:	f7f7 f8ea 	bl	80001e0 <memchr>
 800900c:	9a04      	ldr	r2, [sp, #16]
 800900e:	b9d8      	cbnz	r0, 8009048 <_vfiprintf_r+0x12c>
 8009010:	06d1      	lsls	r1, r2, #27
 8009012:	bf44      	itt	mi
 8009014:	2320      	movmi	r3, #32
 8009016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800901a:	0713      	lsls	r3, r2, #28
 800901c:	bf44      	itt	mi
 800901e:	232b      	movmi	r3, #43	; 0x2b
 8009020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009024:	f89a 3000 	ldrb.w	r3, [sl]
 8009028:	2b2a      	cmp	r3, #42	; 0x2a
 800902a:	d015      	beq.n	8009058 <_vfiprintf_r+0x13c>
 800902c:	9a07      	ldr	r2, [sp, #28]
 800902e:	4654      	mov	r4, sl
 8009030:	2000      	movs	r0, #0
 8009032:	f04f 0c0a 	mov.w	ip, #10
 8009036:	4621      	mov	r1, r4
 8009038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800903c:	3b30      	subs	r3, #48	; 0x30
 800903e:	2b09      	cmp	r3, #9
 8009040:	d94e      	bls.n	80090e0 <_vfiprintf_r+0x1c4>
 8009042:	b1b0      	cbz	r0, 8009072 <_vfiprintf_r+0x156>
 8009044:	9207      	str	r2, [sp, #28]
 8009046:	e014      	b.n	8009072 <_vfiprintf_r+0x156>
 8009048:	eba0 0308 	sub.w	r3, r0, r8
 800904c:	fa09 f303 	lsl.w	r3, r9, r3
 8009050:	4313      	orrs	r3, r2
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	46a2      	mov	sl, r4
 8009056:	e7d2      	b.n	8008ffe <_vfiprintf_r+0xe2>
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	1d19      	adds	r1, r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	9103      	str	r1, [sp, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfbb      	ittet	lt
 8009064:	425b      	neglt	r3, r3
 8009066:	f042 0202 	orrlt.w	r2, r2, #2
 800906a:	9307      	strge	r3, [sp, #28]
 800906c:	9307      	strlt	r3, [sp, #28]
 800906e:	bfb8      	it	lt
 8009070:	9204      	strlt	r2, [sp, #16]
 8009072:	7823      	ldrb	r3, [r4, #0]
 8009074:	2b2e      	cmp	r3, #46	; 0x2e
 8009076:	d10c      	bne.n	8009092 <_vfiprintf_r+0x176>
 8009078:	7863      	ldrb	r3, [r4, #1]
 800907a:	2b2a      	cmp	r3, #42	; 0x2a
 800907c:	d135      	bne.n	80090ea <_vfiprintf_r+0x1ce>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	1d1a      	adds	r2, r3, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	9203      	str	r2, [sp, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	bfb8      	it	lt
 800908a:	f04f 33ff 	movlt.w	r3, #4294967295
 800908e:	3402      	adds	r4, #2
 8009090:	9305      	str	r3, [sp, #20]
 8009092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009178 <_vfiprintf_r+0x25c>
 8009096:	7821      	ldrb	r1, [r4, #0]
 8009098:	2203      	movs	r2, #3
 800909a:	4650      	mov	r0, sl
 800909c:	f7f7 f8a0 	bl	80001e0 <memchr>
 80090a0:	b140      	cbz	r0, 80090b4 <_vfiprintf_r+0x198>
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	eba0 000a 	sub.w	r0, r0, sl
 80090a8:	fa03 f000 	lsl.w	r0, r3, r0
 80090ac:	9b04      	ldr	r3, [sp, #16]
 80090ae:	4303      	orrs	r3, r0
 80090b0:	3401      	adds	r4, #1
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b8:	482c      	ldr	r0, [pc, #176]	; (800916c <_vfiprintf_r+0x250>)
 80090ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090be:	2206      	movs	r2, #6
 80090c0:	f7f7 f88e 	bl	80001e0 <memchr>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d03f      	beq.n	8009148 <_vfiprintf_r+0x22c>
 80090c8:	4b29      	ldr	r3, [pc, #164]	; (8009170 <_vfiprintf_r+0x254>)
 80090ca:	bb1b      	cbnz	r3, 8009114 <_vfiprintf_r+0x1f8>
 80090cc:	9b03      	ldr	r3, [sp, #12]
 80090ce:	3307      	adds	r3, #7
 80090d0:	f023 0307 	bic.w	r3, r3, #7
 80090d4:	3308      	adds	r3, #8
 80090d6:	9303      	str	r3, [sp, #12]
 80090d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090da:	443b      	add	r3, r7
 80090dc:	9309      	str	r3, [sp, #36]	; 0x24
 80090de:	e767      	b.n	8008fb0 <_vfiprintf_r+0x94>
 80090e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80090e4:	460c      	mov	r4, r1
 80090e6:	2001      	movs	r0, #1
 80090e8:	e7a5      	b.n	8009036 <_vfiprintf_r+0x11a>
 80090ea:	2300      	movs	r3, #0
 80090ec:	3401      	adds	r4, #1
 80090ee:	9305      	str	r3, [sp, #20]
 80090f0:	4619      	mov	r1, r3
 80090f2:	f04f 0c0a 	mov.w	ip, #10
 80090f6:	4620      	mov	r0, r4
 80090f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090fc:	3a30      	subs	r2, #48	; 0x30
 80090fe:	2a09      	cmp	r2, #9
 8009100:	d903      	bls.n	800910a <_vfiprintf_r+0x1ee>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0c5      	beq.n	8009092 <_vfiprintf_r+0x176>
 8009106:	9105      	str	r1, [sp, #20]
 8009108:	e7c3      	b.n	8009092 <_vfiprintf_r+0x176>
 800910a:	fb0c 2101 	mla	r1, ip, r1, r2
 800910e:	4604      	mov	r4, r0
 8009110:	2301      	movs	r3, #1
 8009112:	e7f0      	b.n	80090f6 <_vfiprintf_r+0x1da>
 8009114:	ab03      	add	r3, sp, #12
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	462a      	mov	r2, r5
 800911a:	4b16      	ldr	r3, [pc, #88]	; (8009174 <_vfiprintf_r+0x258>)
 800911c:	a904      	add	r1, sp, #16
 800911e:	4630      	mov	r0, r6
 8009120:	f000 f8d6 	bl	80092d0 <_printf_float>
 8009124:	4607      	mov	r7, r0
 8009126:	1c78      	adds	r0, r7, #1
 8009128:	d1d6      	bne.n	80090d8 <_vfiprintf_r+0x1bc>
 800912a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800912c:	07d9      	lsls	r1, r3, #31
 800912e:	d405      	bmi.n	800913c <_vfiprintf_r+0x220>
 8009130:	89ab      	ldrh	r3, [r5, #12]
 8009132:	059a      	lsls	r2, r3, #22
 8009134:	d402      	bmi.n	800913c <_vfiprintf_r+0x220>
 8009136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009138:	f7ff fd8e 	bl	8008c58 <__retarget_lock_release_recursive>
 800913c:	89ab      	ldrh	r3, [r5, #12]
 800913e:	065b      	lsls	r3, r3, #25
 8009140:	f53f af12 	bmi.w	8008f68 <_vfiprintf_r+0x4c>
 8009144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009146:	e711      	b.n	8008f6c <_vfiprintf_r+0x50>
 8009148:	ab03      	add	r3, sp, #12
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	462a      	mov	r2, r5
 800914e:	4b09      	ldr	r3, [pc, #36]	; (8009174 <_vfiprintf_r+0x258>)
 8009150:	a904      	add	r1, sp, #16
 8009152:	4630      	mov	r0, r6
 8009154:	f000 fb60 	bl	8009818 <_printf_i>
 8009158:	e7e4      	b.n	8009124 <_vfiprintf_r+0x208>
 800915a:	bf00      	nop
 800915c:	0800f930 	.word	0x0800f930
 8009160:	0800f950 	.word	0x0800f950
 8009164:	0800f910 	.word	0x0800f910
 8009168:	0800f974 	.word	0x0800f974
 800916c:	0800f97e 	.word	0x0800f97e
 8009170:	080092d1 	.word	0x080092d1
 8009174:	08008ef7 	.word	0x08008ef7
 8009178:	0800f97a 	.word	0x0800f97a

0800917c <vfiprintf>:
 800917c:	4613      	mov	r3, r2
 800917e:	460a      	mov	r2, r1
 8009180:	4601      	mov	r1, r0
 8009182:	4802      	ldr	r0, [pc, #8]	; (800918c <vfiprintf+0x10>)
 8009184:	6800      	ldr	r0, [r0, #0]
 8009186:	f7ff bec9 	b.w	8008f1c <_vfiprintf_r>
 800918a:	bf00      	nop
 800918c:	2000000c 	.word	0x2000000c

08009190 <__cvt>:
 8009190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009194:	ec55 4b10 	vmov	r4, r5, d0
 8009198:	2d00      	cmp	r5, #0
 800919a:	460e      	mov	r6, r1
 800919c:	4619      	mov	r1, r3
 800919e:	462b      	mov	r3, r5
 80091a0:	bfbb      	ittet	lt
 80091a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091a6:	461d      	movlt	r5, r3
 80091a8:	2300      	movge	r3, #0
 80091aa:	232d      	movlt	r3, #45	; 0x2d
 80091ac:	700b      	strb	r3, [r1, #0]
 80091ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091b4:	4691      	mov	r9, r2
 80091b6:	f023 0820 	bic.w	r8, r3, #32
 80091ba:	bfbc      	itt	lt
 80091bc:	4622      	movlt	r2, r4
 80091be:	4614      	movlt	r4, r2
 80091c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091c4:	d005      	beq.n	80091d2 <__cvt+0x42>
 80091c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80091ca:	d100      	bne.n	80091ce <__cvt+0x3e>
 80091cc:	3601      	adds	r6, #1
 80091ce:	2102      	movs	r1, #2
 80091d0:	e000      	b.n	80091d4 <__cvt+0x44>
 80091d2:	2103      	movs	r1, #3
 80091d4:	ab03      	add	r3, sp, #12
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	ab02      	add	r3, sp, #8
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	ec45 4b10 	vmov	d0, r4, r5
 80091e0:	4653      	mov	r3, sl
 80091e2:	4632      	mov	r2, r6
 80091e4:	f001 ff34 	bl	800b050 <_dtoa_r>
 80091e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80091ec:	4607      	mov	r7, r0
 80091ee:	d102      	bne.n	80091f6 <__cvt+0x66>
 80091f0:	f019 0f01 	tst.w	r9, #1
 80091f4:	d022      	beq.n	800923c <__cvt+0xac>
 80091f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091fa:	eb07 0906 	add.w	r9, r7, r6
 80091fe:	d110      	bne.n	8009222 <__cvt+0x92>
 8009200:	783b      	ldrb	r3, [r7, #0]
 8009202:	2b30      	cmp	r3, #48	; 0x30
 8009204:	d10a      	bne.n	800921c <__cvt+0x8c>
 8009206:	2200      	movs	r2, #0
 8009208:	2300      	movs	r3, #0
 800920a:	4620      	mov	r0, r4
 800920c:	4629      	mov	r1, r5
 800920e:	f7f7 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009212:	b918      	cbnz	r0, 800921c <__cvt+0x8c>
 8009214:	f1c6 0601 	rsb	r6, r6, #1
 8009218:	f8ca 6000 	str.w	r6, [sl]
 800921c:	f8da 3000 	ldr.w	r3, [sl]
 8009220:	4499      	add	r9, r3
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800922e:	b108      	cbz	r0, 8009234 <__cvt+0xa4>
 8009230:	f8cd 900c 	str.w	r9, [sp, #12]
 8009234:	2230      	movs	r2, #48	; 0x30
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	454b      	cmp	r3, r9
 800923a:	d307      	bcc.n	800924c <__cvt+0xbc>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009240:	1bdb      	subs	r3, r3, r7
 8009242:	4638      	mov	r0, r7
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	b004      	add	sp, #16
 8009248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924c:	1c59      	adds	r1, r3, #1
 800924e:	9103      	str	r1, [sp, #12]
 8009250:	701a      	strb	r2, [r3, #0]
 8009252:	e7f0      	b.n	8009236 <__cvt+0xa6>

08009254 <__exponent>:
 8009254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009256:	4603      	mov	r3, r0
 8009258:	2900      	cmp	r1, #0
 800925a:	bfb8      	it	lt
 800925c:	4249      	neglt	r1, r1
 800925e:	f803 2b02 	strb.w	r2, [r3], #2
 8009262:	bfb4      	ite	lt
 8009264:	222d      	movlt	r2, #45	; 0x2d
 8009266:	222b      	movge	r2, #43	; 0x2b
 8009268:	2909      	cmp	r1, #9
 800926a:	7042      	strb	r2, [r0, #1]
 800926c:	dd2a      	ble.n	80092c4 <__exponent+0x70>
 800926e:	f10d 0407 	add.w	r4, sp, #7
 8009272:	46a4      	mov	ip, r4
 8009274:	270a      	movs	r7, #10
 8009276:	46a6      	mov	lr, r4
 8009278:	460a      	mov	r2, r1
 800927a:	fb91 f6f7 	sdiv	r6, r1, r7
 800927e:	fb07 1516 	mls	r5, r7, r6, r1
 8009282:	3530      	adds	r5, #48	; 0x30
 8009284:	2a63      	cmp	r2, #99	; 0x63
 8009286:	f104 34ff 	add.w	r4, r4, #4294967295
 800928a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800928e:	4631      	mov	r1, r6
 8009290:	dcf1      	bgt.n	8009276 <__exponent+0x22>
 8009292:	3130      	adds	r1, #48	; 0x30
 8009294:	f1ae 0502 	sub.w	r5, lr, #2
 8009298:	f804 1c01 	strb.w	r1, [r4, #-1]
 800929c:	1c44      	adds	r4, r0, #1
 800929e:	4629      	mov	r1, r5
 80092a0:	4561      	cmp	r1, ip
 80092a2:	d30a      	bcc.n	80092ba <__exponent+0x66>
 80092a4:	f10d 0209 	add.w	r2, sp, #9
 80092a8:	eba2 020e 	sub.w	r2, r2, lr
 80092ac:	4565      	cmp	r5, ip
 80092ae:	bf88      	it	hi
 80092b0:	2200      	movhi	r2, #0
 80092b2:	4413      	add	r3, r2
 80092b4:	1a18      	subs	r0, r3, r0
 80092b6:	b003      	add	sp, #12
 80092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80092c2:	e7ed      	b.n	80092a0 <__exponent+0x4c>
 80092c4:	2330      	movs	r3, #48	; 0x30
 80092c6:	3130      	adds	r1, #48	; 0x30
 80092c8:	7083      	strb	r3, [r0, #2]
 80092ca:	70c1      	strb	r1, [r0, #3]
 80092cc:	1d03      	adds	r3, r0, #4
 80092ce:	e7f1      	b.n	80092b4 <__exponent+0x60>

080092d0 <_printf_float>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	ed2d 8b02 	vpush	{d8}
 80092d8:	b08d      	sub	sp, #52	; 0x34
 80092da:	460c      	mov	r4, r1
 80092dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80092e0:	4616      	mov	r6, r2
 80092e2:	461f      	mov	r7, r3
 80092e4:	4605      	mov	r5, r0
 80092e6:	f003 f811 	bl	800c30c <_localeconv_r>
 80092ea:	f8d0 a000 	ldr.w	sl, [r0]
 80092ee:	4650      	mov	r0, sl
 80092f0:	f7f6 ff6e 	bl	80001d0 <strlen>
 80092f4:	2300      	movs	r3, #0
 80092f6:	930a      	str	r3, [sp, #40]	; 0x28
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009300:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009304:	3307      	adds	r3, #7
 8009306:	f023 0307 	bic.w	r3, r3, #7
 800930a:	f103 0208 	add.w	r2, r3, #8
 800930e:	f8c8 2000 	str.w	r2, [r8]
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800931a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800931e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009322:	9307      	str	r3, [sp, #28]
 8009324:	f8cd 8018 	str.w	r8, [sp, #24]
 8009328:	ee08 0a10 	vmov	s16, r0
 800932c:	4b9f      	ldr	r3, [pc, #636]	; (80095ac <_printf_float+0x2dc>)
 800932e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009332:	f04f 32ff 	mov.w	r2, #4294967295
 8009336:	f7f7 fbf9 	bl	8000b2c <__aeabi_dcmpun>
 800933a:	bb88      	cbnz	r0, 80093a0 <_printf_float+0xd0>
 800933c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009340:	4b9a      	ldr	r3, [pc, #616]	; (80095ac <_printf_float+0x2dc>)
 8009342:	f04f 32ff 	mov.w	r2, #4294967295
 8009346:	f7f7 fbd3 	bl	8000af0 <__aeabi_dcmple>
 800934a:	bb48      	cbnz	r0, 80093a0 <_printf_float+0xd0>
 800934c:	2200      	movs	r2, #0
 800934e:	2300      	movs	r3, #0
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	f7f7 fbc2 	bl	8000adc <__aeabi_dcmplt>
 8009358:	b110      	cbz	r0, 8009360 <_printf_float+0x90>
 800935a:	232d      	movs	r3, #45	; 0x2d
 800935c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009360:	4b93      	ldr	r3, [pc, #588]	; (80095b0 <_printf_float+0x2e0>)
 8009362:	4894      	ldr	r0, [pc, #592]	; (80095b4 <_printf_float+0x2e4>)
 8009364:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009368:	bf94      	ite	ls
 800936a:	4698      	movls	r8, r3
 800936c:	4680      	movhi	r8, r0
 800936e:	2303      	movs	r3, #3
 8009370:	6123      	str	r3, [r4, #16]
 8009372:	9b05      	ldr	r3, [sp, #20]
 8009374:	f023 0204 	bic.w	r2, r3, #4
 8009378:	6022      	str	r2, [r4, #0]
 800937a:	f04f 0900 	mov.w	r9, #0
 800937e:	9700      	str	r7, [sp, #0]
 8009380:	4633      	mov	r3, r6
 8009382:	aa0b      	add	r2, sp, #44	; 0x2c
 8009384:	4621      	mov	r1, r4
 8009386:	4628      	mov	r0, r5
 8009388:	f000 f9d8 	bl	800973c <_printf_common>
 800938c:	3001      	adds	r0, #1
 800938e:	f040 8090 	bne.w	80094b2 <_printf_float+0x1e2>
 8009392:	f04f 30ff 	mov.w	r0, #4294967295
 8009396:	b00d      	add	sp, #52	; 0x34
 8009398:	ecbd 8b02 	vpop	{d8}
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	4640      	mov	r0, r8
 80093a6:	4649      	mov	r1, r9
 80093a8:	f7f7 fbc0 	bl	8000b2c <__aeabi_dcmpun>
 80093ac:	b140      	cbz	r0, 80093c0 <_printf_float+0xf0>
 80093ae:	464b      	mov	r3, r9
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bfbc      	itt	lt
 80093b4:	232d      	movlt	r3, #45	; 0x2d
 80093b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80093ba:	487f      	ldr	r0, [pc, #508]	; (80095b8 <_printf_float+0x2e8>)
 80093bc:	4b7f      	ldr	r3, [pc, #508]	; (80095bc <_printf_float+0x2ec>)
 80093be:	e7d1      	b.n	8009364 <_printf_float+0x94>
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80093c6:	9206      	str	r2, [sp, #24]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	d13f      	bne.n	800944c <_printf_float+0x17c>
 80093cc:	2306      	movs	r3, #6
 80093ce:	6063      	str	r3, [r4, #4]
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	6861      	ldr	r1, [r4, #4]
 80093d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80093d8:	2300      	movs	r3, #0
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	ab0a      	add	r3, sp, #40	; 0x28
 80093de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80093e2:	ab09      	add	r3, sp, #36	; 0x24
 80093e4:	ec49 8b10 	vmov	d0, r8, r9
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	6022      	str	r2, [r4, #0]
 80093ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093f0:	4628      	mov	r0, r5
 80093f2:	f7ff fecd 	bl	8009190 <__cvt>
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093fa:	2b47      	cmp	r3, #71	; 0x47
 80093fc:	4680      	mov	r8, r0
 80093fe:	d108      	bne.n	8009412 <_printf_float+0x142>
 8009400:	1cc8      	adds	r0, r1, #3
 8009402:	db02      	blt.n	800940a <_printf_float+0x13a>
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	4299      	cmp	r1, r3
 8009408:	dd41      	ble.n	800948e <_printf_float+0x1be>
 800940a:	f1ab 0b02 	sub.w	fp, fp, #2
 800940e:	fa5f fb8b 	uxtb.w	fp, fp
 8009412:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009416:	d820      	bhi.n	800945a <_printf_float+0x18a>
 8009418:	3901      	subs	r1, #1
 800941a:	465a      	mov	r2, fp
 800941c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009420:	9109      	str	r1, [sp, #36]	; 0x24
 8009422:	f7ff ff17 	bl	8009254 <__exponent>
 8009426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009428:	1813      	adds	r3, r2, r0
 800942a:	2a01      	cmp	r2, #1
 800942c:	4681      	mov	r9, r0
 800942e:	6123      	str	r3, [r4, #16]
 8009430:	dc02      	bgt.n	8009438 <_printf_float+0x168>
 8009432:	6822      	ldr	r2, [r4, #0]
 8009434:	07d2      	lsls	r2, r2, #31
 8009436:	d501      	bpl.n	800943c <_printf_float+0x16c>
 8009438:	3301      	adds	r3, #1
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009440:	2b00      	cmp	r3, #0
 8009442:	d09c      	beq.n	800937e <_printf_float+0xae>
 8009444:	232d      	movs	r3, #45	; 0x2d
 8009446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944a:	e798      	b.n	800937e <_printf_float+0xae>
 800944c:	9a06      	ldr	r2, [sp, #24]
 800944e:	2a47      	cmp	r2, #71	; 0x47
 8009450:	d1be      	bne.n	80093d0 <_printf_float+0x100>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1bc      	bne.n	80093d0 <_printf_float+0x100>
 8009456:	2301      	movs	r3, #1
 8009458:	e7b9      	b.n	80093ce <_printf_float+0xfe>
 800945a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800945e:	d118      	bne.n	8009492 <_printf_float+0x1c2>
 8009460:	2900      	cmp	r1, #0
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	dd0b      	ble.n	800947e <_printf_float+0x1ae>
 8009466:	6121      	str	r1, [r4, #16]
 8009468:	b913      	cbnz	r3, 8009470 <_printf_float+0x1a0>
 800946a:	6822      	ldr	r2, [r4, #0]
 800946c:	07d0      	lsls	r0, r2, #31
 800946e:	d502      	bpl.n	8009476 <_printf_float+0x1a6>
 8009470:	3301      	adds	r3, #1
 8009472:	440b      	add	r3, r1
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	65a1      	str	r1, [r4, #88]	; 0x58
 8009478:	f04f 0900 	mov.w	r9, #0
 800947c:	e7de      	b.n	800943c <_printf_float+0x16c>
 800947e:	b913      	cbnz	r3, 8009486 <_printf_float+0x1b6>
 8009480:	6822      	ldr	r2, [r4, #0]
 8009482:	07d2      	lsls	r2, r2, #31
 8009484:	d501      	bpl.n	800948a <_printf_float+0x1ba>
 8009486:	3302      	adds	r3, #2
 8009488:	e7f4      	b.n	8009474 <_printf_float+0x1a4>
 800948a:	2301      	movs	r3, #1
 800948c:	e7f2      	b.n	8009474 <_printf_float+0x1a4>
 800948e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	4299      	cmp	r1, r3
 8009496:	db05      	blt.n	80094a4 <_printf_float+0x1d4>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	6121      	str	r1, [r4, #16]
 800949c:	07d8      	lsls	r0, r3, #31
 800949e:	d5ea      	bpl.n	8009476 <_printf_float+0x1a6>
 80094a0:	1c4b      	adds	r3, r1, #1
 80094a2:	e7e7      	b.n	8009474 <_printf_float+0x1a4>
 80094a4:	2900      	cmp	r1, #0
 80094a6:	bfd4      	ite	le
 80094a8:	f1c1 0202 	rsble	r2, r1, #2
 80094ac:	2201      	movgt	r2, #1
 80094ae:	4413      	add	r3, r2
 80094b0:	e7e0      	b.n	8009474 <_printf_float+0x1a4>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	055a      	lsls	r2, r3, #21
 80094b6:	d407      	bmi.n	80094c8 <_printf_float+0x1f8>
 80094b8:	6923      	ldr	r3, [r4, #16]
 80094ba:	4642      	mov	r2, r8
 80094bc:	4631      	mov	r1, r6
 80094be:	4628      	mov	r0, r5
 80094c0:	47b8      	blx	r7
 80094c2:	3001      	adds	r0, #1
 80094c4:	d12c      	bne.n	8009520 <_printf_float+0x250>
 80094c6:	e764      	b.n	8009392 <_printf_float+0xc2>
 80094c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094cc:	f240 80e0 	bls.w	8009690 <_printf_float+0x3c0>
 80094d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094d4:	2200      	movs	r2, #0
 80094d6:	2300      	movs	r3, #0
 80094d8:	f7f7 faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d034      	beq.n	800954a <_printf_float+0x27a>
 80094e0:	4a37      	ldr	r2, [pc, #220]	; (80095c0 <_printf_float+0x2f0>)
 80094e2:	2301      	movs	r3, #1
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b8      	blx	r7
 80094ea:	3001      	adds	r0, #1
 80094ec:	f43f af51 	beq.w	8009392 <_printf_float+0xc2>
 80094f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f4:	429a      	cmp	r2, r3
 80094f6:	db02      	blt.n	80094fe <_printf_float+0x22e>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	07d8      	lsls	r0, r3, #31
 80094fc:	d510      	bpl.n	8009520 <_printf_float+0x250>
 80094fe:	ee18 3a10 	vmov	r3, s16
 8009502:	4652      	mov	r2, sl
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	f43f af41 	beq.w	8009392 <_printf_float+0xc2>
 8009510:	f04f 0800 	mov.w	r8, #0
 8009514:	f104 091a 	add.w	r9, r4, #26
 8009518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800951a:	3b01      	subs	r3, #1
 800951c:	4543      	cmp	r3, r8
 800951e:	dc09      	bgt.n	8009534 <_printf_float+0x264>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	079b      	lsls	r3, r3, #30
 8009524:	f100 8105 	bmi.w	8009732 <_printf_float+0x462>
 8009528:	68e0      	ldr	r0, [r4, #12]
 800952a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800952c:	4298      	cmp	r0, r3
 800952e:	bfb8      	it	lt
 8009530:	4618      	movlt	r0, r3
 8009532:	e730      	b.n	8009396 <_printf_float+0xc6>
 8009534:	2301      	movs	r3, #1
 8009536:	464a      	mov	r2, r9
 8009538:	4631      	mov	r1, r6
 800953a:	4628      	mov	r0, r5
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	f43f af27 	beq.w	8009392 <_printf_float+0xc2>
 8009544:	f108 0801 	add.w	r8, r8, #1
 8009548:	e7e6      	b.n	8009518 <_printf_float+0x248>
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	dc39      	bgt.n	80095c4 <_printf_float+0x2f4>
 8009550:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <_printf_float+0x2f0>)
 8009552:	2301      	movs	r3, #1
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	f43f af19 	beq.w	8009392 <_printf_float+0xc2>
 8009560:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009564:	4313      	orrs	r3, r2
 8009566:	d102      	bne.n	800956e <_printf_float+0x29e>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	07d9      	lsls	r1, r3, #31
 800956c:	d5d8      	bpl.n	8009520 <_printf_float+0x250>
 800956e:	ee18 3a10 	vmov	r3, s16
 8009572:	4652      	mov	r2, sl
 8009574:	4631      	mov	r1, r6
 8009576:	4628      	mov	r0, r5
 8009578:	47b8      	blx	r7
 800957a:	3001      	adds	r0, #1
 800957c:	f43f af09 	beq.w	8009392 <_printf_float+0xc2>
 8009580:	f04f 0900 	mov.w	r9, #0
 8009584:	f104 0a1a 	add.w	sl, r4, #26
 8009588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958a:	425b      	negs	r3, r3
 800958c:	454b      	cmp	r3, r9
 800958e:	dc01      	bgt.n	8009594 <_printf_float+0x2c4>
 8009590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009592:	e792      	b.n	80094ba <_printf_float+0x1ea>
 8009594:	2301      	movs	r3, #1
 8009596:	4652      	mov	r2, sl
 8009598:	4631      	mov	r1, r6
 800959a:	4628      	mov	r0, r5
 800959c:	47b8      	blx	r7
 800959e:	3001      	adds	r0, #1
 80095a0:	f43f aef7 	beq.w	8009392 <_printf_float+0xc2>
 80095a4:	f109 0901 	add.w	r9, r9, #1
 80095a8:	e7ee      	b.n	8009588 <_printf_float+0x2b8>
 80095aa:	bf00      	nop
 80095ac:	7fefffff 	.word	0x7fefffff
 80095b0:	0800f985 	.word	0x0800f985
 80095b4:	0800f989 	.word	0x0800f989
 80095b8:	0800f991 	.word	0x0800f991
 80095bc:	0800f98d 	.word	0x0800f98d
 80095c0:	0800f995 	.word	0x0800f995
 80095c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095c8:	429a      	cmp	r2, r3
 80095ca:	bfa8      	it	ge
 80095cc:	461a      	movge	r2, r3
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	4691      	mov	r9, r2
 80095d2:	dc37      	bgt.n	8009644 <_printf_float+0x374>
 80095d4:	f04f 0b00 	mov.w	fp, #0
 80095d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095dc:	f104 021a 	add.w	r2, r4, #26
 80095e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095e2:	9305      	str	r3, [sp, #20]
 80095e4:	eba3 0309 	sub.w	r3, r3, r9
 80095e8:	455b      	cmp	r3, fp
 80095ea:	dc33      	bgt.n	8009654 <_printf_float+0x384>
 80095ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095f0:	429a      	cmp	r2, r3
 80095f2:	db3b      	blt.n	800966c <_printf_float+0x39c>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	07da      	lsls	r2, r3, #31
 80095f8:	d438      	bmi.n	800966c <_printf_float+0x39c>
 80095fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fc:	9a05      	ldr	r2, [sp, #20]
 80095fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009600:	1a9a      	subs	r2, r3, r2
 8009602:	eba3 0901 	sub.w	r9, r3, r1
 8009606:	4591      	cmp	r9, r2
 8009608:	bfa8      	it	ge
 800960a:	4691      	movge	r9, r2
 800960c:	f1b9 0f00 	cmp.w	r9, #0
 8009610:	dc35      	bgt.n	800967e <_printf_float+0x3ae>
 8009612:	f04f 0800 	mov.w	r8, #0
 8009616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800961a:	f104 0a1a 	add.w	sl, r4, #26
 800961e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009622:	1a9b      	subs	r3, r3, r2
 8009624:	eba3 0309 	sub.w	r3, r3, r9
 8009628:	4543      	cmp	r3, r8
 800962a:	f77f af79 	ble.w	8009520 <_printf_float+0x250>
 800962e:	2301      	movs	r3, #1
 8009630:	4652      	mov	r2, sl
 8009632:	4631      	mov	r1, r6
 8009634:	4628      	mov	r0, r5
 8009636:	47b8      	blx	r7
 8009638:	3001      	adds	r0, #1
 800963a:	f43f aeaa 	beq.w	8009392 <_printf_float+0xc2>
 800963e:	f108 0801 	add.w	r8, r8, #1
 8009642:	e7ec      	b.n	800961e <_printf_float+0x34e>
 8009644:	4613      	mov	r3, r2
 8009646:	4631      	mov	r1, r6
 8009648:	4642      	mov	r2, r8
 800964a:	4628      	mov	r0, r5
 800964c:	47b8      	blx	r7
 800964e:	3001      	adds	r0, #1
 8009650:	d1c0      	bne.n	80095d4 <_printf_float+0x304>
 8009652:	e69e      	b.n	8009392 <_printf_float+0xc2>
 8009654:	2301      	movs	r3, #1
 8009656:	4631      	mov	r1, r6
 8009658:	4628      	mov	r0, r5
 800965a:	9205      	str	r2, [sp, #20]
 800965c:	47b8      	blx	r7
 800965e:	3001      	adds	r0, #1
 8009660:	f43f ae97 	beq.w	8009392 <_printf_float+0xc2>
 8009664:	9a05      	ldr	r2, [sp, #20]
 8009666:	f10b 0b01 	add.w	fp, fp, #1
 800966a:	e7b9      	b.n	80095e0 <_printf_float+0x310>
 800966c:	ee18 3a10 	vmov	r3, s16
 8009670:	4652      	mov	r2, sl
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	d1be      	bne.n	80095fa <_printf_float+0x32a>
 800967c:	e689      	b.n	8009392 <_printf_float+0xc2>
 800967e:	9a05      	ldr	r2, [sp, #20]
 8009680:	464b      	mov	r3, r9
 8009682:	4442      	add	r2, r8
 8009684:	4631      	mov	r1, r6
 8009686:	4628      	mov	r0, r5
 8009688:	47b8      	blx	r7
 800968a:	3001      	adds	r0, #1
 800968c:	d1c1      	bne.n	8009612 <_printf_float+0x342>
 800968e:	e680      	b.n	8009392 <_printf_float+0xc2>
 8009690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009692:	2a01      	cmp	r2, #1
 8009694:	dc01      	bgt.n	800969a <_printf_float+0x3ca>
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	d538      	bpl.n	800970c <_printf_float+0x43c>
 800969a:	2301      	movs	r3, #1
 800969c:	4642      	mov	r2, r8
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	f43f ae74 	beq.w	8009392 <_printf_float+0xc2>
 80096aa:	ee18 3a10 	vmov	r3, s16
 80096ae:	4652      	mov	r2, sl
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	f43f ae6b 	beq.w	8009392 <_printf_float+0xc2>
 80096bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096c0:	2200      	movs	r2, #0
 80096c2:	2300      	movs	r3, #0
 80096c4:	f7f7 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 80096c8:	b9d8      	cbnz	r0, 8009702 <_printf_float+0x432>
 80096ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096cc:	f108 0201 	add.w	r2, r8, #1
 80096d0:	3b01      	subs	r3, #1
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	d10e      	bne.n	80096fa <_printf_float+0x42a>
 80096dc:	e659      	b.n	8009392 <_printf_float+0xc2>
 80096de:	2301      	movs	r3, #1
 80096e0:	4652      	mov	r2, sl
 80096e2:	4631      	mov	r1, r6
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b8      	blx	r7
 80096e8:	3001      	adds	r0, #1
 80096ea:	f43f ae52 	beq.w	8009392 <_printf_float+0xc2>
 80096ee:	f108 0801 	add.w	r8, r8, #1
 80096f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f4:	3b01      	subs	r3, #1
 80096f6:	4543      	cmp	r3, r8
 80096f8:	dcf1      	bgt.n	80096de <_printf_float+0x40e>
 80096fa:	464b      	mov	r3, r9
 80096fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009700:	e6dc      	b.n	80094bc <_printf_float+0x1ec>
 8009702:	f04f 0800 	mov.w	r8, #0
 8009706:	f104 0a1a 	add.w	sl, r4, #26
 800970a:	e7f2      	b.n	80096f2 <_printf_float+0x422>
 800970c:	2301      	movs	r3, #1
 800970e:	4642      	mov	r2, r8
 8009710:	e7df      	b.n	80096d2 <_printf_float+0x402>
 8009712:	2301      	movs	r3, #1
 8009714:	464a      	mov	r2, r9
 8009716:	4631      	mov	r1, r6
 8009718:	4628      	mov	r0, r5
 800971a:	47b8      	blx	r7
 800971c:	3001      	adds	r0, #1
 800971e:	f43f ae38 	beq.w	8009392 <_printf_float+0xc2>
 8009722:	f108 0801 	add.w	r8, r8, #1
 8009726:	68e3      	ldr	r3, [r4, #12]
 8009728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800972a:	1a5b      	subs	r3, r3, r1
 800972c:	4543      	cmp	r3, r8
 800972e:	dcf0      	bgt.n	8009712 <_printf_float+0x442>
 8009730:	e6fa      	b.n	8009528 <_printf_float+0x258>
 8009732:	f04f 0800 	mov.w	r8, #0
 8009736:	f104 0919 	add.w	r9, r4, #25
 800973a:	e7f4      	b.n	8009726 <_printf_float+0x456>

0800973c <_printf_common>:
 800973c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009740:	4616      	mov	r6, r2
 8009742:	4699      	mov	r9, r3
 8009744:	688a      	ldr	r2, [r1, #8]
 8009746:	690b      	ldr	r3, [r1, #16]
 8009748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800974c:	4293      	cmp	r3, r2
 800974e:	bfb8      	it	lt
 8009750:	4613      	movlt	r3, r2
 8009752:	6033      	str	r3, [r6, #0]
 8009754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009758:	4607      	mov	r7, r0
 800975a:	460c      	mov	r4, r1
 800975c:	b10a      	cbz	r2, 8009762 <_printf_common+0x26>
 800975e:	3301      	adds	r3, #1
 8009760:	6033      	str	r3, [r6, #0]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	0699      	lsls	r1, r3, #26
 8009766:	bf42      	ittt	mi
 8009768:	6833      	ldrmi	r3, [r6, #0]
 800976a:	3302      	addmi	r3, #2
 800976c:	6033      	strmi	r3, [r6, #0]
 800976e:	6825      	ldr	r5, [r4, #0]
 8009770:	f015 0506 	ands.w	r5, r5, #6
 8009774:	d106      	bne.n	8009784 <_printf_common+0x48>
 8009776:	f104 0a19 	add.w	sl, r4, #25
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	6832      	ldr	r2, [r6, #0]
 800977e:	1a9b      	subs	r3, r3, r2
 8009780:	42ab      	cmp	r3, r5
 8009782:	dc26      	bgt.n	80097d2 <_printf_common+0x96>
 8009784:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009788:	1e13      	subs	r3, r2, #0
 800978a:	6822      	ldr	r2, [r4, #0]
 800978c:	bf18      	it	ne
 800978e:	2301      	movne	r3, #1
 8009790:	0692      	lsls	r2, r2, #26
 8009792:	d42b      	bmi.n	80097ec <_printf_common+0xb0>
 8009794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009798:	4649      	mov	r1, r9
 800979a:	4638      	mov	r0, r7
 800979c:	47c0      	blx	r8
 800979e:	3001      	adds	r0, #1
 80097a0:	d01e      	beq.n	80097e0 <_printf_common+0xa4>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	68e5      	ldr	r5, [r4, #12]
 80097a6:	6832      	ldr	r2, [r6, #0]
 80097a8:	f003 0306 	and.w	r3, r3, #6
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	bf08      	it	eq
 80097b0:	1aad      	subeq	r5, r5, r2
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	6922      	ldr	r2, [r4, #16]
 80097b6:	bf0c      	ite	eq
 80097b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097bc:	2500      	movne	r5, #0
 80097be:	4293      	cmp	r3, r2
 80097c0:	bfc4      	itt	gt
 80097c2:	1a9b      	subgt	r3, r3, r2
 80097c4:	18ed      	addgt	r5, r5, r3
 80097c6:	2600      	movs	r6, #0
 80097c8:	341a      	adds	r4, #26
 80097ca:	42b5      	cmp	r5, r6
 80097cc:	d11a      	bne.n	8009804 <_printf_common+0xc8>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e008      	b.n	80097e4 <_printf_common+0xa8>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4652      	mov	r2, sl
 80097d6:	4649      	mov	r1, r9
 80097d8:	4638      	mov	r0, r7
 80097da:	47c0      	blx	r8
 80097dc:	3001      	adds	r0, #1
 80097de:	d103      	bne.n	80097e8 <_printf_common+0xac>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e8:	3501      	adds	r5, #1
 80097ea:	e7c6      	b.n	800977a <_printf_common+0x3e>
 80097ec:	18e1      	adds	r1, r4, r3
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	2030      	movs	r0, #48	; 0x30
 80097f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097f6:	4422      	add	r2, r4
 80097f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009800:	3302      	adds	r3, #2
 8009802:	e7c7      	b.n	8009794 <_printf_common+0x58>
 8009804:	2301      	movs	r3, #1
 8009806:	4622      	mov	r2, r4
 8009808:	4649      	mov	r1, r9
 800980a:	4638      	mov	r0, r7
 800980c:	47c0      	blx	r8
 800980e:	3001      	adds	r0, #1
 8009810:	d0e6      	beq.n	80097e0 <_printf_common+0xa4>
 8009812:	3601      	adds	r6, #1
 8009814:	e7d9      	b.n	80097ca <_printf_common+0x8e>
	...

08009818 <_printf_i>:
 8009818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	7e0f      	ldrb	r7, [r1, #24]
 800981e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009820:	2f78      	cmp	r7, #120	; 0x78
 8009822:	4691      	mov	r9, r2
 8009824:	4680      	mov	r8, r0
 8009826:	460c      	mov	r4, r1
 8009828:	469a      	mov	sl, r3
 800982a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800982e:	d807      	bhi.n	8009840 <_printf_i+0x28>
 8009830:	2f62      	cmp	r7, #98	; 0x62
 8009832:	d80a      	bhi.n	800984a <_printf_i+0x32>
 8009834:	2f00      	cmp	r7, #0
 8009836:	f000 80d8 	beq.w	80099ea <_printf_i+0x1d2>
 800983a:	2f58      	cmp	r7, #88	; 0x58
 800983c:	f000 80a3 	beq.w	8009986 <_printf_i+0x16e>
 8009840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009844:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009848:	e03a      	b.n	80098c0 <_printf_i+0xa8>
 800984a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800984e:	2b15      	cmp	r3, #21
 8009850:	d8f6      	bhi.n	8009840 <_printf_i+0x28>
 8009852:	a101      	add	r1, pc, #4	; (adr r1, 8009858 <_printf_i+0x40>)
 8009854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009858:	080098b1 	.word	0x080098b1
 800985c:	080098c5 	.word	0x080098c5
 8009860:	08009841 	.word	0x08009841
 8009864:	08009841 	.word	0x08009841
 8009868:	08009841 	.word	0x08009841
 800986c:	08009841 	.word	0x08009841
 8009870:	080098c5 	.word	0x080098c5
 8009874:	08009841 	.word	0x08009841
 8009878:	08009841 	.word	0x08009841
 800987c:	08009841 	.word	0x08009841
 8009880:	08009841 	.word	0x08009841
 8009884:	080099d1 	.word	0x080099d1
 8009888:	080098f5 	.word	0x080098f5
 800988c:	080099b3 	.word	0x080099b3
 8009890:	08009841 	.word	0x08009841
 8009894:	08009841 	.word	0x08009841
 8009898:	080099f3 	.word	0x080099f3
 800989c:	08009841 	.word	0x08009841
 80098a0:	080098f5 	.word	0x080098f5
 80098a4:	08009841 	.word	0x08009841
 80098a8:	08009841 	.word	0x08009841
 80098ac:	080099bb 	.word	0x080099bb
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	602a      	str	r2, [r5, #0]
 80098b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098c0:	2301      	movs	r3, #1
 80098c2:	e0a3      	b.n	8009a0c <_printf_i+0x1f4>
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	6829      	ldr	r1, [r5, #0]
 80098c8:	0606      	lsls	r6, r0, #24
 80098ca:	f101 0304 	add.w	r3, r1, #4
 80098ce:	d50a      	bpl.n	80098e6 <_printf_i+0xce>
 80098d0:	680e      	ldr	r6, [r1, #0]
 80098d2:	602b      	str	r3, [r5, #0]
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	da03      	bge.n	80098e0 <_printf_i+0xc8>
 80098d8:	232d      	movs	r3, #45	; 0x2d
 80098da:	4276      	negs	r6, r6
 80098dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e0:	485e      	ldr	r0, [pc, #376]	; (8009a5c <_printf_i+0x244>)
 80098e2:	230a      	movs	r3, #10
 80098e4:	e019      	b.n	800991a <_printf_i+0x102>
 80098e6:	680e      	ldr	r6, [r1, #0]
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098ee:	bf18      	it	ne
 80098f0:	b236      	sxthne	r6, r6
 80098f2:	e7ef      	b.n	80098d4 <_printf_i+0xbc>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	6820      	ldr	r0, [r4, #0]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	6029      	str	r1, [r5, #0]
 80098fc:	0601      	lsls	r1, r0, #24
 80098fe:	d501      	bpl.n	8009904 <_printf_i+0xec>
 8009900:	681e      	ldr	r6, [r3, #0]
 8009902:	e002      	b.n	800990a <_printf_i+0xf2>
 8009904:	0646      	lsls	r6, r0, #25
 8009906:	d5fb      	bpl.n	8009900 <_printf_i+0xe8>
 8009908:	881e      	ldrh	r6, [r3, #0]
 800990a:	4854      	ldr	r0, [pc, #336]	; (8009a5c <_printf_i+0x244>)
 800990c:	2f6f      	cmp	r7, #111	; 0x6f
 800990e:	bf0c      	ite	eq
 8009910:	2308      	moveq	r3, #8
 8009912:	230a      	movne	r3, #10
 8009914:	2100      	movs	r1, #0
 8009916:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800991a:	6865      	ldr	r5, [r4, #4]
 800991c:	60a5      	str	r5, [r4, #8]
 800991e:	2d00      	cmp	r5, #0
 8009920:	bfa2      	ittt	ge
 8009922:	6821      	ldrge	r1, [r4, #0]
 8009924:	f021 0104 	bicge.w	r1, r1, #4
 8009928:	6021      	strge	r1, [r4, #0]
 800992a:	b90e      	cbnz	r6, 8009930 <_printf_i+0x118>
 800992c:	2d00      	cmp	r5, #0
 800992e:	d04d      	beq.n	80099cc <_printf_i+0x1b4>
 8009930:	4615      	mov	r5, r2
 8009932:	fbb6 f1f3 	udiv	r1, r6, r3
 8009936:	fb03 6711 	mls	r7, r3, r1, r6
 800993a:	5dc7      	ldrb	r7, [r0, r7]
 800993c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009940:	4637      	mov	r7, r6
 8009942:	42bb      	cmp	r3, r7
 8009944:	460e      	mov	r6, r1
 8009946:	d9f4      	bls.n	8009932 <_printf_i+0x11a>
 8009948:	2b08      	cmp	r3, #8
 800994a:	d10b      	bne.n	8009964 <_printf_i+0x14c>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	07de      	lsls	r6, r3, #31
 8009950:	d508      	bpl.n	8009964 <_printf_i+0x14c>
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	6861      	ldr	r1, [r4, #4]
 8009956:	4299      	cmp	r1, r3
 8009958:	bfde      	ittt	le
 800995a:	2330      	movle	r3, #48	; 0x30
 800995c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009960:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009964:	1b52      	subs	r2, r2, r5
 8009966:	6122      	str	r2, [r4, #16]
 8009968:	f8cd a000 	str.w	sl, [sp]
 800996c:	464b      	mov	r3, r9
 800996e:	aa03      	add	r2, sp, #12
 8009970:	4621      	mov	r1, r4
 8009972:	4640      	mov	r0, r8
 8009974:	f7ff fee2 	bl	800973c <_printf_common>
 8009978:	3001      	adds	r0, #1
 800997a:	d14c      	bne.n	8009a16 <_printf_i+0x1fe>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	b004      	add	sp, #16
 8009982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009986:	4835      	ldr	r0, [pc, #212]	; (8009a5c <_printf_i+0x244>)
 8009988:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800998c:	6829      	ldr	r1, [r5, #0]
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	f851 6b04 	ldr.w	r6, [r1], #4
 8009994:	6029      	str	r1, [r5, #0]
 8009996:	061d      	lsls	r5, r3, #24
 8009998:	d514      	bpl.n	80099c4 <_printf_i+0x1ac>
 800999a:	07df      	lsls	r7, r3, #31
 800999c:	bf44      	itt	mi
 800999e:	f043 0320 	orrmi.w	r3, r3, #32
 80099a2:	6023      	strmi	r3, [r4, #0]
 80099a4:	b91e      	cbnz	r6, 80099ae <_printf_i+0x196>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	f023 0320 	bic.w	r3, r3, #32
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	2310      	movs	r3, #16
 80099b0:	e7b0      	b.n	8009914 <_printf_i+0xfc>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	f043 0320 	orr.w	r3, r3, #32
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	2378      	movs	r3, #120	; 0x78
 80099bc:	4828      	ldr	r0, [pc, #160]	; (8009a60 <_printf_i+0x248>)
 80099be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099c2:	e7e3      	b.n	800998c <_printf_i+0x174>
 80099c4:	0659      	lsls	r1, r3, #25
 80099c6:	bf48      	it	mi
 80099c8:	b2b6      	uxthmi	r6, r6
 80099ca:	e7e6      	b.n	800999a <_printf_i+0x182>
 80099cc:	4615      	mov	r5, r2
 80099ce:	e7bb      	b.n	8009948 <_printf_i+0x130>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	6826      	ldr	r6, [r4, #0]
 80099d4:	6961      	ldr	r1, [r4, #20]
 80099d6:	1d18      	adds	r0, r3, #4
 80099d8:	6028      	str	r0, [r5, #0]
 80099da:	0635      	lsls	r5, r6, #24
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	d501      	bpl.n	80099e4 <_printf_i+0x1cc>
 80099e0:	6019      	str	r1, [r3, #0]
 80099e2:	e002      	b.n	80099ea <_printf_i+0x1d2>
 80099e4:	0670      	lsls	r0, r6, #25
 80099e6:	d5fb      	bpl.n	80099e0 <_printf_i+0x1c8>
 80099e8:	8019      	strh	r1, [r3, #0]
 80099ea:	2300      	movs	r3, #0
 80099ec:	6123      	str	r3, [r4, #16]
 80099ee:	4615      	mov	r5, r2
 80099f0:	e7ba      	b.n	8009968 <_printf_i+0x150>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	1d1a      	adds	r2, r3, #4
 80099f6:	602a      	str	r2, [r5, #0]
 80099f8:	681d      	ldr	r5, [r3, #0]
 80099fa:	6862      	ldr	r2, [r4, #4]
 80099fc:	2100      	movs	r1, #0
 80099fe:	4628      	mov	r0, r5
 8009a00:	f7f6 fbee 	bl	80001e0 <memchr>
 8009a04:	b108      	cbz	r0, 8009a0a <_printf_i+0x1f2>
 8009a06:	1b40      	subs	r0, r0, r5
 8009a08:	6060      	str	r0, [r4, #4]
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a14:	e7a8      	b.n	8009968 <_printf_i+0x150>
 8009a16:	6923      	ldr	r3, [r4, #16]
 8009a18:	462a      	mov	r2, r5
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	47d0      	blx	sl
 8009a20:	3001      	adds	r0, #1
 8009a22:	d0ab      	beq.n	800997c <_printf_i+0x164>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	079b      	lsls	r3, r3, #30
 8009a28:	d413      	bmi.n	8009a52 <_printf_i+0x23a>
 8009a2a:	68e0      	ldr	r0, [r4, #12]
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	4298      	cmp	r0, r3
 8009a30:	bfb8      	it	lt
 8009a32:	4618      	movlt	r0, r3
 8009a34:	e7a4      	b.n	8009980 <_printf_i+0x168>
 8009a36:	2301      	movs	r3, #1
 8009a38:	4632      	mov	r2, r6
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	47d0      	blx	sl
 8009a40:	3001      	adds	r0, #1
 8009a42:	d09b      	beq.n	800997c <_printf_i+0x164>
 8009a44:	3501      	adds	r5, #1
 8009a46:	68e3      	ldr	r3, [r4, #12]
 8009a48:	9903      	ldr	r1, [sp, #12]
 8009a4a:	1a5b      	subs	r3, r3, r1
 8009a4c:	42ab      	cmp	r3, r5
 8009a4e:	dcf2      	bgt.n	8009a36 <_printf_i+0x21e>
 8009a50:	e7eb      	b.n	8009a2a <_printf_i+0x212>
 8009a52:	2500      	movs	r5, #0
 8009a54:	f104 0619 	add.w	r6, r4, #25
 8009a58:	e7f5      	b.n	8009a46 <_printf_i+0x22e>
 8009a5a:	bf00      	nop
 8009a5c:	0800f997 	.word	0x0800f997
 8009a60:	0800f9a8 	.word	0x0800f9a8

08009a64 <_scanf_float>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	b087      	sub	sp, #28
 8009a6a:	4617      	mov	r7, r2
 8009a6c:	9303      	str	r3, [sp, #12]
 8009a6e:	688b      	ldr	r3, [r1, #8]
 8009a70:	1e5a      	subs	r2, r3, #1
 8009a72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009a76:	bf83      	ittte	hi
 8009a78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009a7c:	195b      	addhi	r3, r3, r5
 8009a7e:	9302      	strhi	r3, [sp, #8]
 8009a80:	2300      	movls	r3, #0
 8009a82:	bf86      	itte	hi
 8009a84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009a88:	608b      	strhi	r3, [r1, #8]
 8009a8a:	9302      	strls	r3, [sp, #8]
 8009a8c:	680b      	ldr	r3, [r1, #0]
 8009a8e:	468b      	mov	fp, r1
 8009a90:	2500      	movs	r5, #0
 8009a92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009a96:	f84b 3b1c 	str.w	r3, [fp], #28
 8009a9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	465e      	mov	r6, fp
 8009aa4:	46aa      	mov	sl, r5
 8009aa6:	46a9      	mov	r9, r5
 8009aa8:	9501      	str	r5, [sp, #4]
 8009aaa:	68a2      	ldr	r2, [r4, #8]
 8009aac:	b152      	cbz	r2, 8009ac4 <_scanf_float+0x60>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b4e      	cmp	r3, #78	; 0x4e
 8009ab4:	d864      	bhi.n	8009b80 <_scanf_float+0x11c>
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	d83c      	bhi.n	8009b34 <_scanf_float+0xd0>
 8009aba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009abe:	b2c8      	uxtb	r0, r1
 8009ac0:	280e      	cmp	r0, #14
 8009ac2:	d93a      	bls.n	8009b3a <_scanf_float+0xd6>
 8009ac4:	f1b9 0f00 	cmp.w	r9, #0
 8009ac8:	d003      	beq.n	8009ad2 <_scanf_float+0x6e>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ad6:	f1ba 0f01 	cmp.w	sl, #1
 8009ada:	f200 8113 	bhi.w	8009d04 <_scanf_float+0x2a0>
 8009ade:	455e      	cmp	r6, fp
 8009ae0:	f200 8105 	bhi.w	8009cee <_scanf_float+0x28a>
 8009ae4:	2501      	movs	r5, #1
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	b007      	add	sp, #28
 8009aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009af2:	2a0d      	cmp	r2, #13
 8009af4:	d8e6      	bhi.n	8009ac4 <_scanf_float+0x60>
 8009af6:	a101      	add	r1, pc, #4	; (adr r1, 8009afc <_scanf_float+0x98>)
 8009af8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009afc:	08009c3b 	.word	0x08009c3b
 8009b00:	08009ac5 	.word	0x08009ac5
 8009b04:	08009ac5 	.word	0x08009ac5
 8009b08:	08009ac5 	.word	0x08009ac5
 8009b0c:	08009c9b 	.word	0x08009c9b
 8009b10:	08009c73 	.word	0x08009c73
 8009b14:	08009ac5 	.word	0x08009ac5
 8009b18:	08009ac5 	.word	0x08009ac5
 8009b1c:	08009c49 	.word	0x08009c49
 8009b20:	08009ac5 	.word	0x08009ac5
 8009b24:	08009ac5 	.word	0x08009ac5
 8009b28:	08009ac5 	.word	0x08009ac5
 8009b2c:	08009ac5 	.word	0x08009ac5
 8009b30:	08009c01 	.word	0x08009c01
 8009b34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009b38:	e7db      	b.n	8009af2 <_scanf_float+0x8e>
 8009b3a:	290e      	cmp	r1, #14
 8009b3c:	d8c2      	bhi.n	8009ac4 <_scanf_float+0x60>
 8009b3e:	a001      	add	r0, pc, #4	; (adr r0, 8009b44 <_scanf_float+0xe0>)
 8009b40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009b44:	08009bf3 	.word	0x08009bf3
 8009b48:	08009ac5 	.word	0x08009ac5
 8009b4c:	08009bf3 	.word	0x08009bf3
 8009b50:	08009c87 	.word	0x08009c87
 8009b54:	08009ac5 	.word	0x08009ac5
 8009b58:	08009ba1 	.word	0x08009ba1
 8009b5c:	08009bdd 	.word	0x08009bdd
 8009b60:	08009bdd 	.word	0x08009bdd
 8009b64:	08009bdd 	.word	0x08009bdd
 8009b68:	08009bdd 	.word	0x08009bdd
 8009b6c:	08009bdd 	.word	0x08009bdd
 8009b70:	08009bdd 	.word	0x08009bdd
 8009b74:	08009bdd 	.word	0x08009bdd
 8009b78:	08009bdd 	.word	0x08009bdd
 8009b7c:	08009bdd 	.word	0x08009bdd
 8009b80:	2b6e      	cmp	r3, #110	; 0x6e
 8009b82:	d809      	bhi.n	8009b98 <_scanf_float+0x134>
 8009b84:	2b60      	cmp	r3, #96	; 0x60
 8009b86:	d8b2      	bhi.n	8009aee <_scanf_float+0x8a>
 8009b88:	2b54      	cmp	r3, #84	; 0x54
 8009b8a:	d077      	beq.n	8009c7c <_scanf_float+0x218>
 8009b8c:	2b59      	cmp	r3, #89	; 0x59
 8009b8e:	d199      	bne.n	8009ac4 <_scanf_float+0x60>
 8009b90:	2d07      	cmp	r5, #7
 8009b92:	d197      	bne.n	8009ac4 <_scanf_float+0x60>
 8009b94:	2508      	movs	r5, #8
 8009b96:	e029      	b.n	8009bec <_scanf_float+0x188>
 8009b98:	2b74      	cmp	r3, #116	; 0x74
 8009b9a:	d06f      	beq.n	8009c7c <_scanf_float+0x218>
 8009b9c:	2b79      	cmp	r3, #121	; 0x79
 8009b9e:	e7f6      	b.n	8009b8e <_scanf_float+0x12a>
 8009ba0:	6821      	ldr	r1, [r4, #0]
 8009ba2:	05c8      	lsls	r0, r1, #23
 8009ba4:	d51a      	bpl.n	8009bdc <_scanf_float+0x178>
 8009ba6:	9b02      	ldr	r3, [sp, #8]
 8009ba8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009bac:	6021      	str	r1, [r4, #0]
 8009bae:	f109 0901 	add.w	r9, r9, #1
 8009bb2:	b11b      	cbz	r3, 8009bbc <_scanf_float+0x158>
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	3201      	adds	r2, #1
 8009bb8:	9302      	str	r3, [sp, #8]
 8009bba:	60a2      	str	r2, [r4, #8]
 8009bbc:	68a3      	ldr	r3, [r4, #8]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	60a3      	str	r3, [r4, #8]
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	607b      	str	r3, [r7, #4]
 8009bd0:	f340 8084 	ble.w	8009cdc <_scanf_float+0x278>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	603b      	str	r3, [r7, #0]
 8009bda:	e766      	b.n	8009aaa <_scanf_float+0x46>
 8009bdc:	eb1a 0f05 	cmn.w	sl, r5
 8009be0:	f47f af70 	bne.w	8009ac4 <_scanf_float+0x60>
 8009be4:	6822      	ldr	r2, [r4, #0]
 8009be6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009bea:	6022      	str	r2, [r4, #0]
 8009bec:	f806 3b01 	strb.w	r3, [r6], #1
 8009bf0:	e7e4      	b.n	8009bbc <_scanf_float+0x158>
 8009bf2:	6822      	ldr	r2, [r4, #0]
 8009bf4:	0610      	lsls	r0, r2, #24
 8009bf6:	f57f af65 	bpl.w	8009ac4 <_scanf_float+0x60>
 8009bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bfe:	e7f4      	b.n	8009bea <_scanf_float+0x186>
 8009c00:	f1ba 0f00 	cmp.w	sl, #0
 8009c04:	d10e      	bne.n	8009c24 <_scanf_float+0x1c0>
 8009c06:	f1b9 0f00 	cmp.w	r9, #0
 8009c0a:	d10e      	bne.n	8009c2a <_scanf_float+0x1c6>
 8009c0c:	6822      	ldr	r2, [r4, #0]
 8009c0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c16:	d108      	bne.n	8009c2a <_scanf_float+0x1c6>
 8009c18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c1c:	6022      	str	r2, [r4, #0]
 8009c1e:	f04f 0a01 	mov.w	sl, #1
 8009c22:	e7e3      	b.n	8009bec <_scanf_float+0x188>
 8009c24:	f1ba 0f02 	cmp.w	sl, #2
 8009c28:	d055      	beq.n	8009cd6 <_scanf_float+0x272>
 8009c2a:	2d01      	cmp	r5, #1
 8009c2c:	d002      	beq.n	8009c34 <_scanf_float+0x1d0>
 8009c2e:	2d04      	cmp	r5, #4
 8009c30:	f47f af48 	bne.w	8009ac4 <_scanf_float+0x60>
 8009c34:	3501      	adds	r5, #1
 8009c36:	b2ed      	uxtb	r5, r5
 8009c38:	e7d8      	b.n	8009bec <_scanf_float+0x188>
 8009c3a:	f1ba 0f01 	cmp.w	sl, #1
 8009c3e:	f47f af41 	bne.w	8009ac4 <_scanf_float+0x60>
 8009c42:	f04f 0a02 	mov.w	sl, #2
 8009c46:	e7d1      	b.n	8009bec <_scanf_float+0x188>
 8009c48:	b97d      	cbnz	r5, 8009c6a <_scanf_float+0x206>
 8009c4a:	f1b9 0f00 	cmp.w	r9, #0
 8009c4e:	f47f af3c 	bne.w	8009aca <_scanf_float+0x66>
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c5c:	f47f af39 	bne.w	8009ad2 <_scanf_float+0x6e>
 8009c60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c64:	6022      	str	r2, [r4, #0]
 8009c66:	2501      	movs	r5, #1
 8009c68:	e7c0      	b.n	8009bec <_scanf_float+0x188>
 8009c6a:	2d03      	cmp	r5, #3
 8009c6c:	d0e2      	beq.n	8009c34 <_scanf_float+0x1d0>
 8009c6e:	2d05      	cmp	r5, #5
 8009c70:	e7de      	b.n	8009c30 <_scanf_float+0x1cc>
 8009c72:	2d02      	cmp	r5, #2
 8009c74:	f47f af26 	bne.w	8009ac4 <_scanf_float+0x60>
 8009c78:	2503      	movs	r5, #3
 8009c7a:	e7b7      	b.n	8009bec <_scanf_float+0x188>
 8009c7c:	2d06      	cmp	r5, #6
 8009c7e:	f47f af21 	bne.w	8009ac4 <_scanf_float+0x60>
 8009c82:	2507      	movs	r5, #7
 8009c84:	e7b2      	b.n	8009bec <_scanf_float+0x188>
 8009c86:	6822      	ldr	r2, [r4, #0]
 8009c88:	0591      	lsls	r1, r2, #22
 8009c8a:	f57f af1b 	bpl.w	8009ac4 <_scanf_float+0x60>
 8009c8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009c92:	6022      	str	r2, [r4, #0]
 8009c94:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c98:	e7a8      	b.n	8009bec <_scanf_float+0x188>
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009ca0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009ca4:	d006      	beq.n	8009cb4 <_scanf_float+0x250>
 8009ca6:	0550      	lsls	r0, r2, #21
 8009ca8:	f57f af0c 	bpl.w	8009ac4 <_scanf_float+0x60>
 8009cac:	f1b9 0f00 	cmp.w	r9, #0
 8009cb0:	f43f af0f 	beq.w	8009ad2 <_scanf_float+0x6e>
 8009cb4:	0591      	lsls	r1, r2, #22
 8009cb6:	bf58      	it	pl
 8009cb8:	9901      	ldrpl	r1, [sp, #4]
 8009cba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cbe:	bf58      	it	pl
 8009cc0:	eba9 0101 	subpl.w	r1, r9, r1
 8009cc4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009cc8:	bf58      	it	pl
 8009cca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009cce:	6022      	str	r2, [r4, #0]
 8009cd0:	f04f 0900 	mov.w	r9, #0
 8009cd4:	e78a      	b.n	8009bec <_scanf_float+0x188>
 8009cd6:	f04f 0a03 	mov.w	sl, #3
 8009cda:	e787      	b.n	8009bec <_scanf_float+0x188>
 8009cdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	4798      	blx	r3
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f43f aedf 	beq.w	8009aaa <_scanf_float+0x46>
 8009cec:	e6ea      	b.n	8009ac4 <_scanf_float+0x60>
 8009cee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009cf6:	463a      	mov	r2, r7
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	4798      	blx	r3
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	6123      	str	r3, [r4, #16]
 8009d02:	e6ec      	b.n	8009ade <_scanf_float+0x7a>
 8009d04:	1e6b      	subs	r3, r5, #1
 8009d06:	2b06      	cmp	r3, #6
 8009d08:	d825      	bhi.n	8009d56 <_scanf_float+0x2f2>
 8009d0a:	2d02      	cmp	r5, #2
 8009d0c:	d836      	bhi.n	8009d7c <_scanf_float+0x318>
 8009d0e:	455e      	cmp	r6, fp
 8009d10:	f67f aee8 	bls.w	8009ae4 <_scanf_float+0x80>
 8009d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d1c:	463a      	mov	r2, r7
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4798      	blx	r3
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	e7f1      	b.n	8009d0e <_scanf_float+0x2aa>
 8009d2a:	9802      	ldr	r0, [sp, #8]
 8009d2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009d34:	9002      	str	r0, [sp, #8]
 8009d36:	463a      	mov	r2, r7
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4798      	blx	r3
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	6123      	str	r3, [r4, #16]
 8009d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d46:	fa5f fa8a 	uxtb.w	sl, sl
 8009d4a:	f1ba 0f02 	cmp.w	sl, #2
 8009d4e:	d1ec      	bne.n	8009d2a <_scanf_float+0x2c6>
 8009d50:	3d03      	subs	r5, #3
 8009d52:	b2ed      	uxtb	r5, r5
 8009d54:	1b76      	subs	r6, r6, r5
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	05da      	lsls	r2, r3, #23
 8009d5a:	d52f      	bpl.n	8009dbc <_scanf_float+0x358>
 8009d5c:	055b      	lsls	r3, r3, #21
 8009d5e:	d510      	bpl.n	8009d82 <_scanf_float+0x31e>
 8009d60:	455e      	cmp	r6, fp
 8009d62:	f67f aebf 	bls.w	8009ae4 <_scanf_float+0x80>
 8009d66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d6e:	463a      	mov	r2, r7
 8009d70:	4640      	mov	r0, r8
 8009d72:	4798      	blx	r3
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	6123      	str	r3, [r4, #16]
 8009d7a:	e7f1      	b.n	8009d60 <_scanf_float+0x2fc>
 8009d7c:	46aa      	mov	sl, r5
 8009d7e:	9602      	str	r6, [sp, #8]
 8009d80:	e7df      	b.n	8009d42 <_scanf_float+0x2de>
 8009d82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	2965      	cmp	r1, #101	; 0x65
 8009d8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009d92:	6123      	str	r3, [r4, #16]
 8009d94:	d00c      	beq.n	8009db0 <_scanf_float+0x34c>
 8009d96:	2945      	cmp	r1, #69	; 0x45
 8009d98:	d00a      	beq.n	8009db0 <_scanf_float+0x34c>
 8009d9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d9e:	463a      	mov	r2, r7
 8009da0:	4640      	mov	r0, r8
 8009da2:	4798      	blx	r3
 8009da4:	6923      	ldr	r3, [r4, #16]
 8009da6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	1eb5      	subs	r5, r6, #2
 8009dae:	6123      	str	r3, [r4, #16]
 8009db0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009db4:	463a      	mov	r2, r7
 8009db6:	4640      	mov	r0, r8
 8009db8:	4798      	blx	r3
 8009dba:	462e      	mov	r6, r5
 8009dbc:	6825      	ldr	r5, [r4, #0]
 8009dbe:	f015 0510 	ands.w	r5, r5, #16
 8009dc2:	d159      	bne.n	8009e78 <_scanf_float+0x414>
 8009dc4:	7035      	strb	r5, [r6, #0]
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dd0:	d11b      	bne.n	8009e0a <_scanf_float+0x3a6>
 8009dd2:	9b01      	ldr	r3, [sp, #4]
 8009dd4:	454b      	cmp	r3, r9
 8009dd6:	eba3 0209 	sub.w	r2, r3, r9
 8009dda:	d123      	bne.n	8009e24 <_scanf_float+0x3c0>
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4659      	mov	r1, fp
 8009de0:	4640      	mov	r0, r8
 8009de2:	f000 ff33 	bl	800ac4c <_strtod_r>
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	f012 0f02 	tst.w	r2, #2
 8009dee:	ec57 6b10 	vmov	r6, r7, d0
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	d021      	beq.n	8009e3a <_scanf_float+0x3d6>
 8009df6:	9903      	ldr	r1, [sp, #12]
 8009df8:	1d1a      	adds	r2, r3, #4
 8009dfa:	600a      	str	r2, [r1, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	e9c3 6700 	strd	r6, r7, [r3]
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	3301      	adds	r3, #1
 8009e06:	60e3      	str	r3, [r4, #12]
 8009e08:	e66d      	b.n	8009ae6 <_scanf_float+0x82>
 8009e0a:	9b04      	ldr	r3, [sp, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0e5      	beq.n	8009ddc <_scanf_float+0x378>
 8009e10:	9905      	ldr	r1, [sp, #20]
 8009e12:	230a      	movs	r3, #10
 8009e14:	462a      	mov	r2, r5
 8009e16:	3101      	adds	r1, #1
 8009e18:	4640      	mov	r0, r8
 8009e1a:	f000 ff9f 	bl	800ad5c <_strtol_r>
 8009e1e:	9b04      	ldr	r3, [sp, #16]
 8009e20:	9e05      	ldr	r6, [sp, #20]
 8009e22:	1ac2      	subs	r2, r0, r3
 8009e24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009e28:	429e      	cmp	r6, r3
 8009e2a:	bf28      	it	cs
 8009e2c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009e30:	4912      	ldr	r1, [pc, #72]	; (8009e7c <_scanf_float+0x418>)
 8009e32:	4630      	mov	r0, r6
 8009e34:	f000 f884 	bl	8009f40 <siprintf>
 8009e38:	e7d0      	b.n	8009ddc <_scanf_float+0x378>
 8009e3a:	9903      	ldr	r1, [sp, #12]
 8009e3c:	f012 0f04 	tst.w	r2, #4
 8009e40:	f103 0204 	add.w	r2, r3, #4
 8009e44:	600a      	str	r2, [r1, #0]
 8009e46:	d1d9      	bne.n	8009dfc <_scanf_float+0x398>
 8009e48:	f8d3 8000 	ldr.w	r8, [r3]
 8009e4c:	ee10 2a10 	vmov	r2, s0
 8009e50:	ee10 0a10 	vmov	r0, s0
 8009e54:	463b      	mov	r3, r7
 8009e56:	4639      	mov	r1, r7
 8009e58:	f7f6 fe68 	bl	8000b2c <__aeabi_dcmpun>
 8009e5c:	b128      	cbz	r0, 8009e6a <_scanf_float+0x406>
 8009e5e:	4808      	ldr	r0, [pc, #32]	; (8009e80 <_scanf_float+0x41c>)
 8009e60:	f000 f868 	bl	8009f34 <nanf>
 8009e64:	ed88 0a00 	vstr	s0, [r8]
 8009e68:	e7cb      	b.n	8009e02 <_scanf_float+0x39e>
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	f7f6 febb 	bl	8000be8 <__aeabi_d2f>
 8009e72:	f8c8 0000 	str.w	r0, [r8]
 8009e76:	e7c4      	b.n	8009e02 <_scanf_float+0x39e>
 8009e78:	2500      	movs	r5, #0
 8009e7a:	e634      	b.n	8009ae6 <_scanf_float+0x82>
 8009e7c:	0800f9b9 	.word	0x0800f9b9
 8009e80:	0800f80b 	.word	0x0800f80b

08009e84 <_putc_r>:
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	460d      	mov	r5, r1
 8009e88:	4614      	mov	r4, r2
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	b118      	cbz	r0, 8009e96 <_putc_r+0x12>
 8009e8e:	6983      	ldr	r3, [r0, #24]
 8009e90:	b90b      	cbnz	r3, 8009e96 <_putc_r+0x12>
 8009e92:	f7fe fd5d 	bl	8008950 <__sinit>
 8009e96:	4b1c      	ldr	r3, [pc, #112]	; (8009f08 <_putc_r+0x84>)
 8009e98:	429c      	cmp	r4, r3
 8009e9a:	d124      	bne.n	8009ee6 <_putc_r+0x62>
 8009e9c:	6874      	ldr	r4, [r6, #4]
 8009e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ea0:	07d8      	lsls	r0, r3, #31
 8009ea2:	d405      	bmi.n	8009eb0 <_putc_r+0x2c>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	0599      	lsls	r1, r3, #22
 8009ea8:	d402      	bmi.n	8009eb0 <_putc_r+0x2c>
 8009eaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eac:	f7fe fed3 	bl	8008c56 <__retarget_lock_acquire_recursive>
 8009eb0:	68a3      	ldr	r3, [r4, #8]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	60a3      	str	r3, [r4, #8]
 8009eb8:	da05      	bge.n	8009ec6 <_putc_r+0x42>
 8009eba:	69a2      	ldr	r2, [r4, #24]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	db1c      	blt.n	8009efa <_putc_r+0x76>
 8009ec0:	b2eb      	uxtb	r3, r5
 8009ec2:	2b0a      	cmp	r3, #10
 8009ec4:	d019      	beq.n	8009efa <_putc_r+0x76>
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	6022      	str	r2, [r4, #0]
 8009ecc:	701d      	strb	r5, [r3, #0]
 8009ece:	b2ed      	uxtb	r5, r5
 8009ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ed2:	07da      	lsls	r2, r3, #31
 8009ed4:	d405      	bmi.n	8009ee2 <_putc_r+0x5e>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	059b      	lsls	r3, r3, #22
 8009eda:	d402      	bmi.n	8009ee2 <_putc_r+0x5e>
 8009edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ede:	f7fe febb 	bl	8008c58 <__retarget_lock_release_recursive>
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	bd70      	pop	{r4, r5, r6, pc}
 8009ee6:	4b09      	ldr	r3, [pc, #36]	; (8009f0c <_putc_r+0x88>)
 8009ee8:	429c      	cmp	r4, r3
 8009eea:	d101      	bne.n	8009ef0 <_putc_r+0x6c>
 8009eec:	68b4      	ldr	r4, [r6, #8]
 8009eee:	e7d6      	b.n	8009e9e <_putc_r+0x1a>
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <_putc_r+0x8c>)
 8009ef2:	429c      	cmp	r4, r3
 8009ef4:	bf08      	it	eq
 8009ef6:	68f4      	ldreq	r4, [r6, #12]
 8009ef8:	e7d1      	b.n	8009e9e <_putc_r+0x1a>
 8009efa:	4629      	mov	r1, r5
 8009efc:	4622      	mov	r2, r4
 8009efe:	4630      	mov	r0, r6
 8009f00:	f000 ff2e 	bl	800ad60 <__swbuf_r>
 8009f04:	4605      	mov	r5, r0
 8009f06:	e7e3      	b.n	8009ed0 <_putc_r+0x4c>
 8009f08:	0800f930 	.word	0x0800f930
 8009f0c:	0800f950 	.word	0x0800f950
 8009f10:	0800f910 	.word	0x0800f910

08009f14 <_sbrk_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d06      	ldr	r5, [pc, #24]	; (8009f30 <_sbrk_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7f7 fa3a 	bl	8001398 <_sbrk>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_sbrk_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_sbrk_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	20000ee8 	.word	0x20000ee8

08009f34 <nanf>:
 8009f34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009f3c <nanf+0x8>
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	7fc00000 	.word	0x7fc00000

08009f40 <siprintf>:
 8009f40:	b40e      	push	{r1, r2, r3}
 8009f42:	b500      	push	{lr}
 8009f44:	b09c      	sub	sp, #112	; 0x70
 8009f46:	ab1d      	add	r3, sp, #116	; 0x74
 8009f48:	9002      	str	r0, [sp, #8]
 8009f4a:	9006      	str	r0, [sp, #24]
 8009f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f50:	4809      	ldr	r0, [pc, #36]	; (8009f78 <siprintf+0x38>)
 8009f52:	9107      	str	r1, [sp, #28]
 8009f54:	9104      	str	r1, [sp, #16]
 8009f56:	4909      	ldr	r1, [pc, #36]	; (8009f7c <siprintf+0x3c>)
 8009f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5c:	9105      	str	r1, [sp, #20]
 8009f5e:	6800      	ldr	r0, [r0, #0]
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	a902      	add	r1, sp, #8
 8009f64:	f002 ffb8 	bl	800ced8 <_svfiprintf_r>
 8009f68:	9b02      	ldr	r3, [sp, #8]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	b01c      	add	sp, #112	; 0x70
 8009f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f74:	b003      	add	sp, #12
 8009f76:	4770      	bx	lr
 8009f78:	2000000c 	.word	0x2000000c
 8009f7c:	ffff0208 	.word	0xffff0208

08009f80 <__sread>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	460c      	mov	r4, r1
 8009f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f88:	f003 f8a6 	bl	800d0d8 <_read_r>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	bfab      	itete	ge
 8009f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f92:	89a3      	ldrhlt	r3, [r4, #12]
 8009f94:	181b      	addge	r3, r3, r0
 8009f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f9a:	bfac      	ite	ge
 8009f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f9e:	81a3      	strhlt	r3, [r4, #12]
 8009fa0:	bd10      	pop	{r4, pc}

08009fa2 <__swrite>:
 8009fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa6:	461f      	mov	r7, r3
 8009fa8:	898b      	ldrh	r3, [r1, #12]
 8009faa:	05db      	lsls	r3, r3, #23
 8009fac:	4605      	mov	r5, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	4616      	mov	r6, r2
 8009fb2:	d505      	bpl.n	8009fc0 <__swrite+0x1e>
 8009fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb8:	2302      	movs	r3, #2
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f002 f9aa 	bl	800c314 <_lseek_r>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	4632      	mov	r2, r6
 8009fce:	463b      	mov	r3, r7
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd6:	f000 bf15 	b.w	800ae04 <_write_r>

08009fda <__sseek>:
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	460c      	mov	r4, r1
 8009fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe2:	f002 f997 	bl	800c314 <_lseek_r>
 8009fe6:	1c43      	adds	r3, r0, #1
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	bf15      	itete	ne
 8009fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ff6:	81a3      	strheq	r3, [r4, #12]
 8009ff8:	bf18      	it	ne
 8009ffa:	81a3      	strhne	r3, [r4, #12]
 8009ffc:	bd10      	pop	{r4, pc}

08009ffe <__sclose>:
 8009ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a002:	f000 bf87 	b.w	800af14 <_close_r>

0800a006 <sulp>:
 800a006:	b570      	push	{r4, r5, r6, lr}
 800a008:	4604      	mov	r4, r0
 800a00a:	460d      	mov	r5, r1
 800a00c:	ec45 4b10 	vmov	d0, r4, r5
 800a010:	4616      	mov	r6, r2
 800a012:	f002 fd87 	bl	800cb24 <__ulp>
 800a016:	ec51 0b10 	vmov	r0, r1, d0
 800a01a:	b17e      	cbz	r6, 800a03c <sulp+0x36>
 800a01c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a020:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a024:	2b00      	cmp	r3, #0
 800a026:	dd09      	ble.n	800a03c <sulp+0x36>
 800a028:	051b      	lsls	r3, r3, #20
 800a02a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a02e:	2400      	movs	r4, #0
 800a030:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a034:	4622      	mov	r2, r4
 800a036:	462b      	mov	r3, r5
 800a038:	f7f6 fade 	bl	80005f8 <__aeabi_dmul>
 800a03c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a040 <_strtod_l>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	ed2d 8b02 	vpush	{d8}
 800a048:	b09d      	sub	sp, #116	; 0x74
 800a04a:	461f      	mov	r7, r3
 800a04c:	2300      	movs	r3, #0
 800a04e:	9318      	str	r3, [sp, #96]	; 0x60
 800a050:	4ba2      	ldr	r3, [pc, #648]	; (800a2dc <_strtod_l+0x29c>)
 800a052:	9213      	str	r2, [sp, #76]	; 0x4c
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	4604      	mov	r4, r0
 800a05a:	4618      	mov	r0, r3
 800a05c:	4688      	mov	r8, r1
 800a05e:	f7f6 f8b7 	bl	80001d0 <strlen>
 800a062:	f04f 0a00 	mov.w	sl, #0
 800a066:	4605      	mov	r5, r0
 800a068:	f04f 0b00 	mov.w	fp, #0
 800a06c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a072:	781a      	ldrb	r2, [r3, #0]
 800a074:	2a2b      	cmp	r2, #43	; 0x2b
 800a076:	d04e      	beq.n	800a116 <_strtod_l+0xd6>
 800a078:	d83b      	bhi.n	800a0f2 <_strtod_l+0xb2>
 800a07a:	2a0d      	cmp	r2, #13
 800a07c:	d834      	bhi.n	800a0e8 <_strtod_l+0xa8>
 800a07e:	2a08      	cmp	r2, #8
 800a080:	d834      	bhi.n	800a0ec <_strtod_l+0xac>
 800a082:	2a00      	cmp	r2, #0
 800a084:	d03e      	beq.n	800a104 <_strtod_l+0xc4>
 800a086:	2300      	movs	r3, #0
 800a088:	930a      	str	r3, [sp, #40]	; 0x28
 800a08a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a08c:	7833      	ldrb	r3, [r6, #0]
 800a08e:	2b30      	cmp	r3, #48	; 0x30
 800a090:	f040 80b0 	bne.w	800a1f4 <_strtod_l+0x1b4>
 800a094:	7873      	ldrb	r3, [r6, #1]
 800a096:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a09a:	2b58      	cmp	r3, #88	; 0x58
 800a09c:	d168      	bne.n	800a170 <_strtod_l+0x130>
 800a09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	ab18      	add	r3, sp, #96	; 0x60
 800a0a4:	9702      	str	r7, [sp, #8]
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	4a8d      	ldr	r2, [pc, #564]	; (800a2e0 <_strtod_l+0x2a0>)
 800a0aa:	ab19      	add	r3, sp, #100	; 0x64
 800a0ac:	a917      	add	r1, sp, #92	; 0x5c
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f001 fe24 	bl	800bcfc <__gethex>
 800a0b4:	f010 0707 	ands.w	r7, r0, #7
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	d005      	beq.n	800a0c8 <_strtod_l+0x88>
 800a0bc:	2f06      	cmp	r7, #6
 800a0be:	d12c      	bne.n	800a11a <_strtod_l+0xda>
 800a0c0:	3601      	adds	r6, #1
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9617      	str	r6, [sp, #92]	; 0x5c
 800a0c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f040 8590 	bne.w	800abf0 <_strtod_l+0xbb0>
 800a0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d2:	b1eb      	cbz	r3, 800a110 <_strtod_l+0xd0>
 800a0d4:	4652      	mov	r2, sl
 800a0d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a0da:	ec43 2b10 	vmov	d0, r2, r3
 800a0de:	b01d      	add	sp, #116	; 0x74
 800a0e0:	ecbd 8b02 	vpop	{d8}
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	2a20      	cmp	r2, #32
 800a0ea:	d1cc      	bne.n	800a086 <_strtod_l+0x46>
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800a0f0:	e7be      	b.n	800a070 <_strtod_l+0x30>
 800a0f2:	2a2d      	cmp	r2, #45	; 0x2d
 800a0f4:	d1c7      	bne.n	800a086 <_strtod_l+0x46>
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1c2      	bne.n	800a08a <_strtod_l+0x4a>
 800a104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a106:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f040 856e 	bne.w	800abec <_strtod_l+0xbac>
 800a110:	4652      	mov	r2, sl
 800a112:	465b      	mov	r3, fp
 800a114:	e7e1      	b.n	800a0da <_strtod_l+0x9a>
 800a116:	2200      	movs	r2, #0
 800a118:	e7ee      	b.n	800a0f8 <_strtod_l+0xb8>
 800a11a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a11c:	b13a      	cbz	r2, 800a12e <_strtod_l+0xee>
 800a11e:	2135      	movs	r1, #53	; 0x35
 800a120:	a81a      	add	r0, sp, #104	; 0x68
 800a122:	f002 fe0a 	bl	800cd3a <__copybits>
 800a126:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a128:	4620      	mov	r0, r4
 800a12a:	f002 f9c9 	bl	800c4c0 <_Bfree>
 800a12e:	3f01      	subs	r7, #1
 800a130:	2f04      	cmp	r7, #4
 800a132:	d806      	bhi.n	800a142 <_strtod_l+0x102>
 800a134:	e8df f007 	tbb	[pc, r7]
 800a138:	1714030a 	.word	0x1714030a
 800a13c:	0a          	.byte	0x0a
 800a13d:	00          	.byte	0x00
 800a13e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a142:	0728      	lsls	r0, r5, #28
 800a144:	d5c0      	bpl.n	800a0c8 <_strtod_l+0x88>
 800a146:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a14a:	e7bd      	b.n	800a0c8 <_strtod_l+0x88>
 800a14c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a150:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a152:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a156:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a15a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a15e:	e7f0      	b.n	800a142 <_strtod_l+0x102>
 800a160:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a2e4 <_strtod_l+0x2a4>
 800a164:	e7ed      	b.n	800a142 <_strtod_l+0x102>
 800a166:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a16a:	f04f 3aff 	mov.w	sl, #4294967295
 800a16e:	e7e8      	b.n	800a142 <_strtod_l+0x102>
 800a170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	9217      	str	r2, [sp, #92]	; 0x5c
 800a176:	785b      	ldrb	r3, [r3, #1]
 800a178:	2b30      	cmp	r3, #48	; 0x30
 800a17a:	d0f9      	beq.n	800a170 <_strtod_l+0x130>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0a3      	beq.n	800a0c8 <_strtod_l+0x88>
 800a180:	2301      	movs	r3, #1
 800a182:	f04f 0900 	mov.w	r9, #0
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a18a:	9308      	str	r3, [sp, #32]
 800a18c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a190:	464f      	mov	r7, r9
 800a192:	220a      	movs	r2, #10
 800a194:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a196:	7806      	ldrb	r6, [r0, #0]
 800a198:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a19c:	b2d9      	uxtb	r1, r3
 800a19e:	2909      	cmp	r1, #9
 800a1a0:	d92a      	bls.n	800a1f8 <_strtod_l+0x1b8>
 800a1a2:	9905      	ldr	r1, [sp, #20]
 800a1a4:	462a      	mov	r2, r5
 800a1a6:	f002 fff7 	bl	800d198 <strncmp>
 800a1aa:	b398      	cbz	r0, 800a214 <_strtod_l+0x1d4>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	4632      	mov	r2, r6
 800a1b0:	463d      	mov	r5, r7
 800a1b2:	9005      	str	r0, [sp, #20]
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2a65      	cmp	r2, #101	; 0x65
 800a1b8:	d001      	beq.n	800a1be <_strtod_l+0x17e>
 800a1ba:	2a45      	cmp	r2, #69	; 0x45
 800a1bc:	d118      	bne.n	800a1f0 <_strtod_l+0x1b0>
 800a1be:	b91d      	cbnz	r5, 800a1c8 <_strtod_l+0x188>
 800a1c0:	9a04      	ldr	r2, [sp, #16]
 800a1c2:	4302      	orrs	r2, r0
 800a1c4:	d09e      	beq.n	800a104 <_strtod_l+0xc4>
 800a1c6:	2500      	movs	r5, #0
 800a1c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a1cc:	f108 0201 	add.w	r2, r8, #1
 800a1d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a1d6:	2a2b      	cmp	r2, #43	; 0x2b
 800a1d8:	d075      	beq.n	800a2c6 <_strtod_l+0x286>
 800a1da:	2a2d      	cmp	r2, #45	; 0x2d
 800a1dc:	d07b      	beq.n	800a2d6 <_strtod_l+0x296>
 800a1de:	f04f 0c00 	mov.w	ip, #0
 800a1e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a1e6:	2909      	cmp	r1, #9
 800a1e8:	f240 8082 	bls.w	800a2f0 <_strtod_l+0x2b0>
 800a1ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a1f0:	2600      	movs	r6, #0
 800a1f2:	e09d      	b.n	800a330 <_strtod_l+0x2f0>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e7c4      	b.n	800a182 <_strtod_l+0x142>
 800a1f8:	2f08      	cmp	r7, #8
 800a1fa:	bfd8      	it	le
 800a1fc:	9907      	ldrle	r1, [sp, #28]
 800a1fe:	f100 0001 	add.w	r0, r0, #1
 800a202:	bfda      	itte	le
 800a204:	fb02 3301 	mlale	r3, r2, r1, r3
 800a208:	9307      	strle	r3, [sp, #28]
 800a20a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a20e:	3701      	adds	r7, #1
 800a210:	9017      	str	r0, [sp, #92]	; 0x5c
 800a212:	e7bf      	b.n	800a194 <_strtod_l+0x154>
 800a214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a216:	195a      	adds	r2, r3, r5
 800a218:	9217      	str	r2, [sp, #92]	; 0x5c
 800a21a:	5d5a      	ldrb	r2, [r3, r5]
 800a21c:	2f00      	cmp	r7, #0
 800a21e:	d037      	beq.n	800a290 <_strtod_l+0x250>
 800a220:	9005      	str	r0, [sp, #20]
 800a222:	463d      	mov	r5, r7
 800a224:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a228:	2b09      	cmp	r3, #9
 800a22a:	d912      	bls.n	800a252 <_strtod_l+0x212>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e7c2      	b.n	800a1b6 <_strtod_l+0x176>
 800a230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	9217      	str	r2, [sp, #92]	; 0x5c
 800a236:	785a      	ldrb	r2, [r3, #1]
 800a238:	3001      	adds	r0, #1
 800a23a:	2a30      	cmp	r2, #48	; 0x30
 800a23c:	d0f8      	beq.n	800a230 <_strtod_l+0x1f0>
 800a23e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a242:	2b08      	cmp	r3, #8
 800a244:	f200 84d9 	bhi.w	800abfa <_strtod_l+0xbba>
 800a248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a24a:	9005      	str	r0, [sp, #20]
 800a24c:	2000      	movs	r0, #0
 800a24e:	9308      	str	r3, [sp, #32]
 800a250:	4605      	mov	r5, r0
 800a252:	3a30      	subs	r2, #48	; 0x30
 800a254:	f100 0301 	add.w	r3, r0, #1
 800a258:	d014      	beq.n	800a284 <_strtod_l+0x244>
 800a25a:	9905      	ldr	r1, [sp, #20]
 800a25c:	4419      	add	r1, r3
 800a25e:	9105      	str	r1, [sp, #20]
 800a260:	462b      	mov	r3, r5
 800a262:	eb00 0e05 	add.w	lr, r0, r5
 800a266:	210a      	movs	r1, #10
 800a268:	4573      	cmp	r3, lr
 800a26a:	d113      	bne.n	800a294 <_strtod_l+0x254>
 800a26c:	182b      	adds	r3, r5, r0
 800a26e:	2b08      	cmp	r3, #8
 800a270:	f105 0501 	add.w	r5, r5, #1
 800a274:	4405      	add	r5, r0
 800a276:	dc1c      	bgt.n	800a2b2 <_strtod_l+0x272>
 800a278:	9907      	ldr	r1, [sp, #28]
 800a27a:	230a      	movs	r3, #10
 800a27c:	fb03 2301 	mla	r3, r3, r1, r2
 800a280:	9307      	str	r3, [sp, #28]
 800a282:	2300      	movs	r3, #0
 800a284:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a286:	1c51      	adds	r1, r2, #1
 800a288:	9117      	str	r1, [sp, #92]	; 0x5c
 800a28a:	7852      	ldrb	r2, [r2, #1]
 800a28c:	4618      	mov	r0, r3
 800a28e:	e7c9      	b.n	800a224 <_strtod_l+0x1e4>
 800a290:	4638      	mov	r0, r7
 800a292:	e7d2      	b.n	800a23a <_strtod_l+0x1fa>
 800a294:	2b08      	cmp	r3, #8
 800a296:	dc04      	bgt.n	800a2a2 <_strtod_l+0x262>
 800a298:	9e07      	ldr	r6, [sp, #28]
 800a29a:	434e      	muls	r6, r1
 800a29c:	9607      	str	r6, [sp, #28]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	e7e2      	b.n	800a268 <_strtod_l+0x228>
 800a2a2:	f103 0c01 	add.w	ip, r3, #1
 800a2a6:	f1bc 0f10 	cmp.w	ip, #16
 800a2aa:	bfd8      	it	le
 800a2ac:	fb01 f909 	mulle.w	r9, r1, r9
 800a2b0:	e7f5      	b.n	800a29e <_strtod_l+0x25e>
 800a2b2:	2d10      	cmp	r5, #16
 800a2b4:	bfdc      	itt	le
 800a2b6:	230a      	movle	r3, #10
 800a2b8:	fb03 2909 	mlale	r9, r3, r9, r2
 800a2bc:	e7e1      	b.n	800a282 <_strtod_l+0x242>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9305      	str	r3, [sp, #20]
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e77c      	b.n	800a1c0 <_strtod_l+0x180>
 800a2c6:	f04f 0c00 	mov.w	ip, #0
 800a2ca:	f108 0202 	add.w	r2, r8, #2
 800a2ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a2d4:	e785      	b.n	800a1e2 <_strtod_l+0x1a2>
 800a2d6:	f04f 0c01 	mov.w	ip, #1
 800a2da:	e7f6      	b.n	800a2ca <_strtod_l+0x28a>
 800a2dc:	0800fb08 	.word	0x0800fb08
 800a2e0:	0800f9c0 	.word	0x0800f9c0
 800a2e4:	7ff00000 	.word	0x7ff00000
 800a2e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2ea:	1c51      	adds	r1, r2, #1
 800a2ec:	9117      	str	r1, [sp, #92]	; 0x5c
 800a2ee:	7852      	ldrb	r2, [r2, #1]
 800a2f0:	2a30      	cmp	r2, #48	; 0x30
 800a2f2:	d0f9      	beq.n	800a2e8 <_strtod_l+0x2a8>
 800a2f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a2f8:	2908      	cmp	r1, #8
 800a2fa:	f63f af79 	bhi.w	800a1f0 <_strtod_l+0x1b0>
 800a2fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a302:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a304:	9206      	str	r2, [sp, #24]
 800a306:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a308:	1c51      	adds	r1, r2, #1
 800a30a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a30c:	7852      	ldrb	r2, [r2, #1]
 800a30e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a312:	2e09      	cmp	r6, #9
 800a314:	d937      	bls.n	800a386 <_strtod_l+0x346>
 800a316:	9e06      	ldr	r6, [sp, #24]
 800a318:	1b89      	subs	r1, r1, r6
 800a31a:	2908      	cmp	r1, #8
 800a31c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a320:	dc02      	bgt.n	800a328 <_strtod_l+0x2e8>
 800a322:	4576      	cmp	r6, lr
 800a324:	bfa8      	it	ge
 800a326:	4676      	movge	r6, lr
 800a328:	f1bc 0f00 	cmp.w	ip, #0
 800a32c:	d000      	beq.n	800a330 <_strtod_l+0x2f0>
 800a32e:	4276      	negs	r6, r6
 800a330:	2d00      	cmp	r5, #0
 800a332:	d14d      	bne.n	800a3d0 <_strtod_l+0x390>
 800a334:	9904      	ldr	r1, [sp, #16]
 800a336:	4301      	orrs	r1, r0
 800a338:	f47f aec6 	bne.w	800a0c8 <_strtod_l+0x88>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f47f aee1 	bne.w	800a104 <_strtod_l+0xc4>
 800a342:	2a69      	cmp	r2, #105	; 0x69
 800a344:	d027      	beq.n	800a396 <_strtod_l+0x356>
 800a346:	dc24      	bgt.n	800a392 <_strtod_l+0x352>
 800a348:	2a49      	cmp	r2, #73	; 0x49
 800a34a:	d024      	beq.n	800a396 <_strtod_l+0x356>
 800a34c:	2a4e      	cmp	r2, #78	; 0x4e
 800a34e:	f47f aed9 	bne.w	800a104 <_strtod_l+0xc4>
 800a352:	499f      	ldr	r1, [pc, #636]	; (800a5d0 <_strtod_l+0x590>)
 800a354:	a817      	add	r0, sp, #92	; 0x5c
 800a356:	f001 ff29 	bl	800c1ac <__match>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f43f aed2 	beq.w	800a104 <_strtod_l+0xc4>
 800a360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	2b28      	cmp	r3, #40	; 0x28
 800a366:	d12d      	bne.n	800a3c4 <_strtod_l+0x384>
 800a368:	499a      	ldr	r1, [pc, #616]	; (800a5d4 <_strtod_l+0x594>)
 800a36a:	aa1a      	add	r2, sp, #104	; 0x68
 800a36c:	a817      	add	r0, sp, #92	; 0x5c
 800a36e:	f001 ff31 	bl	800c1d4 <__hexnan>
 800a372:	2805      	cmp	r0, #5
 800a374:	d126      	bne.n	800a3c4 <_strtod_l+0x384>
 800a376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a378:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a37c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a380:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a384:	e6a0      	b.n	800a0c8 <_strtod_l+0x88>
 800a386:	210a      	movs	r1, #10
 800a388:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a38c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a390:	e7b9      	b.n	800a306 <_strtod_l+0x2c6>
 800a392:	2a6e      	cmp	r2, #110	; 0x6e
 800a394:	e7db      	b.n	800a34e <_strtod_l+0x30e>
 800a396:	4990      	ldr	r1, [pc, #576]	; (800a5d8 <_strtod_l+0x598>)
 800a398:	a817      	add	r0, sp, #92	; 0x5c
 800a39a:	f001 ff07 	bl	800c1ac <__match>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	f43f aeb0 	beq.w	800a104 <_strtod_l+0xc4>
 800a3a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3a6:	498d      	ldr	r1, [pc, #564]	; (800a5dc <_strtod_l+0x59c>)
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	a817      	add	r0, sp, #92	; 0x5c
 800a3ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3ae:	f001 fefd 	bl	800c1ac <__match>
 800a3b2:	b910      	cbnz	r0, 800a3ba <_strtod_l+0x37a>
 800a3b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a5ec <_strtod_l+0x5ac>
 800a3be:	f04f 0a00 	mov.w	sl, #0
 800a3c2:	e681      	b.n	800a0c8 <_strtod_l+0x88>
 800a3c4:	4886      	ldr	r0, [pc, #536]	; (800a5e0 <_strtod_l+0x5a0>)
 800a3c6:	f002 fe9b 	bl	800d100 <nan>
 800a3ca:	ec5b ab10 	vmov	sl, fp, d0
 800a3ce:	e67b      	b.n	800a0c8 <_strtod_l+0x88>
 800a3d0:	9b05      	ldr	r3, [sp, #20]
 800a3d2:	9807      	ldr	r0, [sp, #28]
 800a3d4:	1af3      	subs	r3, r6, r3
 800a3d6:	2f00      	cmp	r7, #0
 800a3d8:	bf08      	it	eq
 800a3da:	462f      	moveq	r7, r5
 800a3dc:	2d10      	cmp	r5, #16
 800a3de:	9306      	str	r3, [sp, #24]
 800a3e0:	46a8      	mov	r8, r5
 800a3e2:	bfa8      	it	ge
 800a3e4:	f04f 0810 	movge.w	r8, #16
 800a3e8:	f7f6 f88c 	bl	8000504 <__aeabi_ui2d>
 800a3ec:	2d09      	cmp	r5, #9
 800a3ee:	4682      	mov	sl, r0
 800a3f0:	468b      	mov	fp, r1
 800a3f2:	dd13      	ble.n	800a41c <_strtod_l+0x3dc>
 800a3f4:	4b7b      	ldr	r3, [pc, #492]	; (800a5e4 <_strtod_l+0x5a4>)
 800a3f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a3fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a3fe:	f7f6 f8fb 	bl	80005f8 <__aeabi_dmul>
 800a402:	4682      	mov	sl, r0
 800a404:	4648      	mov	r0, r9
 800a406:	468b      	mov	fp, r1
 800a408:	f7f6 f87c 	bl	8000504 <__aeabi_ui2d>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4650      	mov	r0, sl
 800a412:	4659      	mov	r1, fp
 800a414:	f7f5 ff3a 	bl	800028c <__adddf3>
 800a418:	4682      	mov	sl, r0
 800a41a:	468b      	mov	fp, r1
 800a41c:	2d0f      	cmp	r5, #15
 800a41e:	dc38      	bgt.n	800a492 <_strtod_l+0x452>
 800a420:	9b06      	ldr	r3, [sp, #24]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f43f ae50 	beq.w	800a0c8 <_strtod_l+0x88>
 800a428:	dd24      	ble.n	800a474 <_strtod_l+0x434>
 800a42a:	2b16      	cmp	r3, #22
 800a42c:	dc0b      	bgt.n	800a446 <_strtod_l+0x406>
 800a42e:	496d      	ldr	r1, [pc, #436]	; (800a5e4 <_strtod_l+0x5a4>)
 800a430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a434:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a438:	4652      	mov	r2, sl
 800a43a:	465b      	mov	r3, fp
 800a43c:	f7f6 f8dc 	bl	80005f8 <__aeabi_dmul>
 800a440:	4682      	mov	sl, r0
 800a442:	468b      	mov	fp, r1
 800a444:	e640      	b.n	800a0c8 <_strtod_l+0x88>
 800a446:	9a06      	ldr	r2, [sp, #24]
 800a448:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a44c:	4293      	cmp	r3, r2
 800a44e:	db20      	blt.n	800a492 <_strtod_l+0x452>
 800a450:	4c64      	ldr	r4, [pc, #400]	; (800a5e4 <_strtod_l+0x5a4>)
 800a452:	f1c5 050f 	rsb	r5, r5, #15
 800a456:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a45a:	4652      	mov	r2, sl
 800a45c:	465b      	mov	r3, fp
 800a45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a462:	f7f6 f8c9 	bl	80005f8 <__aeabi_dmul>
 800a466:	9b06      	ldr	r3, [sp, #24]
 800a468:	1b5d      	subs	r5, r3, r5
 800a46a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a46e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a472:	e7e3      	b.n	800a43c <_strtod_l+0x3fc>
 800a474:	9b06      	ldr	r3, [sp, #24]
 800a476:	3316      	adds	r3, #22
 800a478:	db0b      	blt.n	800a492 <_strtod_l+0x452>
 800a47a:	9b05      	ldr	r3, [sp, #20]
 800a47c:	1b9e      	subs	r6, r3, r6
 800a47e:	4b59      	ldr	r3, [pc, #356]	; (800a5e4 <_strtod_l+0x5a4>)
 800a480:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a484:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a488:	4650      	mov	r0, sl
 800a48a:	4659      	mov	r1, fp
 800a48c:	f7f6 f9de 	bl	800084c <__aeabi_ddiv>
 800a490:	e7d6      	b.n	800a440 <_strtod_l+0x400>
 800a492:	9b06      	ldr	r3, [sp, #24]
 800a494:	eba5 0808 	sub.w	r8, r5, r8
 800a498:	4498      	add	r8, r3
 800a49a:	f1b8 0f00 	cmp.w	r8, #0
 800a49e:	dd74      	ble.n	800a58a <_strtod_l+0x54a>
 800a4a0:	f018 030f 	ands.w	r3, r8, #15
 800a4a4:	d00a      	beq.n	800a4bc <_strtod_l+0x47c>
 800a4a6:	494f      	ldr	r1, [pc, #316]	; (800a5e4 <_strtod_l+0x5a4>)
 800a4a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	465b      	mov	r3, fp
 800a4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4b4:	f7f6 f8a0 	bl	80005f8 <__aeabi_dmul>
 800a4b8:	4682      	mov	sl, r0
 800a4ba:	468b      	mov	fp, r1
 800a4bc:	f038 080f 	bics.w	r8, r8, #15
 800a4c0:	d04f      	beq.n	800a562 <_strtod_l+0x522>
 800a4c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a4c6:	dd22      	ble.n	800a50e <_strtod_l+0x4ce>
 800a4c8:	2500      	movs	r5, #0
 800a4ca:	462e      	mov	r6, r5
 800a4cc:	9507      	str	r5, [sp, #28]
 800a4ce:	9505      	str	r5, [sp, #20]
 800a4d0:	2322      	movs	r3, #34	; 0x22
 800a4d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a5ec <_strtod_l+0x5ac>
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	f04f 0a00 	mov.w	sl, #0
 800a4dc:	9b07      	ldr	r3, [sp, #28]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f43f adf2 	beq.w	800a0c8 <_strtod_l+0x88>
 800a4e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f001 ffea 	bl	800c4c0 <_Bfree>
 800a4ec:	9905      	ldr	r1, [sp, #20]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f001 ffe6 	bl	800c4c0 <_Bfree>
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f001 ffe2 	bl	800c4c0 <_Bfree>
 800a4fc:	9907      	ldr	r1, [sp, #28]
 800a4fe:	4620      	mov	r0, r4
 800a500:	f001 ffde 	bl	800c4c0 <_Bfree>
 800a504:	4629      	mov	r1, r5
 800a506:	4620      	mov	r0, r4
 800a508:	f001 ffda 	bl	800c4c0 <_Bfree>
 800a50c:	e5dc      	b.n	800a0c8 <_strtod_l+0x88>
 800a50e:	4b36      	ldr	r3, [pc, #216]	; (800a5e8 <_strtod_l+0x5a8>)
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	2300      	movs	r3, #0
 800a514:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a518:	4650      	mov	r0, sl
 800a51a:	4659      	mov	r1, fp
 800a51c:	4699      	mov	r9, r3
 800a51e:	f1b8 0f01 	cmp.w	r8, #1
 800a522:	dc21      	bgt.n	800a568 <_strtod_l+0x528>
 800a524:	b10b      	cbz	r3, 800a52a <_strtod_l+0x4ea>
 800a526:	4682      	mov	sl, r0
 800a528:	468b      	mov	fp, r1
 800a52a:	4b2f      	ldr	r3, [pc, #188]	; (800a5e8 <_strtod_l+0x5a8>)
 800a52c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a530:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a534:	4652      	mov	r2, sl
 800a536:	465b      	mov	r3, fp
 800a538:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a53c:	f7f6 f85c 	bl	80005f8 <__aeabi_dmul>
 800a540:	4b2a      	ldr	r3, [pc, #168]	; (800a5ec <_strtod_l+0x5ac>)
 800a542:	460a      	mov	r2, r1
 800a544:	400b      	ands	r3, r1
 800a546:	492a      	ldr	r1, [pc, #168]	; (800a5f0 <_strtod_l+0x5b0>)
 800a548:	428b      	cmp	r3, r1
 800a54a:	4682      	mov	sl, r0
 800a54c:	d8bc      	bhi.n	800a4c8 <_strtod_l+0x488>
 800a54e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a552:	428b      	cmp	r3, r1
 800a554:	bf86      	itte	hi
 800a556:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a5f4 <_strtod_l+0x5b4>
 800a55a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a55e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a562:	2300      	movs	r3, #0
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	e084      	b.n	800a672 <_strtod_l+0x632>
 800a568:	f018 0f01 	tst.w	r8, #1
 800a56c:	d005      	beq.n	800a57a <_strtod_l+0x53a>
 800a56e:	9b04      	ldr	r3, [sp, #16]
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f6 f840 	bl	80005f8 <__aeabi_dmul>
 800a578:	2301      	movs	r3, #1
 800a57a:	9a04      	ldr	r2, [sp, #16]
 800a57c:	3208      	adds	r2, #8
 800a57e:	f109 0901 	add.w	r9, r9, #1
 800a582:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a586:	9204      	str	r2, [sp, #16]
 800a588:	e7c9      	b.n	800a51e <_strtod_l+0x4de>
 800a58a:	d0ea      	beq.n	800a562 <_strtod_l+0x522>
 800a58c:	f1c8 0800 	rsb	r8, r8, #0
 800a590:	f018 020f 	ands.w	r2, r8, #15
 800a594:	d00a      	beq.n	800a5ac <_strtod_l+0x56c>
 800a596:	4b13      	ldr	r3, [pc, #76]	; (800a5e4 <_strtod_l+0x5a4>)
 800a598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a59c:	4650      	mov	r0, sl
 800a59e:	4659      	mov	r1, fp
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	f7f6 f952 	bl	800084c <__aeabi_ddiv>
 800a5a8:	4682      	mov	sl, r0
 800a5aa:	468b      	mov	fp, r1
 800a5ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a5b0:	d0d7      	beq.n	800a562 <_strtod_l+0x522>
 800a5b2:	f1b8 0f1f 	cmp.w	r8, #31
 800a5b6:	dd1f      	ble.n	800a5f8 <_strtod_l+0x5b8>
 800a5b8:	2500      	movs	r5, #0
 800a5ba:	462e      	mov	r6, r5
 800a5bc:	9507      	str	r5, [sp, #28]
 800a5be:	9505      	str	r5, [sp, #20]
 800a5c0:	2322      	movs	r3, #34	; 0x22
 800a5c2:	f04f 0a00 	mov.w	sl, #0
 800a5c6:	f04f 0b00 	mov.w	fp, #0
 800a5ca:	6023      	str	r3, [r4, #0]
 800a5cc:	e786      	b.n	800a4dc <_strtod_l+0x49c>
 800a5ce:	bf00      	nop
 800a5d0:	0800f992 	.word	0x0800f992
 800a5d4:	0800f9d4 	.word	0x0800f9d4
 800a5d8:	0800f98a 	.word	0x0800f98a
 800a5dc:	0800fa13 	.word	0x0800fa13
 800a5e0:	0800f80b 	.word	0x0800f80b
 800a5e4:	0800fba0 	.word	0x0800fba0
 800a5e8:	0800fb78 	.word	0x0800fb78
 800a5ec:	7ff00000 	.word	0x7ff00000
 800a5f0:	7ca00000 	.word	0x7ca00000
 800a5f4:	7fefffff 	.word	0x7fefffff
 800a5f8:	f018 0310 	ands.w	r3, r8, #16
 800a5fc:	bf18      	it	ne
 800a5fe:	236a      	movne	r3, #106	; 0x6a
 800a600:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a9b0 <_strtod_l+0x970>
 800a604:	9304      	str	r3, [sp, #16]
 800a606:	4650      	mov	r0, sl
 800a608:	4659      	mov	r1, fp
 800a60a:	2300      	movs	r3, #0
 800a60c:	f018 0f01 	tst.w	r8, #1
 800a610:	d004      	beq.n	800a61c <_strtod_l+0x5dc>
 800a612:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a616:	f7f5 ffef 	bl	80005f8 <__aeabi_dmul>
 800a61a:	2301      	movs	r3, #1
 800a61c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a620:	f109 0908 	add.w	r9, r9, #8
 800a624:	d1f2      	bne.n	800a60c <_strtod_l+0x5cc>
 800a626:	b10b      	cbz	r3, 800a62c <_strtod_l+0x5ec>
 800a628:	4682      	mov	sl, r0
 800a62a:	468b      	mov	fp, r1
 800a62c:	9b04      	ldr	r3, [sp, #16]
 800a62e:	b1c3      	cbz	r3, 800a662 <_strtod_l+0x622>
 800a630:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a634:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a638:	2b00      	cmp	r3, #0
 800a63a:	4659      	mov	r1, fp
 800a63c:	dd11      	ble.n	800a662 <_strtod_l+0x622>
 800a63e:	2b1f      	cmp	r3, #31
 800a640:	f340 8124 	ble.w	800a88c <_strtod_l+0x84c>
 800a644:	2b34      	cmp	r3, #52	; 0x34
 800a646:	bfde      	ittt	le
 800a648:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a64c:	f04f 33ff 	movle.w	r3, #4294967295
 800a650:	fa03 f202 	lslle.w	r2, r3, r2
 800a654:	f04f 0a00 	mov.w	sl, #0
 800a658:	bfcc      	ite	gt
 800a65a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a65e:	ea02 0b01 	andle.w	fp, r2, r1
 800a662:	2200      	movs	r2, #0
 800a664:	2300      	movs	r3, #0
 800a666:	4650      	mov	r0, sl
 800a668:	4659      	mov	r1, fp
 800a66a:	f7f6 fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d1a2      	bne.n	800a5b8 <_strtod_l+0x578>
 800a672:	9b07      	ldr	r3, [sp, #28]
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	9908      	ldr	r1, [sp, #32]
 800a678:	462b      	mov	r3, r5
 800a67a:	463a      	mov	r2, r7
 800a67c:	4620      	mov	r0, r4
 800a67e:	f001 ff87 	bl	800c590 <__s2b>
 800a682:	9007      	str	r0, [sp, #28]
 800a684:	2800      	cmp	r0, #0
 800a686:	f43f af1f 	beq.w	800a4c8 <_strtod_l+0x488>
 800a68a:	9b05      	ldr	r3, [sp, #20]
 800a68c:	1b9e      	subs	r6, r3, r6
 800a68e:	9b06      	ldr	r3, [sp, #24]
 800a690:	2b00      	cmp	r3, #0
 800a692:	bfb4      	ite	lt
 800a694:	4633      	movlt	r3, r6
 800a696:	2300      	movge	r3, #0
 800a698:	930c      	str	r3, [sp, #48]	; 0x30
 800a69a:	9b06      	ldr	r3, [sp, #24]
 800a69c:	2500      	movs	r5, #0
 800a69e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a6a2:	9312      	str	r3, [sp, #72]	; 0x48
 800a6a4:	462e      	mov	r6, r5
 800a6a6:	9b07      	ldr	r3, [sp, #28]
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	6859      	ldr	r1, [r3, #4]
 800a6ac:	f001 fec8 	bl	800c440 <_Balloc>
 800a6b0:	9005      	str	r0, [sp, #20]
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f43f af0c 	beq.w	800a4d0 <_strtod_l+0x490>
 800a6b8:	9b07      	ldr	r3, [sp, #28]
 800a6ba:	691a      	ldr	r2, [r3, #16]
 800a6bc:	3202      	adds	r2, #2
 800a6be:	f103 010c 	add.w	r1, r3, #12
 800a6c2:	0092      	lsls	r2, r2, #2
 800a6c4:	300c      	adds	r0, #12
 800a6c6:	f7fe fad9 	bl	8008c7c <memcpy>
 800a6ca:	ec4b ab10 	vmov	d0, sl, fp
 800a6ce:	aa1a      	add	r2, sp, #104	; 0x68
 800a6d0:	a919      	add	r1, sp, #100	; 0x64
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f002 faa2 	bl	800cc1c <__d2b>
 800a6d8:	ec4b ab18 	vmov	d8, sl, fp
 800a6dc:	9018      	str	r0, [sp, #96]	; 0x60
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f43f aef6 	beq.w	800a4d0 <_strtod_l+0x490>
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f001 ffec 	bl	800c6c4 <__i2b>
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f43f aeee 	beq.w	800a4d0 <_strtod_l+0x490>
 800a6f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6f6:	9904      	ldr	r1, [sp, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bfab      	itete	ge
 800a6fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a6fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a700:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a702:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a706:	bfac      	ite	ge
 800a708:	eb03 0902 	addge.w	r9, r3, r2
 800a70c:	1ad7      	sublt	r7, r2, r3
 800a70e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a710:	eba3 0801 	sub.w	r8, r3, r1
 800a714:	4490      	add	r8, r2
 800a716:	4ba1      	ldr	r3, [pc, #644]	; (800a99c <_strtod_l+0x95c>)
 800a718:	f108 38ff 	add.w	r8, r8, #4294967295
 800a71c:	4598      	cmp	r8, r3
 800a71e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a722:	f280 80c7 	bge.w	800a8b4 <_strtod_l+0x874>
 800a726:	eba3 0308 	sub.w	r3, r3, r8
 800a72a:	2b1f      	cmp	r3, #31
 800a72c:	eba2 0203 	sub.w	r2, r2, r3
 800a730:	f04f 0101 	mov.w	r1, #1
 800a734:	f300 80b1 	bgt.w	800a89a <_strtod_l+0x85a>
 800a738:	fa01 f303 	lsl.w	r3, r1, r3
 800a73c:	930d      	str	r3, [sp, #52]	; 0x34
 800a73e:	2300      	movs	r3, #0
 800a740:	9308      	str	r3, [sp, #32]
 800a742:	eb09 0802 	add.w	r8, r9, r2
 800a746:	9b04      	ldr	r3, [sp, #16]
 800a748:	45c1      	cmp	r9, r8
 800a74a:	4417      	add	r7, r2
 800a74c:	441f      	add	r7, r3
 800a74e:	464b      	mov	r3, r9
 800a750:	bfa8      	it	ge
 800a752:	4643      	movge	r3, r8
 800a754:	42bb      	cmp	r3, r7
 800a756:	bfa8      	it	ge
 800a758:	463b      	movge	r3, r7
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bfc2      	ittt	gt
 800a75e:	eba8 0803 	subgt.w	r8, r8, r3
 800a762:	1aff      	subgt	r7, r7, r3
 800a764:	eba9 0903 	subgt.w	r9, r9, r3
 800a768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dd17      	ble.n	800a79e <_strtod_l+0x75e>
 800a76e:	4631      	mov	r1, r6
 800a770:	461a      	mov	r2, r3
 800a772:	4620      	mov	r0, r4
 800a774:	f002 f866 	bl	800c844 <__pow5mult>
 800a778:	4606      	mov	r6, r0
 800a77a:	2800      	cmp	r0, #0
 800a77c:	f43f aea8 	beq.w	800a4d0 <_strtod_l+0x490>
 800a780:	4601      	mov	r1, r0
 800a782:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a784:	4620      	mov	r0, r4
 800a786:	f001 ffb3 	bl	800c6f0 <__multiply>
 800a78a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a78c:	2800      	cmp	r0, #0
 800a78e:	f43f ae9f 	beq.w	800a4d0 <_strtod_l+0x490>
 800a792:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a794:	4620      	mov	r0, r4
 800a796:	f001 fe93 	bl	800c4c0 <_Bfree>
 800a79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a79c:	9318      	str	r3, [sp, #96]	; 0x60
 800a79e:	f1b8 0f00 	cmp.w	r8, #0
 800a7a2:	f300 808c 	bgt.w	800a8be <_strtod_l+0x87e>
 800a7a6:	9b06      	ldr	r3, [sp, #24]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dd08      	ble.n	800a7be <_strtod_l+0x77e>
 800a7ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7ae:	9905      	ldr	r1, [sp, #20]
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f002 f847 	bl	800c844 <__pow5mult>
 800a7b6:	9005      	str	r0, [sp, #20]
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	f43f ae89 	beq.w	800a4d0 <_strtod_l+0x490>
 800a7be:	2f00      	cmp	r7, #0
 800a7c0:	dd08      	ble.n	800a7d4 <_strtod_l+0x794>
 800a7c2:	9905      	ldr	r1, [sp, #20]
 800a7c4:	463a      	mov	r2, r7
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f002 f896 	bl	800c8f8 <__lshift>
 800a7cc:	9005      	str	r0, [sp, #20]
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f43f ae7e 	beq.w	800a4d0 <_strtod_l+0x490>
 800a7d4:	f1b9 0f00 	cmp.w	r9, #0
 800a7d8:	dd08      	ble.n	800a7ec <_strtod_l+0x7ac>
 800a7da:	4631      	mov	r1, r6
 800a7dc:	464a      	mov	r2, r9
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f002 f88a 	bl	800c8f8 <__lshift>
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f43f ae72 	beq.w	800a4d0 <_strtod_l+0x490>
 800a7ec:	9a05      	ldr	r2, [sp, #20]
 800a7ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f002 f90d 	bl	800ca10 <__mdiff>
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f43f ae69 	beq.w	800a4d0 <_strtod_l+0x490>
 800a7fe:	68c3      	ldr	r3, [r0, #12]
 800a800:	930b      	str	r3, [sp, #44]	; 0x2c
 800a802:	2300      	movs	r3, #0
 800a804:	60c3      	str	r3, [r0, #12]
 800a806:	4631      	mov	r1, r6
 800a808:	f002 f8e6 	bl	800c9d8 <__mcmp>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	da60      	bge.n	800a8d2 <_strtod_l+0x892>
 800a810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a812:	ea53 030a 	orrs.w	r3, r3, sl
 800a816:	f040 8082 	bne.w	800a91e <_strtod_l+0x8de>
 800a81a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d17d      	bne.n	800a91e <_strtod_l+0x8de>
 800a822:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a826:	0d1b      	lsrs	r3, r3, #20
 800a828:	051b      	lsls	r3, r3, #20
 800a82a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a82e:	d976      	bls.n	800a91e <_strtod_l+0x8de>
 800a830:	696b      	ldr	r3, [r5, #20]
 800a832:	b913      	cbnz	r3, 800a83a <_strtod_l+0x7fa>
 800a834:	692b      	ldr	r3, [r5, #16]
 800a836:	2b01      	cmp	r3, #1
 800a838:	dd71      	ble.n	800a91e <_strtod_l+0x8de>
 800a83a:	4629      	mov	r1, r5
 800a83c:	2201      	movs	r2, #1
 800a83e:	4620      	mov	r0, r4
 800a840:	f002 f85a 	bl	800c8f8 <__lshift>
 800a844:	4631      	mov	r1, r6
 800a846:	4605      	mov	r5, r0
 800a848:	f002 f8c6 	bl	800c9d8 <__mcmp>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	dd66      	ble.n	800a91e <_strtod_l+0x8de>
 800a850:	9904      	ldr	r1, [sp, #16]
 800a852:	4a53      	ldr	r2, [pc, #332]	; (800a9a0 <_strtod_l+0x960>)
 800a854:	465b      	mov	r3, fp
 800a856:	2900      	cmp	r1, #0
 800a858:	f000 8081 	beq.w	800a95e <_strtod_l+0x91e>
 800a85c:	ea02 010b 	and.w	r1, r2, fp
 800a860:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a864:	dc7b      	bgt.n	800a95e <_strtod_l+0x91e>
 800a866:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a86a:	f77f aea9 	ble.w	800a5c0 <_strtod_l+0x580>
 800a86e:	4b4d      	ldr	r3, [pc, #308]	; (800a9a4 <_strtod_l+0x964>)
 800a870:	4650      	mov	r0, sl
 800a872:	4659      	mov	r1, fp
 800a874:	2200      	movs	r2, #0
 800a876:	f7f5 febf 	bl	80005f8 <__aeabi_dmul>
 800a87a:	460b      	mov	r3, r1
 800a87c:	4303      	orrs	r3, r0
 800a87e:	bf08      	it	eq
 800a880:	2322      	moveq	r3, #34	; 0x22
 800a882:	4682      	mov	sl, r0
 800a884:	468b      	mov	fp, r1
 800a886:	bf08      	it	eq
 800a888:	6023      	streq	r3, [r4, #0]
 800a88a:	e62b      	b.n	800a4e4 <_strtod_l+0x4a4>
 800a88c:	f04f 32ff 	mov.w	r2, #4294967295
 800a890:	fa02 f303 	lsl.w	r3, r2, r3
 800a894:	ea03 0a0a 	and.w	sl, r3, sl
 800a898:	e6e3      	b.n	800a662 <_strtod_l+0x622>
 800a89a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a89e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a8a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a8a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a8aa:	fa01 f308 	lsl.w	r3, r1, r8
 800a8ae:	9308      	str	r3, [sp, #32]
 800a8b0:	910d      	str	r1, [sp, #52]	; 0x34
 800a8b2:	e746      	b.n	800a742 <_strtod_l+0x702>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	9308      	str	r3, [sp, #32]
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a8bc:	e741      	b.n	800a742 <_strtod_l+0x702>
 800a8be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f002 f818 	bl	800c8f8 <__lshift>
 800a8c8:	9018      	str	r0, [sp, #96]	; 0x60
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	f47f af6b 	bne.w	800a7a6 <_strtod_l+0x766>
 800a8d0:	e5fe      	b.n	800a4d0 <_strtod_l+0x490>
 800a8d2:	465f      	mov	r7, fp
 800a8d4:	d16e      	bne.n	800a9b4 <_strtod_l+0x974>
 800a8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8dc:	b342      	cbz	r2, 800a930 <_strtod_l+0x8f0>
 800a8de:	4a32      	ldr	r2, [pc, #200]	; (800a9a8 <_strtod_l+0x968>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d128      	bne.n	800a936 <_strtod_l+0x8f6>
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	4651      	mov	r1, sl
 800a8e8:	b1eb      	cbz	r3, 800a926 <_strtod_l+0x8e6>
 800a8ea:	4b2d      	ldr	r3, [pc, #180]	; (800a9a0 <_strtod_l+0x960>)
 800a8ec:	403b      	ands	r3, r7
 800a8ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f6:	d819      	bhi.n	800a92c <_strtod_l+0x8ec>
 800a8f8:	0d1b      	lsrs	r3, r3, #20
 800a8fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a902:	4299      	cmp	r1, r3
 800a904:	d117      	bne.n	800a936 <_strtod_l+0x8f6>
 800a906:	4b29      	ldr	r3, [pc, #164]	; (800a9ac <_strtod_l+0x96c>)
 800a908:	429f      	cmp	r7, r3
 800a90a:	d102      	bne.n	800a912 <_strtod_l+0x8d2>
 800a90c:	3101      	adds	r1, #1
 800a90e:	f43f addf 	beq.w	800a4d0 <_strtod_l+0x490>
 800a912:	4b23      	ldr	r3, [pc, #140]	; (800a9a0 <_strtod_l+0x960>)
 800a914:	403b      	ands	r3, r7
 800a916:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a91a:	f04f 0a00 	mov.w	sl, #0
 800a91e:	9b04      	ldr	r3, [sp, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1a4      	bne.n	800a86e <_strtod_l+0x82e>
 800a924:	e5de      	b.n	800a4e4 <_strtod_l+0x4a4>
 800a926:	f04f 33ff 	mov.w	r3, #4294967295
 800a92a:	e7ea      	b.n	800a902 <_strtod_l+0x8c2>
 800a92c:	4613      	mov	r3, r2
 800a92e:	e7e8      	b.n	800a902 <_strtod_l+0x8c2>
 800a930:	ea53 030a 	orrs.w	r3, r3, sl
 800a934:	d08c      	beq.n	800a850 <_strtod_l+0x810>
 800a936:	9b08      	ldr	r3, [sp, #32]
 800a938:	b1db      	cbz	r3, 800a972 <_strtod_l+0x932>
 800a93a:	423b      	tst	r3, r7
 800a93c:	d0ef      	beq.n	800a91e <_strtod_l+0x8de>
 800a93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a940:	9a04      	ldr	r2, [sp, #16]
 800a942:	4650      	mov	r0, sl
 800a944:	4659      	mov	r1, fp
 800a946:	b1c3      	cbz	r3, 800a97a <_strtod_l+0x93a>
 800a948:	f7ff fb5d 	bl	800a006 <sulp>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	ec51 0b18 	vmov	r0, r1, d8
 800a954:	f7f5 fc9a 	bl	800028c <__adddf3>
 800a958:	4682      	mov	sl, r0
 800a95a:	468b      	mov	fp, r1
 800a95c:	e7df      	b.n	800a91e <_strtod_l+0x8de>
 800a95e:	4013      	ands	r3, r2
 800a960:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a964:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a968:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a96c:	f04f 3aff 	mov.w	sl, #4294967295
 800a970:	e7d5      	b.n	800a91e <_strtod_l+0x8de>
 800a972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a974:	ea13 0f0a 	tst.w	r3, sl
 800a978:	e7e0      	b.n	800a93c <_strtod_l+0x8fc>
 800a97a:	f7ff fb44 	bl	800a006 <sulp>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	ec51 0b18 	vmov	r0, r1, d8
 800a986:	f7f5 fc7f 	bl	8000288 <__aeabi_dsub>
 800a98a:	2200      	movs	r2, #0
 800a98c:	2300      	movs	r3, #0
 800a98e:	4682      	mov	sl, r0
 800a990:	468b      	mov	fp, r1
 800a992:	f7f6 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 800a996:	2800      	cmp	r0, #0
 800a998:	d0c1      	beq.n	800a91e <_strtod_l+0x8de>
 800a99a:	e611      	b.n	800a5c0 <_strtod_l+0x580>
 800a99c:	fffffc02 	.word	0xfffffc02
 800a9a0:	7ff00000 	.word	0x7ff00000
 800a9a4:	39500000 	.word	0x39500000
 800a9a8:	000fffff 	.word	0x000fffff
 800a9ac:	7fefffff 	.word	0x7fefffff
 800a9b0:	0800f9e8 	.word	0x0800f9e8
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f002 f98c 	bl	800ccd4 <__ratio>
 800a9bc:	ec59 8b10 	vmov	r8, r9, d0
 800a9c0:	ee10 0a10 	vmov	r0, s0
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	f7f6 f890 	bl	8000af0 <__aeabi_dcmple>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d07a      	beq.n	800aaca <_strtod_l+0xa8a>
 800a9d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d04a      	beq.n	800aa70 <_strtod_l+0xa30>
 800a9da:	4b95      	ldr	r3, [pc, #596]	; (800ac30 <_strtod_l+0xbf0>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ac30 <_strtod_l+0xbf0>
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	4b92      	ldr	r3, [pc, #584]	; (800ac34 <_strtod_l+0xbf4>)
 800a9ec:	403b      	ands	r3, r7
 800a9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a9f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9f2:	4b91      	ldr	r3, [pc, #580]	; (800ac38 <_strtod_l+0xbf8>)
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	f040 80b0 	bne.w	800ab5a <_strtod_l+0xb1a>
 800a9fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800aa02:	ec4b ab10 	vmov	d0, sl, fp
 800aa06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa0a:	f002 f88b 	bl	800cb24 <__ulp>
 800aa0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa12:	ec53 2b10 	vmov	r2, r3, d0
 800aa16:	f7f5 fdef 	bl	80005f8 <__aeabi_dmul>
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	465b      	mov	r3, fp
 800aa1e:	f7f5 fc35 	bl	800028c <__adddf3>
 800aa22:	460b      	mov	r3, r1
 800aa24:	4983      	ldr	r1, [pc, #524]	; (800ac34 <_strtod_l+0xbf4>)
 800aa26:	4a85      	ldr	r2, [pc, #532]	; (800ac3c <_strtod_l+0xbfc>)
 800aa28:	4019      	ands	r1, r3
 800aa2a:	4291      	cmp	r1, r2
 800aa2c:	4682      	mov	sl, r0
 800aa2e:	d960      	bls.n	800aaf2 <_strtod_l+0xab2>
 800aa30:	ee18 3a90 	vmov	r3, s17
 800aa34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d104      	bne.n	800aa46 <_strtod_l+0xa06>
 800aa3c:	ee18 3a10 	vmov	r3, s16
 800aa40:	3301      	adds	r3, #1
 800aa42:	f43f ad45 	beq.w	800a4d0 <_strtod_l+0x490>
 800aa46:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ac48 <_strtod_l+0xc08>
 800aa4a:	f04f 3aff 	mov.w	sl, #4294967295
 800aa4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa50:	4620      	mov	r0, r4
 800aa52:	f001 fd35 	bl	800c4c0 <_Bfree>
 800aa56:	9905      	ldr	r1, [sp, #20]
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f001 fd31 	bl	800c4c0 <_Bfree>
 800aa5e:	4631      	mov	r1, r6
 800aa60:	4620      	mov	r0, r4
 800aa62:	f001 fd2d 	bl	800c4c0 <_Bfree>
 800aa66:	4629      	mov	r1, r5
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f001 fd29 	bl	800c4c0 <_Bfree>
 800aa6e:	e61a      	b.n	800a6a6 <_strtod_l+0x666>
 800aa70:	f1ba 0f00 	cmp.w	sl, #0
 800aa74:	d11b      	bne.n	800aaae <_strtod_l+0xa6e>
 800aa76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa7a:	b9f3      	cbnz	r3, 800aaba <_strtod_l+0xa7a>
 800aa7c:	4b6c      	ldr	r3, [pc, #432]	; (800ac30 <_strtod_l+0xbf0>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4640      	mov	r0, r8
 800aa82:	4649      	mov	r1, r9
 800aa84:	f7f6 f82a 	bl	8000adc <__aeabi_dcmplt>
 800aa88:	b9d0      	cbnz	r0, 800aac0 <_strtod_l+0xa80>
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	4b6c      	ldr	r3, [pc, #432]	; (800ac40 <_strtod_l+0xc00>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	f7f5 fdb1 	bl	80005f8 <__aeabi_dmul>
 800aa96:	4680      	mov	r8, r0
 800aa98:	4689      	mov	r9, r1
 800aa9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800aaa2:	9315      	str	r3, [sp, #84]	; 0x54
 800aaa4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aaa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aaac:	e79d      	b.n	800a9ea <_strtod_l+0x9aa>
 800aaae:	f1ba 0f01 	cmp.w	sl, #1
 800aab2:	d102      	bne.n	800aaba <_strtod_l+0xa7a>
 800aab4:	2f00      	cmp	r7, #0
 800aab6:	f43f ad83 	beq.w	800a5c0 <_strtod_l+0x580>
 800aaba:	4b62      	ldr	r3, [pc, #392]	; (800ac44 <_strtod_l+0xc04>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	e78e      	b.n	800a9de <_strtod_l+0x99e>
 800aac0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ac40 <_strtod_l+0xc00>
 800aac4:	f04f 0800 	mov.w	r8, #0
 800aac8:	e7e7      	b.n	800aa9a <_strtod_l+0xa5a>
 800aaca:	4b5d      	ldr	r3, [pc, #372]	; (800ac40 <_strtod_l+0xc00>)
 800aacc:	4640      	mov	r0, r8
 800aace:	4649      	mov	r1, r9
 800aad0:	2200      	movs	r2, #0
 800aad2:	f7f5 fd91 	bl	80005f8 <__aeabi_dmul>
 800aad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aad8:	4680      	mov	r8, r0
 800aada:	4689      	mov	r9, r1
 800aadc:	b933      	cbnz	r3, 800aaec <_strtod_l+0xaac>
 800aade:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aae2:	900e      	str	r0, [sp, #56]	; 0x38
 800aae4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aae6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aaea:	e7dd      	b.n	800aaa8 <_strtod_l+0xa68>
 800aaec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800aaf0:	e7f9      	b.n	800aae6 <_strtod_l+0xaa6>
 800aaf2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1a8      	bne.n	800aa4e <_strtod_l+0xa0e>
 800aafc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab02:	0d1b      	lsrs	r3, r3, #20
 800ab04:	051b      	lsls	r3, r3, #20
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d1a1      	bne.n	800aa4e <_strtod_l+0xa0e>
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f6 f8d3 	bl	8000cb8 <__aeabi_d2lz>
 800ab12:	f7f5 fd43 	bl	800059c <__aeabi_l2d>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	f7f5 fbb3 	bl	8000288 <__aeabi_dsub>
 800ab22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab28:	ea43 030a 	orr.w	r3, r3, sl
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	4680      	mov	r8, r0
 800ab30:	4689      	mov	r9, r1
 800ab32:	d055      	beq.n	800abe0 <_strtod_l+0xba0>
 800ab34:	a336      	add	r3, pc, #216	; (adr r3, 800ac10 <_strtod_l+0xbd0>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 ffcf 	bl	8000adc <__aeabi_dcmplt>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f47f acd0 	bne.w	800a4e4 <_strtod_l+0x4a4>
 800ab44:	a334      	add	r3, pc, #208	; (adr r3, 800ac18 <_strtod_l+0xbd8>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	f7f5 ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f43f af7b 	beq.w	800aa4e <_strtod_l+0xa0e>
 800ab58:	e4c4      	b.n	800a4e4 <_strtod_l+0x4a4>
 800ab5a:	9b04      	ldr	r3, [sp, #16]
 800ab5c:	b333      	cbz	r3, 800abac <_strtod_l+0xb6c>
 800ab5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab64:	d822      	bhi.n	800abac <_strtod_l+0xb6c>
 800ab66:	a32e      	add	r3, pc, #184	; (adr r3, 800ac20 <_strtod_l+0xbe0>)
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	4649      	mov	r1, r9
 800ab70:	f7f5 ffbe 	bl	8000af0 <__aeabi_dcmple>
 800ab74:	b1a0      	cbz	r0, 800aba0 <_strtod_l+0xb60>
 800ab76:	4649      	mov	r1, r9
 800ab78:	4640      	mov	r0, r8
 800ab7a:	f7f6 f815 	bl	8000ba8 <__aeabi_d2uiz>
 800ab7e:	2801      	cmp	r0, #1
 800ab80:	bf38      	it	cc
 800ab82:	2001      	movcc	r0, #1
 800ab84:	f7f5 fcbe 	bl	8000504 <__aeabi_ui2d>
 800ab88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	4689      	mov	r9, r1
 800ab8e:	bb23      	cbnz	r3, 800abda <_strtod_l+0xb9a>
 800ab90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab94:	9010      	str	r0, [sp, #64]	; 0x40
 800ab96:	9311      	str	r3, [sp, #68]	; 0x44
 800ab98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aba4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aba8:	1a9b      	subs	r3, r3, r2
 800abaa:	9309      	str	r3, [sp, #36]	; 0x24
 800abac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abb0:	eeb0 0a48 	vmov.f32	s0, s16
 800abb4:	eef0 0a68 	vmov.f32	s1, s17
 800abb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abbc:	f001 ffb2 	bl	800cb24 <__ulp>
 800abc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abc4:	ec53 2b10 	vmov	r2, r3, d0
 800abc8:	f7f5 fd16 	bl	80005f8 <__aeabi_dmul>
 800abcc:	ec53 2b18 	vmov	r2, r3, d8
 800abd0:	f7f5 fb5c 	bl	800028c <__adddf3>
 800abd4:	4682      	mov	sl, r0
 800abd6:	468b      	mov	fp, r1
 800abd8:	e78d      	b.n	800aaf6 <_strtod_l+0xab6>
 800abda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800abde:	e7db      	b.n	800ab98 <_strtod_l+0xb58>
 800abe0:	a311      	add	r3, pc, #68	; (adr r3, 800ac28 <_strtod_l+0xbe8>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	f7f5 ff79 	bl	8000adc <__aeabi_dcmplt>
 800abea:	e7b2      	b.n	800ab52 <_strtod_l+0xb12>
 800abec:	2300      	movs	r3, #0
 800abee:	930a      	str	r3, [sp, #40]	; 0x28
 800abf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800abf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	f7ff ba6b 	b.w	800a0d0 <_strtod_l+0x90>
 800abfa:	2a65      	cmp	r2, #101	; 0x65
 800abfc:	f43f ab5f 	beq.w	800a2be <_strtod_l+0x27e>
 800ac00:	2a45      	cmp	r2, #69	; 0x45
 800ac02:	f43f ab5c 	beq.w	800a2be <_strtod_l+0x27e>
 800ac06:	2301      	movs	r3, #1
 800ac08:	f7ff bb94 	b.w	800a334 <_strtod_l+0x2f4>
 800ac0c:	f3af 8000 	nop.w
 800ac10:	94a03595 	.word	0x94a03595
 800ac14:	3fdfffff 	.word	0x3fdfffff
 800ac18:	35afe535 	.word	0x35afe535
 800ac1c:	3fe00000 	.word	0x3fe00000
 800ac20:	ffc00000 	.word	0xffc00000
 800ac24:	41dfffff 	.word	0x41dfffff
 800ac28:	94a03595 	.word	0x94a03595
 800ac2c:	3fcfffff 	.word	0x3fcfffff
 800ac30:	3ff00000 	.word	0x3ff00000
 800ac34:	7ff00000 	.word	0x7ff00000
 800ac38:	7fe00000 	.word	0x7fe00000
 800ac3c:	7c9fffff 	.word	0x7c9fffff
 800ac40:	3fe00000 	.word	0x3fe00000
 800ac44:	bff00000 	.word	0xbff00000
 800ac48:	7fefffff 	.word	0x7fefffff

0800ac4c <_strtod_r>:
 800ac4c:	4b01      	ldr	r3, [pc, #4]	; (800ac54 <_strtod_r+0x8>)
 800ac4e:	f7ff b9f7 	b.w	800a040 <_strtod_l>
 800ac52:	bf00      	nop
 800ac54:	20000074 	.word	0x20000074

0800ac58 <_strtol_l.constprop.0>:
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5e:	d001      	beq.n	800ac64 <_strtol_l.constprop.0+0xc>
 800ac60:	2b24      	cmp	r3, #36	; 0x24
 800ac62:	d906      	bls.n	800ac72 <_strtol_l.constprop.0+0x1a>
 800ac64:	f7fd fd42 	bl	80086ec <__errno>
 800ac68:	2316      	movs	r3, #22
 800ac6a:	6003      	str	r3, [r0, #0]
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad58 <_strtol_l.constprop.0+0x100>
 800ac76:	460d      	mov	r5, r1
 800ac78:	462e      	mov	r6, r5
 800ac7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ac82:	f017 0708 	ands.w	r7, r7, #8
 800ac86:	d1f7      	bne.n	800ac78 <_strtol_l.constprop.0+0x20>
 800ac88:	2c2d      	cmp	r4, #45	; 0x2d
 800ac8a:	d132      	bne.n	800acf2 <_strtol_l.constprop.0+0x9a>
 800ac8c:	782c      	ldrb	r4, [r5, #0]
 800ac8e:	2701      	movs	r7, #1
 800ac90:	1cb5      	adds	r5, r6, #2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d05b      	beq.n	800ad4e <_strtol_l.constprop.0+0xf6>
 800ac96:	2b10      	cmp	r3, #16
 800ac98:	d109      	bne.n	800acae <_strtol_l.constprop.0+0x56>
 800ac9a:	2c30      	cmp	r4, #48	; 0x30
 800ac9c:	d107      	bne.n	800acae <_strtol_l.constprop.0+0x56>
 800ac9e:	782c      	ldrb	r4, [r5, #0]
 800aca0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aca4:	2c58      	cmp	r4, #88	; 0x58
 800aca6:	d14d      	bne.n	800ad44 <_strtol_l.constprop.0+0xec>
 800aca8:	786c      	ldrb	r4, [r5, #1]
 800acaa:	2310      	movs	r3, #16
 800acac:	3502      	adds	r5, #2
 800acae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800acb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800acb6:	f04f 0c00 	mov.w	ip, #0
 800acba:	fbb8 f9f3 	udiv	r9, r8, r3
 800acbe:	4666      	mov	r6, ip
 800acc0:	fb03 8a19 	mls	sl, r3, r9, r8
 800acc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800acc8:	f1be 0f09 	cmp.w	lr, #9
 800accc:	d816      	bhi.n	800acfc <_strtol_l.constprop.0+0xa4>
 800acce:	4674      	mov	r4, lr
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	dd24      	ble.n	800ad1e <_strtol_l.constprop.0+0xc6>
 800acd4:	f1bc 0f00 	cmp.w	ip, #0
 800acd8:	db1e      	blt.n	800ad18 <_strtol_l.constprop.0+0xc0>
 800acda:	45b1      	cmp	r9, r6
 800acdc:	d31c      	bcc.n	800ad18 <_strtol_l.constprop.0+0xc0>
 800acde:	d101      	bne.n	800ace4 <_strtol_l.constprop.0+0x8c>
 800ace0:	45a2      	cmp	sl, r4
 800ace2:	db19      	blt.n	800ad18 <_strtol_l.constprop.0+0xc0>
 800ace4:	fb06 4603 	mla	r6, r6, r3, r4
 800ace8:	f04f 0c01 	mov.w	ip, #1
 800acec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acf0:	e7e8      	b.n	800acc4 <_strtol_l.constprop.0+0x6c>
 800acf2:	2c2b      	cmp	r4, #43	; 0x2b
 800acf4:	bf04      	itt	eq
 800acf6:	782c      	ldrbeq	r4, [r5, #0]
 800acf8:	1cb5      	addeq	r5, r6, #2
 800acfa:	e7ca      	b.n	800ac92 <_strtol_l.constprop.0+0x3a>
 800acfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ad00:	f1be 0f19 	cmp.w	lr, #25
 800ad04:	d801      	bhi.n	800ad0a <_strtol_l.constprop.0+0xb2>
 800ad06:	3c37      	subs	r4, #55	; 0x37
 800ad08:	e7e2      	b.n	800acd0 <_strtol_l.constprop.0+0x78>
 800ad0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ad0e:	f1be 0f19 	cmp.w	lr, #25
 800ad12:	d804      	bhi.n	800ad1e <_strtol_l.constprop.0+0xc6>
 800ad14:	3c57      	subs	r4, #87	; 0x57
 800ad16:	e7db      	b.n	800acd0 <_strtol_l.constprop.0+0x78>
 800ad18:	f04f 3cff 	mov.w	ip, #4294967295
 800ad1c:	e7e6      	b.n	800acec <_strtol_l.constprop.0+0x94>
 800ad1e:	f1bc 0f00 	cmp.w	ip, #0
 800ad22:	da05      	bge.n	800ad30 <_strtol_l.constprop.0+0xd8>
 800ad24:	2322      	movs	r3, #34	; 0x22
 800ad26:	6003      	str	r3, [r0, #0]
 800ad28:	4646      	mov	r6, r8
 800ad2a:	b942      	cbnz	r2, 800ad3e <_strtol_l.constprop.0+0xe6>
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	e79e      	b.n	800ac6e <_strtol_l.constprop.0+0x16>
 800ad30:	b107      	cbz	r7, 800ad34 <_strtol_l.constprop.0+0xdc>
 800ad32:	4276      	negs	r6, r6
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	d0f9      	beq.n	800ad2c <_strtol_l.constprop.0+0xd4>
 800ad38:	f1bc 0f00 	cmp.w	ip, #0
 800ad3c:	d000      	beq.n	800ad40 <_strtol_l.constprop.0+0xe8>
 800ad3e:	1e69      	subs	r1, r5, #1
 800ad40:	6011      	str	r1, [r2, #0]
 800ad42:	e7f3      	b.n	800ad2c <_strtol_l.constprop.0+0xd4>
 800ad44:	2430      	movs	r4, #48	; 0x30
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1b1      	bne.n	800acae <_strtol_l.constprop.0+0x56>
 800ad4a:	2308      	movs	r3, #8
 800ad4c:	e7af      	b.n	800acae <_strtol_l.constprop.0+0x56>
 800ad4e:	2c30      	cmp	r4, #48	; 0x30
 800ad50:	d0a5      	beq.n	800ac9e <_strtol_l.constprop.0+0x46>
 800ad52:	230a      	movs	r3, #10
 800ad54:	e7ab      	b.n	800acae <_strtol_l.constprop.0+0x56>
 800ad56:	bf00      	nop
 800ad58:	0800f80d 	.word	0x0800f80d

0800ad5c <_strtol_r>:
 800ad5c:	f7ff bf7c 	b.w	800ac58 <_strtol_l.constprop.0>

0800ad60 <__swbuf_r>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	460e      	mov	r6, r1
 800ad64:	4614      	mov	r4, r2
 800ad66:	4605      	mov	r5, r0
 800ad68:	b118      	cbz	r0, 800ad72 <__swbuf_r+0x12>
 800ad6a:	6983      	ldr	r3, [r0, #24]
 800ad6c:	b90b      	cbnz	r3, 800ad72 <__swbuf_r+0x12>
 800ad6e:	f7fd fdef 	bl	8008950 <__sinit>
 800ad72:	4b21      	ldr	r3, [pc, #132]	; (800adf8 <__swbuf_r+0x98>)
 800ad74:	429c      	cmp	r4, r3
 800ad76:	d12b      	bne.n	800add0 <__swbuf_r+0x70>
 800ad78:	686c      	ldr	r4, [r5, #4]
 800ad7a:	69a3      	ldr	r3, [r4, #24]
 800ad7c:	60a3      	str	r3, [r4, #8]
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	071a      	lsls	r2, r3, #28
 800ad82:	d52f      	bpl.n	800ade4 <__swbuf_r+0x84>
 800ad84:	6923      	ldr	r3, [r4, #16]
 800ad86:	b36b      	cbz	r3, 800ade4 <__swbuf_r+0x84>
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	6820      	ldr	r0, [r4, #0]
 800ad8c:	1ac0      	subs	r0, r0, r3
 800ad8e:	6963      	ldr	r3, [r4, #20]
 800ad90:	b2f6      	uxtb	r6, r6
 800ad92:	4283      	cmp	r3, r0
 800ad94:	4637      	mov	r7, r6
 800ad96:	dc04      	bgt.n	800ada2 <__swbuf_r+0x42>
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	f7fd fd32 	bl	8008804 <_fflush_r>
 800ada0:	bb30      	cbnz	r0, 800adf0 <__swbuf_r+0x90>
 800ada2:	68a3      	ldr	r3, [r4, #8]
 800ada4:	3b01      	subs	r3, #1
 800ada6:	60a3      	str	r3, [r4, #8]
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	6022      	str	r2, [r4, #0]
 800adae:	701e      	strb	r6, [r3, #0]
 800adb0:	6963      	ldr	r3, [r4, #20]
 800adb2:	3001      	adds	r0, #1
 800adb4:	4283      	cmp	r3, r0
 800adb6:	d004      	beq.n	800adc2 <__swbuf_r+0x62>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	07db      	lsls	r3, r3, #31
 800adbc:	d506      	bpl.n	800adcc <__swbuf_r+0x6c>
 800adbe:	2e0a      	cmp	r6, #10
 800adc0:	d104      	bne.n	800adcc <__swbuf_r+0x6c>
 800adc2:	4621      	mov	r1, r4
 800adc4:	4628      	mov	r0, r5
 800adc6:	f7fd fd1d 	bl	8008804 <_fflush_r>
 800adca:	b988      	cbnz	r0, 800adf0 <__swbuf_r+0x90>
 800adcc:	4638      	mov	r0, r7
 800adce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <__swbuf_r+0x9c>)
 800add2:	429c      	cmp	r4, r3
 800add4:	d101      	bne.n	800adda <__swbuf_r+0x7a>
 800add6:	68ac      	ldr	r4, [r5, #8]
 800add8:	e7cf      	b.n	800ad7a <__swbuf_r+0x1a>
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <__swbuf_r+0xa0>)
 800addc:	429c      	cmp	r4, r3
 800adde:	bf08      	it	eq
 800ade0:	68ec      	ldreq	r4, [r5, #12]
 800ade2:	e7ca      	b.n	800ad7a <__swbuf_r+0x1a>
 800ade4:	4621      	mov	r1, r4
 800ade6:	4628      	mov	r0, r5
 800ade8:	f000 f81e 	bl	800ae28 <__swsetup_r>
 800adec:	2800      	cmp	r0, #0
 800adee:	d0cb      	beq.n	800ad88 <__swbuf_r+0x28>
 800adf0:	f04f 37ff 	mov.w	r7, #4294967295
 800adf4:	e7ea      	b.n	800adcc <__swbuf_r+0x6c>
 800adf6:	bf00      	nop
 800adf8:	0800f930 	.word	0x0800f930
 800adfc:	0800f950 	.word	0x0800f950
 800ae00:	0800f910 	.word	0x0800f910

0800ae04 <_write_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	; (800ae24 <_write_r+0x20>)
 800ae08:	4604      	mov	r4, r0
 800ae0a:	4608      	mov	r0, r1
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	602a      	str	r2, [r5, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f7f6 fa6f 	bl	80012f6 <_write>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_write_r+0x1e>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_write_r+0x1e>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	20000ee8 	.word	0x20000ee8

0800ae28 <__swsetup_r>:
 800ae28:	4b32      	ldr	r3, [pc, #200]	; (800aef4 <__swsetup_r+0xcc>)
 800ae2a:	b570      	push	{r4, r5, r6, lr}
 800ae2c:	681d      	ldr	r5, [r3, #0]
 800ae2e:	4606      	mov	r6, r0
 800ae30:	460c      	mov	r4, r1
 800ae32:	b125      	cbz	r5, 800ae3e <__swsetup_r+0x16>
 800ae34:	69ab      	ldr	r3, [r5, #24]
 800ae36:	b913      	cbnz	r3, 800ae3e <__swsetup_r+0x16>
 800ae38:	4628      	mov	r0, r5
 800ae3a:	f7fd fd89 	bl	8008950 <__sinit>
 800ae3e:	4b2e      	ldr	r3, [pc, #184]	; (800aef8 <__swsetup_r+0xd0>)
 800ae40:	429c      	cmp	r4, r3
 800ae42:	d10f      	bne.n	800ae64 <__swsetup_r+0x3c>
 800ae44:	686c      	ldr	r4, [r5, #4]
 800ae46:	89a3      	ldrh	r3, [r4, #12]
 800ae48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae4c:	0719      	lsls	r1, r3, #28
 800ae4e:	d42c      	bmi.n	800aeaa <__swsetup_r+0x82>
 800ae50:	06dd      	lsls	r5, r3, #27
 800ae52:	d411      	bmi.n	800ae78 <__swsetup_r+0x50>
 800ae54:	2309      	movs	r3, #9
 800ae56:	6033      	str	r3, [r6, #0]
 800ae58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae62:	e03e      	b.n	800aee2 <__swsetup_r+0xba>
 800ae64:	4b25      	ldr	r3, [pc, #148]	; (800aefc <__swsetup_r+0xd4>)
 800ae66:	429c      	cmp	r4, r3
 800ae68:	d101      	bne.n	800ae6e <__swsetup_r+0x46>
 800ae6a:	68ac      	ldr	r4, [r5, #8]
 800ae6c:	e7eb      	b.n	800ae46 <__swsetup_r+0x1e>
 800ae6e:	4b24      	ldr	r3, [pc, #144]	; (800af00 <__swsetup_r+0xd8>)
 800ae70:	429c      	cmp	r4, r3
 800ae72:	bf08      	it	eq
 800ae74:	68ec      	ldreq	r4, [r5, #12]
 800ae76:	e7e6      	b.n	800ae46 <__swsetup_r+0x1e>
 800ae78:	0758      	lsls	r0, r3, #29
 800ae7a:	d512      	bpl.n	800aea2 <__swsetup_r+0x7a>
 800ae7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae7e:	b141      	cbz	r1, 800ae92 <__swsetup_r+0x6a>
 800ae80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae84:	4299      	cmp	r1, r3
 800ae86:	d002      	beq.n	800ae8e <__swsetup_r+0x66>
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f7fd ff3d 	bl	8008d08 <_free_r>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	6363      	str	r3, [r4, #52]	; 0x34
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	6063      	str	r3, [r4, #4]
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f043 0308 	orr.w	r3, r3, #8
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	6923      	ldr	r3, [r4, #16]
 800aeac:	b94b      	cbnz	r3, 800aec2 <__swsetup_r+0x9a>
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aeb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeb8:	d003      	beq.n	800aec2 <__swsetup_r+0x9a>
 800aeba:	4621      	mov	r1, r4
 800aebc:	4630      	mov	r0, r6
 800aebe:	f001 fa61 	bl	800c384 <__smakebuf_r>
 800aec2:	89a0      	ldrh	r0, [r4, #12]
 800aec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aec8:	f010 0301 	ands.w	r3, r0, #1
 800aecc:	d00a      	beq.n	800aee4 <__swsetup_r+0xbc>
 800aece:	2300      	movs	r3, #0
 800aed0:	60a3      	str	r3, [r4, #8]
 800aed2:	6963      	ldr	r3, [r4, #20]
 800aed4:	425b      	negs	r3, r3
 800aed6:	61a3      	str	r3, [r4, #24]
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	b943      	cbnz	r3, 800aeee <__swsetup_r+0xc6>
 800aedc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aee0:	d1ba      	bne.n	800ae58 <__swsetup_r+0x30>
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	0781      	lsls	r1, r0, #30
 800aee6:	bf58      	it	pl
 800aee8:	6963      	ldrpl	r3, [r4, #20]
 800aeea:	60a3      	str	r3, [r4, #8]
 800aeec:	e7f4      	b.n	800aed8 <__swsetup_r+0xb0>
 800aeee:	2000      	movs	r0, #0
 800aef0:	e7f7      	b.n	800aee2 <__swsetup_r+0xba>
 800aef2:	bf00      	nop
 800aef4:	2000000c 	.word	0x2000000c
 800aef8:	0800f930 	.word	0x0800f930
 800aefc:	0800f950 	.word	0x0800f950
 800af00:	0800f910 	.word	0x0800f910

0800af04 <abort>:
 800af04:	b508      	push	{r3, lr}
 800af06:	2006      	movs	r0, #6
 800af08:	f002 f92a 	bl	800d160 <raise>
 800af0c:	2001      	movs	r0, #1
 800af0e:	f7f6 f9cb 	bl	80012a8 <_exit>
	...

0800af14 <_close_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d06      	ldr	r5, [pc, #24]	; (800af30 <_close_r+0x1c>)
 800af18:	2300      	movs	r3, #0
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	f7f6 fa05 	bl	800132e <_close>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_close_r+0x1a>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_close_r+0x1a>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	20000ee8 	.word	0x20000ee8

0800af34 <quorem>:
 800af34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	6903      	ldr	r3, [r0, #16]
 800af3a:	690c      	ldr	r4, [r1, #16]
 800af3c:	42a3      	cmp	r3, r4
 800af3e:	4607      	mov	r7, r0
 800af40:	f2c0 8081 	blt.w	800b046 <quorem+0x112>
 800af44:	3c01      	subs	r4, #1
 800af46:	f101 0814 	add.w	r8, r1, #20
 800af4a:	f100 0514 	add.w	r5, r0, #20
 800af4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af5c:	3301      	adds	r3, #1
 800af5e:	429a      	cmp	r2, r3
 800af60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af68:	fbb2 f6f3 	udiv	r6, r2, r3
 800af6c:	d331      	bcc.n	800afd2 <quorem+0x9e>
 800af6e:	f04f 0e00 	mov.w	lr, #0
 800af72:	4640      	mov	r0, r8
 800af74:	46ac      	mov	ip, r5
 800af76:	46f2      	mov	sl, lr
 800af78:	f850 2b04 	ldr.w	r2, [r0], #4
 800af7c:	b293      	uxth	r3, r2
 800af7e:	fb06 e303 	mla	r3, r6, r3, lr
 800af82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af86:	b29b      	uxth	r3, r3
 800af88:	ebaa 0303 	sub.w	r3, sl, r3
 800af8c:	f8dc a000 	ldr.w	sl, [ip]
 800af90:	0c12      	lsrs	r2, r2, #16
 800af92:	fa13 f38a 	uxtah	r3, r3, sl
 800af96:	fb06 e202 	mla	r2, r6, r2, lr
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	9b00      	ldr	r3, [sp, #0]
 800af9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afa2:	b292      	uxth	r2, r2
 800afa4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afac:	f8bd 3000 	ldrh.w	r3, [sp]
 800afb0:	4581      	cmp	r9, r0
 800afb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afb6:	f84c 3b04 	str.w	r3, [ip], #4
 800afba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afbe:	d2db      	bcs.n	800af78 <quorem+0x44>
 800afc0:	f855 300b 	ldr.w	r3, [r5, fp]
 800afc4:	b92b      	cbnz	r3, 800afd2 <quorem+0x9e>
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	3b04      	subs	r3, #4
 800afca:	429d      	cmp	r5, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	d32e      	bcc.n	800b02e <quorem+0xfa>
 800afd0:	613c      	str	r4, [r7, #16]
 800afd2:	4638      	mov	r0, r7
 800afd4:	f001 fd00 	bl	800c9d8 <__mcmp>
 800afd8:	2800      	cmp	r0, #0
 800afda:	db24      	blt.n	800b026 <quorem+0xf2>
 800afdc:	3601      	adds	r6, #1
 800afde:	4628      	mov	r0, r5
 800afe0:	f04f 0c00 	mov.w	ip, #0
 800afe4:	f858 2b04 	ldr.w	r2, [r8], #4
 800afe8:	f8d0 e000 	ldr.w	lr, [r0]
 800afec:	b293      	uxth	r3, r2
 800afee:	ebac 0303 	sub.w	r3, ip, r3
 800aff2:	0c12      	lsrs	r2, r2, #16
 800aff4:	fa13 f38e 	uxtah	r3, r3, lr
 800aff8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800affc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b000:	b29b      	uxth	r3, r3
 800b002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b006:	45c1      	cmp	r9, r8
 800b008:	f840 3b04 	str.w	r3, [r0], #4
 800b00c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b010:	d2e8      	bcs.n	800afe4 <quorem+0xb0>
 800b012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b01a:	b922      	cbnz	r2, 800b026 <quorem+0xf2>
 800b01c:	3b04      	subs	r3, #4
 800b01e:	429d      	cmp	r5, r3
 800b020:	461a      	mov	r2, r3
 800b022:	d30a      	bcc.n	800b03a <quorem+0x106>
 800b024:	613c      	str	r4, [r7, #16]
 800b026:	4630      	mov	r0, r6
 800b028:	b003      	add	sp, #12
 800b02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b02e:	6812      	ldr	r2, [r2, #0]
 800b030:	3b04      	subs	r3, #4
 800b032:	2a00      	cmp	r2, #0
 800b034:	d1cc      	bne.n	800afd0 <quorem+0x9c>
 800b036:	3c01      	subs	r4, #1
 800b038:	e7c7      	b.n	800afca <quorem+0x96>
 800b03a:	6812      	ldr	r2, [r2, #0]
 800b03c:	3b04      	subs	r3, #4
 800b03e:	2a00      	cmp	r2, #0
 800b040:	d1f0      	bne.n	800b024 <quorem+0xf0>
 800b042:	3c01      	subs	r4, #1
 800b044:	e7eb      	b.n	800b01e <quorem+0xea>
 800b046:	2000      	movs	r0, #0
 800b048:	e7ee      	b.n	800b028 <quorem+0xf4>
 800b04a:	0000      	movs	r0, r0
 800b04c:	0000      	movs	r0, r0
	...

0800b050 <_dtoa_r>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	ed2d 8b04 	vpush	{d8-d9}
 800b058:	ec57 6b10 	vmov	r6, r7, d0
 800b05c:	b093      	sub	sp, #76	; 0x4c
 800b05e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b060:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b064:	9106      	str	r1, [sp, #24]
 800b066:	ee10 aa10 	vmov	sl, s0
 800b06a:	4604      	mov	r4, r0
 800b06c:	9209      	str	r2, [sp, #36]	; 0x24
 800b06e:	930c      	str	r3, [sp, #48]	; 0x30
 800b070:	46bb      	mov	fp, r7
 800b072:	b975      	cbnz	r5, 800b092 <_dtoa_r+0x42>
 800b074:	2010      	movs	r0, #16
 800b076:	f7fd fdf1 	bl	8008c5c <malloc>
 800b07a:	4602      	mov	r2, r0
 800b07c:	6260      	str	r0, [r4, #36]	; 0x24
 800b07e:	b920      	cbnz	r0, 800b08a <_dtoa_r+0x3a>
 800b080:	4ba7      	ldr	r3, [pc, #668]	; (800b320 <_dtoa_r+0x2d0>)
 800b082:	21ea      	movs	r1, #234	; 0xea
 800b084:	48a7      	ldr	r0, [pc, #668]	; (800b324 <_dtoa_r+0x2d4>)
 800b086:	f7fd fb0b 	bl	80086a0 <__assert_func>
 800b08a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b08e:	6005      	str	r5, [r0, #0]
 800b090:	60c5      	str	r5, [r0, #12]
 800b092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b094:	6819      	ldr	r1, [r3, #0]
 800b096:	b151      	cbz	r1, 800b0ae <_dtoa_r+0x5e>
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	604a      	str	r2, [r1, #4]
 800b09c:	2301      	movs	r3, #1
 800b09e:	4093      	lsls	r3, r2
 800b0a0:	608b      	str	r3, [r1, #8]
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f001 fa0c 	bl	800c4c0 <_Bfree>
 800b0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	1e3b      	subs	r3, r7, #0
 800b0b0:	bfaa      	itet	ge
 800b0b2:	2300      	movge	r3, #0
 800b0b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b0b8:	f8c8 3000 	strge.w	r3, [r8]
 800b0bc:	4b9a      	ldr	r3, [pc, #616]	; (800b328 <_dtoa_r+0x2d8>)
 800b0be:	bfbc      	itt	lt
 800b0c0:	2201      	movlt	r2, #1
 800b0c2:	f8c8 2000 	strlt.w	r2, [r8]
 800b0c6:	ea33 030b 	bics.w	r3, r3, fp
 800b0ca:	d11b      	bne.n	800b104 <_dtoa_r+0xb4>
 800b0cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0d8:	4333      	orrs	r3, r6
 800b0da:	f000 8592 	beq.w	800bc02 <_dtoa_r+0xbb2>
 800b0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0e0:	b963      	cbnz	r3, 800b0fc <_dtoa_r+0xac>
 800b0e2:	4b92      	ldr	r3, [pc, #584]	; (800b32c <_dtoa_r+0x2dc>)
 800b0e4:	e022      	b.n	800b12c <_dtoa_r+0xdc>
 800b0e6:	4b92      	ldr	r3, [pc, #584]	; (800b330 <_dtoa_r+0x2e0>)
 800b0e8:	9301      	str	r3, [sp, #4]
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	9801      	ldr	r0, [sp, #4]
 800b0f2:	b013      	add	sp, #76	; 0x4c
 800b0f4:	ecbd 8b04 	vpop	{d8-d9}
 800b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	4b8b      	ldr	r3, [pc, #556]	; (800b32c <_dtoa_r+0x2dc>)
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	3303      	adds	r3, #3
 800b102:	e7f3      	b.n	800b0ec <_dtoa_r+0x9c>
 800b104:	2200      	movs	r2, #0
 800b106:	2300      	movs	r3, #0
 800b108:	4650      	mov	r0, sl
 800b10a:	4659      	mov	r1, fp
 800b10c:	f7f5 fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b110:	ec4b ab19 	vmov	d9, sl, fp
 800b114:	4680      	mov	r8, r0
 800b116:	b158      	cbz	r0, 800b130 <_dtoa_r+0xe0>
 800b118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b11a:	2301      	movs	r3, #1
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 856b 	beq.w	800bbfc <_dtoa_r+0xbac>
 800b126:	4883      	ldr	r0, [pc, #524]	; (800b334 <_dtoa_r+0x2e4>)
 800b128:	6018      	str	r0, [r3, #0]
 800b12a:	1e43      	subs	r3, r0, #1
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	e7df      	b.n	800b0f0 <_dtoa_r+0xa0>
 800b130:	ec4b ab10 	vmov	d0, sl, fp
 800b134:	aa10      	add	r2, sp, #64	; 0x40
 800b136:	a911      	add	r1, sp, #68	; 0x44
 800b138:	4620      	mov	r0, r4
 800b13a:	f001 fd6f 	bl	800cc1c <__d2b>
 800b13e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b142:	ee08 0a10 	vmov	s16, r0
 800b146:	2d00      	cmp	r5, #0
 800b148:	f000 8084 	beq.w	800b254 <_dtoa_r+0x204>
 800b14c:	ee19 3a90 	vmov	r3, s19
 800b150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b154:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b158:	4656      	mov	r6, sl
 800b15a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b15e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b162:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b166:	4b74      	ldr	r3, [pc, #464]	; (800b338 <_dtoa_r+0x2e8>)
 800b168:	2200      	movs	r2, #0
 800b16a:	4630      	mov	r0, r6
 800b16c:	4639      	mov	r1, r7
 800b16e:	f7f5 f88b 	bl	8000288 <__aeabi_dsub>
 800b172:	a365      	add	r3, pc, #404	; (adr r3, 800b308 <_dtoa_r+0x2b8>)
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f7f5 fa3e 	bl	80005f8 <__aeabi_dmul>
 800b17c:	a364      	add	r3, pc, #400	; (adr r3, 800b310 <_dtoa_r+0x2c0>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f7f5 f883 	bl	800028c <__adddf3>
 800b186:	4606      	mov	r6, r0
 800b188:	4628      	mov	r0, r5
 800b18a:	460f      	mov	r7, r1
 800b18c:	f7f5 f9ca 	bl	8000524 <__aeabi_i2d>
 800b190:	a361      	add	r3, pc, #388	; (adr r3, 800b318 <_dtoa_r+0x2c8>)
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f7f5 fa2f 	bl	80005f8 <__aeabi_dmul>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	f7f5 f873 	bl	800028c <__adddf3>
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	f7f5 fcd5 	bl	8000b58 <__aeabi_d2iz>
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	9000      	str	r0, [sp, #0]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 fc90 	bl	8000adc <__aeabi_dcmplt>
 800b1bc:	b150      	cbz	r0, 800b1d4 <_dtoa_r+0x184>
 800b1be:	9800      	ldr	r0, [sp, #0]
 800b1c0:	f7f5 f9b0 	bl	8000524 <__aeabi_i2d>
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	f7f5 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1cc:	b910      	cbnz	r0, 800b1d4 <_dtoa_r+0x184>
 800b1ce:	9b00      	ldr	r3, [sp, #0]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	9b00      	ldr	r3, [sp, #0]
 800b1d6:	2b16      	cmp	r3, #22
 800b1d8:	d85a      	bhi.n	800b290 <_dtoa_r+0x240>
 800b1da:	9a00      	ldr	r2, [sp, #0]
 800b1dc:	4b57      	ldr	r3, [pc, #348]	; (800b33c <_dtoa_r+0x2ec>)
 800b1de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e6:	ec51 0b19 	vmov	r0, r1, d9
 800b1ea:	f7f5 fc77 	bl	8000adc <__aeabi_dcmplt>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d050      	beq.n	800b294 <_dtoa_r+0x244>
 800b1f2:	9b00      	ldr	r3, [sp, #0]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1fe:	1b5d      	subs	r5, r3, r5
 800b200:	1e6b      	subs	r3, r5, #1
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	bf45      	ittet	mi
 800b206:	f1c5 0301 	rsbmi	r3, r5, #1
 800b20a:	9304      	strmi	r3, [sp, #16]
 800b20c:	2300      	movpl	r3, #0
 800b20e:	2300      	movmi	r3, #0
 800b210:	bf4c      	ite	mi
 800b212:	9305      	strmi	r3, [sp, #20]
 800b214:	9304      	strpl	r3, [sp, #16]
 800b216:	9b00      	ldr	r3, [sp, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	db3d      	blt.n	800b298 <_dtoa_r+0x248>
 800b21c:	9b05      	ldr	r3, [sp, #20]
 800b21e:	9a00      	ldr	r2, [sp, #0]
 800b220:	920a      	str	r2, [sp, #40]	; 0x28
 800b222:	4413      	add	r3, r2
 800b224:	9305      	str	r3, [sp, #20]
 800b226:	2300      	movs	r3, #0
 800b228:	9307      	str	r3, [sp, #28]
 800b22a:	9b06      	ldr	r3, [sp, #24]
 800b22c:	2b09      	cmp	r3, #9
 800b22e:	f200 8089 	bhi.w	800b344 <_dtoa_r+0x2f4>
 800b232:	2b05      	cmp	r3, #5
 800b234:	bfc4      	itt	gt
 800b236:	3b04      	subgt	r3, #4
 800b238:	9306      	strgt	r3, [sp, #24]
 800b23a:	9b06      	ldr	r3, [sp, #24]
 800b23c:	f1a3 0302 	sub.w	r3, r3, #2
 800b240:	bfcc      	ite	gt
 800b242:	2500      	movgt	r5, #0
 800b244:	2501      	movle	r5, #1
 800b246:	2b03      	cmp	r3, #3
 800b248:	f200 8087 	bhi.w	800b35a <_dtoa_r+0x30a>
 800b24c:	e8df f003 	tbb	[pc, r3]
 800b250:	59383a2d 	.word	0x59383a2d
 800b254:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b258:	441d      	add	r5, r3
 800b25a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b25e:	2b20      	cmp	r3, #32
 800b260:	bfc1      	itttt	gt
 800b262:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b266:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b26a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b26e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b272:	bfda      	itte	le
 800b274:	f1c3 0320 	rsble	r3, r3, #32
 800b278:	fa06 f003 	lslle.w	r0, r6, r3
 800b27c:	4318      	orrgt	r0, r3
 800b27e:	f7f5 f941 	bl	8000504 <__aeabi_ui2d>
 800b282:	2301      	movs	r3, #1
 800b284:	4606      	mov	r6, r0
 800b286:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b28a:	3d01      	subs	r5, #1
 800b28c:	930e      	str	r3, [sp, #56]	; 0x38
 800b28e:	e76a      	b.n	800b166 <_dtoa_r+0x116>
 800b290:	2301      	movs	r3, #1
 800b292:	e7b2      	b.n	800b1fa <_dtoa_r+0x1aa>
 800b294:	900b      	str	r0, [sp, #44]	; 0x2c
 800b296:	e7b1      	b.n	800b1fc <_dtoa_r+0x1ac>
 800b298:	9b04      	ldr	r3, [sp, #16]
 800b29a:	9a00      	ldr	r2, [sp, #0]
 800b29c:	1a9b      	subs	r3, r3, r2
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	4253      	negs	r3, r2
 800b2a2:	9307      	str	r3, [sp, #28]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2a8:	e7bf      	b.n	800b22a <_dtoa_r+0x1da>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	9308      	str	r3, [sp, #32]
 800b2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dc55      	bgt.n	800b360 <_dtoa_r+0x310>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b2be:	e00c      	b.n	800b2da <_dtoa_r+0x28a>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e7f3      	b.n	800b2ac <_dtoa_r+0x25c>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c8:	9308      	str	r3, [sp, #32]
 800b2ca:	9b00      	ldr	r3, [sp, #0]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	9302      	str	r3, [sp, #8]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	9303      	str	r3, [sp, #12]
 800b2d6:	bfb8      	it	lt
 800b2d8:	2301      	movlt	r3, #1
 800b2da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2dc:	2200      	movs	r2, #0
 800b2de:	6042      	str	r2, [r0, #4]
 800b2e0:	2204      	movs	r2, #4
 800b2e2:	f102 0614 	add.w	r6, r2, #20
 800b2e6:	429e      	cmp	r6, r3
 800b2e8:	6841      	ldr	r1, [r0, #4]
 800b2ea:	d93d      	bls.n	800b368 <_dtoa_r+0x318>
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f001 f8a7 	bl	800c440 <_Balloc>
 800b2f2:	9001      	str	r0, [sp, #4]
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d13b      	bne.n	800b370 <_dtoa_r+0x320>
 800b2f8:	4b11      	ldr	r3, [pc, #68]	; (800b340 <_dtoa_r+0x2f0>)
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b300:	e6c0      	b.n	800b084 <_dtoa_r+0x34>
 800b302:	2301      	movs	r3, #1
 800b304:	e7df      	b.n	800b2c6 <_dtoa_r+0x276>
 800b306:	bf00      	nop
 800b308:	636f4361 	.word	0x636f4361
 800b30c:	3fd287a7 	.word	0x3fd287a7
 800b310:	8b60c8b3 	.word	0x8b60c8b3
 800b314:	3fc68a28 	.word	0x3fc68a28
 800b318:	509f79fb 	.word	0x509f79fb
 800b31c:	3fd34413 	.word	0x3fd34413
 800b320:	0800fa1d 	.word	0x0800fa1d
 800b324:	0800fa34 	.word	0x0800fa34
 800b328:	7ff00000 	.word	0x7ff00000
 800b32c:	0800fa19 	.word	0x0800fa19
 800b330:	0800fa10 	.word	0x0800fa10
 800b334:	0800f996 	.word	0x0800f996
 800b338:	3ff80000 	.word	0x3ff80000
 800b33c:	0800fba0 	.word	0x0800fba0
 800b340:	0800fa8f 	.word	0x0800fa8f
 800b344:	2501      	movs	r5, #1
 800b346:	2300      	movs	r3, #0
 800b348:	9306      	str	r3, [sp, #24]
 800b34a:	9508      	str	r5, [sp, #32]
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295
 800b350:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b354:	2200      	movs	r2, #0
 800b356:	2312      	movs	r3, #18
 800b358:	e7b0      	b.n	800b2bc <_dtoa_r+0x26c>
 800b35a:	2301      	movs	r3, #1
 800b35c:	9308      	str	r3, [sp, #32]
 800b35e:	e7f5      	b.n	800b34c <_dtoa_r+0x2fc>
 800b360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b362:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b366:	e7b8      	b.n	800b2da <_dtoa_r+0x28a>
 800b368:	3101      	adds	r1, #1
 800b36a:	6041      	str	r1, [r0, #4]
 800b36c:	0052      	lsls	r2, r2, #1
 800b36e:	e7b8      	b.n	800b2e2 <_dtoa_r+0x292>
 800b370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b372:	9a01      	ldr	r2, [sp, #4]
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	9b03      	ldr	r3, [sp, #12]
 800b378:	2b0e      	cmp	r3, #14
 800b37a:	f200 809d 	bhi.w	800b4b8 <_dtoa_r+0x468>
 800b37e:	2d00      	cmp	r5, #0
 800b380:	f000 809a 	beq.w	800b4b8 <_dtoa_r+0x468>
 800b384:	9b00      	ldr	r3, [sp, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	dd32      	ble.n	800b3f0 <_dtoa_r+0x3a0>
 800b38a:	4ab7      	ldr	r2, [pc, #732]	; (800b668 <_dtoa_r+0x618>)
 800b38c:	f003 030f 	and.w	r3, r3, #15
 800b390:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b394:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b398:	9b00      	ldr	r3, [sp, #0]
 800b39a:	05d8      	lsls	r0, r3, #23
 800b39c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b3a0:	d516      	bpl.n	800b3d0 <_dtoa_r+0x380>
 800b3a2:	4bb2      	ldr	r3, [pc, #712]	; (800b66c <_dtoa_r+0x61c>)
 800b3a4:	ec51 0b19 	vmov	r0, r1, d9
 800b3a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3ac:	f7f5 fa4e 	bl	800084c <__aeabi_ddiv>
 800b3b0:	f007 070f 	and.w	r7, r7, #15
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	468b      	mov	fp, r1
 800b3b8:	2503      	movs	r5, #3
 800b3ba:	4eac      	ldr	r6, [pc, #688]	; (800b66c <_dtoa_r+0x61c>)
 800b3bc:	b957      	cbnz	r7, 800b3d4 <_dtoa_r+0x384>
 800b3be:	4642      	mov	r2, r8
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	4659      	mov	r1, fp
 800b3c6:	f7f5 fa41 	bl	800084c <__aeabi_ddiv>
 800b3ca:	4682      	mov	sl, r0
 800b3cc:	468b      	mov	fp, r1
 800b3ce:	e028      	b.n	800b422 <_dtoa_r+0x3d2>
 800b3d0:	2502      	movs	r5, #2
 800b3d2:	e7f2      	b.n	800b3ba <_dtoa_r+0x36a>
 800b3d4:	07f9      	lsls	r1, r7, #31
 800b3d6:	d508      	bpl.n	800b3ea <_dtoa_r+0x39a>
 800b3d8:	4640      	mov	r0, r8
 800b3da:	4649      	mov	r1, r9
 800b3dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3e0:	f7f5 f90a 	bl	80005f8 <__aeabi_dmul>
 800b3e4:	3501      	adds	r5, #1
 800b3e6:	4680      	mov	r8, r0
 800b3e8:	4689      	mov	r9, r1
 800b3ea:	107f      	asrs	r7, r7, #1
 800b3ec:	3608      	adds	r6, #8
 800b3ee:	e7e5      	b.n	800b3bc <_dtoa_r+0x36c>
 800b3f0:	f000 809b 	beq.w	800b52a <_dtoa_r+0x4da>
 800b3f4:	9b00      	ldr	r3, [sp, #0]
 800b3f6:	4f9d      	ldr	r7, [pc, #628]	; (800b66c <_dtoa_r+0x61c>)
 800b3f8:	425e      	negs	r6, r3
 800b3fa:	4b9b      	ldr	r3, [pc, #620]	; (800b668 <_dtoa_r+0x618>)
 800b3fc:	f006 020f 	and.w	r2, r6, #15
 800b400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	ec51 0b19 	vmov	r0, r1, d9
 800b40c:	f7f5 f8f4 	bl	80005f8 <__aeabi_dmul>
 800b410:	1136      	asrs	r6, r6, #4
 800b412:	4682      	mov	sl, r0
 800b414:	468b      	mov	fp, r1
 800b416:	2300      	movs	r3, #0
 800b418:	2502      	movs	r5, #2
 800b41a:	2e00      	cmp	r6, #0
 800b41c:	d17a      	bne.n	800b514 <_dtoa_r+0x4c4>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1d3      	bne.n	800b3ca <_dtoa_r+0x37a>
 800b422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 8082 	beq.w	800b52e <_dtoa_r+0x4de>
 800b42a:	4b91      	ldr	r3, [pc, #580]	; (800b670 <_dtoa_r+0x620>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	4650      	mov	r0, sl
 800b430:	4659      	mov	r1, fp
 800b432:	f7f5 fb53 	bl	8000adc <__aeabi_dcmplt>
 800b436:	2800      	cmp	r0, #0
 800b438:	d079      	beq.n	800b52e <_dtoa_r+0x4de>
 800b43a:	9b03      	ldr	r3, [sp, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d076      	beq.n	800b52e <_dtoa_r+0x4de>
 800b440:	9b02      	ldr	r3, [sp, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	dd36      	ble.n	800b4b4 <_dtoa_r+0x464>
 800b446:	9b00      	ldr	r3, [sp, #0]
 800b448:	4650      	mov	r0, sl
 800b44a:	4659      	mov	r1, fp
 800b44c:	1e5f      	subs	r7, r3, #1
 800b44e:	2200      	movs	r2, #0
 800b450:	4b88      	ldr	r3, [pc, #544]	; (800b674 <_dtoa_r+0x624>)
 800b452:	f7f5 f8d1 	bl	80005f8 <__aeabi_dmul>
 800b456:	9e02      	ldr	r6, [sp, #8]
 800b458:	4682      	mov	sl, r0
 800b45a:	468b      	mov	fp, r1
 800b45c:	3501      	adds	r5, #1
 800b45e:	4628      	mov	r0, r5
 800b460:	f7f5 f860 	bl	8000524 <__aeabi_i2d>
 800b464:	4652      	mov	r2, sl
 800b466:	465b      	mov	r3, fp
 800b468:	f7f5 f8c6 	bl	80005f8 <__aeabi_dmul>
 800b46c:	4b82      	ldr	r3, [pc, #520]	; (800b678 <_dtoa_r+0x628>)
 800b46e:	2200      	movs	r2, #0
 800b470:	f7f4 ff0c 	bl	800028c <__adddf3>
 800b474:	46d0      	mov	r8, sl
 800b476:	46d9      	mov	r9, fp
 800b478:	4682      	mov	sl, r0
 800b47a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b47e:	2e00      	cmp	r6, #0
 800b480:	d158      	bne.n	800b534 <_dtoa_r+0x4e4>
 800b482:	4b7e      	ldr	r3, [pc, #504]	; (800b67c <_dtoa_r+0x62c>)
 800b484:	2200      	movs	r2, #0
 800b486:	4640      	mov	r0, r8
 800b488:	4649      	mov	r1, r9
 800b48a:	f7f4 fefd 	bl	8000288 <__aeabi_dsub>
 800b48e:	4652      	mov	r2, sl
 800b490:	465b      	mov	r3, fp
 800b492:	4680      	mov	r8, r0
 800b494:	4689      	mov	r9, r1
 800b496:	f7f5 fb3f 	bl	8000b18 <__aeabi_dcmpgt>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	f040 8295 	bne.w	800b9ca <_dtoa_r+0x97a>
 800b4a0:	4652      	mov	r2, sl
 800b4a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	f7f5 fb17 	bl	8000adc <__aeabi_dcmplt>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	f040 8289 	bne.w	800b9c6 <_dtoa_r+0x976>
 800b4b4:	ec5b ab19 	vmov	sl, fp, d9
 800b4b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f2c0 8148 	blt.w	800b750 <_dtoa_r+0x700>
 800b4c0:	9a00      	ldr	r2, [sp, #0]
 800b4c2:	2a0e      	cmp	r2, #14
 800b4c4:	f300 8144 	bgt.w	800b750 <_dtoa_r+0x700>
 800b4c8:	4b67      	ldr	r3, [pc, #412]	; (800b668 <_dtoa_r+0x618>)
 800b4ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f280 80d5 	bge.w	800b684 <_dtoa_r+0x634>
 800b4da:	9b03      	ldr	r3, [sp, #12]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f300 80d1 	bgt.w	800b684 <_dtoa_r+0x634>
 800b4e2:	f040 826f 	bne.w	800b9c4 <_dtoa_r+0x974>
 800b4e6:	4b65      	ldr	r3, [pc, #404]	; (800b67c <_dtoa_r+0x62c>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	f7f5 f883 	bl	80005f8 <__aeabi_dmul>
 800b4f2:	4652      	mov	r2, sl
 800b4f4:	465b      	mov	r3, fp
 800b4f6:	f7f5 fb05 	bl	8000b04 <__aeabi_dcmpge>
 800b4fa:	9e03      	ldr	r6, [sp, #12]
 800b4fc:	4637      	mov	r7, r6
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f040 8245 	bne.w	800b98e <_dtoa_r+0x93e>
 800b504:	9d01      	ldr	r5, [sp, #4]
 800b506:	2331      	movs	r3, #49	; 0x31
 800b508:	f805 3b01 	strb.w	r3, [r5], #1
 800b50c:	9b00      	ldr	r3, [sp, #0]
 800b50e:	3301      	adds	r3, #1
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	e240      	b.n	800b996 <_dtoa_r+0x946>
 800b514:	07f2      	lsls	r2, r6, #31
 800b516:	d505      	bpl.n	800b524 <_dtoa_r+0x4d4>
 800b518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b51c:	f7f5 f86c 	bl	80005f8 <__aeabi_dmul>
 800b520:	3501      	adds	r5, #1
 800b522:	2301      	movs	r3, #1
 800b524:	1076      	asrs	r6, r6, #1
 800b526:	3708      	adds	r7, #8
 800b528:	e777      	b.n	800b41a <_dtoa_r+0x3ca>
 800b52a:	2502      	movs	r5, #2
 800b52c:	e779      	b.n	800b422 <_dtoa_r+0x3d2>
 800b52e:	9f00      	ldr	r7, [sp, #0]
 800b530:	9e03      	ldr	r6, [sp, #12]
 800b532:	e794      	b.n	800b45e <_dtoa_r+0x40e>
 800b534:	9901      	ldr	r1, [sp, #4]
 800b536:	4b4c      	ldr	r3, [pc, #304]	; (800b668 <_dtoa_r+0x618>)
 800b538:	4431      	add	r1, r6
 800b53a:	910d      	str	r1, [sp, #52]	; 0x34
 800b53c:	9908      	ldr	r1, [sp, #32]
 800b53e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b542:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b546:	2900      	cmp	r1, #0
 800b548:	d043      	beq.n	800b5d2 <_dtoa_r+0x582>
 800b54a:	494d      	ldr	r1, [pc, #308]	; (800b680 <_dtoa_r+0x630>)
 800b54c:	2000      	movs	r0, #0
 800b54e:	f7f5 f97d 	bl	800084c <__aeabi_ddiv>
 800b552:	4652      	mov	r2, sl
 800b554:	465b      	mov	r3, fp
 800b556:	f7f4 fe97 	bl	8000288 <__aeabi_dsub>
 800b55a:	9d01      	ldr	r5, [sp, #4]
 800b55c:	4682      	mov	sl, r0
 800b55e:	468b      	mov	fp, r1
 800b560:	4649      	mov	r1, r9
 800b562:	4640      	mov	r0, r8
 800b564:	f7f5 faf8 	bl	8000b58 <__aeabi_d2iz>
 800b568:	4606      	mov	r6, r0
 800b56a:	f7f4 ffdb 	bl	8000524 <__aeabi_i2d>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	4640      	mov	r0, r8
 800b574:	4649      	mov	r1, r9
 800b576:	f7f4 fe87 	bl	8000288 <__aeabi_dsub>
 800b57a:	3630      	adds	r6, #48	; 0x30
 800b57c:	f805 6b01 	strb.w	r6, [r5], #1
 800b580:	4652      	mov	r2, sl
 800b582:	465b      	mov	r3, fp
 800b584:	4680      	mov	r8, r0
 800b586:	4689      	mov	r9, r1
 800b588:	f7f5 faa8 	bl	8000adc <__aeabi_dcmplt>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d163      	bne.n	800b658 <_dtoa_r+0x608>
 800b590:	4642      	mov	r2, r8
 800b592:	464b      	mov	r3, r9
 800b594:	4936      	ldr	r1, [pc, #216]	; (800b670 <_dtoa_r+0x620>)
 800b596:	2000      	movs	r0, #0
 800b598:	f7f4 fe76 	bl	8000288 <__aeabi_dsub>
 800b59c:	4652      	mov	r2, sl
 800b59e:	465b      	mov	r3, fp
 800b5a0:	f7f5 fa9c 	bl	8000adc <__aeabi_dcmplt>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	f040 80b5 	bne.w	800b714 <_dtoa_r+0x6c4>
 800b5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5ac:	429d      	cmp	r5, r3
 800b5ae:	d081      	beq.n	800b4b4 <_dtoa_r+0x464>
 800b5b0:	4b30      	ldr	r3, [pc, #192]	; (800b674 <_dtoa_r+0x624>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	4650      	mov	r0, sl
 800b5b6:	4659      	mov	r1, fp
 800b5b8:	f7f5 f81e 	bl	80005f8 <__aeabi_dmul>
 800b5bc:	4b2d      	ldr	r3, [pc, #180]	; (800b674 <_dtoa_r+0x624>)
 800b5be:	4682      	mov	sl, r0
 800b5c0:	468b      	mov	fp, r1
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f7f5 f816 	bl	80005f8 <__aeabi_dmul>
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	4689      	mov	r9, r1
 800b5d0:	e7c6      	b.n	800b560 <_dtoa_r+0x510>
 800b5d2:	4650      	mov	r0, sl
 800b5d4:	4659      	mov	r1, fp
 800b5d6:	f7f5 f80f 	bl	80005f8 <__aeabi_dmul>
 800b5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5dc:	9d01      	ldr	r5, [sp, #4]
 800b5de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5e0:	4682      	mov	sl, r0
 800b5e2:	468b      	mov	fp, r1
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	f7f5 fab6 	bl	8000b58 <__aeabi_d2iz>
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	f7f4 ff99 	bl	8000524 <__aeabi_i2d>
 800b5f2:	3630      	adds	r6, #48	; 0x30
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4640      	mov	r0, r8
 800b5fa:	4649      	mov	r1, r9
 800b5fc:	f7f4 fe44 	bl	8000288 <__aeabi_dsub>
 800b600:	f805 6b01 	strb.w	r6, [r5], #1
 800b604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b606:	429d      	cmp	r5, r3
 800b608:	4680      	mov	r8, r0
 800b60a:	4689      	mov	r9, r1
 800b60c:	f04f 0200 	mov.w	r2, #0
 800b610:	d124      	bne.n	800b65c <_dtoa_r+0x60c>
 800b612:	4b1b      	ldr	r3, [pc, #108]	; (800b680 <_dtoa_r+0x630>)
 800b614:	4650      	mov	r0, sl
 800b616:	4659      	mov	r1, fp
 800b618:	f7f4 fe38 	bl	800028c <__adddf3>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	4640      	mov	r0, r8
 800b622:	4649      	mov	r1, r9
 800b624:	f7f5 fa78 	bl	8000b18 <__aeabi_dcmpgt>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d173      	bne.n	800b714 <_dtoa_r+0x6c4>
 800b62c:	4652      	mov	r2, sl
 800b62e:	465b      	mov	r3, fp
 800b630:	4913      	ldr	r1, [pc, #76]	; (800b680 <_dtoa_r+0x630>)
 800b632:	2000      	movs	r0, #0
 800b634:	f7f4 fe28 	bl	8000288 <__aeabi_dsub>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4640      	mov	r0, r8
 800b63e:	4649      	mov	r1, r9
 800b640:	f7f5 fa4c 	bl	8000adc <__aeabi_dcmplt>
 800b644:	2800      	cmp	r0, #0
 800b646:	f43f af35 	beq.w	800b4b4 <_dtoa_r+0x464>
 800b64a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b64c:	1e6b      	subs	r3, r5, #1
 800b64e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b650:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b654:	2b30      	cmp	r3, #48	; 0x30
 800b656:	d0f8      	beq.n	800b64a <_dtoa_r+0x5fa>
 800b658:	9700      	str	r7, [sp, #0]
 800b65a:	e049      	b.n	800b6f0 <_dtoa_r+0x6a0>
 800b65c:	4b05      	ldr	r3, [pc, #20]	; (800b674 <_dtoa_r+0x624>)
 800b65e:	f7f4 ffcb 	bl	80005f8 <__aeabi_dmul>
 800b662:	4680      	mov	r8, r0
 800b664:	4689      	mov	r9, r1
 800b666:	e7bd      	b.n	800b5e4 <_dtoa_r+0x594>
 800b668:	0800fba0 	.word	0x0800fba0
 800b66c:	0800fb78 	.word	0x0800fb78
 800b670:	3ff00000 	.word	0x3ff00000
 800b674:	40240000 	.word	0x40240000
 800b678:	401c0000 	.word	0x401c0000
 800b67c:	40140000 	.word	0x40140000
 800b680:	3fe00000 	.word	0x3fe00000
 800b684:	9d01      	ldr	r5, [sp, #4]
 800b686:	4656      	mov	r6, sl
 800b688:	465f      	mov	r7, fp
 800b68a:	4642      	mov	r2, r8
 800b68c:	464b      	mov	r3, r9
 800b68e:	4630      	mov	r0, r6
 800b690:	4639      	mov	r1, r7
 800b692:	f7f5 f8db 	bl	800084c <__aeabi_ddiv>
 800b696:	f7f5 fa5f 	bl	8000b58 <__aeabi_d2iz>
 800b69a:	4682      	mov	sl, r0
 800b69c:	f7f4 ff42 	bl	8000524 <__aeabi_i2d>
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	464b      	mov	r3, r9
 800b6a4:	f7f4 ffa8 	bl	80005f8 <__aeabi_dmul>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b6b4:	f7f4 fde8 	bl	8000288 <__aeabi_dsub>
 800b6b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6bc:	9e01      	ldr	r6, [sp, #4]
 800b6be:	9f03      	ldr	r7, [sp, #12]
 800b6c0:	1bae      	subs	r6, r5, r6
 800b6c2:	42b7      	cmp	r7, r6
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	d135      	bne.n	800b736 <_dtoa_r+0x6e6>
 800b6ca:	f7f4 fddf 	bl	800028c <__adddf3>
 800b6ce:	4642      	mov	r2, r8
 800b6d0:	464b      	mov	r3, r9
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	f7f5 fa1f 	bl	8000b18 <__aeabi_dcmpgt>
 800b6da:	b9d0      	cbnz	r0, 800b712 <_dtoa_r+0x6c2>
 800b6dc:	4642      	mov	r2, r8
 800b6de:	464b      	mov	r3, r9
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	f7f5 f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6e8:	b110      	cbz	r0, 800b6f0 <_dtoa_r+0x6a0>
 800b6ea:	f01a 0f01 	tst.w	sl, #1
 800b6ee:	d110      	bne.n	800b712 <_dtoa_r+0x6c2>
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	ee18 1a10 	vmov	r1, s16
 800b6f6:	f000 fee3 	bl	800c4c0 <_Bfree>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	9800      	ldr	r0, [sp, #0]
 800b6fe:	702b      	strb	r3, [r5, #0]
 800b700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b702:	3001      	adds	r0, #1
 800b704:	6018      	str	r0, [r3, #0]
 800b706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f43f acf1 	beq.w	800b0f0 <_dtoa_r+0xa0>
 800b70e:	601d      	str	r5, [r3, #0]
 800b710:	e4ee      	b.n	800b0f0 <_dtoa_r+0xa0>
 800b712:	9f00      	ldr	r7, [sp, #0]
 800b714:	462b      	mov	r3, r5
 800b716:	461d      	mov	r5, r3
 800b718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b71c:	2a39      	cmp	r2, #57	; 0x39
 800b71e:	d106      	bne.n	800b72e <_dtoa_r+0x6de>
 800b720:	9a01      	ldr	r2, [sp, #4]
 800b722:	429a      	cmp	r2, r3
 800b724:	d1f7      	bne.n	800b716 <_dtoa_r+0x6c6>
 800b726:	9901      	ldr	r1, [sp, #4]
 800b728:	2230      	movs	r2, #48	; 0x30
 800b72a:	3701      	adds	r7, #1
 800b72c:	700a      	strb	r2, [r1, #0]
 800b72e:	781a      	ldrb	r2, [r3, #0]
 800b730:	3201      	adds	r2, #1
 800b732:	701a      	strb	r2, [r3, #0]
 800b734:	e790      	b.n	800b658 <_dtoa_r+0x608>
 800b736:	4ba6      	ldr	r3, [pc, #664]	; (800b9d0 <_dtoa_r+0x980>)
 800b738:	2200      	movs	r2, #0
 800b73a:	f7f4 ff5d 	bl	80005f8 <__aeabi_dmul>
 800b73e:	2200      	movs	r2, #0
 800b740:	2300      	movs	r3, #0
 800b742:	4606      	mov	r6, r0
 800b744:	460f      	mov	r7, r1
 800b746:	f7f5 f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d09d      	beq.n	800b68a <_dtoa_r+0x63a>
 800b74e:	e7cf      	b.n	800b6f0 <_dtoa_r+0x6a0>
 800b750:	9a08      	ldr	r2, [sp, #32]
 800b752:	2a00      	cmp	r2, #0
 800b754:	f000 80d7 	beq.w	800b906 <_dtoa_r+0x8b6>
 800b758:	9a06      	ldr	r2, [sp, #24]
 800b75a:	2a01      	cmp	r2, #1
 800b75c:	f300 80ba 	bgt.w	800b8d4 <_dtoa_r+0x884>
 800b760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b762:	2a00      	cmp	r2, #0
 800b764:	f000 80b2 	beq.w	800b8cc <_dtoa_r+0x87c>
 800b768:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b76c:	9e07      	ldr	r6, [sp, #28]
 800b76e:	9d04      	ldr	r5, [sp, #16]
 800b770:	9a04      	ldr	r2, [sp, #16]
 800b772:	441a      	add	r2, r3
 800b774:	9204      	str	r2, [sp, #16]
 800b776:	9a05      	ldr	r2, [sp, #20]
 800b778:	2101      	movs	r1, #1
 800b77a:	441a      	add	r2, r3
 800b77c:	4620      	mov	r0, r4
 800b77e:	9205      	str	r2, [sp, #20]
 800b780:	f000 ffa0 	bl	800c6c4 <__i2b>
 800b784:	4607      	mov	r7, r0
 800b786:	2d00      	cmp	r5, #0
 800b788:	dd0c      	ble.n	800b7a4 <_dtoa_r+0x754>
 800b78a:	9b05      	ldr	r3, [sp, #20]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	dd09      	ble.n	800b7a4 <_dtoa_r+0x754>
 800b790:	42ab      	cmp	r3, r5
 800b792:	9a04      	ldr	r2, [sp, #16]
 800b794:	bfa8      	it	ge
 800b796:	462b      	movge	r3, r5
 800b798:	1ad2      	subs	r2, r2, r3
 800b79a:	9204      	str	r2, [sp, #16]
 800b79c:	9a05      	ldr	r2, [sp, #20]
 800b79e:	1aed      	subs	r5, r5, r3
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	9b07      	ldr	r3, [sp, #28]
 800b7a6:	b31b      	cbz	r3, 800b7f0 <_dtoa_r+0x7a0>
 800b7a8:	9b08      	ldr	r3, [sp, #32]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f000 80af 	beq.w	800b90e <_dtoa_r+0x8be>
 800b7b0:	2e00      	cmp	r6, #0
 800b7b2:	dd13      	ble.n	800b7dc <_dtoa_r+0x78c>
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	4632      	mov	r2, r6
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f001 f843 	bl	800c844 <__pow5mult>
 800b7be:	ee18 2a10 	vmov	r2, s16
 800b7c2:	4601      	mov	r1, r0
 800b7c4:	4607      	mov	r7, r0
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 ff92 	bl	800c6f0 <__multiply>
 800b7cc:	ee18 1a10 	vmov	r1, s16
 800b7d0:	4680      	mov	r8, r0
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 fe74 	bl	800c4c0 <_Bfree>
 800b7d8:	ee08 8a10 	vmov	s16, r8
 800b7dc:	9b07      	ldr	r3, [sp, #28]
 800b7de:	1b9a      	subs	r2, r3, r6
 800b7e0:	d006      	beq.n	800b7f0 <_dtoa_r+0x7a0>
 800b7e2:	ee18 1a10 	vmov	r1, s16
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f001 f82c 	bl	800c844 <__pow5mult>
 800b7ec:	ee08 0a10 	vmov	s16, r0
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 ff66 	bl	800c6c4 <__i2b>
 800b7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	f340 8088 	ble.w	800b912 <_dtoa_r+0x8c2>
 800b802:	461a      	mov	r2, r3
 800b804:	4601      	mov	r1, r0
 800b806:	4620      	mov	r0, r4
 800b808:	f001 f81c 	bl	800c844 <__pow5mult>
 800b80c:	9b06      	ldr	r3, [sp, #24]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	4606      	mov	r6, r0
 800b812:	f340 8081 	ble.w	800b918 <_dtoa_r+0x8c8>
 800b816:	f04f 0800 	mov.w	r8, #0
 800b81a:	6933      	ldr	r3, [r6, #16]
 800b81c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b820:	6918      	ldr	r0, [r3, #16]
 800b822:	f000 feff 	bl	800c624 <__hi0bits>
 800b826:	f1c0 0020 	rsb	r0, r0, #32
 800b82a:	9b05      	ldr	r3, [sp, #20]
 800b82c:	4418      	add	r0, r3
 800b82e:	f010 001f 	ands.w	r0, r0, #31
 800b832:	f000 8092 	beq.w	800b95a <_dtoa_r+0x90a>
 800b836:	f1c0 0320 	rsb	r3, r0, #32
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	f340 808a 	ble.w	800b954 <_dtoa_r+0x904>
 800b840:	f1c0 001c 	rsb	r0, r0, #28
 800b844:	9b04      	ldr	r3, [sp, #16]
 800b846:	4403      	add	r3, r0
 800b848:	9304      	str	r3, [sp, #16]
 800b84a:	9b05      	ldr	r3, [sp, #20]
 800b84c:	4403      	add	r3, r0
 800b84e:	4405      	add	r5, r0
 800b850:	9305      	str	r3, [sp, #20]
 800b852:	9b04      	ldr	r3, [sp, #16]
 800b854:	2b00      	cmp	r3, #0
 800b856:	dd07      	ble.n	800b868 <_dtoa_r+0x818>
 800b858:	ee18 1a10 	vmov	r1, s16
 800b85c:	461a      	mov	r2, r3
 800b85e:	4620      	mov	r0, r4
 800b860:	f001 f84a 	bl	800c8f8 <__lshift>
 800b864:	ee08 0a10 	vmov	s16, r0
 800b868:	9b05      	ldr	r3, [sp, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	dd05      	ble.n	800b87a <_dtoa_r+0x82a>
 800b86e:	4631      	mov	r1, r6
 800b870:	461a      	mov	r2, r3
 800b872:	4620      	mov	r0, r4
 800b874:	f001 f840 	bl	800c8f8 <__lshift>
 800b878:	4606      	mov	r6, r0
 800b87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d06e      	beq.n	800b95e <_dtoa_r+0x90e>
 800b880:	ee18 0a10 	vmov	r0, s16
 800b884:	4631      	mov	r1, r6
 800b886:	f001 f8a7 	bl	800c9d8 <__mcmp>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	da67      	bge.n	800b95e <_dtoa_r+0x90e>
 800b88e:	9b00      	ldr	r3, [sp, #0]
 800b890:	3b01      	subs	r3, #1
 800b892:	ee18 1a10 	vmov	r1, s16
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	220a      	movs	r2, #10
 800b89a:	2300      	movs	r3, #0
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 fe31 	bl	800c504 <__multadd>
 800b8a2:	9b08      	ldr	r3, [sp, #32]
 800b8a4:	ee08 0a10 	vmov	s16, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 81b1 	beq.w	800bc10 <_dtoa_r+0xbc0>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	220a      	movs	r2, #10
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 fe25 	bl	800c504 <__multadd>
 800b8ba:	9b02      	ldr	r3, [sp, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	4607      	mov	r7, r0
 800b8c0:	f300 808e 	bgt.w	800b9e0 <_dtoa_r+0x990>
 800b8c4:	9b06      	ldr	r3, [sp, #24]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	dc51      	bgt.n	800b96e <_dtoa_r+0x91e>
 800b8ca:	e089      	b.n	800b9e0 <_dtoa_r+0x990>
 800b8cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8d2:	e74b      	b.n	800b76c <_dtoa_r+0x71c>
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	1e5e      	subs	r6, r3, #1
 800b8d8:	9b07      	ldr	r3, [sp, #28]
 800b8da:	42b3      	cmp	r3, r6
 800b8dc:	bfbf      	itttt	lt
 800b8de:	9b07      	ldrlt	r3, [sp, #28]
 800b8e0:	9607      	strlt	r6, [sp, #28]
 800b8e2:	1af2      	sublt	r2, r6, r3
 800b8e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b8e6:	bfb6      	itet	lt
 800b8e8:	189b      	addlt	r3, r3, r2
 800b8ea:	1b9e      	subge	r6, r3, r6
 800b8ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	bfb8      	it	lt
 800b8f2:	2600      	movlt	r6, #0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	bfb7      	itett	lt
 800b8f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b8fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b900:	1a9d      	sublt	r5, r3, r2
 800b902:	2300      	movlt	r3, #0
 800b904:	e734      	b.n	800b770 <_dtoa_r+0x720>
 800b906:	9e07      	ldr	r6, [sp, #28]
 800b908:	9d04      	ldr	r5, [sp, #16]
 800b90a:	9f08      	ldr	r7, [sp, #32]
 800b90c:	e73b      	b.n	800b786 <_dtoa_r+0x736>
 800b90e:	9a07      	ldr	r2, [sp, #28]
 800b910:	e767      	b.n	800b7e2 <_dtoa_r+0x792>
 800b912:	9b06      	ldr	r3, [sp, #24]
 800b914:	2b01      	cmp	r3, #1
 800b916:	dc18      	bgt.n	800b94a <_dtoa_r+0x8fa>
 800b918:	f1ba 0f00 	cmp.w	sl, #0
 800b91c:	d115      	bne.n	800b94a <_dtoa_r+0x8fa>
 800b91e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b922:	b993      	cbnz	r3, 800b94a <_dtoa_r+0x8fa>
 800b924:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b928:	0d1b      	lsrs	r3, r3, #20
 800b92a:	051b      	lsls	r3, r3, #20
 800b92c:	b183      	cbz	r3, 800b950 <_dtoa_r+0x900>
 800b92e:	9b04      	ldr	r3, [sp, #16]
 800b930:	3301      	adds	r3, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	9b05      	ldr	r3, [sp, #20]
 800b936:	3301      	adds	r3, #1
 800b938:	9305      	str	r3, [sp, #20]
 800b93a:	f04f 0801 	mov.w	r8, #1
 800b93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b940:	2b00      	cmp	r3, #0
 800b942:	f47f af6a 	bne.w	800b81a <_dtoa_r+0x7ca>
 800b946:	2001      	movs	r0, #1
 800b948:	e76f      	b.n	800b82a <_dtoa_r+0x7da>
 800b94a:	f04f 0800 	mov.w	r8, #0
 800b94e:	e7f6      	b.n	800b93e <_dtoa_r+0x8ee>
 800b950:	4698      	mov	r8, r3
 800b952:	e7f4      	b.n	800b93e <_dtoa_r+0x8ee>
 800b954:	f43f af7d 	beq.w	800b852 <_dtoa_r+0x802>
 800b958:	4618      	mov	r0, r3
 800b95a:	301c      	adds	r0, #28
 800b95c:	e772      	b.n	800b844 <_dtoa_r+0x7f4>
 800b95e:	9b03      	ldr	r3, [sp, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	dc37      	bgt.n	800b9d4 <_dtoa_r+0x984>
 800b964:	9b06      	ldr	r3, [sp, #24]
 800b966:	2b02      	cmp	r3, #2
 800b968:	dd34      	ble.n	800b9d4 <_dtoa_r+0x984>
 800b96a:	9b03      	ldr	r3, [sp, #12]
 800b96c:	9302      	str	r3, [sp, #8]
 800b96e:	9b02      	ldr	r3, [sp, #8]
 800b970:	b96b      	cbnz	r3, 800b98e <_dtoa_r+0x93e>
 800b972:	4631      	mov	r1, r6
 800b974:	2205      	movs	r2, #5
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fdc4 	bl	800c504 <__multadd>
 800b97c:	4601      	mov	r1, r0
 800b97e:	4606      	mov	r6, r0
 800b980:	ee18 0a10 	vmov	r0, s16
 800b984:	f001 f828 	bl	800c9d8 <__mcmp>
 800b988:	2800      	cmp	r0, #0
 800b98a:	f73f adbb 	bgt.w	800b504 <_dtoa_r+0x4b4>
 800b98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b990:	9d01      	ldr	r5, [sp, #4]
 800b992:	43db      	mvns	r3, r3
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	f04f 0800 	mov.w	r8, #0
 800b99a:	4631      	mov	r1, r6
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 fd8f 	bl	800c4c0 <_Bfree>
 800b9a2:	2f00      	cmp	r7, #0
 800b9a4:	f43f aea4 	beq.w	800b6f0 <_dtoa_r+0x6a0>
 800b9a8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ac:	d005      	beq.n	800b9ba <_dtoa_r+0x96a>
 800b9ae:	45b8      	cmp	r8, r7
 800b9b0:	d003      	beq.n	800b9ba <_dtoa_r+0x96a>
 800b9b2:	4641      	mov	r1, r8
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fd83 	bl	800c4c0 <_Bfree>
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f000 fd7f 	bl	800c4c0 <_Bfree>
 800b9c2:	e695      	b.n	800b6f0 <_dtoa_r+0x6a0>
 800b9c4:	2600      	movs	r6, #0
 800b9c6:	4637      	mov	r7, r6
 800b9c8:	e7e1      	b.n	800b98e <_dtoa_r+0x93e>
 800b9ca:	9700      	str	r7, [sp, #0]
 800b9cc:	4637      	mov	r7, r6
 800b9ce:	e599      	b.n	800b504 <_dtoa_r+0x4b4>
 800b9d0:	40240000 	.word	0x40240000
 800b9d4:	9b08      	ldr	r3, [sp, #32]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f000 80ca 	beq.w	800bb70 <_dtoa_r+0xb20>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	9302      	str	r3, [sp, #8]
 800b9e0:	2d00      	cmp	r5, #0
 800b9e2:	dd05      	ble.n	800b9f0 <_dtoa_r+0x9a0>
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	462a      	mov	r2, r5
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 ff85 	bl	800c8f8 <__lshift>
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	f1b8 0f00 	cmp.w	r8, #0
 800b9f4:	d05b      	beq.n	800baae <_dtoa_r+0xa5e>
 800b9f6:	6879      	ldr	r1, [r7, #4]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 fd21 	bl	800c440 <_Balloc>
 800b9fe:	4605      	mov	r5, r0
 800ba00:	b928      	cbnz	r0, 800ba0e <_dtoa_r+0x9be>
 800ba02:	4b87      	ldr	r3, [pc, #540]	; (800bc20 <_dtoa_r+0xbd0>)
 800ba04:	4602      	mov	r2, r0
 800ba06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba0a:	f7ff bb3b 	b.w	800b084 <_dtoa_r+0x34>
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	3202      	adds	r2, #2
 800ba12:	0092      	lsls	r2, r2, #2
 800ba14:	f107 010c 	add.w	r1, r7, #12
 800ba18:	300c      	adds	r0, #12
 800ba1a:	f7fd f92f 	bl	8008c7c <memcpy>
 800ba1e:	2201      	movs	r2, #1
 800ba20:	4629      	mov	r1, r5
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 ff68 	bl	800c8f8 <__lshift>
 800ba28:	9b01      	ldr	r3, [sp, #4]
 800ba2a:	f103 0901 	add.w	r9, r3, #1
 800ba2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba32:	4413      	add	r3, r2
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	f00a 0301 	and.w	r3, sl, #1
 800ba3a:	46b8      	mov	r8, r7
 800ba3c:	9304      	str	r3, [sp, #16]
 800ba3e:	4607      	mov	r7, r0
 800ba40:	4631      	mov	r1, r6
 800ba42:	ee18 0a10 	vmov	r0, s16
 800ba46:	f7ff fa75 	bl	800af34 <quorem>
 800ba4a:	4641      	mov	r1, r8
 800ba4c:	9002      	str	r0, [sp, #8]
 800ba4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba52:	ee18 0a10 	vmov	r0, s16
 800ba56:	f000 ffbf 	bl	800c9d8 <__mcmp>
 800ba5a:	463a      	mov	r2, r7
 800ba5c:	9003      	str	r0, [sp, #12]
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 ffd5 	bl	800ca10 <__mdiff>
 800ba66:	68c2      	ldr	r2, [r0, #12]
 800ba68:	f109 3bff 	add.w	fp, r9, #4294967295
 800ba6c:	4605      	mov	r5, r0
 800ba6e:	bb02      	cbnz	r2, 800bab2 <_dtoa_r+0xa62>
 800ba70:	4601      	mov	r1, r0
 800ba72:	ee18 0a10 	vmov	r0, s16
 800ba76:	f000 ffaf 	bl	800c9d8 <__mcmp>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4620      	mov	r0, r4
 800ba80:	9207      	str	r2, [sp, #28]
 800ba82:	f000 fd1d 	bl	800c4c0 <_Bfree>
 800ba86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba8a:	ea43 0102 	orr.w	r1, r3, r2
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	430b      	orrs	r3, r1
 800ba92:	464d      	mov	r5, r9
 800ba94:	d10f      	bne.n	800bab6 <_dtoa_r+0xa66>
 800ba96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba9a:	d02a      	beq.n	800baf2 <_dtoa_r+0xaa2>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dd02      	ble.n	800baa8 <_dtoa_r+0xa58>
 800baa2:	9b02      	ldr	r3, [sp, #8]
 800baa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800baa8:	f88b a000 	strb.w	sl, [fp]
 800baac:	e775      	b.n	800b99a <_dtoa_r+0x94a>
 800baae:	4638      	mov	r0, r7
 800bab0:	e7ba      	b.n	800ba28 <_dtoa_r+0x9d8>
 800bab2:	2201      	movs	r2, #1
 800bab4:	e7e2      	b.n	800ba7c <_dtoa_r+0xa2c>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	db04      	blt.n	800bac6 <_dtoa_r+0xa76>
 800babc:	9906      	ldr	r1, [sp, #24]
 800babe:	430b      	orrs	r3, r1
 800bac0:	9904      	ldr	r1, [sp, #16]
 800bac2:	430b      	orrs	r3, r1
 800bac4:	d122      	bne.n	800bb0c <_dtoa_r+0xabc>
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	ddee      	ble.n	800baa8 <_dtoa_r+0xa58>
 800baca:	ee18 1a10 	vmov	r1, s16
 800bace:	2201      	movs	r2, #1
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 ff11 	bl	800c8f8 <__lshift>
 800bad6:	4631      	mov	r1, r6
 800bad8:	ee08 0a10 	vmov	s16, r0
 800badc:	f000 ff7c 	bl	800c9d8 <__mcmp>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	dc03      	bgt.n	800baec <_dtoa_r+0xa9c>
 800bae4:	d1e0      	bne.n	800baa8 <_dtoa_r+0xa58>
 800bae6:	f01a 0f01 	tst.w	sl, #1
 800baea:	d0dd      	beq.n	800baa8 <_dtoa_r+0xa58>
 800baec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800baf0:	d1d7      	bne.n	800baa2 <_dtoa_r+0xa52>
 800baf2:	2339      	movs	r3, #57	; 0x39
 800baf4:	f88b 3000 	strb.w	r3, [fp]
 800baf8:	462b      	mov	r3, r5
 800bafa:	461d      	mov	r5, r3
 800bafc:	3b01      	subs	r3, #1
 800bafe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb02:	2a39      	cmp	r2, #57	; 0x39
 800bb04:	d071      	beq.n	800bbea <_dtoa_r+0xb9a>
 800bb06:	3201      	adds	r2, #1
 800bb08:	701a      	strb	r2, [r3, #0]
 800bb0a:	e746      	b.n	800b99a <_dtoa_r+0x94a>
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	dd07      	ble.n	800bb20 <_dtoa_r+0xad0>
 800bb10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb14:	d0ed      	beq.n	800baf2 <_dtoa_r+0xaa2>
 800bb16:	f10a 0301 	add.w	r3, sl, #1
 800bb1a:	f88b 3000 	strb.w	r3, [fp]
 800bb1e:	e73c      	b.n	800b99a <_dtoa_r+0x94a>
 800bb20:	9b05      	ldr	r3, [sp, #20]
 800bb22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb26:	4599      	cmp	r9, r3
 800bb28:	d047      	beq.n	800bbba <_dtoa_r+0xb6a>
 800bb2a:	ee18 1a10 	vmov	r1, s16
 800bb2e:	2300      	movs	r3, #0
 800bb30:	220a      	movs	r2, #10
 800bb32:	4620      	mov	r0, r4
 800bb34:	f000 fce6 	bl	800c504 <__multadd>
 800bb38:	45b8      	cmp	r8, r7
 800bb3a:	ee08 0a10 	vmov	s16, r0
 800bb3e:	f04f 0300 	mov.w	r3, #0
 800bb42:	f04f 020a 	mov.w	r2, #10
 800bb46:	4641      	mov	r1, r8
 800bb48:	4620      	mov	r0, r4
 800bb4a:	d106      	bne.n	800bb5a <_dtoa_r+0xb0a>
 800bb4c:	f000 fcda 	bl	800c504 <__multadd>
 800bb50:	4680      	mov	r8, r0
 800bb52:	4607      	mov	r7, r0
 800bb54:	f109 0901 	add.w	r9, r9, #1
 800bb58:	e772      	b.n	800ba40 <_dtoa_r+0x9f0>
 800bb5a:	f000 fcd3 	bl	800c504 <__multadd>
 800bb5e:	4639      	mov	r1, r7
 800bb60:	4680      	mov	r8, r0
 800bb62:	2300      	movs	r3, #0
 800bb64:	220a      	movs	r2, #10
 800bb66:	4620      	mov	r0, r4
 800bb68:	f000 fccc 	bl	800c504 <__multadd>
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	e7f1      	b.n	800bb54 <_dtoa_r+0xb04>
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	9302      	str	r3, [sp, #8]
 800bb74:	9d01      	ldr	r5, [sp, #4]
 800bb76:	ee18 0a10 	vmov	r0, s16
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	f7ff f9da 	bl	800af34 <quorem>
 800bb80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	f805 ab01 	strb.w	sl, [r5], #1
 800bb8a:	1aea      	subs	r2, r5, r3
 800bb8c:	9b02      	ldr	r3, [sp, #8]
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	dd09      	ble.n	800bba6 <_dtoa_r+0xb56>
 800bb92:	ee18 1a10 	vmov	r1, s16
 800bb96:	2300      	movs	r3, #0
 800bb98:	220a      	movs	r2, #10
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fcb2 	bl	800c504 <__multadd>
 800bba0:	ee08 0a10 	vmov	s16, r0
 800bba4:	e7e7      	b.n	800bb76 <_dtoa_r+0xb26>
 800bba6:	9b02      	ldr	r3, [sp, #8]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	bfc8      	it	gt
 800bbac:	461d      	movgt	r5, r3
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	bfd8      	it	le
 800bbb2:	2501      	movle	r5, #1
 800bbb4:	441d      	add	r5, r3
 800bbb6:	f04f 0800 	mov.w	r8, #0
 800bbba:	ee18 1a10 	vmov	r1, s16
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 fe99 	bl	800c8f8 <__lshift>
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	ee08 0a10 	vmov	s16, r0
 800bbcc:	f000 ff04 	bl	800c9d8 <__mcmp>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	dc91      	bgt.n	800baf8 <_dtoa_r+0xaa8>
 800bbd4:	d102      	bne.n	800bbdc <_dtoa_r+0xb8c>
 800bbd6:	f01a 0f01 	tst.w	sl, #1
 800bbda:	d18d      	bne.n	800baf8 <_dtoa_r+0xaa8>
 800bbdc:	462b      	mov	r3, r5
 800bbde:	461d      	mov	r5, r3
 800bbe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbe4:	2a30      	cmp	r2, #48	; 0x30
 800bbe6:	d0fa      	beq.n	800bbde <_dtoa_r+0xb8e>
 800bbe8:	e6d7      	b.n	800b99a <_dtoa_r+0x94a>
 800bbea:	9a01      	ldr	r2, [sp, #4]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d184      	bne.n	800bafa <_dtoa_r+0xaaa>
 800bbf0:	9b00      	ldr	r3, [sp, #0]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	2331      	movs	r3, #49	; 0x31
 800bbf8:	7013      	strb	r3, [r2, #0]
 800bbfa:	e6ce      	b.n	800b99a <_dtoa_r+0x94a>
 800bbfc:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <_dtoa_r+0xbd4>)
 800bbfe:	f7ff ba95 	b.w	800b12c <_dtoa_r+0xdc>
 800bc02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f47f aa6e 	bne.w	800b0e6 <_dtoa_r+0x96>
 800bc0a:	4b07      	ldr	r3, [pc, #28]	; (800bc28 <_dtoa_r+0xbd8>)
 800bc0c:	f7ff ba8e 	b.w	800b12c <_dtoa_r+0xdc>
 800bc10:	9b02      	ldr	r3, [sp, #8]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dcae      	bgt.n	800bb74 <_dtoa_r+0xb24>
 800bc16:	9b06      	ldr	r3, [sp, #24]
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	f73f aea8 	bgt.w	800b96e <_dtoa_r+0x91e>
 800bc1e:	e7a9      	b.n	800bb74 <_dtoa_r+0xb24>
 800bc20:	0800fa8f 	.word	0x0800fa8f
 800bc24:	0800f995 	.word	0x0800f995
 800bc28:	0800fa10 	.word	0x0800fa10

0800bc2c <rshift>:
 800bc2c:	6903      	ldr	r3, [r0, #16]
 800bc2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc3a:	f100 0414 	add.w	r4, r0, #20
 800bc3e:	dd45      	ble.n	800bccc <rshift+0xa0>
 800bc40:	f011 011f 	ands.w	r1, r1, #31
 800bc44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc4c:	d10c      	bne.n	800bc68 <rshift+0x3c>
 800bc4e:	f100 0710 	add.w	r7, r0, #16
 800bc52:	4629      	mov	r1, r5
 800bc54:	42b1      	cmp	r1, r6
 800bc56:	d334      	bcc.n	800bcc2 <rshift+0x96>
 800bc58:	1a9b      	subs	r3, r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	1eea      	subs	r2, r5, #3
 800bc5e:	4296      	cmp	r6, r2
 800bc60:	bf38      	it	cc
 800bc62:	2300      	movcc	r3, #0
 800bc64:	4423      	add	r3, r4
 800bc66:	e015      	b.n	800bc94 <rshift+0x68>
 800bc68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc6c:	f1c1 0820 	rsb	r8, r1, #32
 800bc70:	40cf      	lsrs	r7, r1
 800bc72:	f105 0e04 	add.w	lr, r5, #4
 800bc76:	46a1      	mov	r9, r4
 800bc78:	4576      	cmp	r6, lr
 800bc7a:	46f4      	mov	ip, lr
 800bc7c:	d815      	bhi.n	800bcaa <rshift+0x7e>
 800bc7e:	1a9a      	subs	r2, r3, r2
 800bc80:	0092      	lsls	r2, r2, #2
 800bc82:	3a04      	subs	r2, #4
 800bc84:	3501      	adds	r5, #1
 800bc86:	42ae      	cmp	r6, r5
 800bc88:	bf38      	it	cc
 800bc8a:	2200      	movcc	r2, #0
 800bc8c:	18a3      	adds	r3, r4, r2
 800bc8e:	50a7      	str	r7, [r4, r2]
 800bc90:	b107      	cbz	r7, 800bc94 <rshift+0x68>
 800bc92:	3304      	adds	r3, #4
 800bc94:	1b1a      	subs	r2, r3, r4
 800bc96:	42a3      	cmp	r3, r4
 800bc98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc9c:	bf08      	it	eq
 800bc9e:	2300      	moveq	r3, #0
 800bca0:	6102      	str	r2, [r0, #16]
 800bca2:	bf08      	it	eq
 800bca4:	6143      	streq	r3, [r0, #20]
 800bca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcaa:	f8dc c000 	ldr.w	ip, [ip]
 800bcae:	fa0c fc08 	lsl.w	ip, ip, r8
 800bcb2:	ea4c 0707 	orr.w	r7, ip, r7
 800bcb6:	f849 7b04 	str.w	r7, [r9], #4
 800bcba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcbe:	40cf      	lsrs	r7, r1
 800bcc0:	e7da      	b.n	800bc78 <rshift+0x4c>
 800bcc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800bcc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800bcca:	e7c3      	b.n	800bc54 <rshift+0x28>
 800bccc:	4623      	mov	r3, r4
 800bcce:	e7e1      	b.n	800bc94 <rshift+0x68>

0800bcd0 <__hexdig_fun>:
 800bcd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bcd4:	2b09      	cmp	r3, #9
 800bcd6:	d802      	bhi.n	800bcde <__hexdig_fun+0xe>
 800bcd8:	3820      	subs	r0, #32
 800bcda:	b2c0      	uxtb	r0, r0
 800bcdc:	4770      	bx	lr
 800bcde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d801      	bhi.n	800bcea <__hexdig_fun+0x1a>
 800bce6:	3847      	subs	r0, #71	; 0x47
 800bce8:	e7f7      	b.n	800bcda <__hexdig_fun+0xa>
 800bcea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	d801      	bhi.n	800bcf6 <__hexdig_fun+0x26>
 800bcf2:	3827      	subs	r0, #39	; 0x27
 800bcf4:	e7f1      	b.n	800bcda <__hexdig_fun+0xa>
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	4770      	bx	lr
	...

0800bcfc <__gethex>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	ed2d 8b02 	vpush	{d8}
 800bd04:	b089      	sub	sp, #36	; 0x24
 800bd06:	ee08 0a10 	vmov	s16, r0
 800bd0a:	9304      	str	r3, [sp, #16]
 800bd0c:	4bb4      	ldr	r3, [pc, #720]	; (800bfe0 <__gethex+0x2e4>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	4618      	mov	r0, r3
 800bd14:	468b      	mov	fp, r1
 800bd16:	4690      	mov	r8, r2
 800bd18:	f7f4 fa5a 	bl	80001d0 <strlen>
 800bd1c:	9b01      	ldr	r3, [sp, #4]
 800bd1e:	f8db 2000 	ldr.w	r2, [fp]
 800bd22:	4403      	add	r3, r0
 800bd24:	4682      	mov	sl, r0
 800bd26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bd2a:	9305      	str	r3, [sp, #20]
 800bd2c:	1c93      	adds	r3, r2, #2
 800bd2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd36:	32fe      	adds	r2, #254	; 0xfe
 800bd38:	18d1      	adds	r1, r2, r3
 800bd3a:	461f      	mov	r7, r3
 800bd3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd40:	9100      	str	r1, [sp, #0]
 800bd42:	2830      	cmp	r0, #48	; 0x30
 800bd44:	d0f8      	beq.n	800bd38 <__gethex+0x3c>
 800bd46:	f7ff ffc3 	bl	800bcd0 <__hexdig_fun>
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d13a      	bne.n	800bdc6 <__gethex+0xca>
 800bd50:	9901      	ldr	r1, [sp, #4]
 800bd52:	4652      	mov	r2, sl
 800bd54:	4638      	mov	r0, r7
 800bd56:	f001 fa1f 	bl	800d198 <strncmp>
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d168      	bne.n	800be32 <__gethex+0x136>
 800bd60:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bd64:	eb07 060a 	add.w	r6, r7, sl
 800bd68:	f7ff ffb2 	bl	800bcd0 <__hexdig_fun>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d062      	beq.n	800be36 <__gethex+0x13a>
 800bd70:	4633      	mov	r3, r6
 800bd72:	7818      	ldrb	r0, [r3, #0]
 800bd74:	2830      	cmp	r0, #48	; 0x30
 800bd76:	461f      	mov	r7, r3
 800bd78:	f103 0301 	add.w	r3, r3, #1
 800bd7c:	d0f9      	beq.n	800bd72 <__gethex+0x76>
 800bd7e:	f7ff ffa7 	bl	800bcd0 <__hexdig_fun>
 800bd82:	2301      	movs	r3, #1
 800bd84:	fab0 f480 	clz	r4, r0
 800bd88:	0964      	lsrs	r4, r4, #5
 800bd8a:	4635      	mov	r5, r6
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	463a      	mov	r2, r7
 800bd90:	4616      	mov	r6, r2
 800bd92:	3201      	adds	r2, #1
 800bd94:	7830      	ldrb	r0, [r6, #0]
 800bd96:	f7ff ff9b 	bl	800bcd0 <__hexdig_fun>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d1f8      	bne.n	800bd90 <__gethex+0x94>
 800bd9e:	9901      	ldr	r1, [sp, #4]
 800bda0:	4652      	mov	r2, sl
 800bda2:	4630      	mov	r0, r6
 800bda4:	f001 f9f8 	bl	800d198 <strncmp>
 800bda8:	b980      	cbnz	r0, 800bdcc <__gethex+0xd0>
 800bdaa:	b94d      	cbnz	r5, 800bdc0 <__gethex+0xc4>
 800bdac:	eb06 050a 	add.w	r5, r6, sl
 800bdb0:	462a      	mov	r2, r5
 800bdb2:	4616      	mov	r6, r2
 800bdb4:	3201      	adds	r2, #1
 800bdb6:	7830      	ldrb	r0, [r6, #0]
 800bdb8:	f7ff ff8a 	bl	800bcd0 <__hexdig_fun>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d1f8      	bne.n	800bdb2 <__gethex+0xb6>
 800bdc0:	1bad      	subs	r5, r5, r6
 800bdc2:	00ad      	lsls	r5, r5, #2
 800bdc4:	e004      	b.n	800bdd0 <__gethex+0xd4>
 800bdc6:	2400      	movs	r4, #0
 800bdc8:	4625      	mov	r5, r4
 800bdca:	e7e0      	b.n	800bd8e <__gethex+0x92>
 800bdcc:	2d00      	cmp	r5, #0
 800bdce:	d1f7      	bne.n	800bdc0 <__gethex+0xc4>
 800bdd0:	7833      	ldrb	r3, [r6, #0]
 800bdd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bdd6:	2b50      	cmp	r3, #80	; 0x50
 800bdd8:	d13b      	bne.n	800be52 <__gethex+0x156>
 800bdda:	7873      	ldrb	r3, [r6, #1]
 800bddc:	2b2b      	cmp	r3, #43	; 0x2b
 800bdde:	d02c      	beq.n	800be3a <__gethex+0x13e>
 800bde0:	2b2d      	cmp	r3, #45	; 0x2d
 800bde2:	d02e      	beq.n	800be42 <__gethex+0x146>
 800bde4:	1c71      	adds	r1, r6, #1
 800bde6:	f04f 0900 	mov.w	r9, #0
 800bdea:	7808      	ldrb	r0, [r1, #0]
 800bdec:	f7ff ff70 	bl	800bcd0 <__hexdig_fun>
 800bdf0:	1e43      	subs	r3, r0, #1
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b18      	cmp	r3, #24
 800bdf6:	d82c      	bhi.n	800be52 <__gethex+0x156>
 800bdf8:	f1a0 0210 	sub.w	r2, r0, #16
 800bdfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be00:	f7ff ff66 	bl	800bcd0 <__hexdig_fun>
 800be04:	1e43      	subs	r3, r0, #1
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b18      	cmp	r3, #24
 800be0a:	d91d      	bls.n	800be48 <__gethex+0x14c>
 800be0c:	f1b9 0f00 	cmp.w	r9, #0
 800be10:	d000      	beq.n	800be14 <__gethex+0x118>
 800be12:	4252      	negs	r2, r2
 800be14:	4415      	add	r5, r2
 800be16:	f8cb 1000 	str.w	r1, [fp]
 800be1a:	b1e4      	cbz	r4, 800be56 <__gethex+0x15a>
 800be1c:	9b00      	ldr	r3, [sp, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bf14      	ite	ne
 800be22:	2700      	movne	r7, #0
 800be24:	2706      	moveq	r7, #6
 800be26:	4638      	mov	r0, r7
 800be28:	b009      	add	sp, #36	; 0x24
 800be2a:	ecbd 8b02 	vpop	{d8}
 800be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be32:	463e      	mov	r6, r7
 800be34:	4625      	mov	r5, r4
 800be36:	2401      	movs	r4, #1
 800be38:	e7ca      	b.n	800bdd0 <__gethex+0xd4>
 800be3a:	f04f 0900 	mov.w	r9, #0
 800be3e:	1cb1      	adds	r1, r6, #2
 800be40:	e7d3      	b.n	800bdea <__gethex+0xee>
 800be42:	f04f 0901 	mov.w	r9, #1
 800be46:	e7fa      	b.n	800be3e <__gethex+0x142>
 800be48:	230a      	movs	r3, #10
 800be4a:	fb03 0202 	mla	r2, r3, r2, r0
 800be4e:	3a10      	subs	r2, #16
 800be50:	e7d4      	b.n	800bdfc <__gethex+0x100>
 800be52:	4631      	mov	r1, r6
 800be54:	e7df      	b.n	800be16 <__gethex+0x11a>
 800be56:	1bf3      	subs	r3, r6, r7
 800be58:	3b01      	subs	r3, #1
 800be5a:	4621      	mov	r1, r4
 800be5c:	2b07      	cmp	r3, #7
 800be5e:	dc0b      	bgt.n	800be78 <__gethex+0x17c>
 800be60:	ee18 0a10 	vmov	r0, s16
 800be64:	f000 faec 	bl	800c440 <_Balloc>
 800be68:	4604      	mov	r4, r0
 800be6a:	b940      	cbnz	r0, 800be7e <__gethex+0x182>
 800be6c:	4b5d      	ldr	r3, [pc, #372]	; (800bfe4 <__gethex+0x2e8>)
 800be6e:	4602      	mov	r2, r0
 800be70:	21de      	movs	r1, #222	; 0xde
 800be72:	485d      	ldr	r0, [pc, #372]	; (800bfe8 <__gethex+0x2ec>)
 800be74:	f7fc fc14 	bl	80086a0 <__assert_func>
 800be78:	3101      	adds	r1, #1
 800be7a:	105b      	asrs	r3, r3, #1
 800be7c:	e7ee      	b.n	800be5c <__gethex+0x160>
 800be7e:	f100 0914 	add.w	r9, r0, #20
 800be82:	f04f 0b00 	mov.w	fp, #0
 800be86:	f1ca 0301 	rsb	r3, sl, #1
 800be8a:	f8cd 9008 	str.w	r9, [sp, #8]
 800be8e:	f8cd b000 	str.w	fp, [sp]
 800be92:	9306      	str	r3, [sp, #24]
 800be94:	42b7      	cmp	r7, r6
 800be96:	d340      	bcc.n	800bf1a <__gethex+0x21e>
 800be98:	9802      	ldr	r0, [sp, #8]
 800be9a:	9b00      	ldr	r3, [sp, #0]
 800be9c:	f840 3b04 	str.w	r3, [r0], #4
 800bea0:	eba0 0009 	sub.w	r0, r0, r9
 800bea4:	1080      	asrs	r0, r0, #2
 800bea6:	0146      	lsls	r6, r0, #5
 800bea8:	6120      	str	r0, [r4, #16]
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 fbba 	bl	800c624 <__hi0bits>
 800beb0:	1a30      	subs	r0, r6, r0
 800beb2:	f8d8 6000 	ldr.w	r6, [r8]
 800beb6:	42b0      	cmp	r0, r6
 800beb8:	dd63      	ble.n	800bf82 <__gethex+0x286>
 800beba:	1b87      	subs	r7, r0, r6
 800bebc:	4639      	mov	r1, r7
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 ff5e 	bl	800cd80 <__any_on>
 800bec4:	4682      	mov	sl, r0
 800bec6:	b1a8      	cbz	r0, 800bef4 <__gethex+0x1f8>
 800bec8:	1e7b      	subs	r3, r7, #1
 800beca:	1159      	asrs	r1, r3, #5
 800becc:	f003 021f 	and.w	r2, r3, #31
 800bed0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bed4:	f04f 0a01 	mov.w	sl, #1
 800bed8:	fa0a f202 	lsl.w	r2, sl, r2
 800bedc:	420a      	tst	r2, r1
 800bede:	d009      	beq.n	800bef4 <__gethex+0x1f8>
 800bee0:	4553      	cmp	r3, sl
 800bee2:	dd05      	ble.n	800bef0 <__gethex+0x1f4>
 800bee4:	1eb9      	subs	r1, r7, #2
 800bee6:	4620      	mov	r0, r4
 800bee8:	f000 ff4a 	bl	800cd80 <__any_on>
 800beec:	2800      	cmp	r0, #0
 800beee:	d145      	bne.n	800bf7c <__gethex+0x280>
 800bef0:	f04f 0a02 	mov.w	sl, #2
 800bef4:	4639      	mov	r1, r7
 800bef6:	4620      	mov	r0, r4
 800bef8:	f7ff fe98 	bl	800bc2c <rshift>
 800befc:	443d      	add	r5, r7
 800befe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf02:	42ab      	cmp	r3, r5
 800bf04:	da4c      	bge.n	800bfa0 <__gethex+0x2a4>
 800bf06:	ee18 0a10 	vmov	r0, s16
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	f000 fad8 	bl	800c4c0 <_Bfree>
 800bf10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf12:	2300      	movs	r3, #0
 800bf14:	6013      	str	r3, [r2, #0]
 800bf16:	27a3      	movs	r7, #163	; 0xa3
 800bf18:	e785      	b.n	800be26 <__gethex+0x12a>
 800bf1a:	1e73      	subs	r3, r6, #1
 800bf1c:	9a05      	ldr	r2, [sp, #20]
 800bf1e:	9303      	str	r3, [sp, #12]
 800bf20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d019      	beq.n	800bf5c <__gethex+0x260>
 800bf28:	f1bb 0f20 	cmp.w	fp, #32
 800bf2c:	d107      	bne.n	800bf3e <__gethex+0x242>
 800bf2e:	9b02      	ldr	r3, [sp, #8]
 800bf30:	9a00      	ldr	r2, [sp, #0]
 800bf32:	f843 2b04 	str.w	r2, [r3], #4
 800bf36:	9302      	str	r3, [sp, #8]
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	469b      	mov	fp, r3
 800bf3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bf42:	f7ff fec5 	bl	800bcd0 <__hexdig_fun>
 800bf46:	9b00      	ldr	r3, [sp, #0]
 800bf48:	f000 000f 	and.w	r0, r0, #15
 800bf4c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bf50:	4303      	orrs	r3, r0
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	f10b 0b04 	add.w	fp, fp, #4
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	e00d      	b.n	800bf78 <__gethex+0x27c>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	9a06      	ldr	r2, [sp, #24]
 800bf60:	4413      	add	r3, r2
 800bf62:	42bb      	cmp	r3, r7
 800bf64:	d3e0      	bcc.n	800bf28 <__gethex+0x22c>
 800bf66:	4618      	mov	r0, r3
 800bf68:	9901      	ldr	r1, [sp, #4]
 800bf6a:	9307      	str	r3, [sp, #28]
 800bf6c:	4652      	mov	r2, sl
 800bf6e:	f001 f913 	bl	800d198 <strncmp>
 800bf72:	9b07      	ldr	r3, [sp, #28]
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d1d7      	bne.n	800bf28 <__gethex+0x22c>
 800bf78:	461e      	mov	r6, r3
 800bf7a:	e78b      	b.n	800be94 <__gethex+0x198>
 800bf7c:	f04f 0a03 	mov.w	sl, #3
 800bf80:	e7b8      	b.n	800bef4 <__gethex+0x1f8>
 800bf82:	da0a      	bge.n	800bf9a <__gethex+0x29e>
 800bf84:	1a37      	subs	r7, r6, r0
 800bf86:	4621      	mov	r1, r4
 800bf88:	ee18 0a10 	vmov	r0, s16
 800bf8c:	463a      	mov	r2, r7
 800bf8e:	f000 fcb3 	bl	800c8f8 <__lshift>
 800bf92:	1bed      	subs	r5, r5, r7
 800bf94:	4604      	mov	r4, r0
 800bf96:	f100 0914 	add.w	r9, r0, #20
 800bf9a:	f04f 0a00 	mov.w	sl, #0
 800bf9e:	e7ae      	b.n	800befe <__gethex+0x202>
 800bfa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bfa4:	42a8      	cmp	r0, r5
 800bfa6:	dd72      	ble.n	800c08e <__gethex+0x392>
 800bfa8:	1b45      	subs	r5, r0, r5
 800bfaa:	42ae      	cmp	r6, r5
 800bfac:	dc36      	bgt.n	800c01c <__gethex+0x320>
 800bfae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d02a      	beq.n	800c00c <__gethex+0x310>
 800bfb6:	2b03      	cmp	r3, #3
 800bfb8:	d02c      	beq.n	800c014 <__gethex+0x318>
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d11c      	bne.n	800bff8 <__gethex+0x2fc>
 800bfbe:	42ae      	cmp	r6, r5
 800bfc0:	d11a      	bne.n	800bff8 <__gethex+0x2fc>
 800bfc2:	2e01      	cmp	r6, #1
 800bfc4:	d112      	bne.n	800bfec <__gethex+0x2f0>
 800bfc6:	9a04      	ldr	r2, [sp, #16]
 800bfc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	2301      	movs	r3, #1
 800bfd0:	6123      	str	r3, [r4, #16]
 800bfd2:	f8c9 3000 	str.w	r3, [r9]
 800bfd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfd8:	2762      	movs	r7, #98	; 0x62
 800bfda:	601c      	str	r4, [r3, #0]
 800bfdc:	e723      	b.n	800be26 <__gethex+0x12a>
 800bfde:	bf00      	nop
 800bfe0:	0800fb08 	.word	0x0800fb08
 800bfe4:	0800fa8f 	.word	0x0800fa8f
 800bfe8:	0800faa0 	.word	0x0800faa0
 800bfec:	1e71      	subs	r1, r6, #1
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 fec6 	bl	800cd80 <__any_on>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d1e6      	bne.n	800bfc6 <__gethex+0x2ca>
 800bff8:	ee18 0a10 	vmov	r0, s16
 800bffc:	4621      	mov	r1, r4
 800bffe:	f000 fa5f 	bl	800c4c0 <_Bfree>
 800c002:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c004:	2300      	movs	r3, #0
 800c006:	6013      	str	r3, [r2, #0]
 800c008:	2750      	movs	r7, #80	; 0x50
 800c00a:	e70c      	b.n	800be26 <__gethex+0x12a>
 800c00c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1f2      	bne.n	800bff8 <__gethex+0x2fc>
 800c012:	e7d8      	b.n	800bfc6 <__gethex+0x2ca>
 800c014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1d5      	bne.n	800bfc6 <__gethex+0x2ca>
 800c01a:	e7ed      	b.n	800bff8 <__gethex+0x2fc>
 800c01c:	1e6f      	subs	r7, r5, #1
 800c01e:	f1ba 0f00 	cmp.w	sl, #0
 800c022:	d131      	bne.n	800c088 <__gethex+0x38c>
 800c024:	b127      	cbz	r7, 800c030 <__gethex+0x334>
 800c026:	4639      	mov	r1, r7
 800c028:	4620      	mov	r0, r4
 800c02a:	f000 fea9 	bl	800cd80 <__any_on>
 800c02e:	4682      	mov	sl, r0
 800c030:	117b      	asrs	r3, r7, #5
 800c032:	2101      	movs	r1, #1
 800c034:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c038:	f007 071f 	and.w	r7, r7, #31
 800c03c:	fa01 f707 	lsl.w	r7, r1, r7
 800c040:	421f      	tst	r7, r3
 800c042:	4629      	mov	r1, r5
 800c044:	4620      	mov	r0, r4
 800c046:	bf18      	it	ne
 800c048:	f04a 0a02 	orrne.w	sl, sl, #2
 800c04c:	1b76      	subs	r6, r6, r5
 800c04e:	f7ff fded 	bl	800bc2c <rshift>
 800c052:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c056:	2702      	movs	r7, #2
 800c058:	f1ba 0f00 	cmp.w	sl, #0
 800c05c:	d048      	beq.n	800c0f0 <__gethex+0x3f4>
 800c05e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c062:	2b02      	cmp	r3, #2
 800c064:	d015      	beq.n	800c092 <__gethex+0x396>
 800c066:	2b03      	cmp	r3, #3
 800c068:	d017      	beq.n	800c09a <__gethex+0x39e>
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d109      	bne.n	800c082 <__gethex+0x386>
 800c06e:	f01a 0f02 	tst.w	sl, #2
 800c072:	d006      	beq.n	800c082 <__gethex+0x386>
 800c074:	f8d9 0000 	ldr.w	r0, [r9]
 800c078:	ea4a 0a00 	orr.w	sl, sl, r0
 800c07c:	f01a 0f01 	tst.w	sl, #1
 800c080:	d10e      	bne.n	800c0a0 <__gethex+0x3a4>
 800c082:	f047 0710 	orr.w	r7, r7, #16
 800c086:	e033      	b.n	800c0f0 <__gethex+0x3f4>
 800c088:	f04f 0a01 	mov.w	sl, #1
 800c08c:	e7d0      	b.n	800c030 <__gethex+0x334>
 800c08e:	2701      	movs	r7, #1
 800c090:	e7e2      	b.n	800c058 <__gethex+0x35c>
 800c092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c094:	f1c3 0301 	rsb	r3, r3, #1
 800c098:	9315      	str	r3, [sp, #84]	; 0x54
 800c09a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d0f0      	beq.n	800c082 <__gethex+0x386>
 800c0a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0a4:	f104 0314 	add.w	r3, r4, #20
 800c0a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c0ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c0b0:	f04f 0c00 	mov.w	ip, #0
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c0be:	d01c      	beq.n	800c0fa <__gethex+0x3fe>
 800c0c0:	3201      	adds	r2, #1
 800c0c2:	6002      	str	r2, [r0, #0]
 800c0c4:	2f02      	cmp	r7, #2
 800c0c6:	f104 0314 	add.w	r3, r4, #20
 800c0ca:	d13f      	bne.n	800c14c <__gethex+0x450>
 800c0cc:	f8d8 2000 	ldr.w	r2, [r8]
 800c0d0:	3a01      	subs	r2, #1
 800c0d2:	42b2      	cmp	r2, r6
 800c0d4:	d10a      	bne.n	800c0ec <__gethex+0x3f0>
 800c0d6:	1171      	asrs	r1, r6, #5
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0de:	f006 061f 	and.w	r6, r6, #31
 800c0e2:	fa02 f606 	lsl.w	r6, r2, r6
 800c0e6:	421e      	tst	r6, r3
 800c0e8:	bf18      	it	ne
 800c0ea:	4617      	movne	r7, r2
 800c0ec:	f047 0720 	orr.w	r7, r7, #32
 800c0f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0f2:	601c      	str	r4, [r3, #0]
 800c0f4:	9b04      	ldr	r3, [sp, #16]
 800c0f6:	601d      	str	r5, [r3, #0]
 800c0f8:	e695      	b.n	800be26 <__gethex+0x12a>
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c100:	d8d8      	bhi.n	800c0b4 <__gethex+0x3b8>
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	459b      	cmp	fp, r3
 800c106:	db19      	blt.n	800c13c <__gethex+0x440>
 800c108:	6861      	ldr	r1, [r4, #4]
 800c10a:	ee18 0a10 	vmov	r0, s16
 800c10e:	3101      	adds	r1, #1
 800c110:	f000 f996 	bl	800c440 <_Balloc>
 800c114:	4681      	mov	r9, r0
 800c116:	b918      	cbnz	r0, 800c120 <__gethex+0x424>
 800c118:	4b1a      	ldr	r3, [pc, #104]	; (800c184 <__gethex+0x488>)
 800c11a:	4602      	mov	r2, r0
 800c11c:	2184      	movs	r1, #132	; 0x84
 800c11e:	e6a8      	b.n	800be72 <__gethex+0x176>
 800c120:	6922      	ldr	r2, [r4, #16]
 800c122:	3202      	adds	r2, #2
 800c124:	f104 010c 	add.w	r1, r4, #12
 800c128:	0092      	lsls	r2, r2, #2
 800c12a:	300c      	adds	r0, #12
 800c12c:	f7fc fda6 	bl	8008c7c <memcpy>
 800c130:	4621      	mov	r1, r4
 800c132:	ee18 0a10 	vmov	r0, s16
 800c136:	f000 f9c3 	bl	800c4c0 <_Bfree>
 800c13a:	464c      	mov	r4, r9
 800c13c:	6923      	ldr	r3, [r4, #16]
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c144:	6122      	str	r2, [r4, #16]
 800c146:	2201      	movs	r2, #1
 800c148:	615a      	str	r2, [r3, #20]
 800c14a:	e7bb      	b.n	800c0c4 <__gethex+0x3c8>
 800c14c:	6922      	ldr	r2, [r4, #16]
 800c14e:	455a      	cmp	r2, fp
 800c150:	dd0b      	ble.n	800c16a <__gethex+0x46e>
 800c152:	2101      	movs	r1, #1
 800c154:	4620      	mov	r0, r4
 800c156:	f7ff fd69 	bl	800bc2c <rshift>
 800c15a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c15e:	3501      	adds	r5, #1
 800c160:	42ab      	cmp	r3, r5
 800c162:	f6ff aed0 	blt.w	800bf06 <__gethex+0x20a>
 800c166:	2701      	movs	r7, #1
 800c168:	e7c0      	b.n	800c0ec <__gethex+0x3f0>
 800c16a:	f016 061f 	ands.w	r6, r6, #31
 800c16e:	d0fa      	beq.n	800c166 <__gethex+0x46a>
 800c170:	4453      	add	r3, sl
 800c172:	f1c6 0620 	rsb	r6, r6, #32
 800c176:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c17a:	f000 fa53 	bl	800c624 <__hi0bits>
 800c17e:	42b0      	cmp	r0, r6
 800c180:	dbe7      	blt.n	800c152 <__gethex+0x456>
 800c182:	e7f0      	b.n	800c166 <__gethex+0x46a>
 800c184:	0800fa8f 	.word	0x0800fa8f

0800c188 <L_shift>:
 800c188:	f1c2 0208 	rsb	r2, r2, #8
 800c18c:	0092      	lsls	r2, r2, #2
 800c18e:	b570      	push	{r4, r5, r6, lr}
 800c190:	f1c2 0620 	rsb	r6, r2, #32
 800c194:	6843      	ldr	r3, [r0, #4]
 800c196:	6804      	ldr	r4, [r0, #0]
 800c198:	fa03 f506 	lsl.w	r5, r3, r6
 800c19c:	432c      	orrs	r4, r5
 800c19e:	40d3      	lsrs	r3, r2
 800c1a0:	6004      	str	r4, [r0, #0]
 800c1a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1a6:	4288      	cmp	r0, r1
 800c1a8:	d3f4      	bcc.n	800c194 <L_shift+0xc>
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}

0800c1ac <__match>:
 800c1ac:	b530      	push	{r4, r5, lr}
 800c1ae:	6803      	ldr	r3, [r0, #0]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1b6:	b914      	cbnz	r4, 800c1be <__match+0x12>
 800c1b8:	6003      	str	r3, [r0, #0]
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	bd30      	pop	{r4, r5, pc}
 800c1be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1c6:	2d19      	cmp	r5, #25
 800c1c8:	bf98      	it	ls
 800c1ca:	3220      	addls	r2, #32
 800c1cc:	42a2      	cmp	r2, r4
 800c1ce:	d0f0      	beq.n	800c1b2 <__match+0x6>
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	e7f3      	b.n	800c1bc <__match+0x10>

0800c1d4 <__hexnan>:
 800c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d8:	680b      	ldr	r3, [r1, #0]
 800c1da:	115e      	asrs	r6, r3, #5
 800c1dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c1e0:	f013 031f 	ands.w	r3, r3, #31
 800c1e4:	b087      	sub	sp, #28
 800c1e6:	bf18      	it	ne
 800c1e8:	3604      	addne	r6, #4
 800c1ea:	2500      	movs	r5, #0
 800c1ec:	1f37      	subs	r7, r6, #4
 800c1ee:	4690      	mov	r8, r2
 800c1f0:	6802      	ldr	r2, [r0, #0]
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c1fa:	46b9      	mov	r9, r7
 800c1fc:	463c      	mov	r4, r7
 800c1fe:	9502      	str	r5, [sp, #8]
 800c200:	46ab      	mov	fp, r5
 800c202:	7851      	ldrb	r1, [r2, #1]
 800c204:	1c53      	adds	r3, r2, #1
 800c206:	9303      	str	r3, [sp, #12]
 800c208:	b341      	cbz	r1, 800c25c <__hexnan+0x88>
 800c20a:	4608      	mov	r0, r1
 800c20c:	9205      	str	r2, [sp, #20]
 800c20e:	9104      	str	r1, [sp, #16]
 800c210:	f7ff fd5e 	bl	800bcd0 <__hexdig_fun>
 800c214:	2800      	cmp	r0, #0
 800c216:	d14f      	bne.n	800c2b8 <__hexnan+0xe4>
 800c218:	9904      	ldr	r1, [sp, #16]
 800c21a:	9a05      	ldr	r2, [sp, #20]
 800c21c:	2920      	cmp	r1, #32
 800c21e:	d818      	bhi.n	800c252 <__hexnan+0x7e>
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	459b      	cmp	fp, r3
 800c224:	dd13      	ble.n	800c24e <__hexnan+0x7a>
 800c226:	454c      	cmp	r4, r9
 800c228:	d206      	bcs.n	800c238 <__hexnan+0x64>
 800c22a:	2d07      	cmp	r5, #7
 800c22c:	dc04      	bgt.n	800c238 <__hexnan+0x64>
 800c22e:	462a      	mov	r2, r5
 800c230:	4649      	mov	r1, r9
 800c232:	4620      	mov	r0, r4
 800c234:	f7ff ffa8 	bl	800c188 <L_shift>
 800c238:	4544      	cmp	r4, r8
 800c23a:	d950      	bls.n	800c2de <__hexnan+0x10a>
 800c23c:	2300      	movs	r3, #0
 800c23e:	f1a4 0904 	sub.w	r9, r4, #4
 800c242:	f844 3c04 	str.w	r3, [r4, #-4]
 800c246:	f8cd b008 	str.w	fp, [sp, #8]
 800c24a:	464c      	mov	r4, r9
 800c24c:	461d      	mov	r5, r3
 800c24e:	9a03      	ldr	r2, [sp, #12]
 800c250:	e7d7      	b.n	800c202 <__hexnan+0x2e>
 800c252:	2929      	cmp	r1, #41	; 0x29
 800c254:	d156      	bne.n	800c304 <__hexnan+0x130>
 800c256:	3202      	adds	r2, #2
 800c258:	f8ca 2000 	str.w	r2, [sl]
 800c25c:	f1bb 0f00 	cmp.w	fp, #0
 800c260:	d050      	beq.n	800c304 <__hexnan+0x130>
 800c262:	454c      	cmp	r4, r9
 800c264:	d206      	bcs.n	800c274 <__hexnan+0xa0>
 800c266:	2d07      	cmp	r5, #7
 800c268:	dc04      	bgt.n	800c274 <__hexnan+0xa0>
 800c26a:	462a      	mov	r2, r5
 800c26c:	4649      	mov	r1, r9
 800c26e:	4620      	mov	r0, r4
 800c270:	f7ff ff8a 	bl	800c188 <L_shift>
 800c274:	4544      	cmp	r4, r8
 800c276:	d934      	bls.n	800c2e2 <__hexnan+0x10e>
 800c278:	f1a8 0204 	sub.w	r2, r8, #4
 800c27c:	4623      	mov	r3, r4
 800c27e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c282:	f842 1f04 	str.w	r1, [r2, #4]!
 800c286:	429f      	cmp	r7, r3
 800c288:	d2f9      	bcs.n	800c27e <__hexnan+0xaa>
 800c28a:	1b3b      	subs	r3, r7, r4
 800c28c:	f023 0303 	bic.w	r3, r3, #3
 800c290:	3304      	adds	r3, #4
 800c292:	3401      	adds	r4, #1
 800c294:	3e03      	subs	r6, #3
 800c296:	42b4      	cmp	r4, r6
 800c298:	bf88      	it	hi
 800c29a:	2304      	movhi	r3, #4
 800c29c:	4443      	add	r3, r8
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f843 2b04 	str.w	r2, [r3], #4
 800c2a4:	429f      	cmp	r7, r3
 800c2a6:	d2fb      	bcs.n	800c2a0 <__hexnan+0xcc>
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	b91b      	cbnz	r3, 800c2b4 <__hexnan+0xe0>
 800c2ac:	4547      	cmp	r7, r8
 800c2ae:	d127      	bne.n	800c300 <__hexnan+0x12c>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	2005      	movs	r0, #5
 800c2b6:	e026      	b.n	800c306 <__hexnan+0x132>
 800c2b8:	3501      	adds	r5, #1
 800c2ba:	2d08      	cmp	r5, #8
 800c2bc:	f10b 0b01 	add.w	fp, fp, #1
 800c2c0:	dd06      	ble.n	800c2d0 <__hexnan+0xfc>
 800c2c2:	4544      	cmp	r4, r8
 800c2c4:	d9c3      	bls.n	800c24e <__hexnan+0x7a>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2cc:	2501      	movs	r5, #1
 800c2ce:	3c04      	subs	r4, #4
 800c2d0:	6822      	ldr	r2, [r4, #0]
 800c2d2:	f000 000f 	and.w	r0, r0, #15
 800c2d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c2da:	6022      	str	r2, [r4, #0]
 800c2dc:	e7b7      	b.n	800c24e <__hexnan+0x7a>
 800c2de:	2508      	movs	r5, #8
 800c2e0:	e7b5      	b.n	800c24e <__hexnan+0x7a>
 800c2e2:	9b01      	ldr	r3, [sp, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d0df      	beq.n	800c2a8 <__hexnan+0xd4>
 800c2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ec:	f1c3 0320 	rsb	r3, r3, #32
 800c2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c2f8:	401a      	ands	r2, r3
 800c2fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800c2fe:	e7d3      	b.n	800c2a8 <__hexnan+0xd4>
 800c300:	3f04      	subs	r7, #4
 800c302:	e7d1      	b.n	800c2a8 <__hexnan+0xd4>
 800c304:	2004      	movs	r0, #4
 800c306:	b007      	add	sp, #28
 800c308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c30c <_localeconv_r>:
 800c30c:	4800      	ldr	r0, [pc, #0]	; (800c310 <_localeconv_r+0x4>)
 800c30e:	4770      	bx	lr
 800c310:	20000164 	.word	0x20000164

0800c314 <_lseek_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d07      	ldr	r5, [pc, #28]	; (800c334 <_lseek_r+0x20>)
 800c318:	4604      	mov	r4, r0
 800c31a:	4608      	mov	r0, r1
 800c31c:	4611      	mov	r1, r2
 800c31e:	2200      	movs	r2, #0
 800c320:	602a      	str	r2, [r5, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	f7f5 f82a 	bl	800137c <_lseek>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_lseek_r+0x1e>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_lseek_r+0x1e>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	20000ee8 	.word	0x20000ee8

0800c338 <__swhatbuf_r>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	460e      	mov	r6, r1
 800c33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c340:	2900      	cmp	r1, #0
 800c342:	b096      	sub	sp, #88	; 0x58
 800c344:	4614      	mov	r4, r2
 800c346:	461d      	mov	r5, r3
 800c348:	da08      	bge.n	800c35c <__swhatbuf_r+0x24>
 800c34a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	602a      	str	r2, [r5, #0]
 800c352:	061a      	lsls	r2, r3, #24
 800c354:	d410      	bmi.n	800c378 <__swhatbuf_r+0x40>
 800c356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c35a:	e00e      	b.n	800c37a <__swhatbuf_r+0x42>
 800c35c:	466a      	mov	r2, sp
 800c35e:	f000 ff3d 	bl	800d1dc <_fstat_r>
 800c362:	2800      	cmp	r0, #0
 800c364:	dbf1      	blt.n	800c34a <__swhatbuf_r+0x12>
 800c366:	9a01      	ldr	r2, [sp, #4]
 800c368:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c36c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c370:	425a      	negs	r2, r3
 800c372:	415a      	adcs	r2, r3
 800c374:	602a      	str	r2, [r5, #0]
 800c376:	e7ee      	b.n	800c356 <__swhatbuf_r+0x1e>
 800c378:	2340      	movs	r3, #64	; 0x40
 800c37a:	2000      	movs	r0, #0
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	b016      	add	sp, #88	; 0x58
 800c380:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c384 <__smakebuf_r>:
 800c384:	898b      	ldrh	r3, [r1, #12]
 800c386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c388:	079d      	lsls	r5, r3, #30
 800c38a:	4606      	mov	r6, r0
 800c38c:	460c      	mov	r4, r1
 800c38e:	d507      	bpl.n	800c3a0 <__smakebuf_r+0x1c>
 800c390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	6123      	str	r3, [r4, #16]
 800c398:	2301      	movs	r3, #1
 800c39a:	6163      	str	r3, [r4, #20]
 800c39c:	b002      	add	sp, #8
 800c39e:	bd70      	pop	{r4, r5, r6, pc}
 800c3a0:	ab01      	add	r3, sp, #4
 800c3a2:	466a      	mov	r2, sp
 800c3a4:	f7ff ffc8 	bl	800c338 <__swhatbuf_r>
 800c3a8:	9900      	ldr	r1, [sp, #0]
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f7fc fd17 	bl	8008de0 <_malloc_r>
 800c3b2:	b948      	cbnz	r0, 800c3c8 <__smakebuf_r+0x44>
 800c3b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b8:	059a      	lsls	r2, r3, #22
 800c3ba:	d4ef      	bmi.n	800c39c <__smakebuf_r+0x18>
 800c3bc:	f023 0303 	bic.w	r3, r3, #3
 800c3c0:	f043 0302 	orr.w	r3, r3, #2
 800c3c4:	81a3      	strh	r3, [r4, #12]
 800c3c6:	e7e3      	b.n	800c390 <__smakebuf_r+0xc>
 800c3c8:	4b0d      	ldr	r3, [pc, #52]	; (800c400 <__smakebuf_r+0x7c>)
 800c3ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	6020      	str	r0, [r4, #0]
 800c3d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3d4:	81a3      	strh	r3, [r4, #12]
 800c3d6:	9b00      	ldr	r3, [sp, #0]
 800c3d8:	6163      	str	r3, [r4, #20]
 800c3da:	9b01      	ldr	r3, [sp, #4]
 800c3dc:	6120      	str	r0, [r4, #16]
 800c3de:	b15b      	cbz	r3, 800c3f8 <__smakebuf_r+0x74>
 800c3e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f000 ff0b 	bl	800d200 <_isatty_r>
 800c3ea:	b128      	cbz	r0, 800c3f8 <__smakebuf_r+0x74>
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	f023 0303 	bic.w	r3, r3, #3
 800c3f2:	f043 0301 	orr.w	r3, r3, #1
 800c3f6:	81a3      	strh	r3, [r4, #12]
 800c3f8:	89a0      	ldrh	r0, [r4, #12]
 800c3fa:	4305      	orrs	r5, r0
 800c3fc:	81a5      	strh	r5, [r4, #12]
 800c3fe:	e7cd      	b.n	800c39c <__smakebuf_r+0x18>
 800c400:	080088e9 	.word	0x080088e9

0800c404 <__ascii_mbtowc>:
 800c404:	b082      	sub	sp, #8
 800c406:	b901      	cbnz	r1, 800c40a <__ascii_mbtowc+0x6>
 800c408:	a901      	add	r1, sp, #4
 800c40a:	b142      	cbz	r2, 800c41e <__ascii_mbtowc+0x1a>
 800c40c:	b14b      	cbz	r3, 800c422 <__ascii_mbtowc+0x1e>
 800c40e:	7813      	ldrb	r3, [r2, #0]
 800c410:	600b      	str	r3, [r1, #0]
 800c412:	7812      	ldrb	r2, [r2, #0]
 800c414:	1e10      	subs	r0, r2, #0
 800c416:	bf18      	it	ne
 800c418:	2001      	movne	r0, #1
 800c41a:	b002      	add	sp, #8
 800c41c:	4770      	bx	lr
 800c41e:	4610      	mov	r0, r2
 800c420:	e7fb      	b.n	800c41a <__ascii_mbtowc+0x16>
 800c422:	f06f 0001 	mvn.w	r0, #1
 800c426:	e7f8      	b.n	800c41a <__ascii_mbtowc+0x16>

0800c428 <__malloc_lock>:
 800c428:	4801      	ldr	r0, [pc, #4]	; (800c430 <__malloc_lock+0x8>)
 800c42a:	f7fc bc14 	b.w	8008c56 <__retarget_lock_acquire_recursive>
 800c42e:	bf00      	nop
 800c430:	20000edc 	.word	0x20000edc

0800c434 <__malloc_unlock>:
 800c434:	4801      	ldr	r0, [pc, #4]	; (800c43c <__malloc_unlock+0x8>)
 800c436:	f7fc bc0f 	b.w	8008c58 <__retarget_lock_release_recursive>
 800c43a:	bf00      	nop
 800c43c:	20000edc 	.word	0x20000edc

0800c440 <_Balloc>:
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c444:	4604      	mov	r4, r0
 800c446:	460d      	mov	r5, r1
 800c448:	b976      	cbnz	r6, 800c468 <_Balloc+0x28>
 800c44a:	2010      	movs	r0, #16
 800c44c:	f7fc fc06 	bl	8008c5c <malloc>
 800c450:	4602      	mov	r2, r0
 800c452:	6260      	str	r0, [r4, #36]	; 0x24
 800c454:	b920      	cbnz	r0, 800c460 <_Balloc+0x20>
 800c456:	4b18      	ldr	r3, [pc, #96]	; (800c4b8 <_Balloc+0x78>)
 800c458:	4818      	ldr	r0, [pc, #96]	; (800c4bc <_Balloc+0x7c>)
 800c45a:	2166      	movs	r1, #102	; 0x66
 800c45c:	f7fc f920 	bl	80086a0 <__assert_func>
 800c460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c464:	6006      	str	r6, [r0, #0]
 800c466:	60c6      	str	r6, [r0, #12]
 800c468:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c46a:	68f3      	ldr	r3, [r6, #12]
 800c46c:	b183      	cbz	r3, 800c490 <_Balloc+0x50>
 800c46e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c476:	b9b8      	cbnz	r0, 800c4a8 <_Balloc+0x68>
 800c478:	2101      	movs	r1, #1
 800c47a:	fa01 f605 	lsl.w	r6, r1, r5
 800c47e:	1d72      	adds	r2, r6, #5
 800c480:	0092      	lsls	r2, r2, #2
 800c482:	4620      	mov	r0, r4
 800c484:	f7fc fc2a 	bl	8008cdc <_calloc_r>
 800c488:	b160      	cbz	r0, 800c4a4 <_Balloc+0x64>
 800c48a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c48e:	e00e      	b.n	800c4ae <_Balloc+0x6e>
 800c490:	2221      	movs	r2, #33	; 0x21
 800c492:	2104      	movs	r1, #4
 800c494:	4620      	mov	r0, r4
 800c496:	f7fc fc21 	bl	8008cdc <_calloc_r>
 800c49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c49c:	60f0      	str	r0, [r6, #12]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1e4      	bne.n	800c46e <_Balloc+0x2e>
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}
 800c4a8:	6802      	ldr	r2, [r0, #0]
 800c4aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4b4:	e7f7      	b.n	800c4a6 <_Balloc+0x66>
 800c4b6:	bf00      	nop
 800c4b8:	0800fa1d 	.word	0x0800fa1d
 800c4bc:	0800fb1c 	.word	0x0800fb1c

0800c4c0 <_Bfree>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	b976      	cbnz	r6, 800c4e8 <_Bfree+0x28>
 800c4ca:	2010      	movs	r0, #16
 800c4cc:	f7fc fbc6 	bl	8008c5c <malloc>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	6268      	str	r0, [r5, #36]	; 0x24
 800c4d4:	b920      	cbnz	r0, 800c4e0 <_Bfree+0x20>
 800c4d6:	4b09      	ldr	r3, [pc, #36]	; (800c4fc <_Bfree+0x3c>)
 800c4d8:	4809      	ldr	r0, [pc, #36]	; (800c500 <_Bfree+0x40>)
 800c4da:	218a      	movs	r1, #138	; 0x8a
 800c4dc:	f7fc f8e0 	bl	80086a0 <__assert_func>
 800c4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4e4:	6006      	str	r6, [r0, #0]
 800c4e6:	60c6      	str	r6, [r0, #12]
 800c4e8:	b13c      	cbz	r4, 800c4fa <_Bfree+0x3a>
 800c4ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4ec:	6862      	ldr	r2, [r4, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4f4:	6021      	str	r1, [r4, #0]
 800c4f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}
 800c4fc:	0800fa1d 	.word	0x0800fa1d
 800c500:	0800fb1c 	.word	0x0800fb1c

0800c504 <__multadd>:
 800c504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c508:	690d      	ldr	r5, [r1, #16]
 800c50a:	4607      	mov	r7, r0
 800c50c:	460c      	mov	r4, r1
 800c50e:	461e      	mov	r6, r3
 800c510:	f101 0c14 	add.w	ip, r1, #20
 800c514:	2000      	movs	r0, #0
 800c516:	f8dc 3000 	ldr.w	r3, [ip]
 800c51a:	b299      	uxth	r1, r3
 800c51c:	fb02 6101 	mla	r1, r2, r1, r6
 800c520:	0c1e      	lsrs	r6, r3, #16
 800c522:	0c0b      	lsrs	r3, r1, #16
 800c524:	fb02 3306 	mla	r3, r2, r6, r3
 800c528:	b289      	uxth	r1, r1
 800c52a:	3001      	adds	r0, #1
 800c52c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c530:	4285      	cmp	r5, r0
 800c532:	f84c 1b04 	str.w	r1, [ip], #4
 800c536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c53a:	dcec      	bgt.n	800c516 <__multadd+0x12>
 800c53c:	b30e      	cbz	r6, 800c582 <__multadd+0x7e>
 800c53e:	68a3      	ldr	r3, [r4, #8]
 800c540:	42ab      	cmp	r3, r5
 800c542:	dc19      	bgt.n	800c578 <__multadd+0x74>
 800c544:	6861      	ldr	r1, [r4, #4]
 800c546:	4638      	mov	r0, r7
 800c548:	3101      	adds	r1, #1
 800c54a:	f7ff ff79 	bl	800c440 <_Balloc>
 800c54e:	4680      	mov	r8, r0
 800c550:	b928      	cbnz	r0, 800c55e <__multadd+0x5a>
 800c552:	4602      	mov	r2, r0
 800c554:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <__multadd+0x84>)
 800c556:	480d      	ldr	r0, [pc, #52]	; (800c58c <__multadd+0x88>)
 800c558:	21b5      	movs	r1, #181	; 0xb5
 800c55a:	f7fc f8a1 	bl	80086a0 <__assert_func>
 800c55e:	6922      	ldr	r2, [r4, #16]
 800c560:	3202      	adds	r2, #2
 800c562:	f104 010c 	add.w	r1, r4, #12
 800c566:	0092      	lsls	r2, r2, #2
 800c568:	300c      	adds	r0, #12
 800c56a:	f7fc fb87 	bl	8008c7c <memcpy>
 800c56e:	4621      	mov	r1, r4
 800c570:	4638      	mov	r0, r7
 800c572:	f7ff ffa5 	bl	800c4c0 <_Bfree>
 800c576:	4644      	mov	r4, r8
 800c578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c57c:	3501      	adds	r5, #1
 800c57e:	615e      	str	r6, [r3, #20]
 800c580:	6125      	str	r5, [r4, #16]
 800c582:	4620      	mov	r0, r4
 800c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c588:	0800fa8f 	.word	0x0800fa8f
 800c58c:	0800fb1c 	.word	0x0800fb1c

0800c590 <__s2b>:
 800c590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c594:	460c      	mov	r4, r1
 800c596:	4615      	mov	r5, r2
 800c598:	461f      	mov	r7, r3
 800c59a:	2209      	movs	r2, #9
 800c59c:	3308      	adds	r3, #8
 800c59e:	4606      	mov	r6, r0
 800c5a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	db09      	blt.n	800c5c0 <__s2b+0x30>
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff ff47 	bl	800c440 <_Balloc>
 800c5b2:	b940      	cbnz	r0, 800c5c6 <__s2b+0x36>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	4b19      	ldr	r3, [pc, #100]	; (800c61c <__s2b+0x8c>)
 800c5b8:	4819      	ldr	r0, [pc, #100]	; (800c620 <__s2b+0x90>)
 800c5ba:	21ce      	movs	r1, #206	; 0xce
 800c5bc:	f7fc f870 	bl	80086a0 <__assert_func>
 800c5c0:	0052      	lsls	r2, r2, #1
 800c5c2:	3101      	adds	r1, #1
 800c5c4:	e7f0      	b.n	800c5a8 <__s2b+0x18>
 800c5c6:	9b08      	ldr	r3, [sp, #32]
 800c5c8:	6143      	str	r3, [r0, #20]
 800c5ca:	2d09      	cmp	r5, #9
 800c5cc:	f04f 0301 	mov.w	r3, #1
 800c5d0:	6103      	str	r3, [r0, #16]
 800c5d2:	dd16      	ble.n	800c602 <__s2b+0x72>
 800c5d4:	f104 0909 	add.w	r9, r4, #9
 800c5d8:	46c8      	mov	r8, r9
 800c5da:	442c      	add	r4, r5
 800c5dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	3b30      	subs	r3, #48	; 0x30
 800c5e4:	220a      	movs	r2, #10
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f7ff ff8c 	bl	800c504 <__multadd>
 800c5ec:	45a0      	cmp	r8, r4
 800c5ee:	d1f5      	bne.n	800c5dc <__s2b+0x4c>
 800c5f0:	f1a5 0408 	sub.w	r4, r5, #8
 800c5f4:	444c      	add	r4, r9
 800c5f6:	1b2d      	subs	r5, r5, r4
 800c5f8:	1963      	adds	r3, r4, r5
 800c5fa:	42bb      	cmp	r3, r7
 800c5fc:	db04      	blt.n	800c608 <__s2b+0x78>
 800c5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c602:	340a      	adds	r4, #10
 800c604:	2509      	movs	r5, #9
 800c606:	e7f6      	b.n	800c5f6 <__s2b+0x66>
 800c608:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c60c:	4601      	mov	r1, r0
 800c60e:	3b30      	subs	r3, #48	; 0x30
 800c610:	220a      	movs	r2, #10
 800c612:	4630      	mov	r0, r6
 800c614:	f7ff ff76 	bl	800c504 <__multadd>
 800c618:	e7ee      	b.n	800c5f8 <__s2b+0x68>
 800c61a:	bf00      	nop
 800c61c:	0800fa8f 	.word	0x0800fa8f
 800c620:	0800fb1c 	.word	0x0800fb1c

0800c624 <__hi0bits>:
 800c624:	0c03      	lsrs	r3, r0, #16
 800c626:	041b      	lsls	r3, r3, #16
 800c628:	b9d3      	cbnz	r3, 800c660 <__hi0bits+0x3c>
 800c62a:	0400      	lsls	r0, r0, #16
 800c62c:	2310      	movs	r3, #16
 800c62e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c632:	bf04      	itt	eq
 800c634:	0200      	lsleq	r0, r0, #8
 800c636:	3308      	addeq	r3, #8
 800c638:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c63c:	bf04      	itt	eq
 800c63e:	0100      	lsleq	r0, r0, #4
 800c640:	3304      	addeq	r3, #4
 800c642:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c646:	bf04      	itt	eq
 800c648:	0080      	lsleq	r0, r0, #2
 800c64a:	3302      	addeq	r3, #2
 800c64c:	2800      	cmp	r0, #0
 800c64e:	db05      	blt.n	800c65c <__hi0bits+0x38>
 800c650:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c654:	f103 0301 	add.w	r3, r3, #1
 800c658:	bf08      	it	eq
 800c65a:	2320      	moveq	r3, #32
 800c65c:	4618      	mov	r0, r3
 800c65e:	4770      	bx	lr
 800c660:	2300      	movs	r3, #0
 800c662:	e7e4      	b.n	800c62e <__hi0bits+0xa>

0800c664 <__lo0bits>:
 800c664:	6803      	ldr	r3, [r0, #0]
 800c666:	f013 0207 	ands.w	r2, r3, #7
 800c66a:	4601      	mov	r1, r0
 800c66c:	d00b      	beq.n	800c686 <__lo0bits+0x22>
 800c66e:	07da      	lsls	r2, r3, #31
 800c670:	d423      	bmi.n	800c6ba <__lo0bits+0x56>
 800c672:	0798      	lsls	r0, r3, #30
 800c674:	bf49      	itett	mi
 800c676:	085b      	lsrmi	r3, r3, #1
 800c678:	089b      	lsrpl	r3, r3, #2
 800c67a:	2001      	movmi	r0, #1
 800c67c:	600b      	strmi	r3, [r1, #0]
 800c67e:	bf5c      	itt	pl
 800c680:	600b      	strpl	r3, [r1, #0]
 800c682:	2002      	movpl	r0, #2
 800c684:	4770      	bx	lr
 800c686:	b298      	uxth	r0, r3
 800c688:	b9a8      	cbnz	r0, 800c6b6 <__lo0bits+0x52>
 800c68a:	0c1b      	lsrs	r3, r3, #16
 800c68c:	2010      	movs	r0, #16
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	b90a      	cbnz	r2, 800c696 <__lo0bits+0x32>
 800c692:	3008      	adds	r0, #8
 800c694:	0a1b      	lsrs	r3, r3, #8
 800c696:	071a      	lsls	r2, r3, #28
 800c698:	bf04      	itt	eq
 800c69a:	091b      	lsreq	r3, r3, #4
 800c69c:	3004      	addeq	r0, #4
 800c69e:	079a      	lsls	r2, r3, #30
 800c6a0:	bf04      	itt	eq
 800c6a2:	089b      	lsreq	r3, r3, #2
 800c6a4:	3002      	addeq	r0, #2
 800c6a6:	07da      	lsls	r2, r3, #31
 800c6a8:	d403      	bmi.n	800c6b2 <__lo0bits+0x4e>
 800c6aa:	085b      	lsrs	r3, r3, #1
 800c6ac:	f100 0001 	add.w	r0, r0, #1
 800c6b0:	d005      	beq.n	800c6be <__lo0bits+0x5a>
 800c6b2:	600b      	str	r3, [r1, #0]
 800c6b4:	4770      	bx	lr
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	e7e9      	b.n	800c68e <__lo0bits+0x2a>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	4770      	bx	lr
 800c6be:	2020      	movs	r0, #32
 800c6c0:	4770      	bx	lr
	...

0800c6c4 <__i2b>:
 800c6c4:	b510      	push	{r4, lr}
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	2101      	movs	r1, #1
 800c6ca:	f7ff feb9 	bl	800c440 <_Balloc>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	b928      	cbnz	r0, 800c6de <__i2b+0x1a>
 800c6d2:	4b05      	ldr	r3, [pc, #20]	; (800c6e8 <__i2b+0x24>)
 800c6d4:	4805      	ldr	r0, [pc, #20]	; (800c6ec <__i2b+0x28>)
 800c6d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c6da:	f7fb ffe1 	bl	80086a0 <__assert_func>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	6144      	str	r4, [r0, #20]
 800c6e2:	6103      	str	r3, [r0, #16]
 800c6e4:	bd10      	pop	{r4, pc}
 800c6e6:	bf00      	nop
 800c6e8:	0800fa8f 	.word	0x0800fa8f
 800c6ec:	0800fb1c 	.word	0x0800fb1c

0800c6f0 <__multiply>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	4691      	mov	r9, r2
 800c6f6:	690a      	ldr	r2, [r1, #16]
 800c6f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	bfb8      	it	lt
 800c700:	460b      	movlt	r3, r1
 800c702:	460c      	mov	r4, r1
 800c704:	bfbc      	itt	lt
 800c706:	464c      	movlt	r4, r9
 800c708:	4699      	movlt	r9, r3
 800c70a:	6927      	ldr	r7, [r4, #16]
 800c70c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c710:	68a3      	ldr	r3, [r4, #8]
 800c712:	6861      	ldr	r1, [r4, #4]
 800c714:	eb07 060a 	add.w	r6, r7, sl
 800c718:	42b3      	cmp	r3, r6
 800c71a:	b085      	sub	sp, #20
 800c71c:	bfb8      	it	lt
 800c71e:	3101      	addlt	r1, #1
 800c720:	f7ff fe8e 	bl	800c440 <_Balloc>
 800c724:	b930      	cbnz	r0, 800c734 <__multiply+0x44>
 800c726:	4602      	mov	r2, r0
 800c728:	4b44      	ldr	r3, [pc, #272]	; (800c83c <__multiply+0x14c>)
 800c72a:	4845      	ldr	r0, [pc, #276]	; (800c840 <__multiply+0x150>)
 800c72c:	f240 115d 	movw	r1, #349	; 0x15d
 800c730:	f7fb ffb6 	bl	80086a0 <__assert_func>
 800c734:	f100 0514 	add.w	r5, r0, #20
 800c738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c73c:	462b      	mov	r3, r5
 800c73e:	2200      	movs	r2, #0
 800c740:	4543      	cmp	r3, r8
 800c742:	d321      	bcc.n	800c788 <__multiply+0x98>
 800c744:	f104 0314 	add.w	r3, r4, #20
 800c748:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c74c:	f109 0314 	add.w	r3, r9, #20
 800c750:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c754:	9202      	str	r2, [sp, #8]
 800c756:	1b3a      	subs	r2, r7, r4
 800c758:	3a15      	subs	r2, #21
 800c75a:	f022 0203 	bic.w	r2, r2, #3
 800c75e:	3204      	adds	r2, #4
 800c760:	f104 0115 	add.w	r1, r4, #21
 800c764:	428f      	cmp	r7, r1
 800c766:	bf38      	it	cc
 800c768:	2204      	movcc	r2, #4
 800c76a:	9201      	str	r2, [sp, #4]
 800c76c:	9a02      	ldr	r2, [sp, #8]
 800c76e:	9303      	str	r3, [sp, #12]
 800c770:	429a      	cmp	r2, r3
 800c772:	d80c      	bhi.n	800c78e <__multiply+0x9e>
 800c774:	2e00      	cmp	r6, #0
 800c776:	dd03      	ble.n	800c780 <__multiply+0x90>
 800c778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d05a      	beq.n	800c836 <__multiply+0x146>
 800c780:	6106      	str	r6, [r0, #16]
 800c782:	b005      	add	sp, #20
 800c784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c788:	f843 2b04 	str.w	r2, [r3], #4
 800c78c:	e7d8      	b.n	800c740 <__multiply+0x50>
 800c78e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c792:	f1ba 0f00 	cmp.w	sl, #0
 800c796:	d024      	beq.n	800c7e2 <__multiply+0xf2>
 800c798:	f104 0e14 	add.w	lr, r4, #20
 800c79c:	46a9      	mov	r9, r5
 800c79e:	f04f 0c00 	mov.w	ip, #0
 800c7a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7a6:	f8d9 1000 	ldr.w	r1, [r9]
 800c7aa:	fa1f fb82 	uxth.w	fp, r2
 800c7ae:	b289      	uxth	r1, r1
 800c7b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c7bc:	4461      	add	r1, ip
 800c7be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7ca:	b289      	uxth	r1, r1
 800c7cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7d0:	4577      	cmp	r7, lr
 800c7d2:	f849 1b04 	str.w	r1, [r9], #4
 800c7d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7da:	d8e2      	bhi.n	800c7a2 <__multiply+0xb2>
 800c7dc:	9a01      	ldr	r2, [sp, #4]
 800c7de:	f845 c002 	str.w	ip, [r5, r2]
 800c7e2:	9a03      	ldr	r2, [sp, #12]
 800c7e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	f1b9 0f00 	cmp.w	r9, #0
 800c7ee:	d020      	beq.n	800c832 <__multiply+0x142>
 800c7f0:	6829      	ldr	r1, [r5, #0]
 800c7f2:	f104 0c14 	add.w	ip, r4, #20
 800c7f6:	46ae      	mov	lr, r5
 800c7f8:	f04f 0a00 	mov.w	sl, #0
 800c7fc:	f8bc b000 	ldrh.w	fp, [ip]
 800c800:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c804:	fb09 220b 	mla	r2, r9, fp, r2
 800c808:	4492      	add	sl, r2
 800c80a:	b289      	uxth	r1, r1
 800c80c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c810:	f84e 1b04 	str.w	r1, [lr], #4
 800c814:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c818:	f8be 1000 	ldrh.w	r1, [lr]
 800c81c:	0c12      	lsrs	r2, r2, #16
 800c81e:	fb09 1102 	mla	r1, r9, r2, r1
 800c822:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c826:	4567      	cmp	r7, ip
 800c828:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c82c:	d8e6      	bhi.n	800c7fc <__multiply+0x10c>
 800c82e:	9a01      	ldr	r2, [sp, #4]
 800c830:	50a9      	str	r1, [r5, r2]
 800c832:	3504      	adds	r5, #4
 800c834:	e79a      	b.n	800c76c <__multiply+0x7c>
 800c836:	3e01      	subs	r6, #1
 800c838:	e79c      	b.n	800c774 <__multiply+0x84>
 800c83a:	bf00      	nop
 800c83c:	0800fa8f 	.word	0x0800fa8f
 800c840:	0800fb1c 	.word	0x0800fb1c

0800c844 <__pow5mult>:
 800c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c848:	4615      	mov	r5, r2
 800c84a:	f012 0203 	ands.w	r2, r2, #3
 800c84e:	4606      	mov	r6, r0
 800c850:	460f      	mov	r7, r1
 800c852:	d007      	beq.n	800c864 <__pow5mult+0x20>
 800c854:	4c25      	ldr	r4, [pc, #148]	; (800c8ec <__pow5mult+0xa8>)
 800c856:	3a01      	subs	r2, #1
 800c858:	2300      	movs	r3, #0
 800c85a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c85e:	f7ff fe51 	bl	800c504 <__multadd>
 800c862:	4607      	mov	r7, r0
 800c864:	10ad      	asrs	r5, r5, #2
 800c866:	d03d      	beq.n	800c8e4 <__pow5mult+0xa0>
 800c868:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c86a:	b97c      	cbnz	r4, 800c88c <__pow5mult+0x48>
 800c86c:	2010      	movs	r0, #16
 800c86e:	f7fc f9f5 	bl	8008c5c <malloc>
 800c872:	4602      	mov	r2, r0
 800c874:	6270      	str	r0, [r6, #36]	; 0x24
 800c876:	b928      	cbnz	r0, 800c884 <__pow5mult+0x40>
 800c878:	4b1d      	ldr	r3, [pc, #116]	; (800c8f0 <__pow5mult+0xac>)
 800c87a:	481e      	ldr	r0, [pc, #120]	; (800c8f4 <__pow5mult+0xb0>)
 800c87c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c880:	f7fb ff0e 	bl	80086a0 <__assert_func>
 800c884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c888:	6004      	str	r4, [r0, #0]
 800c88a:	60c4      	str	r4, [r0, #12]
 800c88c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c894:	b94c      	cbnz	r4, 800c8aa <__pow5mult+0x66>
 800c896:	f240 2171 	movw	r1, #625	; 0x271
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7ff ff12 	bl	800c6c4 <__i2b>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	6003      	str	r3, [r0, #0]
 800c8aa:	f04f 0900 	mov.w	r9, #0
 800c8ae:	07eb      	lsls	r3, r5, #31
 800c8b0:	d50a      	bpl.n	800c8c8 <__pow5mult+0x84>
 800c8b2:	4639      	mov	r1, r7
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f7ff ff1a 	bl	800c6f0 <__multiply>
 800c8bc:	4639      	mov	r1, r7
 800c8be:	4680      	mov	r8, r0
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f7ff fdfd 	bl	800c4c0 <_Bfree>
 800c8c6:	4647      	mov	r7, r8
 800c8c8:	106d      	asrs	r5, r5, #1
 800c8ca:	d00b      	beq.n	800c8e4 <__pow5mult+0xa0>
 800c8cc:	6820      	ldr	r0, [r4, #0]
 800c8ce:	b938      	cbnz	r0, 800c8e0 <__pow5mult+0x9c>
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7ff ff0b 	bl	800c6f0 <__multiply>
 800c8da:	6020      	str	r0, [r4, #0]
 800c8dc:	f8c0 9000 	str.w	r9, [r0]
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	e7e4      	b.n	800c8ae <__pow5mult+0x6a>
 800c8e4:	4638      	mov	r0, r7
 800c8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ea:	bf00      	nop
 800c8ec:	0800fc68 	.word	0x0800fc68
 800c8f0:	0800fa1d 	.word	0x0800fa1d
 800c8f4:	0800fb1c 	.word	0x0800fb1c

0800c8f8 <__lshift>:
 800c8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	6849      	ldr	r1, [r1, #4]
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c906:	68a3      	ldr	r3, [r4, #8]
 800c908:	4607      	mov	r7, r0
 800c90a:	4691      	mov	r9, r2
 800c90c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c910:	f108 0601 	add.w	r6, r8, #1
 800c914:	42b3      	cmp	r3, r6
 800c916:	db0b      	blt.n	800c930 <__lshift+0x38>
 800c918:	4638      	mov	r0, r7
 800c91a:	f7ff fd91 	bl	800c440 <_Balloc>
 800c91e:	4605      	mov	r5, r0
 800c920:	b948      	cbnz	r0, 800c936 <__lshift+0x3e>
 800c922:	4602      	mov	r2, r0
 800c924:	4b2a      	ldr	r3, [pc, #168]	; (800c9d0 <__lshift+0xd8>)
 800c926:	482b      	ldr	r0, [pc, #172]	; (800c9d4 <__lshift+0xdc>)
 800c928:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c92c:	f7fb feb8 	bl	80086a0 <__assert_func>
 800c930:	3101      	adds	r1, #1
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	e7ee      	b.n	800c914 <__lshift+0x1c>
 800c936:	2300      	movs	r3, #0
 800c938:	f100 0114 	add.w	r1, r0, #20
 800c93c:	f100 0210 	add.w	r2, r0, #16
 800c940:	4618      	mov	r0, r3
 800c942:	4553      	cmp	r3, sl
 800c944:	db37      	blt.n	800c9b6 <__lshift+0xbe>
 800c946:	6920      	ldr	r0, [r4, #16]
 800c948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c94c:	f104 0314 	add.w	r3, r4, #20
 800c950:	f019 091f 	ands.w	r9, r9, #31
 800c954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c958:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c95c:	d02f      	beq.n	800c9be <__lshift+0xc6>
 800c95e:	f1c9 0e20 	rsb	lr, r9, #32
 800c962:	468a      	mov	sl, r1
 800c964:	f04f 0c00 	mov.w	ip, #0
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	fa02 f209 	lsl.w	r2, r2, r9
 800c96e:	ea42 020c 	orr.w	r2, r2, ip
 800c972:	f84a 2b04 	str.w	r2, [sl], #4
 800c976:	f853 2b04 	ldr.w	r2, [r3], #4
 800c97a:	4298      	cmp	r0, r3
 800c97c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c980:	d8f2      	bhi.n	800c968 <__lshift+0x70>
 800c982:	1b03      	subs	r3, r0, r4
 800c984:	3b15      	subs	r3, #21
 800c986:	f023 0303 	bic.w	r3, r3, #3
 800c98a:	3304      	adds	r3, #4
 800c98c:	f104 0215 	add.w	r2, r4, #21
 800c990:	4290      	cmp	r0, r2
 800c992:	bf38      	it	cc
 800c994:	2304      	movcc	r3, #4
 800c996:	f841 c003 	str.w	ip, [r1, r3]
 800c99a:	f1bc 0f00 	cmp.w	ip, #0
 800c99e:	d001      	beq.n	800c9a4 <__lshift+0xac>
 800c9a0:	f108 0602 	add.w	r6, r8, #2
 800c9a4:	3e01      	subs	r6, #1
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	612e      	str	r6, [r5, #16]
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	f7ff fd88 	bl	800c4c0 <_Bfree>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	e7c1      	b.n	800c942 <__lshift+0x4a>
 800c9be:	3904      	subs	r1, #4
 800c9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9c8:	4298      	cmp	r0, r3
 800c9ca:	d8f9      	bhi.n	800c9c0 <__lshift+0xc8>
 800c9cc:	e7ea      	b.n	800c9a4 <__lshift+0xac>
 800c9ce:	bf00      	nop
 800c9d0:	0800fa8f 	.word	0x0800fa8f
 800c9d4:	0800fb1c 	.word	0x0800fb1c

0800c9d8 <__mcmp>:
 800c9d8:	b530      	push	{r4, r5, lr}
 800c9da:	6902      	ldr	r2, [r0, #16]
 800c9dc:	690c      	ldr	r4, [r1, #16]
 800c9de:	1b12      	subs	r2, r2, r4
 800c9e0:	d10e      	bne.n	800ca00 <__mcmp+0x28>
 800c9e2:	f100 0314 	add.w	r3, r0, #20
 800c9e6:	3114      	adds	r1, #20
 800c9e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9f8:	42a5      	cmp	r5, r4
 800c9fa:	d003      	beq.n	800ca04 <__mcmp+0x2c>
 800c9fc:	d305      	bcc.n	800ca0a <__mcmp+0x32>
 800c9fe:	2201      	movs	r2, #1
 800ca00:	4610      	mov	r0, r2
 800ca02:	bd30      	pop	{r4, r5, pc}
 800ca04:	4283      	cmp	r3, r0
 800ca06:	d3f3      	bcc.n	800c9f0 <__mcmp+0x18>
 800ca08:	e7fa      	b.n	800ca00 <__mcmp+0x28>
 800ca0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca0e:	e7f7      	b.n	800ca00 <__mcmp+0x28>

0800ca10 <__mdiff>:
 800ca10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca14:	460c      	mov	r4, r1
 800ca16:	4606      	mov	r6, r0
 800ca18:	4611      	mov	r1, r2
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	4690      	mov	r8, r2
 800ca1e:	f7ff ffdb 	bl	800c9d8 <__mcmp>
 800ca22:	1e05      	subs	r5, r0, #0
 800ca24:	d110      	bne.n	800ca48 <__mdiff+0x38>
 800ca26:	4629      	mov	r1, r5
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7ff fd09 	bl	800c440 <_Balloc>
 800ca2e:	b930      	cbnz	r0, 800ca3e <__mdiff+0x2e>
 800ca30:	4b3a      	ldr	r3, [pc, #232]	; (800cb1c <__mdiff+0x10c>)
 800ca32:	4602      	mov	r2, r0
 800ca34:	f240 2132 	movw	r1, #562	; 0x232
 800ca38:	4839      	ldr	r0, [pc, #228]	; (800cb20 <__mdiff+0x110>)
 800ca3a:	f7fb fe31 	bl	80086a0 <__assert_func>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca48:	bfa4      	itt	ge
 800ca4a:	4643      	movge	r3, r8
 800ca4c:	46a0      	movge	r8, r4
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca54:	bfa6      	itte	ge
 800ca56:	461c      	movge	r4, r3
 800ca58:	2500      	movge	r5, #0
 800ca5a:	2501      	movlt	r5, #1
 800ca5c:	f7ff fcf0 	bl	800c440 <_Balloc>
 800ca60:	b920      	cbnz	r0, 800ca6c <__mdiff+0x5c>
 800ca62:	4b2e      	ldr	r3, [pc, #184]	; (800cb1c <__mdiff+0x10c>)
 800ca64:	4602      	mov	r2, r0
 800ca66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca6a:	e7e5      	b.n	800ca38 <__mdiff+0x28>
 800ca6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca70:	6926      	ldr	r6, [r4, #16]
 800ca72:	60c5      	str	r5, [r0, #12]
 800ca74:	f104 0914 	add.w	r9, r4, #20
 800ca78:	f108 0514 	add.w	r5, r8, #20
 800ca7c:	f100 0e14 	add.w	lr, r0, #20
 800ca80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca88:	f108 0210 	add.w	r2, r8, #16
 800ca8c:	46f2      	mov	sl, lr
 800ca8e:	2100      	movs	r1, #0
 800ca90:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca98:	fa1f f883 	uxth.w	r8, r3
 800ca9c:	fa11 f18b 	uxtah	r1, r1, fp
 800caa0:	0c1b      	lsrs	r3, r3, #16
 800caa2:	eba1 0808 	sub.w	r8, r1, r8
 800caa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800caaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800caae:	fa1f f888 	uxth.w	r8, r8
 800cab2:	1419      	asrs	r1, r3, #16
 800cab4:	454e      	cmp	r6, r9
 800cab6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800caba:	f84a 3b04 	str.w	r3, [sl], #4
 800cabe:	d8e7      	bhi.n	800ca90 <__mdiff+0x80>
 800cac0:	1b33      	subs	r3, r6, r4
 800cac2:	3b15      	subs	r3, #21
 800cac4:	f023 0303 	bic.w	r3, r3, #3
 800cac8:	3304      	adds	r3, #4
 800caca:	3415      	adds	r4, #21
 800cacc:	42a6      	cmp	r6, r4
 800cace:	bf38      	it	cc
 800cad0:	2304      	movcc	r3, #4
 800cad2:	441d      	add	r5, r3
 800cad4:	4473      	add	r3, lr
 800cad6:	469e      	mov	lr, r3
 800cad8:	462e      	mov	r6, r5
 800cada:	4566      	cmp	r6, ip
 800cadc:	d30e      	bcc.n	800cafc <__mdiff+0xec>
 800cade:	f10c 0203 	add.w	r2, ip, #3
 800cae2:	1b52      	subs	r2, r2, r5
 800cae4:	f022 0203 	bic.w	r2, r2, #3
 800cae8:	3d03      	subs	r5, #3
 800caea:	45ac      	cmp	ip, r5
 800caec:	bf38      	it	cc
 800caee:	2200      	movcc	r2, #0
 800caf0:	441a      	add	r2, r3
 800caf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800caf6:	b17b      	cbz	r3, 800cb18 <__mdiff+0x108>
 800caf8:	6107      	str	r7, [r0, #16]
 800cafa:	e7a3      	b.n	800ca44 <__mdiff+0x34>
 800cafc:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb00:	fa11 f288 	uxtah	r2, r1, r8
 800cb04:	1414      	asrs	r4, r2, #16
 800cb06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb0a:	b292      	uxth	r2, r2
 800cb0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb10:	f84e 2b04 	str.w	r2, [lr], #4
 800cb14:	1421      	asrs	r1, r4, #16
 800cb16:	e7e0      	b.n	800cada <__mdiff+0xca>
 800cb18:	3f01      	subs	r7, #1
 800cb1a:	e7ea      	b.n	800caf2 <__mdiff+0xe2>
 800cb1c:	0800fa8f 	.word	0x0800fa8f
 800cb20:	0800fb1c 	.word	0x0800fb1c

0800cb24 <__ulp>:
 800cb24:	b082      	sub	sp, #8
 800cb26:	ed8d 0b00 	vstr	d0, [sp]
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	4912      	ldr	r1, [pc, #72]	; (800cb78 <__ulp+0x54>)
 800cb2e:	4019      	ands	r1, r3
 800cb30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cb34:	2900      	cmp	r1, #0
 800cb36:	dd05      	ble.n	800cb44 <__ulp+0x20>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	ec43 2b10 	vmov	d0, r2, r3
 800cb40:	b002      	add	sp, #8
 800cb42:	4770      	bx	lr
 800cb44:	4249      	negs	r1, r1
 800cb46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cb4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cb4e:	f04f 0200 	mov.w	r2, #0
 800cb52:	f04f 0300 	mov.w	r3, #0
 800cb56:	da04      	bge.n	800cb62 <__ulp+0x3e>
 800cb58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb5c:	fa41 f300 	asr.w	r3, r1, r0
 800cb60:	e7ec      	b.n	800cb3c <__ulp+0x18>
 800cb62:	f1a0 0114 	sub.w	r1, r0, #20
 800cb66:	291e      	cmp	r1, #30
 800cb68:	bfda      	itte	le
 800cb6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cb6e:	fa20 f101 	lsrle.w	r1, r0, r1
 800cb72:	2101      	movgt	r1, #1
 800cb74:	460a      	mov	r2, r1
 800cb76:	e7e1      	b.n	800cb3c <__ulp+0x18>
 800cb78:	7ff00000 	.word	0x7ff00000

0800cb7c <__b2d>:
 800cb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7e:	6905      	ldr	r5, [r0, #16]
 800cb80:	f100 0714 	add.w	r7, r0, #20
 800cb84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cb88:	1f2e      	subs	r6, r5, #4
 800cb8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f7ff fd48 	bl	800c624 <__hi0bits>
 800cb94:	f1c0 0320 	rsb	r3, r0, #32
 800cb98:	280a      	cmp	r0, #10
 800cb9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cc18 <__b2d+0x9c>
 800cb9e:	600b      	str	r3, [r1, #0]
 800cba0:	dc14      	bgt.n	800cbcc <__b2d+0x50>
 800cba2:	f1c0 0e0b 	rsb	lr, r0, #11
 800cba6:	fa24 f10e 	lsr.w	r1, r4, lr
 800cbaa:	42b7      	cmp	r7, r6
 800cbac:	ea41 030c 	orr.w	r3, r1, ip
 800cbb0:	bf34      	ite	cc
 800cbb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbb6:	2100      	movcs	r1, #0
 800cbb8:	3015      	adds	r0, #21
 800cbba:	fa04 f000 	lsl.w	r0, r4, r0
 800cbbe:	fa21 f10e 	lsr.w	r1, r1, lr
 800cbc2:	ea40 0201 	orr.w	r2, r0, r1
 800cbc6:	ec43 2b10 	vmov	d0, r2, r3
 800cbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbcc:	42b7      	cmp	r7, r6
 800cbce:	bf3a      	itte	cc
 800cbd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cbd4:	f1a5 0608 	subcc.w	r6, r5, #8
 800cbd8:	2100      	movcs	r1, #0
 800cbda:	380b      	subs	r0, #11
 800cbdc:	d017      	beq.n	800cc0e <__b2d+0x92>
 800cbde:	f1c0 0c20 	rsb	ip, r0, #32
 800cbe2:	fa04 f500 	lsl.w	r5, r4, r0
 800cbe6:	42be      	cmp	r6, r7
 800cbe8:	fa21 f40c 	lsr.w	r4, r1, ip
 800cbec:	ea45 0504 	orr.w	r5, r5, r4
 800cbf0:	bf8c      	ite	hi
 800cbf2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cbf6:	2400      	movls	r4, #0
 800cbf8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cbfc:	fa01 f000 	lsl.w	r0, r1, r0
 800cc00:	fa24 f40c 	lsr.w	r4, r4, ip
 800cc04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc08:	ea40 0204 	orr.w	r2, r0, r4
 800cc0c:	e7db      	b.n	800cbc6 <__b2d+0x4a>
 800cc0e:	ea44 030c 	orr.w	r3, r4, ip
 800cc12:	460a      	mov	r2, r1
 800cc14:	e7d7      	b.n	800cbc6 <__b2d+0x4a>
 800cc16:	bf00      	nop
 800cc18:	3ff00000 	.word	0x3ff00000

0800cc1c <__d2b>:
 800cc1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc20:	4689      	mov	r9, r1
 800cc22:	2101      	movs	r1, #1
 800cc24:	ec57 6b10 	vmov	r6, r7, d0
 800cc28:	4690      	mov	r8, r2
 800cc2a:	f7ff fc09 	bl	800c440 <_Balloc>
 800cc2e:	4604      	mov	r4, r0
 800cc30:	b930      	cbnz	r0, 800cc40 <__d2b+0x24>
 800cc32:	4602      	mov	r2, r0
 800cc34:	4b25      	ldr	r3, [pc, #148]	; (800cccc <__d2b+0xb0>)
 800cc36:	4826      	ldr	r0, [pc, #152]	; (800ccd0 <__d2b+0xb4>)
 800cc38:	f240 310a 	movw	r1, #778	; 0x30a
 800cc3c:	f7fb fd30 	bl	80086a0 <__assert_func>
 800cc40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc48:	bb35      	cbnz	r5, 800cc98 <__d2b+0x7c>
 800cc4a:	2e00      	cmp	r6, #0
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	d028      	beq.n	800cca2 <__d2b+0x86>
 800cc50:	4668      	mov	r0, sp
 800cc52:	9600      	str	r6, [sp, #0]
 800cc54:	f7ff fd06 	bl	800c664 <__lo0bits>
 800cc58:	9900      	ldr	r1, [sp, #0]
 800cc5a:	b300      	cbz	r0, 800cc9e <__d2b+0x82>
 800cc5c:	9a01      	ldr	r2, [sp, #4]
 800cc5e:	f1c0 0320 	rsb	r3, r0, #32
 800cc62:	fa02 f303 	lsl.w	r3, r2, r3
 800cc66:	430b      	orrs	r3, r1
 800cc68:	40c2      	lsrs	r2, r0
 800cc6a:	6163      	str	r3, [r4, #20]
 800cc6c:	9201      	str	r2, [sp, #4]
 800cc6e:	9b01      	ldr	r3, [sp, #4]
 800cc70:	61a3      	str	r3, [r4, #24]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	bf14      	ite	ne
 800cc76:	2202      	movne	r2, #2
 800cc78:	2201      	moveq	r2, #1
 800cc7a:	6122      	str	r2, [r4, #16]
 800cc7c:	b1d5      	cbz	r5, 800ccb4 <__d2b+0x98>
 800cc7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc82:	4405      	add	r5, r0
 800cc84:	f8c9 5000 	str.w	r5, [r9]
 800cc88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc8c:	f8c8 0000 	str.w	r0, [r8]
 800cc90:	4620      	mov	r0, r4
 800cc92:	b003      	add	sp, #12
 800cc94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc9c:	e7d5      	b.n	800cc4a <__d2b+0x2e>
 800cc9e:	6161      	str	r1, [r4, #20]
 800cca0:	e7e5      	b.n	800cc6e <__d2b+0x52>
 800cca2:	a801      	add	r0, sp, #4
 800cca4:	f7ff fcde 	bl	800c664 <__lo0bits>
 800cca8:	9b01      	ldr	r3, [sp, #4]
 800ccaa:	6163      	str	r3, [r4, #20]
 800ccac:	2201      	movs	r2, #1
 800ccae:	6122      	str	r2, [r4, #16]
 800ccb0:	3020      	adds	r0, #32
 800ccb2:	e7e3      	b.n	800cc7c <__d2b+0x60>
 800ccb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccbc:	f8c9 0000 	str.w	r0, [r9]
 800ccc0:	6918      	ldr	r0, [r3, #16]
 800ccc2:	f7ff fcaf 	bl	800c624 <__hi0bits>
 800ccc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccca:	e7df      	b.n	800cc8c <__d2b+0x70>
 800cccc:	0800fa8f 	.word	0x0800fa8f
 800ccd0:	0800fb1c 	.word	0x0800fb1c

0800ccd4 <__ratio>:
 800ccd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	4688      	mov	r8, r1
 800ccda:	4669      	mov	r1, sp
 800ccdc:	4681      	mov	r9, r0
 800ccde:	f7ff ff4d 	bl	800cb7c <__b2d>
 800cce2:	a901      	add	r1, sp, #4
 800cce4:	4640      	mov	r0, r8
 800cce6:	ec55 4b10 	vmov	r4, r5, d0
 800ccea:	f7ff ff47 	bl	800cb7c <__b2d>
 800ccee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccf2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ccf6:	eba3 0c02 	sub.w	ip, r3, r2
 800ccfa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccfe:	1a9b      	subs	r3, r3, r2
 800cd00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd04:	ec51 0b10 	vmov	r0, r1, d0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bfd6      	itet	le
 800cd0c:	460a      	movle	r2, r1
 800cd0e:	462a      	movgt	r2, r5
 800cd10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd14:	468b      	mov	fp, r1
 800cd16:	462f      	mov	r7, r5
 800cd18:	bfd4      	ite	le
 800cd1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd22:	4620      	mov	r0, r4
 800cd24:	ee10 2a10 	vmov	r2, s0
 800cd28:	465b      	mov	r3, fp
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f7f3 fd8e 	bl	800084c <__aeabi_ddiv>
 800cd30:	ec41 0b10 	vmov	d0, r0, r1
 800cd34:	b003      	add	sp, #12
 800cd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd3a <__copybits>:
 800cd3a:	3901      	subs	r1, #1
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	1149      	asrs	r1, r1, #5
 800cd40:	6914      	ldr	r4, [r2, #16]
 800cd42:	3101      	adds	r1, #1
 800cd44:	f102 0314 	add.w	r3, r2, #20
 800cd48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd50:	1f05      	subs	r5, r0, #4
 800cd52:	42a3      	cmp	r3, r4
 800cd54:	d30c      	bcc.n	800cd70 <__copybits+0x36>
 800cd56:	1aa3      	subs	r3, r4, r2
 800cd58:	3b11      	subs	r3, #17
 800cd5a:	f023 0303 	bic.w	r3, r3, #3
 800cd5e:	3211      	adds	r2, #17
 800cd60:	42a2      	cmp	r2, r4
 800cd62:	bf88      	it	hi
 800cd64:	2300      	movhi	r3, #0
 800cd66:	4418      	add	r0, r3
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4288      	cmp	r0, r1
 800cd6c:	d305      	bcc.n	800cd7a <__copybits+0x40>
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}
 800cd70:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd74:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd78:	e7eb      	b.n	800cd52 <__copybits+0x18>
 800cd7a:	f840 3b04 	str.w	r3, [r0], #4
 800cd7e:	e7f4      	b.n	800cd6a <__copybits+0x30>

0800cd80 <__any_on>:
 800cd80:	f100 0214 	add.w	r2, r0, #20
 800cd84:	6900      	ldr	r0, [r0, #16]
 800cd86:	114b      	asrs	r3, r1, #5
 800cd88:	4298      	cmp	r0, r3
 800cd8a:	b510      	push	{r4, lr}
 800cd8c:	db11      	blt.n	800cdb2 <__any_on+0x32>
 800cd8e:	dd0a      	ble.n	800cda6 <__any_on+0x26>
 800cd90:	f011 011f 	ands.w	r1, r1, #31
 800cd94:	d007      	beq.n	800cda6 <__any_on+0x26>
 800cd96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd9a:	fa24 f001 	lsr.w	r0, r4, r1
 800cd9e:	fa00 f101 	lsl.w	r1, r0, r1
 800cda2:	428c      	cmp	r4, r1
 800cda4:	d10b      	bne.n	800cdbe <__any_on+0x3e>
 800cda6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d803      	bhi.n	800cdb6 <__any_on+0x36>
 800cdae:	2000      	movs	r0, #0
 800cdb0:	bd10      	pop	{r4, pc}
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	e7f7      	b.n	800cda6 <__any_on+0x26>
 800cdb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdba:	2900      	cmp	r1, #0
 800cdbc:	d0f5      	beq.n	800cdaa <__any_on+0x2a>
 800cdbe:	2001      	movs	r0, #1
 800cdc0:	e7f6      	b.n	800cdb0 <__any_on+0x30>

0800cdc2 <_realloc_r>:
 800cdc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc6:	4680      	mov	r8, r0
 800cdc8:	4614      	mov	r4, r2
 800cdca:	460e      	mov	r6, r1
 800cdcc:	b921      	cbnz	r1, 800cdd8 <_realloc_r+0x16>
 800cdce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	f7fc b804 	b.w	8008de0 <_malloc_r>
 800cdd8:	b92a      	cbnz	r2, 800cde6 <_realloc_r+0x24>
 800cdda:	f7fb ff95 	bl	8008d08 <_free_r>
 800cdde:	4625      	mov	r5, r4
 800cde0:	4628      	mov	r0, r5
 800cde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde6:	f000 fa1b 	bl	800d220 <_malloc_usable_size_r>
 800cdea:	4284      	cmp	r4, r0
 800cdec:	4607      	mov	r7, r0
 800cdee:	d802      	bhi.n	800cdf6 <_realloc_r+0x34>
 800cdf0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdf4:	d812      	bhi.n	800ce1c <_realloc_r+0x5a>
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	f7fb fff1 	bl	8008de0 <_malloc_r>
 800cdfe:	4605      	mov	r5, r0
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d0ed      	beq.n	800cde0 <_realloc_r+0x1e>
 800ce04:	42bc      	cmp	r4, r7
 800ce06:	4622      	mov	r2, r4
 800ce08:	4631      	mov	r1, r6
 800ce0a:	bf28      	it	cs
 800ce0c:	463a      	movcs	r2, r7
 800ce0e:	f7fb ff35 	bl	8008c7c <memcpy>
 800ce12:	4631      	mov	r1, r6
 800ce14:	4640      	mov	r0, r8
 800ce16:	f7fb ff77 	bl	8008d08 <_free_r>
 800ce1a:	e7e1      	b.n	800cde0 <_realloc_r+0x1e>
 800ce1c:	4635      	mov	r5, r6
 800ce1e:	e7df      	b.n	800cde0 <_realloc_r+0x1e>

0800ce20 <__ssputs_r>:
 800ce20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce24:	688e      	ldr	r6, [r1, #8]
 800ce26:	429e      	cmp	r6, r3
 800ce28:	4682      	mov	sl, r0
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	4690      	mov	r8, r2
 800ce2e:	461f      	mov	r7, r3
 800ce30:	d838      	bhi.n	800cea4 <__ssputs_r+0x84>
 800ce32:	898a      	ldrh	r2, [r1, #12]
 800ce34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce38:	d032      	beq.n	800cea0 <__ssputs_r+0x80>
 800ce3a:	6825      	ldr	r5, [r4, #0]
 800ce3c:	6909      	ldr	r1, [r1, #16]
 800ce3e:	eba5 0901 	sub.w	r9, r5, r1
 800ce42:	6965      	ldr	r5, [r4, #20]
 800ce44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	444b      	add	r3, r9
 800ce50:	106d      	asrs	r5, r5, #1
 800ce52:	429d      	cmp	r5, r3
 800ce54:	bf38      	it	cc
 800ce56:	461d      	movcc	r5, r3
 800ce58:	0553      	lsls	r3, r2, #21
 800ce5a:	d531      	bpl.n	800cec0 <__ssputs_r+0xa0>
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	f7fb ffbf 	bl	8008de0 <_malloc_r>
 800ce62:	4606      	mov	r6, r0
 800ce64:	b950      	cbnz	r0, 800ce7c <__ssputs_r+0x5c>
 800ce66:	230c      	movs	r3, #12
 800ce68:	f8ca 3000 	str.w	r3, [sl]
 800ce6c:	89a3      	ldrh	r3, [r4, #12]
 800ce6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce72:	81a3      	strh	r3, [r4, #12]
 800ce74:	f04f 30ff 	mov.w	r0, #4294967295
 800ce78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7c:	6921      	ldr	r1, [r4, #16]
 800ce7e:	464a      	mov	r2, r9
 800ce80:	f7fb fefc 	bl	8008c7c <memcpy>
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce8e:	81a3      	strh	r3, [r4, #12]
 800ce90:	6126      	str	r6, [r4, #16]
 800ce92:	6165      	str	r5, [r4, #20]
 800ce94:	444e      	add	r6, r9
 800ce96:	eba5 0509 	sub.w	r5, r5, r9
 800ce9a:	6026      	str	r6, [r4, #0]
 800ce9c:	60a5      	str	r5, [r4, #8]
 800ce9e:	463e      	mov	r6, r7
 800cea0:	42be      	cmp	r6, r7
 800cea2:	d900      	bls.n	800cea6 <__ssputs_r+0x86>
 800cea4:	463e      	mov	r6, r7
 800cea6:	6820      	ldr	r0, [r4, #0]
 800cea8:	4632      	mov	r2, r6
 800ceaa:	4641      	mov	r1, r8
 800ceac:	f7fb fef4 	bl	8008c98 <memmove>
 800ceb0:	68a3      	ldr	r3, [r4, #8]
 800ceb2:	1b9b      	subs	r3, r3, r6
 800ceb4:	60a3      	str	r3, [r4, #8]
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	4433      	add	r3, r6
 800ceba:	6023      	str	r3, [r4, #0]
 800cebc:	2000      	movs	r0, #0
 800cebe:	e7db      	b.n	800ce78 <__ssputs_r+0x58>
 800cec0:	462a      	mov	r2, r5
 800cec2:	f7ff ff7e 	bl	800cdc2 <_realloc_r>
 800cec6:	4606      	mov	r6, r0
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d1e1      	bne.n	800ce90 <__ssputs_r+0x70>
 800cecc:	6921      	ldr	r1, [r4, #16]
 800cece:	4650      	mov	r0, sl
 800ced0:	f7fb ff1a 	bl	8008d08 <_free_r>
 800ced4:	e7c7      	b.n	800ce66 <__ssputs_r+0x46>
	...

0800ced8 <_svfiprintf_r>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	4698      	mov	r8, r3
 800cede:	898b      	ldrh	r3, [r1, #12]
 800cee0:	061b      	lsls	r3, r3, #24
 800cee2:	b09d      	sub	sp, #116	; 0x74
 800cee4:	4607      	mov	r7, r0
 800cee6:	460d      	mov	r5, r1
 800cee8:	4614      	mov	r4, r2
 800ceea:	d50e      	bpl.n	800cf0a <_svfiprintf_r+0x32>
 800ceec:	690b      	ldr	r3, [r1, #16]
 800ceee:	b963      	cbnz	r3, 800cf0a <_svfiprintf_r+0x32>
 800cef0:	2140      	movs	r1, #64	; 0x40
 800cef2:	f7fb ff75 	bl	8008de0 <_malloc_r>
 800cef6:	6028      	str	r0, [r5, #0]
 800cef8:	6128      	str	r0, [r5, #16]
 800cefa:	b920      	cbnz	r0, 800cf06 <_svfiprintf_r+0x2e>
 800cefc:	230c      	movs	r3, #12
 800cefe:	603b      	str	r3, [r7, #0]
 800cf00:	f04f 30ff 	mov.w	r0, #4294967295
 800cf04:	e0d1      	b.n	800d0aa <_svfiprintf_r+0x1d2>
 800cf06:	2340      	movs	r3, #64	; 0x40
 800cf08:	616b      	str	r3, [r5, #20]
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf0e:	2320      	movs	r3, #32
 800cf10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf14:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf18:	2330      	movs	r3, #48	; 0x30
 800cf1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0c4 <_svfiprintf_r+0x1ec>
 800cf1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf22:	f04f 0901 	mov.w	r9, #1
 800cf26:	4623      	mov	r3, r4
 800cf28:	469a      	mov	sl, r3
 800cf2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf2e:	b10a      	cbz	r2, 800cf34 <_svfiprintf_r+0x5c>
 800cf30:	2a25      	cmp	r2, #37	; 0x25
 800cf32:	d1f9      	bne.n	800cf28 <_svfiprintf_r+0x50>
 800cf34:	ebba 0b04 	subs.w	fp, sl, r4
 800cf38:	d00b      	beq.n	800cf52 <_svfiprintf_r+0x7a>
 800cf3a:	465b      	mov	r3, fp
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	4629      	mov	r1, r5
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7ff ff6d 	bl	800ce20 <__ssputs_r>
 800cf46:	3001      	adds	r0, #1
 800cf48:	f000 80aa 	beq.w	800d0a0 <_svfiprintf_r+0x1c8>
 800cf4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf4e:	445a      	add	r2, fp
 800cf50:	9209      	str	r2, [sp, #36]	; 0x24
 800cf52:	f89a 3000 	ldrb.w	r3, [sl]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 80a2 	beq.w	800d0a0 <_svfiprintf_r+0x1c8>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf66:	f10a 0a01 	add.w	sl, sl, #1
 800cf6a:	9304      	str	r3, [sp, #16]
 800cf6c:	9307      	str	r3, [sp, #28]
 800cf6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf72:	931a      	str	r3, [sp, #104]	; 0x68
 800cf74:	4654      	mov	r4, sl
 800cf76:	2205      	movs	r2, #5
 800cf78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7c:	4851      	ldr	r0, [pc, #324]	; (800d0c4 <_svfiprintf_r+0x1ec>)
 800cf7e:	f7f3 f92f 	bl	80001e0 <memchr>
 800cf82:	9a04      	ldr	r2, [sp, #16]
 800cf84:	b9d8      	cbnz	r0, 800cfbe <_svfiprintf_r+0xe6>
 800cf86:	06d0      	lsls	r0, r2, #27
 800cf88:	bf44      	itt	mi
 800cf8a:	2320      	movmi	r3, #32
 800cf8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf90:	0711      	lsls	r1, r2, #28
 800cf92:	bf44      	itt	mi
 800cf94:	232b      	movmi	r3, #43	; 0x2b
 800cf96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf9a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa0:	d015      	beq.n	800cfce <_svfiprintf_r+0xf6>
 800cfa2:	9a07      	ldr	r2, [sp, #28]
 800cfa4:	4654      	mov	r4, sl
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	f04f 0c0a 	mov.w	ip, #10
 800cfac:	4621      	mov	r1, r4
 800cfae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfb2:	3b30      	subs	r3, #48	; 0x30
 800cfb4:	2b09      	cmp	r3, #9
 800cfb6:	d94e      	bls.n	800d056 <_svfiprintf_r+0x17e>
 800cfb8:	b1b0      	cbz	r0, 800cfe8 <_svfiprintf_r+0x110>
 800cfba:	9207      	str	r2, [sp, #28]
 800cfbc:	e014      	b.n	800cfe8 <_svfiprintf_r+0x110>
 800cfbe:	eba0 0308 	sub.w	r3, r0, r8
 800cfc2:	fa09 f303 	lsl.w	r3, r9, r3
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	9304      	str	r3, [sp, #16]
 800cfca:	46a2      	mov	sl, r4
 800cfcc:	e7d2      	b.n	800cf74 <_svfiprintf_r+0x9c>
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	1d19      	adds	r1, r3, #4
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	9103      	str	r1, [sp, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	bfbb      	ittet	lt
 800cfda:	425b      	neglt	r3, r3
 800cfdc:	f042 0202 	orrlt.w	r2, r2, #2
 800cfe0:	9307      	strge	r3, [sp, #28]
 800cfe2:	9307      	strlt	r3, [sp, #28]
 800cfe4:	bfb8      	it	lt
 800cfe6:	9204      	strlt	r2, [sp, #16]
 800cfe8:	7823      	ldrb	r3, [r4, #0]
 800cfea:	2b2e      	cmp	r3, #46	; 0x2e
 800cfec:	d10c      	bne.n	800d008 <_svfiprintf_r+0x130>
 800cfee:	7863      	ldrb	r3, [r4, #1]
 800cff0:	2b2a      	cmp	r3, #42	; 0x2a
 800cff2:	d135      	bne.n	800d060 <_svfiprintf_r+0x188>
 800cff4:	9b03      	ldr	r3, [sp, #12]
 800cff6:	1d1a      	adds	r2, r3, #4
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	9203      	str	r2, [sp, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	bfb8      	it	lt
 800d000:	f04f 33ff 	movlt.w	r3, #4294967295
 800d004:	3402      	adds	r4, #2
 800d006:	9305      	str	r3, [sp, #20]
 800d008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0d4 <_svfiprintf_r+0x1fc>
 800d00c:	7821      	ldrb	r1, [r4, #0]
 800d00e:	2203      	movs	r2, #3
 800d010:	4650      	mov	r0, sl
 800d012:	f7f3 f8e5 	bl	80001e0 <memchr>
 800d016:	b140      	cbz	r0, 800d02a <_svfiprintf_r+0x152>
 800d018:	2340      	movs	r3, #64	; 0x40
 800d01a:	eba0 000a 	sub.w	r0, r0, sl
 800d01e:	fa03 f000 	lsl.w	r0, r3, r0
 800d022:	9b04      	ldr	r3, [sp, #16]
 800d024:	4303      	orrs	r3, r0
 800d026:	3401      	adds	r4, #1
 800d028:	9304      	str	r3, [sp, #16]
 800d02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d02e:	4826      	ldr	r0, [pc, #152]	; (800d0c8 <_svfiprintf_r+0x1f0>)
 800d030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d034:	2206      	movs	r2, #6
 800d036:	f7f3 f8d3 	bl	80001e0 <memchr>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d038      	beq.n	800d0b0 <_svfiprintf_r+0x1d8>
 800d03e:	4b23      	ldr	r3, [pc, #140]	; (800d0cc <_svfiprintf_r+0x1f4>)
 800d040:	bb1b      	cbnz	r3, 800d08a <_svfiprintf_r+0x1b2>
 800d042:	9b03      	ldr	r3, [sp, #12]
 800d044:	3307      	adds	r3, #7
 800d046:	f023 0307 	bic.w	r3, r3, #7
 800d04a:	3308      	adds	r3, #8
 800d04c:	9303      	str	r3, [sp, #12]
 800d04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d050:	4433      	add	r3, r6
 800d052:	9309      	str	r3, [sp, #36]	; 0x24
 800d054:	e767      	b.n	800cf26 <_svfiprintf_r+0x4e>
 800d056:	fb0c 3202 	mla	r2, ip, r2, r3
 800d05a:	460c      	mov	r4, r1
 800d05c:	2001      	movs	r0, #1
 800d05e:	e7a5      	b.n	800cfac <_svfiprintf_r+0xd4>
 800d060:	2300      	movs	r3, #0
 800d062:	3401      	adds	r4, #1
 800d064:	9305      	str	r3, [sp, #20]
 800d066:	4619      	mov	r1, r3
 800d068:	f04f 0c0a 	mov.w	ip, #10
 800d06c:	4620      	mov	r0, r4
 800d06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d072:	3a30      	subs	r2, #48	; 0x30
 800d074:	2a09      	cmp	r2, #9
 800d076:	d903      	bls.n	800d080 <_svfiprintf_r+0x1a8>
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d0c5      	beq.n	800d008 <_svfiprintf_r+0x130>
 800d07c:	9105      	str	r1, [sp, #20]
 800d07e:	e7c3      	b.n	800d008 <_svfiprintf_r+0x130>
 800d080:	fb0c 2101 	mla	r1, ip, r1, r2
 800d084:	4604      	mov	r4, r0
 800d086:	2301      	movs	r3, #1
 800d088:	e7f0      	b.n	800d06c <_svfiprintf_r+0x194>
 800d08a:	ab03      	add	r3, sp, #12
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	462a      	mov	r2, r5
 800d090:	4b0f      	ldr	r3, [pc, #60]	; (800d0d0 <_svfiprintf_r+0x1f8>)
 800d092:	a904      	add	r1, sp, #16
 800d094:	4638      	mov	r0, r7
 800d096:	f7fc f91b 	bl	80092d0 <_printf_float>
 800d09a:	1c42      	adds	r2, r0, #1
 800d09c:	4606      	mov	r6, r0
 800d09e:	d1d6      	bne.n	800d04e <_svfiprintf_r+0x176>
 800d0a0:	89ab      	ldrh	r3, [r5, #12]
 800d0a2:	065b      	lsls	r3, r3, #25
 800d0a4:	f53f af2c 	bmi.w	800cf00 <_svfiprintf_r+0x28>
 800d0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0aa:	b01d      	add	sp, #116	; 0x74
 800d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b0:	ab03      	add	r3, sp, #12
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	462a      	mov	r2, r5
 800d0b6:	4b06      	ldr	r3, [pc, #24]	; (800d0d0 <_svfiprintf_r+0x1f8>)
 800d0b8:	a904      	add	r1, sp, #16
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	f7fc fbac 	bl	8009818 <_printf_i>
 800d0c0:	e7eb      	b.n	800d09a <_svfiprintf_r+0x1c2>
 800d0c2:	bf00      	nop
 800d0c4:	0800f974 	.word	0x0800f974
 800d0c8:	0800f97e 	.word	0x0800f97e
 800d0cc:	080092d1 	.word	0x080092d1
 800d0d0:	0800ce21 	.word	0x0800ce21
 800d0d4:	0800f97a 	.word	0x0800f97a

0800d0d8 <_read_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	4d07      	ldr	r5, [pc, #28]	; (800d0f8 <_read_r+0x20>)
 800d0dc:	4604      	mov	r4, r0
 800d0de:	4608      	mov	r0, r1
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	602a      	str	r2, [r5, #0]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	f7f4 f8e8 	bl	80012bc <_read>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_read_r+0x1e>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_read_r+0x1e>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	20000ee8 	.word	0x20000ee8
 800d0fc:	00000000 	.word	0x00000000

0800d100 <nan>:
 800d100:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d108 <nan+0x8>
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	00000000 	.word	0x00000000
 800d10c:	7ff80000 	.word	0x7ff80000

0800d110 <_raise_r>:
 800d110:	291f      	cmp	r1, #31
 800d112:	b538      	push	{r3, r4, r5, lr}
 800d114:	4604      	mov	r4, r0
 800d116:	460d      	mov	r5, r1
 800d118:	d904      	bls.n	800d124 <_raise_r+0x14>
 800d11a:	2316      	movs	r3, #22
 800d11c:	6003      	str	r3, [r0, #0]
 800d11e:	f04f 30ff 	mov.w	r0, #4294967295
 800d122:	bd38      	pop	{r3, r4, r5, pc}
 800d124:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d126:	b112      	cbz	r2, 800d12e <_raise_r+0x1e>
 800d128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d12c:	b94b      	cbnz	r3, 800d142 <_raise_r+0x32>
 800d12e:	4620      	mov	r0, r4
 800d130:	f000 f830 	bl	800d194 <_getpid_r>
 800d134:	462a      	mov	r2, r5
 800d136:	4601      	mov	r1, r0
 800d138:	4620      	mov	r0, r4
 800d13a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d13e:	f000 b817 	b.w	800d170 <_kill_r>
 800d142:	2b01      	cmp	r3, #1
 800d144:	d00a      	beq.n	800d15c <_raise_r+0x4c>
 800d146:	1c59      	adds	r1, r3, #1
 800d148:	d103      	bne.n	800d152 <_raise_r+0x42>
 800d14a:	2316      	movs	r3, #22
 800d14c:	6003      	str	r3, [r0, #0]
 800d14e:	2001      	movs	r0, #1
 800d150:	e7e7      	b.n	800d122 <_raise_r+0x12>
 800d152:	2400      	movs	r4, #0
 800d154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d158:	4628      	mov	r0, r5
 800d15a:	4798      	blx	r3
 800d15c:	2000      	movs	r0, #0
 800d15e:	e7e0      	b.n	800d122 <_raise_r+0x12>

0800d160 <raise>:
 800d160:	4b02      	ldr	r3, [pc, #8]	; (800d16c <raise+0xc>)
 800d162:	4601      	mov	r1, r0
 800d164:	6818      	ldr	r0, [r3, #0]
 800d166:	f7ff bfd3 	b.w	800d110 <_raise_r>
 800d16a:	bf00      	nop
 800d16c:	2000000c 	.word	0x2000000c

0800d170 <_kill_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4d07      	ldr	r5, [pc, #28]	; (800d190 <_kill_r+0x20>)
 800d174:	2300      	movs	r3, #0
 800d176:	4604      	mov	r4, r0
 800d178:	4608      	mov	r0, r1
 800d17a:	4611      	mov	r1, r2
 800d17c:	602b      	str	r3, [r5, #0]
 800d17e:	f7f4 f883 	bl	8001288 <_kill>
 800d182:	1c43      	adds	r3, r0, #1
 800d184:	d102      	bne.n	800d18c <_kill_r+0x1c>
 800d186:	682b      	ldr	r3, [r5, #0]
 800d188:	b103      	cbz	r3, 800d18c <_kill_r+0x1c>
 800d18a:	6023      	str	r3, [r4, #0]
 800d18c:	bd38      	pop	{r3, r4, r5, pc}
 800d18e:	bf00      	nop
 800d190:	20000ee8 	.word	0x20000ee8

0800d194 <_getpid_r>:
 800d194:	f7f4 b870 	b.w	8001278 <_getpid>

0800d198 <strncmp>:
 800d198:	b510      	push	{r4, lr}
 800d19a:	b17a      	cbz	r2, 800d1bc <strncmp+0x24>
 800d19c:	4603      	mov	r3, r0
 800d19e:	3901      	subs	r1, #1
 800d1a0:	1884      	adds	r4, r0, r2
 800d1a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d1a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d1aa:	4290      	cmp	r0, r2
 800d1ac:	d101      	bne.n	800d1b2 <strncmp+0x1a>
 800d1ae:	42a3      	cmp	r3, r4
 800d1b0:	d101      	bne.n	800d1b6 <strncmp+0x1e>
 800d1b2:	1a80      	subs	r0, r0, r2
 800d1b4:	bd10      	pop	{r4, pc}
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d1f3      	bne.n	800d1a2 <strncmp+0xa>
 800d1ba:	e7fa      	b.n	800d1b2 <strncmp+0x1a>
 800d1bc:	4610      	mov	r0, r2
 800d1be:	e7f9      	b.n	800d1b4 <strncmp+0x1c>

0800d1c0 <__ascii_wctomb>:
 800d1c0:	b149      	cbz	r1, 800d1d6 <__ascii_wctomb+0x16>
 800d1c2:	2aff      	cmp	r2, #255	; 0xff
 800d1c4:	bf85      	ittet	hi
 800d1c6:	238a      	movhi	r3, #138	; 0x8a
 800d1c8:	6003      	strhi	r3, [r0, #0]
 800d1ca:	700a      	strbls	r2, [r1, #0]
 800d1cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d1d0:	bf98      	it	ls
 800d1d2:	2001      	movls	r0, #1
 800d1d4:	4770      	bx	lr
 800d1d6:	4608      	mov	r0, r1
 800d1d8:	4770      	bx	lr
	...

0800d1dc <_fstat_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d07      	ldr	r5, [pc, #28]	; (800d1fc <_fstat_r+0x20>)
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	4608      	mov	r0, r1
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	602b      	str	r3, [r5, #0]
 800d1ea:	f7f4 f8ac 	bl	8001346 <_fstat>
 800d1ee:	1c43      	adds	r3, r0, #1
 800d1f0:	d102      	bne.n	800d1f8 <_fstat_r+0x1c>
 800d1f2:	682b      	ldr	r3, [r5, #0]
 800d1f4:	b103      	cbz	r3, 800d1f8 <_fstat_r+0x1c>
 800d1f6:	6023      	str	r3, [r4, #0]
 800d1f8:	bd38      	pop	{r3, r4, r5, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20000ee8 	.word	0x20000ee8

0800d200 <_isatty_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d06      	ldr	r5, [pc, #24]	; (800d21c <_isatty_r+0x1c>)
 800d204:	2300      	movs	r3, #0
 800d206:	4604      	mov	r4, r0
 800d208:	4608      	mov	r0, r1
 800d20a:	602b      	str	r3, [r5, #0]
 800d20c:	f7f4 f8ab 	bl	8001366 <_isatty>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d102      	bne.n	800d21a <_isatty_r+0x1a>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	b103      	cbz	r3, 800d21a <_isatty_r+0x1a>
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	20000ee8 	.word	0x20000ee8

0800d220 <_malloc_usable_size_r>:
 800d220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d224:	1f18      	subs	r0, r3, #4
 800d226:	2b00      	cmp	r3, #0
 800d228:	bfbc      	itt	lt
 800d22a:	580b      	ldrlt	r3, [r1, r0]
 800d22c:	18c0      	addlt	r0, r0, r3
 800d22e:	4770      	bx	lr

0800d230 <_init>:
 800d230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d232:	bf00      	nop
 800d234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d236:	bc08      	pop	{r3}
 800d238:	469e      	mov	lr, r3
 800d23a:	4770      	bx	lr

0800d23c <_fini>:
 800d23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23e:	bf00      	nop
 800d240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d242:	bc08      	pop	{r3}
 800d244:	469e      	mov	lr, r3
 800d246:	4770      	bx	lr

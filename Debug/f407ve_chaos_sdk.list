
f407ve_chaos_sdk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029dc  0800c8a8  0800c8a8  0001c8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f284  0800f284  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f284  0800f284  0001f284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f28c  0800f28c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f28c  0800f28c  0001f28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f290  0800f290  0001f290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000d0c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000eec  20000eec  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ae5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c18  00000000  00000000  00035cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00039910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f10  00000000  00000000  0003a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028fb5  00000000  00000000  0003b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198b7  00000000  00000000  00064835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e27cf  00000000  00000000  0007e0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001608bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005780  00000000  00000000  0016090c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c890 	.word	0x0800c890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c890 	.word	0x0800c890

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_GPIO_Init+0x9c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xa0>)
 800106a:	f004 fa71 	bl	8005550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NP_dir_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NP_dir_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xa0>)
 8001088:	f004 f8c6 	bl	8005218 <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f003 fea4 	bl	8004dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f818 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff ffa6 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ac:	f000 fa90 	bl	80015d0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010b0:	f000 f9ba 	bl	8001428 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010b4:	2108      	movs	r1, #8
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <main+0x34>)
 80010b8:	f004 ffca 	bl	8006050 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <main+0x38>)
 80010c4:	f004 fa44 	bl	8005550 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80010c8:	f000 fb26 	bl	8001718 <app_main>
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x30>
 80010ce:	bf00      	nop
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40020400 	.word	0x40020400

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 f91e 	bl	8008328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemClock_Config+0xd0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemClock_Config+0xd0>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a22      	ldr	r2, [pc, #136]	; (80011ac <SystemClock_Config+0xd4>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800114c:	23a8      	movs	r3, #168	; 0xa8
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fa11 	bl	8005584 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 f822 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2105      	movs	r1, #5
 800118a:	4618      	mov	r0, r3
 800118c:	f004 fc72 	bl	8005a74 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f80b 	bl	80011b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800119a:	f004 fd51 	bl	8005c40 <HAL_RCC_EnableCSS>
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001210:	f004 fe5a 	bl	8005ec8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x8>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f003 fe18 	bl	8004e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART1_IRQHandler+0x10>)
 800126a:	f005 fddf 	bl	8006e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000248 	.word	0x20000248

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f006 fd59 	bl	8007d48 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fd59 	bl	8004dc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f006 fcbe 	bl	8007d48 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	20000ef0 	.word	0x20000ef0

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_TIM4_Init+0xe8>)
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <MX_TIM4_Init+0xec>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM4_Init+0xe8>)
 800146c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM4_Init+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001480:	f004 fd3d 	bl	8005efe <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800148a:	f7ff fe91 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	4619      	mov	r1, r3
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <MX_TIM4_Init+0xe8>)
 800149c:	f004 ff62 	bl	8006364 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014a6:	f7ff fe83 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014aa:	4819      	ldr	r0, [pc, #100]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ac:	f004 fd76 	bl	8005f9c <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014b6:	f7ff fe7b 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ca:	f005 fb23 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014d4:	f7ff fe6c 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80014dc:	f241 0368 	movw	r3, #4200	; 0x1068
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014f2:	f004 fe75 	bl	80061e0 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f7ff fe58 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001502:	f000 f82b 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000200 	.word	0x20000200
 8001514:	40000800 	.word	0x40000800

08001518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40000800 	.word	0x40000800
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_TIM_MspPostInit+0x68>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d11e      	bne.n	80015bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PP_step_Pin;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PP_step_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_TIM_MspPostInit+0x70>)
 80015b8:	f003 fe2e 	bl	8005218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART1_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001608:	f005 fb00 	bl	8006c0c <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fdcd 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000248 	.word	0x20000248
 8001620:	40011000 	.word	0x40011000

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_UART_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d134      	bne.n	80016b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_UART_MspInit+0x98>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_UART_MspInit+0x9c>)
 800169c:	f003 fdbc 	bl	8005218 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f003 fcee 	bl	8005086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f003 fd07 	bl	80050be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ee:	f7ff fe89 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f006 fdb9 	bl	8008268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fcd1 	bl	800109c <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001708:	0800f294 	.word	0x0800f294
  ldr r2, =_sbss
 800170c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001710:	20000eec 	.word	0x20000eec

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <app_main>:

#include "board_pkg.h"


void app_main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af02      	add	r7, sp, #8
	int state = newEntities(5);
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fcb6 	bl	8002090 <newEntities>
 8001724:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "app_main: error entity allocation");
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10e      	bne.n	800174a <app_main+0x32>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf0c      	ite	eq
 8001732:	2301      	moveq	r3, #1
 8001734:	2300      	movne	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <app_main+0x48>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	230e      	movs	r3, #14
 8001740:	4a08      	ldr	r2, [pc, #32]	; (8001764 <app_main+0x4c>)
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <app_main+0x50>)
 8001744:	f003 fa24 	bl	8004b90 <__M_Error>
 8001748:	e006      	b.n	8001758 <app_main+0x40>
	entityBoardInit();
 800174a:	f000 f80f 	bl	800176c <entityBoardInit>


	init_stm32_communicator();
 800174e:	f003 fa81 	bl	8004c54 <init_stm32_communicator>
	// protocolAllTest(44, 100, (TESTER_CRC | TESTER_ENDIAN | TESTER_CONVERT | TESTER_RAW_P_DMA | TESTER_REED_SOLOMON_ECC | TESTER_CALLBACK_MANAGER | TESTER_PULL_CONTAINER | TESTER_RAW_P_IT | TESTER_RAW_P_GEN));
	//protocolAllTest(44, 100, TESTER_ENDIAN | TESTER_CONVERT | TESTER_RAW_P_GEN |TESTER_RAW_P_IT | TESTER_RAW_P_DMA);
	while(1) {
		proceedIncommingMessage();
 8001752:	f003 fab1 	bl	8004cb8 <proceedIncommingMessage>
 8001756:	e7fc      	b.n	8001752 <app_main+0x3a>
	}
}
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800c8dc 	.word	0x0800c8dc
 8001764:	0800c8a8 	.word	0x0800c8a8
 8001768:	0800c8c4 	.word	0x0800c8c4

0800176c <entityBoardInit>:
#include "smart_assert.h"

const boards_t* board_entry = NULL;

void entityBoardInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af04      	add	r7, sp, #16
	reg board_entityNum = ENTITY_NUMBER_ERROR;
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	60bb      	str	r3, [r7, #8]
	reg fieldNumber = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]

	int state = initEntity(&board_entityNum, 4, sizeof(boards_t), "BID ", 0, 0, NULL);
 800177c:	f107 0008 	add.w	r0, r7, #8
 8001780:	2300      	movs	r3, #0
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2300      	movs	r3, #0
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <entityBoardInit+0x164>)
 800178e:	2206      	movs	r2, #6
 8001790:	2104      	movs	r1, #4
 8001792:	f000 fccf 	bl	8002134 <initEntity>
 8001796:	61f8      	str	r0, [r7, #28]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "entityBoardInit: initEntity Error");
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <entityBoardInit+0x50>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <entityBoardInit+0x168>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	230d      	movs	r3, #13
 80017b2:	4a49      	ldr	r2, [pc, #292]	; (80018d8 <entityBoardInit+0x16c>)
 80017b4:	4849      	ldr	r0, [pc, #292]	; (80018dc <entityBoardInit+0x170>)
 80017b6:	f003 f9eb 	bl	8004b90 <__M_Error>
 80017ba:	e086      	b.n	80018ca <entityBoardInit+0x15e>

	Entity* const entity = getEntityPointer(board_entityNum);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	613b      	str	r3, [r7, #16]
 */

// getter entity pointer by entity number
STATIC_FORCEINLINE Entity * getEntityPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <entityBoardInit+0x174>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d206      	bcs.n	80017d8 <entityBoardInit+0x6c>
        return entityInfo.entities[entityNumber];
 80017ca:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <entityBoardInit+0x174>)
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e000      	b.n	80017da <entityBoardInit+0x6e>
    }
    return NULLPTR(Entity*);
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
	M_Assert_BreakSaveCheck((entity == NULL), M_EMPTY, return, "entityBoardInit: entity is null");
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10e      	bne.n	8001800 <entityBoardInit+0x94>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <entityBoardInit+0x178>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2310      	movs	r3, #16
 80017f6:	4a38      	ldr	r2, [pc, #224]	; (80018d8 <entityBoardInit+0x16c>)
 80017f8:	483b      	ldr	r0, [pc, #236]	; (80018e8 <entityBoardInit+0x17c>)
 80017fa:	f003 f9c9 	bl	8004b90 <__M_Error>
 80017fe:	e064      	b.n	80018ca <entityBoardInit+0x15e>

	boards_t* entry = getVoidPointer(board_entityNum);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60fb      	str	r3, [r7, #12]
}

// getter data pointer by entity number
STATIC_FORCEINLINE void * getVoidPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <entityBoardInit+0x174>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	429a      	cmp	r2, r3
 800180c:	d207      	bcs.n	800181e <entityBoardInit+0xb2>
        return entityInfo.entities[entityNumber]->pointer;
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <entityBoardInit+0x174>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e000      	b.n	8001820 <entityBoardInit+0xb4>
    }
    return NULL;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
	M_Assert_BreakSaveCheck((entry == NULL), M_EMPTY, return, "entityBoardInit: entry is null");
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10e      	bne.n	8001846 <entityBoardInit+0xda>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <entityBoardInit+0x180>)
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2313      	movs	r3, #19
 800183c:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <entityBoardInit+0x16c>)
 800183e:	482c      	ldr	r0, [pc, #176]	; (80018f0 <entityBoardInit+0x184>)
 8001840:	f003 f9a6 	bl	8004b90 <__M_Error>
 8001844:	e041      	b.n	80018ca <entityBoardInit+0x15e>

	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, boardId), 	UINT8_TYPE, 	"B   ", &entry->boardId);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	1d39      	adds	r1, r7, #4
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <entityBoardInit+0x188>)
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	2301      	movs	r3, #1
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	2201      	movs	r2, #1
 8001858:	69b8      	ldr	r0, [r7, #24]
 800185a:	f000 fd7d 	bl	8002358 <initField>
	initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, major), 		UINT8_TYPE, 	"VerH", &entry->major);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	1d39      	adds	r1, r7, #4
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <entityBoardInit+0x18c>)
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	2301      	movs	r3, #1
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2200      	movs	r2, #0
 8001872:	69b8      	ldr	r0, [r7, #24]
 8001874:	f000 fd70 	bl	8002358 <initField>
	initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, minor), 		UINT8_TYPE, 	"VerM", &entry->minor);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3302      	adds	r3, #2
 800187c:	1d39      	adds	r1, r7, #4
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <entityBoardInit+0x190>)
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2301      	movs	r3, #1
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2302      	movs	r3, #2
 800188a:	2200      	movs	r2, #0
 800188c:	69b8      	ldr	r0, [r7, #24]
 800188e:	f000 fd63 	bl	8002358 <initField>
	initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, patch), 		UINT16_TYPE, 	"VerL", &entry->patch);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3304      	adds	r3, #4
 8001896:	1d39      	adds	r1, r7, #4
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <entityBoardInit+0x194>)
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2302      	movs	r3, #2
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2304      	movs	r3, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	69b8      	ldr	r0, [r7, #24]
 80018a8:	f000 fd56 	bl	8002358 <initField>

	entry->boardId 	= INIT_BOARD_ID;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
	entry->major 	= BOARD_MAJOR;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2201      	movs	r2, #1
 80018b6:	705a      	strb	r2, [r3, #1]
	entry->minor 	= BOARD_MINOR;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2200      	movs	r2, #0
 80018bc:	709a      	strb	r2, [r3, #2]
	entry->patch	= BOARD_PATCHLEVEL;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2200      	movs	r2, #0
 80018c2:	809a      	strh	r2, [r3, #4]
	board_entry = entry;
 80018c4:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <entityBoardInit+0x198>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	6013      	str	r3, [r2, #0]
}
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	0800c900 	.word	0x0800c900
 80018d4:	0800c940 	.word	0x0800c940
 80018d8:	0800c908 	.word	0x0800c908
 80018dc:	0800c928 	.word	0x0800c928
 80018e0:	20000290 	.word	0x20000290
 80018e4:	0800c978 	.word	0x0800c978
 80018e8:	0800c964 	.word	0x0800c964
 80018ec:	0800c9a8 	.word	0x0800c9a8
 80018f0:	0800c998 	.word	0x0800c998
 80018f4:	0800c9c8 	.word	0x0800c9c8
 80018f8:	0800c9d0 	.word	0x0800c9d0
 80018fc:	0800c9d8 	.word	0x0800c9d8
 8001900:	0800c9e0 	.word	0x0800c9e0
 8001904:	2000028c 	.word	0x2000028c

08001908 <HAL_UART_RxCpltCallback>:



// uart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_UART_RxCpltCallback+0x54>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d11c      	bne.n	8001954 <HAL_UART_RxCpltCallback+0x4c>

		RawParser_dma_receiveByte(&comm.rawparser, comm.receiveByte);
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_UART_RxCpltCallback+0x58>)
 800191c:	f893 3a34 	ldrb.w	r3, [r3, #2612]	; 0xa34
 8001920:	75fb      	strb	r3, [r7, #23]

// receive functions-----------------------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_receiveByte(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == NULL), M_EMPTY, return, "RawParser_dma_receiveByte: No valid input");
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_UART_RxCpltCallback+0x5c>)
 8001924:	613b      	str	r3, [r7, #16]
    reg m_receivePos            = self->m_receivePos;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_UART_RxCpltCallback+0x58>)
 8001928:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800192c:	60fb      	str	r3, [r7, #12]

    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4413      	add	r3, r2
 8001938:	7dfa      	ldrb	r2, [r7, #23]
 800193a:	701a      	strb	r2, [r3, #0]
    ++m_receivePos;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]

    self->m_receivePos = m_receivePos;
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_UART_RxCpltCallback+0x58>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
		HAL_UART_Receive_IT(huart, (uint8_t*) &comm.receiveByte, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	4906      	ldr	r1, [pc, #24]	; (8001968 <HAL_UART_RxCpltCallback+0x60>)
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f005 fa3b 	bl	8006dca <HAL_UART_Receive_IT>
	}
}
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40011000 	.word	0x40011000
 8001960:	200002a0 	.word	0x200002a0
 8001964:	200002a8 	.word	0x200002a8
 8001968:	20000cd4 	.word	0x20000cd4

0800196c <CallbackManager_init>:
    CallbackManager_init(m_manager);
    return m_manager;
}

void CallbackManager_init(CallbackManager_t * const self)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af04      	add	r7, sp, #16
 8001972:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_init: no valid input data", ENA, LIB);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d112      	bne.n	80019a0 <CallbackManager_init+0x34>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4619      	mov	r1, r3
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <CallbackManager_init+0x60>)
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	2301      	movs	r3, #1
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <CallbackManager_init+0x64>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2314      	movs	r3, #20
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <CallbackManager_init+0x68>)
 8001998:	480f      	ldr	r0, [pc, #60]	; (80019d8 <CallbackManager_init+0x6c>)
 800199a:	f003 f8f9 	bl	8004b90 <__M_Error>
 800199e:	e011      	b.n	80019c4 <CallbackManager_init+0x58>
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e007      	b.n	80019b6 <CallbackManager_init+0x4a>
        self->workers[i] = (CallbackWorker)NULL;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	2100      	movs	r1, #0
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2bff      	cmp	r3, #255	; 0xff
 80019ba:	d9f4      	bls.n	80019a6 <CallbackManager_init+0x3a>
        self->ctx[i] = NULL;
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
    }

#ifndef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx = NULL;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	0800ca48 	.word	0x0800ca48
 80019d0:	0800cab4 	.word	0x0800cab4
 80019d4:	0800c9e8 	.word	0x0800c9e8
 80019d8:	0800ca90 	.word	0x0800ca90

080019dc <CallbackManager_addWorker>:

    return 0;
}

void CallbackManager_addWorker(CallbackManager_t * const self, const CallBManIdType id, const CallbackWorker worker, PREPROCESSOR_CTX_TYPE(ctx))
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	460b      	mov	r3, r1
 80019ea:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d112      	bne.n	8001a18 <CallbackManager_addWorker+0x3c>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <CallbackManager_addWorker+0x54>)
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	2301      	movs	r3, #1
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <CallbackManager_addWorker+0x58>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	232d      	movs	r3, #45	; 0x2d
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <CallbackManager_addWorker+0x5c>)
 8001a10:	480a      	ldr	r0, [pc, #40]	; (8001a3c <CallbackManager_addWorker+0x60>)
 8001a12:	f003 f8bd 	bl	8004b90 <__M_Error>
 8001a16:	e008      	b.n	8001a2a <CallbackManager_addWorker+0x4e>

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    self->workers[id] = worker;
 8001a18:	7afa      	ldrb	r2, [r7, #11]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx[id] = PREPROCESSOR_CTX_TYPE_CAST(ctx);
#else
    self->ctx = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800ca48 	.word	0x0800ca48
 8001a34:	0800cb38 	.word	0x0800cb38
 8001a38:	0800c9e8 	.word	0x0800c9e8
 8001a3c:	0800ca90 	.word	0x0800ca90

08001a40 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
int CallbackManager_proceed(const CallbackManager_t* const self, const CallBManIdType id,
                            u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b08b      	sub	sp, #44	; 0x2c
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input data", ENA, LIB);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d113      	bne.n	8001a7e <CallbackManager_proceed+0x3e>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4619      	mov	r1, r3
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <CallbackManager_proceed+0x84>)
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <CallbackManager_proceed+0x88>)
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2341      	movs	r3, #65	; 0x41
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <CallbackManager_proceed+0x8c>)
 8001a74:	4816      	ldr	r0, [pc, #88]	; (8001ad0 <CallbackManager_proceed+0x90>)
 8001a76:	f003 f88b 	bl	8004b90 <__M_Error>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e01e      	b.n	8001abc <CallbackManager_proceed+0x7c>
#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    // move to cash
    const CallbackWorker worker = self->workers[id];
 8001a7e:	7afa      	ldrb	r2, [r7, #11]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a86:	617b      	str	r3, [r7, #20]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx[id];
#else
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001a8e:	613b      	str	r3, [r7, #16]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    // do logic
    M_Assert_SafeFunctionCall((worker != (CallbackWorker)NULL), {
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <CallbackManager_proceed+0x6a>
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	697c      	ldr	r4, [r7, #20]
 8001a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	47a0      	blx	r4
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e008      	b.n	8001abc <CallbackManager_proceed+0x7c>
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <CallbackManager_proceed+0x94>)
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2351      	movs	r3, #81	; 0x51
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <CallbackManager_proceed+0x8c>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <CallbackManager_proceed+0x98>)
 8001ab6:	f003 f889 	bl	8004bcc <__M_Warning>
                                  worker(inputData, outputData, size, maxOutBufferSize, ctx);
                                  return 1;
                              });
    return 0;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	0800ca48 	.word	0x0800ca48
 8001ac8:	0800cb6c 	.word	0x0800cb6c
 8001acc:	0800c9e8 	.word	0x0800c9e8
 8001ad0:	0800ca90 	.word	0x0800ca90
 8001ad4:	0800cbc0 	.word	0x0800cbc0
 8001ad8:	0800cb9c 	.word	0x0800cb9c

08001adc <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	4053      	eors	r3, r2
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <fast_crc8_maxim_byte+0x2c>)
 8001af8:	5c9b      	ldrb	r3, [r3, r2]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	0800ec98 	.word	0x0800ec98

08001b0c <entityCMD>:
#ifdef C_ENTITY_FRAMEWORK_LIB_ENA
#include "entity_packet.h"
#include "smart_assert.h"

void entityCMD(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001b0c:	b5b0      	push	{r4, r5, r7, lr}
 8001b0e:	b0b4      	sub	sp, #208	; 0xd0
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
    M_Assert_Break((inputData == NULL) || (outputData == NULL) || (size == NULL), M_EMPTY, return, "entityCMD: invalid input");
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <entityCMD+0x20>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <entityCMD+0x20>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d114      	bne.n	8001b56 <entityCMD+0x4a>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <entityCMD+0x32>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <entityCMD+0x32>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <entityCMD+0x36>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <entityCMD+0x38>
 8001b42:	2300      	movs	r3, #0
 8001b44:	b2d9      	uxtb	r1, r3
 8001b46:	4bb9      	ldr	r3, [pc, #740]	; (8001e2c <entityCMD+0x320>)
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	4ab8      	ldr	r2, [pc, #736]	; (8001e30 <entityCMD+0x324>)
 8001b4e:	48b9      	ldr	r0, [pc, #740]	; (8001e34 <entityCMD+0x328>)
 8001b50:	f003 f81e 	bl	8004b90 <__M_Error>
 8001b54:	e1fb      	b.n	8001f4e <entityCMD+0x442>

    const reg sizeInternal = (*size);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    M_Assert_Break((sizeInternal == 0) || (maxOutBufferSize == 0), M_EMPTY, return, "entityCMD: invalid input size");
 8001b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <entityCMD+0x60>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d112      	bne.n	8001b92 <entityCMD+0x86>
 8001b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <entityCMD+0x6e>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <entityCMD+0x72>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <entityCMD+0x74>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	b2d9      	uxtb	r1, r3
 8001b82:	4bad      	ldr	r3, [pc, #692]	; (8001e38 <entityCMD+0x32c>)
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	230d      	movs	r3, #13
 8001b88:	4aa9      	ldr	r2, [pc, #676]	; (8001e30 <entityCMD+0x324>)
 8001b8a:	48ac      	ldr	r0, [pc, #688]	; (8001e3c <entityCMD+0x330>)
 8001b8c:	f003 f800 	bl	8004b90 <__M_Error>
 8001b90:	e1dd      	b.n	8001f4e <entityCMD+0x442>

    reg Wpos = 1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    reg Rpos = 1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
    reg entitySize = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
    const u8 cmd = inputData[0];
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf


    // write header------------------------------------------
    outputData[0] =   cmd;                     // CMD_ID
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8001bae:	701a      	strb	r2, [r3, #0]

    // do logic------------------------------------------
    switch(cmd) {
 8001bb0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001bb4:	2b0a      	cmp	r3, #10
 8001bb6:	f200 81c4 	bhi.w	8001f42 <entityCMD+0x436>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <entityCMD+0xb4>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001c09 	.word	0x08001c09
 8001bc4:	08001c97 	.word	0x08001c97
 8001bc8:	08001d8f 	.word	0x08001d8f
 8001bcc:	08001e69 	.word	0x08001e69
 8001bd0:	08001e41 	.word	0x08001e41
 8001bd4:	08001efb 	.word	0x08001efb
 8001bd8:	08001f23 	.word	0x08001f23
 8001bdc:	08001f23 	.word	0x08001f23
 8001be0:	08001f43 	.word	0x08001f43
 8001be4:	08001f43 	.word	0x08001f43
 8001be8:	08001bed 	.word	0x08001bed

    /* **********************************************************************************************************************************
     *  READ MAIN TYPE DIMENSIONS
     */
    case ENTITY_READ_DIMENSIONS: {
        readEntitiesSizes((outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bf2:	18d0      	adds	r0, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bfa:	1ad2      	subs	r2, r2, r3
 8001bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c00:	4619      	mov	r1, r3
 8001c02:	f000 fc49 	bl	8002498 <readEntitiesSizes>
        break;}
 8001c06:	e19c      	b.n	8001f42 <entityCMD+0x436>
    case READ_ENTITY_DESCRIPTIONS: {
        //ENTITY_DBG_ASSERT_BUF( (Rpos + (ENTITIES_SIZEOF << 1)) > sizeInternal, M_EMPTY, return, "entityCMD: read size more than buffer");

        // read entity start
        TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber;
        readEntityNumberFromBuf(&startEntityNumber, &inputData[Rpos]);
 8001c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
/************************************************************************************
 *  Macro for user copy
 */
STATIC_FORCEINLINE void MY_CTYPE_USER_DATA_MEMCPY(reg n, void* from, void* to)
{
    switch (n) {
 8001c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <entityCMD+0x132>
//-------------------- NOT WORK --------------------------------------------------------
//    case sizeof(u64): *(u64*)to = *(u64*)from; break;
//    case sizeof(u32): *(u32*)to = *(u32*)from; break;
//    case sizeof(u16): *(u16*)to = *(u16*)from; break;
//-------------------- NOT WORK --------------------------------------------------------
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e008      	b.n	8001c50 <entityCMD+0x144>
    default: memcpy(to, from, n); break;
 8001c3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001c42:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001c46:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001c4a:	f006 fb45 	bl	80082d8 <memcpy>
 8001c4e:	bf00      	nop
    }
}
 8001c50:	bf00      	nop
     */
#if (MAX_NUBER_OF_ENTITIES < 256U)
    (*entityNumber) = *(inputData);
#else
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF, inputData, (u8*)entityNumber);
    (*entityNumber) &= 0x0000FFFFUL;
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* (MAX_NUBER_OF_ENTITIES < 256U) */
    //----------------- END --------------------------------------------------------------------------------
}
 8001c58:	bf00      	nop
        Rpos += ENTITIES_SIZEOF;
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34

        // read number of entity
        //        TYPEOF_STRUCT(EntityInfo, entities_count) len; //(WARNING!!!) do not supported on old version!!!!!!!
        //        readEntityNumberFromBuf(&len, &inputData[Rpos]);
        //        Rpos += ENTITIES_SIZEOF;
        const TYPEOF_STRUCT(EntityInfo, entities_count) len = inputData[Rpos++]; // support on old version (this is glitch!!!)
 8001c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	637a      	str	r2, [r7, #52]	; 0x34
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4413      	add	r3, r2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

        // read descriptions function
        readEntitiesDescriptions(startEntityNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001c70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c78:	18d1      	adds	r1, r2, r3
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001c90:	f000 fca0 	bl	80025d4 <readEntitiesDescriptions>
        break;}
 8001c94:	e155      	b.n	8001f42 <entityCMD+0x436>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
}

// read entity & field number from input buffer by next position
STATIC_FORCEINLINE void readEntityFieldNumbersfromBuf(TYPEOF_STRUCT(EntityInfo, entities_count)* const entityNumber, TYPEOF_STRUCT(Entity, fields_count)* const fieldNumber, u8* const inputData, reg* const Rpos)
{
    reg Rpos_internal = (*Rpos);
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read entity number
     */
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8001ca2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001caa:	4413      	add	r3, r2
 8001cac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cb0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001cb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001cc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    switch (n) {
 8001cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d106      	bne.n	8001ce4 <entityCMD+0x1d8>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	e008      	b.n	8001cf6 <entityCMD+0x1ea>
    default: memcpy(to, from, n); break;
 8001ce4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ce8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001cec:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001cf0:	f006 faf2 	bl	80082d8 <memcpy>
 8001cf4:	bf00      	nop
}
 8001cf6:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8001cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8001d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read field number
     */
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8001d12:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001d20:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    (*fieldNumber) = *(inputData);
 8001d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d34:	801a      	strh	r2, [r3, #0]
}
 8001d36:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    //----------------- END -----------------------------------------------
    (*Rpos) = Rpos_internal;
 8001d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
}
 8001d48:	bf00      	nop
        TYPEOF_STRUCT(Entity, fields_count)         startFieldNumber;
        TYPEOF_STRUCT(Entity, fields_count)         len;
        readEntityFieldNumbersfromBuf(&entityNumber, &startFieldNumber, inputData, &Rpos);

        //read number of fields
        readFieldNumberFromBuf(&len, &inputData[Rpos]);
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*fieldNumber) = *(inputData);
 8001d54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
}
 8001d5e:	bf00      	nop
        Rpos += ENTITY_FIELD_SIZEOF;
 8001d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d62:	3301      	adds	r3, #1
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34

        readEntityFields(entityNumber, startFieldNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d68:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001d6a:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d72:	18d5      	adds	r5, r2, r3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	462b      	mov	r3, r5
 8001d86:	4622      	mov	r2, r4
 8001d88:	f000 fcdc 	bl	8002744 <readEntityFields>
        break;}
 8001d8c:	e0d9      	b.n	8001f42 <entityCMD+0x436>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	67fb      	str	r3, [r7, #124]	; 0x7c
    reg Rpos_internal = (*Rpos);
 8001d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d94:	67bb      	str	r3, [r7, #120]	; 0x78
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8001d96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f107 0220 	add.w	r2, r7, #32
 8001da0:	677a      	str	r2, [r7, #116]	; 0x74
 8001da2:	673b      	str	r3, [r7, #112]	; 0x70
 8001da4:	2302      	movs	r3, #2
 8001da6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dae:	667b      	str	r3, [r7, #100]	; 0x64
    switch (n) {
 8001db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d104      	bne.n	8001dc0 <entityCMD+0x2b4>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e005      	b.n	8001dcc <entityCMD+0x2c0>
    default: memcpy(to, from, n); break;
 8001dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001dc4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001dc6:	f006 fa87 	bl	80082d8 <memcpy>
 8001dca:	bf00      	nop
}
 8001dcc:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8001dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8001dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ddc:	3302      	adds	r3, #2
 8001dde:	67bb      	str	r3, [r7, #120]	; 0x78
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8001de0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de4:	4413      	add	r3, r2
 8001de6:	f107 021e 	add.w	r2, r7, #30
 8001dea:	663a      	str	r2, [r7, #96]	; 0x60
 8001dec:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*fieldNumber) = *(inputData);
 8001dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001df6:	801a      	strh	r2, [r3, #0]
}
 8001df8:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	67bb      	str	r3, [r7, #120]	; 0x78
    (*Rpos) = Rpos_internal;
 8001e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
}
 8001e04:	bf00      	nop

        TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
        TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        readFieldValue(entityNumber, fieldNumber, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001e06:	6a38      	ldr	r0, [r7, #32]
 8001e08:	8bf9      	ldrh	r1, [r7, #30]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e10:	18d4      	adds	r4, r2, r3
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	4622      	mov	r2, r4
 8001e24:	f000 fda2 	bl	800296c <readFieldValue>
        break;}
 8001e28:	e08b      	b.n	8001f42 <entityCMD+0x436>
 8001e2a:	bf00      	nop
 8001e2c:	0800cc44 	.word	0x0800cc44
 8001e30:	0800cbd4 	.word	0x0800cbd4
 8001e34:	0800cc04 	.word	0x0800cc04
 8001e38:	0800cc90 	.word	0x0800cc90
 8001e3c:	0800cc60 	.word	0x0800cc60

    case READ_SEVERAL_VALUES: {
        entitySize = (sizeInternal - 1U);
 8001e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e44:	3b01      	subs	r3, #1
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
        readSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	18d0      	adds	r0, r2, r3
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e54:	18d1      	adds	r1, r2, r3
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e62:	f000 feaf 	bl	8002bc4 <readSeveralFieldsValues>
        break;}
 8001e66:	e06c      	b.n	8001f42 <entityCMD+0x436>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	65bb      	str	r3, [r7, #88]	; 0x58
    reg Rpos_internal = (*Rpos);
 8001e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6e:	657b      	str	r3, [r7, #84]	; 0x54
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8001e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e74:	4413      	add	r3, r2
 8001e76:	f107 0218 	add.w	r2, r7, #24
 8001e7a:	653a      	str	r2, [r7, #80]	; 0x50
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e7e:	2302      	movs	r3, #2
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
 8001e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e88:	643b      	str	r3, [r7, #64]	; 0x40
    switch (n) {
 8001e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d104      	bne.n	8001e9a <entityCMD+0x38e>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e005      	b.n	8001ea6 <entityCMD+0x39a>
    default: memcpy(to, from, n); break;
 8001e9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ea0:	f006 fa1a 	bl	80082d8 <memcpy>
 8001ea4:	bf00      	nop
}
 8001ea6:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8001ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb0:	601a      	str	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	657b      	str	r3, [r7, #84]	; 0x54
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8001eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f107 0216 	add.w	r2, r7, #22
 8001ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
    (*fieldNumber) = *(inputData);
 8001ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed0:	801a      	strh	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	657b      	str	r3, [r7, #84]	; 0x54
    (*Rpos) = Rpos_internal;
 8001eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
}
 8001ede:	bf00      	nop

        TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
        TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        setFieldValue(entityNumber, fieldNumber, (inputData + Rpos), (sizeInternal - Rpos));
 8001ee0:	69b8      	ldr	r0, [r7, #24]
 8001ee2:	8af9      	ldrh	r1, [r7, #22]
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	18d4      	adds	r4, r2, r3
 8001eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	f001 f860 	bl	8002fb8 <setFieldValue>
        break;}
 8001ef8:	e023      	b.n	8001f42 <entityCMD+0x436>

    case WRITE_SEVERAL_VALUES: {
        entitySize = (sizeInternal - 1U);
 8001efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001efe:	3b01      	subs	r3, #1
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
        setSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	18d0      	adds	r0, r2, r3
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f0e:	18d1      	adds	r1, r2, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f1c:	f001 f94e 	bl	80031bc <setSeveralFieldsValues>
        break;}
 8001f20:	e00f      	b.n	8001f42 <entityCMD+0x436>
    /* **********************************************************************************************************************************
     *  WRITE/READ Values
     */
    case READ_SEVERAL_VALUES_GLUED :
    case WRITE_SEVERAL_VALUES_GLUED: {
        proceedGluedValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	18d0      	adds	r0, r2, r3
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f2e:	18d1      	adds	r1, r2, r3
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f3c:	f001 fb3c 	bl	80035b8 <proceedGluedValues>
        break;}
 8001f40:	bf00      	nop
    case ENTITY_FLASH_OPERATION: {
        break;}

    }

    (*size) = (Wpos + entitySize);
 8001f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f48:	441a      	add	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	601a      	str	r2, [r3, #0]
    UNUSED(ctx);
}
 8001f4e:	37c8      	adds	r7, #200	; 0xc8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bdb0      	pop	{r4, r5, r7, pc}

08001f54 <deleteEntitityFieldsInternal>:
 * **********************************************************************************************************************************
 */

/// delete some entity for internal using
static void deleteEntitityFieldsInternal(const reg entityNumber)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((entityNumber > entityInfo.entities_count), M_EMPTY, return, "deleteEntitityFieldsInternal: No entity for delete!!!");
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <deleteEntitityFieldsInternal+0x34>
 8001f66:	4b33      	ldr	r3, [pc, #204]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	bf8c      	ite	hi
 8001f70:	2301      	movhi	r3, #1
 8001f72:	2300      	movls	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <deleteEntitityFieldsInternal+0xe4>)
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	231b      	movs	r3, #27
 8001f7e:	4a2f      	ldr	r2, [pc, #188]	; (800203c <deleteEntitityFieldsInternal+0xe8>)
 8001f80:	482f      	ldr	r0, [pc, #188]	; (8002040 <deleteEntitityFieldsInternal+0xec>)
 8001f82:	f002 fe05 	bl	8004b90 <__M_Error>
 8001f86:	e051      	b.n	800202c <deleteEntitityFieldsInternal+0xd8>
    M_Assert_BreakSaveCheck((entityInfo.entities[entityNumber] == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]))), M_EMPTY, return, "initEntity: entity number: %d is null", entityNumber);
 8001f88:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d115      	bne.n	8001fc4 <deleteEntitityFieldsInternal+0x70>
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <deleteEntitityFieldsInternal+0xf0>)
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	231c      	movs	r3, #28
 8001fba:	4a20      	ldr	r2, [pc, #128]	; (800203c <deleteEntitityFieldsInternal+0xe8>)
 8001fbc:	4822      	ldr	r0, [pc, #136]	; (8002048 <deleteEntitityFieldsInternal+0xf4>)
 8001fbe:	f002 fde7 	bl	8004b90 <__M_Error>
 8001fc2:	e033      	b.n	800202c <deleteEntitityFieldsInternal+0xd8>
    if(entityInfo.entities[entityNumber]->isHeap) {
        free(entityInfo.entities[entityNumber]->pointer);
        entityInfo.entities[entityNumber]->pointer = NULL;
    }
#else
    free(entityInfo.entities[entityNumber]->pointer);
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f006 f978 	bl	80082c8 <free>
    entityInfo.entities[entityNumber]->pointer = NULL;
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
#endif /* USE_ENTITY_USER_SPACE */

    free(entityInfo.entities[entityNumber]->fields);
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f006 f966 	bl	80082c8 <free>
    entityInfo.entities[entityNumber]->fields = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]->fields));
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]

    free(entityInfo.entities[entityNumber]);
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f006 f955 	bl	80082c8 <free>
    entityInfo.entities[entityNumber] = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]));
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <deleteEntitityFieldsInternal+0xe0>)
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
}
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000290 	.word	0x20000290
 8002038:	0800cd10 	.word	0x0800cd10
 800203c:	0800ccb0 	.word	0x0800ccb0
 8002040:	0800cce4 	.word	0x0800cce4
 8002044:	0800cdac 	.word	0x0800cdac
 8002048:	0800cd48 	.word	0x0800cd48

0800204c <deleteEntities>:
}


/// delete all entities and deallocation all memory
void deleteEntities(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <deleteEntities+0x40>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	603b      	str	r3, [r7, #0]

    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	e005      	b.n	800206a <deleteEntities+0x1e>
        deleteEntitityFieldsInternal(i);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff78 	bl	8001f54 <deleteEntitityFieldsInternal>
    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3f5      	bcc.n	800205e <deleteEntities+0x12>
    }

    free(entityInfo.entities);
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <deleteEntities+0x40>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f006 f926 	bl	80082c8 <free>
    pointerInit(sizeof(entityInfo), (u8*)&entityInfo);
 800207c:	4903      	ldr	r1, [pc, #12]	; (800208c <deleteEntities+0x40>)
 800207e:	200c      	movs	r0, #12
 8002080:	f002 f858 	bl	8004134 <pointerInit>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000290 	.word	0x20000290

08002090 <newEntities>:



/// allocation new entities pointers
int newEntities(const reg numberOfEntities)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af04      	add	r7, sp, #16
 8002096:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((numberOfEntities > MAX_NUBER_OF_ENTITIES), M_EMPTY, return ENTITY_ERROR, "newEntities: No valid input number of entities, value: %d, max: %d", numberOfEntities, MAX_NUBER_OF_ENTITIES);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800209e:	d915      	bls.n	80020cc <newEntities+0x3c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80020a6:	bf8c      	ite	hi
 80020a8:	2301      	movhi	r3, #1
 80020aa:	2300      	movls	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80020b4:	9302      	str	r3, [sp, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <newEntities+0x8c>)
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2359      	movs	r3, #89	; 0x59
 80020c0:	4a17      	ldr	r2, [pc, #92]	; (8002120 <newEntities+0x90>)
 80020c2:	4818      	ldr	r0, [pc, #96]	; (8002124 <newEntities+0x94>)
 80020c4:	f002 fd64 	bl	8004b90 <__M_Error>
 80020c8:	2300      	movs	r3, #0
 80020ca:	e022      	b.n	8002112 <newEntities+0x82>

    deleteEntities(); // delete all entities
 80020cc:	f7ff ffbe 	bl	800204c <deleteEntities>

    entityInfo.entities = (Entity**) calloc(numberOfEntities, sizeof(Entity*)); // allocation & initialization all entity pointers
 80020d0:	2104      	movs	r1, #4
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f005 fe30 	bl	8007d38 <calloc>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <newEntities+0x98>)
 80020de:	609a      	str	r2, [r3, #8]
    M_Assert_BreakSaveCheck((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities))), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entity pointers");
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <newEntities+0x98>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d110      	bne.n	800210a <newEntities+0x7a>
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <newEntities+0x98>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <newEntities+0x9c>)
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	235e      	movs	r3, #94	; 0x5e
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <newEntities+0x90>)
 8002100:	480b      	ldr	r0, [pc, #44]	; (8002130 <newEntities+0xa0>)
 8002102:	f002 fd45 	bl	8004b90 <__M_Error>
 8002106:	2300      	movs	r3, #0
 8002108:	e003      	b.n	8002112 <newEntities+0x82>

    entityInfo.allocated_entity_pointers = numberOfEntities;
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <newEntities+0x98>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6013      	str	r3, [r2, #0]
    return ENTITY_OK;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	0800ce2c 	.word	0x0800ce2c
 8002120:	0800ccb0 	.word	0x0800ccb0
 8002124:	0800ce00 	.word	0x0800ce00
 8002128:	20000290 	.word	0x20000290
 800212c:	0800ceb8 	.word	0x0800ceb8
 8002130:	0800ce70 	.word	0x0800ce70

08002134 <initEntity>:


/// allocation entitites pointer & fields
int initEntity(reg* const entityNumber, const reg NumberOfFields, const reg pointerSize, const char descr[ENTITY_DESCRIPTION_SIZE], const b isCustomSpace, const b isHeap, void* arg)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b093      	sub	sp, #76	; 0x4c
 8002138:	af04      	add	r7, sp, #16
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((NumberOfFields > MAX_NUBER_OF_FIELDS), M_EMPTY, return ENTITY_ERROR, "initEntity: No valid input number of fields, value: %d, max: %d", NumberOfFields, MAX_NUBER_OF_FIELDS);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2bff      	cmp	r3, #255	; 0xff
 8002146:	d913      	bls.n	8002170 <initEntity+0x3c>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2bff      	cmp	r3, #255	; 0xff
 800214c:	bf8c      	ite	hi
 800214e:	2301      	movhi	r3, #1
 8002150:	2300      	movls	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	23ff      	movs	r3, #255	; 0xff
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	4b71      	ldr	r3, [pc, #452]	; (8002324 <initEntity+0x1f0>)
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2368      	movs	r3, #104	; 0x68
 8002164:	4a70      	ldr	r2, [pc, #448]	; (8002328 <initEntity+0x1f4>)
 8002166:	4871      	ldr	r0, [pc, #452]	; (800232c <initEntity+0x1f8>)
 8002168:	f002 fd12 	bl	8004b90 <__M_Error>
 800216c:	2300      	movs	r3, #0
 800216e:	e0d4      	b.n	800231a <initEntity+0x1e6>

    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002170:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <initEntity+0x1fc>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
    const TYPEOF_STRUCT(EntityInfo, allocated_entity_pointers) allocated_entity_pointers = entityInfo.allocated_entity_pointers;
 8002176:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <initEntity+0x1fc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c

    M_Assert_BreakSaveCheck((entities_count >= allocated_entity_pointers), M_EMPTY, return ENTITY_ERROR, "initEntity: There is no free entity for initialization!!!, use /newEntities/ function before");
 800217c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	429a      	cmp	r2, r3
 8002182:	d310      	bcc.n	80021a6 <initEntity+0x72>
 8002184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	429a      	cmp	r2, r3
 800218a:	bf2c      	ite	cs
 800218c:	2301      	movcs	r3, #1
 800218e:	2300      	movcc	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4619      	mov	r1, r3
 8002194:	4b67      	ldr	r3, [pc, #412]	; (8002334 <initEntity+0x200>)
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	236d      	movs	r3, #109	; 0x6d
 800219a:	4a63      	ldr	r2, [pc, #396]	; (8002328 <initEntity+0x1f4>)
 800219c:	4866      	ldr	r0, [pc, #408]	; (8002338 <initEntity+0x204>)
 800219e:	f002 fcf7 	bl	8004b90 <__M_Error>
 80021a2:	2300      	movs	r3, #0
 80021a4:	e0b9      	b.n	800231a <initEntity+0x1e6>

    char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	f107 0318 	add.w	r3, r7, #24
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	721a      	strb	r2, [r3, #8]

    // allocation pointer to Entity--------------------------------------------------------------------------------------------------------------------------------------------------------------
    Entity* const new_entity = entityInfo.entities[entities_count] = (Entity*) calloc(1, sizeof(Entity));
 80021b6:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <initEntity+0x1fc>)
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	18d4      	adds	r4, r2, r3
 80021c0:	2110      	movs	r1, #16
 80021c2:	2001      	movs	r0, #1
 80021c4:	f005 fdb8 	bl	8007d38 <calloc>
 80021c8:	4603      	mov	r3, r0
 80021ca:	6023      	str	r3, [r4, #0]
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
    M_Assert_BreakSaveCheck(new_entity == NULLPTR(Entity*), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entitity");
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10f      	bne.n	80021f6 <initEntity+0xc2>
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4619      	mov	r1, r3
 80021e4:	4b55      	ldr	r3, [pc, #340]	; (800233c <initEntity+0x208>)
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2373      	movs	r3, #115	; 0x73
 80021ea:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <initEntity+0x1f4>)
 80021ec:	4854      	ldr	r0, [pc, #336]	; (8002340 <initEntity+0x20c>)
 80021ee:	f002 fccf 	bl	8004b90 <__M_Error>
 80021f2:	2300      	movs	r3, #0
 80021f4:	e091      	b.n	800231a <initEntity+0x1e6>

    // copy entity description-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if(descr) {
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <initEntity+0xd4>
        memcpy(new_entity->descr, descr, ENTITY_DESCRIPTION_SIZE);
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	3304      	adds	r3, #4
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e00a      	b.n	800221e <initEntity+0xea>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)descr, (u8 *)new_entity->descr);
    } else {
        sprintf(str, "E%d", entities_count);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220e:	494d      	ldr	r1, [pc, #308]	; (8002344 <initEntity+0x210>)
 8002210:	4618      	mov	r0, r3
 8002212:	f007 f9c3 	bl	800959c <siprintf>
        memcpy(new_entity->descr, str, ENTITY_DESCRIPTION_SIZE);
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	3304      	adds	r3, #4
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, (isCustomSpace ? "newEntities: Invalid user input space" : "newEntities: No memory for allocation Entitity"));

#else

    new_entity->pointer = calloc(1, pointerSize);
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	2001      	movs	r0, #1
 8002222:	f005 fd89 	bl	8007d38 <calloc>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	601a      	str	r2, [r3, #0]
    UNUSED(isCustomSpace);
    UNUSED(isHeap);
    UNUSED(arg);

    M_Assert_BreakSaveCheck((new_entity->pointer == NULL), {
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d113      	bne.n	800225e <initEntity+0x12a>
 8002236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002238:	f7ff fe8c 	bl	8001f54 <deleteEntitityFieldsInternal>
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4619      	mov	r1, r3
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <initEntity+0x208>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2396      	movs	r3, #150	; 0x96
 8002252:	4a35      	ldr	r2, [pc, #212]	; (8002328 <initEntity+0x1f4>)
 8002254:	483c      	ldr	r0, [pc, #240]	; (8002348 <initEntity+0x214>)
 8002256:	f002 fc9b 	bl	8004b90 <__M_Error>
 800225a:	2300      	movs	r3, #0
 800225c:	e05d      	b.n	800231a <initEntity+0x1e6>

#endif /* USE_ENTITY_USER_SPACE */


    // allocation pointer to Fields------------------------------------------------------------------------------------------------------------------------------------------------------------
    new_entity->fields = (EntityField*) calloc(NumberOfFields, sizeof(EntityField));
 800225e:	2120      	movs	r1, #32
 8002260:	68b8      	ldr	r0, [r7, #8]
 8002262:	f005 fd69 	bl	8007d38 <calloc>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	60da      	str	r2, [r3, #12]
    M_Assert_BreakSaveCheck((new_entity->fields == NULLPTR(TYPEOF_STRUCT(Entity, fields))), {
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d113      	bne.n	800229e <initEntity+0x16a>
 8002276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002278:	f7ff fe6c 	bl	8001f54 <deleteEntitityFieldsInternal>
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	4b2f      	ldr	r3, [pc, #188]	; (800234c <initEntity+0x218>)
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	239f      	movs	r3, #159	; 0x9f
 8002292:	4a25      	ldr	r2, [pc, #148]	; (8002328 <initEntity+0x1f4>)
 8002294:	482e      	ldr	r0, [pc, #184]	; (8002350 <initEntity+0x21c>)
 8002296:	f002 fc7b 	bl	8004b90 <__M_Error>
 800229a:	2300      	movs	r3, #0
 800229c:	e03d      	b.n	800231a <initEntity+0x1e6>
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, "newEntities: No memory for allocation EntityField");

    new_entity->fields_count = NumberOfFields;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	811a      	strh	r2, [r3, #8]

    // initialization Fields-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    for(reg i = 0; i < NumberOfFields; ++i) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
 80022aa:	e028      	b.n	80022fe <initEntity+0x1ca>
        EntityField* const    field = &new_entity->fields[i];
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b2:	015b      	lsls	r3, r3, #5
 80022b4:	4413      	add	r3, r2
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef USE_ENTITY_CALLBACKS

#   ifdef USE_ENTITY_READ_CALLBACK
        field->rdCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
        field->rdCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	2200      	movs	r2, #0
 80022c2:	605a      	str	r2, [r3, #4]
#   endif /* USE_ENTITY_READ_CALLBACK */

#   ifdef USE_ENTITY_WRITE_CALLBACK
        field->wrCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
        field->wrCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
#   endif /* USE_ENTITY_WRITE_CALLBACK */

#endif /* USE_ENTITY_CALLBACKS */

        field->bitFlags  = 0;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
        field->shift     = 0;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
        field->type      = VOID_TYPE;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	2200      	movs	r2, #0
 80022e0:	761a      	strb	r2, [r3, #24]

        sprintf(str, "F%d", i);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e8:	491a      	ldr	r1, [pc, #104]	; (8002354 <initEntity+0x220>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f007 f956 	bl	800959c <siprintf>
        memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	3319      	adds	r3, #25
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]
    for(reg i = 0; i < NumberOfFields; ++i) {
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	3301      	adds	r3, #1
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
 80022fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3d2      	bcc.n	80022ac <initEntity+0x178>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);
    }

    (*entityNumber) = entities_count;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230a:	601a      	str	r2, [r3, #0]
    ++entities_count;
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	3301      	adds	r3, #1
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
    entityInfo.entities_count = entities_count;
 8002312:	4a07      	ldr	r2, [pc, #28]	; (8002330 <initEntity+0x1fc>)
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	6053      	str	r3, [r2, #4]
    return ENTITY_OK;
 8002318:	2301      	movs	r3, #1
}
 800231a:	4618      	mov	r0, r3
 800231c:	373c      	adds	r7, #60	; 0x3c
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	bf00      	nop
 8002324:	0800cf18 	.word	0x0800cf18
 8002328:	0800ccb0 	.word	0x0800ccb0
 800232c:	0800cef0 	.word	0x0800cef0
 8002330:	20000290 	.word	0x20000290
 8002334:	0800cf88 	.word	0x0800cf88
 8002338:	0800cf58 	.word	0x0800cf58
 800233c:	0800d008 	.word	0x0800d008
 8002340:	0800cfe8 	.word	0x0800cfe8
 8002344:	0800d038 	.word	0x0800d038
 8002348:	0800d03c 	.word	0x0800d03c
 800234c:	0800d09c 	.word	0x0800d09c
 8002350:	0800d05c 	.word	0x0800d05c
 8002354:	0800d0d0 	.word	0x0800d0d0

08002358 <initField>:
 * **********************************************************************************************************************************
 */

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af04      	add	r7, sp, #16
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL), M_EMPTY, return ENTITY_ERROR, "initField: No valid input");
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <initField+0x1a>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d112      	bne.n	8002398 <initField+0x40>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <initField+0x26>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <initField+0x2a>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <initField+0x2c>
 8002382:	2300      	movs	r3, #0
 8002384:	b2d9      	uxtb	r1, r3
 8002386:	4b3d      	ldr	r3, [pc, #244]	; (800247c <initField+0x124>)
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	23cf      	movs	r3, #207	; 0xcf
 800238c:	4a3c      	ldr	r2, [pc, #240]	; (8002480 <initField+0x128>)
 800238e:	483d      	ldr	r0, [pc, #244]	; (8002484 <initField+0x12c>)
 8002390:	f002 fbfe 	bl	8004b90 <__M_Error>
 8002394:	2300      	movs	r3, #0
 8002396:	e06d      	b.n	8002474 <initField+0x11c>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && !(type == REG_TYPE || type == SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initField: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d021      	beq.n	80023e6 <initField+0x8e>
 80023a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d01d      	beq.n	80023e6 <initField+0x8e>
 80023aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023ae:	2b11      	cmp	r3, #17
 80023b0:	d019      	beq.n	80023e6 <initField+0x8e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <initField+0x78>
 80023bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d005      	beq.n	80023d0 <initField+0x78>
 80023c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	d001      	beq.n	80023d0 <initField+0x78>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <initField+0x7a>
 80023d0:	2300      	movs	r3, #0
 80023d2:	b2d9      	uxtb	r1, r3
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <initField+0x130>)
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	23d2      	movs	r3, #210	; 0xd2
 80023da:	4a29      	ldr	r2, [pc, #164]	; (8002480 <initField+0x128>)
 80023dc:	482b      	ldr	r0, [pc, #172]	; (800248c <initField+0x134>)
 80023de:	f002 fbd7 	bl	8004b90 <__M_Error>
 80023e2:	2300      	movs	r3, #0
 80023e4:	e046      	b.n	8002474 <initField+0x11c>
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61fb      	str	r3, [r7, #28]
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	891b      	ldrh	r3, [r3, #8]
 80023f0:	837b      	strh	r3, [r7, #26]

    M_Assert_BreakElseSaveCheck((fields_count > fieldNumber_readed), {
 80023f2:	8b7b      	ldrh	r3, [r7, #26]
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d228      	bcs.n	800244c <initField+0xf4>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	4413      	add	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	615a      	str	r2, [r3, #20]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002418:	761a      	strb	r2, [r3, #24]
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <initField+0xd2>
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3319      	adds	r3, #25
 8002424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <initField+0xe4>
 8002430:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002436:	4618      	mov	r0, r3
 8002438:	f001 fe56 	bl	80040e8 <cTypePointerInit>
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3301      	adds	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	2301      	movs	r3, #1
 800244a:	e013      	b.n	8002474 <initField+0x11c>
 800244c:	8b7b      	ldrh	r3, [r7, #26]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	429a      	cmp	r2, r3
 8002452:	bf34      	ite	cc
 8002454:	2301      	movcc	r3, #1
 8002456:	2300      	movcs	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	8b7b      	ldrh	r3, [r7, #26]
 800245e:	9302      	str	r3, [sp, #8]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <initField+0x138>)
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	23d8      	movs	r3, #216	; 0xd8
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <initField+0x128>)
 800246c:	4809      	ldr	r0, [pc, #36]	; (8002494 <initField+0x13c>)
 800246e:	f002 fb8f 	bl	8004b90 <__M_Error>
                                    ++fieldNumber_readed;
                                    (*fieldNumber) = fieldNumber_readed;
                                    return ENTITY_OK;
                                }, M_EMPTY, M_EMPTY, "initField: fieldNumber: &d,  is too long than allocated fields_count: %d", fieldNumber_readed, fields_count);

    return ENTITY_ERROR;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	0800d110 	.word	0x0800d110
 8002480:	0800ccb0 	.word	0x0800ccb0
 8002484:	0800d0d4 	.word	0x0800d0d4
 8002488:	0800d17c 	.word	0x0800d17c
 800248c:	0800d12c 	.word	0x0800d12c
 8002490:	0800d21c 	.word	0x0800d21c
 8002494:	0800d1d4 	.word	0x0800d1d4

08002498 <readEntitiesSizes>:
}

#endif /* USE_ENTITY_PING */

int readEntitiesSizes(u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: No allocated entities or invalid input");
 80024a4:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <readEntitiesSizes+0x120>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <readEntitiesSizes+0x20>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <readEntitiesSizes+0x20>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d116      	bne.n	80024e6 <readEntitiesSizes+0x4e>
 80024b8:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <readEntitiesSizes+0x120>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <readEntitiesSizes+0x34>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <readEntitiesSizes+0x34>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <readEntitiesSizes+0x38>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <readEntitiesSizes+0x3a>
 80024d0:	2300      	movs	r3, #0
 80024d2:	b2d9      	uxtb	r1, r3
 80024d4:	4b39      	ldr	r3, [pc, #228]	; (80025bc <readEntitiesSizes+0x124>)
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	231f      	movs	r3, #31
 80024da:	4a39      	ldr	r2, [pc, #228]	; (80025c0 <readEntitiesSizes+0x128>)
 80024dc:	4839      	ldr	r0, [pc, #228]	; (80025c4 <readEntitiesSizes+0x12c>)
 80024de:	f002 fb57 	bl	8004b90 <__M_Error>
 80024e2:	2300      	movs	r3, #0
 80024e4:	e064      	b.n	80025b0 <readEntitiesSizes+0x118>
    ENTITY_DBG_ASSERT_BUF(maxOutBufferSize < (8 + TYPE_ARRAY_LENGTH), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: sizes read more than buffer");
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b19      	cmp	r3, #25
 80024ea:	d80f      	bhi.n	800250c <readEntitiesSizes+0x74>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b19      	cmp	r3, #25
 80024f0:	bf94      	ite	ls
 80024f2:	2301      	movls	r3, #1
 80024f4:	2300      	movhi	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	4619      	mov	r1, r3
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <readEntitiesSizes+0x130>)
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2320      	movs	r3, #32
 8002500:	4a2f      	ldr	r2, [pc, #188]	; (80025c0 <readEntitiesSizes+0x128>)
 8002502:	4832      	ldr	r0, [pc, #200]	; (80025cc <readEntitiesSizes+0x134>)
 8002504:	f002 fb44 	bl	8004b90 <__M_Error>
 8002508:	2300      	movs	r3, #0
 800250a:	e051      	b.n	80025b0 <readEntitiesSizes+0x118>

    reg pos = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

    // main sizes -----------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_OK;                              // OK byte
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	617a      	str	r2, [r7, #20]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	617a      	str	r2, [r7, #20]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	2204      	movs	r2, #4
 800252a:	701a      	strb	r2, [r3, #0]

    // entities sizes -------------------------------------------------------------------------------------
    outputData[pos++] = ENTITIES_SIZEOF;                        // entities count sizeof
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	617a      	str	r2, [r7, #20]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]

    // fields sizes --------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_FIELD_SIZEOF;                    // fields count sizeof
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	617a      	str	r2, [r7, #20]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]

    outputData[pos++] = SIZEOF_STRUCT(EntityField, bitFlags);   // fields bitFlags sizeof
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	617a      	str	r2, [r7, #20]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	2204      	movs	r2, #4
 8002554:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = SIZEOF_STRUCT(EntityField, shift);      // fields shift sizeof
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	617a      	str	r2, [r7, #20]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	2204      	movs	r2, #4
 8002562:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = 1;                                      // fields type sizeof
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	617a      	str	r2, [r7, #20]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]

    // system types sizes --------------------------------------------------------------------------------
    outputData[pos++] = TYPE_ARRAY_LENGTH;                      // size array types
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	617a      	str	r2, [r7, #20]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	2212      	movs	r2, #18
 800257e:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e00d      	b.n	80025a2 <readEntitiesSizes+0x10a>
        outputData[pos++] = typeLengthMappingArray[i];          // copy array types
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <readEntitiesSizes+0x138>)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	617a      	str	r2, [r7, #20]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	b2ca      	uxtb	r2, r1
 800259a:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	3301      	adds	r3, #1
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b11      	cmp	r3, #17
 80025a6:	d9ee      	bls.n	8002586 <readEntitiesSizes+0xee>
    }

    (*size) = pos;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000290 	.word	0x20000290
 80025bc:	0800d8c4 	.word	0x0800d8c4
 80025c0:	0800d820 	.word	0x0800d820
 80025c4:	0800d854 	.word	0x0800d854
 80025c8:	0800d92c 	.word	0x0800d92c
 80025cc:	0800d900 	.word	0x0800d900
 80025d0:	0800ed98 	.word	0x0800ed98

080025d4 <readEntitiesDescriptions>:

int readEntitiesDescriptions(const TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber, TYPEOF_STRUCT(EntityInfo, entities_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[0].descr, ... entities[entities_count].descr}
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (2 + ENTITIES_SIZEOF)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesDescriptions: No allocated entities or invalid input");
 80025e2:	4b52      	ldr	r3, [pc, #328]	; (800272c <readEntitiesDescriptions+0x158>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <readEntitiesDescriptions+0x28>
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d905      	bls.n	80025fc <readEntitiesDescriptions+0x28>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <readEntitiesDescriptions+0x28>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d119      	bne.n	8002630 <readEntitiesDescriptions+0x5c>
 80025fc:	4b4b      	ldr	r3, [pc, #300]	; (800272c <readEntitiesDescriptions+0x158>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <readEntitiesDescriptions+0x42>
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	2b03      	cmp	r3, #3
 8002608:	d905      	bls.n	8002616 <readEntitiesDescriptions+0x42>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <readEntitiesDescriptions+0x42>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <readEntitiesDescriptions+0x46>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <readEntitiesDescriptions+0x48>
 800261a:	2300      	movs	r3, #0
 800261c:	b2d9      	uxtb	r1, r3
 800261e:	4b44      	ldr	r3, [pc, #272]	; (8002730 <readEntitiesDescriptions+0x15c>)
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	2340      	movs	r3, #64	; 0x40
 8002624:	4a43      	ldr	r2, [pc, #268]	; (8002734 <readEntitiesDescriptions+0x160>)
 8002626:	4844      	ldr	r0, [pc, #272]	; (8002738 <readEntitiesDescriptions+0x164>)
 8002628:	f002 fab2 	bl	8004b90 <__M_Error>
 800262c:	2300      	movs	r3, #0
 800262e:	e079      	b.n	8002724 <readEntitiesDescriptions+0x150>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002630:	4b3e      	ldr	r3, [pc, #248]	; (800272c <readEntitiesDescriptions+0x158>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	627b      	str	r3, [r7, #36]	; 0x24

    if(startEntityNumber < entities_count) {
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	429a      	cmp	r2, r3
 800263c:	d26a      	bcs.n	8002714 <readEntitiesDescriptions+0x140>
        reg pos = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c

        outputData[pos++] = ENTITY_OK;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	2204      	movs	r2, #4
 800265c:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(EntityInfo, entities_count) tmp = (entities_count - startEntityNumber);
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	623b      	str	r3, [r7, #32]
        len = MIN(tmp, len);
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	4293      	cmp	r3, r2
 800266c:	bf28      	it	cs
 800266e:	4613      	movcs	r3, r2
 8002670:	60bb      	str	r3, [r7, #8]
        //#else
        //        len &= 0xFFFFUL;
        //        ENTITY_BYTE_CPY(ENTITIES_SIZEOF, (u8*)&len, &outputData[pos]);
        //        pos += ENTITIES_SIZEOF;
        //#endif /* MAX_NUBER_OF_ENTITIES < 256 */
        outputData[pos++] = (u8)(len & 0xFFU); // support on old version (this is glitch!!!)
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
        //---------------------------================================----------------------------------==================================-----------------------------------================================---------------------------===========================---------------------------=========================------------------------
        len += startEntityNumber;
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	60bb      	str	r3, [r7, #8]

        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
 800268e:	e038      	b.n	8002702 <readEntitiesDescriptions+0x12e>

            ENTITY_DBG_ASSERT_BUF( (pos + ENTITY_DESCRIPTION_SIZE) > maxOutBufferSize, M_EMPTY, {
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	3304      	adds	r3, #4
 8002694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002696:	429a      	cmp	r2, r3
 8002698:	d210      	bcs.n	80026bc <readEntitiesDescriptions+0xe8>
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	3304      	adds	r3, #4
 800269e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026a0:	429a      	cmp	r2, r3
 80026a2:	bf34      	ite	cc
 80026a4:	2301      	movcc	r3, #1
 80026a6:	2300      	movcs	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <readEntitiesDescriptions+0x168>)
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	235a      	movs	r3, #90	; 0x5a
 80026b2:	4a20      	ldr	r2, [pc, #128]	; (8002734 <readEntitiesDescriptions+0x160>)
 80026b4:	4822      	ldr	r0, [pc, #136]	; (8002740 <readEntitiesDescriptions+0x16c>)
 80026b6:	f002 fa6b 	bl	8004b90 <__M_Error>
 80026ba:	e02c      	b.n	8002716 <readEntitiesDescriptions+0x142>
                                       goto error;
                                   }, "readEntitiesDescriptions: description read size more than buffer");


            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)entityInfo.entities[i]->descr, &outputData[pos]);
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <readEntitiesDescriptions+0x158>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1d1a      	adds	r2, r3, #4
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	440b      	add	r3, r1
 80026d0:	2104      	movs	r1, #4
 80026d2:	61f9      	str	r1, [r7, #28]
 80026d4:	61ba      	str	r2, [r7, #24]
 80026d6:	617b      	str	r3, [r7, #20]
    switch (n) {
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d104      	bne.n	80026e8 <readEntitiesDescriptions+0x114>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e005      	b.n	80026f4 <readEntitiesDescriptions+0x120>
    default: memcpy(to, from, n); break;
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	6978      	ldr	r0, [r7, #20]
 80026ee:	f005 fdf3 	bl	80082d8 <memcpy>
 80026f2:	bf00      	nop
}
 80026f4:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	3304      	adds	r3, #4
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	3301      	adds	r3, #1
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	d3c2      	bcc.n	8002690 <readEntitiesDescriptions+0xbc>
        }

        (*size) = pos;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270e:	601a      	str	r2, [r3, #0]
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002710:	2301      	movs	r3, #1
 8002712:	e007      	b.n	8002724 <readEntitiesDescriptions+0x150>
        goto error;
 8002714:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3730      	adds	r7, #48	; 0x30
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000290 	.word	0x20000290
 8002730:	0800d9fc 	.word	0x0800d9fc
 8002734:	0800d820 	.word	0x0800d820
 8002738:	0800d95c 	.word	0x0800d95c
 800273c:	0800da74 	.word	0x0800da74
 8002740:	0800da40 	.word	0x0800da40

08002744 <readEntityFields>:

int readEntityFields(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) startFieldNumber, TYPEOF_STRUCT(Entity, fields_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[entityNum].fields[startFieldNum], ... entities[num].fields[entities[num].fields_count]}
 8002744:	b580      	push	{r7, lr}
 8002746:	b096      	sub	sp, #88	; 0x58
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	817b      	strh	r3, [r7, #10]
 8002752:	4613      	mov	r3, r2
 8002754:	813b      	strh	r3, [r7, #8]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITY_FIELD_SIZEOF << 1))) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntityFields: No allocated entities or invalid input");
 8002756:	4b7f      	ldr	r3, [pc, #508]	; (8002954 <readEntityFields+0x210>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <readEntityFields+0x2c>
 800275e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002760:	2b02      	cmp	r3, #2
 8002762:	d905      	bls.n	8002770 <readEntityFields+0x2c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <readEntityFields+0x2c>
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	2b00      	cmp	r3, #0
 800276e:	d119      	bne.n	80027a4 <readEntityFields+0x60>
 8002770:	4b78      	ldr	r3, [pc, #480]	; (8002954 <readEntityFields+0x210>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <readEntityFields+0x46>
 8002778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277a:	2b02      	cmp	r3, #2
 800277c:	d905      	bls.n	800278a <readEntityFields+0x46>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <readEntityFields+0x46>
 8002784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <readEntityFields+0x4a>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <readEntityFields+0x4c>
 800278e:	2300      	movs	r3, #0
 8002790:	b2d9      	uxtb	r1, r3
 8002792:	4b71      	ldr	r3, [pc, #452]	; (8002958 <readEntityFields+0x214>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2376      	movs	r3, #118	; 0x76
 8002798:	4a70      	ldr	r2, [pc, #448]	; (800295c <readEntityFields+0x218>)
 800279a:	4871      	ldr	r0, [pc, #452]	; (8002960 <readEntityFields+0x21c>)
 800279c:	f002 f9f8 	bl	8004b90 <__M_Error>
 80027a0:	2300      	movs	r3, #0
 80027a2:	e0d3      	b.n	800294c <readEntityFields+0x208>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <readEntityFields+0x210>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	647b      	str	r3, [r7, #68]	; 0x44
    const Entity* const entity = entityInfo.entities[entityNumber];
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <readEntityFields+0x210>)
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40
    const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 80027b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ba:	891b      	ldrh	r3, [r3, #8]
 80027bc:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c2:	429a      	cmp	r2, r3
 80027c4:	f080 80ba 	bcs.w	800293c <readEntityFields+0x1f8>
 80027c8:	897a      	ldrh	r2, [r7, #10]
 80027ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f080 80b5 	bcs.w	800293c <readEntityFields+0x1f8>
        reg pos = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	64fb      	str	r3, [r7, #76]	; 0x4c

        outputData[pos++] = ENTITY_OK;
 80027d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]

#if (MAX_NUBER_OF_FIELDS < 256U)
        outputData[pos++] = (u8)(startFieldNumber & 0xFFU);                             /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 80027e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	897a      	ldrh	r2, [r7, #10]
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(Entity, fields_count) tmp = (fields_count - startFieldNumber);
 80027f4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80027f6:	897b      	ldrh	r3, [r7, #10]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
        len = MIN(tmp, len);
 80027fc:	893a      	ldrh	r2, [r7, #8]
 80027fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002800:	4293      	cmp	r3, r2
 8002802:	bf28      	it	cs
 8002804:	4613      	movcs	r3, r2
 8002806:	813b      	strh	r3, [r7, #8]
        outputData[pos++] = (u8)(len & 0xFFU);
 8002808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	893a      	ldrh	r2, [r7, #8]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
        ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, (u8*)&len, &outputData[pos]);
        pos += ENTITY_FIELD_SIZEOF;

#endif /* MAX_NUBER_OF_FIELDS < 256 */

        len += startFieldNumber;
 8002818:	893a      	ldrh	r2, [r7, #8]
 800281a:	897b      	ldrh	r3, [r7, #10]
 800281c:	4413      	add	r3, r2
 800281e:	813b      	strh	r3, [r7, #8]

        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002820:	897b      	ldrh	r3, [r7, #10]
 8002822:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002826:	e07d      	b.n	8002924 <readEntityFields+0x1e0>
            const EntityField* const field = &entity->fields[i];
 8002828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002830:	015b      	lsls	r3, r3, #5
 8002832:	4413      	add	r3, r2
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38

            ENTITY_DBG_ASSERT_BUF( ((pos + (sizeof(field->bitFlags) + sizeof(field->shift) + 1 + ENTITY_DESCRIPTION_SIZE)) > maxOutBufferSize), M_EMPTY, {
 8002836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002838:	330d      	adds	r3, #13
 800283a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800283c:	429a      	cmp	r2, r3
 800283e:	d210      	bcs.n	8002862 <readEntityFields+0x11e>
 8002840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002842:	330d      	adds	r3, #13
 8002844:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002846:	429a      	cmp	r2, r3
 8002848:	bf34      	ite	cc
 800284a:	2301      	movcc	r3, #1
 800284c:	2300      	movcs	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	4b44      	ldr	r3, [pc, #272]	; (8002964 <readEntityFields+0x220>)
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	239a      	movs	r3, #154	; 0x9a
 8002858:	4a40      	ldr	r2, [pc, #256]	; (800295c <readEntityFields+0x218>)
 800285a:	4843      	ldr	r0, [pc, #268]	; (8002968 <readEntityFields+0x224>)
 800285c:	f002 f998 	bl	8004b90 <__M_Error>
 8002860:	e06d      	b.n	800293e <readEntityFields+0x1fa>

            //            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
            //            pos += ENTITY_DESCRIPTION_SIZE;
            //-----------------=============================-----------------------------------===========================-----------------------------=================================-------------------------------===========================-------------------======================
            // this is glitch
            ENTITY_BYTE_CPY(1, (u8 *)&field->bitFlags, &outputData[pos]);
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	f103 0210 	add.w	r2, r3, #16
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	440b      	add	r3, r1
 800286e:	2101      	movs	r1, #1
 8002870:	61f9      	str	r1, [r7, #28]
 8002872:	61ba      	str	r2, [r7, #24]
 8002874:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d104      	bne.n	8002886 <readEntityFields+0x142>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e005      	b.n	8002892 <readEntityFields+0x14e>
    default: memcpy(to, from, n); break;
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	69b9      	ldr	r1, [r7, #24]
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f005 fd24 	bl	80082d8 <memcpy>
 8002890:	bf00      	nop
}
 8002892:	bf00      	nop
            pos += 1;
 8002894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002896:	3301      	adds	r3, #1
 8002898:	64fb      	str	r3, [r7, #76]	; 0x4c

            ENTITY_BYTE_CPY(2, (u8 *)&field->shift, &outputData[pos]);
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	f103 0214 	add.w	r2, r3, #20
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a4:	440b      	add	r3, r1
 80028a6:	2102      	movs	r1, #2
 80028a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80028aa:	627a      	str	r2, [r7, #36]	; 0x24
 80028ac:	623b      	str	r3, [r7, #32]
    switch (n) {
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d104      	bne.n	80028be <readEntityFields+0x17a>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e005      	b.n	80028ca <readEntityFields+0x186>
    default: memcpy(to, from, n); break;
 80028be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c2:	6a38      	ldr	r0, [r7, #32]
 80028c4:	f005 fd08 	bl	80082d8 <memcpy>
 80028c8:	bf00      	nop
}
 80028ca:	bf00      	nop
            pos += 2;
 80028cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ce:	3302      	adds	r3, #2
 80028d0:	64fb      	str	r3, [r7, #76]	; 0x4c

            outputData[pos++] = (field->type & 0xFFU);
 80028d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028de:	7e12      	ldrb	r2, [r2, #24]
 80028e0:	701a      	strb	r2, [r3, #0]

            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	f103 0219 	add.w	r2, r3, #25
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ec:	440b      	add	r3, r1
 80028ee:	2104      	movs	r1, #4
 80028f0:	6379      	str	r1, [r7, #52]	; 0x34
 80028f2:	633a      	str	r2, [r7, #48]	; 0x30
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d104      	bne.n	8002906 <readEntityFields+0x1c2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e005      	b.n	8002912 <readEntityFields+0x1ce>
    default: memcpy(to, from, n); break;
 8002906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800290a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800290c:	f005 fce4 	bl	80082d8 <memcpy>
 8002910:	bf00      	nop
}
 8002912:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002916:	3304      	adds	r3, #4
 8002918:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 800291a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800291e:	3301      	adds	r3, #1
 8002920:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002924:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	429a      	cmp	r2, r3
 800292c:	f4ff af7c 	bcc.w	8002828 <readEntityFields+0xe4>
            //------------------------------=========================================--------------------------------------===================================--------------------------------------=============================---------------------------------========================

        }

        (*size) = pos;
 8002930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002934:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002936:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002938:	2301      	movs	r3, #1
 800293a:	e007      	b.n	800294c <readEntityFields+0x208>
        goto error;
 800293c:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3750      	adds	r7, #80	; 0x50
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000290 	.word	0x20000290
 8002958:	0800db64 	.word	0x0800db64
 800295c:	0800d820 	.word	0x0800d820
 8002960:	0800dab8 	.word	0x0800dab8
 8002964:	0800dc0c 	.word	0x0800dc0c
 8002968:	0800dba0 	.word	0x0800dba0

0800296c <readFieldValue>:
/* ******************************************************************************************************************
 * READ one field value
 *
 */
int readFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{ //send {0x01 , prt + 0, ... , ptr + getTypeLen(entities[no].fields[fieldNo].type)}
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b0a3      	sub	sp, #140	; 0x8c
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	460b      	mov	r3, r1
 800297a:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 2) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readFieldValue: No allocated entities or invalid input");
 800297c:	4b8a      	ldr	r3, [pc, #552]	; (8002ba8 <readFieldValue+0x23c>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <readFieldValue+0x2c>
 8002984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002988:	2b01      	cmp	r3, #1
 800298a:	d905      	bls.n	8002998 <readFieldValue+0x2c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <readFieldValue+0x2c>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d11a      	bne.n	80029ce <readFieldValue+0x62>
 8002998:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <readFieldValue+0x23c>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <readFieldValue+0x48>
 80029a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d905      	bls.n	80029b4 <readFieldValue+0x48>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <readFieldValue+0x48>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <readFieldValue+0x4c>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <readFieldValue+0x4e>
 80029b8:	2300      	movs	r3, #0
 80029ba:	b2d9      	uxtb	r1, r3
 80029bc:	4b7b      	ldr	r3, [pc, #492]	; (8002bac <readFieldValue+0x240>)
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	23d0      	movs	r3, #208	; 0xd0
 80029c2:	4a7b      	ldr	r2, [pc, #492]	; (8002bb0 <readFieldValue+0x244>)
 80029c4:	487b      	ldr	r0, [pc, #492]	; (8002bb4 <readFieldValue+0x248>)
 80029c6:	f002 f8e3 	bl	8004b90 <__M_Error>
 80029ca:	2300      	movs	r3, #0
 80029cc:	e0e8      	b.n	8002ba0 <readFieldValue+0x234>

    Entity*         const       entity  = entityInfo.entities[entityNumber];
 80029ce:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <readFieldValue+0x23c>)
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	67fb      	str	r3, [r7, #124]	; 0x7c
    EntityField*    const       field   = &entity->fields[fieldNumber];
 80029dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	897b      	ldrh	r3, [r7, #10]
 80029e2:	015b      	lsls	r3, r3, #5
 80029e4:	4413      	add	r3, r2
 80029e6:	67bb      	str	r3, [r7, #120]	; 0x78

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 80029e8:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <readFieldValue+0x23c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	677b      	str	r3, [r7, #116]	; 0x74
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80029ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f0:	891b      	ldrh	r3, [r3, #8]
 80029f2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fa:	429a      	cmp	r2, r3
 80029fc:	f080 80c8 	bcs.w	8002b90 <readFieldValue+0x224>
 8002a00:	897a      	ldrh	r2, [r7, #10]
 8002a02:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002a06:	429a      	cmp	r2, r3
 8002a08:	f080 80c2 	bcs.w	8002b90 <readFieldValue+0x224>
        const u8        type    = field->type;
 8002a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a0e:	7e1b      	ldrb	r3, [r3, #24]
 8002a10:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        const reg       typeLen = getMYCTypeLen(type);
 8002a14:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8002a18:	65fb      	str	r3, [r7, #92]	; 0x5c
}


STATIC_FORCEINLINE reg getMYCTypeLen(reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1c:	2b11      	cmp	r3, #17
 8002a1e:	d804      	bhi.n	8002a2a <readFieldValue+0xbe>
        return typeLengthMappingArray[type];
 8002a20:	4a65      	ldr	r2, [pc, #404]	; (8002bb8 <readFieldValue+0x24c>)
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	e000      	b.n	8002a2c <readFieldValue+0xc0>
    }
    return 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
        void* const     ptr     = (entity->pointer + field->shift);
 8002a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	4413      	add	r3, r2
 8002a38:	66bb      	str	r3, [r7, #104]	; 0x68

        reg pos = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	667b      	str	r3, [r7, #100]	; 0x64

        outputData[pos++] = ENTITY_OK;
 8002a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	667a      	str	r2, [r7, #100]	; 0x64
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = type;    /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	667a      	str	r2, [r7, #100]	; 0x64
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8002a5a:	701a      	strb	r2, [r3, #0]

        ENTITY_DBG_ASSERT_BUF(((pos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8002a5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a60:	4413      	add	r3, r2
 8002a62:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d212      	bcs.n	8002a90 <readFieldValue+0x124>
 8002a6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6e:	4413      	add	r3, r2
 8002a70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a74:	429a      	cmp	r2, r3
 8002a76:	bf34      	ite	cc
 8002a78:	2301      	movcc	r3, #1
 8002a7a:	2300      	movcs	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <readFieldValue+0x250>)
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	23e2      	movs	r3, #226	; 0xe2
 8002a86:	4a4a      	ldr	r2, [pc, #296]	; (8002bb0 <readFieldValue+0x244>)
 8002a88:	484d      	ldr	r0, [pc, #308]	; (8002bc0 <readFieldValue+0x254>)
 8002a8a:	f002 f881 	bl	8004b90 <__M_Error>
 8002a8e:	e080      	b.n	8002b92 <readFieldValue+0x226>
                                  goto error;
                              }, "readFieldValue: field read size more than buffer");

        proceedReadEntity(field->bitFlags, ptr, &outputData[pos], typeLen);
 8002a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a98:	440b      	add	r3, r1
 8002a9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a9e:	657a      	str	r2, [r7, #84]	; 0x54
 8002aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8002aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    if((bitFlags) & (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK)) {
 8002aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa8:	f003 0318 	and.w	r3, r3, #24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <readFieldValue+0x166>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
                                        if(reg_ptr_from) {
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d04f      	beq.n	8002b60 <readFieldValue+0x1f4>
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    MY_CTYPE_REG_CPY(to, from);
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ace:	601a      	str	r2, [r3, #0]
}
 8002ad0:	e046      	b.n	8002b60 <readFieldValue+0x1f4>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8002ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00c      	beq.n	8002af6 <readFieldValue+0x18a>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    MY_CTYPE_REG_CPY(to, from);
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	e034      	b.n	8002b60 <readFieldValue+0x1f4>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8002af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01a      	beq.n	8002b36 <readFieldValue+0x1ca>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 8002b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
                                        if(reg_ptr_from) {
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d029      	beq.n	8002b60 <readFieldValue+0x1f4>
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b16:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d104      	bne.n	8002b28 <readFieldValue+0x1bc>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e005      	b.n	8002b34 <readFieldValue+0x1c8>
    default: memcpy(to, from, n); break;
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	6a39      	ldr	r1, [r7, #32]
 8002b2c:	69f8      	ldr	r0, [r7, #28]
 8002b2e:	f005 fbd3 	bl	80082d8 <memcpy>
 8002b32:	bf00      	nop
}
 8002b34:	e014      	b.n	8002b60 <readFieldValue+0x1f4>
 8002b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	613b      	str	r3, [r7, #16]
    switch (n) {
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d104      	bne.n	8002b52 <readFieldValue+0x1e6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e005      	b.n	8002b5e <readFieldValue+0x1f2>
    default: memcpy(to, from, n); break;
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	6979      	ldr	r1, [r7, #20]
 8002b56:	6938      	ldr	r0, [r7, #16]
 8002b58:	f005 fbbe 	bl	80082d8 <memcpy>
 8002b5c:	bf00      	nop
}
 8002b5e:	bf00      	nop
}
 8002b60:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8002b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	663b      	str	r3, [r7, #96]	; 0x60
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8002b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <readFieldValue+0x210>
            __entityCallback(entity, field, ptr, field->rdCallback.context);
 8002b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8002b74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b76:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b78:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002b7a:	47a0      	blx	r4
        }
#endif /* USE_ENTITY_READ_CALLBACK */

        pos += typeLen;
 8002b7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b80:	4413      	add	r3, r2
 8002b82:	667b      	str	r3, [r7, #100]	; 0x64
        (*size) = pos;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b88:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002b8a:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <readFieldValue+0x234>
        goto error;
 8002b90:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3784      	adds	r7, #132	; 0x84
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd90      	pop	{r4, r7, pc}
 8002ba8:	20000290 	.word	0x20000290
 8002bac:	0800dccc 	.word	0x0800dccc
 8002bb0:	0800d820 	.word	0x0800d820
 8002bb4:	0800dc40 	.word	0x0800dc40
 8002bb8:	0800ed98 	.word	0x0800ed98
 8002bbc:	0800dd2c 	.word	0x0800dd2c
 8002bc0:	0800dd04 	.word	0x0800dd04

08002bc4 <readSeveralFieldsValues>:
 * READ several fields values
 *
 */

int readSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b0b7      	sub	sp, #220	; 0xdc
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readSeveralFieldsValues: No allocated entities or invalid input");
 8002bd2:	4ba9      	ldr	r3, [pc, #676]	; (8002e78 <readSeveralFieldsValues+0x2b4>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <readSeveralFieldsValues+0x2e>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d908      	bls.n	8002bf2 <readSeveralFieldsValues+0x2e>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <readSeveralFieldsValues+0x2e>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <readSeveralFieldsValues+0x2e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11d      	bne.n	8002c2e <readSeveralFieldsValues+0x6a>
 8002bf2:	4ba1      	ldr	r3, [pc, #644]	; (8002e78 <readSeveralFieldsValues+0x2b4>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <readSeveralFieldsValues+0x4e>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d908      	bls.n	8002c12 <readSeveralFieldsValues+0x4e>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <readSeveralFieldsValues+0x4e>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <readSeveralFieldsValues+0x4e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <readSeveralFieldsValues+0x52>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <readSeveralFieldsValues+0x54>
 8002c16:	2300      	movs	r3, #0
 8002c18:	b2d9      	uxtb	r1, r3
 8002c1a:	4b98      	ldr	r3, [pc, #608]	; (8002e7c <readSeveralFieldsValues+0x2b8>)
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002c22:	4a97      	ldr	r2, [pc, #604]	; (8002e80 <readSeveralFieldsValues+0x2bc>)
 8002c24:	4897      	ldr	r0, [pc, #604]	; (8002e84 <readSeveralFieldsValues+0x2c0>)
 8002c26:	f001 ffb3 	bl	8004b90 <__M_Error>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e1c0      	b.n	8002fb0 <readSeveralFieldsValues+0x3ec>

    const reg inputMsgSize = (*size);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Wpos = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Rpos = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002c40:	4b8d      	ldr	r3, [pc, #564]	; (8002e78 <readSeveralFieldsValues+0x2b4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8002c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	4413      	add	r3, r2
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 8002c5a:	e14e      	b.n	8002efa <readSeveralFieldsValues+0x336>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    reg Rpos_internal = (*Rpos);
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8002c68:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c70:	4413      	add	r3, r2
 8002c72:	f107 0218 	add.w	r2, r7, #24
 8002c76:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    switch (n) {
 8002c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <readSeveralFieldsValues+0xe6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e008      	b.n	8002cbc <readSeveralFieldsValues+0xf8>
    default: memcpy(to, from, n); break;
 8002caa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002cae:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002cb2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002cb6:	f005 fb0f 	bl	80082d8 <memcpy>
 8002cba:	bf00      	nop
}
 8002cbc:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8002cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8002cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8002cd8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f107 0216 	add.w	r2, r7, #22
 8002ce6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    (*fieldNumber) = *(inputData);
 8002cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfa:	801a      	strh	r2, [r3, #0]
}
 8002cfc:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8002cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d02:	3301      	adds	r3, #1
 8002d04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*Rpos) = Rpos_internal;
 8002d08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d0c:	61fb      	str	r3, [r7, #28]
}
 8002d0e:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 8002d10:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <readSeveralFieldsValues+0x2b4>)
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 8002d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	8afb      	ldrh	r3, [r7, #22]
 8002d28:	015b      	lsls	r3, r3, #5
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 8002d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d34:	891b      	ldrh	r3, [r3, #8]
 8002d36:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d40:	429a      	cmp	r2, r3
 8002d42:	f240 80e7 	bls.w	8002f14 <readSeveralFieldsValues+0x350>
 8002d46:	8afb      	ldrh	r3, [r7, #22]
 8002d48:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f240 80e1 	bls.w	8002f14 <readSeveralFieldsValues+0x350>

            const reg typeLen = getMYCTypeLen(field->type);
 8002d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d56:	7e1b      	ldrb	r3, [r3, #24]
 8002d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if(type < TYPE_ARRAY_LENGTH) {
 8002d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d60:	2b11      	cmp	r3, #17
 8002d62:	d805      	bhi.n	8002d70 <readSeveralFieldsValues+0x1ac>
        return typeLengthMappingArray[type];
 8002d64:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <readSeveralFieldsValues+0x2c4>)
 8002d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	e000      	b.n	8002d72 <readSeveralFieldsValues+0x1ae>
    return 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8002d76:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d7e:	4413      	add	r3, r2
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d214      	bcs.n	8002db0 <readSeveralFieldsValues+0x1ec>
 8002d86:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002d8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d8e:	4413      	add	r3, r2
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	bf34      	ite	cc
 8002d96:	2301      	movcc	r3, #1
 8002d98:	2300      	movcs	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <readSeveralFieldsValues+0x2c8>)
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	f240 1321 	movw	r3, #289	; 0x121
 8002da6:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <readSeveralFieldsValues+0x2bc>)
 8002da8:	4839      	ldr	r0, [pc, #228]	; (8002e90 <readSeveralFieldsValues+0x2cc>)
 8002daa:	f001 fef1 	bl	8004b90 <__M_Error>
 8002dae:	e0b2      	b.n	8002f16 <readSeveralFieldsValues+0x352>
                                      goto error;
                                  }, "readSeveralFieldsValues: field size more than buffer");

            ptr = (entity->pointer + field->shift);
 8002db0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 8002dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dce:	440b      	add	r3, r1
 8002dd0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dd8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002dda:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002de0:	677b      	str	r3, [r7, #116]	; 0x74
                                    if((bitFlags) & (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK)) {
 8002de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002de6:	f003 0318 	and.w	r3, r3, #24
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <readSeveralFieldsValues+0x24c>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8002dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	673b      	str	r3, [r7, #112]	; 0x70
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 8002df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df6:	66fb      	str	r3, [r7, #108]	; 0x6c
                                        if(reg_ptr_from) {
 8002df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d05f      	beq.n	8002ebe <readSeveralFieldsValues+0x2fa>
 8002dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e00:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	667b      	str	r3, [r7, #100]	; 0x64
    MY_CTYPE_REG_CPY(to, from);
 8002e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e0c:	601a      	str	r2, [r3, #0]
}
 8002e0e:	e056      	b.n	8002ebe <readSeveralFieldsValues+0x2fa>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8002e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00c      	beq.n	8002e36 <readSeveralFieldsValues+0x272>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8002e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e1e:	663b      	str	r3, [r7, #96]	; 0x60
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8002e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e26:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2a:	657b      	str	r3, [r7, #84]	; 0x54
    MY_CTYPE_REG_CPY(to, from);
 8002e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	e043      	b.n	8002ebe <readSeveralFieldsValues+0x2fa>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8002e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d028      	beq.n	8002e94 <readSeveralFieldsValues+0x2d0>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 8002e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	653b      	str	r3, [r7, #80]	; 0x50
                                        if(reg_ptr_from) {
 8002e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d037      	beq.n	8002ebe <readSeveralFieldsValues+0x2fa>
 8002e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d104      	bne.n	8002e6a <readSeveralFieldsValues+0x2a6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e005      	b.n	8002e76 <readSeveralFieldsValues+0x2b2>
    default: memcpy(to, from, n); break;
 8002e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e70:	f005 fa32 	bl	80082d8 <memcpy>
 8002e74:	bf00      	nop
}
 8002e76:	e022      	b.n	8002ebe <readSeveralFieldsValues+0x2fa>
 8002e78:	20000290 	.word	0x20000290
 8002e7c:	0800de30 	.word	0x0800de30
 8002e80:	0800d820 	.word	0x0800d820
 8002e84:	0800dd60 	.word	0x0800dd60
 8002e88:	0800ed98 	.word	0x0800ed98
 8002e8c:	0800de98 	.word	0x0800de98
 8002e90:	0800de70 	.word	0x0800de70
 8002e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e96:	643b      	str	r3, [r7, #64]	; 0x40
 8002e98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 8002ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d104      	bne.n	8002eb0 <readSeveralFieldsValues+0x2ec>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e005      	b.n	8002ebc <readSeveralFieldsValues+0x2f8>
    default: memcpy(to, from, n); break;
 8002eb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eb6:	f005 fa0f 	bl	80082d8 <memcpy>
 8002eba:	bf00      	nop
}
 8002ebc:	bf00      	nop
}
 8002ebe:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
            const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8002ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8002eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <readSeveralFieldsValues+0x326>
                __entityCallback(entity, field, ptr, field->rdCallback.context);
 8002ed2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002edc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ee0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002ee4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002ee8:	47a0      	blx	r4
            }
#endif /* USE_ENTITY_READ_CALLBACK */

            Wpos += typeLen;
 8002eea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002ef8:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3302      	adds	r3, #2
 8002efe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f63f aeaa 	bhi.w	8002c5c <readSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002f0e:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e04d      	b.n	8002fb0 <readSeveralFieldsValues+0x3ec>
            goto error;
 8002f14:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    outputData[Wpos++] = ENTITY_ERROR;
 8002f1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	4413      	add	r3, r2
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f34:	4413      	add	r3, r2
 8002f36:	2202      	movs	r2, #2
 8002f38:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3c:	f107 0318 	add.w	r3, r7, #24
 8002f40:	623b      	str	r3, [r7, #32]
    switch (n) {
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d104      	bne.n	8002f52 <readSeveralFieldsValues+0x38e>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e005      	b.n	8002f5e <readSeveralFieldsValues+0x39a>
    default: memcpy(to, from, n); break;
 8002f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f56:	6a38      	ldr	r0, [r7, #32]
 8002f58:	f005 f9be 	bl	80082d8 <memcpy>
 8002f5c:	bf00      	nop
}
 8002f5e:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 8002f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f64:	3302      	adds	r3, #2
 8002f66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f70:	4413      	add	r3, r2
 8002f72:	2201      	movs	r2, #1
 8002f74:	637a      	str	r2, [r7, #52]	; 0x34
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
 8002f78:	f107 0316 	add.w	r3, r7, #22
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d104      	bne.n	8002f8e <readSeveralFieldsValues+0x3ca>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	781a      	ldrb	r2, [r3, #0]
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	e005      	b.n	8002f9a <readSeveralFieldsValues+0x3d6>
    default: memcpy(to, from, n); break;
 8002f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f94:	f005 f9a0 	bl	80082d8 <memcpy>
 8002f98:	bf00      	nop
}
 8002f9a:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 8002f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    (*size) = Wpos;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002fac:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	37d4      	adds	r7, #212	; 0xd4
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd90      	pop	{r4, r7, pc}

08002fb8 <setFieldValue>:
/* ******************************************************************************************************************
 * WRITE one field value
 *
 */
int setFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const inputData, const reg inputBufferSize)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b0a3      	sub	sp, #140	; 0x8c
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (inputData == NULL) || (inputBufferSize == 0)), M_EMPTY, return ENTITY_ERROR, "setFieldValue: No allocated entities or invalid input");
 8002fc8:	4b75      	ldr	r3, [pc, #468]	; (80031a0 <setFieldValue+0x1e8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <setFieldValue+0x24>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <setFieldValue+0x24>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d117      	bne.n	800300c <setFieldValue+0x54>
 8002fdc:	4b70      	ldr	r3, [pc, #448]	; (80031a0 <setFieldValue+0x1e8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <setFieldValue+0x38>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <setFieldValue+0x38>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <setFieldValue+0x3c>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <setFieldValue+0x3e>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	b2d9      	uxtb	r1, r3
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <setFieldValue+0x1ec>)
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f44f 73a9 	mov.w	r3, #338	; 0x152
 8003000:	4a69      	ldr	r2, [pc, #420]	; (80031a8 <setFieldValue+0x1f0>)
 8003002:	486a      	ldr	r0, [pc, #424]	; (80031ac <setFieldValue+0x1f4>)
 8003004:	f001 fdc4 	bl	8004b90 <__M_Error>
 8003008:	2300      	movs	r3, #0
 800300a:	e0c4      	b.n	8003196 <setFieldValue+0x1de>

    Entity* const entity = entityInfo.entities[entityNumber];
 800300c:	4b64      	ldr	r3, [pc, #400]	; (80031a0 <setFieldValue+0x1e8>)
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	67fb      	str	r3, [r7, #124]	; 0x7c
    EntityField* const field = &entity->fields[fieldNumber];
 800301a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	015b      	lsls	r3, r3, #5
 8003022:	4413      	add	r3, r2
 8003024:	67bb      	str	r3, [r7, #120]	; 0x78

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8003026:	4b5e      	ldr	r3, [pc, #376]	; (80031a0 <setFieldValue+0x1e8>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	677b      	str	r3, [r7, #116]	; 0x74
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 800302c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800302e:	891b      	ldrh	r3, [r3, #8]
 8003030:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	66fb      	str	r3, [r7, #108]	; 0x6c

    if((entityNumber < entities_count) && (fieldNumber < fields_count) && ((bitFlags & ENTITY_READ_ONLY_MSK) == 0)) {
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303e:	429a      	cmp	r2, r3
 8003040:	f080 80a8 	bcs.w	8003194 <setFieldValue+0x1dc>
 8003044:	897a      	ldrh	r2, [r7, #10]
 8003046:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800304a:	429a      	cmp	r2, r3
 800304c:	f080 80a2 	bcs.w	8003194 <setFieldValue+0x1dc>
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 809c 	bne.w	8003194 <setFieldValue+0x1dc>
        void* const ptr = (entity->pointer + field->shift);
 800305c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	4413      	add	r3, r2
 8003066:	66bb      	str	r3, [r7, #104]	; 0x68
        const reg typeLen = getMYCTypeLen(field->type);
 8003068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306a:	7e1b      	ldrb	r3, [r3, #24]
 800306c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if(type < TYPE_ARRAY_LENGTH) {
 800306e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003070:	2b11      	cmp	r3, #17
 8003072:	d804      	bhi.n	800307e <setFieldValue+0xc6>
        return typeLengthMappingArray[type];
 8003074:	4a4e      	ldr	r2, [pc, #312]	; (80031b0 <setFieldValue+0x1f8>)
 8003076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	e000      	b.n	8003080 <setFieldValue+0xc8>
    return 0;
 800307e:	2300      	movs	r3, #0
 8003080:	667b      	str	r3, [r7, #100]	; 0x64

        ENTITY_DBG_ASSERT_BUF((typeLen > inputBufferSize), M_EMPTY, {
 8003082:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d911      	bls.n	80030ae <setFieldValue+0xf6>
 800308a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	bf8c      	ite	hi
 8003092:	2301      	movhi	r3, #1
 8003094:	2300      	movls	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <setFieldValue+0x1fc>)
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f240 135f 	movw	r3, #351	; 0x15f
 80030a2:	4a41      	ldr	r2, [pc, #260]	; (80031a8 <setFieldValue+0x1f0>)
 80030a4:	4844      	ldr	r0, [pc, #272]	; (80031b8 <setFieldValue+0x200>)
 80030a6:	f001 fd73 	bl	8004b90 <__M_Error>
 80030aa:	2300      	movs	r3, #0
 80030ac:	e073      	b.n	8003196 <setFieldValue+0x1de>
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80030b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b4:	657b      	str	r3, [r7, #84]	; 0x54
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	653b      	str	r3, [r7, #80]	; 0x50
 80030ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030bc:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    if((bitFlags) & (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK)) {
 80030be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c0:	f003 0318 	and.w	r3, r3, #24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <setFieldValue+0x132>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 80030c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	64bb      	str	r3, [r7, #72]	; 0x48
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 80030ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d0:	647b      	str	r3, [r7, #68]	; 0x44
                                        if(reg_ptr_to) {
 80030d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d04f      	beq.n	8003178 <setFieldValue+0x1c0>
 80030d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030da:	643b      	str	r3, [r7, #64]	; 0x40
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
    MY_CTYPE_REG_CPY(to, from);
 80030e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e6:	601a      	str	r2, [r3, #0]
}
 80030e8:	e046      	b.n	8003178 <setFieldValue+0x1c0>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80030ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00c      	beq.n	800310e <setFieldValue+0x156>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 80030f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 80030f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
    MY_CTYPE_REG_CPY(to, from);
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	e034      	b.n	8003178 <setFieldValue+0x1c0>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 800310e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01a      	beq.n	800314e <setFieldValue+0x196>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
                                        if(reg_ptr_to) {
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d029      	beq.n	8003178 <setFieldValue+0x1c0>
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	2b01      	cmp	r3, #1
 8003134:	d104      	bne.n	8003140 <setFieldValue+0x188>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e005      	b.n	800314c <setFieldValue+0x194>
    default: memcpy(to, from, n); break;
 8003140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003142:	6a39      	ldr	r1, [r7, #32]
 8003144:	69f8      	ldr	r0, [r7, #28]
 8003146:	f005 f8c7 	bl	80082d8 <memcpy>
 800314a:	bf00      	nop
}
 800314c:	e014      	b.n	8003178 <setFieldValue+0x1c0>
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003158:	613b      	str	r3, [r7, #16]
    switch (n) {
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d104      	bne.n	800316a <setFieldValue+0x1b2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e005      	b.n	8003176 <setFieldValue+0x1be>
    default: memcpy(to, from, n); break;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	6938      	ldr	r0, [r7, #16]
 8003170:	f005 f8b2 	bl	80082d8 <memcpy>
 8003174:	bf00      	nop
}
 8003176:	bf00      	nop
}
 8003178:	bf00      	nop

        proceedWriteEntity(bitFlags, ptr, inputData, typeLen);


#ifdef USE_ENTITY_WRITE_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 800317a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	663b      	str	r3, [r7, #96]	; 0x60
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <setFieldValue+0x1dc>
            __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800318c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800318e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003190:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003192:	47a0      	blx	r4
#endif /* USE_ENTITY_WRITE_CALLBACK */

    }

    UNUSED(inputBufferSize);
    return ENTITY_OK;
 8003194:	2301      	movs	r3, #1
}
 8003196:	4618      	mov	r0, r3
 8003198:	3784      	adds	r7, #132	; 0x84
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000290 	.word	0x20000290
 80031a4:	0800df48 	.word	0x0800df48
 80031a8:	0800d820 	.word	0x0800d820
 80031ac:	0800ded0 	.word	0x0800ded0
 80031b0:	0800ed98 	.word	0x0800ed98
 80031b4:	0800df9c 	.word	0x0800df9c
 80031b8:	0800df80 	.word	0x0800df80

080031bc <setSeveralFieldsValues>:
/* ******************************************************************************************************************
 * WRITE several fields values
 *
 */
int setSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b0b7      	sub	sp, #220	; 0xdc
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "setSeveralFieldsValues: No allocated entities or invalid input");
 80031ca:	4bac      	ldr	r3, [pc, #688]	; (800347c <setSeveralFieldsValues+0x2c0>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <setSeveralFieldsValues+0x2e>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d908      	bls.n	80031ea <setSeveralFieldsValues+0x2e>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <setSeveralFieldsValues+0x2e>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <setSeveralFieldsValues+0x2e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11d      	bne.n	8003226 <setSeveralFieldsValues+0x6a>
 80031ea:	4ba4      	ldr	r3, [pc, #656]	; (800347c <setSeveralFieldsValues+0x2c0>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <setSeveralFieldsValues+0x4e>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d908      	bls.n	800320a <setSeveralFieldsValues+0x4e>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <setSeveralFieldsValues+0x4e>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <setSeveralFieldsValues+0x4e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <setSeveralFieldsValues+0x52>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <setSeveralFieldsValues+0x54>
 800320e:	2300      	movs	r3, #0
 8003210:	b2d9      	uxtb	r1, r3
 8003212:	4b9b      	ldr	r3, [pc, #620]	; (8003480 <setSeveralFieldsValues+0x2c4>)
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	f240 137b 	movw	r3, #379	; 0x17b
 800321a:	4a9a      	ldr	r2, [pc, #616]	; (8003484 <setSeveralFieldsValues+0x2c8>)
 800321c:	489a      	ldr	r0, [pc, #616]	; (8003488 <setSeveralFieldsValues+0x2cc>)
 800321e:	f001 fcb7 	bl	8004b90 <__M_Error>
 8003222:	2300      	movs	r3, #0
 8003224:	e1c4      	b.n	80035b0 <setSeveralFieldsValues+0x3f4>

    const reg inputMsgSize = (*size);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Wpos = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Rpos = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003238:	4b90      	ldr	r3, [pc, #576]	; (800347c <setSeveralFieldsValues+0x2c0>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8003240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8003252:	e152      	b.n	80034fa <setSeveralFieldsValues+0x33e>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    reg Rpos_internal = (*Rpos);
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8003260:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003264:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003268:	4413      	add	r3, r2
 800326a:	f107 0214 	add.w	r2, r7, #20
 800326e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003272:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003276:	2302      	movs	r3, #2
 8003278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800327c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003288:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 800328c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003290:	2b01      	cmp	r3, #1
 8003292:	d106      	bne.n	80032a2 <setSeveralFieldsValues+0xe6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e008      	b.n	80032b4 <setSeveralFieldsValues+0xf8>
    default: memcpy(to, from, n); break;
 80032a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032aa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80032ae:	f005 f813 	bl	80082d8 <memcpy>
 80032b2:	bf00      	nop
}
 80032b4:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 80032b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 80032c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ca:	3302      	adds	r3, #2
 80032cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 80032d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80032d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032d8:	4413      	add	r3, r2
 80032da:	f107 0212 	add.w	r2, r7, #18
 80032de:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80032e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    (*fieldNumber) = *(inputData);
 80032e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032f2:	801a      	strh	r2, [r3, #0]
}
 80032f4:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80032f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032fa:	3301      	adds	r3, #1
 80032fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    (*Rpos) = Rpos_internal;
 8003300:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003304:	61bb      	str	r3, [r7, #24]
}
 8003306:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 8003308:	4b5c      	ldr	r3, [pc, #368]	; (800347c <setSeveralFieldsValues+0x2c0>)
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 8003318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	8a7b      	ldrh	r3, [r7, #18]
 8003320:	015b      	lsls	r3, r3, #5
 8003322:	4413      	add	r3, r2
 8003324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003328:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800332c:	891b      	ldrh	r3, [r3, #8]
 800332e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003342:	429a      	cmp	r2, r3
 8003344:	f240 80e6 	bls.w	8003514 <setSeveralFieldsValues+0x358>
 8003348:	8a7b      	ldrh	r3, [r7, #18]
 800334a:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800334e:	429a      	cmp	r2, r3
 8003350:	f240 80e0 	bls.w	8003514 <setSeveralFieldsValues+0x358>
            const reg typeLen = getMYCTypeLen(field->type);
 8003354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003358:	7e1b      	ldrb	r3, [r3, #24]
 800335a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if(type < TYPE_ARRAY_LENGTH) {
 800335e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003362:	2b11      	cmp	r3, #17
 8003364:	d805      	bhi.n	8003372 <setSeveralFieldsValues+0x1b6>
        return typeLengthMappingArray[type];
 8003366:	4a49      	ldr	r2, [pc, #292]	; (800348c <setSeveralFieldsValues+0x2d0>)
 8003368:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	e000      	b.n	8003374 <setSeveralFieldsValues+0x1b8>
    return 0;
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, {
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800337e:	4413      	add	r3, r2
 8003380:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003384:	429a      	cmp	r2, r3
 8003386:	d214      	bcs.n	80033b2 <setSeveralFieldsValues+0x1f6>
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800338e:	4413      	add	r3, r2
 8003390:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003394:	429a      	cmp	r2, r3
 8003396:	bf34      	ite	cc
 8003398:	2301      	movcc	r3, #1
 800339a:	2300      	movcs	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4619      	mov	r1, r3
 80033a0:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <setSeveralFieldsValues+0x2d4>)
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80033a8:	4a36      	ldr	r2, [pc, #216]	; (8003484 <setSeveralFieldsValues+0x2c8>)
 80033aa:	483a      	ldr	r0, [pc, #232]	; (8003494 <setSeveralFieldsValues+0x2d8>)
 80033ac:	f001 fbf0 	bl	8004b90 <__M_Error>
 80033b0:	e0b1      	b.n	8003516 <setSeveralFieldsValues+0x35a>
                                      goto error;
                                  }, "setSeveralFieldsValues: field read size more than buffer");


            if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 80033b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 8097 	bne.w	80034ee <setSeveralFieldsValues+0x332>

                ptr = (entity->pointer + field->shift);
 80033c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	4413      	add	r3, r2
 80033ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033dc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033e2:	67ba      	str	r2, [r7, #120]	; 0x78
 80033e4:	677b      	str	r3, [r7, #116]	; 0x74
 80033e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033ea:	673b      	str	r3, [r7, #112]	; 0x70
                                    if((bitFlags) & (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK)) {
 80033ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033ee:	f003 0318 	and.w	r3, r3, #24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <setSeveralFieldsValues+0x25c>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 80033f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	66fb      	str	r3, [r7, #108]	; 0x6c
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 80033fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fe:	66bb      	str	r3, [r7, #104]	; 0x68
                                        if(reg_ptr_to) {
 8003400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d05d      	beq.n	80034c2 <setSeveralFieldsValues+0x306>
 8003406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003408:	667b      	str	r3, [r7, #100]	; 0x64
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	663b      	str	r3, [r7, #96]	; 0x60
    MY_CTYPE_REG_CPY(to, from);
 800340e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003414:	601a      	str	r2, [r3, #0]
}
 8003416:	e054      	b.n	80034c2 <setSeveralFieldsValues+0x306>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <setSeveralFieldsValues+0x280>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 8003422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003424:	65fb      	str	r3, [r7, #92]	; 0x5c
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 8003426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003428:	65bb      	str	r3, [r7, #88]	; 0x58
 800342a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342c:	657b      	str	r3, [r7, #84]	; 0x54
 800342e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003430:	653b      	str	r3, [r7, #80]	; 0x50
    MY_CTYPE_REG_CPY(to, from);
 8003432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003438:	601a      	str	r2, [r3, #0]
}
 800343a:	e042      	b.n	80034c2 <setSeveralFieldsValues+0x306>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 800343c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <setSeveralFieldsValues+0x2dc>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
                                        if(reg_ptr_to) {
 800344c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d037      	beq.n	80034c2 <setSeveralFieldsValues+0x306>
 8003452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
 8003456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003458:	647b      	str	r3, [r7, #68]	; 0x44
 800345a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345c:	643b      	str	r3, [r7, #64]	; 0x40
    switch (n) {
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003460:	2b01      	cmp	r3, #1
 8003462:	d104      	bne.n	800346e <setSeveralFieldsValues+0x2b2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346a:	701a      	strb	r2, [r3, #0]
 800346c:	e005      	b.n	800347a <setSeveralFieldsValues+0x2be>
    default: memcpy(to, from, n); break;
 800346e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003472:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003474:	f004 ff30 	bl	80082d8 <memcpy>
 8003478:	bf00      	nop
}
 800347a:	e022      	b.n	80034c2 <setSeveralFieldsValues+0x306>
 800347c:	20000290 	.word	0x20000290
 8003480:	0800dfc8 	.word	0x0800dfc8
 8003484:	0800d820 	.word	0x0800d820
 8003488:	0800dd60 	.word	0x0800dd60
 800348c:	0800ed98 	.word	0x0800ed98
 8003490:	0800e02c 	.word	0x0800e02c
 8003494:	0800e008 	.word	0x0800e008
 8003498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
    switch (n) {
 80034a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d104      	bne.n	80034b4 <setSeveralFieldsValues+0x2f8>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e005      	b.n	80034c0 <setSeveralFieldsValues+0x304>
    default: memcpy(to, from, n); break;
 80034b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034ba:	f004 ff0d 	bl	80082d8 <memcpy>
 80034be:	bf00      	nop
}
 80034c0:	bf00      	nop
}
 80034c2:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 80034c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80034ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <setSeveralFieldsValues+0x332>
                    __entityCallback(entity, field, ptr, field->wrCallback.context);
 80034d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80034e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034e4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80034e8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80034ec:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_WRITE_CALLBACK */

            }

            Rpos += typeLen;
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034f4:	4413      	add	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80034f8:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	3303      	adds	r3, #3
 80034fe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003502:	429a      	cmp	r2, r3
 8003504:	f63f aea6 	bhi.w	8003254 <setSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800350e:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003510:	2301      	movs	r3, #1
 8003512:	e04d      	b.n	80035b0 <setSeveralFieldsValues+0x3f4>
            goto error;
 8003514:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    outputData[Wpos++] = ENTITY_ERROR;
 800351c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003534:	4413      	add	r3, r2
 8003536:	2202      	movs	r2, #2
 8003538:	627a      	str	r2, [r7, #36]	; 0x24
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	2b01      	cmp	r3, #1
 8003546:	d104      	bne.n	8003552 <setSeveralFieldsValues+0x396>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e005      	b.n	800355e <setSeveralFieldsValues+0x3a2>
    default: memcpy(to, from, n); break;
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	6a39      	ldr	r1, [r7, #32]
 8003556:	69f8      	ldr	r0, [r7, #28]
 8003558:	f004 febe 	bl	80082d8 <memcpy>
 800355c:	bf00      	nop
}
 800355e:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 8003560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003564:	3302      	adds	r3, #2
 8003566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003570:	4413      	add	r3, r2
 8003572:	2201      	movs	r2, #1
 8003574:	633a      	str	r2, [r7, #48]	; 0x30
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003578:	f107 0312 	add.w	r3, r7, #18
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	2b01      	cmp	r3, #1
 8003582:	d104      	bne.n	800358e <setSeveralFieldsValues+0x3d2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	781a      	ldrb	r2, [r3, #0]
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e005      	b.n	800359a <setSeveralFieldsValues+0x3de>
    default: memcpy(to, from, n); break;
 800358e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003594:	f004 fea0 	bl	80082d8 <memcpy>
 8003598:	bf00      	nop
}
 800359a:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 800359c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035a0:	3301      	adds	r3, #1
 80035a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    (*size) = Wpos;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035ac:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	37d4      	adds	r7, #212	; 0xd4
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd90      	pop	{r4, r7, pc}

080035b8 <proceedGluedValues>:
/* ******************************************************************************************************************
 * GLUED functions fields values
 *
 */
int proceedGluedValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b0d9      	sub	sp, #356	; 0x164
 80035bc:	af02      	add	r7, sp, #8
 80035be:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 80035c2:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 80035c6:	6020      	str	r0, [r4, #0]
 80035c8:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80035cc:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 80035d0:	6001      	str	r1, [r0, #0]
 80035d2:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80035d6:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 80035da:	600a      	str	r2, [r1, #0]
 80035dc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80035e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035e4:	6013      	str	r3, [r2, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 3) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: No allocated entities or invalid input");
 80035e6:	4bc6      	ldr	r3, [pc, #792]	; (8003900 <proceedGluedValues+0x348>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01b      	beq.n	8003626 <proceedGluedValues+0x6e>
 80035ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035f2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d914      	bls.n	8003626 <proceedGluedValues+0x6e>
 80035fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003600:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <proceedGluedValues+0x6e>
 800360a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800360e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d006      	beq.n	8003626 <proceedGluedValues+0x6e>
 8003618:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800361c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d12e      	bne.n	8003684 <proceedGluedValues+0xcc>
 8003626:	4bb6      	ldr	r3, [pc, #728]	; (8003900 <proceedGluedValues+0x348>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01b      	beq.n	8003666 <proceedGluedValues+0xae>
 800362e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003632:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d914      	bls.n	8003666 <proceedGluedValues+0xae>
 800363c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003640:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <proceedGluedValues+0xae>
 800364a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800364e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <proceedGluedValues+0xae>
 8003658:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800365c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <proceedGluedValues+0xb2>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <proceedGluedValues+0xb4>
 800366a:	2300      	movs	r3, #0
 800366c:	b2d9      	uxtb	r1, r3
 800366e:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <proceedGluedValues+0x34c>)
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	f240 13c9 	movw	r3, #457	; 0x1c9
 8003676:	4aa4      	ldr	r2, [pc, #656]	; (8003908 <proceedGluedValues+0x350>)
 8003678:	48a4      	ldr	r0, [pc, #656]	; (800390c <proceedGluedValues+0x354>)
 800367a:	f001 fa89 	bl	8004b90 <__M_Error>
 800367e:	2300      	movs	r3, #0
 8003680:	f000 bd2d 	b.w	80040de <proceedGluedValues+0xb26>

    const reg inputMsgSize = (*size);
 8003684:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003688:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    reg Wpos = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    reg Rpos = 0;
 800369a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800369e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80036a6:	4b96      	ldr	r3, [pc, #600]	; (8003900 <proceedGluedValues+0x348>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    u8 cmd = inputData[Rpos++];
 80036ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80036b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	1c59      	adds	r1, r3, #1
 80036ba:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80036be:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80036c2:	6011      	str	r1, [r2, #0]
 80036c4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80036c8:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

    if(cmd == WRITE_SEVERAL_VALUES_GLUED) {
 80036d6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80036da:	2b07      	cmp	r3, #7
 80036dc:	f040 8247 	bne.w	8003b6e <proceedGluedValues+0x5b6>
        const u8 writeRequestCnt = inputData[Rpos++];
 80036e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80036e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	1c59      	adds	r1, r3, #1
 80036ec:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80036f0:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80036f4:	6011      	str	r1, [r2, #0]
 80036f6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80036fa:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	4413      	add	r3, r2
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800370e:	e1ea      	b.n	8003ae6 <proceedGluedValues+0x52e>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize),
 8003710:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003714:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3303      	adds	r3, #3
 800371c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003720:	429a      	cmp	r2, r3
 8003722:	d218      	bcs.n	8003756 <proceedGluedValues+0x19e>
 8003724:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003728:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3303      	adds	r3, #3
 8003730:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003734:	429a      	cmp	r2, r3
 8003736:	bf34      	ite	cc
 8003738:	2301      	movcc	r3, #1
 800373a:	2300      	movcs	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	4b73      	ldr	r3, [pc, #460]	; (8003910 <proceedGluedValues+0x358>)
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003748:	4a6f      	ldr	r2, [pc, #444]	; (8003908 <proceedGluedValues+0x350>)
 800374a:	4872      	ldr	r0, [pc, #456]	; (8003914 <proceedGluedValues+0x35c>)
 800374c:	f001 fa20 	bl	8004b90 <__M_Error>
 8003750:	2300      	movs	r3, #0
 8003752:	f000 bcc4 	b.w	80040de <proceedGluedValues+0xb26>
 8003756:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800375a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    reg Rpos_internal = (*Rpos);
 8003764:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003768:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8003772:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003776:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800377a:	4413      	add	r3, r2
 800377c:	f107 0218 	add.w	r2, r7, #24
 8003780:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003788:	2302      	movs	r3, #2
 800378a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800378e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003792:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    switch (n) {
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d106      	bne.n	80037b4 <proceedGluedValues+0x1fc>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80037a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	e008      	b.n	80037c6 <proceedGluedValues+0x20e>
    default: memcpy(to, from, n); break;
 80037b4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80037b8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80037bc:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80037c0:	f004 fd8a 	bl	80082d8 <memcpy>
 80037c4:	bf00      	nop
}
 80037c6:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 80037c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 80037d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037dc:	3302      	adds	r3, #2
 80037de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 80037e2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80037e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037ea:	4413      	add	r3, r2
 80037ec:	f107 0216 	add.w	r2, r7, #22
 80037f0:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80037f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    (*fieldNumber) = *(inputData);
 80037f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003804:	801a      	strh	r2, [r3, #0]
}
 8003806:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003808:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800380c:	3301      	adds	r3, #1
 800380e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    (*Rpos) = Rpos_internal;
 8003812:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003816:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800381a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800381e:	601a      	str	r2, [r3, #0]
}
 8003820:	bf00      	nop
                                  M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <proceedGluedValues+0x348>)
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800382a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            EntityField* const field = &entity->fields[fieldNumber];
 800383a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003844:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	015b      	lsls	r3, r3, #5
 800384c:	4413      	add	r3, r2
 800384e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003852:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003856:	891b      	ldrh	r3, [r3, #8]
 8003858:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 800385c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003866:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800386a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003874:	429a      	cmp	r2, r3
 8003876:	f240 8131 	bls.w	8003adc <proceedGluedValues+0x524>
 800387a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800387e:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8003888:	429a      	cmp	r2, r3
 800388a:	f240 8127 	bls.w	8003adc <proceedGluedValues+0x524>
                const reg typeLen = getMYCTypeLen(field->type);
 800388e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003892:	7e1b      	ldrb	r3, [r3, #24]
 8003894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(type < TYPE_ARRAY_LENGTH) {
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389c:	2b11      	cmp	r3, #17
 800389e:	d805      	bhi.n	80038ac <proceedGluedValues+0x2f4>
        return typeLengthMappingArray[type];
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <proceedGluedValues+0x360>)
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038aa:	e000      	b.n	80038ae <proceedGluedValues+0x2f6>
    return 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 80038b2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80038b6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038c0:	4413      	add	r3, r2
 80038c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d22c      	bcs.n	8003924 <proceedGluedValues+0x36c>
 80038ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80038ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038d8:	4413      	add	r3, r2
 80038da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038de:	429a      	cmp	r2, r3
 80038e0:	bf34      	ite	cc
 80038e2:	2301      	movcc	r3, #1
 80038e4:	2300      	movcs	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4619      	mov	r1, r3
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <proceedGluedValues+0x364>)
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 80038f2:	4a05      	ldr	r2, [pc, #20]	; (8003908 <proceedGluedValues+0x350>)
 80038f4:	480a      	ldr	r0, [pc, #40]	; (8003920 <proceedGluedValues+0x368>)
 80038f6:	f001 f94b 	bl	8004b90 <__M_Error>
 80038fa:	2300      	movs	r3, #0
 80038fc:	e3ef      	b.n	80040de <proceedGluedValues+0xb26>
 80038fe:	bf00      	nop
 8003900:	20000290 	.word	0x20000290
 8003904:	0800e10c 	.word	0x0800e10c
 8003908:	0800d820 	.word	0x0800d820
 800390c:	0800e068 	.word	0x0800e068
 8003910:	0800e18c 	.word	0x0800e18c
 8003914:	0800e148 	.word	0x0800e148
 8003918:	0800ed98 	.word	0x0800ed98
 800391c:	0800e1c8 	.word	0x0800e1c8
 8003920:	0800e008 	.word	0x0800e008

                if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8003924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 80c8 	bne.w	8003ac2 <proceedGluedValues+0x50a>

                    ptr = (entity->pointer + field->shift);
 8003932:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4413      	add	r3, r2
 8003940:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 8003944:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003948:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003952:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	4413      	add	r3, r2
 800395a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800395e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003962:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003966:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800396a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800396e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003972:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                    if((bitFlags) & (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK)) {
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800397a:	f003 0318 	and.w	r3, r3, #24
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01b      	beq.n	80039ba <proceedGluedValues+0x402>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 8003982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 800398c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003990:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                                        if(reg_ptr_to) {
 8003994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003998:	2b00      	cmp	r3, #0
 800399a:	d07c      	beq.n	8003a96 <proceedGluedValues+0x4de>
 800399c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    MY_CTYPE_REG_CPY(to, from);
 80039ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039b6:	601a      	str	r2, [r3, #0]
}
 80039b8:	e06d      	b.n	8003a96 <proceedGluedValues+0x4de>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80039ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <proceedGluedValues+0x43c>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 80039c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 80039ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    MY_CTYPE_REG_CPY(to, from);
 80039e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039f0:	601a      	str	r2, [r3, #0]
}
 80039f2:	e050      	b.n	8003a96 <proceedGluedValues+0x4de>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80039f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d029      	beq.n	8003a54 <proceedGluedValues+0x49c>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                                        if(reg_ptr_to) {
 8003a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d041      	beq.n	8003a96 <proceedGluedValues+0x4de>
 8003a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    switch (n) {
 8003a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d106      	bne.n	8003a40 <proceedGluedValues+0x488>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	e008      	b.n	8003a52 <proceedGluedValues+0x49a>
    default: memcpy(to, from, n); break;
 8003a40:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a44:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a48:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003a4c:	f004 fc44 	bl	80082d8 <memcpy>
 8003a50:	bf00      	nop
}
 8003a52:	e020      	b.n	8003a96 <proceedGluedValues+0x4de>
 8003a54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    switch (n) {
 8003a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d106      	bne.n	8003a82 <proceedGluedValues+0x4ca>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e008      	b.n	8003a94 <proceedGluedValues+0x4dc>
    default: memcpy(to, from, n); break;
 8003a82:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003a86:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003a8a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003a8e:	f004 fc23 	bl	80082d8 <memcpy>
 8003a92:	bf00      	nop
}
 8003a94:	bf00      	nop
}
 8003a96:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                    const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003a98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003aa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <proceedGluedValues+0x50a>
                        __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003aaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8003ab4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003ab8:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8003abc:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003ac0:	47a0      	blx	r4
                    }
#endif /* USE_ENTITY_WRITE_CALLBACK */

                }

                Rpos += typeLen;
 8003ac2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ac6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ad0:	441a      	add	r2, r3
 8003ad2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ad6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ada:	601a      	str	r2, [r3, #0]
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8003adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003ae6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003aea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003aee:	429a      	cmp	r2, r3
 8003af0:	f4ff ae0e 	bcc.w	8003710 <proceedGluedValues+0x158>
            }
        }

        ENTITY_DBG_ASSERT_BUF(((Rpos + 1) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003af4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003af8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d217      	bcs.n	8003b38 <proceedGluedValues+0x580>
 8003b08:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3301      	adds	r3, #1
 8003b14:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	bf34      	ite	cc
 8003b1c:	2301      	movcc	r3, #1
 8003b1e:	2300      	movcs	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4619      	mov	r1, r3
 8003b24:	4bc0      	ldr	r3, [pc, #768]	; (8003e28 <proceedGluedValues+0x870>)
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	f240 13fb 	movw	r3, #507	; 0x1fb
 8003b2c:	4abf      	ldr	r2, [pc, #764]	; (8003e2c <proceedGluedValues+0x874>)
 8003b2e:	48c0      	ldr	r0, [pc, #768]	; (8003e30 <proceedGluedValues+0x878>)
 8003b30:	f001 f82e 	bl	8004b90 <__M_Error>
 8003b34:	2300      	movs	r3, #0
 8003b36:	e2d2      	b.n	80040de <proceedGluedValues+0xb26>
        cmd = inputData[Rpos];
 8003b38:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003b46:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        if(cmd == SEVERAL_VALUES_GLUED_END) {
 8003b54:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003b58:	2b09      	cmp	r3, #9
 8003b5a:	d108      	bne.n	8003b6e <proceedGluedValues+0x5b6>
            (*size) = 0;
 8003b5c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b60:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
            return ENTITY_OK;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e2b7      	b.n	80040de <proceedGluedValues+0xb26>
        }
    }

    if(cmd == READ_SEVERAL_VALUES_GLUED) {
 8003b6e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	f040 82aa 	bne.w	80040cc <proceedGluedValues+0xb14>
        ENTITY_DBG_ASSERT_BUF(((Rpos + 2) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003b78:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3302      	adds	r3, #2
 8003b84:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d217      	bcs.n	8003bbc <proceedGluedValues+0x604>
 8003b8c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3302      	adds	r3, #2
 8003b98:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	bf34      	ite	cc
 8003ba0:	2301      	movcc	r3, #1
 8003ba2:	2300      	movcs	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4b9f      	ldr	r3, [pc, #636]	; (8003e28 <proceedGluedValues+0x870>)
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	f240 2305 	movw	r3, #517	; 0x205
 8003bb0:	4a9e      	ldr	r2, [pc, #632]	; (8003e2c <proceedGluedValues+0x874>)
 8003bb2:	48a0      	ldr	r0, [pc, #640]	; (8003e34 <proceedGluedValues+0x87c>)
 8003bb4:	f000 ffec 	bl	8004b90 <__M_Error>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e290      	b.n	80040de <proceedGluedValues+0xb26>

        const u8 readRequestCnt = inputData[Rpos++];
 8003bbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003bc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	1c59      	adds	r1, r3, #1
 8003bc8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003bcc:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003bd6:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        outputData[Wpos++] = READ_SEVERAL_VALUES_GLUED;
 8003be4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003bee:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003bf2:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = readRequestCnt;
 8003bfe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003c08:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c0c:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	4413      	add	r3, r2
 8003c14:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8003c18:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = inputData[Rpos++];
 8003c1a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1c59      	adds	r1, r3, #1
 8003c26:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c2a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003c2e:	6011      	str	r1, [r2, #0]
 8003c30:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c34:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c40:	1c59      	adds	r1, r3, #1
 8003c42:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8003c46:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8003c4a:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8003c4e:	6809      	ldr	r1, [r1, #0]
 8003c50:	440b      	add	r3, r1
 8003c52:	7812      	ldrb	r2, [r2, #0]
 8003c54:	701a      	strb	r2, [r3, #0]

        for(reg i = 0; i < readRequestCnt; ++i) {
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003c5c:	e22f      	b.n	80040be <proceedGluedValues+0xb06>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field request size more than buffer");
 8003c5e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d217      	bcs.n	8003ca2 <proceedGluedValues+0x6ea>
 8003c72:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3303      	adds	r3, #3
 8003c7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf34      	ite	cc
 8003c86:	2301      	movcc	r3, #1
 8003c88:	2300      	movcs	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <proceedGluedValues+0x880>)
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	f240 230d 	movw	r3, #525	; 0x20d
 8003c96:	4a65      	ldr	r2, [pc, #404]	; (8003e2c <proceedGluedValues+0x874>)
 8003c98:	4868      	ldr	r0, [pc, #416]	; (8003e3c <proceedGluedValues+0x884>)
 8003c9a:	f000 ff79 	bl	8004b90 <__M_Error>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e21d      	b.n	80040de <proceedGluedValues+0xb26>
 8003ca2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ca6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    reg Rpos_internal = (*Rpos);
 8003cb0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003cb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8003cbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f107 0218 	add.w	r2, r7, #24
 8003ccc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce4:	67bb      	str	r3, [r7, #120]	; 0x78
    switch (n) {
 8003ce6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d104      	bne.n	8003cf8 <proceedGluedValues+0x740>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e006      	b.n	8003d06 <proceedGluedValues+0x74e>
    default: memcpy(to, from, n); break;
 8003cf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cfe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003d00:	f004 faea 	bl	80082d8 <memcpy>
 8003d04:	bf00      	nop
}
 8003d06:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8003d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d14:	601a      	str	r2, [r3, #0]
}
 8003d16:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8003d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8003d22:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f107 0216 	add.w	r2, r7, #22
 8003d30:	677a      	str	r2, [r7, #116]	; 0x74
 8003d32:	673b      	str	r3, [r7, #112]	; 0x70
    (*fieldNumber) = *(inputData);
 8003d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d3c:	801a      	strh	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d44:	3301      	adds	r3, #1
 8003d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    (*Rpos) = Rpos_internal;
 8003d4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d4e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d52:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003d56:	601a      	str	r2, [r3, #0]
}
 8003d58:	bf00      	nop

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <proceedGluedValues+0x888>)
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d62:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            EntityField* const field = &entity->fields[fieldNumber];
 8003d72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d7c:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	015b      	lsls	r3, r3, #5
 8003d84:	4413      	add	r3, r2
 8003d86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003d8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d8e:	891b      	ldrh	r3, [r3, #8]
 8003d90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003d94:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003da2:	429a      	cmp	r2, r3
 8003da4:	f240 8184 	bls.w	80040b0 <proceedGluedValues+0xaf8>
 8003da8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003dac:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8003db6:	429a      	cmp	r2, r3
 8003db8:	f240 817a 	bls.w	80040b0 <proceedGluedValues+0xaf8>
                const reg typeLen = getMYCTypeLen(field->type);
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc0:	7e1b      	ldrb	r3, [r3, #24]
 8003dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if(type < TYPE_ARRAY_LENGTH) {
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	2b11      	cmp	r3, #17
 8003dc8:	d804      	bhi.n	8003dd4 <proceedGluedValues+0x81c>
        return typeLengthMappingArray[type];
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <proceedGluedValues+0x88c>)
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd2:	e000      	b.n	8003dd6 <proceedGluedValues+0x81e>
    return 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

                ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");
 8003dda:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de2:	4413      	add	r3, r2
 8003de4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003de8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d22e      	bcs.n	8003e50 <proceedGluedValues+0x898>
 8003df2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003e00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf34      	ite	cc
 8003e0a:	2301      	movcc	r3, #1
 8003e0c:	2300      	movcs	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <proceedGluedValues+0x890>)
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <proceedGluedValues+0x874>)
 8003e1c:	480b      	ldr	r0, [pc, #44]	; (8003e4c <proceedGluedValues+0x894>)
 8003e1e:	f000 feb7 	bl	8004b90 <__M_Error>
 8003e22:	2300      	movs	r3, #0
 8003e24:	e15b      	b.n	80040de <proceedGluedValues+0xb26>
 8003e26:	bf00      	nop
 8003e28:	0800e1c8 	.word	0x0800e1c8
 8003e2c:	0800d820 	.word	0x0800d820
 8003e30:	0800e200 	.word	0x0800e200
 8003e34:	0800e21c 	.word	0x0800e21c
 8003e38:	0800e238 	.word	0x0800e238
 8003e3c:	0800e148 	.word	0x0800e148
 8003e40:	20000290 	.word	0x20000290
 8003e44:	0800ed98 	.word	0x0800ed98
 8003e48:	0800e18c 	.word	0x0800e18c
 8003e4c:	0800de70 	.word	0x0800de70

                ptr = (entity->pointer + field->shift);
 8003e50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003e6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003e76:	440b      	add	r3, r1
 8003e78:	66ba      	str	r2, [r7, #104]	; 0x68
 8003e7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003e7e:	667a      	str	r2, [r7, #100]	; 0x64
 8003e80:	663b      	str	r3, [r7, #96]	; 0x60
 8003e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e86:	65fb      	str	r3, [r7, #92]	; 0x5c
                                    if((bitFlags) & (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK)) {
 8003e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8a:	f003 0318 	and.w	r3, r3, #24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d035      	beq.n	8003efe <proceedGluedValues+0x946>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8003e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003e9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e9e:	601a      	str	r2, [r3, #0]
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 8003ea0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ea8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eaa:	601a      	str	r2, [r3, #0]
                                        if(reg_ptr_from) {
 8003eac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003eb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80dc 	beq.w	8004074 <proceedGluedValues+0xabc>
 8003ebc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ec4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003ec8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ed4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ed8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003edc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	601a      	str	r2, [r3, #0]
    MY_CTYPE_REG_CPY(to, from);
 8003ee4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ef4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	601a      	str	r2, [r3, #0]
}
 8003efc:	e0ba      	b.n	8004074 <proceedGluedValues+0xabc>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d02c      	beq.n	8003f62 <proceedGluedValues+0x9aa>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8003f08:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f12:	601a      	str	r2, [r3, #0]
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8003f14:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f18:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003f28:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003f2c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f3c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003f40:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	601a      	str	r2, [r3, #0]
    MY_CTYPE_REG_CPY(to, from);
 8003f48:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	601a      	str	r2, [r3, #0]
}
 8003f60:	e088      	b.n	8004074 <proceedGluedValues+0xabc>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d04a      	beq.n	8004002 <proceedGluedValues+0xa4a>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 8003f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f78:	601a      	str	r2, [r3, #0]
                                        if(reg_ptr_from) {
 8003f7a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d075      	beq.n	8004074 <proceedGluedValues+0xabc>
 8003f88:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f9c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003fa0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fb2:	601a      	str	r2, [r3, #0]
    switch (n) {
 8003fb4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003fb8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d10c      	bne.n	8003fdc <proceedGluedValues+0xa24>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003fc2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003fc6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e011      	b.n	8004000 <proceedGluedValues+0xa48>
    default: memcpy(to, from, n); break;
 8003fdc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003fe0:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8003fe4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003fe8:	f5a3 7194 	sub.w	r1, r3, #296	; 0x128
 8003fec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ff0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	6809      	ldr	r1, [r1, #0]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	f004 f96d 	bl	80082d8 <memcpy>
 8003ffe:	bf00      	nop
}
 8004000:	e038      	b.n	8004074 <proceedGluedValues+0xabc>
 8004002:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800400a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004012:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800401e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004022:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004024:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004026:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800402a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10c      	bne.n	800404e <proceedGluedValues+0xa96>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8004034:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004038:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004044:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e011      	b.n	8004072 <proceedGluedValues+0xaba>
    default: memcpy(to, from, n); break;
 800404e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004052:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8004056:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800405a:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 800405e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004062:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	6809      	ldr	r1, [r1, #0]
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	f004 f934 	bl	80082d8 <memcpy>
 8004070:	bf00      	nop
}
 8004072:	bf00      	nop
}
 8004074:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8004080:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <proceedGluedValues+0xae8>
                    __entityCallback(entity, field, ptr, field->rdCallback.context);
 8004088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8004092:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004096:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800409a:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800409e:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_READ_CALLBACK */

                Wpos += typeLen;
 80040a0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80040a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a8:	4413      	add	r3, r2
 80040aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80040ae:	e001      	b.n	80040b4 <proceedGluedValues+0xafc>
            } else {
                return ENTITY_ERROR;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e014      	b.n	80040de <proceedGluedValues+0xb26>
        for(reg i = 0; i < readRequestCnt; ++i) {
 80040b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80040b8:	3301      	adds	r3, #1
 80040ba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80040be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040c6:	429a      	cmp	r2, r3
 80040c8:	f4ff adc9 	bcc.w	8003c5e <proceedGluedValues+0x6a6>
            }
        }
    }

    (*size) = Wpos;
 80040cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040d0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80040da:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 80040dc:	2301      	movs	r3, #1
}
 80040de:	4618      	mov	r0, r3
 80040e0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd90      	pop	{r4, r7, pc}

080040e8 <cTypePointerInit>:
    MY_CTYPE_USER_DATA_REVCPY(len, from, to);
}

// init data type ---------------------------------------
void cTypePointerInit(reg type, u8* ptr)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60bb      	str	r3, [r7, #8]
}


STATIC_FORCEINLINE reg getMYCTypeLen(reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b11      	cmp	r3, #17
 80040fa:	d804      	bhi.n	8004106 <cTypePointerInit+0x1e>
        return typeLengthMappingArray[type];
 80040fc:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <cTypePointerInit+0x48>)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004104:	e000      	b.n	8004108 <cTypePointerInit+0x20>
    }
    return 0;
 8004106:	2300      	movs	r3, #0
    reg len = getMYCTypeLen(type);
 8004108:	60fb      	str	r3, [r7, #12]

    while(len--) {
 800410a:	e004      	b.n	8004116 <cTypePointerInit+0x2e>
        *ptr++ = 0;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	603a      	str	r2, [r7, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
    while(len--) {
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e5a      	subs	r2, r3, #1
 800411a:	60fa      	str	r2, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f5      	bne.n	800410c <cTypePointerInit+0x24>
    }
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	0800ed98 	.word	0x0800ed98

08004134 <pointerInit>:

// init data sizeof ---------------------------------------
void pointerInit(reg n, u8* ptr)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
    while(n--) {
 800413e:	e004      	b.n	800414a <pointerInit+0x16>
        *ptr++ = 0;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	603a      	str	r2, [r7, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
    while(n--) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f5      	bne.n	8004140 <pointerInit+0xc>
    }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <rawParser_dma_init>:
    }
    return self;
}

int rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af02      	add	r7, sp, #8
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: No input data valid ");
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10f      	bne.n	8004196 <rawParser_dma_init+0x32>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	4619      	mov	r1, r3
 8004184:	4b23      	ldr	r3, [pc, #140]	; (8004214 <rawParser_dma_init+0xb0>)
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2348      	movs	r3, #72	; 0x48
 800418a:	4a23      	ldr	r2, [pc, #140]	; (8004218 <rawParser_dma_init+0xb4>)
 800418c:	4823      	ldr	r0, [pc, #140]	; (800421c <rawParser_dma_init+0xb8>)
 800418e:	f000 fcff 	bl	8004b90 <__M_Error>
 8004192:	2300      	movs	r3, #0
 8004194:	e03a      	b.n	800420c <rawParser_dma_init+0xa8>

    self->m_startByte = packStart;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	701a      	strb	r2, [r3, #0]
    self->m_receivePackLen = 0;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
    self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	22ff      	movs	r2, #255	; 0xff
 80041ae:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

    self->m_triggerSB = 0;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
    self->m_receivePos = 0;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    self->m_receiveReadPos = 0;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    self->m_receiveHandlePos = 0;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    self->TX.data = self->m_sendBuffer;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#else
    self->TX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    self->TX.size = 0;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
    self->RX.data = self->m_receiveFrameBuffer;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 7202 	add.w	r2, r3, #520	; 0x208
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
#else
    self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

    self->RX.size = 0;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

    self->uniRXPosition = 0;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return D_RAW_P_OK;
 800420a:	2301      	movs	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	0800e2fc 	.word	0x0800e2fc
 8004218:	0800e270 	.word	0x0800e270
 800421c:	0800e2ac 	.word	0x0800e2ac

08004220 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af04      	add	r7, sp, #16
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
 800422c:	4613      	mov	r3, r2
 800422e:	70bb      	strb	r3, [r7, #2]
    if (newFrame) {
 8004230:	78bb      	ldrb	r3, [r7, #2]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	22ff      	movs	r2, #255	; 0xff
 800423a:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

        self->m_receiveHandlePos = 0;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
    }

    switch(self->receiveState) {
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 8004254:	2b0d      	cmp	r3, #13
 8004256:	f200 80d1 	bhi.w	80043fc <RawParser_dma_proceedByte+0x1dc>
 800425a:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <RawParser_dma_proceedByte+0x40>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	08004299 	.word	0x08004299
 8004264:	080043fd 	.word	0x080043fd
 8004268:	080043fd 	.word	0x080043fd
 800426c:	08004327 	.word	0x08004327
 8004270:	08004379 	.word	0x08004379
 8004274:	080043fd 	.word	0x080043fd
 8004278:	080043fd 	.word	0x080043fd
 800427c:	080043fd 	.word	0x080043fd
 8004280:	080043fd 	.word	0x080043fd
 8004284:	080043fd 	.word	0x080043fd
 8004288:	080043fd 	.word	0x080043fd
 800428c:	080043fd 	.word	0x080043fd
 8004290:	080043c1 	.word	0x080043c1
 8004294:	080043e5 	.word	0x080043e5

    case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd fc1a 	bl	8001adc <fast_crc8_maxim_byte>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        if(RECEIVE_EXTENDED_LEN_CMD == ch) {
            self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
        } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

            const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d902      	bls.n	80042c2 <RawParser_dma_proceedByte+0xa2>
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	3b01      	subs	r3, #1
 80042c0:	e000      	b.n	80042c4 <RawParser_dma_proceedByte+0xa4>
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6053      	str	r3, [r2, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	60bb      	str	r3, [r7, #8]
            self->m_receiveHandlePos = 0;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

            M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d803      	bhi.n	80042ee <RawParser_dma_proceedByte+0xce>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f040 8089 	bne.w	8004400 <RawParser_dma_proceedByte+0x1e0>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f4:	d802      	bhi.n	80042fc <RawParser_dma_proceedByte+0xdc>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <RawParser_dma_proceedByte+0xe0>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <RawParser_dma_proceedByte+0xe2>
 8004300:	2300      	movs	r3, #0
 8004302:	b2d9      	uxtb	r1, r3
 8004304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	4b3f      	ldr	r3, [pc, #252]	; (800440c <RawParser_dma_proceedByte+0x1ec>)
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	23cb      	movs	r3, #203	; 0xcb
 8004314:	4a3e      	ldr	r2, [pc, #248]	; (8004410 <RawParser_dma_proceedByte+0x1f0>)
 8004316:	483f      	ldr	r0, [pc, #252]	; (8004414 <RawParser_dma_proceedByte+0x1f4>)
 8004318:	f000 fc58 	bl	8004bcc <__M_Warning>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	220c      	movs	r2, #12
 8004320:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
        }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        break;}
 8004324:	e06c      	b.n	8004400 <RawParser_dma_proceedByte+0x1e0>

        break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    case RAW_P_DMA_RECEIVE_DATA: {
        reg rx_pos = self->m_receiveHandlePos;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 800432c:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f7fd fbcf 	bl	8001adc <fast_crc8_maxim_byte>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
#endif /* D_RAW_P_CRC_ENA */

        self->RX.data[rx_pos] = ch;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 2624 	ldr.w	r2, [r3, #1572]	; 0x624
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	701a      	strb	r2, [r3, #0]
        ++rx_pos;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3301      	adds	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]

        if (rx_pos == self->m_receivePackLen) {
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	429a      	cmp	r2, r3
 8004364:	d103      	bne.n	800436e <RawParser_dma_proceedByte+0x14e>

#ifdef D_RAW_P_CRC_ENA
            D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
            self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2204      	movs	r2, #4
 800436a:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
            self->RX.size = self->m_receivePackLen;
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
        }

        self->m_receiveHandlePos = rx_pos;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        break;}
 8004376:	e044      	b.n	8004402 <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

        if(self->m_receiveCalcCRC == ch) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	429a      	cmp	r2, r3
 8004382:	d109      	bne.n	8004398 <RawParser_dma_proceedByte+0x178>
            self->RX.size = self->m_receivePackLen;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	220d      	movs	r2, #13
 8004392:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
        self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

        break;}
 8004396:	e034      	b.n	8004402 <RawParser_dma_proceedByte+0x1e2>
            M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive CRC8 error, rx_crc: %d, calc_crc: %d", ch, self->m_receiveCalcCRC);
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	f892 2608 	ldrb.w	r2, [r2, #1544]	; 0x608
 80043a0:	9202      	str	r2, [sp, #8]
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <RawParser_dma_proceedByte+0x1f8>)
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	f240 1321 	movw	r3, #289	; 0x121
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <RawParser_dma_proceedByte+0x1f0>)
 80043ae:	2101      	movs	r1, #1
 80043b0:	481a      	ldr	r0, [pc, #104]	; (800441c <RawParser_dma_proceedByte+0x1fc>)
 80043b2:	f000 fc0b 	bl	8004bcc <__M_Warning>
            self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	220c      	movs	r2, #12
 80043ba:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        break;}
 80043be:	e020      	b.n	8004402 <RawParser_dma_proceedByte+0x1e2>

#endif /* D_RAW_P_CRC_ENA */


    case RAW_P_DMA_RECEIVE_ERR:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive error, byte: %d, rx_len: %d, max_rxlen: %d", ch, self->m_receivePackLen, D_RAW_P_RX_BUF_SIZE);
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6852      	ldr	r2, [r2, #4]
 80043c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043ca:	9103      	str	r1, [sp, #12]
 80043cc:	9202      	str	r2, [sp, #8]
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <RawParser_dma_proceedByte+0x200>)
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 80043d8:	4a0d      	ldr	r2, [pc, #52]	; (8004410 <RawParser_dma_proceedByte+0x1f0>)
 80043da:	2101      	movs	r1, #1
 80043dc:	480f      	ldr	r0, [pc, #60]	; (800441c <RawParser_dma_proceedByte+0x1fc>)
 80043de:	f000 fbf5 	bl	8004bcc <__M_Warning>
        break;
 80043e2:	e00e      	b.n	8004402 <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_OK:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: LAST Received OK, byte: %d is not received because no SB", ch);
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <RawParser_dma_proceedByte+0x204>)
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 80043f0:	4a07      	ldr	r2, [pc, #28]	; (8004410 <RawParser_dma_proceedByte+0x1f0>)
 80043f2:	2101      	movs	r1, #1
 80043f4:	4809      	ldr	r0, [pc, #36]	; (800441c <RawParser_dma_proceedByte+0x1fc>)
 80043f6:	f000 fbe9 	bl	8004bcc <__M_Warning>
        break;
 80043fa:	e002      	b.n	8004402 <RawParser_dma_proceedByte+0x1e2>

    default:
        break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <RawParser_dma_proceedByte+0x1e2>
        break;}
 8004400:	bf00      	nop
    }
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	0800e3a8 	.word	0x0800e3a8
 8004410:	0800e270 	.word	0x0800e270
 8004414:	0800e378 	.word	0x0800e378
 8004418:	0800e404 	.word	0x0800e404
 800441c:	0800e3f8 	.word	0x0800e3f8
 8004420:	0800e44c 	.word	0x0800e44c
 8004424:	0800e49c 	.word	0x0800e49c

08004428 <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af02      	add	r7, sp, #8
 800442e:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid input");
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d110      	bne.n	8004458 <RawParser_dma_proceed+0x30>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	4619      	mov	r1, r3
 8004444:	4b33      	ldr	r3, [pc, #204]	; (8004514 <RawParser_dma_proceed+0xec>)
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800444c:	4a32      	ldr	r2, [pc, #200]	; (8004518 <RawParser_dma_proceed+0xf0>)
 800444e:	4833      	ldr	r0, [pc, #204]	; (800451c <RawParser_dma_proceed+0xf4>)
 8004450:	f000 fb9e 	bl	8004b90 <__M_Error>
 8004454:	2300      	movs	r3, #0
 8004456:	e059      	b.n	800450c <RawParser_dma_proceed+0xe4>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004462:	613b      	str	r3, [r7, #16]
            reg   receiveReadPos      = self->m_receiveReadPos    & (D_RAW_P_RX_BUF_SIZE - 1U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 800446a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446e:	617b      	str	r3, [r7, #20]
    self->RX.size = 0;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

//    if(receivePos_saved == receiveReadPos) { // may be needed
//        return &self->RX;
//    }

    while (receivePos_saved != receiveReadPos) {
 8004478:	e03b      	b.n	80044f2 <RawParser_dma_proceed+0xca>

        const u8 ch = self->m_receiveBuffer[receiveReadPos];
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	3308      	adds	r3, #8
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	73fb      	strb	r3, [r7, #15]

        if (self->m_triggerSB) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 360a 	ldrb.w	r3, [r3, #1546]	; 0x60a
 800448c:	2b00      	cmp	r3, #0
 800448e:	d016      	beq.n	80044be <RawParser_dma_proceed+0x96>
            if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	429a      	cmp	r2, r3
 8004498:	d106      	bne.n	80044a8 <RawParser_dma_proceed+0x80>
                RawParser_dma_proceedByte(self, ch, 0);
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2200      	movs	r2, #0
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff febd 	bl	8004220 <RawParser_dma_proceedByte>
 80044a6:	e005      	b.n	80044b4 <RawParser_dma_proceed+0x8c>
            } else { //{SB}{!SB} -> {SB} and newframe
                RawParser_dma_proceedByte(self, ch, 1);
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2201      	movs	r2, #1
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff feb6 	bl	8004220 <RawParser_dma_proceedByte>
            }
            self->m_triggerSB = 0;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 80044bc:	e00f      	b.n	80044de <RawParser_dma_proceed+0xb6>
        } else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d104      	bne.n	80044d2 <RawParser_dma_proceed+0xaa>
            self->m_triggerSB = 1;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 80044d0:	e005      	b.n	80044de <RawParser_dma_proceed+0xb6>
        } else { //{!SB}{!SB} -> {!SB}
            RawParser_dma_proceedByte(self, ch, 0);
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2200      	movs	r2, #0
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fea1 	bl	8004220 <RawParser_dma_proceedByte>
        }

        receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3301      	adds	r3, #1
 80044e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e6:	617b      	str	r3, [r7, #20]

        if(self->RX.size != 0) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <RawParser_dma_proceed+0xd4>
    while (receivePos_saved != receiveReadPos) {
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d1bf      	bne.n	800447a <RawParser_dma_proceed+0x52>
 80044fa:	e000      	b.n	80044fe <RawParser_dma_proceed+0xd6>
#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
            /* Now decode -- encoded codeword size must be passed */
            rscode_decode(&self->rs_ecc, self->RX.data, self->RX.size);
            self->RX.size -= RSCODE_NPAR;
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */
            break;
 80044fc:	bf00      	nop
        }
    }

    self->m_receiveReadPos = receiveReadPos;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    return &self->RX;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f203 6324 	addw	r3, r3, #1572	; 0x624
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	0800e514 	.word	0x0800e514
 8004518:	0800e270 	.word	0x0800e270
 800451c:	0800e4f0 	.word	0x0800e4f0

08004520 <RawParser_dma_shieldFrame>:

// slow shield functions (slow & more copy)-----------------------------------------------------------------------------------------
RawParser_Frame_t* RawParser_dma_shieldFrame(RawParser_dma_t* const self, const u8* data, reg len)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08c      	sub	sp, #48	; 0x30
 8004524:	af04      	add	r7, sp, #16
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_shieldFrame: No valid input");
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d110      	bne.n	8004554 <RawParser_dma_shieldFrame+0x34>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	4619      	mov	r1, r3
 8004540:	4b57      	ldr	r3, [pc, #348]	; (80046a0 <RawParser_dma_shieldFrame+0x180>)
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8004548:	4a56      	ldr	r2, [pc, #344]	; (80046a4 <RawParser_dma_shieldFrame+0x184>)
 800454a:	4857      	ldr	r0, [pc, #348]	; (80046a8 <RawParser_dma_shieldFrame+0x188>)
 800454c:	f000 fb20 	bl	8004b90 <__M_Error>
 8004550:	2300      	movs	r3, #0
 8004552:	e0a1      	b.n	8004698 <RawParser_dma_shieldFrame+0x178>
    M_Assert_Break((data == (u8*)NULL) || len == 0, M_EMPTY, {
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <RawParser_dma_shieldFrame+0x40>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d119      	bne.n	8004594 <RawParser_dma_shieldFrame+0x74>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <RawParser_dma_shieldFrame+0x4c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <RawParser_dma_shieldFrame+0x50>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <RawParser_dma_shieldFrame+0x52>
 8004570:	2300      	movs	r3, #0
 8004572:	b2d9      	uxtb	r1, r3
 8004574:	4b4a      	ldr	r3, [pc, #296]	; (80046a0 <RawParser_dma_shieldFrame+0x180>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f240 13d1 	movw	r3, #465	; 0x1d1
 800457c:	4a49      	ldr	r2, [pc, #292]	; (80046a4 <RawParser_dma_shieldFrame+0x184>)
 800457e:	484b      	ldr	r0, [pc, #300]	; (80046ac <RawParser_dma_shieldFrame+0x18c>)
 8004580:	f000 fb06 	bl	8004b90 <__M_Error>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8004592:	e081      	b.n	8004698 <RawParser_dma_shieldFrame+0x178>

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    RawParser_dma_startTransmittPacket(self, (len + RSCODE_NPAR));
    rs_encode_data_onlyParity(&self->rs_ecc, data, len);
#else
    RawParser_dma_startTransmittPacket(self, len);
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f892 	bl	80046c0 <RawParser_dma_startTransmittPacket>

#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    while(len--) {
 800459c:	e073      	b.n	8004686 <RawParser_dma_shieldFrame+0x166>
        RawParser_dma_addTxByteCRC(self, *data++);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	60ba      	str	r2, [r7, #8]
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	4613      	mov	r3, r2
 80045ac:	76fb      	strb	r3, [r7, #27]

#ifdef D_RAW_P_CRC_ENA
// elementary byte adding functions with calc crc----------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_addTxByteCRC(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10e      	bne.n	80045d2 <RawParser_dma_shieldFrame+0xb2>
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	4619      	mov	r1, r3
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <RawParser_dma_shieldFrame+0x190>)
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	23a1      	movs	r3, #161	; 0xa1
 80045c8:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <RawParser_dma_shieldFrame+0x194>)
 80045ca:	4837      	ldr	r0, [pc, #220]	; (80046a8 <RawParser_dma_shieldFrame+0x188>)
 80045cc:	f000 fae0 	bl	8004b90 <__M_Error>
 80045d0:	e059      	b.n	8004686 <RawParser_dma_shieldFrame+0x166>
#   ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#   endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    // move to cash
    u8* const   TX_data   = self->TX.data;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 80045d8:	617b      	str	r3, [r7, #20]
    reg         TX_size   = self->TX.size;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 80045e0:	613b      	str	r3, [r7, #16]


#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2bfd      	cmp	r3, #253	; 0xfd
 80045e6:	d113      	bne.n	8004610 <RawParser_dma_shieldFrame+0xf0>
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2bfd      	cmp	r3, #253	; 0xfd
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	4619      	mov	r1, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3301      	adds	r3, #1
 80045fa:	22fd      	movs	r2, #253	; 0xfd
 80045fc:	9202      	str	r2, [sp, #8]
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <RawParser_dma_shieldFrame+0x198>)
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	23b1      	movs	r3, #177	; 0xb1
 8004606:	4a2b      	ldr	r2, [pc, #172]	; (80046b4 <RawParser_dma_shieldFrame+0x194>)
 8004608:	482c      	ldr	r0, [pc, #176]	; (80046bc <RawParser_dma_shieldFrame+0x19c>)
 800460a:	f000 fac1 	bl	8004b90 <__M_Error>
 800460e:	e03a      	b.n	8004686 <RawParser_dma_shieldFrame+0x166>
#   else
    M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */


    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004616:	7efa      	ldrb	r2, [r7, #27]
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fa5e 	bl	8001adc <fast_crc8_maxim_byte>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609

    TX_data[TX_size++] = byte;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	613a      	str	r2, [r7, #16]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4413      	add	r3, r2
 8004634:	7efa      	ldrb	r2, [r7, #27]
 8004636:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	7efa      	ldrb	r2, [r7, #27]
 800463e:	429a      	cmp	r2, r3
 8004640:	d11d      	bne.n	800467e <RawParser_dma_shieldFrame+0x15e>

#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2bfd      	cmp	r3, #253	; 0xfd
 8004646:	d113      	bne.n	8004670 <RawParser_dma_shieldFrame+0x150>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2bfd      	cmp	r3, #253	; 0xfd
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	4619      	mov	r1, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3301      	adds	r3, #1
 800465a:	22fd      	movs	r2, #253	; 0xfd
 800465c:	9202      	str	r2, [sp, #8]
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <RawParser_dma_shieldFrame+0x198>)
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	23bd      	movs	r3, #189	; 0xbd
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <RawParser_dma_shieldFrame+0x194>)
 8004668:	4814      	ldr	r0, [pc, #80]	; (80046bc <RawParser_dma_shieldFrame+0x19c>)
 800466a:	f000 fa91 	bl	8004b90 <__M_Error>
 800466e:	e00a      	b.n	8004686 <RawParser_dma_shieldFrame+0x166>
#   else
        M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */

        TX_data[TX_size++] = byte;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	613a      	str	r2, [r7, #16]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	7efa      	ldrb	r2, [r7, #27]
 800467c:	701a      	strb	r2, [r3, #0]
    }

    self->TX.size = TX_size;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    while(len--) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	1e5a      	subs	r2, r3, #1
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d186      	bne.n	800459e <RawParser_dma_shieldFrame+0x7e>
    for (unsigned i = 0; i < RSCODE_NPAR; ++i) {
        RawParser_dma_addTxByteCRC(self, pBytes[RSCODE_NPAR-1-i]);
    }
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return RawParser_dma_finishTransmittPacket(self);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f91f 	bl	80048d4 <RawParser_dma_finishTransmittPacket>
 8004696:	4603      	mov	r3, r0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	0800e53c 	.word	0x0800e53c
 80046a4:	0800e270 	.word	0x0800e270
 80046a8:	0800e4f0 	.word	0x0800e4f0
 80046ac:	0800e568 	.word	0x0800e568
 80046b0:	0800e5c4 	.word	0x0800e5c4
 80046b4:	0800e588 	.word	0x0800e588
 80046b8:	0800e61c 	.word	0x0800e61c
 80046bc:	0800e5f0 	.word	0x0800e5f0

080046c0 <RawParser_dma_startTransmittPacket>:

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
void RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen) /////////////////////////////////////////////////////
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08c      	sub	sp, #48	; 0x30
 80046c4:	af04      	add	r7, sp, #16
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input");
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10f      	bne.n	80046f0 <RawParser_dma_startTransmittPacket+0x30>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	4619      	mov	r1, r3
 80046de:	4b70      	ldr	r3, [pc, #448]	; (80048a0 <RawParser_dma_startTransmittPacket+0x1e0>)
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	f240 13f1 	movw	r3, #497	; 0x1f1
 80046e6:	4a6f      	ldr	r2, [pc, #444]	; (80048a4 <RawParser_dma_startTransmittPacket+0x1e4>)
 80046e8:	486f      	ldr	r0, [pc, #444]	; (80048a8 <RawParser_dma_startTransmittPacket+0x1e8>)
 80046ea:	f000 fa51 	bl	8004b90 <__M_Error>
 80046ee:	e0d3      	b.n	8004898 <RawParser_dma_startTransmittPacket+0x1d8>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    M_Assert_Break((predictedLen == 0), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length");
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <RawParser_dma_startTransmittPacket+0x56>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	4619      	mov	r1, r3
 8004704:	4b69      	ldr	r3, [pc, #420]	; (80048ac <RawParser_dma_startTransmittPacket+0x1ec>)
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	f240 13fb 	movw	r3, #507	; 0x1fb
 800470c:	4a65      	ldr	r2, [pc, #404]	; (80048a4 <RawParser_dma_startTransmittPacket+0x1e4>)
 800470e:	4868      	ldr	r0, [pc, #416]	; (80048b0 <RawParser_dma_startTransmittPacket+0x1f0>)
 8004710:	f000 fa3e 	bl	8004b90 <__M_Error>
 8004714:	e0c0      	b.n	8004898 <RawParser_dma_startTransmittPacket+0x1d8>

#if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE // control undefined behavior
    M_Assert_Break( ((predictedLen + 4) > (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_MAX_PROTOCOL_LEN);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	3304      	adds	r3, #4
 800471a:	2bfd      	cmp	r3, #253	; 0xfd
 800471c:	d914      	bls.n	8004748 <RawParser_dma_startTransmittPacket+0x88>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	3304      	adds	r3, #4
 8004722:	2bfd      	cmp	r3, #253	; 0xfd
 8004724:	bf8c      	ite	hi
 8004726:	2301      	movhi	r3, #1
 8004728:	2300      	movls	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4619      	mov	r1, r3
 800472e:	23fe      	movs	r3, #254	; 0xfe
 8004730:	9302      	str	r3, [sp, #8]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	4b5f      	ldr	r3, [pc, #380]	; (80048b4 <RawParser_dma_startTransmittPacket+0x1f4>)
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800473e:	4a59      	ldr	r2, [pc, #356]	; (80048a4 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004740:	485d      	ldr	r0, [pc, #372]	; (80048b8 <RawParser_dma_startTransmittPacket+0x1f8>)
 8004742:	f000 fa25 	bl	8004b90 <__M_Error>
 8004746:	e0a7      	b.n	8004898 <RawParser_dma_startTransmittPacket+0x1d8>
    M_Assert_Warning((predictedLen > (D_RAW_P_MAX_PROTOCOL_LEN >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_MAX_PROTOCOL_LEN >> 1));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b7f      	cmp	r3, #127	; 0x7f
 800474c:	d912      	bls.n	8004774 <RawParser_dma_startTransmittPacket+0xb4>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b7f      	cmp	r3, #127	; 0x7f
 8004752:	bf8c      	ite	hi
 8004754:	2301      	movhi	r3, #1
 8004756:	2300      	movls	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	4619      	mov	r1, r3
 800475c:	237f      	movs	r3, #127	; 0x7f
 800475e:	9302      	str	r3, [sp, #8]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	4b55      	ldr	r3, [pc, #340]	; (80048bc <RawParser_dma_startTransmittPacket+0x1fc>)
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	f240 13ff 	movw	r3, #511	; 0x1ff
 800476c:	4a4d      	ldr	r2, [pc, #308]	; (80048a4 <RawParser_dma_startTransmittPacket+0x1e4>)
 800476e:	4854      	ldr	r0, [pc, #336]	; (80048c0 <RawParser_dma_startTransmittPacket+0x200>)
 8004770:	f000 fa2c 	bl	8004bcc <__M_Warning>
    M_Assert_Warning((predictedLen > (D_RAW_P_TX_BUF_SIZE >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - buffer size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_TX_BUF_SIZE >> 1));
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */


#ifdef D_RAW_P_CRC_ENA
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	22ff      	movs	r2, #255	; 0xff
 8004778:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    D_RAW_P_CRC_START(self->m_transmittCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

    const u8 startByte = self->m_startByte;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	77fb      	strb	r3, [r7, #31]


    self->TX.size = 0;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    self->TX.data[self->TX.size++] = startByte;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004796:	1c58      	adds	r0, r3, #1
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	f8c1 0620 	str.w	r0, [r1, #1568]	; 0x620
 800479e:	4413      	add	r3, r2
 80047a0:	7ffa      	ldrb	r2, [r7, #31]
 80047a2:	701a      	strb	r2, [r3, #0]
        RawParser_dma_addTxByteCRC(self, (u8)((predictedLen >> 8U) & 0x000000FFUL));

    } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        RawParser_dma_addTxByteCRC(self, (u8)(((predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen) & 0x000000FFUL));
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d304      	bcc.n	80047b6 <RawParser_dma_startTransmittPacket+0xf6>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	3301      	adds	r3, #1
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e001      	b.n	80047ba <RawParser_dma_startTransmittPacket+0xfa>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	61ba      	str	r2, [r7, #24]
 80047be:	75fb      	strb	r3, [r7, #23]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10e      	bne.n	80047e4 <RawParser_dma_startTransmittPacket+0x124>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	4619      	mov	r1, r3
 80047d4:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <RawParser_dma_startTransmittPacket+0x204>)
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	23a1      	movs	r3, #161	; 0xa1
 80047da:	4a3b      	ldr	r2, [pc, #236]	; (80048c8 <RawParser_dma_startTransmittPacket+0x208>)
 80047dc:	4832      	ldr	r0, [pc, #200]	; (80048a8 <RawParser_dma_startTransmittPacket+0x1e8>)
 80047de:	f000 f9d7 	bl	8004b90 <__M_Error>
 80047e2:	e059      	b.n	8004898 <RawParser_dma_startTransmittPacket+0x1d8>
    u8* const   TX_data   = self->TX.data;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 80047ea:	613b      	str	r3, [r7, #16]
    reg         TX_size   = self->TX.size;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 80047f2:	60fb      	str	r3, [r7, #12]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2bfd      	cmp	r3, #253	; 0xfd
 80047f8:	d113      	bne.n	8004822 <RawParser_dma_startTransmittPacket+0x162>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2bfd      	cmp	r3, #253	; 0xfd
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	4619      	mov	r1, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	22fd      	movs	r2, #253	; 0xfd
 800480e:	9202      	str	r2, [sp, #8]
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <RawParser_dma_startTransmittPacket+0x20c>)
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	23b1      	movs	r3, #177	; 0xb1
 8004818:	4a2b      	ldr	r2, [pc, #172]	; (80048c8 <RawParser_dma_startTransmittPacket+0x208>)
 800481a:	482d      	ldr	r0, [pc, #180]	; (80048d0 <RawParser_dma_startTransmittPacket+0x210>)
 800481c:	f000 f9b8 	bl	8004b90 <__M_Error>
 8004820:	e03a      	b.n	8004898 <RawParser_dma_startTransmittPacket+0x1d8>
    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004828:	7dfa      	ldrb	r2, [r7, #23]
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f7fd f955 	bl	8001adc <fast_crc8_maxim_byte>
 8004832:	4603      	mov	r3, r0
 8004834:	461a      	mov	r2, r3
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    TX_data[TX_size++] = byte;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	60fa      	str	r2, [r7, #12]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	7dfa      	ldrb	r2, [r7, #23]
 8004848:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	7dfa      	ldrb	r2, [r7, #23]
 8004850:	429a      	cmp	r2, r3
 8004852:	d11d      	bne.n	8004890 <RawParser_dma_startTransmittPacket+0x1d0>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2bfd      	cmp	r3, #253	; 0xfd
 8004858:	d113      	bne.n	8004882 <RawParser_dma_startTransmittPacket+0x1c2>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2bfd      	cmp	r3, #253	; 0xfd
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	4619      	mov	r1, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	22fd      	movs	r2, #253	; 0xfd
 800486e:	9202      	str	r2, [sp, #8]
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	4b16      	ldr	r3, [pc, #88]	; (80048cc <RawParser_dma_startTransmittPacket+0x20c>)
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	23bd      	movs	r3, #189	; 0xbd
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <RawParser_dma_startTransmittPacket+0x208>)
 800487a:	4815      	ldr	r0, [pc, #84]	; (80048d0 <RawParser_dma_startTransmittPacket+0x210>)
 800487c:	f000 f988 	bl	8004b90 <__M_Error>
 8004880:	e00a      	b.n	8004898 <RawParser_dma_startTransmittPacket+0x1d8>
        TX_data[TX_size++] = byte;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	60fa      	str	r2, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	7dfa      	ldrb	r2, [r7, #23]
 800488e:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */
}
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	0800e66c 	.word	0x0800e66c
 80048a4:	0800e270 	.word	0x0800e270
 80048a8:	0800e4f0 	.word	0x0800e4f0
 80048ac:	0800e6b4 	.word	0x0800e6b4
 80048b0:	0800e6a0 	.word	0x0800e6a0
 80048b4:	0800e728 	.word	0x0800e728
 80048b8:	0800e6f0 	.word	0x0800e6f0
 80048bc:	0800e7a8 	.word	0x0800e7a8
 80048c0:	0800e774 	.word	0x0800e774
 80048c4:	0800e5c4 	.word	0x0800e5c4
 80048c8:	0800e588 	.word	0x0800e588
 80048cc:	0800e61c 	.word	0x0800e61c
 80048d0:	0800e5f0 	.word	0x0800e5f0

080048d4 <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af04      	add	r7, sp, #16
 80048da:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_startTransmittPacket: No valid input");
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d110      	bne.n	8004904 <RawParser_dma_finishTransmittPacket+0x30>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <RawParser_dma_finishTransmittPacket+0x10c>)
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	f240 2326 	movw	r3, #550	; 0x226
 80048f8:	4a3a      	ldr	r2, [pc, #232]	; (80049e4 <RawParser_dma_finishTransmittPacket+0x110>)
 80048fa:	483b      	ldr	r0, [pc, #236]	; (80049e8 <RawParser_dma_finishTransmittPacket+0x114>)
 80048fc:	f000 f948 	bl	8004b90 <__M_Error>
 8004900:	2300      	movs	r3, #0
 8004902:	e068      	b.n	80049d6 <RawParser_dma_finishTransmittPacket+0x102>
#ifdef D_RAW_P_CRC_ENA
    D_RAW_P_CRC_FINAL(self->m_transmittCalcCRC);

#   ifdef D_RAW_P_USE_CRC8

    RawParser_dma_addTxByte(self, self->m_transmittCalcCRC);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 2609 	ldrb.w	r2, [r3, #1545]	; 0x609
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	4613      	mov	r3, r2
 8004910:	74fb      	strb	r3, [r7, #19]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid input");
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10e      	bne.n	8004936 <RawParser_dma_finishTransmittPacket+0x62>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	4619      	mov	r1, r3
 8004926:	4b31      	ldr	r3, [pc, #196]	; (80049ec <RawParser_dma_finishTransmittPacket+0x118>)
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	2379      	movs	r3, #121	; 0x79
 800492c:	4a30      	ldr	r2, [pc, #192]	; (80049f0 <RawParser_dma_finishTransmittPacket+0x11c>)
 800492e:	482e      	ldr	r0, [pc, #184]	; (80049e8 <RawParser_dma_finishTransmittPacket+0x114>)
 8004930:	f000 f92e 	bl	8004b90 <__M_Error>
 8004934:	e04c      	b.n	80049d0 <RawParser_dma_finishTransmittPacket+0xfc>
    u8* const   TX_data   = self->TX.data;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 800493c:	60fb      	str	r3, [r7, #12]
    reg         TX_size   = self->TX.size;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004944:	60bb      	str	r3, [r7, #8]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2bfd      	cmp	r3, #253	; 0xfd
 800494a:	d113      	bne.n	8004974 <RawParser_dma_finishTransmittPacket+0xa0>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2bfd      	cmp	r3, #253	; 0xfd
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	4619      	mov	r1, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3301      	adds	r3, #1
 800495e:	22fd      	movs	r2, #253	; 0xfd
 8004960:	9202      	str	r2, [sp, #8]
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <RawParser_dma_finishTransmittPacket+0x120>)
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2389      	movs	r3, #137	; 0x89
 800496a:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <RawParser_dma_finishTransmittPacket+0x11c>)
 800496c:	4822      	ldr	r0, [pc, #136]	; (80049f8 <RawParser_dma_finishTransmittPacket+0x124>)
 800496e:	f000 f90f 	bl	8004b90 <__M_Error>
 8004972:	e02d      	b.n	80049d0 <RawParser_dma_finishTransmittPacket+0xfc>
    TX_data[TX_size++] = byte;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	60ba      	str	r2, [r7, #8]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	7cfa      	ldrb	r2, [r7, #19]
 8004980:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	7cfa      	ldrb	r2, [r7, #19]
 8004988:	429a      	cmp	r2, r3
 800498a:	d11d      	bne.n	80049c8 <RawParser_dma_finishTransmittPacket+0xf4>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2bfd      	cmp	r3, #253	; 0xfd
 8004990:	d113      	bne.n	80049ba <RawParser_dma_finishTransmittPacket+0xe6>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2bfd      	cmp	r3, #253	; 0xfd
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	4619      	mov	r1, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3301      	adds	r3, #1
 80049a4:	22fd      	movs	r2, #253	; 0xfd
 80049a6:	9202      	str	r2, [sp, #8]
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <RawParser_dma_finishTransmittPacket+0x120>)
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2392      	movs	r3, #146	; 0x92
 80049b0:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <RawParser_dma_finishTransmittPacket+0x11c>)
 80049b2:	4811      	ldr	r0, [pc, #68]	; (80049f8 <RawParser_dma_finishTransmittPacket+0x124>)
 80049b4:	f000 f8ec 	bl	8004b90 <__M_Error>
 80049b8:	e00a      	b.n	80049d0 <RawParser_dma_finishTransmittPacket+0xfc>
        TX_data[TX_size++] = byte;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	60ba      	str	r2, [r7, #8]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	7cfa      	ldrb	r2, [r7, #19]
 80049c6:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    RawParser_dma_addTxByte(self, (u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

    return &self->TX;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f203 631c 	addw	r3, r3, #1564	; 0x61c
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	0800e66c 	.word	0x0800e66c
 80049e4:	0800e270 	.word	0x0800e270
 80049e8:	0800e4f0 	.word	0x0800e4f0
 80049ec:	0800e84c 	.word	0x0800e84c
 80049f0:	0800e588 	.word	0x0800e588
 80049f4:	0800e874 	.word	0x0800e874
 80049f8:	0800e5f0 	.word	0x0800e5f0

080049fc <__M_SEND_ASSERT_MSG>:

static inline void __M_SEND_ASSERT_MSG(const char* const header,
                                const char* const expr_str, const unsigned char expr,
                                const char* const file, const int line,
                                const char* const msg, va_list args)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)

    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b5b      	cmp	r3, #91	; 0x5b
 8004a12:	d175      	bne.n	8004b00 <__M_SEND_ASSERT_MSG+0x104>
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	3302      	adds	r3, #2
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b5d      	cmp	r3, #93	; 0x5d
 8004a1c:	d170      	bne.n	8004b00 <__M_SEND_ASSERT_MSG+0x104>

        int assertEna = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
        char* descr = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]

        switch(__M_ASSERT_DATA(msg)) {
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	3301      	adds	r3, #1
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b73      	cmp	r3, #115	; 0x73
 8004a2e:	d015      	beq.n	8004a5c <__M_SEND_ASSERT_MSG+0x60>
 8004a30:	2b73      	cmp	r3, #115	; 0x73
 8004a32:	dc23      	bgt.n	8004a7c <__M_SEND_ASSERT_MSG+0x80>
 8004a34:	2b65      	cmp	r3, #101	; 0x65
 8004a36:	d019      	beq.n	8004a6c <__M_SEND_ASSERT_MSG+0x70>
 8004a38:	2b65      	cmp	r3, #101	; 0x65
 8004a3a:	dc1f      	bgt.n	8004a7c <__M_SEND_ASSERT_MSG+0x80>
 8004a3c:	2b30      	cmp	r3, #48	; 0x30
 8004a3e:	f000 8095 	beq.w	8004b6c <__M_SEND_ASSERT_MSG+0x170>
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d11a      	bne.n	8004a7c <__M_SEND_ASSERT_MSG+0x80>

        case 'd':
            // get library info
            assertEna = va_arg(args, const int);
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	1d1a      	adds	r2, r3, #4
 8004a4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	1d1a      	adds	r2, r3, #4
 8004a54:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	613b      	str	r3, [r7, #16]
            break;
 8004a5a:	e00f      	b.n	8004a7c <__M_SEND_ASSERT_MSG+0x80>

        case 's':
            // get library info
            assertEna = 1;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	613b      	str	r3, [r7, #16]
            break;
 8004a6a:	e007      	b.n	8004a7c <__M_SEND_ASSERT_MSG+0x80>

        case 'e':
            // get library info
            assertEna = va_arg(args, const int);
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	617b      	str	r3, [r7, #20]
            descr = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
            break;
 8004a7a:	bf00      	nop

        }

#   if !defined(M_MESSAGE_ALWAYS_ENABLE)
        // send message if enabled message
        if(assertEna) {
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d076      	beq.n	8004b70 <__M_SEND_ASSERT_MSG+0x174>
#   endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) */
            fprintf(stderr, "\n%s\n", header);
 8004a82:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	493c      	ldr	r1, [pc, #240]	; (8004b7c <__M_SEND_ASSERT_MSG+0x180>)
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f003 fb0b 	bl	80080a8 <fiprintf>
            fprintf(stderr, "Library Name: %s\n", descr);
 8004a92:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4939      	ldr	r1, [pc, #228]	; (8004b80 <__M_SEND_ASSERT_MSG+0x184>)
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f003 fb03 	bl	80080a8 <fiprintf>
            fprintf(stderr, "Assert failed:\t");
 8004aa2:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4835      	ldr	r0, [pc, #212]	; (8004b84 <__M_SEND_ASSERT_MSG+0x188>)
 8004aae:	f003 fbcd 	bl	800824c <fwrite>
            vfprintf(stderr, &msg[3], args);
 8004ab2:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68d8      	ldr	r0, [r3, #12]
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	3303      	adds	r3, #3
 8004abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f003 fe8a 	bl	80087d8 <vfiprintf>
            fprintf(stderr, "\n");
 8004ac4:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4619      	mov	r1, r3
 8004acc:	200a      	movs	r0, #10
 8004ace:	f003 fb35 	bl	800813c <fputc>

#   if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8004ad2:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68d8      	ldr	r0, [r3, #12]
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	492a      	ldr	r1, [pc, #168]	; (8004b88 <__M_SEND_ASSERT_MSG+0x18c>)
 8004ade:	f003 fae3 	bl	80080a8 <fiprintf>
#   endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#   if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8004ae2:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68d8      	ldr	r0, [r3, #12]
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	4927      	ldr	r1, [pc, #156]	; (8004b8c <__M_SEND_ASSERT_MSG+0x190>)
 8004aee:	f003 fadb 	bl	80080a8 <fiprintf>
#   endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */
            fflush(stderr);
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f003 f9ed 	bl	8007ed8 <fflush>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004afe:	e037      	b.n	8004b70 <__M_SEND_ASSERT_MSG+0x174>
        (void)assertEna;
    } else {

#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

        fprintf(stderr, "\n%s\n", header);
 8004b00:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	491c      	ldr	r1, [pc, #112]	; (8004b7c <__M_SEND_ASSERT_MSG+0x180>)
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f003 facc 	bl	80080a8 <fiprintf>
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
        fprintf(stderr, "Assert failed:\t");
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	220f      	movs	r2, #15
 8004b18:	2101      	movs	r1, #1
 8004b1a:	481a      	ldr	r0, [pc, #104]	; (8004b84 <__M_SEND_ASSERT_MSG+0x188>)
 8004b1c:	f003 fb96 	bl	800824c <fwrite>
        vfprintf(stderr, msg, args);
 8004b20:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f003 fe54 	bl	80087d8 <vfiprintf>
        fprintf(stderr, "\n");
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	4619      	mov	r1, r3
 8004b38:	200a      	movs	r0, #10
 8004b3a:	f003 faff 	bl	800813c <fputc>
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

#if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68d8      	ldr	r0, [r3, #12]
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	490f      	ldr	r1, [pc, #60]	; (8004b88 <__M_SEND_ASSERT_MSG+0x18c>)
 8004b4a:	f003 faad 	bl	80080a8 <fiprintf>
#endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68d8      	ldr	r0, [r3, #12]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	490c      	ldr	r1, [pc, #48]	; (8004b8c <__M_SEND_ASSERT_MSG+0x190>)
 8004b5a:	f003 faa5 	bl	80080a8 <fiprintf>
#endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */

        fflush(stderr);
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <__M_SEND_ASSERT_MSG+0x17c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f003 f9b7 	bl	8007ed8 <fflush>
 8004b6a:	e002      	b.n	8004b72 <__M_SEND_ASSERT_MSG+0x176>
            return;
 8004b6c:	bf00      	nop
 8004b6e:	e000      	b.n	8004b72 <__M_SEND_ASSERT_MSG+0x176>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004b70:	bf00      	nop
    (void)expr;
    (void)file;
    (void)line;
    (void)msg;
    (void)args;
}
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	2000000c 	.word	0x2000000c
 8004b7c:	0800e9c4 	.word	0x0800e9c4
 8004b80:	0800e9cc 	.word	0x0800e9cc
 8004b84:	0800e9e0 	.word	0x0800e9e0
 8004b88:	0800e9f0 	.word	0x0800e9f0
 8004b8c:	0800ea0c 	.word	0x0800ea0c

08004b90 <__M_Error>:

void __M_Error(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8004ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ba4:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("PROGRAMM EXIT WITH ERROR!!!", expr_str, expr, file, line, msg, args);
 8004ba6:	7afa      	ldrb	r2, [r7, #11]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	9302      	str	r3, [sp, #8]
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	4803      	ldr	r0, [pc, #12]	; (8004bc8 <__M_Error+0x38>)
 8004bba:	f7ff ff1f 	bl	80049fc <__M_SEND_ASSERT_MSG>
    va_end(args);
    //abort(); // exit programm
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	0800ea24 	.word	0x0800ea24

08004bcc <__M_Warning>:

void __M_Warning(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af04      	add	r7, sp, #16
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8004bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be0:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("WARNING!!!", expr_str, expr, file, line, msg, args);
 8004be2:	7afa      	ldrb	r2, [r7, #11]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	9302      	str	r3, [sp, #8]
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	4803      	ldr	r0, [pc, #12]	; (8004c04 <__M_Warning+0x38>)
 8004bf6:	f7ff ff01 	bl	80049fc <__M_SEND_ASSERT_MSG>
    va_end(args);
}
 8004bfa:	bf00      	nop
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	0800ea40 	.word	0x0800ea40

08004c08 <ping_worker>:
#include <string.h>



void ping_worker(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
	static u8 counte = 0;


	memcpy(outputData, inputData, (*size));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68f9      	ldr	r1, [r7, #12]
 8004c1e:	68b8      	ldr	r0, [r7, #8]
 8004c20:	f003 fb5a 	bl	80082d8 <memcpy>
	outputData[(*size)] = counte;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <ping_worker+0x48>)
 8004c2e:	7812      	ldrb	r2, [r2, #0]
 8004c30:	701a      	strb	r2, [r3, #0]
	++(*size);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
	++counte;
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <ping_worker+0x48>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	4b02      	ldr	r3, [pc, #8]	; (8004c50 <ping_worker+0x48>)
 8004c46:	701a      	strb	r2, [r3, #0]
	UNUSED(maxOutBufferSize);
	UNUSED(ctx);
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	2000029c 	.word	0x2000029c

08004c54 <init_stm32_communicator>:

Communicator_t comm;
extern UART_HandleTypeDef huart1;

int init_stm32_communicator(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
	int state = rawParser_dma_init(&comm.rawparser, 0x1A);
 8004c5a:	211a      	movs	r1, #26
 8004c5c:	4810      	ldr	r0, [pc, #64]	; (8004ca0 <init_stm32_communicator+0x4c>)
 8004c5e:	f7ff fa81 	bl	8004164 <rawParser_dma_init>
 8004c62:	6078      	str	r0, [r7, #4]
	if(state != D_RAW_P_OK) {
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d001      	beq.n	8004c6e <init_stm32_communicator+0x1a>
		return D_RAW_P_ERROR;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e014      	b.n	8004c98 <init_stm32_communicator+0x44>
	}

	// init callback manager
	CallbackManager_init(&comm.manager);
 8004c6e:	480d      	ldr	r0, [pc, #52]	; (8004ca4 <init_stm32_communicator+0x50>)
 8004c70:	f7fc fe7c 	bl	800196c <CallbackManager_init>
	CallbackManager_addWorker(&comm.manager, 0x00, ping_worker, NULL);
 8004c74:	2300      	movs	r3, #0
 8004c76:	4a0c      	ldr	r2, [pc, #48]	; (8004ca8 <init_stm32_communicator+0x54>)
 8004c78:	2100      	movs	r1, #0
 8004c7a:	480a      	ldr	r0, [pc, #40]	; (8004ca4 <init_stm32_communicator+0x50>)
 8004c7c:	f7fc feae 	bl	80019dc <CallbackManager_addWorker>
	CallbackManager_addWorker(&comm.manager, 0xF0, entityCMD, NULL);
 8004c80:	2300      	movs	r3, #0
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <init_stm32_communicator+0x58>)
 8004c84:	21f0      	movs	r1, #240	; 0xf0
 8004c86:	4807      	ldr	r0, [pc, #28]	; (8004ca4 <init_stm32_communicator+0x50>)
 8004c88:	f7fc fea8 	bl	80019dc <CallbackManager_addWorker>

	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4908      	ldr	r1, [pc, #32]	; (8004cb0 <init_stm32_communicator+0x5c>)
 8004c90:	4808      	ldr	r0, [pc, #32]	; (8004cb4 <init_stm32_communicator+0x60>)
 8004c92:	f002 f89a 	bl	8006dca <HAL_UART_Receive_IT>
	return state;
 8004c96:	687b      	ldr	r3, [r7, #4]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	200002a0 	.word	0x200002a0
 8004ca4:	200008d0 	.word	0x200008d0
 8004ca8:	08004c09 	.word	0x08004c09
 8004cac:	08001b0d 	.word	0x08001b0d
 8004cb0:	20000cd4 	.word	0x20000cd4
 8004cb4:	20000248 	.word	0x20000248

08004cb8 <proceedIncommingMessage>:


void proceedIncommingMessage(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af02      	add	r7, sp, #8
	// move to cash--------------------------------------------------------------
	const RawParser_Frame_t* const Rxframe = RawParser_dma_proceed(&comm.rawparser);
 8004cbe:	4838      	ldr	r0, [pc, #224]	; (8004da0 <proceedIncommingMessage+0xe8>)
 8004cc0:	f7ff fbb2 	bl	8004428 <RawParser_dma_proceed>
 8004cc4:	6178      	str	r0, [r7, #20]
	u8* const input_data 	= Rxframe->data;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	613b      	str	r3, [r7, #16]
	reg input_size 			= Rxframe->size;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
	const boards_t* const board_entry_internal = board_entry;
 8004cd2:	4b34      	ldr	r3, [pc, #208]	; (8004da4 <proceedIncommingMessage+0xec>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

	const u8 bid 		= input_data[0];
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	72fb      	strb	r3, [r7, #11]
	const u8 cmd_id 	= input_data[1];
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	785b      	ldrb	r3, [r3, #1]
 8004ce2:	72bb      	strb	r3, [r7, #10]

	// do logic ------------------------------------------------------------------
	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4930      	ldr	r1, [pc, #192]	; (8004da8 <proceedIncommingMessage+0xf0>)
 8004ce8:	4830      	ldr	r0, [pc, #192]	; (8004dac <proceedIncommingMessage+0xf4>)
 8004cea:	f002 f86e 	bl	8006dca <HAL_UART_Receive_IT>

	M_Assert_Break(((Rxframe == NULL) || (input_data == NULL) || (board_entry_internal == NULL)), M_EMPTY, return, "proceedIncommingMessage: No valid descriptors");
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <proceedIncommingMessage+0x48>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <proceedIncommingMessage+0x48>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d114      	bne.n	8004d2a <proceedIncommingMessage+0x72>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <proceedIncommingMessage+0x5a>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <proceedIncommingMessage+0x5a>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <proceedIncommingMessage+0x5e>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <proceedIncommingMessage+0x60>
 8004d16:	2300      	movs	r3, #0
 8004d18:	b2d9      	uxtb	r1, r3
 8004d1a:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <proceedIncommingMessage+0xf8>)
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	232f      	movs	r3, #47	; 0x2f
 8004d20:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <proceedIncommingMessage+0xfc>)
 8004d22:	4825      	ldr	r0, [pc, #148]	; (8004db8 <proceedIncommingMessage+0x100>)
 8004d24:	f7ff ff34 	bl	8004b90 <__M_Error>
 8004d28:	e037      	b.n	8004d9a <proceedIncommingMessage+0xe2>

	// check input size and boars id
	if((input_size < 2U) || (bid != board_entry_internal->boardId)) {
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d933      	bls.n	8004d98 <proceedIncommingMessage+0xe0>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	7afa      	ldrb	r2, [r7, #11]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d12e      	bne.n	8004d98 <proceedIncommingMessage+0xe0>
		return;
	}

	// call worker
	input_size -= 2;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	3b02      	subs	r3, #2
 8004d3e:	603b      	str	r3, [r7, #0]
	if(!CallbackManager_proceed(&comm.manager, cmd_id, &input_data[2], &comm.outputData[2], &input_size, (D_RAW_P_TX_BUF_SIZE - 2U))) {
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	7ab9      	ldrb	r1, [r7, #10]
 8004d46:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <proceedIncommingMessage+0x104>)
 8004d52:	481b      	ldr	r0, [pc, #108]	; (8004dc0 <proceedIncommingMessage+0x108>)
 8004d54:	f7fc fe74 	bl	8001a40 <CallbackManager_proceed>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <proceedIncommingMessage+0xaa>
		input_size = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	603b      	str	r3, [r7, #0]
//	// check if worker want to send packet
//	if(input_size == 0) {
//		return;
//	}

	comm.outputData[0] = bid;
 8004d62:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <proceedIncommingMessage+0xe8>)
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	f882 3a35 	strb.w	r3, [r2, #2613]	; 0xa35
	comm.outputData[1] = cmd_id;
 8004d6a:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <proceedIncommingMessage+0xe8>)
 8004d6c:	7abb      	ldrb	r3, [r7, #10]
 8004d6e:	f882 3a36 	strb.w	r3, [r2, #2614]	; 0xa36

	const RawParser_Frame_t* const Txframe = RawParser_dma_shieldFrame(&comm.rawparser, comm.outputData, (input_size + 2));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	3302      	adds	r3, #2
 8004d76:	461a      	mov	r2, r3
 8004d78:	4912      	ldr	r1, [pc, #72]	; (8004dc4 <proceedIncommingMessage+0x10c>)
 8004d7a:	4809      	ldr	r0, [pc, #36]	; (8004da0 <proceedIncommingMessage+0xe8>)
 8004d7c:	f7ff fbd0 	bl	8004520 <RawParser_dma_shieldFrame>
 8004d80:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, Txframe->data, Txframe->size, 10000);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004d90:	4806      	ldr	r0, [pc, #24]	; (8004dac <proceedIncommingMessage+0xf4>)
 8004d92:	f001 ff88 	bl	8006ca6 <HAL_UART_Transmit>
 8004d96:	e000      	b.n	8004d9a <proceedIncommingMessage+0xe2>
		return;
 8004d98:	bf00      	nop
}
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	200002a0 	.word	0x200002a0
 8004da4:	2000028c 	.word	0x2000028c
 8004da8:	20000cd4 	.word	0x20000cd4
 8004dac:	20000248 	.word	0x20000248
 8004db0:	0800ec50 	.word	0x0800ec50
 8004db4:	0800ebd8 	.word	0x0800ebd8
 8004db8:	0800ec00 	.word	0x0800ec00
 8004dbc:	20000cd7 	.word	0x20000cd7
 8004dc0:	200008d0 	.word	0x200008d0
 8004dc4:	20000cd5 	.word	0x20000cd5

08004dc8 <__io_putchar>:
#include "main.h"
#include "stm32_printf.h"

extern UART_HandleTypeDef huart1;
PUTCHAR_PROTOTYPE
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004dd0:	1d39      	adds	r1, r7, #4
 8004dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4803      	ldr	r0, [pc, #12]	; (8004de8 <__io_putchar+0x20>)
 8004dda:	f001 ff64 	bl	8006ca6 <HAL_UART_Transmit>
	return ch;
 8004dde:	687b      	ldr	r3, [r7, #4]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000248 	.word	0x20000248

08004dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004df0:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_Init+0x40>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <HAL_Init+0x40>)
 8004df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_Init+0x40>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <HAL_Init+0x40>)
 8004e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e08:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_Init+0x40>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <HAL_Init+0x40>)
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e14:	2003      	movs	r0, #3
 8004e16:	f000 f92b 	bl	8005070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e1a:	200f      	movs	r0, #15
 8004e1c:	f000 f808 	bl	8004e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e20:	f7fc f9cc 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023c00 	.word	0x40023c00

08004e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e38:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <HAL_InitTick+0x54>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <HAL_InitTick+0x58>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	4619      	mov	r1, r3
 8004e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f943 	bl	80050da <HAL_SYSTICK_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e00e      	b.n	8004e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b0f      	cmp	r3, #15
 8004e62:	d80a      	bhi.n	8004e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e64:	2200      	movs	r2, #0
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	f000 f90b 	bl	8005086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e70:	4a06      	ldr	r2, [pc, #24]	; (8004e8c <HAL_InitTick+0x5c>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000000 	.word	0x20000000
 8004e88:	20000008 	.word	0x20000008
 8004e8c:	20000004 	.word	0x20000004

08004e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_IncTick+0x20>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <HAL_IncTick+0x24>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_IncTick+0x24>)
 8004ea2:	6013      	str	r3, [r2, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000008 	.word	0x20000008
 8004eb4:	20000ed8 	.word	0x20000ed8

08004eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return uwTick;
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <HAL_GetTick+0x14>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000ed8 	.word	0x20000ed8

08004ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <__NVIC_SetPriorityGrouping+0x44>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004eec:	4013      	ands	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f02:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <__NVIC_SetPriorityGrouping+0x44>)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	60d3      	str	r3, [r2, #12]
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	e000ed00 	.word	0xe000ed00

08004f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <__NVIC_GetPriorityGrouping+0x18>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	f003 0307 	and.w	r3, r3, #7
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	db0b      	blt.n	8004f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	f003 021f 	and.w	r2, r3, #31
 8004f4c:	4907      	ldr	r1, [pc, #28]	; (8004f6c <__NVIC_EnableIRQ+0x38>)
 8004f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	2001      	movs	r0, #1
 8004f56:	fa00 f202 	lsl.w	r2, r0, r2
 8004f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	e000e100 	.word	0xe000e100

08004f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	6039      	str	r1, [r7, #0]
 8004f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	db0a      	blt.n	8004f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	490c      	ldr	r1, [pc, #48]	; (8004fbc <__NVIC_SetPriority+0x4c>)
 8004f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8e:	0112      	lsls	r2, r2, #4
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	440b      	add	r3, r1
 8004f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f98:	e00a      	b.n	8004fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	4908      	ldr	r1, [pc, #32]	; (8004fc0 <__NVIC_SetPriority+0x50>)
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	3b04      	subs	r3, #4
 8004fa8:	0112      	lsls	r2, r2, #4
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	440b      	add	r3, r1
 8004fae:	761a      	strb	r2, [r3, #24]
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	e000e100 	.word	0xe000e100
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f1c3 0307 	rsb	r3, r3, #7
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	bf28      	it	cs
 8004fe2:	2304      	movcs	r3, #4
 8004fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d902      	bls.n	8004ff4 <NVIC_EncodePriority+0x30>
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3b03      	subs	r3, #3
 8004ff2:	e000      	b.n	8004ff6 <NVIC_EncodePriority+0x32>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43da      	mvns	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	401a      	ands	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800500c:	f04f 31ff 	mov.w	r1, #4294967295
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	fa01 f303 	lsl.w	r3, r1, r3
 8005016:	43d9      	mvns	r1, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800501c:	4313      	orrs	r3, r2
         );
}
 800501e:	4618      	mov	r0, r3
 8005020:	3724      	adds	r7, #36	; 0x24
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3b01      	subs	r3, #1
 8005038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800503c:	d301      	bcc.n	8005042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800503e:	2301      	movs	r3, #1
 8005040:	e00f      	b.n	8005062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005042:	4a0a      	ldr	r2, [pc, #40]	; (800506c <SysTick_Config+0x40>)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3b01      	subs	r3, #1
 8005048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800504a:	210f      	movs	r1, #15
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	f7ff ff8e 	bl	8004f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <SysTick_Config+0x40>)
 8005056:	2200      	movs	r2, #0
 8005058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800505a:	4b04      	ldr	r3, [pc, #16]	; (800506c <SysTick_Config+0x40>)
 800505c:	2207      	movs	r2, #7
 800505e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	e000e010 	.word	0xe000e010

08005070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff ff29 	bl	8004ed0 <__NVIC_SetPriorityGrouping>
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af00      	add	r7, sp, #0
 800508c:	4603      	mov	r3, r0
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005098:	f7ff ff3e 	bl	8004f18 <__NVIC_GetPriorityGrouping>
 800509c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	6978      	ldr	r0, [r7, #20]
 80050a4:	f7ff ff8e 	bl	8004fc4 <NVIC_EncodePriority>
 80050a8:	4602      	mov	r2, r0
 80050aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ff5d 	bl	8004f70 <__NVIC_SetPriority>
}
 80050b6:	bf00      	nop
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	4603      	mov	r3, r0
 80050c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff ff31 	bl	8004f34 <__NVIC_EnableIRQ>
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff ffa2 	bl	800502c <SysTick_Config>
 80050e8:	4603      	mov	r3, r0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005100:	f7ff feda 	bl	8004eb8 <HAL_GetTick>
 8005104:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d008      	beq.n	8005124 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2280      	movs	r2, #128	; 0x80
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e052      	b.n	80051ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0216 	bic.w	r2, r2, #22
 8005132:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005142:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <HAL_DMA_Abort+0x62>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0208 	bic.w	r2, r2, #8
 8005162:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005174:	e013      	b.n	800519e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005176:	f7ff fe9f 	bl	8004eb8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b05      	cmp	r3, #5
 8005182:	d90c      	bls.n	800519e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2203      	movs	r2, #3
 800518e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e015      	b.n	80051ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e4      	bne.n	8005176 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	223f      	movs	r2, #63	; 0x3f
 80051b2:	409a      	lsls	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d004      	beq.n	80051f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2280      	movs	r2, #128	; 0x80
 80051ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e00c      	b.n	800520a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2205      	movs	r2, #5
 80051f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	e16b      	b.n	800550c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005234:	2201      	movs	r2, #1
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	f040 815a 	bne.w	8005506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d005      	beq.n	800526a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005266:	2b02      	cmp	r3, #2
 8005268:	d130      	bne.n	80052cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	2203      	movs	r2, #3
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4013      	ands	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052a0:	2201      	movs	r2, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4013      	ands	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 0201 	and.w	r2, r3, #1
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d017      	beq.n	8005308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	2203      	movs	r2, #3
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d123      	bne.n	800535c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	08da      	lsrs	r2, r3, #3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3208      	adds	r2, #8
 800531c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	220f      	movs	r2, #15
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	08da      	lsrs	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3208      	adds	r2, #8
 8005356:	69b9      	ldr	r1, [r7, #24]
 8005358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	2203      	movs	r2, #3
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0203 	and.w	r2, r3, #3
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80b4 	beq.w	8005506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	4b60      	ldr	r3, [pc, #384]	; (8005524 <HAL_GPIO_Init+0x30c>)
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	4a5f      	ldr	r2, [pc, #380]	; (8005524 <HAL_GPIO_Init+0x30c>)
 80053a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ac:	6453      	str	r3, [r2, #68]	; 0x44
 80053ae:	4b5d      	ldr	r3, [pc, #372]	; (8005524 <HAL_GPIO_Init+0x30c>)
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053ba:	4a5b      	ldr	r2, [pc, #364]	; (8005528 <HAL_GPIO_Init+0x310>)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	089b      	lsrs	r3, r3, #2
 80053c0:	3302      	adds	r3, #2
 80053c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	220f      	movs	r2, #15
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a52      	ldr	r2, [pc, #328]	; (800552c <HAL_GPIO_Init+0x314>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02b      	beq.n	800543e <HAL_GPIO_Init+0x226>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a51      	ldr	r2, [pc, #324]	; (8005530 <HAL_GPIO_Init+0x318>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d025      	beq.n	800543a <HAL_GPIO_Init+0x222>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a50      	ldr	r2, [pc, #320]	; (8005534 <HAL_GPIO_Init+0x31c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01f      	beq.n	8005436 <HAL_GPIO_Init+0x21e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a4f      	ldr	r2, [pc, #316]	; (8005538 <HAL_GPIO_Init+0x320>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d019      	beq.n	8005432 <HAL_GPIO_Init+0x21a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a4e      	ldr	r2, [pc, #312]	; (800553c <HAL_GPIO_Init+0x324>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_GPIO_Init+0x216>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a4d      	ldr	r2, [pc, #308]	; (8005540 <HAL_GPIO_Init+0x328>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00d      	beq.n	800542a <HAL_GPIO_Init+0x212>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a4c      	ldr	r2, [pc, #304]	; (8005544 <HAL_GPIO_Init+0x32c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <HAL_GPIO_Init+0x20e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a4b      	ldr	r2, [pc, #300]	; (8005548 <HAL_GPIO_Init+0x330>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d101      	bne.n	8005422 <HAL_GPIO_Init+0x20a>
 800541e:	2307      	movs	r3, #7
 8005420:	e00e      	b.n	8005440 <HAL_GPIO_Init+0x228>
 8005422:	2308      	movs	r3, #8
 8005424:	e00c      	b.n	8005440 <HAL_GPIO_Init+0x228>
 8005426:	2306      	movs	r3, #6
 8005428:	e00a      	b.n	8005440 <HAL_GPIO_Init+0x228>
 800542a:	2305      	movs	r3, #5
 800542c:	e008      	b.n	8005440 <HAL_GPIO_Init+0x228>
 800542e:	2304      	movs	r3, #4
 8005430:	e006      	b.n	8005440 <HAL_GPIO_Init+0x228>
 8005432:	2303      	movs	r3, #3
 8005434:	e004      	b.n	8005440 <HAL_GPIO_Init+0x228>
 8005436:	2302      	movs	r3, #2
 8005438:	e002      	b.n	8005440 <HAL_GPIO_Init+0x228>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_GPIO_Init+0x228>
 800543e:	2300      	movs	r3, #0
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	f002 0203 	and.w	r2, r2, #3
 8005446:	0092      	lsls	r2, r2, #2
 8005448:	4093      	lsls	r3, r2
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005450:	4935      	ldr	r1, [pc, #212]	; (8005528 <HAL_GPIO_Init+0x310>)
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	089b      	lsrs	r3, r3, #2
 8005456:	3302      	adds	r3, #2
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800545e:	4b3b      	ldr	r3, [pc, #236]	; (800554c <HAL_GPIO_Init+0x334>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	43db      	mvns	r3, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	4013      	ands	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005482:	4a32      	ldr	r2, [pc, #200]	; (800554c <HAL_GPIO_Init+0x334>)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005488:	4b30      	ldr	r3, [pc, #192]	; (800554c <HAL_GPIO_Init+0x334>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	43db      	mvns	r3, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4013      	ands	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054ac:	4a27      	ldr	r2, [pc, #156]	; (800554c <HAL_GPIO_Init+0x334>)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054b2:	4b26      	ldr	r3, [pc, #152]	; (800554c <HAL_GPIO_Init+0x334>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054d6:	4a1d      	ldr	r2, [pc, #116]	; (800554c <HAL_GPIO_Init+0x334>)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054dc:	4b1b      	ldr	r3, [pc, #108]	; (800554c <HAL_GPIO_Init+0x334>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005500:	4a12      	ldr	r2, [pc, #72]	; (800554c <HAL_GPIO_Init+0x334>)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3301      	adds	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b0f      	cmp	r3, #15
 8005510:	f67f ae90 	bls.w	8005234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3724      	adds	r7, #36	; 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800
 8005528:	40013800 	.word	0x40013800
 800552c:	40020000 	.word	0x40020000
 8005530:	40020400 	.word	0x40020400
 8005534:	40020800 	.word	0x40020800
 8005538:	40020c00 	.word	0x40020c00
 800553c:	40021000 	.word	0x40021000
 8005540:	40021400 	.word	0x40021400
 8005544:	40021800 	.word	0x40021800
 8005548:	40021c00 	.word	0x40021c00
 800554c:	40013c00 	.word	0x40013c00

08005550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	807b      	strh	r3, [r7, #2]
 800555c:	4613      	mov	r3, r2
 800555e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005560:	787b      	ldrb	r3, [r7, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005566:	887a      	ldrh	r2, [r7, #2]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800556c:	e003      	b.n	8005576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800556e:	887b      	ldrh	r3, [r7, #2]
 8005570:	041a      	lsls	r2, r3, #16
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	619a      	str	r2, [r3, #24]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e267      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d075      	beq.n	800568e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055a2:	4b88      	ldr	r3, [pc, #544]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d00c      	beq.n	80055c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ae:	4b85      	ldr	r3, [pc, #532]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d112      	bne.n	80055e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ba:	4b82      	ldr	r3, [pc, #520]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c6:	d10b      	bne.n	80055e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c8:	4b7e      	ldr	r3, [pc, #504]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d05b      	beq.n	800568c <HAL_RCC_OscConfig+0x108>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d157      	bne.n	800568c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e242      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d106      	bne.n	80055f8 <HAL_RCC_OscConfig+0x74>
 80055ea:	4b76      	ldr	r3, [pc, #472]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a75      	ldr	r2, [pc, #468]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e01d      	b.n	8005634 <HAL_RCC_OscConfig+0xb0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005600:	d10c      	bne.n	800561c <HAL_RCC_OscConfig+0x98>
 8005602:	4b70      	ldr	r3, [pc, #448]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a6f      	ldr	r2, [pc, #444]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4b6d      	ldr	r3, [pc, #436]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6c      	ldr	r2, [pc, #432]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e00b      	b.n	8005634 <HAL_RCC_OscConfig+0xb0>
 800561c:	4b69      	ldr	r3, [pc, #420]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a68      	ldr	r2, [pc, #416]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	4b66      	ldr	r3, [pc, #408]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a65      	ldr	r2, [pc, #404]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 800562e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d013      	beq.n	8005664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7ff fc3c 	bl	8004eb8 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005644:	f7ff fc38 	bl	8004eb8 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b64      	cmp	r3, #100	; 0x64
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e207      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005656:	4b5b      	ldr	r3, [pc, #364]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCC_OscConfig+0xc0>
 8005662:	e014      	b.n	800568e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005664:	f7ff fc28 	bl	8004eb8 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800566c:	f7ff fc24 	bl	8004eb8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b64      	cmp	r3, #100	; 0x64
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e1f3      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800567e:	4b51      	ldr	r3, [pc, #324]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0xe8>
 800568a:	e000      	b.n	800568e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800568c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d063      	beq.n	8005762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800569a:	4b4a      	ldr	r3, [pc, #296]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056a6:	4b47      	ldr	r3, [pc, #284]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d11c      	bne.n	80056ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056b2:	4b44      	ldr	r3, [pc, #272]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d116      	bne.n	80056ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056be:	4b41      	ldr	r3, [pc, #260]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_RCC_OscConfig+0x152>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d001      	beq.n	80056d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e1c7      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d6:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4937      	ldr	r1, [pc, #220]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ea:	e03a      	b.n	8005762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d020      	beq.n	8005736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056f4:	4b34      	ldr	r3, [pc, #208]	; (80057c8 <HAL_RCC_OscConfig+0x244>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fa:	f7ff fbdd 	bl	8004eb8 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005702:	f7ff fbd9 	bl	8004eb8 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e1a8      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005714:	4b2b      	ldr	r3, [pc, #172]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005720:	4b28      	ldr	r3, [pc, #160]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4925      	ldr	r1, [pc, #148]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005730:	4313      	orrs	r3, r2
 8005732:	600b      	str	r3, [r1, #0]
 8005734:	e015      	b.n	8005762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <HAL_RCC_OscConfig+0x244>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7ff fbbc 	bl	8004eb8 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005744:	f7ff fbb8 	bl	8004eb8 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e187      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f0      	bne.n	8005744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d036      	beq.n	80057dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <HAL_RCC_OscConfig+0x248>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7ff fb9c 	bl	8004eb8 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005784:	f7ff fb98 	bl	8004eb8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e167      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x200>
 80057a2:	e01b      	b.n	80057dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_RCC_OscConfig+0x248>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057aa:	f7ff fb85 	bl	8004eb8 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b0:	e00e      	b.n	80057d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b2:	f7ff fb81 	bl	8004eb8 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d907      	bls.n	80057d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e150      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
 80057c4:	40023800 	.word	0x40023800
 80057c8:	42470000 	.word	0x42470000
 80057cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d0:	4b88      	ldr	r3, [pc, #544]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 80057d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ea      	bne.n	80057b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8097 	beq.w	8005918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ee:	4b81      	ldr	r3, [pc, #516]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10f      	bne.n	800581a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057fa:	2300      	movs	r3, #0
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	4b7d      	ldr	r3, [pc, #500]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	4a7c      	ldr	r2, [pc, #496]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005808:	6413      	str	r3, [r2, #64]	; 0x40
 800580a:	4b7a      	ldr	r3, [pc, #488]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800581a:	4b77      	ldr	r3, [pc, #476]	; (80059f8 <HAL_RCC_OscConfig+0x474>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d118      	bne.n	8005858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005826:	4b74      	ldr	r3, [pc, #464]	; (80059f8 <HAL_RCC_OscConfig+0x474>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a73      	ldr	r2, [pc, #460]	; (80059f8 <HAL_RCC_OscConfig+0x474>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005832:	f7ff fb41 	bl	8004eb8 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583a:	f7ff fb3d 	bl	8004eb8 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e10c      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584c:	4b6a      	ldr	r3, [pc, #424]	; (80059f8 <HAL_RCC_OscConfig+0x474>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d106      	bne.n	800586e <HAL_RCC_OscConfig+0x2ea>
 8005860:	4b64      	ldr	r3, [pc, #400]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	4a63      	ldr	r2, [pc, #396]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6713      	str	r3, [r2, #112]	; 0x70
 800586c:	e01c      	b.n	80058a8 <HAL_RCC_OscConfig+0x324>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b05      	cmp	r3, #5
 8005874:	d10c      	bne.n	8005890 <HAL_RCC_OscConfig+0x30c>
 8005876:	4b5f      	ldr	r3, [pc, #380]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4a5e      	ldr	r2, [pc, #376]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 800587c:	f043 0304 	orr.w	r3, r3, #4
 8005880:	6713      	str	r3, [r2, #112]	; 0x70
 8005882:	4b5c      	ldr	r3, [pc, #368]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	4a5b      	ldr	r2, [pc, #364]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6713      	str	r3, [r2, #112]	; 0x70
 800588e:	e00b      	b.n	80058a8 <HAL_RCC_OscConfig+0x324>
 8005890:	4b58      	ldr	r3, [pc, #352]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	4a57      	ldr	r2, [pc, #348]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	6713      	str	r3, [r2, #112]	; 0x70
 800589c:	4b55      	ldr	r3, [pc, #340]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	4a54      	ldr	r2, [pc, #336]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 80058a2:	f023 0304 	bic.w	r3, r3, #4
 80058a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d015      	beq.n	80058dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7ff fb02 	bl	8004eb8 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b8:	f7ff fafe 	bl	8004eb8 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e0cb      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ce:	4b49      	ldr	r3, [pc, #292]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0ee      	beq.n	80058b8 <HAL_RCC_OscConfig+0x334>
 80058da:	e014      	b.n	8005906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058dc:	f7ff faec 	bl	8004eb8 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e2:	e00a      	b.n	80058fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7ff fae8 	bl	8004eb8 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e0b5      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fa:	4b3e      	ldr	r3, [pc, #248]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1ee      	bne.n	80058e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d105      	bne.n	8005918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590c:	4b39      	ldr	r3, [pc, #228]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	4a38      	ldr	r2, [pc, #224]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80a1 	beq.w	8005a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005922:	4b34      	ldr	r3, [pc, #208]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b08      	cmp	r3, #8
 800592c:	d05c      	beq.n	80059e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d141      	bne.n	80059ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005936:	4b31      	ldr	r3, [pc, #196]	; (80059fc <HAL_RCC_OscConfig+0x478>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593c:	f7ff fabc 	bl	8004eb8 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005944:	f7ff fab8 	bl	8004eb8 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e087      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005956:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	019b      	lsls	r3, r3, #6
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	3b01      	subs	r3, #1
 800597c:	041b      	lsls	r3, r3, #16
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	061b      	lsls	r3, r3, #24
 8005986:	491b      	ldr	r1, [pc, #108]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598c:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <HAL_RCC_OscConfig+0x478>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005992:	f7ff fa91 	bl	8004eb8 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800599a:	f7ff fa8d 	bl	8004eb8 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e05c      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ac:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x416>
 80059b8:	e054      	b.n	8005a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b10      	ldr	r3, [pc, #64]	; (80059fc <HAL_RCC_OscConfig+0x478>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7ff fa7a 	bl	8004eb8 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c8:	f7ff fa76 	bl	8004eb8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e045      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <HAL_RCC_OscConfig+0x470>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x444>
 80059e6:	e03d      	b.n	8005a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e038      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40007000 	.word	0x40007000
 80059fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a00:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <HAL_RCC_OscConfig+0x4ec>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d028      	beq.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d121      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d11a      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d111      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800

08005a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0cc      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a88:	4b68      	ldr	r3, [pc, #416]	; (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d90c      	bls.n	8005ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a96:	4b65      	ldr	r3, [pc, #404]	; (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9e:	4b63      	ldr	r3, [pc, #396]	; (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0b8      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d020      	beq.n	8005afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ac8:	4b59      	ldr	r3, [pc, #356]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4a58      	ldr	r2, [pc, #352]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ae0:	4b53      	ldr	r3, [pc, #332]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	4a52      	ldr	r2, [pc, #328]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aec:	4b50      	ldr	r3, [pc, #320]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	494d      	ldr	r1, [pc, #308]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d044      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d107      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	4b47      	ldr	r3, [pc, #284]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d119      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e07f      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d003      	beq.n	8005b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d107      	bne.n	8005b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b32:	4b3f      	ldr	r3, [pc, #252]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e06f      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b42:	4b3b      	ldr	r3, [pc, #236]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e067      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b52:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f023 0203 	bic.w	r2, r3, #3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	4934      	ldr	r1, [pc, #208]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b64:	f7ff f9a8 	bl	8004eb8 <HAL_GetTick>
 8005b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b6c:	f7ff f9a4 	bl	8004eb8 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e04f      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b82:	4b2b      	ldr	r3, [pc, #172]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 020c 	and.w	r2, r3, #12
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d1eb      	bne.n	8005b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b94:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d20c      	bcs.n	8005bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b22      	ldr	r3, [pc, #136]	; (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005baa:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d001      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e032      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bc8:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4916      	ldr	r1, [pc, #88]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005be6:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	490e      	ldr	r1, [pc, #56]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bfa:	f000 f82d 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	490a      	ldr	r1, [pc, #40]	; (8005c34 <HAL_RCC_ClockConfig+0x1c0>)
 8005c0c:	5ccb      	ldrb	r3, [r1, r3]
 8005c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c12:	4a09      	ldr	r2, [pc, #36]	; (8005c38 <HAL_RCC_ClockConfig+0x1c4>)
 8005c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <HAL_RCC_ClockConfig+0x1c8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff f908 	bl	8004e30 <HAL_InitTick>

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40023c00 	.word	0x40023c00
 8005c30:	40023800 	.word	0x40023800
 8005c34:	0800ec80 	.word	0x0800ec80
 8005c38:	20000000 	.word	0x20000000
 8005c3c:	20000004 	.word	0x20000004

08005c40 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005c44:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <HAL_RCC_EnableCSS+0x14>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	4247004c 	.word	0x4247004c

08005c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c5c:	b094      	sub	sp, #80	; 0x50
 8005c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	647b      	str	r3, [r7, #68]	; 0x44
 8005c64:	2300      	movs	r3, #0
 8005c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c68:	2300      	movs	r3, #0
 8005c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c70:	4b79      	ldr	r3, [pc, #484]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d00d      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x40>
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	f200 80e1 	bhi.w	8005e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x34>
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d003      	beq.n	8005c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c8a:	e0db      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c8c:	4b73      	ldr	r3, [pc, #460]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c90:	e0db      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c92:	4b72      	ldr	r3, [pc, #456]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c96:	e0d8      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c98:	4b6f      	ldr	r3, [pc, #444]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ca2:	4b6d      	ldr	r3, [pc, #436]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d063      	beq.n	8005d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cae:	4b6a      	ldr	r3, [pc, #424]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	099b      	lsrs	r3, r3, #6
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005cca:	4622      	mov	r2, r4
 8005ccc:	462b      	mov	r3, r5
 8005cce:	f04f 0000 	mov.w	r0, #0
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	0159      	lsls	r1, r3, #5
 8005cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cdc:	0150      	lsls	r0, r2, #5
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	1a51      	subs	r1, r2, r1
 8005ce6:	6139      	str	r1, [r7, #16]
 8005ce8:	4629      	mov	r1, r5
 8005cea:	eb63 0301 	sbc.w	r3, r3, r1
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	018b      	lsls	r3, r1, #6
 8005d00:	4651      	mov	r1, sl
 8005d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d06:	4651      	mov	r1, sl
 8005d08:	018a      	lsls	r2, r1, #6
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8005d10:	4659      	mov	r1, fp
 8005d12:	eb63 0901 	sbc.w	r9, r3, r1
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d2a:	4690      	mov	r8, r2
 8005d2c:	4699      	mov	r9, r3
 8005d2e:	4623      	mov	r3, r4
 8005d30:	eb18 0303 	adds.w	r3, r8, r3
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	462b      	mov	r3, r5
 8005d38:	eb49 0303 	adc.w	r3, r9, r3
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	028b      	lsls	r3, r1, #10
 8005d4e:	4621      	mov	r1, r4
 8005d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d54:	4621      	mov	r1, r4
 8005d56:	028a      	lsls	r2, r1, #10
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5e:	2200      	movs	r2, #0
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d68:	f7fa ff8e 	bl	8000c88 <__aeabi_uldivmod>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4613      	mov	r3, r2
 8005d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d74:	e058      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d76:	4b38      	ldr	r3, [pc, #224]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	099b      	lsrs	r3, r3, #6
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	4611      	mov	r1, r2
 8005d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d90:	4642      	mov	r2, r8
 8005d92:	464b      	mov	r3, r9
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	0159      	lsls	r1, r3, #5
 8005d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da2:	0150      	lsls	r0, r2, #5
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4641      	mov	r1, r8
 8005daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dae:	4649      	mov	r1, r9
 8005db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8005dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	00eb      	lsls	r3, r5, #3
 8005dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dde:	00e2      	lsls	r2, r4, #3
 8005de0:	4614      	mov	r4, r2
 8005de2:	461d      	mov	r5, r3
 8005de4:	4643      	mov	r3, r8
 8005de6:	18e3      	adds	r3, r4, r3
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	464b      	mov	r3, r9
 8005dec:	eb45 0303 	adc.w	r3, r5, r3
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dfe:	4629      	mov	r1, r5
 8005e00:	028b      	lsls	r3, r1, #10
 8005e02:	4621      	mov	r1, r4
 8005e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e08:	4621      	mov	r1, r4
 8005e0a:	028a      	lsls	r2, r1, #10
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e12:	2200      	movs	r2, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	61fa      	str	r2, [r7, #28]
 8005e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e1c:	f7fa ff34 	bl	8000c88 <__aeabi_uldivmod>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4613      	mov	r3, r2
 8005e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e28:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	3301      	adds	r3, #1
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e42:	e002      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3750      	adds	r7, #80	; 0x50
 8005e50:	46bd      	mov	sp, r7
 8005e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	00f42400 	.word	0x00f42400

08005e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e66:	681b      	ldr	r3, [r3, #0]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000000 	.word	0x20000000

08005e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e7c:	f7ff fff0 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005e80:	4602      	mov	r2, r0
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	0a9b      	lsrs	r3, r3, #10
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	4903      	ldr	r1, [pc, #12]	; (8005e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e8e:	5ccb      	ldrb	r3, [r1, r3]
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	0800ec90 	.word	0x0800ec90

08005ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ea4:	f7ff ffdc 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	0b5b      	lsrs	r3, r3, #13
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	4903      	ldr	r1, [pc, #12]	; (8005ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eb6:	5ccb      	ldrb	r3, [r1, r3]
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	0800ec90 	.word	0x0800ec90

08005ec8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed4:	2b80      	cmp	r3, #128	; 0x80
 8005ed6:	d104      	bne.n	8005ee2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005ed8:	f000 f80a 	bl	8005ef0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <HAL_RCC_NMI_IRQHandler+0x24>)
 8005ede:	2280      	movs	r2, #128	; 0x80
 8005ee0:	701a      	strb	r2, [r3, #0]
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	4002380e 	.word	0x4002380e

08005ef0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e041      	b.n	8005f94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fb faf7 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f000 fad9 	bl	80064f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e041      	b.n	8006032 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f839 	bl	800603a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f000 fa8a 	bl	80064f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HAL_TIM_PWM_Start+0x24>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	e022      	b.n	80060ba <HAL_TIM_PWM_Start+0x6a>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b04      	cmp	r3, #4
 8006078:	d109      	bne.n	800608e <HAL_TIM_PWM_Start+0x3e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	bf14      	ite	ne
 8006086:	2301      	movne	r3, #1
 8006088:	2300      	moveq	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	e015      	b.n	80060ba <HAL_TIM_PWM_Start+0x6a>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b08      	cmp	r3, #8
 8006092:	d109      	bne.n	80060a8 <HAL_TIM_PWM_Start+0x58>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	e008      	b.n	80060ba <HAL_TIM_PWM_Start+0x6a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e07c      	b.n	80061bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <HAL_TIM_PWM_Start+0x82>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d0:	e013      	b.n	80060fa <HAL_TIM_PWM_Start+0xaa>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d104      	bne.n	80060e2 <HAL_TIM_PWM_Start+0x92>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e0:	e00b      	b.n	80060fa <HAL_TIM_PWM_Start+0xaa>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_PWM_Start+0xa2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	e003      	b.n	80060fa <HAL_TIM_PWM_Start+0xaa>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2201      	movs	r2, #1
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fce0 	bl	8006ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2d      	ldr	r2, [pc, #180]	; (80061c4 <HAL_TIM_PWM_Start+0x174>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <HAL_TIM_PWM_Start+0xcc>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2c      	ldr	r2, [pc, #176]	; (80061c8 <HAL_TIM_PWM_Start+0x178>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d101      	bne.n	8006120 <HAL_TIM_PWM_Start+0xd0>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <HAL_TIM_PWM_Start+0xd2>
 8006120:	2300      	movs	r3, #0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a22      	ldr	r2, [pc, #136]	; (80061c4 <HAL_TIM_PWM_Start+0x174>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d022      	beq.n	8006186 <HAL_TIM_PWM_Start+0x136>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d01d      	beq.n	8006186 <HAL_TIM_PWM_Start+0x136>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <HAL_TIM_PWM_Start+0x17c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_TIM_PWM_Start+0x136>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <HAL_TIM_PWM_Start+0x180>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_TIM_PWM_Start+0x136>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <HAL_TIM_PWM_Start+0x184>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_TIM_PWM_Start+0x136>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <HAL_TIM_PWM_Start+0x178>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_TIM_PWM_Start+0x136>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <HAL_TIM_PWM_Start+0x188>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIM_PWM_Start+0x136>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a16      	ldr	r2, [pc, #88]	; (80061dc <HAL_TIM_PWM_Start+0x18c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d111      	bne.n	80061aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b06      	cmp	r3, #6
 8006196:	d010      	beq.n	80061ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a8:	e007      	b.n	80061ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40010400 	.word	0x40010400
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40001800 	.word	0x40001800

080061e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e0ae      	b.n	800635c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b0c      	cmp	r3, #12
 800620a:	f200 809f 	bhi.w	800634c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800620e:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006249 	.word	0x08006249
 8006218:	0800634d 	.word	0x0800634d
 800621c:	0800634d 	.word	0x0800634d
 8006220:	0800634d 	.word	0x0800634d
 8006224:	08006289 	.word	0x08006289
 8006228:	0800634d 	.word	0x0800634d
 800622c:	0800634d 	.word	0x0800634d
 8006230:	0800634d 	.word	0x0800634d
 8006234:	080062cb 	.word	0x080062cb
 8006238:	0800634d 	.word	0x0800634d
 800623c:	0800634d 	.word	0x0800634d
 8006240:	0800634d 	.word	0x0800634d
 8006244:	0800630b 	.word	0x0800630b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f9f0 	bl	8006634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0208 	orr.w	r2, r2, #8
 8006262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0204 	bic.w	r2, r2, #4
 8006272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6999      	ldr	r1, [r3, #24]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	619a      	str	r2, [r3, #24]
      break;
 8006286:	e064      	b.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fa40 	bl	8006714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6999      	ldr	r1, [r3, #24]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	021a      	lsls	r2, r3, #8
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	619a      	str	r2, [r3, #24]
      break;
 80062c8:	e043      	b.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fa95 	bl	8006800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0208 	orr.w	r2, r2, #8
 80062e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0204 	bic.w	r2, r2, #4
 80062f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69d9      	ldr	r1, [r3, #28]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	61da      	str	r2, [r3, #28]
      break;
 8006308:	e023      	b.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fae9 	bl	80068e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69d9      	ldr	r1, [r3, #28]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	021a      	lsls	r2, r3, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	61da      	str	r2, [r3, #28]
      break;
 800634a:	e002      	b.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
      break;
 8006350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800635a:	7dfb      	ldrb	r3, [r7, #23]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_TIM_ConfigClockSource+0x1c>
 800637c:	2302      	movs	r3, #2
 800637e:	e0b4      	b.n	80064ea <HAL_TIM_ConfigClockSource+0x186>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800639e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b8:	d03e      	beq.n	8006438 <HAL_TIM_ConfigClockSource+0xd4>
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063be:	f200 8087 	bhi.w	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	f000 8086 	beq.w	80064d6 <HAL_TIM_ConfigClockSource+0x172>
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d87f      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	2b70      	cmp	r3, #112	; 0x70
 80063d2:	d01a      	beq.n	800640a <HAL_TIM_ConfigClockSource+0xa6>
 80063d4:	2b70      	cmp	r3, #112	; 0x70
 80063d6:	d87b      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d8:	2b60      	cmp	r3, #96	; 0x60
 80063da:	d050      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x11a>
 80063dc:	2b60      	cmp	r3, #96	; 0x60
 80063de:	d877      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
 80063e0:	2b50      	cmp	r3, #80	; 0x50
 80063e2:	d03c      	beq.n	800645e <HAL_TIM_ConfigClockSource+0xfa>
 80063e4:	2b50      	cmp	r3, #80	; 0x50
 80063e6:	d873      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d058      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x13a>
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d86f      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
 80063f0:	2b30      	cmp	r3, #48	; 0x30
 80063f2:	d064      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x15a>
 80063f4:	2b30      	cmp	r3, #48	; 0x30
 80063f6:	d86b      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d060      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x15a>
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d867      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d05c      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x15a>
 8006404:	2b10      	cmp	r3, #16
 8006406:	d05a      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x15a>
 8006408:	e062      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6899      	ldr	r1, [r3, #8]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f000 fb35 	bl	8006a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800642c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	609a      	str	r2, [r3, #8]
      break;
 8006436:	e04f      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	6899      	ldr	r1, [r3, #8]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f000 fb1e 	bl	8006a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800645a:	609a      	str	r2, [r3, #8]
      break;
 800645c:	e03c      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	461a      	mov	r2, r3
 800646c:	f000 fa92 	bl	8006994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2150      	movs	r1, #80	; 0x50
 8006476:	4618      	mov	r0, r3
 8006478:	f000 faeb 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 800647c:	e02c      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	461a      	mov	r2, r3
 800648c:	f000 fab1 	bl	80069f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2160      	movs	r1, #96	; 0x60
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fadb 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 800649c:	e01c      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fa72 	bl	8006994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2140      	movs	r1, #64	; 0x40
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 facb 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 80064bc:	e00c      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f000 fac2 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 80064ce:	e003      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	e000      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a40      	ldr	r2, [pc, #256]	; (8006608 <TIM_Base_SetConfig+0x114>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006512:	d00f      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a3d      	ldr	r2, [pc, #244]	; (800660c <TIM_Base_SetConfig+0x118>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00b      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a3c      	ldr	r2, [pc, #240]	; (8006610 <TIM_Base_SetConfig+0x11c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a3b      	ldr	r2, [pc, #236]	; (8006614 <TIM_Base_SetConfig+0x120>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a3a      	ldr	r2, [pc, #232]	; (8006618 <TIM_Base_SetConfig+0x124>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2f      	ldr	r2, [pc, #188]	; (8006608 <TIM_Base_SetConfig+0x114>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d02b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d027      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2c      	ldr	r2, [pc, #176]	; (800660c <TIM_Base_SetConfig+0x118>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d023      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a2b      	ldr	r2, [pc, #172]	; (8006610 <TIM_Base_SetConfig+0x11c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01f      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2a      	ldr	r2, [pc, #168]	; (8006614 <TIM_Base_SetConfig+0x120>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a29      	ldr	r2, [pc, #164]	; (8006618 <TIM_Base_SetConfig+0x124>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d017      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a28      	ldr	r2, [pc, #160]	; (800661c <TIM_Base_SetConfig+0x128>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a27      	ldr	r2, [pc, #156]	; (8006620 <TIM_Base_SetConfig+0x12c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00f      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a26      	ldr	r2, [pc, #152]	; (8006624 <TIM_Base_SetConfig+0x130>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00b      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a25      	ldr	r2, [pc, #148]	; (8006628 <TIM_Base_SetConfig+0x134>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a24      	ldr	r2, [pc, #144]	; (800662c <TIM_Base_SetConfig+0x138>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <TIM_Base_SetConfig+0x13c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d108      	bne.n	80065b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <TIM_Base_SetConfig+0x114>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_Base_SetConfig+0xf8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <TIM_Base_SetConfig+0x124>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d103      	bne.n	80065f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	615a      	str	r2, [r3, #20]
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40010400 	.word	0x40010400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800
 8006628:	40001800 	.word	0x40001800
 800662c:	40001c00 	.word	0x40001c00
 8006630:	40002000 	.word	0x40002000

08006634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f023 0201 	bic.w	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0302 	bic.w	r3, r3, #2
 800667c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a20      	ldr	r2, [pc, #128]	; (800670c <TIM_OC1_SetConfig+0xd8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_OC1_SetConfig+0x64>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <TIM_OC1_SetConfig+0xdc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d10c      	bne.n	80066b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0308 	bic.w	r3, r3, #8
 800669e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f023 0304 	bic.w	r3, r3, #4
 80066b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a15      	ldr	r2, [pc, #84]	; (800670c <TIM_OC1_SetConfig+0xd8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC1_SetConfig+0x8e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a14      	ldr	r2, [pc, #80]	; (8006710 <TIM_OC1_SetConfig+0xdc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d111      	bne.n	80066e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400

08006714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0210 	bic.w	r2, r3, #16
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0320 	bic.w	r3, r3, #32
 800675e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <TIM_OC2_SetConfig+0xe4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d003      	beq.n	800677c <TIM_OC2_SetConfig+0x68>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a21      	ldr	r2, [pc, #132]	; (80067fc <TIM_OC2_SetConfig+0xe8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d10d      	bne.n	8006798 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <TIM_OC2_SetConfig+0xe4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_OC2_SetConfig+0x94>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a16      	ldr	r2, [pc, #88]	; (80067fc <TIM_OC2_SetConfig+0xe8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d113      	bne.n	80067d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	621a      	str	r2, [r3, #32]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40010000 	.word	0x40010000
 80067fc:	40010400 	.word	0x40010400

08006800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a21      	ldr	r2, [pc, #132]	; (80068e0 <TIM_OC3_SetConfig+0xe0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x66>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a20      	ldr	r2, [pc, #128]	; (80068e4 <TIM_OC3_SetConfig+0xe4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d10d      	bne.n	8006882 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800686c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a16      	ldr	r2, [pc, #88]	; (80068e0 <TIM_OC3_SetConfig+0xe0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_OC3_SetConfig+0x92>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <TIM_OC3_SetConfig+0xe4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d113      	bne.n	80068ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	621a      	str	r2, [r3, #32]
}
 80068d4:	bf00      	nop
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40010400 	.word	0x40010400

080068e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	031b      	lsls	r3, r3, #12
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a12      	ldr	r2, [pc, #72]	; (800698c <TIM_OC4_SetConfig+0xa4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_OC4_SetConfig+0x68>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a11      	ldr	r2, [pc, #68]	; (8006990 <TIM_OC4_SetConfig+0xa8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d109      	bne.n	8006964 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	019b      	lsls	r3, r3, #6
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40010000 	.word	0x40010000
 8006990:	40010400 	.word	0x40010400

08006994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0201 	bic.w	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 030a 	bic.w	r3, r3, #10
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0210 	bic.w	r2, r3, #16
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f043 0307 	orr.w	r3, r3, #7
 8006a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	609a      	str	r2, [r3, #8]
}
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	021a      	lsls	r2, r3, #8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	609a      	str	r2, [r3, #8]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	2201      	movs	r2, #1
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	401a      	ands	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	431a      	orrs	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	621a      	str	r2, [r3, #32]
}
 8006b06:	bf00      	nop
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e05a      	b.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b78:	d01d      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1b      	ldr	r2, [pc, #108]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40000c00 	.word	0x40000c00
 8006c00:	40010400 	.word	0x40010400
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40001800 	.word	0x40001800

08006c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e03f      	b.n	8006c9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fa fcf6 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fddf 	bl	8007814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b08a      	sub	sp, #40	; 0x28
 8006caa:	af02      	add	r7, sp, #8
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d17c      	bne.n	8006dc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <HAL_UART_Transmit+0x2c>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e075      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_UART_Transmit+0x3e>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e06e      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2221      	movs	r2, #33	; 0x21
 8006cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cfa:	f7fe f8dd 	bl	8004eb8 <HAL_GetTick>
 8006cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	88fa      	ldrh	r2, [r7, #6]
 8006d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d14:	d108      	bne.n	8006d28 <HAL_UART_Transmit+0x82>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e003      	b.n	8006d30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d38:	e02a      	b.n	8006d90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2200      	movs	r2, #0
 8006d42:	2180      	movs	r1, #128	; 0x80
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fb1f 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e036      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10b      	bne.n	8006d72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	e007      	b.n	8006d82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1cf      	bne.n	8006d3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2140      	movs	r1, #64	; 0x40
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 faef 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e006      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d11d      	bne.n	8006e20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_UART_Receive_IT+0x26>
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e016      	b.n	8006e22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Receive_IT+0x38>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e00f      	b.n	8006e22 <HAL_UART_Receive_IT+0x58>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	461a      	mov	r2, r3
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fb24 	bl	8007464 <UART_Start_Receive_IT>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	e000      	b.n	8006e22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b0ba      	sub	sp, #232	; 0xe8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10f      	bne.n	8006e92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <HAL_UART_IRQHandler+0x66>
 8006e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fc07 	bl	800769e <UART_Receive_IT>
      return;
 8006e90:	e256      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80de 	beq.w	8007058 <HAL_UART_IRQHandler+0x22c>
 8006e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80d1 	beq.w	8007058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <HAL_UART_IRQHandler+0xae>
 8006ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f043 0201 	orr.w	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <HAL_UART_IRQHandler+0xd2>
 8006ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f043 0202 	orr.w	r2, r3, #2
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <HAL_UART_IRQHandler+0xf6>
 8006f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	f043 0204 	orr.w	r2, r3, #4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d011      	beq.n	8006f52 <HAL_UART_IRQHandler+0x126>
 8006f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f043 0208 	orr.w	r2, r3, #8
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 81ed 	beq.w	8007336 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <HAL_UART_IRQHandler+0x14e>
 8006f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fb92 	bl	800769e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	bf0c      	ite	eq
 8006f88:	2301      	moveq	r3, #1
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x17a>
 8006f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d04f      	beq.n	8007046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa9a 	bl	80074e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	d141      	bne.n	800703e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3314      	adds	r3, #20
 8006fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1d9      	bne.n	8006fba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	2b00      	cmp	r3, #0
 800700c:	d013      	beq.n	8007036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	4a7d      	ldr	r2, [pc, #500]	; (8007208 <HAL_UART_IRQHandler+0x3dc>)
 8007014:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe f8d9 	bl	80051d2 <HAL_DMA_Abort_IT>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e00e      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f990 	bl	800735c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	e00a      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f98c 	bl	800735c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	e006      	b.n	8007054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f988 	bl	800735c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007052:	e170      	b.n	8007336 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	bf00      	nop
    return;
 8007056:	e16e      	b.n	8007336 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	2b01      	cmp	r3, #1
 800705e:	f040 814a 	bne.w	80072f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8143 	beq.w	80072f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 813c 	beq.w	80072f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	f040 80b4 	bne.w	800720c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8140 	beq.w	800733a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070c2:	429a      	cmp	r2, r3
 80070c4:	f080 8139 	bcs.w	800733a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070da:	f000 8088 	beq.w	80071ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800710a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800710e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007116:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1d9      	bne.n	80070de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800713a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3314      	adds	r3, #20
 800714a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800714e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007152:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007156:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e1      	bne.n	800712a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800718a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800718c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e3      	bne.n	8007166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	330c      	adds	r3, #12
 80071cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80071d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80071d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e3      	bne.n	80071ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fd ff82 	bl	80050f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8b6 	bl	8007370 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007204:	e099      	b.n	800733a <HAL_UART_IRQHandler+0x50e>
 8007206:	bf00      	nop
 8007208:	080075a7 	.word	0x080075a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007214:	b29b      	uxth	r3, r3
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 808b 	beq.w	800733e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8086 	beq.w	800733e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007248:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007256:	647a      	str	r2, [r7, #68]	; 0x44
 8007258:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800725c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e3      	bne.n	8007232 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	623b      	str	r3, [r7, #32]
   return(result);
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3314      	adds	r3, #20
 800728a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800728e:	633a      	str	r2, [r7, #48]	; 0x30
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e3      	bne.n	800726a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	60fb      	str	r3, [r7, #12]
   return(result);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	330c      	adds	r3, #12
 80072d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80072d4:	61fa      	str	r2, [r7, #28]
 80072d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	69b9      	ldr	r1, [r7, #24]
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	617b      	str	r3, [r7, #20]
   return(result);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e3      	bne.n	80072b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f83e 	bl	8007370 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072f4:	e023      	b.n	800733e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <HAL_UART_IRQHandler+0x4ea>
 8007302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f95d 	bl	80075ce <UART_Transmit_IT>
    return;
 8007314:	e014      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00e      	beq.n	8007340 <HAL_UART_IRQHandler+0x514>
 8007322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f99d 	bl	800766e <UART_EndTransmit_IT>
    return;
 8007334:	e004      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
    return;
 8007336:	bf00      	nop
 8007338:	e002      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
      return;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <HAL_UART_IRQHandler+0x514>
      return;
 800733e:	bf00      	nop
  }
}
 8007340:	37e8      	adds	r7, #232	; 0xe8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b090      	sub	sp, #64	; 0x40
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007398:	e050      	b.n	800743c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800739a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d04c      	beq.n	800743c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d007      	beq.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80073a8:	f7fd fd86 	bl	8004eb8 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d241      	bcs.n	800743c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	330c      	adds	r3, #12
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	330c      	adds	r3, #12
 80073d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073d8:	637a      	str	r2, [r7, #52]	; 0x34
 80073da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e5      	bne.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3314      	adds	r3, #20
 80073f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	613b      	str	r3, [r7, #16]
   return(result);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	63bb      	str	r3, [r7, #56]	; 0x38
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3314      	adds	r3, #20
 800740a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800740c:	623a      	str	r2, [r7, #32]
 800740e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	6a3a      	ldr	r2, [r7, #32]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	61bb      	str	r3, [r7, #24]
   return(result);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e5      	bne.n	80073ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e00f      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	429a      	cmp	r2, r3
 800744a:	bf0c      	ite	eq
 800744c:	2301      	moveq	r3, #1
 800744e:	2300      	movne	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	429a      	cmp	r2, r3
 8007458:	d09f      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3740      	adds	r7, #64	; 0x40
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2222      	movs	r2, #34	; 0x22
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695a      	ldr	r2, [r3, #20]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0201 	orr.w	r2, r2, #1
 80074c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0220 	orr.w	r2, r2, #32
 80074d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b095      	sub	sp, #84	; 0x54
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007508:	643a      	str	r2, [r7, #64]	; 0x40
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800750e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3314      	adds	r3, #20
 8007522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	61fb      	str	r3, [r7, #28]
   return(result);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	64bb      	str	r3, [r7, #72]	; 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3314      	adds	r3, #20
 800753a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800753e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e5      	bne.n	800751c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	2b01      	cmp	r3, #1
 8007556:	d119      	bne.n	800758c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60bb      	str	r3, [r7, #8]
   return(result);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f023 0310 	bic.w	r3, r3, #16
 800756e:	647b      	str	r3, [r7, #68]	; 0x44
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007578:	61ba      	str	r2, [r7, #24]
 800757a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	613b      	str	r3, [r7, #16]
   return(result);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800759a:	bf00      	nop
 800759c:	3754      	adds	r7, #84	; 0x54
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff fecb 	bl	800735c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b21      	cmp	r3, #33	; 0x21
 80075e0:	d13e      	bne.n	8007660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d114      	bne.n	8007616 <UART_Transmit_IT+0x48>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d110      	bne.n	8007616 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	621a      	str	r2, [r3, #32]
 8007614:	e008      	b.n	8007628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	1c59      	adds	r1, r3, #1
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6211      	str	r1, [r2, #32]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29b      	uxth	r3, r3
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	4619      	mov	r1, r3
 8007636:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10f      	bne.n	800765c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800764a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800765a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff fe5a 	bl	8007348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b08c      	sub	sp, #48	; 0x30
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b22      	cmp	r3, #34	; 0x22
 80076b0:	f040 80ab 	bne.w	800780a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076bc:	d117      	bne.n	80076ee <UART_Receive_IT+0x50>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d113      	bne.n	80076ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e6:	1c9a      	adds	r2, r3, #2
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	629a      	str	r2, [r3, #40]	; 0x28
 80076ec:	e026      	b.n	800773c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007700:	d007      	beq.n	8007712 <UART_Receive_IT+0x74>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <UART_Receive_IT+0x82>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e008      	b.n	8007732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772c:	b2da      	uxtb	r2, r3
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29b      	uxth	r3, r3
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4619      	mov	r1, r3
 800774a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800774c:	2b00      	cmp	r3, #0
 800774e:	d15a      	bne.n	8007806 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0220 	bic.w	r2, r2, #32
 800775e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800776e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	2b01      	cmp	r3, #1
 800778e:	d135      	bne.n	80077fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	613b      	str	r3, [r7, #16]
   return(result);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f023 0310 	bic.w	r3, r3, #16
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	623a      	str	r2, [r7, #32]
 80077b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	69f9      	ldr	r1, [r7, #28]
 80077bc:	6a3a      	ldr	r2, [r7, #32]
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e5      	bne.n	8007796 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d10a      	bne.n	80077ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fdbb 	bl	8007370 <HAL_UARTEx_RxEventCallback>
 80077fa:	e002      	b.n	8007802 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7fa f883 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e002      	b.n	800780c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e000      	b.n	800780c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
  }
}
 800780c:	4618      	mov	r0, r3
 800780e:	3730      	adds	r7, #48	; 0x30
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007818:	b0c0      	sub	sp, #256	; 0x100
 800781a:	af00      	add	r7, sp, #0
 800781c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007830:	68d9      	ldr	r1, [r3, #12]
 8007832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	ea40 0301 	orr.w	r3, r0, r1
 800783c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800783e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	431a      	orrs	r2, r3
 800784c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	431a      	orrs	r2, r3
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800786c:	f021 010c 	bic.w	r1, r1, #12
 8007870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800787a:	430b      	orrs	r3, r1
 800787c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788e:	6999      	ldr	r1, [r3, #24]
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	ea40 0301 	orr.w	r3, r0, r1
 800789a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4b8f      	ldr	r3, [pc, #572]	; (8007ae0 <UART_SetConfig+0x2cc>)
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d005      	beq.n	80078b4 <UART_SetConfig+0xa0>
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b8d      	ldr	r3, [pc, #564]	; (8007ae4 <UART_SetConfig+0x2d0>)
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d104      	bne.n	80078be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fe faf4 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 80078b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078bc:	e003      	b.n	80078c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078be:	f7fe fadb 	bl	8005e78 <HAL_RCC_GetPCLK1Freq>
 80078c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d0:	f040 810c 	bne.w	8007aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078e6:	4622      	mov	r2, r4
 80078e8:	462b      	mov	r3, r5
 80078ea:	1891      	adds	r1, r2, r2
 80078ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80078ee:	415b      	adcs	r3, r3
 80078f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078f6:	4621      	mov	r1, r4
 80078f8:	eb12 0801 	adds.w	r8, r2, r1
 80078fc:	4629      	mov	r1, r5
 80078fe:	eb43 0901 	adc.w	r9, r3, r1
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800790e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007916:	4690      	mov	r8, r2
 8007918:	4699      	mov	r9, r3
 800791a:	4623      	mov	r3, r4
 800791c:	eb18 0303 	adds.w	r3, r8, r3
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007924:	462b      	mov	r3, r5
 8007926:	eb49 0303 	adc.w	r3, r9, r3
 800792a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800792e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800793a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800793e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007942:	460b      	mov	r3, r1
 8007944:	18db      	adds	r3, r3, r3
 8007946:	653b      	str	r3, [r7, #80]	; 0x50
 8007948:	4613      	mov	r3, r2
 800794a:	eb42 0303 	adc.w	r3, r2, r3
 800794e:	657b      	str	r3, [r7, #84]	; 0x54
 8007950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007958:	f7f9 f996 	bl	8000c88 <__aeabi_uldivmod>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4b61      	ldr	r3, [pc, #388]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007962:	fba3 2302 	umull	r2, r3, r3, r2
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	011c      	lsls	r4, r3, #4
 800796a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800796e:	2200      	movs	r2, #0
 8007970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007974:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	1891      	adds	r1, r2, r2
 8007982:	64b9      	str	r1, [r7, #72]	; 0x48
 8007984:	415b      	adcs	r3, r3
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800798c:	4641      	mov	r1, r8
 800798e:	eb12 0a01 	adds.w	sl, r2, r1
 8007992:	4649      	mov	r1, r9
 8007994:	eb43 0b01 	adc.w	fp, r3, r1
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ac:	4692      	mov	sl, r2
 80079ae:	469b      	mov	fp, r3
 80079b0:	4643      	mov	r3, r8
 80079b2:	eb1a 0303 	adds.w	r3, sl, r3
 80079b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ba:	464b      	mov	r3, r9
 80079bc:	eb4b 0303 	adc.w	r3, fp, r3
 80079c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079d8:	460b      	mov	r3, r1
 80079da:	18db      	adds	r3, r3, r3
 80079dc:	643b      	str	r3, [r7, #64]	; 0x40
 80079de:	4613      	mov	r3, r2
 80079e0:	eb42 0303 	adc.w	r3, r2, r3
 80079e4:	647b      	str	r3, [r7, #68]	; 0x44
 80079e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079ee:	f7f9 f94b 	bl	8000c88 <__aeabi_uldivmod>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	4b3b      	ldr	r3, [pc, #236]	; (8007ae8 <UART_SetConfig+0x2d4>)
 80079fa:	fba3 2301 	umull	r2, r3, r3, r1
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	2264      	movs	r2, #100	; 0x64
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	1acb      	subs	r3, r1, r3
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a0e:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007a10:	fba3 2302 	umull	r2, r3, r3, r2
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a1c:	441c      	add	r4, r3
 8007a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	1891      	adds	r1, r2, r2
 8007a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a38:	415b      	adcs	r3, r3
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a40:	4641      	mov	r1, r8
 8007a42:	1851      	adds	r1, r2, r1
 8007a44:	6339      	str	r1, [r7, #48]	; 0x30
 8007a46:	4649      	mov	r1, r9
 8007a48:	414b      	adcs	r3, r1
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a58:	4659      	mov	r1, fp
 8007a5a:	00cb      	lsls	r3, r1, #3
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a62:	4651      	mov	r1, sl
 8007a64:	00ca      	lsls	r2, r1, #3
 8007a66:	4610      	mov	r0, r2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a74:	464b      	mov	r3, r9
 8007a76:	460a      	mov	r2, r1
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a94:	460b      	mov	r3, r1
 8007a96:	18db      	adds	r3, r3, r3
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	eb42 0303 	adc.w	r3, r2, r3
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007aaa:	f7f9 f8ed 	bl	8000c88 <__aeabi_uldivmod>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2164      	movs	r1, #100	; 0x64
 8007abc:	fb01 f303 	mul.w	r3, r1, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	3332      	adds	r3, #50	; 0x32
 8007ac6:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <UART_SetConfig+0x2d4>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	f003 0207 	and.w	r2, r3, #7
 8007ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4422      	add	r2, r4
 8007ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007adc:	e105      	b.n	8007cea <UART_SetConfig+0x4d6>
 8007ade:	bf00      	nop
 8007ae0:	40011000 	.word	0x40011000
 8007ae4:	40011400 	.word	0x40011400
 8007ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007af6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007afe:	4642      	mov	r2, r8
 8007b00:	464b      	mov	r3, r9
 8007b02:	1891      	adds	r1, r2, r2
 8007b04:	6239      	str	r1, [r7, #32]
 8007b06:	415b      	adcs	r3, r3
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b0e:	4641      	mov	r1, r8
 8007b10:	1854      	adds	r4, r2, r1
 8007b12:	4649      	mov	r1, r9
 8007b14:	eb43 0501 	adc.w	r5, r3, r1
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	f04f 0300 	mov.w	r3, #0
 8007b20:	00eb      	lsls	r3, r5, #3
 8007b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b26:	00e2      	lsls	r2, r4, #3
 8007b28:	4614      	mov	r4, r2
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	4643      	mov	r3, r8
 8007b2e:	18e3      	adds	r3, r4, r3
 8007b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b34:	464b      	mov	r3, r9
 8007b36:	eb45 0303 	adc.w	r3, r5, r3
 8007b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	008b      	lsls	r3, r1, #2
 8007b5e:	4621      	mov	r1, r4
 8007b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b64:	4621      	mov	r1, r4
 8007b66:	008a      	lsls	r2, r1, #2
 8007b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b6c:	f7f9 f88c 	bl	8000c88 <__aeabi_uldivmod>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4b60      	ldr	r3, [pc, #384]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007b76:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	011c      	lsls	r4, r3, #4
 8007b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	1891      	adds	r1, r2, r2
 8007b96:	61b9      	str	r1, [r7, #24]
 8007b98:	415b      	adcs	r3, r3
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	1851      	adds	r1, r2, r1
 8007ba4:	6139      	str	r1, [r7, #16]
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	414b      	adcs	r3, r1
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bb8:	4659      	mov	r1, fp
 8007bba:	00cb      	lsls	r3, r1, #3
 8007bbc:	4651      	mov	r1, sl
 8007bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bc2:	4651      	mov	r1, sl
 8007bc4:	00ca      	lsls	r2, r1, #3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4642      	mov	r2, r8
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bd4:	464b      	mov	r3, r9
 8007bd6:	460a      	mov	r2, r1
 8007bd8:	eb42 0303 	adc.w	r3, r2, r3
 8007bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	008b      	lsls	r3, r1, #2
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c02:	4641      	mov	r1, r8
 8007c04:	008a      	lsls	r2, r1, #2
 8007c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c0a:	f7f9 f83d 	bl	8000c88 <__aeabi_uldivmod>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007c14:	fba3 1302 	umull	r1, r3, r3, r2
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	2164      	movs	r1, #100	; 0x64
 8007c1c:	fb01 f303 	mul.w	r3, r1, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	3332      	adds	r3, #50	; 0x32
 8007c26:	4a34      	ldr	r2, [pc, #208]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007c28:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c32:	441c      	add	r4, r3
 8007c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c38:	2200      	movs	r2, #0
 8007c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007c3c:	677a      	str	r2, [r7, #116]	; 0x74
 8007c3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c42:	4642      	mov	r2, r8
 8007c44:	464b      	mov	r3, r9
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c52:	4641      	mov	r1, r8
 8007c54:	1851      	adds	r1, r2, r1
 8007c56:	6039      	str	r1, [r7, #0]
 8007c58:	4649      	mov	r1, r9
 8007c5a:	414b      	adcs	r3, r1
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	00cb      	lsls	r3, r1, #3
 8007c6e:	4651      	mov	r1, sl
 8007c70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c74:	4651      	mov	r1, sl
 8007c76:	00ca      	lsls	r2, r1, #3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4642      	mov	r2, r8
 8007c80:	189b      	adds	r3, r3, r2
 8007c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c84:	464b      	mov	r3, r9
 8007c86:	460a      	mov	r2, r1
 8007c88:	eb42 0303 	adc.w	r3, r2, r3
 8007c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	663b      	str	r3, [r7, #96]	; 0x60
 8007c98:	667a      	str	r2, [r7, #100]	; 0x64
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	008b      	lsls	r3, r1, #2
 8007caa:	4641      	mov	r1, r8
 8007cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	008a      	lsls	r2, r1, #2
 8007cb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007cb8:	f7f8 ffe6 	bl	8000c88 <__aeabi_uldivmod>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	2164      	movs	r1, #100	; 0x64
 8007cca:	fb01 f303 	mul.w	r3, r1, r3
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	3332      	adds	r3, #50	; 0x32
 8007cd4:	4a08      	ldr	r2, [pc, #32]	; (8007cf8 <UART_SetConfig+0x4e4>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	f003 020f 	and.w	r2, r3, #15
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4422      	add	r2, r4
 8007ce8:	609a      	str	r2, [r3, #8]
}
 8007cea:	bf00      	nop
 8007cec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf6:	bf00      	nop
 8007cf8:	51eb851f 	.word	0x51eb851f

08007cfc <__assert_func>:
 8007cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cfe:	4614      	mov	r4, r2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <__assert_func+0x2c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4605      	mov	r5, r0
 8007d08:	68d8      	ldr	r0, [r3, #12]
 8007d0a:	b14c      	cbz	r4, 8007d20 <__assert_func+0x24>
 8007d0c:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <__assert_func+0x30>)
 8007d0e:	9100      	str	r1, [sp, #0]
 8007d10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d14:	4906      	ldr	r1, [pc, #24]	; (8007d30 <__assert_func+0x34>)
 8007d16:	462b      	mov	r3, r5
 8007d18:	f000 f9c6 	bl	80080a8 <fiprintf>
 8007d1c:	f002 fc22 	bl	800a564 <abort>
 8007d20:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <__assert_func+0x38>)
 8007d22:	461c      	mov	r4, r3
 8007d24:	e7f3      	b.n	8007d0e <__assert_func+0x12>
 8007d26:	bf00      	nop
 8007d28:	2000000c 	.word	0x2000000c
 8007d2c:	0800ede0 	.word	0x0800ede0
 8007d30:	0800eded 	.word	0x0800eded
 8007d34:	0800ee1b 	.word	0x0800ee1b

08007d38 <calloc>:
 8007d38:	4b02      	ldr	r3, [pc, #8]	; (8007d44 <calloc+0xc>)
 8007d3a:	460a      	mov	r2, r1
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	f000 bafa 	b.w	8008338 <_calloc_r>
 8007d44:	2000000c 	.word	0x2000000c

08007d48 <__errno>:
 8007d48:	4b01      	ldr	r3, [pc, #4]	; (8007d50 <__errno+0x8>)
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	2000000c 	.word	0x2000000c

08007d54 <__sflush_r>:
 8007d54:	898a      	ldrh	r2, [r1, #12]
 8007d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	0710      	lsls	r0, r2, #28
 8007d5e:	460c      	mov	r4, r1
 8007d60:	d458      	bmi.n	8007e14 <__sflush_r+0xc0>
 8007d62:	684b      	ldr	r3, [r1, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dc05      	bgt.n	8007d74 <__sflush_r+0x20>
 8007d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	dc02      	bgt.n	8007d74 <__sflush_r+0x20>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d76:	2e00      	cmp	r6, #0
 8007d78:	d0f9      	beq.n	8007d6e <__sflush_r+0x1a>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d80:	682f      	ldr	r7, [r5, #0]
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	d032      	beq.n	8007dec <__sflush_r+0x98>
 8007d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	075a      	lsls	r2, r3, #29
 8007d8c:	d505      	bpl.n	8007d9a <__sflush_r+0x46>
 8007d8e:	6863      	ldr	r3, [r4, #4]
 8007d90:	1ac0      	subs	r0, r0, r3
 8007d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d94:	b10b      	cbz	r3, 8007d9a <__sflush_r+0x46>
 8007d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d98:	1ac0      	subs	r0, r0, r3
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007da0:	6a21      	ldr	r1, [r4, #32]
 8007da2:	4628      	mov	r0, r5
 8007da4:	47b0      	blx	r6
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	d106      	bne.n	8007dba <__sflush_r+0x66>
 8007dac:	6829      	ldr	r1, [r5, #0]
 8007dae:	291d      	cmp	r1, #29
 8007db0:	d82c      	bhi.n	8007e0c <__sflush_r+0xb8>
 8007db2:	4a2a      	ldr	r2, [pc, #168]	; (8007e5c <__sflush_r+0x108>)
 8007db4:	40ca      	lsrs	r2, r1
 8007db6:	07d6      	lsls	r6, r2, #31
 8007db8:	d528      	bpl.n	8007e0c <__sflush_r+0xb8>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	6062      	str	r2, [r4, #4]
 8007dbe:	04d9      	lsls	r1, r3, #19
 8007dc0:	6922      	ldr	r2, [r4, #16]
 8007dc2:	6022      	str	r2, [r4, #0]
 8007dc4:	d504      	bpl.n	8007dd0 <__sflush_r+0x7c>
 8007dc6:	1c42      	adds	r2, r0, #1
 8007dc8:	d101      	bne.n	8007dce <__sflush_r+0x7a>
 8007dca:	682b      	ldr	r3, [r5, #0]
 8007dcc:	b903      	cbnz	r3, 8007dd0 <__sflush_r+0x7c>
 8007dce:	6560      	str	r0, [r4, #84]	; 0x54
 8007dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd2:	602f      	str	r7, [r5, #0]
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	d0ca      	beq.n	8007d6e <__sflush_r+0x1a>
 8007dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <__sflush_r+0x92>
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 fabf 	bl	8008364 <_free_r>
 8007de6:	2000      	movs	r0, #0
 8007de8:	6360      	str	r0, [r4, #52]	; 0x34
 8007dea:	e7c1      	b.n	8007d70 <__sflush_r+0x1c>
 8007dec:	6a21      	ldr	r1, [r4, #32]
 8007dee:	2301      	movs	r3, #1
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	1c41      	adds	r1, r0, #1
 8007df6:	d1c7      	bne.n	8007d88 <__sflush_r+0x34>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0c4      	beq.n	8007d88 <__sflush_r+0x34>
 8007dfe:	2b1d      	cmp	r3, #29
 8007e00:	d001      	beq.n	8007e06 <__sflush_r+0xb2>
 8007e02:	2b16      	cmp	r3, #22
 8007e04:	d101      	bne.n	8007e0a <__sflush_r+0xb6>
 8007e06:	602f      	str	r7, [r5, #0]
 8007e08:	e7b1      	b.n	8007d6e <__sflush_r+0x1a>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	e7ad      	b.n	8007d70 <__sflush_r+0x1c>
 8007e14:	690f      	ldr	r7, [r1, #16]
 8007e16:	2f00      	cmp	r7, #0
 8007e18:	d0a9      	beq.n	8007d6e <__sflush_r+0x1a>
 8007e1a:	0793      	lsls	r3, r2, #30
 8007e1c:	680e      	ldr	r6, [r1, #0]
 8007e1e:	bf08      	it	eq
 8007e20:	694b      	ldreq	r3, [r1, #20]
 8007e22:	600f      	str	r7, [r1, #0]
 8007e24:	bf18      	it	ne
 8007e26:	2300      	movne	r3, #0
 8007e28:	eba6 0807 	sub.w	r8, r6, r7
 8007e2c:	608b      	str	r3, [r1, #8]
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	dd9c      	ble.n	8007d6e <__sflush_r+0x1a>
 8007e34:	6a21      	ldr	r1, [r4, #32]
 8007e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e38:	4643      	mov	r3, r8
 8007e3a:	463a      	mov	r2, r7
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b0      	blx	r6
 8007e40:	2800      	cmp	r0, #0
 8007e42:	dc06      	bgt.n	8007e52 <__sflush_r+0xfe>
 8007e44:	89a3      	ldrh	r3, [r4, #12]
 8007e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4a:	81a3      	strh	r3, [r4, #12]
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	e78e      	b.n	8007d70 <__sflush_r+0x1c>
 8007e52:	4407      	add	r7, r0
 8007e54:	eba8 0800 	sub.w	r8, r8, r0
 8007e58:	e7e9      	b.n	8007e2e <__sflush_r+0xda>
 8007e5a:	bf00      	nop
 8007e5c:	20400001 	.word	0x20400001

08007e60 <_fflush_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	690b      	ldr	r3, [r1, #16]
 8007e64:	4605      	mov	r5, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	b913      	cbnz	r3, 8007e70 <_fflush_r+0x10>
 8007e6a:	2500      	movs	r5, #0
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	b118      	cbz	r0, 8007e7a <_fflush_r+0x1a>
 8007e72:	6983      	ldr	r3, [r0, #24]
 8007e74:	b90b      	cbnz	r3, 8007e7a <_fflush_r+0x1a>
 8007e76:	f000 f899 	bl	8007fac <__sinit>
 8007e7a:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <_fflush_r+0x6c>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	d11b      	bne.n	8007eb8 <_fflush_r+0x58>
 8007e80:	686c      	ldr	r4, [r5, #4]
 8007e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0ef      	beq.n	8007e6a <_fflush_r+0xa>
 8007e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e8c:	07d0      	lsls	r0, r2, #31
 8007e8e:	d404      	bmi.n	8007e9a <_fflush_r+0x3a>
 8007e90:	0599      	lsls	r1, r3, #22
 8007e92:	d402      	bmi.n	8007e9a <_fflush_r+0x3a>
 8007e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e96:	f000 fa0c 	bl	80082b2 <__retarget_lock_acquire_recursive>
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	f7ff ff59 	bl	8007d54 <__sflush_r>
 8007ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ea4:	07da      	lsls	r2, r3, #31
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	d4e0      	bmi.n	8007e6c <_fflush_r+0xc>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	059b      	lsls	r3, r3, #22
 8007eae:	d4dd      	bmi.n	8007e6c <_fflush_r+0xc>
 8007eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eb2:	f000 f9ff 	bl	80082b4 <__retarget_lock_release_recursive>
 8007eb6:	e7d9      	b.n	8007e6c <_fflush_r+0xc>
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <_fflush_r+0x70>)
 8007eba:	429c      	cmp	r4, r3
 8007ebc:	d101      	bne.n	8007ec2 <_fflush_r+0x62>
 8007ebe:	68ac      	ldr	r4, [r5, #8]
 8007ec0:	e7df      	b.n	8007e82 <_fflush_r+0x22>
 8007ec2:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <_fflush_r+0x74>)
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	bf08      	it	eq
 8007ec8:	68ec      	ldreq	r4, [r5, #12]
 8007eca:	e7da      	b.n	8007e82 <_fflush_r+0x22>
 8007ecc:	0800ef40 	.word	0x0800ef40
 8007ed0:	0800ef60 	.word	0x0800ef60
 8007ed4:	0800ef20 	.word	0x0800ef20

08007ed8 <fflush>:
 8007ed8:	4601      	mov	r1, r0
 8007eda:	b920      	cbnz	r0, 8007ee6 <fflush+0xe>
 8007edc:	4b04      	ldr	r3, [pc, #16]	; (8007ef0 <fflush+0x18>)
 8007ede:	4905      	ldr	r1, [pc, #20]	; (8007ef4 <fflush+0x1c>)
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	f000 b933 	b.w	800814c <_fwalk_reent>
 8007ee6:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <fflush+0x20>)
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	f7ff bfb9 	b.w	8007e60 <_fflush_r>
 8007eee:	bf00      	nop
 8007ef0:	0800ef80 	.word	0x0800ef80
 8007ef4:	08007e61 	.word	0x08007e61
 8007ef8:	2000000c 	.word	0x2000000c

08007efc <std>:
 8007efc:	2300      	movs	r3, #0
 8007efe:	b510      	push	{r4, lr}
 8007f00:	4604      	mov	r4, r0
 8007f02:	e9c0 3300 	strd	r3, r3, [r0]
 8007f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f0a:	6083      	str	r3, [r0, #8]
 8007f0c:	8181      	strh	r1, [r0, #12]
 8007f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f10:	81c2      	strh	r2, [r0, #14]
 8007f12:	6183      	str	r3, [r0, #24]
 8007f14:	4619      	mov	r1, r3
 8007f16:	2208      	movs	r2, #8
 8007f18:	305c      	adds	r0, #92	; 0x5c
 8007f1a:	f000 fa05 	bl	8008328 <memset>
 8007f1e:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <std+0x38>)
 8007f20:	6263      	str	r3, [r4, #36]	; 0x24
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <std+0x3c>)
 8007f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <std+0x40>)
 8007f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f2a:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <std+0x44>)
 8007f2c:	6224      	str	r4, [r4, #32]
 8007f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f30:	bd10      	pop	{r4, pc}
 8007f32:	bf00      	nop
 8007f34:	080095dd 	.word	0x080095dd
 8007f38:	080095ff 	.word	0x080095ff
 8007f3c:	08009637 	.word	0x08009637
 8007f40:	0800965b 	.word	0x0800965b

08007f44 <_cleanup_r>:
 8007f44:	4901      	ldr	r1, [pc, #4]	; (8007f4c <_cleanup_r+0x8>)
 8007f46:	f000 b901 	b.w	800814c <_fwalk_reent>
 8007f4a:	bf00      	nop
 8007f4c:	08007e61 	.word	0x08007e61

08007f50 <__sfmoreglue>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	2268      	movs	r2, #104	; 0x68
 8007f54:	1e4d      	subs	r5, r1, #1
 8007f56:	4355      	muls	r5, r2
 8007f58:	460e      	mov	r6, r1
 8007f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f5e:	f000 fa6d 	bl	800843c <_malloc_r>
 8007f62:	4604      	mov	r4, r0
 8007f64:	b140      	cbz	r0, 8007f78 <__sfmoreglue+0x28>
 8007f66:	2100      	movs	r1, #0
 8007f68:	e9c0 1600 	strd	r1, r6, [r0]
 8007f6c:	300c      	adds	r0, #12
 8007f6e:	60a0      	str	r0, [r4, #8]
 8007f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f74:	f000 f9d8 	bl	8008328 <memset>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}

08007f7c <__sfp_lock_acquire>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__sfp_lock_acquire+0x8>)
 8007f7e:	f000 b998 	b.w	80082b2 <__retarget_lock_acquire_recursive>
 8007f82:	bf00      	nop
 8007f84:	20000edd 	.word	0x20000edd

08007f88 <__sfp_lock_release>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__sfp_lock_release+0x8>)
 8007f8a:	f000 b993 	b.w	80082b4 <__retarget_lock_release_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20000edd 	.word	0x20000edd

08007f94 <__sinit_lock_acquire>:
 8007f94:	4801      	ldr	r0, [pc, #4]	; (8007f9c <__sinit_lock_acquire+0x8>)
 8007f96:	f000 b98c 	b.w	80082b2 <__retarget_lock_acquire_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20000ede 	.word	0x20000ede

08007fa0 <__sinit_lock_release>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	; (8007fa8 <__sinit_lock_release+0x8>)
 8007fa2:	f000 b987 	b.w	80082b4 <__retarget_lock_release_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	20000ede 	.word	0x20000ede

08007fac <__sinit>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4604      	mov	r4, r0
 8007fb0:	f7ff fff0 	bl	8007f94 <__sinit_lock_acquire>
 8007fb4:	69a3      	ldr	r3, [r4, #24]
 8007fb6:	b11b      	cbz	r3, 8007fc0 <__sinit+0x14>
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f7ff bff0 	b.w	8007fa0 <__sinit_lock_release>
 8007fc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8007fc6:	4b13      	ldr	r3, [pc, #76]	; (8008014 <__sinit+0x68>)
 8007fc8:	4a13      	ldr	r2, [pc, #76]	; (8008018 <__sinit+0x6c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	bf04      	itt	eq
 8007fd2:	2301      	moveq	r3, #1
 8007fd4:	61a3      	streq	r3, [r4, #24]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f820 	bl	800801c <__sfp>
 8007fdc:	6060      	str	r0, [r4, #4]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 f81c 	bl	800801c <__sfp>
 8007fe4:	60a0      	str	r0, [r4, #8]
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 f818 	bl	800801c <__sfp>
 8007fec:	2200      	movs	r2, #0
 8007fee:	60e0      	str	r0, [r4, #12]
 8007ff0:	2104      	movs	r1, #4
 8007ff2:	6860      	ldr	r0, [r4, #4]
 8007ff4:	f7ff ff82 	bl	8007efc <std>
 8007ff8:	68a0      	ldr	r0, [r4, #8]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	2109      	movs	r1, #9
 8007ffe:	f7ff ff7d 	bl	8007efc <std>
 8008002:	68e0      	ldr	r0, [r4, #12]
 8008004:	2202      	movs	r2, #2
 8008006:	2112      	movs	r1, #18
 8008008:	f7ff ff78 	bl	8007efc <std>
 800800c:	2301      	movs	r3, #1
 800800e:	61a3      	str	r3, [r4, #24]
 8008010:	e7d2      	b.n	8007fb8 <__sinit+0xc>
 8008012:	bf00      	nop
 8008014:	0800ef80 	.word	0x0800ef80
 8008018:	08007f45 	.word	0x08007f45

0800801c <__sfp>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	4607      	mov	r7, r0
 8008020:	f7ff ffac 	bl	8007f7c <__sfp_lock_acquire>
 8008024:	4b1e      	ldr	r3, [pc, #120]	; (80080a0 <__sfp+0x84>)
 8008026:	681e      	ldr	r6, [r3, #0]
 8008028:	69b3      	ldr	r3, [r6, #24]
 800802a:	b913      	cbnz	r3, 8008032 <__sfp+0x16>
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff ffbd 	bl	8007fac <__sinit>
 8008032:	3648      	adds	r6, #72	; 0x48
 8008034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008038:	3b01      	subs	r3, #1
 800803a:	d503      	bpl.n	8008044 <__sfp+0x28>
 800803c:	6833      	ldr	r3, [r6, #0]
 800803e:	b30b      	cbz	r3, 8008084 <__sfp+0x68>
 8008040:	6836      	ldr	r6, [r6, #0]
 8008042:	e7f7      	b.n	8008034 <__sfp+0x18>
 8008044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008048:	b9d5      	cbnz	r5, 8008080 <__sfp+0x64>
 800804a:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <__sfp+0x88>)
 800804c:	60e3      	str	r3, [r4, #12]
 800804e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008052:	6665      	str	r5, [r4, #100]	; 0x64
 8008054:	f000 f92c 	bl	80082b0 <__retarget_lock_init_recursive>
 8008058:	f7ff ff96 	bl	8007f88 <__sfp_lock_release>
 800805c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008064:	6025      	str	r5, [r4, #0]
 8008066:	61a5      	str	r5, [r4, #24]
 8008068:	2208      	movs	r2, #8
 800806a:	4629      	mov	r1, r5
 800806c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008070:	f000 f95a 	bl	8008328 <memset>
 8008074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800807c:	4620      	mov	r0, r4
 800807e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008080:	3468      	adds	r4, #104	; 0x68
 8008082:	e7d9      	b.n	8008038 <__sfp+0x1c>
 8008084:	2104      	movs	r1, #4
 8008086:	4638      	mov	r0, r7
 8008088:	f7ff ff62 	bl	8007f50 <__sfmoreglue>
 800808c:	4604      	mov	r4, r0
 800808e:	6030      	str	r0, [r6, #0]
 8008090:	2800      	cmp	r0, #0
 8008092:	d1d5      	bne.n	8008040 <__sfp+0x24>
 8008094:	f7ff ff78 	bl	8007f88 <__sfp_lock_release>
 8008098:	230c      	movs	r3, #12
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	e7ee      	b.n	800807c <__sfp+0x60>
 800809e:	bf00      	nop
 80080a0:	0800ef80 	.word	0x0800ef80
 80080a4:	ffff0001 	.word	0xffff0001

080080a8 <fiprintf>:
 80080a8:	b40e      	push	{r1, r2, r3}
 80080aa:	b503      	push	{r0, r1, lr}
 80080ac:	4601      	mov	r1, r0
 80080ae:	ab03      	add	r3, sp, #12
 80080b0:	4805      	ldr	r0, [pc, #20]	; (80080c8 <fiprintf+0x20>)
 80080b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b6:	6800      	ldr	r0, [r0, #0]
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	f000 fa5d 	bl	8008578 <_vfiprintf_r>
 80080be:	b002      	add	sp, #8
 80080c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c4:	b003      	add	sp, #12
 80080c6:	4770      	bx	lr
 80080c8:	2000000c 	.word	0x2000000c

080080cc <_fputc_r>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	460e      	mov	r6, r1
 80080d0:	4614      	mov	r4, r2
 80080d2:	4605      	mov	r5, r0
 80080d4:	b118      	cbz	r0, 80080de <_fputc_r+0x12>
 80080d6:	6983      	ldr	r3, [r0, #24]
 80080d8:	b90b      	cbnz	r3, 80080de <_fputc_r+0x12>
 80080da:	f7ff ff67 	bl	8007fac <__sinit>
 80080de:	4b14      	ldr	r3, [pc, #80]	; (8008130 <_fputc_r+0x64>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	d11a      	bne.n	800811a <_fputc_r+0x4e>
 80080e4:	686c      	ldr	r4, [r5, #4]
 80080e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080e8:	07d8      	lsls	r0, r3, #31
 80080ea:	d405      	bmi.n	80080f8 <_fputc_r+0x2c>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	0599      	lsls	r1, r3, #22
 80080f0:	d402      	bmi.n	80080f8 <_fputc_r+0x2c>
 80080f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080f4:	f000 f8dd 	bl	80082b2 <__retarget_lock_acquire_recursive>
 80080f8:	4622      	mov	r2, r4
 80080fa:	4628      	mov	r0, r5
 80080fc:	4631      	mov	r1, r6
 80080fe:	f001 f9ef 	bl	80094e0 <_putc_r>
 8008102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008104:	07da      	lsls	r2, r3, #31
 8008106:	4605      	mov	r5, r0
 8008108:	d405      	bmi.n	8008116 <_fputc_r+0x4a>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	059b      	lsls	r3, r3, #22
 800810e:	d402      	bmi.n	8008116 <_fputc_r+0x4a>
 8008110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008112:	f000 f8cf 	bl	80082b4 <__retarget_lock_release_recursive>
 8008116:	4628      	mov	r0, r5
 8008118:	bd70      	pop	{r4, r5, r6, pc}
 800811a:	4b06      	ldr	r3, [pc, #24]	; (8008134 <_fputc_r+0x68>)
 800811c:	429c      	cmp	r4, r3
 800811e:	d101      	bne.n	8008124 <_fputc_r+0x58>
 8008120:	68ac      	ldr	r4, [r5, #8]
 8008122:	e7e0      	b.n	80080e6 <_fputc_r+0x1a>
 8008124:	4b04      	ldr	r3, [pc, #16]	; (8008138 <_fputc_r+0x6c>)
 8008126:	429c      	cmp	r4, r3
 8008128:	bf08      	it	eq
 800812a:	68ec      	ldreq	r4, [r5, #12]
 800812c:	e7db      	b.n	80080e6 <_fputc_r+0x1a>
 800812e:	bf00      	nop
 8008130:	0800ef40 	.word	0x0800ef40
 8008134:	0800ef60 	.word	0x0800ef60
 8008138:	0800ef20 	.word	0x0800ef20

0800813c <fputc>:
 800813c:	4b02      	ldr	r3, [pc, #8]	; (8008148 <fputc+0xc>)
 800813e:	460a      	mov	r2, r1
 8008140:	4601      	mov	r1, r0
 8008142:	6818      	ldr	r0, [r3, #0]
 8008144:	f7ff bfc2 	b.w	80080cc <_fputc_r>
 8008148:	2000000c 	.word	0x2000000c

0800814c <_fwalk_reent>:
 800814c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008150:	4606      	mov	r6, r0
 8008152:	4688      	mov	r8, r1
 8008154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008158:	2700      	movs	r7, #0
 800815a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800815e:	f1b9 0901 	subs.w	r9, r9, #1
 8008162:	d505      	bpl.n	8008170 <_fwalk_reent+0x24>
 8008164:	6824      	ldr	r4, [r4, #0]
 8008166:	2c00      	cmp	r4, #0
 8008168:	d1f7      	bne.n	800815a <_fwalk_reent+0xe>
 800816a:	4638      	mov	r0, r7
 800816c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008170:	89ab      	ldrh	r3, [r5, #12]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d907      	bls.n	8008186 <_fwalk_reent+0x3a>
 8008176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800817a:	3301      	adds	r3, #1
 800817c:	d003      	beq.n	8008186 <_fwalk_reent+0x3a>
 800817e:	4629      	mov	r1, r5
 8008180:	4630      	mov	r0, r6
 8008182:	47c0      	blx	r8
 8008184:	4307      	orrs	r7, r0
 8008186:	3568      	adds	r5, #104	; 0x68
 8008188:	e7e9      	b.n	800815e <_fwalk_reent+0x12>
	...

0800818c <_fwrite_r>:
 800818c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008190:	9c08      	ldr	r4, [sp, #32]
 8008192:	468a      	mov	sl, r1
 8008194:	4690      	mov	r8, r2
 8008196:	fb02 f903 	mul.w	r9, r2, r3
 800819a:	4605      	mov	r5, r0
 800819c:	b118      	cbz	r0, 80081a6 <_fwrite_r+0x1a>
 800819e:	6983      	ldr	r3, [r0, #24]
 80081a0:	b90b      	cbnz	r3, 80081a6 <_fwrite_r+0x1a>
 80081a2:	f7ff ff03 	bl	8007fac <__sinit>
 80081a6:	4b26      	ldr	r3, [pc, #152]	; (8008240 <_fwrite_r+0xb4>)
 80081a8:	429c      	cmp	r4, r3
 80081aa:	d123      	bne.n	80081f4 <_fwrite_r+0x68>
 80081ac:	686c      	ldr	r4, [r5, #4]
 80081ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081b0:	07de      	lsls	r6, r3, #31
 80081b2:	d405      	bmi.n	80081c0 <_fwrite_r+0x34>
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	0598      	lsls	r0, r3, #22
 80081b8:	d402      	bmi.n	80081c0 <_fwrite_r+0x34>
 80081ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081bc:	f000 f879 	bl	80082b2 <__retarget_lock_acquire_recursive>
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	0719      	lsls	r1, r3, #28
 80081c4:	d520      	bpl.n	8008208 <_fwrite_r+0x7c>
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	b1f3      	cbz	r3, 8008208 <_fwrite_r+0x7c>
 80081ca:	2600      	movs	r6, #0
 80081cc:	454e      	cmp	r6, r9
 80081ce:	d029      	beq.n	8008224 <_fwrite_r+0x98>
 80081d0:	68a7      	ldr	r7, [r4, #8]
 80081d2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80081d6:	3f01      	subs	r7, #1
 80081d8:	2f00      	cmp	r7, #0
 80081da:	60a7      	str	r7, [r4, #8]
 80081dc:	da04      	bge.n	80081e8 <_fwrite_r+0x5c>
 80081de:	69a3      	ldr	r3, [r4, #24]
 80081e0:	429f      	cmp	r7, r3
 80081e2:	db19      	blt.n	8008218 <_fwrite_r+0x8c>
 80081e4:	290a      	cmp	r1, #10
 80081e6:	d017      	beq.n	8008218 <_fwrite_r+0x8c>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	6022      	str	r2, [r4, #0]
 80081ee:	7019      	strb	r1, [r3, #0]
 80081f0:	3601      	adds	r6, #1
 80081f2:	e7eb      	b.n	80081cc <_fwrite_r+0x40>
 80081f4:	4b13      	ldr	r3, [pc, #76]	; (8008244 <_fwrite_r+0xb8>)
 80081f6:	429c      	cmp	r4, r3
 80081f8:	d101      	bne.n	80081fe <_fwrite_r+0x72>
 80081fa:	68ac      	ldr	r4, [r5, #8]
 80081fc:	e7d7      	b.n	80081ae <_fwrite_r+0x22>
 80081fe:	4b12      	ldr	r3, [pc, #72]	; (8008248 <_fwrite_r+0xbc>)
 8008200:	429c      	cmp	r4, r3
 8008202:	bf08      	it	eq
 8008204:	68ec      	ldreq	r4, [r5, #12]
 8008206:	e7d2      	b.n	80081ae <_fwrite_r+0x22>
 8008208:	4621      	mov	r1, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f002 f93c 	bl	800a488 <__swsetup_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	d0da      	beq.n	80081ca <_fwrite_r+0x3e>
 8008214:	2600      	movs	r6, #0
 8008216:	e005      	b.n	8008224 <_fwrite_r+0x98>
 8008218:	4622      	mov	r2, r4
 800821a:	4628      	mov	r0, r5
 800821c:	f002 f8d0 	bl	800a3c0 <__swbuf_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d1e5      	bne.n	80081f0 <_fwrite_r+0x64>
 8008224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d405      	bmi.n	8008236 <_fwrite_r+0xaa>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	059b      	lsls	r3, r3, #22
 800822e:	d402      	bmi.n	8008236 <_fwrite_r+0xaa>
 8008230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008232:	f000 f83f 	bl	80082b4 <__retarget_lock_release_recursive>
 8008236:	fbb6 f0f8 	udiv	r0, r6, r8
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	bf00      	nop
 8008240:	0800ef40 	.word	0x0800ef40
 8008244:	0800ef60 	.word	0x0800ef60
 8008248:	0800ef20 	.word	0x0800ef20

0800824c <fwrite>:
 800824c:	b507      	push	{r0, r1, r2, lr}
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	460a      	mov	r2, r1
 8008254:	4601      	mov	r1, r0
 8008256:	4803      	ldr	r0, [pc, #12]	; (8008264 <fwrite+0x18>)
 8008258:	6800      	ldr	r0, [r0, #0]
 800825a:	f7ff ff97 	bl	800818c <_fwrite_r>
 800825e:	b003      	add	sp, #12
 8008260:	f85d fb04 	ldr.w	pc, [sp], #4
 8008264:	2000000c 	.word	0x2000000c

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4d0d      	ldr	r5, [pc, #52]	; (80082a0 <__libc_init_array+0x38>)
 800826c:	4c0d      	ldr	r4, [pc, #52]	; (80082a4 <__libc_init_array+0x3c>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	2600      	movs	r6, #0
 8008274:	42a6      	cmp	r6, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	4d0b      	ldr	r5, [pc, #44]	; (80082a8 <__libc_init_array+0x40>)
 800827a:	4c0c      	ldr	r4, [pc, #48]	; (80082ac <__libc_init_array+0x44>)
 800827c:	f004 fb08 	bl	800c890 <_init>
 8008280:	1b64      	subs	r4, r4, r5
 8008282:	10a4      	asrs	r4, r4, #2
 8008284:	2600      	movs	r6, #0
 8008286:	42a6      	cmp	r6, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008290:	4798      	blx	r3
 8008292:	3601      	adds	r6, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	f855 3b04 	ldr.w	r3, [r5], #4
 800829a:	4798      	blx	r3
 800829c:	3601      	adds	r6, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	0800f28c 	.word	0x0800f28c
 80082a4:	0800f28c 	.word	0x0800f28c
 80082a8:	0800f28c 	.word	0x0800f28c
 80082ac:	0800f290 	.word	0x0800f290

080082b0 <__retarget_lock_init_recursive>:
 80082b0:	4770      	bx	lr

080082b2 <__retarget_lock_acquire_recursive>:
 80082b2:	4770      	bx	lr

080082b4 <__retarget_lock_release_recursive>:
 80082b4:	4770      	bx	lr
	...

080082b8 <malloc>:
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <malloc+0xc>)
 80082ba:	4601      	mov	r1, r0
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	f000 b8bd 	b.w	800843c <_malloc_r>
 80082c2:	bf00      	nop
 80082c4:	2000000c 	.word	0x2000000c

080082c8 <free>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <free+0xc>)
 80082ca:	4601      	mov	r1, r0
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f000 b849 	b.w	8008364 <_free_r>
 80082d2:	bf00      	nop
 80082d4:	2000000c 	.word	0x2000000c

080082d8 <memcpy>:
 80082d8:	440a      	add	r2, r1
 80082da:	4291      	cmp	r1, r2
 80082dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e0:	d100      	bne.n	80082e4 <memcpy+0xc>
 80082e2:	4770      	bx	lr
 80082e4:	b510      	push	{r4, lr}
 80082e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ee:	4291      	cmp	r1, r2
 80082f0:	d1f9      	bne.n	80082e6 <memcpy+0xe>
 80082f2:	bd10      	pop	{r4, pc}

080082f4 <memmove>:
 80082f4:	4288      	cmp	r0, r1
 80082f6:	b510      	push	{r4, lr}
 80082f8:	eb01 0402 	add.w	r4, r1, r2
 80082fc:	d902      	bls.n	8008304 <memmove+0x10>
 80082fe:	4284      	cmp	r4, r0
 8008300:	4623      	mov	r3, r4
 8008302:	d807      	bhi.n	8008314 <memmove+0x20>
 8008304:	1e43      	subs	r3, r0, #1
 8008306:	42a1      	cmp	r1, r4
 8008308:	d008      	beq.n	800831c <memmove+0x28>
 800830a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800830e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008312:	e7f8      	b.n	8008306 <memmove+0x12>
 8008314:	4402      	add	r2, r0
 8008316:	4601      	mov	r1, r0
 8008318:	428a      	cmp	r2, r1
 800831a:	d100      	bne.n	800831e <memmove+0x2a>
 800831c:	bd10      	pop	{r4, pc}
 800831e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008326:	e7f7      	b.n	8008318 <memmove+0x24>

08008328 <memset>:
 8008328:	4402      	add	r2, r0
 800832a:	4603      	mov	r3, r0
 800832c:	4293      	cmp	r3, r2
 800832e:	d100      	bne.n	8008332 <memset+0xa>
 8008330:	4770      	bx	lr
 8008332:	f803 1b01 	strb.w	r1, [r3], #1
 8008336:	e7f9      	b.n	800832c <memset+0x4>

08008338 <_calloc_r>:
 8008338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800833a:	fba1 2402 	umull	r2, r4, r1, r2
 800833e:	b94c      	cbnz	r4, 8008354 <_calloc_r+0x1c>
 8008340:	4611      	mov	r1, r2
 8008342:	9201      	str	r2, [sp, #4]
 8008344:	f000 f87a 	bl	800843c <_malloc_r>
 8008348:	9a01      	ldr	r2, [sp, #4]
 800834a:	4605      	mov	r5, r0
 800834c:	b930      	cbnz	r0, 800835c <_calloc_r+0x24>
 800834e:	4628      	mov	r0, r5
 8008350:	b003      	add	sp, #12
 8008352:	bd30      	pop	{r4, r5, pc}
 8008354:	220c      	movs	r2, #12
 8008356:	6002      	str	r2, [r0, #0]
 8008358:	2500      	movs	r5, #0
 800835a:	e7f8      	b.n	800834e <_calloc_r+0x16>
 800835c:	4621      	mov	r1, r4
 800835e:	f7ff ffe3 	bl	8008328 <memset>
 8008362:	e7f4      	b.n	800834e <_calloc_r+0x16>

08008364 <_free_r>:
 8008364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008366:	2900      	cmp	r1, #0
 8008368:	d044      	beq.n	80083f4 <_free_r+0x90>
 800836a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836e:	9001      	str	r0, [sp, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f1a1 0404 	sub.w	r4, r1, #4
 8008376:	bfb8      	it	lt
 8008378:	18e4      	addlt	r4, r4, r3
 800837a:	f003 fb85 	bl	800ba88 <__malloc_lock>
 800837e:	4a1e      	ldr	r2, [pc, #120]	; (80083f8 <_free_r+0x94>)
 8008380:	9801      	ldr	r0, [sp, #4]
 8008382:	6813      	ldr	r3, [r2, #0]
 8008384:	b933      	cbnz	r3, 8008394 <_free_r+0x30>
 8008386:	6063      	str	r3, [r4, #4]
 8008388:	6014      	str	r4, [r2, #0]
 800838a:	b003      	add	sp, #12
 800838c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008390:	f003 bb80 	b.w	800ba94 <__malloc_unlock>
 8008394:	42a3      	cmp	r3, r4
 8008396:	d908      	bls.n	80083aa <_free_r+0x46>
 8008398:	6825      	ldr	r5, [r4, #0]
 800839a:	1961      	adds	r1, r4, r5
 800839c:	428b      	cmp	r3, r1
 800839e:	bf01      	itttt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	1949      	addeq	r1, r1, r5
 80083a6:	6021      	streq	r1, [r4, #0]
 80083a8:	e7ed      	b.n	8008386 <_free_r+0x22>
 80083aa:	461a      	mov	r2, r3
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	b10b      	cbz	r3, 80083b4 <_free_r+0x50>
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d9fa      	bls.n	80083aa <_free_r+0x46>
 80083b4:	6811      	ldr	r1, [r2, #0]
 80083b6:	1855      	adds	r5, r2, r1
 80083b8:	42a5      	cmp	r5, r4
 80083ba:	d10b      	bne.n	80083d4 <_free_r+0x70>
 80083bc:	6824      	ldr	r4, [r4, #0]
 80083be:	4421      	add	r1, r4
 80083c0:	1854      	adds	r4, r2, r1
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	6011      	str	r1, [r2, #0]
 80083c6:	d1e0      	bne.n	800838a <_free_r+0x26>
 80083c8:	681c      	ldr	r4, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	6053      	str	r3, [r2, #4]
 80083ce:	4421      	add	r1, r4
 80083d0:	6011      	str	r1, [r2, #0]
 80083d2:	e7da      	b.n	800838a <_free_r+0x26>
 80083d4:	d902      	bls.n	80083dc <_free_r+0x78>
 80083d6:	230c      	movs	r3, #12
 80083d8:	6003      	str	r3, [r0, #0]
 80083da:	e7d6      	b.n	800838a <_free_r+0x26>
 80083dc:	6825      	ldr	r5, [r4, #0]
 80083de:	1961      	adds	r1, r4, r5
 80083e0:	428b      	cmp	r3, r1
 80083e2:	bf04      	itt	eq
 80083e4:	6819      	ldreq	r1, [r3, #0]
 80083e6:	685b      	ldreq	r3, [r3, #4]
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	bf04      	itt	eq
 80083ec:	1949      	addeq	r1, r1, r5
 80083ee:	6021      	streq	r1, [r4, #0]
 80083f0:	6054      	str	r4, [r2, #4]
 80083f2:	e7ca      	b.n	800838a <_free_r+0x26>
 80083f4:	b003      	add	sp, #12
 80083f6:	bd30      	pop	{r4, r5, pc}
 80083f8:	20000ee0 	.word	0x20000ee0

080083fc <sbrk_aligned>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4e0e      	ldr	r6, [pc, #56]	; (8008438 <sbrk_aligned+0x3c>)
 8008400:	460c      	mov	r4, r1
 8008402:	6831      	ldr	r1, [r6, #0]
 8008404:	4605      	mov	r5, r0
 8008406:	b911      	cbnz	r1, 800840e <sbrk_aligned+0x12>
 8008408:	f001 f8b2 	bl	8009570 <_sbrk_r>
 800840c:	6030      	str	r0, [r6, #0]
 800840e:	4621      	mov	r1, r4
 8008410:	4628      	mov	r0, r5
 8008412:	f001 f8ad 	bl	8009570 <_sbrk_r>
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	d00a      	beq.n	8008430 <sbrk_aligned+0x34>
 800841a:	1cc4      	adds	r4, r0, #3
 800841c:	f024 0403 	bic.w	r4, r4, #3
 8008420:	42a0      	cmp	r0, r4
 8008422:	d007      	beq.n	8008434 <sbrk_aligned+0x38>
 8008424:	1a21      	subs	r1, r4, r0
 8008426:	4628      	mov	r0, r5
 8008428:	f001 f8a2 	bl	8009570 <_sbrk_r>
 800842c:	3001      	adds	r0, #1
 800842e:	d101      	bne.n	8008434 <sbrk_aligned+0x38>
 8008430:	f04f 34ff 	mov.w	r4, #4294967295
 8008434:	4620      	mov	r0, r4
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	20000ee4 	.word	0x20000ee4

0800843c <_malloc_r>:
 800843c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008440:	1ccd      	adds	r5, r1, #3
 8008442:	f025 0503 	bic.w	r5, r5, #3
 8008446:	3508      	adds	r5, #8
 8008448:	2d0c      	cmp	r5, #12
 800844a:	bf38      	it	cc
 800844c:	250c      	movcc	r5, #12
 800844e:	2d00      	cmp	r5, #0
 8008450:	4607      	mov	r7, r0
 8008452:	db01      	blt.n	8008458 <_malloc_r+0x1c>
 8008454:	42a9      	cmp	r1, r5
 8008456:	d905      	bls.n	8008464 <_malloc_r+0x28>
 8008458:	230c      	movs	r3, #12
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	2600      	movs	r6, #0
 800845e:	4630      	mov	r0, r6
 8008460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008464:	4e2e      	ldr	r6, [pc, #184]	; (8008520 <_malloc_r+0xe4>)
 8008466:	f003 fb0f 	bl	800ba88 <__malloc_lock>
 800846a:	6833      	ldr	r3, [r6, #0]
 800846c:	461c      	mov	r4, r3
 800846e:	bb34      	cbnz	r4, 80084be <_malloc_r+0x82>
 8008470:	4629      	mov	r1, r5
 8008472:	4638      	mov	r0, r7
 8008474:	f7ff ffc2 	bl	80083fc <sbrk_aligned>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	4604      	mov	r4, r0
 800847c:	d14d      	bne.n	800851a <_malloc_r+0xde>
 800847e:	6834      	ldr	r4, [r6, #0]
 8008480:	4626      	mov	r6, r4
 8008482:	2e00      	cmp	r6, #0
 8008484:	d140      	bne.n	8008508 <_malloc_r+0xcc>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	4631      	mov	r1, r6
 800848a:	4638      	mov	r0, r7
 800848c:	eb04 0803 	add.w	r8, r4, r3
 8008490:	f001 f86e 	bl	8009570 <_sbrk_r>
 8008494:	4580      	cmp	r8, r0
 8008496:	d13a      	bne.n	800850e <_malloc_r+0xd2>
 8008498:	6821      	ldr	r1, [r4, #0]
 800849a:	3503      	adds	r5, #3
 800849c:	1a6d      	subs	r5, r5, r1
 800849e:	f025 0503 	bic.w	r5, r5, #3
 80084a2:	3508      	adds	r5, #8
 80084a4:	2d0c      	cmp	r5, #12
 80084a6:	bf38      	it	cc
 80084a8:	250c      	movcc	r5, #12
 80084aa:	4629      	mov	r1, r5
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7ff ffa5 	bl	80083fc <sbrk_aligned>
 80084b2:	3001      	adds	r0, #1
 80084b4:	d02b      	beq.n	800850e <_malloc_r+0xd2>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	442b      	add	r3, r5
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	e00e      	b.n	80084dc <_malloc_r+0xa0>
 80084be:	6822      	ldr	r2, [r4, #0]
 80084c0:	1b52      	subs	r2, r2, r5
 80084c2:	d41e      	bmi.n	8008502 <_malloc_r+0xc6>
 80084c4:	2a0b      	cmp	r2, #11
 80084c6:	d916      	bls.n	80084f6 <_malloc_r+0xba>
 80084c8:	1961      	adds	r1, r4, r5
 80084ca:	42a3      	cmp	r3, r4
 80084cc:	6025      	str	r5, [r4, #0]
 80084ce:	bf18      	it	ne
 80084d0:	6059      	strne	r1, [r3, #4]
 80084d2:	6863      	ldr	r3, [r4, #4]
 80084d4:	bf08      	it	eq
 80084d6:	6031      	streq	r1, [r6, #0]
 80084d8:	5162      	str	r2, [r4, r5]
 80084da:	604b      	str	r3, [r1, #4]
 80084dc:	4638      	mov	r0, r7
 80084de:	f104 060b 	add.w	r6, r4, #11
 80084e2:	f003 fad7 	bl	800ba94 <__malloc_unlock>
 80084e6:	f026 0607 	bic.w	r6, r6, #7
 80084ea:	1d23      	adds	r3, r4, #4
 80084ec:	1af2      	subs	r2, r6, r3
 80084ee:	d0b6      	beq.n	800845e <_malloc_r+0x22>
 80084f0:	1b9b      	subs	r3, r3, r6
 80084f2:	50a3      	str	r3, [r4, r2]
 80084f4:	e7b3      	b.n	800845e <_malloc_r+0x22>
 80084f6:	6862      	ldr	r2, [r4, #4]
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	bf0c      	ite	eq
 80084fc:	6032      	streq	r2, [r6, #0]
 80084fe:	605a      	strne	r2, [r3, #4]
 8008500:	e7ec      	b.n	80084dc <_malloc_r+0xa0>
 8008502:	4623      	mov	r3, r4
 8008504:	6864      	ldr	r4, [r4, #4]
 8008506:	e7b2      	b.n	800846e <_malloc_r+0x32>
 8008508:	4634      	mov	r4, r6
 800850a:	6876      	ldr	r6, [r6, #4]
 800850c:	e7b9      	b.n	8008482 <_malloc_r+0x46>
 800850e:	230c      	movs	r3, #12
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	4638      	mov	r0, r7
 8008514:	f003 fabe 	bl	800ba94 <__malloc_unlock>
 8008518:	e7a1      	b.n	800845e <_malloc_r+0x22>
 800851a:	6025      	str	r5, [r4, #0]
 800851c:	e7de      	b.n	80084dc <_malloc_r+0xa0>
 800851e:	bf00      	nop
 8008520:	20000ee0 	.word	0x20000ee0

08008524 <__sfputc_r>:
 8008524:	6893      	ldr	r3, [r2, #8]
 8008526:	3b01      	subs	r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	b410      	push	{r4}
 800852c:	6093      	str	r3, [r2, #8]
 800852e:	da08      	bge.n	8008542 <__sfputc_r+0x1e>
 8008530:	6994      	ldr	r4, [r2, #24]
 8008532:	42a3      	cmp	r3, r4
 8008534:	db01      	blt.n	800853a <__sfputc_r+0x16>
 8008536:	290a      	cmp	r1, #10
 8008538:	d103      	bne.n	8008542 <__sfputc_r+0x1e>
 800853a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800853e:	f001 bf3f 	b.w	800a3c0 <__swbuf_r>
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	1c58      	adds	r0, r3, #1
 8008546:	6010      	str	r0, [r2, #0]
 8008548:	7019      	strb	r1, [r3, #0]
 800854a:	4608      	mov	r0, r1
 800854c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008550:	4770      	bx	lr

08008552 <__sfputs_r>:
 8008552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008554:	4606      	mov	r6, r0
 8008556:	460f      	mov	r7, r1
 8008558:	4614      	mov	r4, r2
 800855a:	18d5      	adds	r5, r2, r3
 800855c:	42ac      	cmp	r4, r5
 800855e:	d101      	bne.n	8008564 <__sfputs_r+0x12>
 8008560:	2000      	movs	r0, #0
 8008562:	e007      	b.n	8008574 <__sfputs_r+0x22>
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	463a      	mov	r2, r7
 800856a:	4630      	mov	r0, r6
 800856c:	f7ff ffda 	bl	8008524 <__sfputc_r>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d1f3      	bne.n	800855c <__sfputs_r+0xa>
 8008574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008578 <_vfiprintf_r>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	460d      	mov	r5, r1
 800857e:	b09d      	sub	sp, #116	; 0x74
 8008580:	4614      	mov	r4, r2
 8008582:	4698      	mov	r8, r3
 8008584:	4606      	mov	r6, r0
 8008586:	b118      	cbz	r0, 8008590 <_vfiprintf_r+0x18>
 8008588:	6983      	ldr	r3, [r0, #24]
 800858a:	b90b      	cbnz	r3, 8008590 <_vfiprintf_r+0x18>
 800858c:	f7ff fd0e 	bl	8007fac <__sinit>
 8008590:	4b89      	ldr	r3, [pc, #548]	; (80087b8 <_vfiprintf_r+0x240>)
 8008592:	429d      	cmp	r5, r3
 8008594:	d11b      	bne.n	80085ce <_vfiprintf_r+0x56>
 8008596:	6875      	ldr	r5, [r6, #4]
 8008598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800859a:	07d9      	lsls	r1, r3, #31
 800859c:	d405      	bmi.n	80085aa <_vfiprintf_r+0x32>
 800859e:	89ab      	ldrh	r3, [r5, #12]
 80085a0:	059a      	lsls	r2, r3, #22
 80085a2:	d402      	bmi.n	80085aa <_vfiprintf_r+0x32>
 80085a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085a6:	f7ff fe84 	bl	80082b2 <__retarget_lock_acquire_recursive>
 80085aa:	89ab      	ldrh	r3, [r5, #12]
 80085ac:	071b      	lsls	r3, r3, #28
 80085ae:	d501      	bpl.n	80085b4 <_vfiprintf_r+0x3c>
 80085b0:	692b      	ldr	r3, [r5, #16]
 80085b2:	b9eb      	cbnz	r3, 80085f0 <_vfiprintf_r+0x78>
 80085b4:	4629      	mov	r1, r5
 80085b6:	4630      	mov	r0, r6
 80085b8:	f001 ff66 	bl	800a488 <__swsetup_r>
 80085bc:	b1c0      	cbz	r0, 80085f0 <_vfiprintf_r+0x78>
 80085be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085c0:	07dc      	lsls	r4, r3, #31
 80085c2:	d50e      	bpl.n	80085e2 <_vfiprintf_r+0x6a>
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	b01d      	add	sp, #116	; 0x74
 80085ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ce:	4b7b      	ldr	r3, [pc, #492]	; (80087bc <_vfiprintf_r+0x244>)
 80085d0:	429d      	cmp	r5, r3
 80085d2:	d101      	bne.n	80085d8 <_vfiprintf_r+0x60>
 80085d4:	68b5      	ldr	r5, [r6, #8]
 80085d6:	e7df      	b.n	8008598 <_vfiprintf_r+0x20>
 80085d8:	4b79      	ldr	r3, [pc, #484]	; (80087c0 <_vfiprintf_r+0x248>)
 80085da:	429d      	cmp	r5, r3
 80085dc:	bf08      	it	eq
 80085de:	68f5      	ldreq	r5, [r6, #12]
 80085e0:	e7da      	b.n	8008598 <_vfiprintf_r+0x20>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	0598      	lsls	r0, r3, #22
 80085e6:	d4ed      	bmi.n	80085c4 <_vfiprintf_r+0x4c>
 80085e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ea:	f7ff fe63 	bl	80082b4 <__retarget_lock_release_recursive>
 80085ee:	e7e9      	b.n	80085c4 <_vfiprintf_r+0x4c>
 80085f0:	2300      	movs	r3, #0
 80085f2:	9309      	str	r3, [sp, #36]	; 0x24
 80085f4:	2320      	movs	r3, #32
 80085f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80085fe:	2330      	movs	r3, #48	; 0x30
 8008600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087c4 <_vfiprintf_r+0x24c>
 8008604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008608:	f04f 0901 	mov.w	r9, #1
 800860c:	4623      	mov	r3, r4
 800860e:	469a      	mov	sl, r3
 8008610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008614:	b10a      	cbz	r2, 800861a <_vfiprintf_r+0xa2>
 8008616:	2a25      	cmp	r2, #37	; 0x25
 8008618:	d1f9      	bne.n	800860e <_vfiprintf_r+0x96>
 800861a:	ebba 0b04 	subs.w	fp, sl, r4
 800861e:	d00b      	beq.n	8008638 <_vfiprintf_r+0xc0>
 8008620:	465b      	mov	r3, fp
 8008622:	4622      	mov	r2, r4
 8008624:	4629      	mov	r1, r5
 8008626:	4630      	mov	r0, r6
 8008628:	f7ff ff93 	bl	8008552 <__sfputs_r>
 800862c:	3001      	adds	r0, #1
 800862e:	f000 80aa 	beq.w	8008786 <_vfiprintf_r+0x20e>
 8008632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008634:	445a      	add	r2, fp
 8008636:	9209      	str	r2, [sp, #36]	; 0x24
 8008638:	f89a 3000 	ldrb.w	r3, [sl]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80a2 	beq.w	8008786 <_vfiprintf_r+0x20e>
 8008642:	2300      	movs	r3, #0
 8008644:	f04f 32ff 	mov.w	r2, #4294967295
 8008648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800864c:	f10a 0a01 	add.w	sl, sl, #1
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	9307      	str	r3, [sp, #28]
 8008654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008658:	931a      	str	r3, [sp, #104]	; 0x68
 800865a:	4654      	mov	r4, sl
 800865c:	2205      	movs	r2, #5
 800865e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008662:	4858      	ldr	r0, [pc, #352]	; (80087c4 <_vfiprintf_r+0x24c>)
 8008664:	f7f7 fdbc 	bl	80001e0 <memchr>
 8008668:	9a04      	ldr	r2, [sp, #16]
 800866a:	b9d8      	cbnz	r0, 80086a4 <_vfiprintf_r+0x12c>
 800866c:	06d1      	lsls	r1, r2, #27
 800866e:	bf44      	itt	mi
 8008670:	2320      	movmi	r3, #32
 8008672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008676:	0713      	lsls	r3, r2, #28
 8008678:	bf44      	itt	mi
 800867a:	232b      	movmi	r3, #43	; 0x2b
 800867c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008680:	f89a 3000 	ldrb.w	r3, [sl]
 8008684:	2b2a      	cmp	r3, #42	; 0x2a
 8008686:	d015      	beq.n	80086b4 <_vfiprintf_r+0x13c>
 8008688:	9a07      	ldr	r2, [sp, #28]
 800868a:	4654      	mov	r4, sl
 800868c:	2000      	movs	r0, #0
 800868e:	f04f 0c0a 	mov.w	ip, #10
 8008692:	4621      	mov	r1, r4
 8008694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008698:	3b30      	subs	r3, #48	; 0x30
 800869a:	2b09      	cmp	r3, #9
 800869c:	d94e      	bls.n	800873c <_vfiprintf_r+0x1c4>
 800869e:	b1b0      	cbz	r0, 80086ce <_vfiprintf_r+0x156>
 80086a0:	9207      	str	r2, [sp, #28]
 80086a2:	e014      	b.n	80086ce <_vfiprintf_r+0x156>
 80086a4:	eba0 0308 	sub.w	r3, r0, r8
 80086a8:	fa09 f303 	lsl.w	r3, r9, r3
 80086ac:	4313      	orrs	r3, r2
 80086ae:	9304      	str	r3, [sp, #16]
 80086b0:	46a2      	mov	sl, r4
 80086b2:	e7d2      	b.n	800865a <_vfiprintf_r+0xe2>
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	1d19      	adds	r1, r3, #4
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	9103      	str	r1, [sp, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bfbb      	ittet	lt
 80086c0:	425b      	neglt	r3, r3
 80086c2:	f042 0202 	orrlt.w	r2, r2, #2
 80086c6:	9307      	strge	r3, [sp, #28]
 80086c8:	9307      	strlt	r3, [sp, #28]
 80086ca:	bfb8      	it	lt
 80086cc:	9204      	strlt	r2, [sp, #16]
 80086ce:	7823      	ldrb	r3, [r4, #0]
 80086d0:	2b2e      	cmp	r3, #46	; 0x2e
 80086d2:	d10c      	bne.n	80086ee <_vfiprintf_r+0x176>
 80086d4:	7863      	ldrb	r3, [r4, #1]
 80086d6:	2b2a      	cmp	r3, #42	; 0x2a
 80086d8:	d135      	bne.n	8008746 <_vfiprintf_r+0x1ce>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	1d1a      	adds	r2, r3, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	9203      	str	r2, [sp, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfb8      	it	lt
 80086e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80086ea:	3402      	adds	r4, #2
 80086ec:	9305      	str	r3, [sp, #20]
 80086ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087d4 <_vfiprintf_r+0x25c>
 80086f2:	7821      	ldrb	r1, [r4, #0]
 80086f4:	2203      	movs	r2, #3
 80086f6:	4650      	mov	r0, sl
 80086f8:	f7f7 fd72 	bl	80001e0 <memchr>
 80086fc:	b140      	cbz	r0, 8008710 <_vfiprintf_r+0x198>
 80086fe:	2340      	movs	r3, #64	; 0x40
 8008700:	eba0 000a 	sub.w	r0, r0, sl
 8008704:	fa03 f000 	lsl.w	r0, r3, r0
 8008708:	9b04      	ldr	r3, [sp, #16]
 800870a:	4303      	orrs	r3, r0
 800870c:	3401      	adds	r4, #1
 800870e:	9304      	str	r3, [sp, #16]
 8008710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008714:	482c      	ldr	r0, [pc, #176]	; (80087c8 <_vfiprintf_r+0x250>)
 8008716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800871a:	2206      	movs	r2, #6
 800871c:	f7f7 fd60 	bl	80001e0 <memchr>
 8008720:	2800      	cmp	r0, #0
 8008722:	d03f      	beq.n	80087a4 <_vfiprintf_r+0x22c>
 8008724:	4b29      	ldr	r3, [pc, #164]	; (80087cc <_vfiprintf_r+0x254>)
 8008726:	bb1b      	cbnz	r3, 8008770 <_vfiprintf_r+0x1f8>
 8008728:	9b03      	ldr	r3, [sp, #12]
 800872a:	3307      	adds	r3, #7
 800872c:	f023 0307 	bic.w	r3, r3, #7
 8008730:	3308      	adds	r3, #8
 8008732:	9303      	str	r3, [sp, #12]
 8008734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008736:	443b      	add	r3, r7
 8008738:	9309      	str	r3, [sp, #36]	; 0x24
 800873a:	e767      	b.n	800860c <_vfiprintf_r+0x94>
 800873c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008740:	460c      	mov	r4, r1
 8008742:	2001      	movs	r0, #1
 8008744:	e7a5      	b.n	8008692 <_vfiprintf_r+0x11a>
 8008746:	2300      	movs	r3, #0
 8008748:	3401      	adds	r4, #1
 800874a:	9305      	str	r3, [sp, #20]
 800874c:	4619      	mov	r1, r3
 800874e:	f04f 0c0a 	mov.w	ip, #10
 8008752:	4620      	mov	r0, r4
 8008754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008758:	3a30      	subs	r2, #48	; 0x30
 800875a:	2a09      	cmp	r2, #9
 800875c:	d903      	bls.n	8008766 <_vfiprintf_r+0x1ee>
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0c5      	beq.n	80086ee <_vfiprintf_r+0x176>
 8008762:	9105      	str	r1, [sp, #20]
 8008764:	e7c3      	b.n	80086ee <_vfiprintf_r+0x176>
 8008766:	fb0c 2101 	mla	r1, ip, r1, r2
 800876a:	4604      	mov	r4, r0
 800876c:	2301      	movs	r3, #1
 800876e:	e7f0      	b.n	8008752 <_vfiprintf_r+0x1da>
 8008770:	ab03      	add	r3, sp, #12
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	462a      	mov	r2, r5
 8008776:	4b16      	ldr	r3, [pc, #88]	; (80087d0 <_vfiprintf_r+0x258>)
 8008778:	a904      	add	r1, sp, #16
 800877a:	4630      	mov	r0, r6
 800877c:	f000 f8d6 	bl	800892c <_printf_float>
 8008780:	4607      	mov	r7, r0
 8008782:	1c78      	adds	r0, r7, #1
 8008784:	d1d6      	bne.n	8008734 <_vfiprintf_r+0x1bc>
 8008786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008788:	07d9      	lsls	r1, r3, #31
 800878a:	d405      	bmi.n	8008798 <_vfiprintf_r+0x220>
 800878c:	89ab      	ldrh	r3, [r5, #12]
 800878e:	059a      	lsls	r2, r3, #22
 8008790:	d402      	bmi.n	8008798 <_vfiprintf_r+0x220>
 8008792:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008794:	f7ff fd8e 	bl	80082b4 <__retarget_lock_release_recursive>
 8008798:	89ab      	ldrh	r3, [r5, #12]
 800879a:	065b      	lsls	r3, r3, #25
 800879c:	f53f af12 	bmi.w	80085c4 <_vfiprintf_r+0x4c>
 80087a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087a2:	e711      	b.n	80085c8 <_vfiprintf_r+0x50>
 80087a4:	ab03      	add	r3, sp, #12
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	462a      	mov	r2, r5
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <_vfiprintf_r+0x258>)
 80087ac:	a904      	add	r1, sp, #16
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 fb60 	bl	8008e74 <_printf_i>
 80087b4:	e7e4      	b.n	8008780 <_vfiprintf_r+0x208>
 80087b6:	bf00      	nop
 80087b8:	0800ef40 	.word	0x0800ef40
 80087bc:	0800ef60 	.word	0x0800ef60
 80087c0:	0800ef20 	.word	0x0800ef20
 80087c4:	0800ef84 	.word	0x0800ef84
 80087c8:	0800ef8e 	.word	0x0800ef8e
 80087cc:	0800892d 	.word	0x0800892d
 80087d0:	08008553 	.word	0x08008553
 80087d4:	0800ef8a 	.word	0x0800ef8a

080087d8 <vfiprintf>:
 80087d8:	4613      	mov	r3, r2
 80087da:	460a      	mov	r2, r1
 80087dc:	4601      	mov	r1, r0
 80087de:	4802      	ldr	r0, [pc, #8]	; (80087e8 <vfiprintf+0x10>)
 80087e0:	6800      	ldr	r0, [r0, #0]
 80087e2:	f7ff bec9 	b.w	8008578 <_vfiprintf_r>
 80087e6:	bf00      	nop
 80087e8:	2000000c 	.word	0x2000000c

080087ec <__cvt>:
 80087ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	ec55 4b10 	vmov	r4, r5, d0
 80087f4:	2d00      	cmp	r5, #0
 80087f6:	460e      	mov	r6, r1
 80087f8:	4619      	mov	r1, r3
 80087fa:	462b      	mov	r3, r5
 80087fc:	bfbb      	ittet	lt
 80087fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008802:	461d      	movlt	r5, r3
 8008804:	2300      	movge	r3, #0
 8008806:	232d      	movlt	r3, #45	; 0x2d
 8008808:	700b      	strb	r3, [r1, #0]
 800880a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800880c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008810:	4691      	mov	r9, r2
 8008812:	f023 0820 	bic.w	r8, r3, #32
 8008816:	bfbc      	itt	lt
 8008818:	4622      	movlt	r2, r4
 800881a:	4614      	movlt	r4, r2
 800881c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008820:	d005      	beq.n	800882e <__cvt+0x42>
 8008822:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008826:	d100      	bne.n	800882a <__cvt+0x3e>
 8008828:	3601      	adds	r6, #1
 800882a:	2102      	movs	r1, #2
 800882c:	e000      	b.n	8008830 <__cvt+0x44>
 800882e:	2103      	movs	r1, #3
 8008830:	ab03      	add	r3, sp, #12
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	ab02      	add	r3, sp, #8
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	ec45 4b10 	vmov	d0, r4, r5
 800883c:	4653      	mov	r3, sl
 800883e:	4632      	mov	r2, r6
 8008840:	f001 ff36 	bl	800a6b0 <_dtoa_r>
 8008844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008848:	4607      	mov	r7, r0
 800884a:	d102      	bne.n	8008852 <__cvt+0x66>
 800884c:	f019 0f01 	tst.w	r9, #1
 8008850:	d022      	beq.n	8008898 <__cvt+0xac>
 8008852:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008856:	eb07 0906 	add.w	r9, r7, r6
 800885a:	d110      	bne.n	800887e <__cvt+0x92>
 800885c:	783b      	ldrb	r3, [r7, #0]
 800885e:	2b30      	cmp	r3, #48	; 0x30
 8008860:	d10a      	bne.n	8008878 <__cvt+0x8c>
 8008862:	2200      	movs	r2, #0
 8008864:	2300      	movs	r3, #0
 8008866:	4620      	mov	r0, r4
 8008868:	4629      	mov	r1, r5
 800886a:	f7f8 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800886e:	b918      	cbnz	r0, 8008878 <__cvt+0x8c>
 8008870:	f1c6 0601 	rsb	r6, r6, #1
 8008874:	f8ca 6000 	str.w	r6, [sl]
 8008878:	f8da 3000 	ldr.w	r3, [sl]
 800887c:	4499      	add	r9, r3
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	4620      	mov	r0, r4
 8008884:	4629      	mov	r1, r5
 8008886:	f7f8 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800888a:	b108      	cbz	r0, 8008890 <__cvt+0xa4>
 800888c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008890:	2230      	movs	r2, #48	; 0x30
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	454b      	cmp	r3, r9
 8008896:	d307      	bcc.n	80088a8 <__cvt+0xbc>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800889c:	1bdb      	subs	r3, r3, r7
 800889e:	4638      	mov	r0, r7
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	b004      	add	sp, #16
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a8:	1c59      	adds	r1, r3, #1
 80088aa:	9103      	str	r1, [sp, #12]
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	e7f0      	b.n	8008892 <__cvt+0xa6>

080088b0 <__exponent>:
 80088b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088b2:	4603      	mov	r3, r0
 80088b4:	2900      	cmp	r1, #0
 80088b6:	bfb8      	it	lt
 80088b8:	4249      	neglt	r1, r1
 80088ba:	f803 2b02 	strb.w	r2, [r3], #2
 80088be:	bfb4      	ite	lt
 80088c0:	222d      	movlt	r2, #45	; 0x2d
 80088c2:	222b      	movge	r2, #43	; 0x2b
 80088c4:	2909      	cmp	r1, #9
 80088c6:	7042      	strb	r2, [r0, #1]
 80088c8:	dd2a      	ble.n	8008920 <__exponent+0x70>
 80088ca:	f10d 0407 	add.w	r4, sp, #7
 80088ce:	46a4      	mov	ip, r4
 80088d0:	270a      	movs	r7, #10
 80088d2:	46a6      	mov	lr, r4
 80088d4:	460a      	mov	r2, r1
 80088d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80088da:	fb07 1516 	mls	r5, r7, r6, r1
 80088de:	3530      	adds	r5, #48	; 0x30
 80088e0:	2a63      	cmp	r2, #99	; 0x63
 80088e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80088e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80088ea:	4631      	mov	r1, r6
 80088ec:	dcf1      	bgt.n	80088d2 <__exponent+0x22>
 80088ee:	3130      	adds	r1, #48	; 0x30
 80088f0:	f1ae 0502 	sub.w	r5, lr, #2
 80088f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80088f8:	1c44      	adds	r4, r0, #1
 80088fa:	4629      	mov	r1, r5
 80088fc:	4561      	cmp	r1, ip
 80088fe:	d30a      	bcc.n	8008916 <__exponent+0x66>
 8008900:	f10d 0209 	add.w	r2, sp, #9
 8008904:	eba2 020e 	sub.w	r2, r2, lr
 8008908:	4565      	cmp	r5, ip
 800890a:	bf88      	it	hi
 800890c:	2200      	movhi	r2, #0
 800890e:	4413      	add	r3, r2
 8008910:	1a18      	subs	r0, r3, r0
 8008912:	b003      	add	sp, #12
 8008914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800891a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800891e:	e7ed      	b.n	80088fc <__exponent+0x4c>
 8008920:	2330      	movs	r3, #48	; 0x30
 8008922:	3130      	adds	r1, #48	; 0x30
 8008924:	7083      	strb	r3, [r0, #2]
 8008926:	70c1      	strb	r1, [r0, #3]
 8008928:	1d03      	adds	r3, r0, #4
 800892a:	e7f1      	b.n	8008910 <__exponent+0x60>

0800892c <_printf_float>:
 800892c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008930:	ed2d 8b02 	vpush	{d8}
 8008934:	b08d      	sub	sp, #52	; 0x34
 8008936:	460c      	mov	r4, r1
 8008938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800893c:	4616      	mov	r6, r2
 800893e:	461f      	mov	r7, r3
 8008940:	4605      	mov	r5, r0
 8008942:	f003 f813 	bl	800b96c <_localeconv_r>
 8008946:	f8d0 a000 	ldr.w	sl, [r0]
 800894a:	4650      	mov	r0, sl
 800894c:	f7f7 fc40 	bl	80001d0 <strlen>
 8008950:	2300      	movs	r3, #0
 8008952:	930a      	str	r3, [sp, #40]	; 0x28
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	9305      	str	r3, [sp, #20]
 8008958:	f8d8 3000 	ldr.w	r3, [r8]
 800895c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008960:	3307      	adds	r3, #7
 8008962:	f023 0307 	bic.w	r3, r3, #7
 8008966:	f103 0208 	add.w	r2, r3, #8
 800896a:	f8c8 2000 	str.w	r2, [r8]
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008976:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800897a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800897e:	9307      	str	r3, [sp, #28]
 8008980:	f8cd 8018 	str.w	r8, [sp, #24]
 8008984:	ee08 0a10 	vmov	s16, r0
 8008988:	4b9f      	ldr	r3, [pc, #636]	; (8008c08 <_printf_float+0x2dc>)
 800898a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800898e:	f04f 32ff 	mov.w	r2, #4294967295
 8008992:	f7f8 f8cb 	bl	8000b2c <__aeabi_dcmpun>
 8008996:	bb88      	cbnz	r0, 80089fc <_printf_float+0xd0>
 8008998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800899c:	4b9a      	ldr	r3, [pc, #616]	; (8008c08 <_printf_float+0x2dc>)
 800899e:	f04f 32ff 	mov.w	r2, #4294967295
 80089a2:	f7f8 f8a5 	bl	8000af0 <__aeabi_dcmple>
 80089a6:	bb48      	cbnz	r0, 80089fc <_printf_float+0xd0>
 80089a8:	2200      	movs	r2, #0
 80089aa:	2300      	movs	r3, #0
 80089ac:	4640      	mov	r0, r8
 80089ae:	4649      	mov	r1, r9
 80089b0:	f7f8 f894 	bl	8000adc <__aeabi_dcmplt>
 80089b4:	b110      	cbz	r0, 80089bc <_printf_float+0x90>
 80089b6:	232d      	movs	r3, #45	; 0x2d
 80089b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089bc:	4b93      	ldr	r3, [pc, #588]	; (8008c0c <_printf_float+0x2e0>)
 80089be:	4894      	ldr	r0, [pc, #592]	; (8008c10 <_printf_float+0x2e4>)
 80089c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80089c4:	bf94      	ite	ls
 80089c6:	4698      	movls	r8, r3
 80089c8:	4680      	movhi	r8, r0
 80089ca:	2303      	movs	r3, #3
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	f023 0204 	bic.w	r2, r3, #4
 80089d4:	6022      	str	r2, [r4, #0]
 80089d6:	f04f 0900 	mov.w	r9, #0
 80089da:	9700      	str	r7, [sp, #0]
 80089dc:	4633      	mov	r3, r6
 80089de:	aa0b      	add	r2, sp, #44	; 0x2c
 80089e0:	4621      	mov	r1, r4
 80089e2:	4628      	mov	r0, r5
 80089e4:	f000 f9d8 	bl	8008d98 <_printf_common>
 80089e8:	3001      	adds	r0, #1
 80089ea:	f040 8090 	bne.w	8008b0e <_printf_float+0x1e2>
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	b00d      	add	sp, #52	; 0x34
 80089f4:	ecbd 8b02 	vpop	{d8}
 80089f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fc:	4642      	mov	r2, r8
 80089fe:	464b      	mov	r3, r9
 8008a00:	4640      	mov	r0, r8
 8008a02:	4649      	mov	r1, r9
 8008a04:	f7f8 f892 	bl	8000b2c <__aeabi_dcmpun>
 8008a08:	b140      	cbz	r0, 8008a1c <_printf_float+0xf0>
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bfbc      	itt	lt
 8008a10:	232d      	movlt	r3, #45	; 0x2d
 8008a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a16:	487f      	ldr	r0, [pc, #508]	; (8008c14 <_printf_float+0x2e8>)
 8008a18:	4b7f      	ldr	r3, [pc, #508]	; (8008c18 <_printf_float+0x2ec>)
 8008a1a:	e7d1      	b.n	80089c0 <_printf_float+0x94>
 8008a1c:	6863      	ldr	r3, [r4, #4]
 8008a1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a22:	9206      	str	r2, [sp, #24]
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	d13f      	bne.n	8008aa8 <_printf_float+0x17c>
 8008a28:	2306      	movs	r3, #6
 8008a2a:	6063      	str	r3, [r4, #4]
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	6861      	ldr	r1, [r4, #4]
 8008a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a34:	2300      	movs	r3, #0
 8008a36:	9303      	str	r3, [sp, #12]
 8008a38:	ab0a      	add	r3, sp, #40	; 0x28
 8008a3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a3e:	ab09      	add	r3, sp, #36	; 0x24
 8008a40:	ec49 8b10 	vmov	d0, r8, r9
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	6022      	str	r2, [r4, #0]
 8008a48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f7ff fecd 	bl	80087ec <__cvt>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a56:	2b47      	cmp	r3, #71	; 0x47
 8008a58:	4680      	mov	r8, r0
 8008a5a:	d108      	bne.n	8008a6e <_printf_float+0x142>
 8008a5c:	1cc8      	adds	r0, r1, #3
 8008a5e:	db02      	blt.n	8008a66 <_printf_float+0x13a>
 8008a60:	6863      	ldr	r3, [r4, #4]
 8008a62:	4299      	cmp	r1, r3
 8008a64:	dd41      	ble.n	8008aea <_printf_float+0x1be>
 8008a66:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a6a:	fa5f fb8b 	uxtb.w	fp, fp
 8008a6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a72:	d820      	bhi.n	8008ab6 <_printf_float+0x18a>
 8008a74:	3901      	subs	r1, #1
 8008a76:	465a      	mov	r2, fp
 8008a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8008a7e:	f7ff ff17 	bl	80088b0 <__exponent>
 8008a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a84:	1813      	adds	r3, r2, r0
 8008a86:	2a01      	cmp	r2, #1
 8008a88:	4681      	mov	r9, r0
 8008a8a:	6123      	str	r3, [r4, #16]
 8008a8c:	dc02      	bgt.n	8008a94 <_printf_float+0x168>
 8008a8e:	6822      	ldr	r2, [r4, #0]
 8008a90:	07d2      	lsls	r2, r2, #31
 8008a92:	d501      	bpl.n	8008a98 <_printf_float+0x16c>
 8008a94:	3301      	adds	r3, #1
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d09c      	beq.n	80089da <_printf_float+0xae>
 8008aa0:	232d      	movs	r3, #45	; 0x2d
 8008aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa6:	e798      	b.n	80089da <_printf_float+0xae>
 8008aa8:	9a06      	ldr	r2, [sp, #24]
 8008aaa:	2a47      	cmp	r2, #71	; 0x47
 8008aac:	d1be      	bne.n	8008a2c <_printf_float+0x100>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1bc      	bne.n	8008a2c <_printf_float+0x100>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7b9      	b.n	8008a2a <_printf_float+0xfe>
 8008ab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008aba:	d118      	bne.n	8008aee <_printf_float+0x1c2>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	dd0b      	ble.n	8008ada <_printf_float+0x1ae>
 8008ac2:	6121      	str	r1, [r4, #16]
 8008ac4:	b913      	cbnz	r3, 8008acc <_printf_float+0x1a0>
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	07d0      	lsls	r0, r2, #31
 8008aca:	d502      	bpl.n	8008ad2 <_printf_float+0x1a6>
 8008acc:	3301      	adds	r3, #1
 8008ace:	440b      	add	r3, r1
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ad4:	f04f 0900 	mov.w	r9, #0
 8008ad8:	e7de      	b.n	8008a98 <_printf_float+0x16c>
 8008ada:	b913      	cbnz	r3, 8008ae2 <_printf_float+0x1b6>
 8008adc:	6822      	ldr	r2, [r4, #0]
 8008ade:	07d2      	lsls	r2, r2, #31
 8008ae0:	d501      	bpl.n	8008ae6 <_printf_float+0x1ba>
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	e7f4      	b.n	8008ad0 <_printf_float+0x1a4>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e7f2      	b.n	8008ad0 <_printf_float+0x1a4>
 8008aea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af0:	4299      	cmp	r1, r3
 8008af2:	db05      	blt.n	8008b00 <_printf_float+0x1d4>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	6121      	str	r1, [r4, #16]
 8008af8:	07d8      	lsls	r0, r3, #31
 8008afa:	d5ea      	bpl.n	8008ad2 <_printf_float+0x1a6>
 8008afc:	1c4b      	adds	r3, r1, #1
 8008afe:	e7e7      	b.n	8008ad0 <_printf_float+0x1a4>
 8008b00:	2900      	cmp	r1, #0
 8008b02:	bfd4      	ite	le
 8008b04:	f1c1 0202 	rsble	r2, r1, #2
 8008b08:	2201      	movgt	r2, #1
 8008b0a:	4413      	add	r3, r2
 8008b0c:	e7e0      	b.n	8008ad0 <_printf_float+0x1a4>
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	055a      	lsls	r2, r3, #21
 8008b12:	d407      	bmi.n	8008b24 <_printf_float+0x1f8>
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	4642      	mov	r2, r8
 8008b18:	4631      	mov	r1, r6
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	47b8      	blx	r7
 8008b1e:	3001      	adds	r0, #1
 8008b20:	d12c      	bne.n	8008b7c <_printf_float+0x250>
 8008b22:	e764      	b.n	80089ee <_printf_float+0xc2>
 8008b24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b28:	f240 80e0 	bls.w	8008cec <_printf_float+0x3c0>
 8008b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b30:	2200      	movs	r2, #0
 8008b32:	2300      	movs	r3, #0
 8008b34:	f7f7 ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d034      	beq.n	8008ba6 <_printf_float+0x27a>
 8008b3c:	4a37      	ldr	r2, [pc, #220]	; (8008c1c <_printf_float+0x2f0>)
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4631      	mov	r1, r6
 8008b42:	4628      	mov	r0, r5
 8008b44:	47b8      	blx	r7
 8008b46:	3001      	adds	r0, #1
 8008b48:	f43f af51 	beq.w	80089ee <_printf_float+0xc2>
 8008b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b50:	429a      	cmp	r2, r3
 8008b52:	db02      	blt.n	8008b5a <_printf_float+0x22e>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	07d8      	lsls	r0, r3, #31
 8008b58:	d510      	bpl.n	8008b7c <_printf_float+0x250>
 8008b5a:	ee18 3a10 	vmov	r3, s16
 8008b5e:	4652      	mov	r2, sl
 8008b60:	4631      	mov	r1, r6
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	f43f af41 	beq.w	80089ee <_printf_float+0xc2>
 8008b6c:	f04f 0800 	mov.w	r8, #0
 8008b70:	f104 091a 	add.w	r9, r4, #26
 8008b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b76:	3b01      	subs	r3, #1
 8008b78:	4543      	cmp	r3, r8
 8008b7a:	dc09      	bgt.n	8008b90 <_printf_float+0x264>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	079b      	lsls	r3, r3, #30
 8008b80:	f100 8105 	bmi.w	8008d8e <_printf_float+0x462>
 8008b84:	68e0      	ldr	r0, [r4, #12]
 8008b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b88:	4298      	cmp	r0, r3
 8008b8a:	bfb8      	it	lt
 8008b8c:	4618      	movlt	r0, r3
 8008b8e:	e730      	b.n	80089f2 <_printf_float+0xc6>
 8008b90:	2301      	movs	r3, #1
 8008b92:	464a      	mov	r2, r9
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af27 	beq.w	80089ee <_printf_float+0xc2>
 8008ba0:	f108 0801 	add.w	r8, r8, #1
 8008ba4:	e7e6      	b.n	8008b74 <_printf_float+0x248>
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc39      	bgt.n	8008c20 <_printf_float+0x2f4>
 8008bac:	4a1b      	ldr	r2, [pc, #108]	; (8008c1c <_printf_float+0x2f0>)
 8008bae:	2301      	movs	r3, #1
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	47b8      	blx	r7
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	f43f af19 	beq.w	80089ee <_printf_float+0xc2>
 8008bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	d102      	bne.n	8008bca <_printf_float+0x29e>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	07d9      	lsls	r1, r3, #31
 8008bc8:	d5d8      	bpl.n	8008b7c <_printf_float+0x250>
 8008bca:	ee18 3a10 	vmov	r3, s16
 8008bce:	4652      	mov	r2, sl
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	f43f af09 	beq.w	80089ee <_printf_float+0xc2>
 8008bdc:	f04f 0900 	mov.w	r9, #0
 8008be0:	f104 0a1a 	add.w	sl, r4, #26
 8008be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be6:	425b      	negs	r3, r3
 8008be8:	454b      	cmp	r3, r9
 8008bea:	dc01      	bgt.n	8008bf0 <_printf_float+0x2c4>
 8008bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bee:	e792      	b.n	8008b16 <_printf_float+0x1ea>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4652      	mov	r2, sl
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b8      	blx	r7
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	f43f aef7 	beq.w	80089ee <_printf_float+0xc2>
 8008c00:	f109 0901 	add.w	r9, r9, #1
 8008c04:	e7ee      	b.n	8008be4 <_printf_float+0x2b8>
 8008c06:	bf00      	nop
 8008c08:	7fefffff 	.word	0x7fefffff
 8008c0c:	0800ef95 	.word	0x0800ef95
 8008c10:	0800ef99 	.word	0x0800ef99
 8008c14:	0800efa1 	.word	0x0800efa1
 8008c18:	0800ef9d 	.word	0x0800ef9d
 8008c1c:	0800efa5 	.word	0x0800efa5
 8008c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c24:	429a      	cmp	r2, r3
 8008c26:	bfa8      	it	ge
 8008c28:	461a      	movge	r2, r3
 8008c2a:	2a00      	cmp	r2, #0
 8008c2c:	4691      	mov	r9, r2
 8008c2e:	dc37      	bgt.n	8008ca0 <_printf_float+0x374>
 8008c30:	f04f 0b00 	mov.w	fp, #0
 8008c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c38:	f104 021a 	add.w	r2, r4, #26
 8008c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c3e:	9305      	str	r3, [sp, #20]
 8008c40:	eba3 0309 	sub.w	r3, r3, r9
 8008c44:	455b      	cmp	r3, fp
 8008c46:	dc33      	bgt.n	8008cb0 <_printf_float+0x384>
 8008c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	db3b      	blt.n	8008cc8 <_printf_float+0x39c>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	07da      	lsls	r2, r3, #31
 8008c54:	d438      	bmi.n	8008cc8 <_printf_float+0x39c>
 8008c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c58:	9a05      	ldr	r2, [sp, #20]
 8008c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c5c:	1a9a      	subs	r2, r3, r2
 8008c5e:	eba3 0901 	sub.w	r9, r3, r1
 8008c62:	4591      	cmp	r9, r2
 8008c64:	bfa8      	it	ge
 8008c66:	4691      	movge	r9, r2
 8008c68:	f1b9 0f00 	cmp.w	r9, #0
 8008c6c:	dc35      	bgt.n	8008cda <_printf_float+0x3ae>
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c76:	f104 0a1a 	add.w	sl, r4, #26
 8008c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	eba3 0309 	sub.w	r3, r3, r9
 8008c84:	4543      	cmp	r3, r8
 8008c86:	f77f af79 	ble.w	8008b7c <_printf_float+0x250>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4652      	mov	r2, sl
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	f43f aeaa 	beq.w	80089ee <_printf_float+0xc2>
 8008c9a:	f108 0801 	add.w	r8, r8, #1
 8008c9e:	e7ec      	b.n	8008c7a <_printf_float+0x34e>
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	47b8      	blx	r7
 8008caa:	3001      	adds	r0, #1
 8008cac:	d1c0      	bne.n	8008c30 <_printf_float+0x304>
 8008cae:	e69e      	b.n	80089ee <_printf_float+0xc2>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	9205      	str	r2, [sp, #20]
 8008cb8:	47b8      	blx	r7
 8008cba:	3001      	adds	r0, #1
 8008cbc:	f43f ae97 	beq.w	80089ee <_printf_float+0xc2>
 8008cc0:	9a05      	ldr	r2, [sp, #20]
 8008cc2:	f10b 0b01 	add.w	fp, fp, #1
 8008cc6:	e7b9      	b.n	8008c3c <_printf_float+0x310>
 8008cc8:	ee18 3a10 	vmov	r3, s16
 8008ccc:	4652      	mov	r2, sl
 8008cce:	4631      	mov	r1, r6
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b8      	blx	r7
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d1be      	bne.n	8008c56 <_printf_float+0x32a>
 8008cd8:	e689      	b.n	80089ee <_printf_float+0xc2>
 8008cda:	9a05      	ldr	r2, [sp, #20]
 8008cdc:	464b      	mov	r3, r9
 8008cde:	4442      	add	r2, r8
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	47b8      	blx	r7
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d1c1      	bne.n	8008c6e <_printf_float+0x342>
 8008cea:	e680      	b.n	80089ee <_printf_float+0xc2>
 8008cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cee:	2a01      	cmp	r2, #1
 8008cf0:	dc01      	bgt.n	8008cf6 <_printf_float+0x3ca>
 8008cf2:	07db      	lsls	r3, r3, #31
 8008cf4:	d538      	bpl.n	8008d68 <_printf_float+0x43c>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	47b8      	blx	r7
 8008d00:	3001      	adds	r0, #1
 8008d02:	f43f ae74 	beq.w	80089ee <_printf_float+0xc2>
 8008d06:	ee18 3a10 	vmov	r3, s16
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4628      	mov	r0, r5
 8008d10:	47b8      	blx	r7
 8008d12:	3001      	adds	r0, #1
 8008d14:	f43f ae6b 	beq.w	80089ee <_printf_float+0xc2>
 8008d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f7f7 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d24:	b9d8      	cbnz	r0, 8008d5e <_printf_float+0x432>
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	f108 0201 	add.w	r2, r8, #1
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4628      	mov	r0, r5
 8008d32:	47b8      	blx	r7
 8008d34:	3001      	adds	r0, #1
 8008d36:	d10e      	bne.n	8008d56 <_printf_float+0x42a>
 8008d38:	e659      	b.n	80089ee <_printf_float+0xc2>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4652      	mov	r2, sl
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	f43f ae52 	beq.w	80089ee <_printf_float+0xc2>
 8008d4a:	f108 0801 	add.w	r8, r8, #1
 8008d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d50:	3b01      	subs	r3, #1
 8008d52:	4543      	cmp	r3, r8
 8008d54:	dcf1      	bgt.n	8008d3a <_printf_float+0x40e>
 8008d56:	464b      	mov	r3, r9
 8008d58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d5c:	e6dc      	b.n	8008b18 <_printf_float+0x1ec>
 8008d5e:	f04f 0800 	mov.w	r8, #0
 8008d62:	f104 0a1a 	add.w	sl, r4, #26
 8008d66:	e7f2      	b.n	8008d4e <_printf_float+0x422>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	4642      	mov	r2, r8
 8008d6c:	e7df      	b.n	8008d2e <_printf_float+0x402>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	464a      	mov	r2, r9
 8008d72:	4631      	mov	r1, r6
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b8      	blx	r7
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f43f ae38 	beq.w	80089ee <_printf_float+0xc2>
 8008d7e:	f108 0801 	add.w	r8, r8, #1
 8008d82:	68e3      	ldr	r3, [r4, #12]
 8008d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d86:	1a5b      	subs	r3, r3, r1
 8008d88:	4543      	cmp	r3, r8
 8008d8a:	dcf0      	bgt.n	8008d6e <_printf_float+0x442>
 8008d8c:	e6fa      	b.n	8008b84 <_printf_float+0x258>
 8008d8e:	f04f 0800 	mov.w	r8, #0
 8008d92:	f104 0919 	add.w	r9, r4, #25
 8008d96:	e7f4      	b.n	8008d82 <_printf_float+0x456>

08008d98 <_printf_common>:
 8008d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	4616      	mov	r6, r2
 8008d9e:	4699      	mov	r9, r3
 8008da0:	688a      	ldr	r2, [r1, #8]
 8008da2:	690b      	ldr	r3, [r1, #16]
 8008da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	bfb8      	it	lt
 8008dac:	4613      	movlt	r3, r2
 8008dae:	6033      	str	r3, [r6, #0]
 8008db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008db4:	4607      	mov	r7, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	b10a      	cbz	r2, 8008dbe <_printf_common+0x26>
 8008dba:	3301      	adds	r3, #1
 8008dbc:	6033      	str	r3, [r6, #0]
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	0699      	lsls	r1, r3, #26
 8008dc2:	bf42      	ittt	mi
 8008dc4:	6833      	ldrmi	r3, [r6, #0]
 8008dc6:	3302      	addmi	r3, #2
 8008dc8:	6033      	strmi	r3, [r6, #0]
 8008dca:	6825      	ldr	r5, [r4, #0]
 8008dcc:	f015 0506 	ands.w	r5, r5, #6
 8008dd0:	d106      	bne.n	8008de0 <_printf_common+0x48>
 8008dd2:	f104 0a19 	add.w	sl, r4, #25
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	6832      	ldr	r2, [r6, #0]
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dc26      	bgt.n	8008e2e <_printf_common+0x96>
 8008de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008de4:	1e13      	subs	r3, r2, #0
 8008de6:	6822      	ldr	r2, [r4, #0]
 8008de8:	bf18      	it	ne
 8008dea:	2301      	movne	r3, #1
 8008dec:	0692      	lsls	r2, r2, #26
 8008dee:	d42b      	bmi.n	8008e48 <_printf_common+0xb0>
 8008df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008df4:	4649      	mov	r1, r9
 8008df6:	4638      	mov	r0, r7
 8008df8:	47c0      	blx	r8
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d01e      	beq.n	8008e3c <_printf_common+0xa4>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	68e5      	ldr	r5, [r4, #12]
 8008e02:	6832      	ldr	r2, [r6, #0]
 8008e04:	f003 0306 	and.w	r3, r3, #6
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	bf08      	it	eq
 8008e0c:	1aad      	subeq	r5, r5, r2
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	bf0c      	ite	eq
 8008e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e18:	2500      	movne	r5, #0
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bfc4      	itt	gt
 8008e1e:	1a9b      	subgt	r3, r3, r2
 8008e20:	18ed      	addgt	r5, r5, r3
 8008e22:	2600      	movs	r6, #0
 8008e24:	341a      	adds	r4, #26
 8008e26:	42b5      	cmp	r5, r6
 8008e28:	d11a      	bne.n	8008e60 <_printf_common+0xc8>
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	e008      	b.n	8008e40 <_printf_common+0xa8>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4652      	mov	r2, sl
 8008e32:	4649      	mov	r1, r9
 8008e34:	4638      	mov	r0, r7
 8008e36:	47c0      	blx	r8
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d103      	bne.n	8008e44 <_printf_common+0xac>
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	3501      	adds	r5, #1
 8008e46:	e7c6      	b.n	8008dd6 <_printf_common+0x3e>
 8008e48:	18e1      	adds	r1, r4, r3
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	2030      	movs	r0, #48	; 0x30
 8008e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e52:	4422      	add	r2, r4
 8008e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	e7c7      	b.n	8008df0 <_printf_common+0x58>
 8008e60:	2301      	movs	r3, #1
 8008e62:	4622      	mov	r2, r4
 8008e64:	4649      	mov	r1, r9
 8008e66:	4638      	mov	r0, r7
 8008e68:	47c0      	blx	r8
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d0e6      	beq.n	8008e3c <_printf_common+0xa4>
 8008e6e:	3601      	adds	r6, #1
 8008e70:	e7d9      	b.n	8008e26 <_printf_common+0x8e>
	...

08008e74 <_printf_i>:
 8008e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	7e0f      	ldrb	r7, [r1, #24]
 8008e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e7c:	2f78      	cmp	r7, #120	; 0x78
 8008e7e:	4691      	mov	r9, r2
 8008e80:	4680      	mov	r8, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	469a      	mov	sl, r3
 8008e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e8a:	d807      	bhi.n	8008e9c <_printf_i+0x28>
 8008e8c:	2f62      	cmp	r7, #98	; 0x62
 8008e8e:	d80a      	bhi.n	8008ea6 <_printf_i+0x32>
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	f000 80d8 	beq.w	8009046 <_printf_i+0x1d2>
 8008e96:	2f58      	cmp	r7, #88	; 0x58
 8008e98:	f000 80a3 	beq.w	8008fe2 <_printf_i+0x16e>
 8008e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ea4:	e03a      	b.n	8008f1c <_printf_i+0xa8>
 8008ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eaa:	2b15      	cmp	r3, #21
 8008eac:	d8f6      	bhi.n	8008e9c <_printf_i+0x28>
 8008eae:	a101      	add	r1, pc, #4	; (adr r1, 8008eb4 <_printf_i+0x40>)
 8008eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eb4:	08008f0d 	.word	0x08008f0d
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008e9d 	.word	0x08008e9d
 8008ec0:	08008e9d 	.word	0x08008e9d
 8008ec4:	08008e9d 	.word	0x08008e9d
 8008ec8:	08008e9d 	.word	0x08008e9d
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008e9d 	.word	0x08008e9d
 8008ed4:	08008e9d 	.word	0x08008e9d
 8008ed8:	08008e9d 	.word	0x08008e9d
 8008edc:	08008e9d 	.word	0x08008e9d
 8008ee0:	0800902d 	.word	0x0800902d
 8008ee4:	08008f51 	.word	0x08008f51
 8008ee8:	0800900f 	.word	0x0800900f
 8008eec:	08008e9d 	.word	0x08008e9d
 8008ef0:	08008e9d 	.word	0x08008e9d
 8008ef4:	0800904f 	.word	0x0800904f
 8008ef8:	08008e9d 	.word	0x08008e9d
 8008efc:	08008f51 	.word	0x08008f51
 8008f00:	08008e9d 	.word	0x08008e9d
 8008f04:	08008e9d 	.word	0x08008e9d
 8008f08:	08009017 	.word	0x08009017
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	602a      	str	r2, [r5, #0]
 8008f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e0a3      	b.n	8009068 <_printf_i+0x1f4>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	6829      	ldr	r1, [r5, #0]
 8008f24:	0606      	lsls	r6, r0, #24
 8008f26:	f101 0304 	add.w	r3, r1, #4
 8008f2a:	d50a      	bpl.n	8008f42 <_printf_i+0xce>
 8008f2c:	680e      	ldr	r6, [r1, #0]
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	da03      	bge.n	8008f3c <_printf_i+0xc8>
 8008f34:	232d      	movs	r3, #45	; 0x2d
 8008f36:	4276      	negs	r6, r6
 8008f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f3c:	485e      	ldr	r0, [pc, #376]	; (80090b8 <_printf_i+0x244>)
 8008f3e:	230a      	movs	r3, #10
 8008f40:	e019      	b.n	8008f76 <_printf_i+0x102>
 8008f42:	680e      	ldr	r6, [r1, #0]
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f4a:	bf18      	it	ne
 8008f4c:	b236      	sxthne	r6, r6
 8008f4e:	e7ef      	b.n	8008f30 <_printf_i+0xbc>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	1d19      	adds	r1, r3, #4
 8008f56:	6029      	str	r1, [r5, #0]
 8008f58:	0601      	lsls	r1, r0, #24
 8008f5a:	d501      	bpl.n	8008f60 <_printf_i+0xec>
 8008f5c:	681e      	ldr	r6, [r3, #0]
 8008f5e:	e002      	b.n	8008f66 <_printf_i+0xf2>
 8008f60:	0646      	lsls	r6, r0, #25
 8008f62:	d5fb      	bpl.n	8008f5c <_printf_i+0xe8>
 8008f64:	881e      	ldrh	r6, [r3, #0]
 8008f66:	4854      	ldr	r0, [pc, #336]	; (80090b8 <_printf_i+0x244>)
 8008f68:	2f6f      	cmp	r7, #111	; 0x6f
 8008f6a:	bf0c      	ite	eq
 8008f6c:	2308      	moveq	r3, #8
 8008f6e:	230a      	movne	r3, #10
 8008f70:	2100      	movs	r1, #0
 8008f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f76:	6865      	ldr	r5, [r4, #4]
 8008f78:	60a5      	str	r5, [r4, #8]
 8008f7a:	2d00      	cmp	r5, #0
 8008f7c:	bfa2      	ittt	ge
 8008f7e:	6821      	ldrge	r1, [r4, #0]
 8008f80:	f021 0104 	bicge.w	r1, r1, #4
 8008f84:	6021      	strge	r1, [r4, #0]
 8008f86:	b90e      	cbnz	r6, 8008f8c <_printf_i+0x118>
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	d04d      	beq.n	8009028 <_printf_i+0x1b4>
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f92:	fb03 6711 	mls	r7, r3, r1, r6
 8008f96:	5dc7      	ldrb	r7, [r0, r7]
 8008f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f9c:	4637      	mov	r7, r6
 8008f9e:	42bb      	cmp	r3, r7
 8008fa0:	460e      	mov	r6, r1
 8008fa2:	d9f4      	bls.n	8008f8e <_printf_i+0x11a>
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d10b      	bne.n	8008fc0 <_printf_i+0x14c>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	07de      	lsls	r6, r3, #31
 8008fac:	d508      	bpl.n	8008fc0 <_printf_i+0x14c>
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	6861      	ldr	r1, [r4, #4]
 8008fb2:	4299      	cmp	r1, r3
 8008fb4:	bfde      	ittt	le
 8008fb6:	2330      	movle	r3, #48	; 0x30
 8008fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fc0:	1b52      	subs	r2, r2, r5
 8008fc2:	6122      	str	r2, [r4, #16]
 8008fc4:	f8cd a000 	str.w	sl, [sp]
 8008fc8:	464b      	mov	r3, r9
 8008fca:	aa03      	add	r2, sp, #12
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f7ff fee2 	bl	8008d98 <_printf_common>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d14c      	bne.n	8009072 <_printf_i+0x1fe>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	b004      	add	sp, #16
 8008fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe2:	4835      	ldr	r0, [pc, #212]	; (80090b8 <_printf_i+0x244>)
 8008fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fe8:	6829      	ldr	r1, [r5, #0]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ff0:	6029      	str	r1, [r5, #0]
 8008ff2:	061d      	lsls	r5, r3, #24
 8008ff4:	d514      	bpl.n	8009020 <_printf_i+0x1ac>
 8008ff6:	07df      	lsls	r7, r3, #31
 8008ff8:	bf44      	itt	mi
 8008ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8008ffe:	6023      	strmi	r3, [r4, #0]
 8009000:	b91e      	cbnz	r6, 800900a <_printf_i+0x196>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f023 0320 	bic.w	r3, r3, #32
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	2310      	movs	r3, #16
 800900c:	e7b0      	b.n	8008f70 <_printf_i+0xfc>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	f043 0320 	orr.w	r3, r3, #32
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	2378      	movs	r3, #120	; 0x78
 8009018:	4828      	ldr	r0, [pc, #160]	; (80090bc <_printf_i+0x248>)
 800901a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800901e:	e7e3      	b.n	8008fe8 <_printf_i+0x174>
 8009020:	0659      	lsls	r1, r3, #25
 8009022:	bf48      	it	mi
 8009024:	b2b6      	uxthmi	r6, r6
 8009026:	e7e6      	b.n	8008ff6 <_printf_i+0x182>
 8009028:	4615      	mov	r5, r2
 800902a:	e7bb      	b.n	8008fa4 <_printf_i+0x130>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	6826      	ldr	r6, [r4, #0]
 8009030:	6961      	ldr	r1, [r4, #20]
 8009032:	1d18      	adds	r0, r3, #4
 8009034:	6028      	str	r0, [r5, #0]
 8009036:	0635      	lsls	r5, r6, #24
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	d501      	bpl.n	8009040 <_printf_i+0x1cc>
 800903c:	6019      	str	r1, [r3, #0]
 800903e:	e002      	b.n	8009046 <_printf_i+0x1d2>
 8009040:	0670      	lsls	r0, r6, #25
 8009042:	d5fb      	bpl.n	800903c <_printf_i+0x1c8>
 8009044:	8019      	strh	r1, [r3, #0]
 8009046:	2300      	movs	r3, #0
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	4615      	mov	r5, r2
 800904c:	e7ba      	b.n	8008fc4 <_printf_i+0x150>
 800904e:	682b      	ldr	r3, [r5, #0]
 8009050:	1d1a      	adds	r2, r3, #4
 8009052:	602a      	str	r2, [r5, #0]
 8009054:	681d      	ldr	r5, [r3, #0]
 8009056:	6862      	ldr	r2, [r4, #4]
 8009058:	2100      	movs	r1, #0
 800905a:	4628      	mov	r0, r5
 800905c:	f7f7 f8c0 	bl	80001e0 <memchr>
 8009060:	b108      	cbz	r0, 8009066 <_printf_i+0x1f2>
 8009062:	1b40      	subs	r0, r0, r5
 8009064:	6060      	str	r0, [r4, #4]
 8009066:	6863      	ldr	r3, [r4, #4]
 8009068:	6123      	str	r3, [r4, #16]
 800906a:	2300      	movs	r3, #0
 800906c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009070:	e7a8      	b.n	8008fc4 <_printf_i+0x150>
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	462a      	mov	r2, r5
 8009076:	4649      	mov	r1, r9
 8009078:	4640      	mov	r0, r8
 800907a:	47d0      	blx	sl
 800907c:	3001      	adds	r0, #1
 800907e:	d0ab      	beq.n	8008fd8 <_printf_i+0x164>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	079b      	lsls	r3, r3, #30
 8009084:	d413      	bmi.n	80090ae <_printf_i+0x23a>
 8009086:	68e0      	ldr	r0, [r4, #12]
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	4298      	cmp	r0, r3
 800908c:	bfb8      	it	lt
 800908e:	4618      	movlt	r0, r3
 8009090:	e7a4      	b.n	8008fdc <_printf_i+0x168>
 8009092:	2301      	movs	r3, #1
 8009094:	4632      	mov	r2, r6
 8009096:	4649      	mov	r1, r9
 8009098:	4640      	mov	r0, r8
 800909a:	47d0      	blx	sl
 800909c:	3001      	adds	r0, #1
 800909e:	d09b      	beq.n	8008fd8 <_printf_i+0x164>
 80090a0:	3501      	adds	r5, #1
 80090a2:	68e3      	ldr	r3, [r4, #12]
 80090a4:	9903      	ldr	r1, [sp, #12]
 80090a6:	1a5b      	subs	r3, r3, r1
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dcf2      	bgt.n	8009092 <_printf_i+0x21e>
 80090ac:	e7eb      	b.n	8009086 <_printf_i+0x212>
 80090ae:	2500      	movs	r5, #0
 80090b0:	f104 0619 	add.w	r6, r4, #25
 80090b4:	e7f5      	b.n	80090a2 <_printf_i+0x22e>
 80090b6:	bf00      	nop
 80090b8:	0800efa7 	.word	0x0800efa7
 80090bc:	0800efb8 	.word	0x0800efb8

080090c0 <_scanf_float>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	b087      	sub	sp, #28
 80090c6:	4617      	mov	r7, r2
 80090c8:	9303      	str	r3, [sp, #12]
 80090ca:	688b      	ldr	r3, [r1, #8]
 80090cc:	1e5a      	subs	r2, r3, #1
 80090ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80090d2:	bf83      	ittte	hi
 80090d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80090d8:	195b      	addhi	r3, r3, r5
 80090da:	9302      	strhi	r3, [sp, #8]
 80090dc:	2300      	movls	r3, #0
 80090de:	bf86      	itte	hi
 80090e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090e4:	608b      	strhi	r3, [r1, #8]
 80090e6:	9302      	strls	r3, [sp, #8]
 80090e8:	680b      	ldr	r3, [r1, #0]
 80090ea:	468b      	mov	fp, r1
 80090ec:	2500      	movs	r5, #0
 80090ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80090f2:	f84b 3b1c 	str.w	r3, [fp], #28
 80090f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090fa:	4680      	mov	r8, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	465e      	mov	r6, fp
 8009100:	46aa      	mov	sl, r5
 8009102:	46a9      	mov	r9, r5
 8009104:	9501      	str	r5, [sp, #4]
 8009106:	68a2      	ldr	r2, [r4, #8]
 8009108:	b152      	cbz	r2, 8009120 <_scanf_float+0x60>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b4e      	cmp	r3, #78	; 0x4e
 8009110:	d864      	bhi.n	80091dc <_scanf_float+0x11c>
 8009112:	2b40      	cmp	r3, #64	; 0x40
 8009114:	d83c      	bhi.n	8009190 <_scanf_float+0xd0>
 8009116:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800911a:	b2c8      	uxtb	r0, r1
 800911c:	280e      	cmp	r0, #14
 800911e:	d93a      	bls.n	8009196 <_scanf_float+0xd6>
 8009120:	f1b9 0f00 	cmp.w	r9, #0
 8009124:	d003      	beq.n	800912e <_scanf_float+0x6e>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009132:	f1ba 0f01 	cmp.w	sl, #1
 8009136:	f200 8113 	bhi.w	8009360 <_scanf_float+0x2a0>
 800913a:	455e      	cmp	r6, fp
 800913c:	f200 8105 	bhi.w	800934a <_scanf_float+0x28a>
 8009140:	2501      	movs	r5, #1
 8009142:	4628      	mov	r0, r5
 8009144:	b007      	add	sp, #28
 8009146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800914e:	2a0d      	cmp	r2, #13
 8009150:	d8e6      	bhi.n	8009120 <_scanf_float+0x60>
 8009152:	a101      	add	r1, pc, #4	; (adr r1, 8009158 <_scanf_float+0x98>)
 8009154:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009158:	08009297 	.word	0x08009297
 800915c:	08009121 	.word	0x08009121
 8009160:	08009121 	.word	0x08009121
 8009164:	08009121 	.word	0x08009121
 8009168:	080092f7 	.word	0x080092f7
 800916c:	080092cf 	.word	0x080092cf
 8009170:	08009121 	.word	0x08009121
 8009174:	08009121 	.word	0x08009121
 8009178:	080092a5 	.word	0x080092a5
 800917c:	08009121 	.word	0x08009121
 8009180:	08009121 	.word	0x08009121
 8009184:	08009121 	.word	0x08009121
 8009188:	08009121 	.word	0x08009121
 800918c:	0800925d 	.word	0x0800925d
 8009190:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009194:	e7db      	b.n	800914e <_scanf_float+0x8e>
 8009196:	290e      	cmp	r1, #14
 8009198:	d8c2      	bhi.n	8009120 <_scanf_float+0x60>
 800919a:	a001      	add	r0, pc, #4	; (adr r0, 80091a0 <_scanf_float+0xe0>)
 800919c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091a0:	0800924f 	.word	0x0800924f
 80091a4:	08009121 	.word	0x08009121
 80091a8:	0800924f 	.word	0x0800924f
 80091ac:	080092e3 	.word	0x080092e3
 80091b0:	08009121 	.word	0x08009121
 80091b4:	080091fd 	.word	0x080091fd
 80091b8:	08009239 	.word	0x08009239
 80091bc:	08009239 	.word	0x08009239
 80091c0:	08009239 	.word	0x08009239
 80091c4:	08009239 	.word	0x08009239
 80091c8:	08009239 	.word	0x08009239
 80091cc:	08009239 	.word	0x08009239
 80091d0:	08009239 	.word	0x08009239
 80091d4:	08009239 	.word	0x08009239
 80091d8:	08009239 	.word	0x08009239
 80091dc:	2b6e      	cmp	r3, #110	; 0x6e
 80091de:	d809      	bhi.n	80091f4 <_scanf_float+0x134>
 80091e0:	2b60      	cmp	r3, #96	; 0x60
 80091e2:	d8b2      	bhi.n	800914a <_scanf_float+0x8a>
 80091e4:	2b54      	cmp	r3, #84	; 0x54
 80091e6:	d077      	beq.n	80092d8 <_scanf_float+0x218>
 80091e8:	2b59      	cmp	r3, #89	; 0x59
 80091ea:	d199      	bne.n	8009120 <_scanf_float+0x60>
 80091ec:	2d07      	cmp	r5, #7
 80091ee:	d197      	bne.n	8009120 <_scanf_float+0x60>
 80091f0:	2508      	movs	r5, #8
 80091f2:	e029      	b.n	8009248 <_scanf_float+0x188>
 80091f4:	2b74      	cmp	r3, #116	; 0x74
 80091f6:	d06f      	beq.n	80092d8 <_scanf_float+0x218>
 80091f8:	2b79      	cmp	r3, #121	; 0x79
 80091fa:	e7f6      	b.n	80091ea <_scanf_float+0x12a>
 80091fc:	6821      	ldr	r1, [r4, #0]
 80091fe:	05c8      	lsls	r0, r1, #23
 8009200:	d51a      	bpl.n	8009238 <_scanf_float+0x178>
 8009202:	9b02      	ldr	r3, [sp, #8]
 8009204:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009208:	6021      	str	r1, [r4, #0]
 800920a:	f109 0901 	add.w	r9, r9, #1
 800920e:	b11b      	cbz	r3, 8009218 <_scanf_float+0x158>
 8009210:	3b01      	subs	r3, #1
 8009212:	3201      	adds	r2, #1
 8009214:	9302      	str	r3, [sp, #8]
 8009216:	60a2      	str	r2, [r4, #8]
 8009218:	68a3      	ldr	r3, [r4, #8]
 800921a:	3b01      	subs	r3, #1
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	3301      	adds	r3, #1
 8009222:	6123      	str	r3, [r4, #16]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3b01      	subs	r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	607b      	str	r3, [r7, #4]
 800922c:	f340 8084 	ble.w	8009338 <_scanf_float+0x278>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	603b      	str	r3, [r7, #0]
 8009236:	e766      	b.n	8009106 <_scanf_float+0x46>
 8009238:	eb1a 0f05 	cmn.w	sl, r5
 800923c:	f47f af70 	bne.w	8009120 <_scanf_float+0x60>
 8009240:	6822      	ldr	r2, [r4, #0]
 8009242:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009246:	6022      	str	r2, [r4, #0]
 8009248:	f806 3b01 	strb.w	r3, [r6], #1
 800924c:	e7e4      	b.n	8009218 <_scanf_float+0x158>
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	0610      	lsls	r0, r2, #24
 8009252:	f57f af65 	bpl.w	8009120 <_scanf_float+0x60>
 8009256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800925a:	e7f4      	b.n	8009246 <_scanf_float+0x186>
 800925c:	f1ba 0f00 	cmp.w	sl, #0
 8009260:	d10e      	bne.n	8009280 <_scanf_float+0x1c0>
 8009262:	f1b9 0f00 	cmp.w	r9, #0
 8009266:	d10e      	bne.n	8009286 <_scanf_float+0x1c6>
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800926e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009272:	d108      	bne.n	8009286 <_scanf_float+0x1c6>
 8009274:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009278:	6022      	str	r2, [r4, #0]
 800927a:	f04f 0a01 	mov.w	sl, #1
 800927e:	e7e3      	b.n	8009248 <_scanf_float+0x188>
 8009280:	f1ba 0f02 	cmp.w	sl, #2
 8009284:	d055      	beq.n	8009332 <_scanf_float+0x272>
 8009286:	2d01      	cmp	r5, #1
 8009288:	d002      	beq.n	8009290 <_scanf_float+0x1d0>
 800928a:	2d04      	cmp	r5, #4
 800928c:	f47f af48 	bne.w	8009120 <_scanf_float+0x60>
 8009290:	3501      	adds	r5, #1
 8009292:	b2ed      	uxtb	r5, r5
 8009294:	e7d8      	b.n	8009248 <_scanf_float+0x188>
 8009296:	f1ba 0f01 	cmp.w	sl, #1
 800929a:	f47f af41 	bne.w	8009120 <_scanf_float+0x60>
 800929e:	f04f 0a02 	mov.w	sl, #2
 80092a2:	e7d1      	b.n	8009248 <_scanf_float+0x188>
 80092a4:	b97d      	cbnz	r5, 80092c6 <_scanf_float+0x206>
 80092a6:	f1b9 0f00 	cmp.w	r9, #0
 80092aa:	f47f af3c 	bne.w	8009126 <_scanf_float+0x66>
 80092ae:	6822      	ldr	r2, [r4, #0]
 80092b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092b8:	f47f af39 	bne.w	800912e <_scanf_float+0x6e>
 80092bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092c0:	6022      	str	r2, [r4, #0]
 80092c2:	2501      	movs	r5, #1
 80092c4:	e7c0      	b.n	8009248 <_scanf_float+0x188>
 80092c6:	2d03      	cmp	r5, #3
 80092c8:	d0e2      	beq.n	8009290 <_scanf_float+0x1d0>
 80092ca:	2d05      	cmp	r5, #5
 80092cc:	e7de      	b.n	800928c <_scanf_float+0x1cc>
 80092ce:	2d02      	cmp	r5, #2
 80092d0:	f47f af26 	bne.w	8009120 <_scanf_float+0x60>
 80092d4:	2503      	movs	r5, #3
 80092d6:	e7b7      	b.n	8009248 <_scanf_float+0x188>
 80092d8:	2d06      	cmp	r5, #6
 80092da:	f47f af21 	bne.w	8009120 <_scanf_float+0x60>
 80092de:	2507      	movs	r5, #7
 80092e0:	e7b2      	b.n	8009248 <_scanf_float+0x188>
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	0591      	lsls	r1, r2, #22
 80092e6:	f57f af1b 	bpl.w	8009120 <_scanf_float+0x60>
 80092ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80092ee:	6022      	str	r2, [r4, #0]
 80092f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80092f4:	e7a8      	b.n	8009248 <_scanf_float+0x188>
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80092fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009300:	d006      	beq.n	8009310 <_scanf_float+0x250>
 8009302:	0550      	lsls	r0, r2, #21
 8009304:	f57f af0c 	bpl.w	8009120 <_scanf_float+0x60>
 8009308:	f1b9 0f00 	cmp.w	r9, #0
 800930c:	f43f af0f 	beq.w	800912e <_scanf_float+0x6e>
 8009310:	0591      	lsls	r1, r2, #22
 8009312:	bf58      	it	pl
 8009314:	9901      	ldrpl	r1, [sp, #4]
 8009316:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800931a:	bf58      	it	pl
 800931c:	eba9 0101 	subpl.w	r1, r9, r1
 8009320:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009324:	bf58      	it	pl
 8009326:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800932a:	6022      	str	r2, [r4, #0]
 800932c:	f04f 0900 	mov.w	r9, #0
 8009330:	e78a      	b.n	8009248 <_scanf_float+0x188>
 8009332:	f04f 0a03 	mov.w	sl, #3
 8009336:	e787      	b.n	8009248 <_scanf_float+0x188>
 8009338:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800933c:	4639      	mov	r1, r7
 800933e:	4640      	mov	r0, r8
 8009340:	4798      	blx	r3
 8009342:	2800      	cmp	r0, #0
 8009344:	f43f aedf 	beq.w	8009106 <_scanf_float+0x46>
 8009348:	e6ea      	b.n	8009120 <_scanf_float+0x60>
 800934a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800934e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009352:	463a      	mov	r2, r7
 8009354:	4640      	mov	r0, r8
 8009356:	4798      	blx	r3
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	3b01      	subs	r3, #1
 800935c:	6123      	str	r3, [r4, #16]
 800935e:	e6ec      	b.n	800913a <_scanf_float+0x7a>
 8009360:	1e6b      	subs	r3, r5, #1
 8009362:	2b06      	cmp	r3, #6
 8009364:	d825      	bhi.n	80093b2 <_scanf_float+0x2f2>
 8009366:	2d02      	cmp	r5, #2
 8009368:	d836      	bhi.n	80093d8 <_scanf_float+0x318>
 800936a:	455e      	cmp	r6, fp
 800936c:	f67f aee8 	bls.w	8009140 <_scanf_float+0x80>
 8009370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009374:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009378:	463a      	mov	r2, r7
 800937a:	4640      	mov	r0, r8
 800937c:	4798      	blx	r3
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	3b01      	subs	r3, #1
 8009382:	6123      	str	r3, [r4, #16]
 8009384:	e7f1      	b.n	800936a <_scanf_float+0x2aa>
 8009386:	9802      	ldr	r0, [sp, #8]
 8009388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800938c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009390:	9002      	str	r0, [sp, #8]
 8009392:	463a      	mov	r2, r7
 8009394:	4640      	mov	r0, r8
 8009396:	4798      	blx	r3
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	3b01      	subs	r3, #1
 800939c:	6123      	str	r3, [r4, #16]
 800939e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093a2:	fa5f fa8a 	uxtb.w	sl, sl
 80093a6:	f1ba 0f02 	cmp.w	sl, #2
 80093aa:	d1ec      	bne.n	8009386 <_scanf_float+0x2c6>
 80093ac:	3d03      	subs	r5, #3
 80093ae:	b2ed      	uxtb	r5, r5
 80093b0:	1b76      	subs	r6, r6, r5
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	05da      	lsls	r2, r3, #23
 80093b6:	d52f      	bpl.n	8009418 <_scanf_float+0x358>
 80093b8:	055b      	lsls	r3, r3, #21
 80093ba:	d510      	bpl.n	80093de <_scanf_float+0x31e>
 80093bc:	455e      	cmp	r6, fp
 80093be:	f67f aebf 	bls.w	8009140 <_scanf_float+0x80>
 80093c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093ca:	463a      	mov	r2, r7
 80093cc:	4640      	mov	r0, r8
 80093ce:	4798      	blx	r3
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	e7f1      	b.n	80093bc <_scanf_float+0x2fc>
 80093d8:	46aa      	mov	sl, r5
 80093da:	9602      	str	r6, [sp, #8]
 80093dc:	e7df      	b.n	800939e <_scanf_float+0x2de>
 80093de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093e2:	6923      	ldr	r3, [r4, #16]
 80093e4:	2965      	cmp	r1, #101	; 0x65
 80093e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80093ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	d00c      	beq.n	800940c <_scanf_float+0x34c>
 80093f2:	2945      	cmp	r1, #69	; 0x45
 80093f4:	d00a      	beq.n	800940c <_scanf_float+0x34c>
 80093f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093fa:	463a      	mov	r2, r7
 80093fc:	4640      	mov	r0, r8
 80093fe:	4798      	blx	r3
 8009400:	6923      	ldr	r3, [r4, #16]
 8009402:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009406:	3b01      	subs	r3, #1
 8009408:	1eb5      	subs	r5, r6, #2
 800940a:	6123      	str	r3, [r4, #16]
 800940c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009410:	463a      	mov	r2, r7
 8009412:	4640      	mov	r0, r8
 8009414:	4798      	blx	r3
 8009416:	462e      	mov	r6, r5
 8009418:	6825      	ldr	r5, [r4, #0]
 800941a:	f015 0510 	ands.w	r5, r5, #16
 800941e:	d159      	bne.n	80094d4 <_scanf_float+0x414>
 8009420:	7035      	strb	r5, [r6, #0]
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800942c:	d11b      	bne.n	8009466 <_scanf_float+0x3a6>
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	454b      	cmp	r3, r9
 8009432:	eba3 0209 	sub.w	r2, r3, r9
 8009436:	d123      	bne.n	8009480 <_scanf_float+0x3c0>
 8009438:	2200      	movs	r2, #0
 800943a:	4659      	mov	r1, fp
 800943c:	4640      	mov	r0, r8
 800943e:	f000 ff35 	bl	800a2ac <_strtod_r>
 8009442:	6822      	ldr	r2, [r4, #0]
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	f012 0f02 	tst.w	r2, #2
 800944a:	ec57 6b10 	vmov	r6, r7, d0
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	d021      	beq.n	8009496 <_scanf_float+0x3d6>
 8009452:	9903      	ldr	r1, [sp, #12]
 8009454:	1d1a      	adds	r2, r3, #4
 8009456:	600a      	str	r2, [r1, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	e9c3 6700 	strd	r6, r7, [r3]
 800945e:	68e3      	ldr	r3, [r4, #12]
 8009460:	3301      	adds	r3, #1
 8009462:	60e3      	str	r3, [r4, #12]
 8009464:	e66d      	b.n	8009142 <_scanf_float+0x82>
 8009466:	9b04      	ldr	r3, [sp, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0e5      	beq.n	8009438 <_scanf_float+0x378>
 800946c:	9905      	ldr	r1, [sp, #20]
 800946e:	230a      	movs	r3, #10
 8009470:	462a      	mov	r2, r5
 8009472:	3101      	adds	r1, #1
 8009474:	4640      	mov	r0, r8
 8009476:	f000 ffa1 	bl	800a3bc <_strtol_r>
 800947a:	9b04      	ldr	r3, [sp, #16]
 800947c:	9e05      	ldr	r6, [sp, #20]
 800947e:	1ac2      	subs	r2, r0, r3
 8009480:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009484:	429e      	cmp	r6, r3
 8009486:	bf28      	it	cs
 8009488:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800948c:	4912      	ldr	r1, [pc, #72]	; (80094d8 <_scanf_float+0x418>)
 800948e:	4630      	mov	r0, r6
 8009490:	f000 f884 	bl	800959c <siprintf>
 8009494:	e7d0      	b.n	8009438 <_scanf_float+0x378>
 8009496:	9903      	ldr	r1, [sp, #12]
 8009498:	f012 0f04 	tst.w	r2, #4
 800949c:	f103 0204 	add.w	r2, r3, #4
 80094a0:	600a      	str	r2, [r1, #0]
 80094a2:	d1d9      	bne.n	8009458 <_scanf_float+0x398>
 80094a4:	f8d3 8000 	ldr.w	r8, [r3]
 80094a8:	ee10 2a10 	vmov	r2, s0
 80094ac:	ee10 0a10 	vmov	r0, s0
 80094b0:	463b      	mov	r3, r7
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f7 fb3a 	bl	8000b2c <__aeabi_dcmpun>
 80094b8:	b128      	cbz	r0, 80094c6 <_scanf_float+0x406>
 80094ba:	4808      	ldr	r0, [pc, #32]	; (80094dc <_scanf_float+0x41c>)
 80094bc:	f000 f868 	bl	8009590 <nanf>
 80094c0:	ed88 0a00 	vstr	s0, [r8]
 80094c4:	e7cb      	b.n	800945e <_scanf_float+0x39e>
 80094c6:	4630      	mov	r0, r6
 80094c8:	4639      	mov	r1, r7
 80094ca:	f7f7 fb8d 	bl	8000be8 <__aeabi_d2f>
 80094ce:	f8c8 0000 	str.w	r0, [r8]
 80094d2:	e7c4      	b.n	800945e <_scanf_float+0x39e>
 80094d4:	2500      	movs	r5, #0
 80094d6:	e634      	b.n	8009142 <_scanf_float+0x82>
 80094d8:	0800efc9 	.word	0x0800efc9
 80094dc:	0800ee1b 	.word	0x0800ee1b

080094e0 <_putc_r>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	460d      	mov	r5, r1
 80094e4:	4614      	mov	r4, r2
 80094e6:	4606      	mov	r6, r0
 80094e8:	b118      	cbz	r0, 80094f2 <_putc_r+0x12>
 80094ea:	6983      	ldr	r3, [r0, #24]
 80094ec:	b90b      	cbnz	r3, 80094f2 <_putc_r+0x12>
 80094ee:	f7fe fd5d 	bl	8007fac <__sinit>
 80094f2:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <_putc_r+0x84>)
 80094f4:	429c      	cmp	r4, r3
 80094f6:	d124      	bne.n	8009542 <_putc_r+0x62>
 80094f8:	6874      	ldr	r4, [r6, #4]
 80094fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094fc:	07d8      	lsls	r0, r3, #31
 80094fe:	d405      	bmi.n	800950c <_putc_r+0x2c>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	0599      	lsls	r1, r3, #22
 8009504:	d402      	bmi.n	800950c <_putc_r+0x2c>
 8009506:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009508:	f7fe fed3 	bl	80082b2 <__retarget_lock_acquire_recursive>
 800950c:	68a3      	ldr	r3, [r4, #8]
 800950e:	3b01      	subs	r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	60a3      	str	r3, [r4, #8]
 8009514:	da05      	bge.n	8009522 <_putc_r+0x42>
 8009516:	69a2      	ldr	r2, [r4, #24]
 8009518:	4293      	cmp	r3, r2
 800951a:	db1c      	blt.n	8009556 <_putc_r+0x76>
 800951c:	b2eb      	uxtb	r3, r5
 800951e:	2b0a      	cmp	r3, #10
 8009520:	d019      	beq.n	8009556 <_putc_r+0x76>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	6022      	str	r2, [r4, #0]
 8009528:	701d      	strb	r5, [r3, #0]
 800952a:	b2ed      	uxtb	r5, r5
 800952c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800952e:	07da      	lsls	r2, r3, #31
 8009530:	d405      	bmi.n	800953e <_putc_r+0x5e>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	059b      	lsls	r3, r3, #22
 8009536:	d402      	bmi.n	800953e <_putc_r+0x5e>
 8009538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800953a:	f7fe febb 	bl	80082b4 <__retarget_lock_release_recursive>
 800953e:	4628      	mov	r0, r5
 8009540:	bd70      	pop	{r4, r5, r6, pc}
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <_putc_r+0x88>)
 8009544:	429c      	cmp	r4, r3
 8009546:	d101      	bne.n	800954c <_putc_r+0x6c>
 8009548:	68b4      	ldr	r4, [r6, #8]
 800954a:	e7d6      	b.n	80094fa <_putc_r+0x1a>
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <_putc_r+0x8c>)
 800954e:	429c      	cmp	r4, r3
 8009550:	bf08      	it	eq
 8009552:	68f4      	ldreq	r4, [r6, #12]
 8009554:	e7d1      	b.n	80094fa <_putc_r+0x1a>
 8009556:	4629      	mov	r1, r5
 8009558:	4622      	mov	r2, r4
 800955a:	4630      	mov	r0, r6
 800955c:	f000 ff30 	bl	800a3c0 <__swbuf_r>
 8009560:	4605      	mov	r5, r0
 8009562:	e7e3      	b.n	800952c <_putc_r+0x4c>
 8009564:	0800ef40 	.word	0x0800ef40
 8009568:	0800ef60 	.word	0x0800ef60
 800956c:	0800ef20 	.word	0x0800ef20

08009570 <_sbrk_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d06      	ldr	r5, [pc, #24]	; (800958c <_sbrk_r+0x1c>)
 8009574:	2300      	movs	r3, #0
 8009576:	4604      	mov	r4, r0
 8009578:	4608      	mov	r0, r1
 800957a:	602b      	str	r3, [r5, #0]
 800957c:	f7f7 ff0c 	bl	8001398 <_sbrk>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_sbrk_r+0x1a>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_sbrk_r+0x1a>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20000ee8 	.word	0x20000ee8

08009590 <nanf>:
 8009590:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009598 <nanf+0x8>
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	7fc00000 	.word	0x7fc00000

0800959c <siprintf>:
 800959c:	b40e      	push	{r1, r2, r3}
 800959e:	b500      	push	{lr}
 80095a0:	b09c      	sub	sp, #112	; 0x70
 80095a2:	ab1d      	add	r3, sp, #116	; 0x74
 80095a4:	9002      	str	r0, [sp, #8]
 80095a6:	9006      	str	r0, [sp, #24]
 80095a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095ac:	4809      	ldr	r0, [pc, #36]	; (80095d4 <siprintf+0x38>)
 80095ae:	9107      	str	r1, [sp, #28]
 80095b0:	9104      	str	r1, [sp, #16]
 80095b2:	4909      	ldr	r1, [pc, #36]	; (80095d8 <siprintf+0x3c>)
 80095b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b8:	9105      	str	r1, [sp, #20]
 80095ba:	6800      	ldr	r0, [r0, #0]
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	a902      	add	r1, sp, #8
 80095c0:	f002 ffba 	bl	800c538 <_svfiprintf_r>
 80095c4:	9b02      	ldr	r3, [sp, #8]
 80095c6:	2200      	movs	r2, #0
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	b01c      	add	sp, #112	; 0x70
 80095cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d0:	b003      	add	sp, #12
 80095d2:	4770      	bx	lr
 80095d4:	2000000c 	.word	0x2000000c
 80095d8:	ffff0208 	.word	0xffff0208

080095dc <__sread>:
 80095dc:	b510      	push	{r4, lr}
 80095de:	460c      	mov	r4, r1
 80095e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e4:	f003 f8a8 	bl	800c738 <_read_r>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	bfab      	itete	ge
 80095ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095ee:	89a3      	ldrhlt	r3, [r4, #12]
 80095f0:	181b      	addge	r3, r3, r0
 80095f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095f6:	bfac      	ite	ge
 80095f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80095fa:	81a3      	strhlt	r3, [r4, #12]
 80095fc:	bd10      	pop	{r4, pc}

080095fe <__swrite>:
 80095fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009602:	461f      	mov	r7, r3
 8009604:	898b      	ldrh	r3, [r1, #12]
 8009606:	05db      	lsls	r3, r3, #23
 8009608:	4605      	mov	r5, r0
 800960a:	460c      	mov	r4, r1
 800960c:	4616      	mov	r6, r2
 800960e:	d505      	bpl.n	800961c <__swrite+0x1e>
 8009610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009614:	2302      	movs	r3, #2
 8009616:	2200      	movs	r2, #0
 8009618:	f002 f9ac 	bl	800b974 <_lseek_r>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	4632      	mov	r2, r6
 800962a:	463b      	mov	r3, r7
 800962c:	4628      	mov	r0, r5
 800962e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009632:	f000 bf17 	b.w	800a464 <_write_r>

08009636 <__sseek>:
 8009636:	b510      	push	{r4, lr}
 8009638:	460c      	mov	r4, r1
 800963a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963e:	f002 f999 	bl	800b974 <_lseek_r>
 8009642:	1c43      	adds	r3, r0, #1
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	bf15      	itete	ne
 8009648:	6560      	strne	r0, [r4, #84]	; 0x54
 800964a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800964e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009652:	81a3      	strheq	r3, [r4, #12]
 8009654:	bf18      	it	ne
 8009656:	81a3      	strhne	r3, [r4, #12]
 8009658:	bd10      	pop	{r4, pc}

0800965a <__sclose>:
 800965a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965e:	f000 bf89 	b.w	800a574 <_close_r>

08009662 <sulp>:
 8009662:	b570      	push	{r4, r5, r6, lr}
 8009664:	4604      	mov	r4, r0
 8009666:	460d      	mov	r5, r1
 8009668:	ec45 4b10 	vmov	d0, r4, r5
 800966c:	4616      	mov	r6, r2
 800966e:	f002 fd89 	bl	800c184 <__ulp>
 8009672:	ec51 0b10 	vmov	r0, r1, d0
 8009676:	b17e      	cbz	r6, 8009698 <sulp+0x36>
 8009678:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800967c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009680:	2b00      	cmp	r3, #0
 8009682:	dd09      	ble.n	8009698 <sulp+0x36>
 8009684:	051b      	lsls	r3, r3, #20
 8009686:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800968a:	2400      	movs	r4, #0
 800968c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009690:	4622      	mov	r2, r4
 8009692:	462b      	mov	r3, r5
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	bd70      	pop	{r4, r5, r6, pc}
 800969a:	0000      	movs	r0, r0
 800969c:	0000      	movs	r0, r0
	...

080096a0 <_strtod_l>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	ed2d 8b02 	vpush	{d8}
 80096a8:	b09d      	sub	sp, #116	; 0x74
 80096aa:	461f      	mov	r7, r3
 80096ac:	2300      	movs	r3, #0
 80096ae:	9318      	str	r3, [sp, #96]	; 0x60
 80096b0:	4ba2      	ldr	r3, [pc, #648]	; (800993c <_strtod_l+0x29c>)
 80096b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	4604      	mov	r4, r0
 80096ba:	4618      	mov	r0, r3
 80096bc:	4688      	mov	r8, r1
 80096be:	f7f6 fd87 	bl	80001d0 <strlen>
 80096c2:	f04f 0a00 	mov.w	sl, #0
 80096c6:	4605      	mov	r5, r0
 80096c8:	f04f 0b00 	mov.w	fp, #0
 80096cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80096d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096d2:	781a      	ldrb	r2, [r3, #0]
 80096d4:	2a2b      	cmp	r2, #43	; 0x2b
 80096d6:	d04e      	beq.n	8009776 <_strtod_l+0xd6>
 80096d8:	d83b      	bhi.n	8009752 <_strtod_l+0xb2>
 80096da:	2a0d      	cmp	r2, #13
 80096dc:	d834      	bhi.n	8009748 <_strtod_l+0xa8>
 80096de:	2a08      	cmp	r2, #8
 80096e0:	d834      	bhi.n	800974c <_strtod_l+0xac>
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	d03e      	beq.n	8009764 <_strtod_l+0xc4>
 80096e6:	2300      	movs	r3, #0
 80096e8:	930a      	str	r3, [sp, #40]	; 0x28
 80096ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80096ec:	7833      	ldrb	r3, [r6, #0]
 80096ee:	2b30      	cmp	r3, #48	; 0x30
 80096f0:	f040 80b0 	bne.w	8009854 <_strtod_l+0x1b4>
 80096f4:	7873      	ldrb	r3, [r6, #1]
 80096f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096fa:	2b58      	cmp	r3, #88	; 0x58
 80096fc:	d168      	bne.n	80097d0 <_strtod_l+0x130>
 80096fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	ab18      	add	r3, sp, #96	; 0x60
 8009704:	9702      	str	r7, [sp, #8]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	4a8d      	ldr	r2, [pc, #564]	; (8009940 <_strtod_l+0x2a0>)
 800970a:	ab19      	add	r3, sp, #100	; 0x64
 800970c:	a917      	add	r1, sp, #92	; 0x5c
 800970e:	4620      	mov	r0, r4
 8009710:	f001 fe24 	bl	800b35c <__gethex>
 8009714:	f010 0707 	ands.w	r7, r0, #7
 8009718:	4605      	mov	r5, r0
 800971a:	d005      	beq.n	8009728 <_strtod_l+0x88>
 800971c:	2f06      	cmp	r7, #6
 800971e:	d12c      	bne.n	800977a <_strtod_l+0xda>
 8009720:	3601      	adds	r6, #1
 8009722:	2300      	movs	r3, #0
 8009724:	9617      	str	r6, [sp, #92]	; 0x5c
 8009726:	930a      	str	r3, [sp, #40]	; 0x28
 8009728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800972a:	2b00      	cmp	r3, #0
 800972c:	f040 8590 	bne.w	800a250 <_strtod_l+0xbb0>
 8009730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009732:	b1eb      	cbz	r3, 8009770 <_strtod_l+0xd0>
 8009734:	4652      	mov	r2, sl
 8009736:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800973a:	ec43 2b10 	vmov	d0, r2, r3
 800973e:	b01d      	add	sp, #116	; 0x74
 8009740:	ecbd 8b02 	vpop	{d8}
 8009744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009748:	2a20      	cmp	r2, #32
 800974a:	d1cc      	bne.n	80096e6 <_strtod_l+0x46>
 800974c:	3301      	adds	r3, #1
 800974e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009750:	e7be      	b.n	80096d0 <_strtod_l+0x30>
 8009752:	2a2d      	cmp	r2, #45	; 0x2d
 8009754:	d1c7      	bne.n	80096e6 <_strtod_l+0x46>
 8009756:	2201      	movs	r2, #1
 8009758:	920a      	str	r2, [sp, #40]	; 0x28
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	9217      	str	r2, [sp, #92]	; 0x5c
 800975e:	785b      	ldrb	r3, [r3, #1]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1c2      	bne.n	80096ea <_strtod_l+0x4a>
 8009764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009766:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800976a:	2b00      	cmp	r3, #0
 800976c:	f040 856e 	bne.w	800a24c <_strtod_l+0xbac>
 8009770:	4652      	mov	r2, sl
 8009772:	465b      	mov	r3, fp
 8009774:	e7e1      	b.n	800973a <_strtod_l+0x9a>
 8009776:	2200      	movs	r2, #0
 8009778:	e7ee      	b.n	8009758 <_strtod_l+0xb8>
 800977a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800977c:	b13a      	cbz	r2, 800978e <_strtod_l+0xee>
 800977e:	2135      	movs	r1, #53	; 0x35
 8009780:	a81a      	add	r0, sp, #104	; 0x68
 8009782:	f002 fe0a 	bl	800c39a <__copybits>
 8009786:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009788:	4620      	mov	r0, r4
 800978a:	f002 f9c9 	bl	800bb20 <_Bfree>
 800978e:	3f01      	subs	r7, #1
 8009790:	2f04      	cmp	r7, #4
 8009792:	d806      	bhi.n	80097a2 <_strtod_l+0x102>
 8009794:	e8df f007 	tbb	[pc, r7]
 8009798:	1714030a 	.word	0x1714030a
 800979c:	0a          	.byte	0x0a
 800979d:	00          	.byte	0x00
 800979e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80097a2:	0728      	lsls	r0, r5, #28
 80097a4:	d5c0      	bpl.n	8009728 <_strtod_l+0x88>
 80097a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80097aa:	e7bd      	b.n	8009728 <_strtod_l+0x88>
 80097ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80097b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80097b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80097b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80097be:	e7f0      	b.n	80097a2 <_strtod_l+0x102>
 80097c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009944 <_strtod_l+0x2a4>
 80097c4:	e7ed      	b.n	80097a2 <_strtod_l+0x102>
 80097c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80097ca:	f04f 3aff 	mov.w	sl, #4294967295
 80097ce:	e7e8      	b.n	80097a2 <_strtod_l+0x102>
 80097d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	2b30      	cmp	r3, #48	; 0x30
 80097da:	d0f9      	beq.n	80097d0 <_strtod_l+0x130>
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0a3      	beq.n	8009728 <_strtod_l+0x88>
 80097e0:	2301      	movs	r3, #1
 80097e2:	f04f 0900 	mov.w	r9, #0
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ea:	9308      	str	r3, [sp, #32]
 80097ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80097f0:	464f      	mov	r7, r9
 80097f2:	220a      	movs	r2, #10
 80097f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80097f6:	7806      	ldrb	r6, [r0, #0]
 80097f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80097fc:	b2d9      	uxtb	r1, r3
 80097fe:	2909      	cmp	r1, #9
 8009800:	d92a      	bls.n	8009858 <_strtod_l+0x1b8>
 8009802:	9905      	ldr	r1, [sp, #20]
 8009804:	462a      	mov	r2, r5
 8009806:	f002 fff7 	bl	800c7f8 <strncmp>
 800980a:	b398      	cbz	r0, 8009874 <_strtod_l+0x1d4>
 800980c:	2000      	movs	r0, #0
 800980e:	4632      	mov	r2, r6
 8009810:	463d      	mov	r5, r7
 8009812:	9005      	str	r0, [sp, #20]
 8009814:	4603      	mov	r3, r0
 8009816:	2a65      	cmp	r2, #101	; 0x65
 8009818:	d001      	beq.n	800981e <_strtod_l+0x17e>
 800981a:	2a45      	cmp	r2, #69	; 0x45
 800981c:	d118      	bne.n	8009850 <_strtod_l+0x1b0>
 800981e:	b91d      	cbnz	r5, 8009828 <_strtod_l+0x188>
 8009820:	9a04      	ldr	r2, [sp, #16]
 8009822:	4302      	orrs	r2, r0
 8009824:	d09e      	beq.n	8009764 <_strtod_l+0xc4>
 8009826:	2500      	movs	r5, #0
 8009828:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800982c:	f108 0201 	add.w	r2, r8, #1
 8009830:	9217      	str	r2, [sp, #92]	; 0x5c
 8009832:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009836:	2a2b      	cmp	r2, #43	; 0x2b
 8009838:	d075      	beq.n	8009926 <_strtod_l+0x286>
 800983a:	2a2d      	cmp	r2, #45	; 0x2d
 800983c:	d07b      	beq.n	8009936 <_strtod_l+0x296>
 800983e:	f04f 0c00 	mov.w	ip, #0
 8009842:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009846:	2909      	cmp	r1, #9
 8009848:	f240 8082 	bls.w	8009950 <_strtod_l+0x2b0>
 800984c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009850:	2600      	movs	r6, #0
 8009852:	e09d      	b.n	8009990 <_strtod_l+0x2f0>
 8009854:	2300      	movs	r3, #0
 8009856:	e7c4      	b.n	80097e2 <_strtod_l+0x142>
 8009858:	2f08      	cmp	r7, #8
 800985a:	bfd8      	it	le
 800985c:	9907      	ldrle	r1, [sp, #28]
 800985e:	f100 0001 	add.w	r0, r0, #1
 8009862:	bfda      	itte	le
 8009864:	fb02 3301 	mlale	r3, r2, r1, r3
 8009868:	9307      	strle	r3, [sp, #28]
 800986a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800986e:	3701      	adds	r7, #1
 8009870:	9017      	str	r0, [sp, #92]	; 0x5c
 8009872:	e7bf      	b.n	80097f4 <_strtod_l+0x154>
 8009874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009876:	195a      	adds	r2, r3, r5
 8009878:	9217      	str	r2, [sp, #92]	; 0x5c
 800987a:	5d5a      	ldrb	r2, [r3, r5]
 800987c:	2f00      	cmp	r7, #0
 800987e:	d037      	beq.n	80098f0 <_strtod_l+0x250>
 8009880:	9005      	str	r0, [sp, #20]
 8009882:	463d      	mov	r5, r7
 8009884:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009888:	2b09      	cmp	r3, #9
 800988a:	d912      	bls.n	80098b2 <_strtod_l+0x212>
 800988c:	2301      	movs	r3, #1
 800988e:	e7c2      	b.n	8009816 <_strtod_l+0x176>
 8009890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	9217      	str	r2, [sp, #92]	; 0x5c
 8009896:	785a      	ldrb	r2, [r3, #1]
 8009898:	3001      	adds	r0, #1
 800989a:	2a30      	cmp	r2, #48	; 0x30
 800989c:	d0f8      	beq.n	8009890 <_strtod_l+0x1f0>
 800989e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80098a2:	2b08      	cmp	r3, #8
 80098a4:	f200 84d9 	bhi.w	800a25a <_strtod_l+0xbba>
 80098a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098aa:	9005      	str	r0, [sp, #20]
 80098ac:	2000      	movs	r0, #0
 80098ae:	9308      	str	r3, [sp, #32]
 80098b0:	4605      	mov	r5, r0
 80098b2:	3a30      	subs	r2, #48	; 0x30
 80098b4:	f100 0301 	add.w	r3, r0, #1
 80098b8:	d014      	beq.n	80098e4 <_strtod_l+0x244>
 80098ba:	9905      	ldr	r1, [sp, #20]
 80098bc:	4419      	add	r1, r3
 80098be:	9105      	str	r1, [sp, #20]
 80098c0:	462b      	mov	r3, r5
 80098c2:	eb00 0e05 	add.w	lr, r0, r5
 80098c6:	210a      	movs	r1, #10
 80098c8:	4573      	cmp	r3, lr
 80098ca:	d113      	bne.n	80098f4 <_strtod_l+0x254>
 80098cc:	182b      	adds	r3, r5, r0
 80098ce:	2b08      	cmp	r3, #8
 80098d0:	f105 0501 	add.w	r5, r5, #1
 80098d4:	4405      	add	r5, r0
 80098d6:	dc1c      	bgt.n	8009912 <_strtod_l+0x272>
 80098d8:	9907      	ldr	r1, [sp, #28]
 80098da:	230a      	movs	r3, #10
 80098dc:	fb03 2301 	mla	r3, r3, r1, r2
 80098e0:	9307      	str	r3, [sp, #28]
 80098e2:	2300      	movs	r3, #0
 80098e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098e6:	1c51      	adds	r1, r2, #1
 80098e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80098ea:	7852      	ldrb	r2, [r2, #1]
 80098ec:	4618      	mov	r0, r3
 80098ee:	e7c9      	b.n	8009884 <_strtod_l+0x1e4>
 80098f0:	4638      	mov	r0, r7
 80098f2:	e7d2      	b.n	800989a <_strtod_l+0x1fa>
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	dc04      	bgt.n	8009902 <_strtod_l+0x262>
 80098f8:	9e07      	ldr	r6, [sp, #28]
 80098fa:	434e      	muls	r6, r1
 80098fc:	9607      	str	r6, [sp, #28]
 80098fe:	3301      	adds	r3, #1
 8009900:	e7e2      	b.n	80098c8 <_strtod_l+0x228>
 8009902:	f103 0c01 	add.w	ip, r3, #1
 8009906:	f1bc 0f10 	cmp.w	ip, #16
 800990a:	bfd8      	it	le
 800990c:	fb01 f909 	mulle.w	r9, r1, r9
 8009910:	e7f5      	b.n	80098fe <_strtod_l+0x25e>
 8009912:	2d10      	cmp	r5, #16
 8009914:	bfdc      	itt	le
 8009916:	230a      	movle	r3, #10
 8009918:	fb03 2909 	mlale	r9, r3, r9, r2
 800991c:	e7e1      	b.n	80098e2 <_strtod_l+0x242>
 800991e:	2300      	movs	r3, #0
 8009920:	9305      	str	r3, [sp, #20]
 8009922:	2301      	movs	r3, #1
 8009924:	e77c      	b.n	8009820 <_strtod_l+0x180>
 8009926:	f04f 0c00 	mov.w	ip, #0
 800992a:	f108 0202 	add.w	r2, r8, #2
 800992e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009930:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009934:	e785      	b.n	8009842 <_strtod_l+0x1a2>
 8009936:	f04f 0c01 	mov.w	ip, #1
 800993a:	e7f6      	b.n	800992a <_strtod_l+0x28a>
 800993c:	0800f118 	.word	0x0800f118
 8009940:	0800efd0 	.word	0x0800efd0
 8009944:	7ff00000 	.word	0x7ff00000
 8009948:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800994a:	1c51      	adds	r1, r2, #1
 800994c:	9117      	str	r1, [sp, #92]	; 0x5c
 800994e:	7852      	ldrb	r2, [r2, #1]
 8009950:	2a30      	cmp	r2, #48	; 0x30
 8009952:	d0f9      	beq.n	8009948 <_strtod_l+0x2a8>
 8009954:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009958:	2908      	cmp	r1, #8
 800995a:	f63f af79 	bhi.w	8009850 <_strtod_l+0x1b0>
 800995e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009962:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009964:	9206      	str	r2, [sp, #24]
 8009966:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009968:	1c51      	adds	r1, r2, #1
 800996a:	9117      	str	r1, [sp, #92]	; 0x5c
 800996c:	7852      	ldrb	r2, [r2, #1]
 800996e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009972:	2e09      	cmp	r6, #9
 8009974:	d937      	bls.n	80099e6 <_strtod_l+0x346>
 8009976:	9e06      	ldr	r6, [sp, #24]
 8009978:	1b89      	subs	r1, r1, r6
 800997a:	2908      	cmp	r1, #8
 800997c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009980:	dc02      	bgt.n	8009988 <_strtod_l+0x2e8>
 8009982:	4576      	cmp	r6, lr
 8009984:	bfa8      	it	ge
 8009986:	4676      	movge	r6, lr
 8009988:	f1bc 0f00 	cmp.w	ip, #0
 800998c:	d000      	beq.n	8009990 <_strtod_l+0x2f0>
 800998e:	4276      	negs	r6, r6
 8009990:	2d00      	cmp	r5, #0
 8009992:	d14d      	bne.n	8009a30 <_strtod_l+0x390>
 8009994:	9904      	ldr	r1, [sp, #16]
 8009996:	4301      	orrs	r1, r0
 8009998:	f47f aec6 	bne.w	8009728 <_strtod_l+0x88>
 800999c:	2b00      	cmp	r3, #0
 800999e:	f47f aee1 	bne.w	8009764 <_strtod_l+0xc4>
 80099a2:	2a69      	cmp	r2, #105	; 0x69
 80099a4:	d027      	beq.n	80099f6 <_strtod_l+0x356>
 80099a6:	dc24      	bgt.n	80099f2 <_strtod_l+0x352>
 80099a8:	2a49      	cmp	r2, #73	; 0x49
 80099aa:	d024      	beq.n	80099f6 <_strtod_l+0x356>
 80099ac:	2a4e      	cmp	r2, #78	; 0x4e
 80099ae:	f47f aed9 	bne.w	8009764 <_strtod_l+0xc4>
 80099b2:	499f      	ldr	r1, [pc, #636]	; (8009c30 <_strtod_l+0x590>)
 80099b4:	a817      	add	r0, sp, #92	; 0x5c
 80099b6:	f001 ff29 	bl	800b80c <__match>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	f43f aed2 	beq.w	8009764 <_strtod_l+0xc4>
 80099c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b28      	cmp	r3, #40	; 0x28
 80099c6:	d12d      	bne.n	8009a24 <_strtod_l+0x384>
 80099c8:	499a      	ldr	r1, [pc, #616]	; (8009c34 <_strtod_l+0x594>)
 80099ca:	aa1a      	add	r2, sp, #104	; 0x68
 80099cc:	a817      	add	r0, sp, #92	; 0x5c
 80099ce:	f001 ff31 	bl	800b834 <__hexnan>
 80099d2:	2805      	cmp	r0, #5
 80099d4:	d126      	bne.n	8009a24 <_strtod_l+0x384>
 80099d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80099dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80099e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80099e4:	e6a0      	b.n	8009728 <_strtod_l+0x88>
 80099e6:	210a      	movs	r1, #10
 80099e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80099ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80099f0:	e7b9      	b.n	8009966 <_strtod_l+0x2c6>
 80099f2:	2a6e      	cmp	r2, #110	; 0x6e
 80099f4:	e7db      	b.n	80099ae <_strtod_l+0x30e>
 80099f6:	4990      	ldr	r1, [pc, #576]	; (8009c38 <_strtod_l+0x598>)
 80099f8:	a817      	add	r0, sp, #92	; 0x5c
 80099fa:	f001 ff07 	bl	800b80c <__match>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f aeb0 	beq.w	8009764 <_strtod_l+0xc4>
 8009a04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a06:	498d      	ldr	r1, [pc, #564]	; (8009c3c <_strtod_l+0x59c>)
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	a817      	add	r0, sp, #92	; 0x5c
 8009a0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a0e:	f001 fefd 	bl	800b80c <__match>
 8009a12:	b910      	cbnz	r0, 8009a1a <_strtod_l+0x37a>
 8009a14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a16:	3301      	adds	r3, #1
 8009a18:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009c4c <_strtod_l+0x5ac>
 8009a1e:	f04f 0a00 	mov.w	sl, #0
 8009a22:	e681      	b.n	8009728 <_strtod_l+0x88>
 8009a24:	4886      	ldr	r0, [pc, #536]	; (8009c40 <_strtod_l+0x5a0>)
 8009a26:	f002 fe9b 	bl	800c760 <nan>
 8009a2a:	ec5b ab10 	vmov	sl, fp, d0
 8009a2e:	e67b      	b.n	8009728 <_strtod_l+0x88>
 8009a30:	9b05      	ldr	r3, [sp, #20]
 8009a32:	9807      	ldr	r0, [sp, #28]
 8009a34:	1af3      	subs	r3, r6, r3
 8009a36:	2f00      	cmp	r7, #0
 8009a38:	bf08      	it	eq
 8009a3a:	462f      	moveq	r7, r5
 8009a3c:	2d10      	cmp	r5, #16
 8009a3e:	9306      	str	r3, [sp, #24]
 8009a40:	46a8      	mov	r8, r5
 8009a42:	bfa8      	it	ge
 8009a44:	f04f 0810 	movge.w	r8, #16
 8009a48:	f7f6 fd5c 	bl	8000504 <__aeabi_ui2d>
 8009a4c:	2d09      	cmp	r5, #9
 8009a4e:	4682      	mov	sl, r0
 8009a50:	468b      	mov	fp, r1
 8009a52:	dd13      	ble.n	8009a7c <_strtod_l+0x3dc>
 8009a54:	4b7b      	ldr	r3, [pc, #492]	; (8009c44 <_strtod_l+0x5a4>)
 8009a56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a5e:	f7f6 fdcb 	bl	80005f8 <__aeabi_dmul>
 8009a62:	4682      	mov	sl, r0
 8009a64:	4648      	mov	r0, r9
 8009a66:	468b      	mov	fp, r1
 8009a68:	f7f6 fd4c 	bl	8000504 <__aeabi_ui2d>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4650      	mov	r0, sl
 8009a72:	4659      	mov	r1, fp
 8009a74:	f7f6 fc0a 	bl	800028c <__adddf3>
 8009a78:	4682      	mov	sl, r0
 8009a7a:	468b      	mov	fp, r1
 8009a7c:	2d0f      	cmp	r5, #15
 8009a7e:	dc38      	bgt.n	8009af2 <_strtod_l+0x452>
 8009a80:	9b06      	ldr	r3, [sp, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f43f ae50 	beq.w	8009728 <_strtod_l+0x88>
 8009a88:	dd24      	ble.n	8009ad4 <_strtod_l+0x434>
 8009a8a:	2b16      	cmp	r3, #22
 8009a8c:	dc0b      	bgt.n	8009aa6 <_strtod_l+0x406>
 8009a8e:	496d      	ldr	r1, [pc, #436]	; (8009c44 <_strtod_l+0x5a4>)
 8009a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a98:	4652      	mov	r2, sl
 8009a9a:	465b      	mov	r3, fp
 8009a9c:	f7f6 fdac 	bl	80005f8 <__aeabi_dmul>
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	468b      	mov	fp, r1
 8009aa4:	e640      	b.n	8009728 <_strtod_l+0x88>
 8009aa6:	9a06      	ldr	r2, [sp, #24]
 8009aa8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009aac:	4293      	cmp	r3, r2
 8009aae:	db20      	blt.n	8009af2 <_strtod_l+0x452>
 8009ab0:	4c64      	ldr	r4, [pc, #400]	; (8009c44 <_strtod_l+0x5a4>)
 8009ab2:	f1c5 050f 	rsb	r5, r5, #15
 8009ab6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009aba:	4652      	mov	r2, sl
 8009abc:	465b      	mov	r3, fp
 8009abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac2:	f7f6 fd99 	bl	80005f8 <__aeabi_dmul>
 8009ac6:	9b06      	ldr	r3, [sp, #24]
 8009ac8:	1b5d      	subs	r5, r3, r5
 8009aca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ace:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009ad2:	e7e3      	b.n	8009a9c <_strtod_l+0x3fc>
 8009ad4:	9b06      	ldr	r3, [sp, #24]
 8009ad6:	3316      	adds	r3, #22
 8009ad8:	db0b      	blt.n	8009af2 <_strtod_l+0x452>
 8009ada:	9b05      	ldr	r3, [sp, #20]
 8009adc:	1b9e      	subs	r6, r3, r6
 8009ade:	4b59      	ldr	r3, [pc, #356]	; (8009c44 <_strtod_l+0x5a4>)
 8009ae0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009ae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ae8:	4650      	mov	r0, sl
 8009aea:	4659      	mov	r1, fp
 8009aec:	f7f6 feae 	bl	800084c <__aeabi_ddiv>
 8009af0:	e7d6      	b.n	8009aa0 <_strtod_l+0x400>
 8009af2:	9b06      	ldr	r3, [sp, #24]
 8009af4:	eba5 0808 	sub.w	r8, r5, r8
 8009af8:	4498      	add	r8, r3
 8009afa:	f1b8 0f00 	cmp.w	r8, #0
 8009afe:	dd74      	ble.n	8009bea <_strtod_l+0x54a>
 8009b00:	f018 030f 	ands.w	r3, r8, #15
 8009b04:	d00a      	beq.n	8009b1c <_strtod_l+0x47c>
 8009b06:	494f      	ldr	r1, [pc, #316]	; (8009c44 <_strtod_l+0x5a4>)
 8009b08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	465b      	mov	r3, fp
 8009b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b14:	f7f6 fd70 	bl	80005f8 <__aeabi_dmul>
 8009b18:	4682      	mov	sl, r0
 8009b1a:	468b      	mov	fp, r1
 8009b1c:	f038 080f 	bics.w	r8, r8, #15
 8009b20:	d04f      	beq.n	8009bc2 <_strtod_l+0x522>
 8009b22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009b26:	dd22      	ble.n	8009b6e <_strtod_l+0x4ce>
 8009b28:	2500      	movs	r5, #0
 8009b2a:	462e      	mov	r6, r5
 8009b2c:	9507      	str	r5, [sp, #28]
 8009b2e:	9505      	str	r5, [sp, #20]
 8009b30:	2322      	movs	r3, #34	; 0x22
 8009b32:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009c4c <_strtod_l+0x5ac>
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	f04f 0a00 	mov.w	sl, #0
 8009b3c:	9b07      	ldr	r3, [sp, #28]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f43f adf2 	beq.w	8009728 <_strtod_l+0x88>
 8009b44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b46:	4620      	mov	r0, r4
 8009b48:	f001 ffea 	bl	800bb20 <_Bfree>
 8009b4c:	9905      	ldr	r1, [sp, #20]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f001 ffe6 	bl	800bb20 <_Bfree>
 8009b54:	4631      	mov	r1, r6
 8009b56:	4620      	mov	r0, r4
 8009b58:	f001 ffe2 	bl	800bb20 <_Bfree>
 8009b5c:	9907      	ldr	r1, [sp, #28]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f001 ffde 	bl	800bb20 <_Bfree>
 8009b64:	4629      	mov	r1, r5
 8009b66:	4620      	mov	r0, r4
 8009b68:	f001 ffda 	bl	800bb20 <_Bfree>
 8009b6c:	e5dc      	b.n	8009728 <_strtod_l+0x88>
 8009b6e:	4b36      	ldr	r3, [pc, #216]	; (8009c48 <_strtod_l+0x5a8>)
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	2300      	movs	r3, #0
 8009b74:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009b78:	4650      	mov	r0, sl
 8009b7a:	4659      	mov	r1, fp
 8009b7c:	4699      	mov	r9, r3
 8009b7e:	f1b8 0f01 	cmp.w	r8, #1
 8009b82:	dc21      	bgt.n	8009bc8 <_strtod_l+0x528>
 8009b84:	b10b      	cbz	r3, 8009b8a <_strtod_l+0x4ea>
 8009b86:	4682      	mov	sl, r0
 8009b88:	468b      	mov	fp, r1
 8009b8a:	4b2f      	ldr	r3, [pc, #188]	; (8009c48 <_strtod_l+0x5a8>)
 8009b8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009b90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009b94:	4652      	mov	r2, sl
 8009b96:	465b      	mov	r3, fp
 8009b98:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009b9c:	f7f6 fd2c 	bl	80005f8 <__aeabi_dmul>
 8009ba0:	4b2a      	ldr	r3, [pc, #168]	; (8009c4c <_strtod_l+0x5ac>)
 8009ba2:	460a      	mov	r2, r1
 8009ba4:	400b      	ands	r3, r1
 8009ba6:	492a      	ldr	r1, [pc, #168]	; (8009c50 <_strtod_l+0x5b0>)
 8009ba8:	428b      	cmp	r3, r1
 8009baa:	4682      	mov	sl, r0
 8009bac:	d8bc      	bhi.n	8009b28 <_strtod_l+0x488>
 8009bae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009bb2:	428b      	cmp	r3, r1
 8009bb4:	bf86      	itte	hi
 8009bb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009c54 <_strtod_l+0x5b4>
 8009bba:	f04f 3aff 	movhi.w	sl, #4294967295
 8009bbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	e084      	b.n	8009cd2 <_strtod_l+0x632>
 8009bc8:	f018 0f01 	tst.w	r8, #1
 8009bcc:	d005      	beq.n	8009bda <_strtod_l+0x53a>
 8009bce:	9b04      	ldr	r3, [sp, #16]
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 fd10 	bl	80005f8 <__aeabi_dmul>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	9a04      	ldr	r2, [sp, #16]
 8009bdc:	3208      	adds	r2, #8
 8009bde:	f109 0901 	add.w	r9, r9, #1
 8009be2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009be6:	9204      	str	r2, [sp, #16]
 8009be8:	e7c9      	b.n	8009b7e <_strtod_l+0x4de>
 8009bea:	d0ea      	beq.n	8009bc2 <_strtod_l+0x522>
 8009bec:	f1c8 0800 	rsb	r8, r8, #0
 8009bf0:	f018 020f 	ands.w	r2, r8, #15
 8009bf4:	d00a      	beq.n	8009c0c <_strtod_l+0x56c>
 8009bf6:	4b13      	ldr	r3, [pc, #76]	; (8009c44 <_strtod_l+0x5a4>)
 8009bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bfc:	4650      	mov	r0, sl
 8009bfe:	4659      	mov	r1, fp
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 fe22 	bl	800084c <__aeabi_ddiv>
 8009c08:	4682      	mov	sl, r0
 8009c0a:	468b      	mov	fp, r1
 8009c0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009c10:	d0d7      	beq.n	8009bc2 <_strtod_l+0x522>
 8009c12:	f1b8 0f1f 	cmp.w	r8, #31
 8009c16:	dd1f      	ble.n	8009c58 <_strtod_l+0x5b8>
 8009c18:	2500      	movs	r5, #0
 8009c1a:	462e      	mov	r6, r5
 8009c1c:	9507      	str	r5, [sp, #28]
 8009c1e:	9505      	str	r5, [sp, #20]
 8009c20:	2322      	movs	r3, #34	; 0x22
 8009c22:	f04f 0a00 	mov.w	sl, #0
 8009c26:	f04f 0b00 	mov.w	fp, #0
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	e786      	b.n	8009b3c <_strtod_l+0x49c>
 8009c2e:	bf00      	nop
 8009c30:	0800efa2 	.word	0x0800efa2
 8009c34:	0800efe4 	.word	0x0800efe4
 8009c38:	0800ef9a 	.word	0x0800ef9a
 8009c3c:	0800f023 	.word	0x0800f023
 8009c40:	0800ee1b 	.word	0x0800ee1b
 8009c44:	0800f1b0 	.word	0x0800f1b0
 8009c48:	0800f188 	.word	0x0800f188
 8009c4c:	7ff00000 	.word	0x7ff00000
 8009c50:	7ca00000 	.word	0x7ca00000
 8009c54:	7fefffff 	.word	0x7fefffff
 8009c58:	f018 0310 	ands.w	r3, r8, #16
 8009c5c:	bf18      	it	ne
 8009c5e:	236a      	movne	r3, #106	; 0x6a
 8009c60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a010 <_strtod_l+0x970>
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	4650      	mov	r0, sl
 8009c68:	4659      	mov	r1, fp
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f018 0f01 	tst.w	r8, #1
 8009c70:	d004      	beq.n	8009c7c <_strtod_l+0x5dc>
 8009c72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009c76:	f7f6 fcbf 	bl	80005f8 <__aeabi_dmul>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009c80:	f109 0908 	add.w	r9, r9, #8
 8009c84:	d1f2      	bne.n	8009c6c <_strtod_l+0x5cc>
 8009c86:	b10b      	cbz	r3, 8009c8c <_strtod_l+0x5ec>
 8009c88:	4682      	mov	sl, r0
 8009c8a:	468b      	mov	fp, r1
 8009c8c:	9b04      	ldr	r3, [sp, #16]
 8009c8e:	b1c3      	cbz	r3, 8009cc2 <_strtod_l+0x622>
 8009c90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	4659      	mov	r1, fp
 8009c9c:	dd11      	ble.n	8009cc2 <_strtod_l+0x622>
 8009c9e:	2b1f      	cmp	r3, #31
 8009ca0:	f340 8124 	ble.w	8009eec <_strtod_l+0x84c>
 8009ca4:	2b34      	cmp	r3, #52	; 0x34
 8009ca6:	bfde      	ittt	le
 8009ca8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009cac:	f04f 33ff 	movle.w	r3, #4294967295
 8009cb0:	fa03 f202 	lslle.w	r2, r3, r2
 8009cb4:	f04f 0a00 	mov.w	sl, #0
 8009cb8:	bfcc      	ite	gt
 8009cba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009cbe:	ea02 0b01 	andle.w	fp, r2, r1
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	4659      	mov	r1, fp
 8009cca:	f7f6 fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d1a2      	bne.n	8009c18 <_strtod_l+0x578>
 8009cd2:	9b07      	ldr	r3, [sp, #28]
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	9908      	ldr	r1, [sp, #32]
 8009cd8:	462b      	mov	r3, r5
 8009cda:	463a      	mov	r2, r7
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f001 ff87 	bl	800bbf0 <__s2b>
 8009ce2:	9007      	str	r0, [sp, #28]
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f43f af1f 	beq.w	8009b28 <_strtod_l+0x488>
 8009cea:	9b05      	ldr	r3, [sp, #20]
 8009cec:	1b9e      	subs	r6, r3, r6
 8009cee:	9b06      	ldr	r3, [sp, #24]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bfb4      	ite	lt
 8009cf4:	4633      	movlt	r3, r6
 8009cf6:	2300      	movge	r3, #0
 8009cf8:	930c      	str	r3, [sp, #48]	; 0x30
 8009cfa:	9b06      	ldr	r3, [sp, #24]
 8009cfc:	2500      	movs	r5, #0
 8009cfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d02:	9312      	str	r3, [sp, #72]	; 0x48
 8009d04:	462e      	mov	r6, r5
 8009d06:	9b07      	ldr	r3, [sp, #28]
 8009d08:	4620      	mov	r0, r4
 8009d0a:	6859      	ldr	r1, [r3, #4]
 8009d0c:	f001 fec8 	bl	800baa0 <_Balloc>
 8009d10:	9005      	str	r0, [sp, #20]
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f43f af0c 	beq.w	8009b30 <_strtod_l+0x490>
 8009d18:	9b07      	ldr	r3, [sp, #28]
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	3202      	adds	r2, #2
 8009d1e:	f103 010c 	add.w	r1, r3, #12
 8009d22:	0092      	lsls	r2, r2, #2
 8009d24:	300c      	adds	r0, #12
 8009d26:	f7fe fad7 	bl	80082d8 <memcpy>
 8009d2a:	ec4b ab10 	vmov	d0, sl, fp
 8009d2e:	aa1a      	add	r2, sp, #104	; 0x68
 8009d30:	a919      	add	r1, sp, #100	; 0x64
 8009d32:	4620      	mov	r0, r4
 8009d34:	f002 faa2 	bl	800c27c <__d2b>
 8009d38:	ec4b ab18 	vmov	d8, sl, fp
 8009d3c:	9018      	str	r0, [sp, #96]	; 0x60
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f43f aef6 	beq.w	8009b30 <_strtod_l+0x490>
 8009d44:	2101      	movs	r1, #1
 8009d46:	4620      	mov	r0, r4
 8009d48:	f001 ffec 	bl	800bd24 <__i2b>
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	f43f aeee 	beq.w	8009b30 <_strtod_l+0x490>
 8009d54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d56:	9904      	ldr	r1, [sp, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	bfab      	itete	ge
 8009d5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009d5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009d60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009d62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009d66:	bfac      	ite	ge
 8009d68:	eb03 0902 	addge.w	r9, r3, r2
 8009d6c:	1ad7      	sublt	r7, r2, r3
 8009d6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009d70:	eba3 0801 	sub.w	r8, r3, r1
 8009d74:	4490      	add	r8, r2
 8009d76:	4ba1      	ldr	r3, [pc, #644]	; (8009ffc <_strtod_l+0x95c>)
 8009d78:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d7c:	4598      	cmp	r8, r3
 8009d7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d82:	f280 80c7 	bge.w	8009f14 <_strtod_l+0x874>
 8009d86:	eba3 0308 	sub.w	r3, r3, r8
 8009d8a:	2b1f      	cmp	r3, #31
 8009d8c:	eba2 0203 	sub.w	r2, r2, r3
 8009d90:	f04f 0101 	mov.w	r1, #1
 8009d94:	f300 80b1 	bgt.w	8009efa <_strtod_l+0x85a>
 8009d98:	fa01 f303 	lsl.w	r3, r1, r3
 8009d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9308      	str	r3, [sp, #32]
 8009da2:	eb09 0802 	add.w	r8, r9, r2
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	45c1      	cmp	r9, r8
 8009daa:	4417      	add	r7, r2
 8009dac:	441f      	add	r7, r3
 8009dae:	464b      	mov	r3, r9
 8009db0:	bfa8      	it	ge
 8009db2:	4643      	movge	r3, r8
 8009db4:	42bb      	cmp	r3, r7
 8009db6:	bfa8      	it	ge
 8009db8:	463b      	movge	r3, r7
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bfc2      	ittt	gt
 8009dbe:	eba8 0803 	subgt.w	r8, r8, r3
 8009dc2:	1aff      	subgt	r7, r7, r3
 8009dc4:	eba9 0903 	subgt.w	r9, r9, r3
 8009dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	dd17      	ble.n	8009dfe <_strtod_l+0x75e>
 8009dce:	4631      	mov	r1, r6
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f002 f866 	bl	800bea4 <__pow5mult>
 8009dd8:	4606      	mov	r6, r0
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	f43f aea8 	beq.w	8009b30 <_strtod_l+0x490>
 8009de0:	4601      	mov	r1, r0
 8009de2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009de4:	4620      	mov	r0, r4
 8009de6:	f001 ffb3 	bl	800bd50 <__multiply>
 8009dea:	900b      	str	r0, [sp, #44]	; 0x2c
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f43f ae9f 	beq.w	8009b30 <_strtod_l+0x490>
 8009df2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009df4:	4620      	mov	r0, r4
 8009df6:	f001 fe93 	bl	800bb20 <_Bfree>
 8009dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dfc:	9318      	str	r3, [sp, #96]	; 0x60
 8009dfe:	f1b8 0f00 	cmp.w	r8, #0
 8009e02:	f300 808c 	bgt.w	8009f1e <_strtod_l+0x87e>
 8009e06:	9b06      	ldr	r3, [sp, #24]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dd08      	ble.n	8009e1e <_strtod_l+0x77e>
 8009e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e0e:	9905      	ldr	r1, [sp, #20]
 8009e10:	4620      	mov	r0, r4
 8009e12:	f002 f847 	bl	800bea4 <__pow5mult>
 8009e16:	9005      	str	r0, [sp, #20]
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f43f ae89 	beq.w	8009b30 <_strtod_l+0x490>
 8009e1e:	2f00      	cmp	r7, #0
 8009e20:	dd08      	ble.n	8009e34 <_strtod_l+0x794>
 8009e22:	9905      	ldr	r1, [sp, #20]
 8009e24:	463a      	mov	r2, r7
 8009e26:	4620      	mov	r0, r4
 8009e28:	f002 f896 	bl	800bf58 <__lshift>
 8009e2c:	9005      	str	r0, [sp, #20]
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f43f ae7e 	beq.w	8009b30 <_strtod_l+0x490>
 8009e34:	f1b9 0f00 	cmp.w	r9, #0
 8009e38:	dd08      	ble.n	8009e4c <_strtod_l+0x7ac>
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	464a      	mov	r2, r9
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f002 f88a 	bl	800bf58 <__lshift>
 8009e44:	4606      	mov	r6, r0
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f43f ae72 	beq.w	8009b30 <_strtod_l+0x490>
 8009e4c:	9a05      	ldr	r2, [sp, #20]
 8009e4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e50:	4620      	mov	r0, r4
 8009e52:	f002 f90d 	bl	800c070 <__mdiff>
 8009e56:	4605      	mov	r5, r0
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f43f ae69 	beq.w	8009b30 <_strtod_l+0x490>
 8009e5e:	68c3      	ldr	r3, [r0, #12]
 8009e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e62:	2300      	movs	r3, #0
 8009e64:	60c3      	str	r3, [r0, #12]
 8009e66:	4631      	mov	r1, r6
 8009e68:	f002 f8e6 	bl	800c038 <__mcmp>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	da60      	bge.n	8009f32 <_strtod_l+0x892>
 8009e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e72:	ea53 030a 	orrs.w	r3, r3, sl
 8009e76:	f040 8082 	bne.w	8009f7e <_strtod_l+0x8de>
 8009e7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d17d      	bne.n	8009f7e <_strtod_l+0x8de>
 8009e82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e86:	0d1b      	lsrs	r3, r3, #20
 8009e88:	051b      	lsls	r3, r3, #20
 8009e8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e8e:	d976      	bls.n	8009f7e <_strtod_l+0x8de>
 8009e90:	696b      	ldr	r3, [r5, #20]
 8009e92:	b913      	cbnz	r3, 8009e9a <_strtod_l+0x7fa>
 8009e94:	692b      	ldr	r3, [r5, #16]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	dd71      	ble.n	8009f7e <_strtod_l+0x8de>
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f002 f85a 	bl	800bf58 <__lshift>
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	f002 f8c6 	bl	800c038 <__mcmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	dd66      	ble.n	8009f7e <_strtod_l+0x8de>
 8009eb0:	9904      	ldr	r1, [sp, #16]
 8009eb2:	4a53      	ldr	r2, [pc, #332]	; (800a000 <_strtod_l+0x960>)
 8009eb4:	465b      	mov	r3, fp
 8009eb6:	2900      	cmp	r1, #0
 8009eb8:	f000 8081 	beq.w	8009fbe <_strtod_l+0x91e>
 8009ebc:	ea02 010b 	and.w	r1, r2, fp
 8009ec0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ec4:	dc7b      	bgt.n	8009fbe <_strtod_l+0x91e>
 8009ec6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009eca:	f77f aea9 	ble.w	8009c20 <_strtod_l+0x580>
 8009ece:	4b4d      	ldr	r3, [pc, #308]	; (800a004 <_strtod_l+0x964>)
 8009ed0:	4650      	mov	r0, sl
 8009ed2:	4659      	mov	r1, fp
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f7f6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8009eda:	460b      	mov	r3, r1
 8009edc:	4303      	orrs	r3, r0
 8009ede:	bf08      	it	eq
 8009ee0:	2322      	moveq	r3, #34	; 0x22
 8009ee2:	4682      	mov	sl, r0
 8009ee4:	468b      	mov	fp, r1
 8009ee6:	bf08      	it	eq
 8009ee8:	6023      	streq	r3, [r4, #0]
 8009eea:	e62b      	b.n	8009b44 <_strtod_l+0x4a4>
 8009eec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef4:	ea03 0a0a 	and.w	sl, r3, sl
 8009ef8:	e6e3      	b.n	8009cc2 <_strtod_l+0x622>
 8009efa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009efe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009f02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009f06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009f0a:	fa01 f308 	lsl.w	r3, r1, r8
 8009f0e:	9308      	str	r3, [sp, #32]
 8009f10:	910d      	str	r1, [sp, #52]	; 0x34
 8009f12:	e746      	b.n	8009da2 <_strtod_l+0x702>
 8009f14:	2300      	movs	r3, #0
 8009f16:	9308      	str	r3, [sp, #32]
 8009f18:	2301      	movs	r3, #1
 8009f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f1c:	e741      	b.n	8009da2 <_strtod_l+0x702>
 8009f1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f20:	4642      	mov	r2, r8
 8009f22:	4620      	mov	r0, r4
 8009f24:	f002 f818 	bl	800bf58 <__lshift>
 8009f28:	9018      	str	r0, [sp, #96]	; 0x60
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f47f af6b 	bne.w	8009e06 <_strtod_l+0x766>
 8009f30:	e5fe      	b.n	8009b30 <_strtod_l+0x490>
 8009f32:	465f      	mov	r7, fp
 8009f34:	d16e      	bne.n	800a014 <_strtod_l+0x974>
 8009f36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f3c:	b342      	cbz	r2, 8009f90 <_strtod_l+0x8f0>
 8009f3e:	4a32      	ldr	r2, [pc, #200]	; (800a008 <_strtod_l+0x968>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d128      	bne.n	8009f96 <_strtod_l+0x8f6>
 8009f44:	9b04      	ldr	r3, [sp, #16]
 8009f46:	4651      	mov	r1, sl
 8009f48:	b1eb      	cbz	r3, 8009f86 <_strtod_l+0x8e6>
 8009f4a:	4b2d      	ldr	r3, [pc, #180]	; (800a000 <_strtod_l+0x960>)
 8009f4c:	403b      	ands	r3, r7
 8009f4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f52:	f04f 32ff 	mov.w	r2, #4294967295
 8009f56:	d819      	bhi.n	8009f8c <_strtod_l+0x8ec>
 8009f58:	0d1b      	lsrs	r3, r3, #20
 8009f5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f62:	4299      	cmp	r1, r3
 8009f64:	d117      	bne.n	8009f96 <_strtod_l+0x8f6>
 8009f66:	4b29      	ldr	r3, [pc, #164]	; (800a00c <_strtod_l+0x96c>)
 8009f68:	429f      	cmp	r7, r3
 8009f6a:	d102      	bne.n	8009f72 <_strtod_l+0x8d2>
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	f43f addf 	beq.w	8009b30 <_strtod_l+0x490>
 8009f72:	4b23      	ldr	r3, [pc, #140]	; (800a000 <_strtod_l+0x960>)
 8009f74:	403b      	ands	r3, r7
 8009f76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009f7a:	f04f 0a00 	mov.w	sl, #0
 8009f7e:	9b04      	ldr	r3, [sp, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1a4      	bne.n	8009ece <_strtod_l+0x82e>
 8009f84:	e5de      	b.n	8009b44 <_strtod_l+0x4a4>
 8009f86:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8a:	e7ea      	b.n	8009f62 <_strtod_l+0x8c2>
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	e7e8      	b.n	8009f62 <_strtod_l+0x8c2>
 8009f90:	ea53 030a 	orrs.w	r3, r3, sl
 8009f94:	d08c      	beq.n	8009eb0 <_strtod_l+0x810>
 8009f96:	9b08      	ldr	r3, [sp, #32]
 8009f98:	b1db      	cbz	r3, 8009fd2 <_strtod_l+0x932>
 8009f9a:	423b      	tst	r3, r7
 8009f9c:	d0ef      	beq.n	8009f7e <_strtod_l+0x8de>
 8009f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa0:	9a04      	ldr	r2, [sp, #16]
 8009fa2:	4650      	mov	r0, sl
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	b1c3      	cbz	r3, 8009fda <_strtod_l+0x93a>
 8009fa8:	f7ff fb5b 	bl	8009662 <sulp>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	ec51 0b18 	vmov	r0, r1, d8
 8009fb4:	f7f6 f96a 	bl	800028c <__adddf3>
 8009fb8:	4682      	mov	sl, r0
 8009fba:	468b      	mov	fp, r1
 8009fbc:	e7df      	b.n	8009f7e <_strtod_l+0x8de>
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009fc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009fc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009fcc:	f04f 3aff 	mov.w	sl, #4294967295
 8009fd0:	e7d5      	b.n	8009f7e <_strtod_l+0x8de>
 8009fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd4:	ea13 0f0a 	tst.w	r3, sl
 8009fd8:	e7e0      	b.n	8009f9c <_strtod_l+0x8fc>
 8009fda:	f7ff fb42 	bl	8009662 <sulp>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	ec51 0b18 	vmov	r0, r1, d8
 8009fe6:	f7f6 f94f 	bl	8000288 <__aeabi_dsub>
 8009fea:	2200      	movs	r2, #0
 8009fec:	2300      	movs	r3, #0
 8009fee:	4682      	mov	sl, r0
 8009ff0:	468b      	mov	fp, r1
 8009ff2:	f7f6 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d0c1      	beq.n	8009f7e <_strtod_l+0x8de>
 8009ffa:	e611      	b.n	8009c20 <_strtod_l+0x580>
 8009ffc:	fffffc02 	.word	0xfffffc02
 800a000:	7ff00000 	.word	0x7ff00000
 800a004:	39500000 	.word	0x39500000
 800a008:	000fffff 	.word	0x000fffff
 800a00c:	7fefffff 	.word	0x7fefffff
 800a010:	0800eff8 	.word	0x0800eff8
 800a014:	4631      	mov	r1, r6
 800a016:	4628      	mov	r0, r5
 800a018:	f002 f98c 	bl	800c334 <__ratio>
 800a01c:	ec59 8b10 	vmov	r8, r9, d0
 800a020:	ee10 0a10 	vmov	r0, s0
 800a024:	2200      	movs	r2, #0
 800a026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a02a:	4649      	mov	r1, r9
 800a02c:	f7f6 fd60 	bl	8000af0 <__aeabi_dcmple>
 800a030:	2800      	cmp	r0, #0
 800a032:	d07a      	beq.n	800a12a <_strtod_l+0xa8a>
 800a034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d04a      	beq.n	800a0d0 <_strtod_l+0xa30>
 800a03a:	4b95      	ldr	r3, [pc, #596]	; (800a290 <_strtod_l+0xbf0>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a042:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a290 <_strtod_l+0xbf0>
 800a046:	f04f 0800 	mov.w	r8, #0
 800a04a:	4b92      	ldr	r3, [pc, #584]	; (800a294 <_strtod_l+0xbf4>)
 800a04c:	403b      	ands	r3, r7
 800a04e:	930d      	str	r3, [sp, #52]	; 0x34
 800a050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a052:	4b91      	ldr	r3, [pc, #580]	; (800a298 <_strtod_l+0xbf8>)
 800a054:	429a      	cmp	r2, r3
 800a056:	f040 80b0 	bne.w	800a1ba <_strtod_l+0xb1a>
 800a05a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a05e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a062:	ec4b ab10 	vmov	d0, sl, fp
 800a066:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a06a:	f002 f88b 	bl	800c184 <__ulp>
 800a06e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a072:	ec53 2b10 	vmov	r2, r3, d0
 800a076:	f7f6 fabf 	bl	80005f8 <__aeabi_dmul>
 800a07a:	4652      	mov	r2, sl
 800a07c:	465b      	mov	r3, fp
 800a07e:	f7f6 f905 	bl	800028c <__adddf3>
 800a082:	460b      	mov	r3, r1
 800a084:	4983      	ldr	r1, [pc, #524]	; (800a294 <_strtod_l+0xbf4>)
 800a086:	4a85      	ldr	r2, [pc, #532]	; (800a29c <_strtod_l+0xbfc>)
 800a088:	4019      	ands	r1, r3
 800a08a:	4291      	cmp	r1, r2
 800a08c:	4682      	mov	sl, r0
 800a08e:	d960      	bls.n	800a152 <_strtod_l+0xab2>
 800a090:	ee18 3a90 	vmov	r3, s17
 800a094:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a098:	4293      	cmp	r3, r2
 800a09a:	d104      	bne.n	800a0a6 <_strtod_l+0xa06>
 800a09c:	ee18 3a10 	vmov	r3, s16
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	f43f ad45 	beq.w	8009b30 <_strtod_l+0x490>
 800a0a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a2a8 <_strtod_l+0xc08>
 800a0aa:	f04f 3aff 	mov.w	sl, #4294967295
 800a0ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f001 fd35 	bl	800bb20 <_Bfree>
 800a0b6:	9905      	ldr	r1, [sp, #20]
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f001 fd31 	bl	800bb20 <_Bfree>
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f001 fd2d 	bl	800bb20 <_Bfree>
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f001 fd29 	bl	800bb20 <_Bfree>
 800a0ce:	e61a      	b.n	8009d06 <_strtod_l+0x666>
 800a0d0:	f1ba 0f00 	cmp.w	sl, #0
 800a0d4:	d11b      	bne.n	800a10e <_strtod_l+0xa6e>
 800a0d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0da:	b9f3      	cbnz	r3, 800a11a <_strtod_l+0xa7a>
 800a0dc:	4b6c      	ldr	r3, [pc, #432]	; (800a290 <_strtod_l+0xbf0>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	4649      	mov	r1, r9
 800a0e4:	f7f6 fcfa 	bl	8000adc <__aeabi_dcmplt>
 800a0e8:	b9d0      	cbnz	r0, 800a120 <_strtod_l+0xa80>
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	4b6c      	ldr	r3, [pc, #432]	; (800a2a0 <_strtod_l+0xc00>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f7f6 fa81 	bl	80005f8 <__aeabi_dmul>
 800a0f6:	4680      	mov	r8, r0
 800a0f8:	4689      	mov	r9, r1
 800a0fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a0fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a102:	9315      	str	r3, [sp, #84]	; 0x54
 800a104:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a108:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a10c:	e79d      	b.n	800a04a <_strtod_l+0x9aa>
 800a10e:	f1ba 0f01 	cmp.w	sl, #1
 800a112:	d102      	bne.n	800a11a <_strtod_l+0xa7a>
 800a114:	2f00      	cmp	r7, #0
 800a116:	f43f ad83 	beq.w	8009c20 <_strtod_l+0x580>
 800a11a:	4b62      	ldr	r3, [pc, #392]	; (800a2a4 <_strtod_l+0xc04>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	e78e      	b.n	800a03e <_strtod_l+0x99e>
 800a120:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a2a0 <_strtod_l+0xc00>
 800a124:	f04f 0800 	mov.w	r8, #0
 800a128:	e7e7      	b.n	800a0fa <_strtod_l+0xa5a>
 800a12a:	4b5d      	ldr	r3, [pc, #372]	; (800a2a0 <_strtod_l+0xc00>)
 800a12c:	4640      	mov	r0, r8
 800a12e:	4649      	mov	r1, r9
 800a130:	2200      	movs	r2, #0
 800a132:	f7f6 fa61 	bl	80005f8 <__aeabi_dmul>
 800a136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a138:	4680      	mov	r8, r0
 800a13a:	4689      	mov	r9, r1
 800a13c:	b933      	cbnz	r3, 800a14c <_strtod_l+0xaac>
 800a13e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a142:	900e      	str	r0, [sp, #56]	; 0x38
 800a144:	930f      	str	r3, [sp, #60]	; 0x3c
 800a146:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a14a:	e7dd      	b.n	800a108 <_strtod_l+0xa68>
 800a14c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a150:	e7f9      	b.n	800a146 <_strtod_l+0xaa6>
 800a152:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1a8      	bne.n	800a0ae <_strtod_l+0xa0e>
 800a15c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a162:	0d1b      	lsrs	r3, r3, #20
 800a164:	051b      	lsls	r3, r3, #20
 800a166:	429a      	cmp	r2, r3
 800a168:	d1a1      	bne.n	800a0ae <_strtod_l+0xa0e>
 800a16a:	4640      	mov	r0, r8
 800a16c:	4649      	mov	r1, r9
 800a16e:	f7f6 fda3 	bl	8000cb8 <__aeabi_d2lz>
 800a172:	f7f6 fa13 	bl	800059c <__aeabi_l2d>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4640      	mov	r0, r8
 800a17c:	4649      	mov	r1, r9
 800a17e:	f7f6 f883 	bl	8000288 <__aeabi_dsub>
 800a182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a188:	ea43 030a 	orr.w	r3, r3, sl
 800a18c:	4313      	orrs	r3, r2
 800a18e:	4680      	mov	r8, r0
 800a190:	4689      	mov	r9, r1
 800a192:	d055      	beq.n	800a240 <_strtod_l+0xba0>
 800a194:	a336      	add	r3, pc, #216	; (adr r3, 800a270 <_strtod_l+0xbd0>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	f7f6 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	f47f acd0 	bne.w	8009b44 <_strtod_l+0x4a4>
 800a1a4:	a334      	add	r3, pc, #208	; (adr r3, 800a278 <_strtod_l+0xbd8>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	f7f6 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	f43f af7b 	beq.w	800a0ae <_strtod_l+0xa0e>
 800a1b8:	e4c4      	b.n	8009b44 <_strtod_l+0x4a4>
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	b333      	cbz	r3, 800a20c <_strtod_l+0xb6c>
 800a1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1c4:	d822      	bhi.n	800a20c <_strtod_l+0xb6c>
 800a1c6:	a32e      	add	r3, pc, #184	; (adr r3, 800a280 <_strtod_l+0xbe0>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	f7f6 fc8e 	bl	8000af0 <__aeabi_dcmple>
 800a1d4:	b1a0      	cbz	r0, 800a200 <_strtod_l+0xb60>
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4640      	mov	r0, r8
 800a1da:	f7f6 fce5 	bl	8000ba8 <__aeabi_d2uiz>
 800a1de:	2801      	cmp	r0, #1
 800a1e0:	bf38      	it	cc
 800a1e2:	2001      	movcc	r0, #1
 800a1e4:	f7f6 f98e 	bl	8000504 <__aeabi_ui2d>
 800a1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	4689      	mov	r9, r1
 800a1ee:	bb23      	cbnz	r3, 800a23a <_strtod_l+0xb9a>
 800a1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1f4:	9010      	str	r0, [sp, #64]	; 0x40
 800a1f6:	9311      	str	r3, [sp, #68]	; 0x44
 800a1f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a204:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	9309      	str	r3, [sp, #36]	; 0x24
 800a20c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a210:	eeb0 0a48 	vmov.f32	s0, s16
 800a214:	eef0 0a68 	vmov.f32	s1, s17
 800a218:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a21c:	f001 ffb2 	bl	800c184 <__ulp>
 800a220:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a224:	ec53 2b10 	vmov	r2, r3, d0
 800a228:	f7f6 f9e6 	bl	80005f8 <__aeabi_dmul>
 800a22c:	ec53 2b18 	vmov	r2, r3, d8
 800a230:	f7f6 f82c 	bl	800028c <__adddf3>
 800a234:	4682      	mov	sl, r0
 800a236:	468b      	mov	fp, r1
 800a238:	e78d      	b.n	800a156 <_strtod_l+0xab6>
 800a23a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a23e:	e7db      	b.n	800a1f8 <_strtod_l+0xb58>
 800a240:	a311      	add	r3, pc, #68	; (adr r3, 800a288 <_strtod_l+0xbe8>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	f7f6 fc49 	bl	8000adc <__aeabi_dcmplt>
 800a24a:	e7b2      	b.n	800a1b2 <_strtod_l+0xb12>
 800a24c:	2300      	movs	r3, #0
 800a24e:	930a      	str	r3, [sp, #40]	; 0x28
 800a250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	f7ff ba6b 	b.w	8009730 <_strtod_l+0x90>
 800a25a:	2a65      	cmp	r2, #101	; 0x65
 800a25c:	f43f ab5f 	beq.w	800991e <_strtod_l+0x27e>
 800a260:	2a45      	cmp	r2, #69	; 0x45
 800a262:	f43f ab5c 	beq.w	800991e <_strtod_l+0x27e>
 800a266:	2301      	movs	r3, #1
 800a268:	f7ff bb94 	b.w	8009994 <_strtod_l+0x2f4>
 800a26c:	f3af 8000 	nop.w
 800a270:	94a03595 	.word	0x94a03595
 800a274:	3fdfffff 	.word	0x3fdfffff
 800a278:	35afe535 	.word	0x35afe535
 800a27c:	3fe00000 	.word	0x3fe00000
 800a280:	ffc00000 	.word	0xffc00000
 800a284:	41dfffff 	.word	0x41dfffff
 800a288:	94a03595 	.word	0x94a03595
 800a28c:	3fcfffff 	.word	0x3fcfffff
 800a290:	3ff00000 	.word	0x3ff00000
 800a294:	7ff00000 	.word	0x7ff00000
 800a298:	7fe00000 	.word	0x7fe00000
 800a29c:	7c9fffff 	.word	0x7c9fffff
 800a2a0:	3fe00000 	.word	0x3fe00000
 800a2a4:	bff00000 	.word	0xbff00000
 800a2a8:	7fefffff 	.word	0x7fefffff

0800a2ac <_strtod_r>:
 800a2ac:	4b01      	ldr	r3, [pc, #4]	; (800a2b4 <_strtod_r+0x8>)
 800a2ae:	f7ff b9f7 	b.w	80096a0 <_strtod_l>
 800a2b2:	bf00      	nop
 800a2b4:	20000074 	.word	0x20000074

0800a2b8 <_strtol_l.constprop.0>:
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2be:	d001      	beq.n	800a2c4 <_strtol_l.constprop.0+0xc>
 800a2c0:	2b24      	cmp	r3, #36	; 0x24
 800a2c2:	d906      	bls.n	800a2d2 <_strtol_l.constprop.0+0x1a>
 800a2c4:	f7fd fd40 	bl	8007d48 <__errno>
 800a2c8:	2316      	movs	r3, #22
 800a2ca:	6003      	str	r3, [r0, #0]
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a3b8 <_strtol_l.constprop.0+0x100>
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	462e      	mov	r6, r5
 800a2da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a2e2:	f017 0708 	ands.w	r7, r7, #8
 800a2e6:	d1f7      	bne.n	800a2d8 <_strtol_l.constprop.0+0x20>
 800a2e8:	2c2d      	cmp	r4, #45	; 0x2d
 800a2ea:	d132      	bne.n	800a352 <_strtol_l.constprop.0+0x9a>
 800a2ec:	782c      	ldrb	r4, [r5, #0]
 800a2ee:	2701      	movs	r7, #1
 800a2f0:	1cb5      	adds	r5, r6, #2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d05b      	beq.n	800a3ae <_strtol_l.constprop.0+0xf6>
 800a2f6:	2b10      	cmp	r3, #16
 800a2f8:	d109      	bne.n	800a30e <_strtol_l.constprop.0+0x56>
 800a2fa:	2c30      	cmp	r4, #48	; 0x30
 800a2fc:	d107      	bne.n	800a30e <_strtol_l.constprop.0+0x56>
 800a2fe:	782c      	ldrb	r4, [r5, #0]
 800a300:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a304:	2c58      	cmp	r4, #88	; 0x58
 800a306:	d14d      	bne.n	800a3a4 <_strtol_l.constprop.0+0xec>
 800a308:	786c      	ldrb	r4, [r5, #1]
 800a30a:	2310      	movs	r3, #16
 800a30c:	3502      	adds	r5, #2
 800a30e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a312:	f108 38ff 	add.w	r8, r8, #4294967295
 800a316:	f04f 0c00 	mov.w	ip, #0
 800a31a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a31e:	4666      	mov	r6, ip
 800a320:	fb03 8a19 	mls	sl, r3, r9, r8
 800a324:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a328:	f1be 0f09 	cmp.w	lr, #9
 800a32c:	d816      	bhi.n	800a35c <_strtol_l.constprop.0+0xa4>
 800a32e:	4674      	mov	r4, lr
 800a330:	42a3      	cmp	r3, r4
 800a332:	dd24      	ble.n	800a37e <_strtol_l.constprop.0+0xc6>
 800a334:	f1bc 0f00 	cmp.w	ip, #0
 800a338:	db1e      	blt.n	800a378 <_strtol_l.constprop.0+0xc0>
 800a33a:	45b1      	cmp	r9, r6
 800a33c:	d31c      	bcc.n	800a378 <_strtol_l.constprop.0+0xc0>
 800a33e:	d101      	bne.n	800a344 <_strtol_l.constprop.0+0x8c>
 800a340:	45a2      	cmp	sl, r4
 800a342:	db19      	blt.n	800a378 <_strtol_l.constprop.0+0xc0>
 800a344:	fb06 4603 	mla	r6, r6, r3, r4
 800a348:	f04f 0c01 	mov.w	ip, #1
 800a34c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a350:	e7e8      	b.n	800a324 <_strtol_l.constprop.0+0x6c>
 800a352:	2c2b      	cmp	r4, #43	; 0x2b
 800a354:	bf04      	itt	eq
 800a356:	782c      	ldrbeq	r4, [r5, #0]
 800a358:	1cb5      	addeq	r5, r6, #2
 800a35a:	e7ca      	b.n	800a2f2 <_strtol_l.constprop.0+0x3a>
 800a35c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a360:	f1be 0f19 	cmp.w	lr, #25
 800a364:	d801      	bhi.n	800a36a <_strtol_l.constprop.0+0xb2>
 800a366:	3c37      	subs	r4, #55	; 0x37
 800a368:	e7e2      	b.n	800a330 <_strtol_l.constprop.0+0x78>
 800a36a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a36e:	f1be 0f19 	cmp.w	lr, #25
 800a372:	d804      	bhi.n	800a37e <_strtol_l.constprop.0+0xc6>
 800a374:	3c57      	subs	r4, #87	; 0x57
 800a376:	e7db      	b.n	800a330 <_strtol_l.constprop.0+0x78>
 800a378:	f04f 3cff 	mov.w	ip, #4294967295
 800a37c:	e7e6      	b.n	800a34c <_strtol_l.constprop.0+0x94>
 800a37e:	f1bc 0f00 	cmp.w	ip, #0
 800a382:	da05      	bge.n	800a390 <_strtol_l.constprop.0+0xd8>
 800a384:	2322      	movs	r3, #34	; 0x22
 800a386:	6003      	str	r3, [r0, #0]
 800a388:	4646      	mov	r6, r8
 800a38a:	b942      	cbnz	r2, 800a39e <_strtol_l.constprop.0+0xe6>
 800a38c:	4630      	mov	r0, r6
 800a38e:	e79e      	b.n	800a2ce <_strtol_l.constprop.0+0x16>
 800a390:	b107      	cbz	r7, 800a394 <_strtol_l.constprop.0+0xdc>
 800a392:	4276      	negs	r6, r6
 800a394:	2a00      	cmp	r2, #0
 800a396:	d0f9      	beq.n	800a38c <_strtol_l.constprop.0+0xd4>
 800a398:	f1bc 0f00 	cmp.w	ip, #0
 800a39c:	d000      	beq.n	800a3a0 <_strtol_l.constprop.0+0xe8>
 800a39e:	1e69      	subs	r1, r5, #1
 800a3a0:	6011      	str	r1, [r2, #0]
 800a3a2:	e7f3      	b.n	800a38c <_strtol_l.constprop.0+0xd4>
 800a3a4:	2430      	movs	r4, #48	; 0x30
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1b1      	bne.n	800a30e <_strtol_l.constprop.0+0x56>
 800a3aa:	2308      	movs	r3, #8
 800a3ac:	e7af      	b.n	800a30e <_strtol_l.constprop.0+0x56>
 800a3ae:	2c30      	cmp	r4, #48	; 0x30
 800a3b0:	d0a5      	beq.n	800a2fe <_strtol_l.constprop.0+0x46>
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	e7ab      	b.n	800a30e <_strtol_l.constprop.0+0x56>
 800a3b6:	bf00      	nop
 800a3b8:	0800ee1d 	.word	0x0800ee1d

0800a3bc <_strtol_r>:
 800a3bc:	f7ff bf7c 	b.w	800a2b8 <_strtol_l.constprop.0>

0800a3c0 <__swbuf_r>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	460e      	mov	r6, r1
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	b118      	cbz	r0, 800a3d2 <__swbuf_r+0x12>
 800a3ca:	6983      	ldr	r3, [r0, #24]
 800a3cc:	b90b      	cbnz	r3, 800a3d2 <__swbuf_r+0x12>
 800a3ce:	f7fd fded 	bl	8007fac <__sinit>
 800a3d2:	4b21      	ldr	r3, [pc, #132]	; (800a458 <__swbuf_r+0x98>)
 800a3d4:	429c      	cmp	r4, r3
 800a3d6:	d12b      	bne.n	800a430 <__swbuf_r+0x70>
 800a3d8:	686c      	ldr	r4, [r5, #4]
 800a3da:	69a3      	ldr	r3, [r4, #24]
 800a3dc:	60a3      	str	r3, [r4, #8]
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	071a      	lsls	r2, r3, #28
 800a3e2:	d52f      	bpl.n	800a444 <__swbuf_r+0x84>
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	b36b      	cbz	r3, 800a444 <__swbuf_r+0x84>
 800a3e8:	6923      	ldr	r3, [r4, #16]
 800a3ea:	6820      	ldr	r0, [r4, #0]
 800a3ec:	1ac0      	subs	r0, r0, r3
 800a3ee:	6963      	ldr	r3, [r4, #20]
 800a3f0:	b2f6      	uxtb	r6, r6
 800a3f2:	4283      	cmp	r3, r0
 800a3f4:	4637      	mov	r7, r6
 800a3f6:	dc04      	bgt.n	800a402 <__swbuf_r+0x42>
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f7fd fd30 	bl	8007e60 <_fflush_r>
 800a400:	bb30      	cbnz	r0, 800a450 <__swbuf_r+0x90>
 800a402:	68a3      	ldr	r3, [r4, #8]
 800a404:	3b01      	subs	r3, #1
 800a406:	60a3      	str	r3, [r4, #8]
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	6022      	str	r2, [r4, #0]
 800a40e:	701e      	strb	r6, [r3, #0]
 800a410:	6963      	ldr	r3, [r4, #20]
 800a412:	3001      	adds	r0, #1
 800a414:	4283      	cmp	r3, r0
 800a416:	d004      	beq.n	800a422 <__swbuf_r+0x62>
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	07db      	lsls	r3, r3, #31
 800a41c:	d506      	bpl.n	800a42c <__swbuf_r+0x6c>
 800a41e:	2e0a      	cmp	r6, #10
 800a420:	d104      	bne.n	800a42c <__swbuf_r+0x6c>
 800a422:	4621      	mov	r1, r4
 800a424:	4628      	mov	r0, r5
 800a426:	f7fd fd1b 	bl	8007e60 <_fflush_r>
 800a42a:	b988      	cbnz	r0, 800a450 <__swbuf_r+0x90>
 800a42c:	4638      	mov	r0, r7
 800a42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a430:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <__swbuf_r+0x9c>)
 800a432:	429c      	cmp	r4, r3
 800a434:	d101      	bne.n	800a43a <__swbuf_r+0x7a>
 800a436:	68ac      	ldr	r4, [r5, #8]
 800a438:	e7cf      	b.n	800a3da <__swbuf_r+0x1a>
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <__swbuf_r+0xa0>)
 800a43c:	429c      	cmp	r4, r3
 800a43e:	bf08      	it	eq
 800a440:	68ec      	ldreq	r4, [r5, #12]
 800a442:	e7ca      	b.n	800a3da <__swbuf_r+0x1a>
 800a444:	4621      	mov	r1, r4
 800a446:	4628      	mov	r0, r5
 800a448:	f000 f81e 	bl	800a488 <__swsetup_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d0cb      	beq.n	800a3e8 <__swbuf_r+0x28>
 800a450:	f04f 37ff 	mov.w	r7, #4294967295
 800a454:	e7ea      	b.n	800a42c <__swbuf_r+0x6c>
 800a456:	bf00      	nop
 800a458:	0800ef40 	.word	0x0800ef40
 800a45c:	0800ef60 	.word	0x0800ef60
 800a460:	0800ef20 	.word	0x0800ef20

0800a464 <_write_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4d07      	ldr	r5, [pc, #28]	; (800a484 <_write_r+0x20>)
 800a468:	4604      	mov	r4, r0
 800a46a:	4608      	mov	r0, r1
 800a46c:	4611      	mov	r1, r2
 800a46e:	2200      	movs	r2, #0
 800a470:	602a      	str	r2, [r5, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	f7f6 ff3f 	bl	80012f6 <_write>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_write_r+0x1e>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_write_r+0x1e>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	20000ee8 	.word	0x20000ee8

0800a488 <__swsetup_r>:
 800a488:	4b32      	ldr	r3, [pc, #200]	; (800a554 <__swsetup_r+0xcc>)
 800a48a:	b570      	push	{r4, r5, r6, lr}
 800a48c:	681d      	ldr	r5, [r3, #0]
 800a48e:	4606      	mov	r6, r0
 800a490:	460c      	mov	r4, r1
 800a492:	b125      	cbz	r5, 800a49e <__swsetup_r+0x16>
 800a494:	69ab      	ldr	r3, [r5, #24]
 800a496:	b913      	cbnz	r3, 800a49e <__swsetup_r+0x16>
 800a498:	4628      	mov	r0, r5
 800a49a:	f7fd fd87 	bl	8007fac <__sinit>
 800a49e:	4b2e      	ldr	r3, [pc, #184]	; (800a558 <__swsetup_r+0xd0>)
 800a4a0:	429c      	cmp	r4, r3
 800a4a2:	d10f      	bne.n	800a4c4 <__swsetup_r+0x3c>
 800a4a4:	686c      	ldr	r4, [r5, #4]
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4ac:	0719      	lsls	r1, r3, #28
 800a4ae:	d42c      	bmi.n	800a50a <__swsetup_r+0x82>
 800a4b0:	06dd      	lsls	r5, r3, #27
 800a4b2:	d411      	bmi.n	800a4d8 <__swsetup_r+0x50>
 800a4b4:	2309      	movs	r3, #9
 800a4b6:	6033      	str	r3, [r6, #0]
 800a4b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4bc:	81a3      	strh	r3, [r4, #12]
 800a4be:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c2:	e03e      	b.n	800a542 <__swsetup_r+0xba>
 800a4c4:	4b25      	ldr	r3, [pc, #148]	; (800a55c <__swsetup_r+0xd4>)
 800a4c6:	429c      	cmp	r4, r3
 800a4c8:	d101      	bne.n	800a4ce <__swsetup_r+0x46>
 800a4ca:	68ac      	ldr	r4, [r5, #8]
 800a4cc:	e7eb      	b.n	800a4a6 <__swsetup_r+0x1e>
 800a4ce:	4b24      	ldr	r3, [pc, #144]	; (800a560 <__swsetup_r+0xd8>)
 800a4d0:	429c      	cmp	r4, r3
 800a4d2:	bf08      	it	eq
 800a4d4:	68ec      	ldreq	r4, [r5, #12]
 800a4d6:	e7e6      	b.n	800a4a6 <__swsetup_r+0x1e>
 800a4d8:	0758      	lsls	r0, r3, #29
 800a4da:	d512      	bpl.n	800a502 <__swsetup_r+0x7a>
 800a4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4de:	b141      	cbz	r1, 800a4f2 <__swsetup_r+0x6a>
 800a4e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4e4:	4299      	cmp	r1, r3
 800a4e6:	d002      	beq.n	800a4ee <__swsetup_r+0x66>
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7fd ff3b 	bl	8008364 <_free_r>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	6363      	str	r3, [r4, #52]	; 0x34
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4f8:	81a3      	strh	r3, [r4, #12]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	6063      	str	r3, [r4, #4]
 800a4fe:	6923      	ldr	r3, [r4, #16]
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	f043 0308 	orr.w	r3, r3, #8
 800a508:	81a3      	strh	r3, [r4, #12]
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	b94b      	cbnz	r3, 800a522 <__swsetup_r+0x9a>
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a518:	d003      	beq.n	800a522 <__swsetup_r+0x9a>
 800a51a:	4621      	mov	r1, r4
 800a51c:	4630      	mov	r0, r6
 800a51e:	f001 fa61 	bl	800b9e4 <__smakebuf_r>
 800a522:	89a0      	ldrh	r0, [r4, #12]
 800a524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a528:	f010 0301 	ands.w	r3, r0, #1
 800a52c:	d00a      	beq.n	800a544 <__swsetup_r+0xbc>
 800a52e:	2300      	movs	r3, #0
 800a530:	60a3      	str	r3, [r4, #8]
 800a532:	6963      	ldr	r3, [r4, #20]
 800a534:	425b      	negs	r3, r3
 800a536:	61a3      	str	r3, [r4, #24]
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	b943      	cbnz	r3, 800a54e <__swsetup_r+0xc6>
 800a53c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a540:	d1ba      	bne.n	800a4b8 <__swsetup_r+0x30>
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	0781      	lsls	r1, r0, #30
 800a546:	bf58      	it	pl
 800a548:	6963      	ldrpl	r3, [r4, #20]
 800a54a:	60a3      	str	r3, [r4, #8]
 800a54c:	e7f4      	b.n	800a538 <__swsetup_r+0xb0>
 800a54e:	2000      	movs	r0, #0
 800a550:	e7f7      	b.n	800a542 <__swsetup_r+0xba>
 800a552:	bf00      	nop
 800a554:	2000000c 	.word	0x2000000c
 800a558:	0800ef40 	.word	0x0800ef40
 800a55c:	0800ef60 	.word	0x0800ef60
 800a560:	0800ef20 	.word	0x0800ef20

0800a564 <abort>:
 800a564:	b508      	push	{r3, lr}
 800a566:	2006      	movs	r0, #6
 800a568:	f002 f92a 	bl	800c7c0 <raise>
 800a56c:	2001      	movs	r0, #1
 800a56e:	f7f6 fe9b 	bl	80012a8 <_exit>
	...

0800a574 <_close_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d06      	ldr	r5, [pc, #24]	; (800a590 <_close_r+0x1c>)
 800a578:	2300      	movs	r3, #0
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	602b      	str	r3, [r5, #0]
 800a580:	f7f6 fed5 	bl	800132e <_close>
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d102      	bne.n	800a58e <_close_r+0x1a>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	b103      	cbz	r3, 800a58e <_close_r+0x1a>
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	20000ee8 	.word	0x20000ee8

0800a594 <quorem>:
 800a594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	6903      	ldr	r3, [r0, #16]
 800a59a:	690c      	ldr	r4, [r1, #16]
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	4607      	mov	r7, r0
 800a5a0:	f2c0 8081 	blt.w	800a6a6 <quorem+0x112>
 800a5a4:	3c01      	subs	r4, #1
 800a5a6:	f101 0814 	add.w	r8, r1, #20
 800a5aa:	f100 0514 	add.w	r5, r0, #20
 800a5ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5cc:	d331      	bcc.n	800a632 <quorem+0x9e>
 800a5ce:	f04f 0e00 	mov.w	lr, #0
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	46ac      	mov	ip, r5
 800a5d6:	46f2      	mov	sl, lr
 800a5d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5dc:	b293      	uxth	r3, r2
 800a5de:	fb06 e303 	mla	r3, r6, r3, lr
 800a5e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	ebaa 0303 	sub.w	r3, sl, r3
 800a5ec:	f8dc a000 	ldr.w	sl, [ip]
 800a5f0:	0c12      	lsrs	r2, r2, #16
 800a5f2:	fa13 f38a 	uxtah	r3, r3, sl
 800a5f6:	fb06 e202 	mla	r2, r6, r2, lr
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	9b00      	ldr	r3, [sp, #0]
 800a5fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a602:	b292      	uxth	r2, r2
 800a604:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a60c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a610:	4581      	cmp	r9, r0
 800a612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a616:	f84c 3b04 	str.w	r3, [ip], #4
 800a61a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a61e:	d2db      	bcs.n	800a5d8 <quorem+0x44>
 800a620:	f855 300b 	ldr.w	r3, [r5, fp]
 800a624:	b92b      	cbnz	r3, 800a632 <quorem+0x9e>
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	3b04      	subs	r3, #4
 800a62a:	429d      	cmp	r5, r3
 800a62c:	461a      	mov	r2, r3
 800a62e:	d32e      	bcc.n	800a68e <quorem+0xfa>
 800a630:	613c      	str	r4, [r7, #16]
 800a632:	4638      	mov	r0, r7
 800a634:	f001 fd00 	bl	800c038 <__mcmp>
 800a638:	2800      	cmp	r0, #0
 800a63a:	db24      	blt.n	800a686 <quorem+0xf2>
 800a63c:	3601      	adds	r6, #1
 800a63e:	4628      	mov	r0, r5
 800a640:	f04f 0c00 	mov.w	ip, #0
 800a644:	f858 2b04 	ldr.w	r2, [r8], #4
 800a648:	f8d0 e000 	ldr.w	lr, [r0]
 800a64c:	b293      	uxth	r3, r2
 800a64e:	ebac 0303 	sub.w	r3, ip, r3
 800a652:	0c12      	lsrs	r2, r2, #16
 800a654:	fa13 f38e 	uxtah	r3, r3, lr
 800a658:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a660:	b29b      	uxth	r3, r3
 800a662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a666:	45c1      	cmp	r9, r8
 800a668:	f840 3b04 	str.w	r3, [r0], #4
 800a66c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a670:	d2e8      	bcs.n	800a644 <quorem+0xb0>
 800a672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a67a:	b922      	cbnz	r2, 800a686 <quorem+0xf2>
 800a67c:	3b04      	subs	r3, #4
 800a67e:	429d      	cmp	r5, r3
 800a680:	461a      	mov	r2, r3
 800a682:	d30a      	bcc.n	800a69a <quorem+0x106>
 800a684:	613c      	str	r4, [r7, #16]
 800a686:	4630      	mov	r0, r6
 800a688:	b003      	add	sp, #12
 800a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68e:	6812      	ldr	r2, [r2, #0]
 800a690:	3b04      	subs	r3, #4
 800a692:	2a00      	cmp	r2, #0
 800a694:	d1cc      	bne.n	800a630 <quorem+0x9c>
 800a696:	3c01      	subs	r4, #1
 800a698:	e7c7      	b.n	800a62a <quorem+0x96>
 800a69a:	6812      	ldr	r2, [r2, #0]
 800a69c:	3b04      	subs	r3, #4
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	d1f0      	bne.n	800a684 <quorem+0xf0>
 800a6a2:	3c01      	subs	r4, #1
 800a6a4:	e7eb      	b.n	800a67e <quorem+0xea>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	e7ee      	b.n	800a688 <quorem+0xf4>
 800a6aa:	0000      	movs	r0, r0
 800a6ac:	0000      	movs	r0, r0
	...

0800a6b0 <_dtoa_r>:
 800a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	ed2d 8b04 	vpush	{d8-d9}
 800a6b8:	ec57 6b10 	vmov	r6, r7, d0
 800a6bc:	b093      	sub	sp, #76	; 0x4c
 800a6be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6c4:	9106      	str	r1, [sp, #24]
 800a6c6:	ee10 aa10 	vmov	sl, s0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a6d0:	46bb      	mov	fp, r7
 800a6d2:	b975      	cbnz	r5, 800a6f2 <_dtoa_r+0x42>
 800a6d4:	2010      	movs	r0, #16
 800a6d6:	f7fd fdef 	bl	80082b8 <malloc>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a6de:	b920      	cbnz	r0, 800a6ea <_dtoa_r+0x3a>
 800a6e0:	4ba7      	ldr	r3, [pc, #668]	; (800a980 <_dtoa_r+0x2d0>)
 800a6e2:	21ea      	movs	r1, #234	; 0xea
 800a6e4:	48a7      	ldr	r0, [pc, #668]	; (800a984 <_dtoa_r+0x2d4>)
 800a6e6:	f7fd fb09 	bl	8007cfc <__assert_func>
 800a6ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6ee:	6005      	str	r5, [r0, #0]
 800a6f0:	60c5      	str	r5, [r0, #12]
 800a6f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6f4:	6819      	ldr	r1, [r3, #0]
 800a6f6:	b151      	cbz	r1, 800a70e <_dtoa_r+0x5e>
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	604a      	str	r2, [r1, #4]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4093      	lsls	r3, r2
 800a700:	608b      	str	r3, [r1, #8]
 800a702:	4620      	mov	r0, r4
 800a704:	f001 fa0c 	bl	800bb20 <_Bfree>
 800a708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a70a:	2200      	movs	r2, #0
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	1e3b      	subs	r3, r7, #0
 800a710:	bfaa      	itet	ge
 800a712:	2300      	movge	r3, #0
 800a714:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a718:	f8c8 3000 	strge.w	r3, [r8]
 800a71c:	4b9a      	ldr	r3, [pc, #616]	; (800a988 <_dtoa_r+0x2d8>)
 800a71e:	bfbc      	itt	lt
 800a720:	2201      	movlt	r2, #1
 800a722:	f8c8 2000 	strlt.w	r2, [r8]
 800a726:	ea33 030b 	bics.w	r3, r3, fp
 800a72a:	d11b      	bne.n	800a764 <_dtoa_r+0xb4>
 800a72c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a72e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a738:	4333      	orrs	r3, r6
 800a73a:	f000 8592 	beq.w	800b262 <_dtoa_r+0xbb2>
 800a73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a740:	b963      	cbnz	r3, 800a75c <_dtoa_r+0xac>
 800a742:	4b92      	ldr	r3, [pc, #584]	; (800a98c <_dtoa_r+0x2dc>)
 800a744:	e022      	b.n	800a78c <_dtoa_r+0xdc>
 800a746:	4b92      	ldr	r3, [pc, #584]	; (800a990 <_dtoa_r+0x2e0>)
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	3308      	adds	r3, #8
 800a74c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	9801      	ldr	r0, [sp, #4]
 800a752:	b013      	add	sp, #76	; 0x4c
 800a754:	ecbd 8b04 	vpop	{d8-d9}
 800a758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75c:	4b8b      	ldr	r3, [pc, #556]	; (800a98c <_dtoa_r+0x2dc>)
 800a75e:	9301      	str	r3, [sp, #4]
 800a760:	3303      	adds	r3, #3
 800a762:	e7f3      	b.n	800a74c <_dtoa_r+0x9c>
 800a764:	2200      	movs	r2, #0
 800a766:	2300      	movs	r3, #0
 800a768:	4650      	mov	r0, sl
 800a76a:	4659      	mov	r1, fp
 800a76c:	f7f6 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 800a770:	ec4b ab19 	vmov	d9, sl, fp
 800a774:	4680      	mov	r8, r0
 800a776:	b158      	cbz	r0, 800a790 <_dtoa_r+0xe0>
 800a778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a77a:	2301      	movs	r3, #1
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 856b 	beq.w	800b25c <_dtoa_r+0xbac>
 800a786:	4883      	ldr	r0, [pc, #524]	; (800a994 <_dtoa_r+0x2e4>)
 800a788:	6018      	str	r0, [r3, #0]
 800a78a:	1e43      	subs	r3, r0, #1
 800a78c:	9301      	str	r3, [sp, #4]
 800a78e:	e7df      	b.n	800a750 <_dtoa_r+0xa0>
 800a790:	ec4b ab10 	vmov	d0, sl, fp
 800a794:	aa10      	add	r2, sp, #64	; 0x40
 800a796:	a911      	add	r1, sp, #68	; 0x44
 800a798:	4620      	mov	r0, r4
 800a79a:	f001 fd6f 	bl	800c27c <__d2b>
 800a79e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a7a2:	ee08 0a10 	vmov	s16, r0
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	f000 8084 	beq.w	800a8b4 <_dtoa_r+0x204>
 800a7ac:	ee19 3a90 	vmov	r3, s19
 800a7b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a7b8:	4656      	mov	r6, sl
 800a7ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a7be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a7c6:	4b74      	ldr	r3, [pc, #464]	; (800a998 <_dtoa_r+0x2e8>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	f7f5 fd5b 	bl	8000288 <__aeabi_dsub>
 800a7d2:	a365      	add	r3, pc, #404	; (adr r3, 800a968 <_dtoa_r+0x2b8>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	a364      	add	r3, pc, #400	; (adr r3, 800a970 <_dtoa_r+0x2c0>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	f7f5 fd53 	bl	800028c <__adddf3>
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	460f      	mov	r7, r1
 800a7ec:	f7f5 fe9a 	bl	8000524 <__aeabi_i2d>
 800a7f0:	a361      	add	r3, pc, #388	; (adr r3, 800a978 <_dtoa_r+0x2c8>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 feff 	bl	80005f8 <__aeabi_dmul>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4630      	mov	r0, r6
 800a800:	4639      	mov	r1, r7
 800a802:	f7f5 fd43 	bl	800028c <__adddf3>
 800a806:	4606      	mov	r6, r0
 800a808:	460f      	mov	r7, r1
 800a80a:	f7f6 f9a5 	bl	8000b58 <__aeabi_d2iz>
 800a80e:	2200      	movs	r2, #0
 800a810:	9000      	str	r0, [sp, #0]
 800a812:	2300      	movs	r3, #0
 800a814:	4630      	mov	r0, r6
 800a816:	4639      	mov	r1, r7
 800a818:	f7f6 f960 	bl	8000adc <__aeabi_dcmplt>
 800a81c:	b150      	cbz	r0, 800a834 <_dtoa_r+0x184>
 800a81e:	9800      	ldr	r0, [sp, #0]
 800a820:	f7f5 fe80 	bl	8000524 <__aeabi_i2d>
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	f7f6 f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a82c:	b910      	cbnz	r0, 800a834 <_dtoa_r+0x184>
 800a82e:	9b00      	ldr	r3, [sp, #0]
 800a830:	3b01      	subs	r3, #1
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	9b00      	ldr	r3, [sp, #0]
 800a836:	2b16      	cmp	r3, #22
 800a838:	d85a      	bhi.n	800a8f0 <_dtoa_r+0x240>
 800a83a:	9a00      	ldr	r2, [sp, #0]
 800a83c:	4b57      	ldr	r3, [pc, #348]	; (800a99c <_dtoa_r+0x2ec>)
 800a83e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	ec51 0b19 	vmov	r0, r1, d9
 800a84a:	f7f6 f947 	bl	8000adc <__aeabi_dcmplt>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d050      	beq.n	800a8f4 <_dtoa_r+0x244>
 800a852:	9b00      	ldr	r3, [sp, #0]
 800a854:	3b01      	subs	r3, #1
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	2300      	movs	r3, #0
 800a85a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a85e:	1b5d      	subs	r5, r3, r5
 800a860:	1e6b      	subs	r3, r5, #1
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	bf45      	ittet	mi
 800a866:	f1c5 0301 	rsbmi	r3, r5, #1
 800a86a:	9304      	strmi	r3, [sp, #16]
 800a86c:	2300      	movpl	r3, #0
 800a86e:	2300      	movmi	r3, #0
 800a870:	bf4c      	ite	mi
 800a872:	9305      	strmi	r3, [sp, #20]
 800a874:	9304      	strpl	r3, [sp, #16]
 800a876:	9b00      	ldr	r3, [sp, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	db3d      	blt.n	800a8f8 <_dtoa_r+0x248>
 800a87c:	9b05      	ldr	r3, [sp, #20]
 800a87e:	9a00      	ldr	r2, [sp, #0]
 800a880:	920a      	str	r2, [sp, #40]	; 0x28
 800a882:	4413      	add	r3, r2
 800a884:	9305      	str	r3, [sp, #20]
 800a886:	2300      	movs	r3, #0
 800a888:	9307      	str	r3, [sp, #28]
 800a88a:	9b06      	ldr	r3, [sp, #24]
 800a88c:	2b09      	cmp	r3, #9
 800a88e:	f200 8089 	bhi.w	800a9a4 <_dtoa_r+0x2f4>
 800a892:	2b05      	cmp	r3, #5
 800a894:	bfc4      	itt	gt
 800a896:	3b04      	subgt	r3, #4
 800a898:	9306      	strgt	r3, [sp, #24]
 800a89a:	9b06      	ldr	r3, [sp, #24]
 800a89c:	f1a3 0302 	sub.w	r3, r3, #2
 800a8a0:	bfcc      	ite	gt
 800a8a2:	2500      	movgt	r5, #0
 800a8a4:	2501      	movle	r5, #1
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	f200 8087 	bhi.w	800a9ba <_dtoa_r+0x30a>
 800a8ac:	e8df f003 	tbb	[pc, r3]
 800a8b0:	59383a2d 	.word	0x59383a2d
 800a8b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a8b8:	441d      	add	r5, r3
 800a8ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8be:	2b20      	cmp	r3, #32
 800a8c0:	bfc1      	itttt	gt
 800a8c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800a8ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8d2:	bfda      	itte	le
 800a8d4:	f1c3 0320 	rsble	r3, r3, #32
 800a8d8:	fa06 f003 	lslle.w	r0, r6, r3
 800a8dc:	4318      	orrgt	r0, r3
 800a8de:	f7f5 fe11 	bl	8000504 <__aeabi_ui2d>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a8ea:	3d01      	subs	r5, #1
 800a8ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ee:	e76a      	b.n	800a7c6 <_dtoa_r+0x116>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e7b2      	b.n	800a85a <_dtoa_r+0x1aa>
 800a8f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8f6:	e7b1      	b.n	800a85c <_dtoa_r+0x1ac>
 800a8f8:	9b04      	ldr	r3, [sp, #16]
 800a8fa:	9a00      	ldr	r2, [sp, #0]
 800a8fc:	1a9b      	subs	r3, r3, r2
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	4253      	negs	r3, r2
 800a902:	9307      	str	r3, [sp, #28]
 800a904:	2300      	movs	r3, #0
 800a906:	930a      	str	r3, [sp, #40]	; 0x28
 800a908:	e7bf      	b.n	800a88a <_dtoa_r+0x1da>
 800a90a:	2300      	movs	r3, #0
 800a90c:	9308      	str	r3, [sp, #32]
 800a90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a910:	2b00      	cmp	r3, #0
 800a912:	dc55      	bgt.n	800a9c0 <_dtoa_r+0x310>
 800a914:	2301      	movs	r3, #1
 800a916:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a91a:	461a      	mov	r2, r3
 800a91c:	9209      	str	r2, [sp, #36]	; 0x24
 800a91e:	e00c      	b.n	800a93a <_dtoa_r+0x28a>
 800a920:	2301      	movs	r3, #1
 800a922:	e7f3      	b.n	800a90c <_dtoa_r+0x25c>
 800a924:	2300      	movs	r3, #0
 800a926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a928:	9308      	str	r3, [sp, #32]
 800a92a:	9b00      	ldr	r3, [sp, #0]
 800a92c:	4413      	add	r3, r2
 800a92e:	9302      	str	r3, [sp, #8]
 800a930:	3301      	adds	r3, #1
 800a932:	2b01      	cmp	r3, #1
 800a934:	9303      	str	r3, [sp, #12]
 800a936:	bfb8      	it	lt
 800a938:	2301      	movlt	r3, #1
 800a93a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a93c:	2200      	movs	r2, #0
 800a93e:	6042      	str	r2, [r0, #4]
 800a940:	2204      	movs	r2, #4
 800a942:	f102 0614 	add.w	r6, r2, #20
 800a946:	429e      	cmp	r6, r3
 800a948:	6841      	ldr	r1, [r0, #4]
 800a94a:	d93d      	bls.n	800a9c8 <_dtoa_r+0x318>
 800a94c:	4620      	mov	r0, r4
 800a94e:	f001 f8a7 	bl	800baa0 <_Balloc>
 800a952:	9001      	str	r0, [sp, #4]
 800a954:	2800      	cmp	r0, #0
 800a956:	d13b      	bne.n	800a9d0 <_dtoa_r+0x320>
 800a958:	4b11      	ldr	r3, [pc, #68]	; (800a9a0 <_dtoa_r+0x2f0>)
 800a95a:	4602      	mov	r2, r0
 800a95c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a960:	e6c0      	b.n	800a6e4 <_dtoa_r+0x34>
 800a962:	2301      	movs	r3, #1
 800a964:	e7df      	b.n	800a926 <_dtoa_r+0x276>
 800a966:	bf00      	nop
 800a968:	636f4361 	.word	0x636f4361
 800a96c:	3fd287a7 	.word	0x3fd287a7
 800a970:	8b60c8b3 	.word	0x8b60c8b3
 800a974:	3fc68a28 	.word	0x3fc68a28
 800a978:	509f79fb 	.word	0x509f79fb
 800a97c:	3fd34413 	.word	0x3fd34413
 800a980:	0800f02d 	.word	0x0800f02d
 800a984:	0800f044 	.word	0x0800f044
 800a988:	7ff00000 	.word	0x7ff00000
 800a98c:	0800f029 	.word	0x0800f029
 800a990:	0800f020 	.word	0x0800f020
 800a994:	0800efa6 	.word	0x0800efa6
 800a998:	3ff80000 	.word	0x3ff80000
 800a99c:	0800f1b0 	.word	0x0800f1b0
 800a9a0:	0800f09f 	.word	0x0800f09f
 800a9a4:	2501      	movs	r5, #1
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	9306      	str	r3, [sp, #24]
 800a9aa:	9508      	str	r5, [sp, #32]
 800a9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2312      	movs	r3, #18
 800a9b8:	e7b0      	b.n	800a91c <_dtoa_r+0x26c>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	9308      	str	r3, [sp, #32]
 800a9be:	e7f5      	b.n	800a9ac <_dtoa_r+0x2fc>
 800a9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9c6:	e7b8      	b.n	800a93a <_dtoa_r+0x28a>
 800a9c8:	3101      	adds	r1, #1
 800a9ca:	6041      	str	r1, [r0, #4]
 800a9cc:	0052      	lsls	r2, r2, #1
 800a9ce:	e7b8      	b.n	800a942 <_dtoa_r+0x292>
 800a9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9d2:	9a01      	ldr	r2, [sp, #4]
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	2b0e      	cmp	r3, #14
 800a9da:	f200 809d 	bhi.w	800ab18 <_dtoa_r+0x468>
 800a9de:	2d00      	cmp	r5, #0
 800a9e0:	f000 809a 	beq.w	800ab18 <_dtoa_r+0x468>
 800a9e4:	9b00      	ldr	r3, [sp, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	dd32      	ble.n	800aa50 <_dtoa_r+0x3a0>
 800a9ea:	4ab7      	ldr	r2, [pc, #732]	; (800acc8 <_dtoa_r+0x618>)
 800a9ec:	f003 030f 	and.w	r3, r3, #15
 800a9f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9f8:	9b00      	ldr	r3, [sp, #0]
 800a9fa:	05d8      	lsls	r0, r3, #23
 800a9fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aa00:	d516      	bpl.n	800aa30 <_dtoa_r+0x380>
 800aa02:	4bb2      	ldr	r3, [pc, #712]	; (800accc <_dtoa_r+0x61c>)
 800aa04:	ec51 0b19 	vmov	r0, r1, d9
 800aa08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa0c:	f7f5 ff1e 	bl	800084c <__aeabi_ddiv>
 800aa10:	f007 070f 	and.w	r7, r7, #15
 800aa14:	4682      	mov	sl, r0
 800aa16:	468b      	mov	fp, r1
 800aa18:	2503      	movs	r5, #3
 800aa1a:	4eac      	ldr	r6, [pc, #688]	; (800accc <_dtoa_r+0x61c>)
 800aa1c:	b957      	cbnz	r7, 800aa34 <_dtoa_r+0x384>
 800aa1e:	4642      	mov	r2, r8
 800aa20:	464b      	mov	r3, r9
 800aa22:	4650      	mov	r0, sl
 800aa24:	4659      	mov	r1, fp
 800aa26:	f7f5 ff11 	bl	800084c <__aeabi_ddiv>
 800aa2a:	4682      	mov	sl, r0
 800aa2c:	468b      	mov	fp, r1
 800aa2e:	e028      	b.n	800aa82 <_dtoa_r+0x3d2>
 800aa30:	2502      	movs	r5, #2
 800aa32:	e7f2      	b.n	800aa1a <_dtoa_r+0x36a>
 800aa34:	07f9      	lsls	r1, r7, #31
 800aa36:	d508      	bpl.n	800aa4a <_dtoa_r+0x39a>
 800aa38:	4640      	mov	r0, r8
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa40:	f7f5 fdda 	bl	80005f8 <__aeabi_dmul>
 800aa44:	3501      	adds	r5, #1
 800aa46:	4680      	mov	r8, r0
 800aa48:	4689      	mov	r9, r1
 800aa4a:	107f      	asrs	r7, r7, #1
 800aa4c:	3608      	adds	r6, #8
 800aa4e:	e7e5      	b.n	800aa1c <_dtoa_r+0x36c>
 800aa50:	f000 809b 	beq.w	800ab8a <_dtoa_r+0x4da>
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	4f9d      	ldr	r7, [pc, #628]	; (800accc <_dtoa_r+0x61c>)
 800aa58:	425e      	negs	r6, r3
 800aa5a:	4b9b      	ldr	r3, [pc, #620]	; (800acc8 <_dtoa_r+0x618>)
 800aa5c:	f006 020f 	and.w	r2, r6, #15
 800aa60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	ec51 0b19 	vmov	r0, r1, d9
 800aa6c:	f7f5 fdc4 	bl	80005f8 <__aeabi_dmul>
 800aa70:	1136      	asrs	r6, r6, #4
 800aa72:	4682      	mov	sl, r0
 800aa74:	468b      	mov	fp, r1
 800aa76:	2300      	movs	r3, #0
 800aa78:	2502      	movs	r5, #2
 800aa7a:	2e00      	cmp	r6, #0
 800aa7c:	d17a      	bne.n	800ab74 <_dtoa_r+0x4c4>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1d3      	bne.n	800aa2a <_dtoa_r+0x37a>
 800aa82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 8082 	beq.w	800ab8e <_dtoa_r+0x4de>
 800aa8a:	4b91      	ldr	r3, [pc, #580]	; (800acd0 <_dtoa_r+0x620>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4650      	mov	r0, sl
 800aa90:	4659      	mov	r1, fp
 800aa92:	f7f6 f823 	bl	8000adc <__aeabi_dcmplt>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d079      	beq.n	800ab8e <_dtoa_r+0x4de>
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d076      	beq.n	800ab8e <_dtoa_r+0x4de>
 800aaa0:	9b02      	ldr	r3, [sp, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	dd36      	ble.n	800ab14 <_dtoa_r+0x464>
 800aaa6:	9b00      	ldr	r3, [sp, #0]
 800aaa8:	4650      	mov	r0, sl
 800aaaa:	4659      	mov	r1, fp
 800aaac:	1e5f      	subs	r7, r3, #1
 800aaae:	2200      	movs	r2, #0
 800aab0:	4b88      	ldr	r3, [pc, #544]	; (800acd4 <_dtoa_r+0x624>)
 800aab2:	f7f5 fda1 	bl	80005f8 <__aeabi_dmul>
 800aab6:	9e02      	ldr	r6, [sp, #8]
 800aab8:	4682      	mov	sl, r0
 800aaba:	468b      	mov	fp, r1
 800aabc:	3501      	adds	r5, #1
 800aabe:	4628      	mov	r0, r5
 800aac0:	f7f5 fd30 	bl	8000524 <__aeabi_i2d>
 800aac4:	4652      	mov	r2, sl
 800aac6:	465b      	mov	r3, fp
 800aac8:	f7f5 fd96 	bl	80005f8 <__aeabi_dmul>
 800aacc:	4b82      	ldr	r3, [pc, #520]	; (800acd8 <_dtoa_r+0x628>)
 800aace:	2200      	movs	r2, #0
 800aad0:	f7f5 fbdc 	bl	800028c <__adddf3>
 800aad4:	46d0      	mov	r8, sl
 800aad6:	46d9      	mov	r9, fp
 800aad8:	4682      	mov	sl, r0
 800aada:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aade:	2e00      	cmp	r6, #0
 800aae0:	d158      	bne.n	800ab94 <_dtoa_r+0x4e4>
 800aae2:	4b7e      	ldr	r3, [pc, #504]	; (800acdc <_dtoa_r+0x62c>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	4640      	mov	r0, r8
 800aae8:	4649      	mov	r1, r9
 800aaea:	f7f5 fbcd 	bl	8000288 <__aeabi_dsub>
 800aaee:	4652      	mov	r2, sl
 800aaf0:	465b      	mov	r3, fp
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	4689      	mov	r9, r1
 800aaf6:	f7f6 f80f 	bl	8000b18 <__aeabi_dcmpgt>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	f040 8295 	bne.w	800b02a <_dtoa_r+0x97a>
 800ab00:	4652      	mov	r2, sl
 800ab02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab06:	4640      	mov	r0, r8
 800ab08:	4649      	mov	r1, r9
 800ab0a:	f7f5 ffe7 	bl	8000adc <__aeabi_dcmplt>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f040 8289 	bne.w	800b026 <_dtoa_r+0x976>
 800ab14:	ec5b ab19 	vmov	sl, fp, d9
 800ab18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f2c0 8148 	blt.w	800adb0 <_dtoa_r+0x700>
 800ab20:	9a00      	ldr	r2, [sp, #0]
 800ab22:	2a0e      	cmp	r2, #14
 800ab24:	f300 8144 	bgt.w	800adb0 <_dtoa_r+0x700>
 800ab28:	4b67      	ldr	r3, [pc, #412]	; (800acc8 <_dtoa_r+0x618>)
 800ab2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f280 80d5 	bge.w	800ace4 <_dtoa_r+0x634>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f300 80d1 	bgt.w	800ace4 <_dtoa_r+0x634>
 800ab42:	f040 826f 	bne.w	800b024 <_dtoa_r+0x974>
 800ab46:	4b65      	ldr	r3, [pc, #404]	; (800acdc <_dtoa_r+0x62c>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	f7f5 fd53 	bl	80005f8 <__aeabi_dmul>
 800ab52:	4652      	mov	r2, sl
 800ab54:	465b      	mov	r3, fp
 800ab56:	f7f5 ffd5 	bl	8000b04 <__aeabi_dcmpge>
 800ab5a:	9e03      	ldr	r6, [sp, #12]
 800ab5c:	4637      	mov	r7, r6
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f040 8245 	bne.w	800afee <_dtoa_r+0x93e>
 800ab64:	9d01      	ldr	r5, [sp, #4]
 800ab66:	2331      	movs	r3, #49	; 0x31
 800ab68:	f805 3b01 	strb.w	r3, [r5], #1
 800ab6c:	9b00      	ldr	r3, [sp, #0]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	e240      	b.n	800aff6 <_dtoa_r+0x946>
 800ab74:	07f2      	lsls	r2, r6, #31
 800ab76:	d505      	bpl.n	800ab84 <_dtoa_r+0x4d4>
 800ab78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab7c:	f7f5 fd3c 	bl	80005f8 <__aeabi_dmul>
 800ab80:	3501      	adds	r5, #1
 800ab82:	2301      	movs	r3, #1
 800ab84:	1076      	asrs	r6, r6, #1
 800ab86:	3708      	adds	r7, #8
 800ab88:	e777      	b.n	800aa7a <_dtoa_r+0x3ca>
 800ab8a:	2502      	movs	r5, #2
 800ab8c:	e779      	b.n	800aa82 <_dtoa_r+0x3d2>
 800ab8e:	9f00      	ldr	r7, [sp, #0]
 800ab90:	9e03      	ldr	r6, [sp, #12]
 800ab92:	e794      	b.n	800aabe <_dtoa_r+0x40e>
 800ab94:	9901      	ldr	r1, [sp, #4]
 800ab96:	4b4c      	ldr	r3, [pc, #304]	; (800acc8 <_dtoa_r+0x618>)
 800ab98:	4431      	add	r1, r6
 800ab9a:	910d      	str	r1, [sp, #52]	; 0x34
 800ab9c:	9908      	ldr	r1, [sp, #32]
 800ab9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aba2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aba6:	2900      	cmp	r1, #0
 800aba8:	d043      	beq.n	800ac32 <_dtoa_r+0x582>
 800abaa:	494d      	ldr	r1, [pc, #308]	; (800ace0 <_dtoa_r+0x630>)
 800abac:	2000      	movs	r0, #0
 800abae:	f7f5 fe4d 	bl	800084c <__aeabi_ddiv>
 800abb2:	4652      	mov	r2, sl
 800abb4:	465b      	mov	r3, fp
 800abb6:	f7f5 fb67 	bl	8000288 <__aeabi_dsub>
 800abba:	9d01      	ldr	r5, [sp, #4]
 800abbc:	4682      	mov	sl, r0
 800abbe:	468b      	mov	fp, r1
 800abc0:	4649      	mov	r1, r9
 800abc2:	4640      	mov	r0, r8
 800abc4:	f7f5 ffc8 	bl	8000b58 <__aeabi_d2iz>
 800abc8:	4606      	mov	r6, r0
 800abca:	f7f5 fcab 	bl	8000524 <__aeabi_i2d>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4640      	mov	r0, r8
 800abd4:	4649      	mov	r1, r9
 800abd6:	f7f5 fb57 	bl	8000288 <__aeabi_dsub>
 800abda:	3630      	adds	r6, #48	; 0x30
 800abdc:	f805 6b01 	strb.w	r6, [r5], #1
 800abe0:	4652      	mov	r2, sl
 800abe2:	465b      	mov	r3, fp
 800abe4:	4680      	mov	r8, r0
 800abe6:	4689      	mov	r9, r1
 800abe8:	f7f5 ff78 	bl	8000adc <__aeabi_dcmplt>
 800abec:	2800      	cmp	r0, #0
 800abee:	d163      	bne.n	800acb8 <_dtoa_r+0x608>
 800abf0:	4642      	mov	r2, r8
 800abf2:	464b      	mov	r3, r9
 800abf4:	4936      	ldr	r1, [pc, #216]	; (800acd0 <_dtoa_r+0x620>)
 800abf6:	2000      	movs	r0, #0
 800abf8:	f7f5 fb46 	bl	8000288 <__aeabi_dsub>
 800abfc:	4652      	mov	r2, sl
 800abfe:	465b      	mov	r3, fp
 800ac00:	f7f5 ff6c 	bl	8000adc <__aeabi_dcmplt>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f040 80b5 	bne.w	800ad74 <_dtoa_r+0x6c4>
 800ac0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac0c:	429d      	cmp	r5, r3
 800ac0e:	d081      	beq.n	800ab14 <_dtoa_r+0x464>
 800ac10:	4b30      	ldr	r3, [pc, #192]	; (800acd4 <_dtoa_r+0x624>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	4650      	mov	r0, sl
 800ac16:	4659      	mov	r1, fp
 800ac18:	f7f5 fcee 	bl	80005f8 <__aeabi_dmul>
 800ac1c:	4b2d      	ldr	r3, [pc, #180]	; (800acd4 <_dtoa_r+0x624>)
 800ac1e:	4682      	mov	sl, r0
 800ac20:	468b      	mov	fp, r1
 800ac22:	4640      	mov	r0, r8
 800ac24:	4649      	mov	r1, r9
 800ac26:	2200      	movs	r2, #0
 800ac28:	f7f5 fce6 	bl	80005f8 <__aeabi_dmul>
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	4689      	mov	r9, r1
 800ac30:	e7c6      	b.n	800abc0 <_dtoa_r+0x510>
 800ac32:	4650      	mov	r0, sl
 800ac34:	4659      	mov	r1, fp
 800ac36:	f7f5 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ac3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac3c:	9d01      	ldr	r5, [sp, #4]
 800ac3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac40:	4682      	mov	sl, r0
 800ac42:	468b      	mov	fp, r1
 800ac44:	4649      	mov	r1, r9
 800ac46:	4640      	mov	r0, r8
 800ac48:	f7f5 ff86 	bl	8000b58 <__aeabi_d2iz>
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	f7f5 fc69 	bl	8000524 <__aeabi_i2d>
 800ac52:	3630      	adds	r6, #48	; 0x30
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4640      	mov	r0, r8
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f7f5 fb14 	bl	8000288 <__aeabi_dsub>
 800ac60:	f805 6b01 	strb.w	r6, [r5], #1
 800ac64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac66:	429d      	cmp	r5, r3
 800ac68:	4680      	mov	r8, r0
 800ac6a:	4689      	mov	r9, r1
 800ac6c:	f04f 0200 	mov.w	r2, #0
 800ac70:	d124      	bne.n	800acbc <_dtoa_r+0x60c>
 800ac72:	4b1b      	ldr	r3, [pc, #108]	; (800ace0 <_dtoa_r+0x630>)
 800ac74:	4650      	mov	r0, sl
 800ac76:	4659      	mov	r1, fp
 800ac78:	f7f5 fb08 	bl	800028c <__adddf3>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4640      	mov	r0, r8
 800ac82:	4649      	mov	r1, r9
 800ac84:	f7f5 ff48 	bl	8000b18 <__aeabi_dcmpgt>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d173      	bne.n	800ad74 <_dtoa_r+0x6c4>
 800ac8c:	4652      	mov	r2, sl
 800ac8e:	465b      	mov	r3, fp
 800ac90:	4913      	ldr	r1, [pc, #76]	; (800ace0 <_dtoa_r+0x630>)
 800ac92:	2000      	movs	r0, #0
 800ac94:	f7f5 faf8 	bl	8000288 <__aeabi_dsub>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f43f af35 	beq.w	800ab14 <_dtoa_r+0x464>
 800acaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800acac:	1e6b      	subs	r3, r5, #1
 800acae:	930f      	str	r3, [sp, #60]	; 0x3c
 800acb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acb4:	2b30      	cmp	r3, #48	; 0x30
 800acb6:	d0f8      	beq.n	800acaa <_dtoa_r+0x5fa>
 800acb8:	9700      	str	r7, [sp, #0]
 800acba:	e049      	b.n	800ad50 <_dtoa_r+0x6a0>
 800acbc:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <_dtoa_r+0x624>)
 800acbe:	f7f5 fc9b 	bl	80005f8 <__aeabi_dmul>
 800acc2:	4680      	mov	r8, r0
 800acc4:	4689      	mov	r9, r1
 800acc6:	e7bd      	b.n	800ac44 <_dtoa_r+0x594>
 800acc8:	0800f1b0 	.word	0x0800f1b0
 800accc:	0800f188 	.word	0x0800f188
 800acd0:	3ff00000 	.word	0x3ff00000
 800acd4:	40240000 	.word	0x40240000
 800acd8:	401c0000 	.word	0x401c0000
 800acdc:	40140000 	.word	0x40140000
 800ace0:	3fe00000 	.word	0x3fe00000
 800ace4:	9d01      	ldr	r5, [sp, #4]
 800ace6:	4656      	mov	r6, sl
 800ace8:	465f      	mov	r7, fp
 800acea:	4642      	mov	r2, r8
 800acec:	464b      	mov	r3, r9
 800acee:	4630      	mov	r0, r6
 800acf0:	4639      	mov	r1, r7
 800acf2:	f7f5 fdab 	bl	800084c <__aeabi_ddiv>
 800acf6:	f7f5 ff2f 	bl	8000b58 <__aeabi_d2iz>
 800acfa:	4682      	mov	sl, r0
 800acfc:	f7f5 fc12 	bl	8000524 <__aeabi_i2d>
 800ad00:	4642      	mov	r2, r8
 800ad02:	464b      	mov	r3, r9
 800ad04:	f7f5 fc78 	bl	80005f8 <__aeabi_dmul>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	4639      	mov	r1, r7
 800ad10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ad14:	f7f5 fab8 	bl	8000288 <__aeabi_dsub>
 800ad18:	f805 6b01 	strb.w	r6, [r5], #1
 800ad1c:	9e01      	ldr	r6, [sp, #4]
 800ad1e:	9f03      	ldr	r7, [sp, #12]
 800ad20:	1bae      	subs	r6, r5, r6
 800ad22:	42b7      	cmp	r7, r6
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	d135      	bne.n	800ad96 <_dtoa_r+0x6e6>
 800ad2a:	f7f5 faaf 	bl	800028c <__adddf3>
 800ad2e:	4642      	mov	r2, r8
 800ad30:	464b      	mov	r3, r9
 800ad32:	4606      	mov	r6, r0
 800ad34:	460f      	mov	r7, r1
 800ad36:	f7f5 feef 	bl	8000b18 <__aeabi_dcmpgt>
 800ad3a:	b9d0      	cbnz	r0, 800ad72 <_dtoa_r+0x6c2>
 800ad3c:	4642      	mov	r2, r8
 800ad3e:	464b      	mov	r3, r9
 800ad40:	4630      	mov	r0, r6
 800ad42:	4639      	mov	r1, r7
 800ad44:	f7f5 fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad48:	b110      	cbz	r0, 800ad50 <_dtoa_r+0x6a0>
 800ad4a:	f01a 0f01 	tst.w	sl, #1
 800ad4e:	d110      	bne.n	800ad72 <_dtoa_r+0x6c2>
 800ad50:	4620      	mov	r0, r4
 800ad52:	ee18 1a10 	vmov	r1, s16
 800ad56:	f000 fee3 	bl	800bb20 <_Bfree>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9800      	ldr	r0, [sp, #0]
 800ad5e:	702b      	strb	r3, [r5, #0]
 800ad60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad62:	3001      	adds	r0, #1
 800ad64:	6018      	str	r0, [r3, #0]
 800ad66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f43f acf1 	beq.w	800a750 <_dtoa_r+0xa0>
 800ad6e:	601d      	str	r5, [r3, #0]
 800ad70:	e4ee      	b.n	800a750 <_dtoa_r+0xa0>
 800ad72:	9f00      	ldr	r7, [sp, #0]
 800ad74:	462b      	mov	r3, r5
 800ad76:	461d      	mov	r5, r3
 800ad78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad7c:	2a39      	cmp	r2, #57	; 0x39
 800ad7e:	d106      	bne.n	800ad8e <_dtoa_r+0x6de>
 800ad80:	9a01      	ldr	r2, [sp, #4]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d1f7      	bne.n	800ad76 <_dtoa_r+0x6c6>
 800ad86:	9901      	ldr	r1, [sp, #4]
 800ad88:	2230      	movs	r2, #48	; 0x30
 800ad8a:	3701      	adds	r7, #1
 800ad8c:	700a      	strb	r2, [r1, #0]
 800ad8e:	781a      	ldrb	r2, [r3, #0]
 800ad90:	3201      	adds	r2, #1
 800ad92:	701a      	strb	r2, [r3, #0]
 800ad94:	e790      	b.n	800acb8 <_dtoa_r+0x608>
 800ad96:	4ba6      	ldr	r3, [pc, #664]	; (800b030 <_dtoa_r+0x980>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f7f5 fc2d 	bl	80005f8 <__aeabi_dmul>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2300      	movs	r3, #0
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	f7f5 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d09d      	beq.n	800acea <_dtoa_r+0x63a>
 800adae:	e7cf      	b.n	800ad50 <_dtoa_r+0x6a0>
 800adb0:	9a08      	ldr	r2, [sp, #32]
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	f000 80d7 	beq.w	800af66 <_dtoa_r+0x8b6>
 800adb8:	9a06      	ldr	r2, [sp, #24]
 800adba:	2a01      	cmp	r2, #1
 800adbc:	f300 80ba 	bgt.w	800af34 <_dtoa_r+0x884>
 800adc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adc2:	2a00      	cmp	r2, #0
 800adc4:	f000 80b2 	beq.w	800af2c <_dtoa_r+0x87c>
 800adc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adcc:	9e07      	ldr	r6, [sp, #28]
 800adce:	9d04      	ldr	r5, [sp, #16]
 800add0:	9a04      	ldr	r2, [sp, #16]
 800add2:	441a      	add	r2, r3
 800add4:	9204      	str	r2, [sp, #16]
 800add6:	9a05      	ldr	r2, [sp, #20]
 800add8:	2101      	movs	r1, #1
 800adda:	441a      	add	r2, r3
 800addc:	4620      	mov	r0, r4
 800adde:	9205      	str	r2, [sp, #20]
 800ade0:	f000 ffa0 	bl	800bd24 <__i2b>
 800ade4:	4607      	mov	r7, r0
 800ade6:	2d00      	cmp	r5, #0
 800ade8:	dd0c      	ble.n	800ae04 <_dtoa_r+0x754>
 800adea:	9b05      	ldr	r3, [sp, #20]
 800adec:	2b00      	cmp	r3, #0
 800adee:	dd09      	ble.n	800ae04 <_dtoa_r+0x754>
 800adf0:	42ab      	cmp	r3, r5
 800adf2:	9a04      	ldr	r2, [sp, #16]
 800adf4:	bfa8      	it	ge
 800adf6:	462b      	movge	r3, r5
 800adf8:	1ad2      	subs	r2, r2, r3
 800adfa:	9204      	str	r2, [sp, #16]
 800adfc:	9a05      	ldr	r2, [sp, #20]
 800adfe:	1aed      	subs	r5, r5, r3
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	9305      	str	r3, [sp, #20]
 800ae04:	9b07      	ldr	r3, [sp, #28]
 800ae06:	b31b      	cbz	r3, 800ae50 <_dtoa_r+0x7a0>
 800ae08:	9b08      	ldr	r3, [sp, #32]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 80af 	beq.w	800af6e <_dtoa_r+0x8be>
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	dd13      	ble.n	800ae3c <_dtoa_r+0x78c>
 800ae14:	4639      	mov	r1, r7
 800ae16:	4632      	mov	r2, r6
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f001 f843 	bl	800bea4 <__pow5mult>
 800ae1e:	ee18 2a10 	vmov	r2, s16
 800ae22:	4601      	mov	r1, r0
 800ae24:	4607      	mov	r7, r0
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 ff92 	bl	800bd50 <__multiply>
 800ae2c:	ee18 1a10 	vmov	r1, s16
 800ae30:	4680      	mov	r8, r0
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 fe74 	bl	800bb20 <_Bfree>
 800ae38:	ee08 8a10 	vmov	s16, r8
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	1b9a      	subs	r2, r3, r6
 800ae40:	d006      	beq.n	800ae50 <_dtoa_r+0x7a0>
 800ae42:	ee18 1a10 	vmov	r1, s16
 800ae46:	4620      	mov	r0, r4
 800ae48:	f001 f82c 	bl	800bea4 <__pow5mult>
 800ae4c:	ee08 0a10 	vmov	s16, r0
 800ae50:	2101      	movs	r1, #1
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 ff66 	bl	800bd24 <__i2b>
 800ae58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	f340 8088 	ble.w	800af72 <_dtoa_r+0x8c2>
 800ae62:	461a      	mov	r2, r3
 800ae64:	4601      	mov	r1, r0
 800ae66:	4620      	mov	r0, r4
 800ae68:	f001 f81c 	bl	800bea4 <__pow5mult>
 800ae6c:	9b06      	ldr	r3, [sp, #24]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	4606      	mov	r6, r0
 800ae72:	f340 8081 	ble.w	800af78 <_dtoa_r+0x8c8>
 800ae76:	f04f 0800 	mov.w	r8, #0
 800ae7a:	6933      	ldr	r3, [r6, #16]
 800ae7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae80:	6918      	ldr	r0, [r3, #16]
 800ae82:	f000 feff 	bl	800bc84 <__hi0bits>
 800ae86:	f1c0 0020 	rsb	r0, r0, #32
 800ae8a:	9b05      	ldr	r3, [sp, #20]
 800ae8c:	4418      	add	r0, r3
 800ae8e:	f010 001f 	ands.w	r0, r0, #31
 800ae92:	f000 8092 	beq.w	800afba <_dtoa_r+0x90a>
 800ae96:	f1c0 0320 	rsb	r3, r0, #32
 800ae9a:	2b04      	cmp	r3, #4
 800ae9c:	f340 808a 	ble.w	800afb4 <_dtoa_r+0x904>
 800aea0:	f1c0 001c 	rsb	r0, r0, #28
 800aea4:	9b04      	ldr	r3, [sp, #16]
 800aea6:	4403      	add	r3, r0
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	9b05      	ldr	r3, [sp, #20]
 800aeac:	4403      	add	r3, r0
 800aeae:	4405      	add	r5, r0
 800aeb0:	9305      	str	r3, [sp, #20]
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dd07      	ble.n	800aec8 <_dtoa_r+0x818>
 800aeb8:	ee18 1a10 	vmov	r1, s16
 800aebc:	461a      	mov	r2, r3
 800aebe:	4620      	mov	r0, r4
 800aec0:	f001 f84a 	bl	800bf58 <__lshift>
 800aec4:	ee08 0a10 	vmov	s16, r0
 800aec8:	9b05      	ldr	r3, [sp, #20]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dd05      	ble.n	800aeda <_dtoa_r+0x82a>
 800aece:	4631      	mov	r1, r6
 800aed0:	461a      	mov	r2, r3
 800aed2:	4620      	mov	r0, r4
 800aed4:	f001 f840 	bl	800bf58 <__lshift>
 800aed8:	4606      	mov	r6, r0
 800aeda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d06e      	beq.n	800afbe <_dtoa_r+0x90e>
 800aee0:	ee18 0a10 	vmov	r0, s16
 800aee4:	4631      	mov	r1, r6
 800aee6:	f001 f8a7 	bl	800c038 <__mcmp>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	da67      	bge.n	800afbe <_dtoa_r+0x90e>
 800aeee:	9b00      	ldr	r3, [sp, #0]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	ee18 1a10 	vmov	r1, s16
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	220a      	movs	r2, #10
 800aefa:	2300      	movs	r3, #0
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 fe31 	bl	800bb64 <__multadd>
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	ee08 0a10 	vmov	s16, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 81b1 	beq.w	800b270 <_dtoa_r+0xbc0>
 800af0e:	2300      	movs	r3, #0
 800af10:	4639      	mov	r1, r7
 800af12:	220a      	movs	r2, #10
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fe25 	bl	800bb64 <__multadd>
 800af1a:	9b02      	ldr	r3, [sp, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	4607      	mov	r7, r0
 800af20:	f300 808e 	bgt.w	800b040 <_dtoa_r+0x990>
 800af24:	9b06      	ldr	r3, [sp, #24]
 800af26:	2b02      	cmp	r3, #2
 800af28:	dc51      	bgt.n	800afce <_dtoa_r+0x91e>
 800af2a:	e089      	b.n	800b040 <_dtoa_r+0x990>
 800af2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af32:	e74b      	b.n	800adcc <_dtoa_r+0x71c>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	1e5e      	subs	r6, r3, #1
 800af38:	9b07      	ldr	r3, [sp, #28]
 800af3a:	42b3      	cmp	r3, r6
 800af3c:	bfbf      	itttt	lt
 800af3e:	9b07      	ldrlt	r3, [sp, #28]
 800af40:	9607      	strlt	r6, [sp, #28]
 800af42:	1af2      	sublt	r2, r6, r3
 800af44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af46:	bfb6      	itet	lt
 800af48:	189b      	addlt	r3, r3, r2
 800af4a:	1b9e      	subge	r6, r3, r6
 800af4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af4e:	9b03      	ldr	r3, [sp, #12]
 800af50:	bfb8      	it	lt
 800af52:	2600      	movlt	r6, #0
 800af54:	2b00      	cmp	r3, #0
 800af56:	bfb7      	itett	lt
 800af58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800af5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800af60:	1a9d      	sublt	r5, r3, r2
 800af62:	2300      	movlt	r3, #0
 800af64:	e734      	b.n	800add0 <_dtoa_r+0x720>
 800af66:	9e07      	ldr	r6, [sp, #28]
 800af68:	9d04      	ldr	r5, [sp, #16]
 800af6a:	9f08      	ldr	r7, [sp, #32]
 800af6c:	e73b      	b.n	800ade6 <_dtoa_r+0x736>
 800af6e:	9a07      	ldr	r2, [sp, #28]
 800af70:	e767      	b.n	800ae42 <_dtoa_r+0x792>
 800af72:	9b06      	ldr	r3, [sp, #24]
 800af74:	2b01      	cmp	r3, #1
 800af76:	dc18      	bgt.n	800afaa <_dtoa_r+0x8fa>
 800af78:	f1ba 0f00 	cmp.w	sl, #0
 800af7c:	d115      	bne.n	800afaa <_dtoa_r+0x8fa>
 800af7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af82:	b993      	cbnz	r3, 800afaa <_dtoa_r+0x8fa>
 800af84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af88:	0d1b      	lsrs	r3, r3, #20
 800af8a:	051b      	lsls	r3, r3, #20
 800af8c:	b183      	cbz	r3, 800afb0 <_dtoa_r+0x900>
 800af8e:	9b04      	ldr	r3, [sp, #16]
 800af90:	3301      	adds	r3, #1
 800af92:	9304      	str	r3, [sp, #16]
 800af94:	9b05      	ldr	r3, [sp, #20]
 800af96:	3301      	adds	r3, #1
 800af98:	9305      	str	r3, [sp, #20]
 800af9a:	f04f 0801 	mov.w	r8, #1
 800af9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f47f af6a 	bne.w	800ae7a <_dtoa_r+0x7ca>
 800afa6:	2001      	movs	r0, #1
 800afa8:	e76f      	b.n	800ae8a <_dtoa_r+0x7da>
 800afaa:	f04f 0800 	mov.w	r8, #0
 800afae:	e7f6      	b.n	800af9e <_dtoa_r+0x8ee>
 800afb0:	4698      	mov	r8, r3
 800afb2:	e7f4      	b.n	800af9e <_dtoa_r+0x8ee>
 800afb4:	f43f af7d 	beq.w	800aeb2 <_dtoa_r+0x802>
 800afb8:	4618      	mov	r0, r3
 800afba:	301c      	adds	r0, #28
 800afbc:	e772      	b.n	800aea4 <_dtoa_r+0x7f4>
 800afbe:	9b03      	ldr	r3, [sp, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	dc37      	bgt.n	800b034 <_dtoa_r+0x984>
 800afc4:	9b06      	ldr	r3, [sp, #24]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	dd34      	ble.n	800b034 <_dtoa_r+0x984>
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	9302      	str	r3, [sp, #8]
 800afce:	9b02      	ldr	r3, [sp, #8]
 800afd0:	b96b      	cbnz	r3, 800afee <_dtoa_r+0x93e>
 800afd2:	4631      	mov	r1, r6
 800afd4:	2205      	movs	r2, #5
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 fdc4 	bl	800bb64 <__multadd>
 800afdc:	4601      	mov	r1, r0
 800afde:	4606      	mov	r6, r0
 800afe0:	ee18 0a10 	vmov	r0, s16
 800afe4:	f001 f828 	bl	800c038 <__mcmp>
 800afe8:	2800      	cmp	r0, #0
 800afea:	f73f adbb 	bgt.w	800ab64 <_dtoa_r+0x4b4>
 800afee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff0:	9d01      	ldr	r5, [sp, #4]
 800aff2:	43db      	mvns	r3, r3
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	f04f 0800 	mov.w	r8, #0
 800affa:	4631      	mov	r1, r6
 800affc:	4620      	mov	r0, r4
 800affe:	f000 fd8f 	bl	800bb20 <_Bfree>
 800b002:	2f00      	cmp	r7, #0
 800b004:	f43f aea4 	beq.w	800ad50 <_dtoa_r+0x6a0>
 800b008:	f1b8 0f00 	cmp.w	r8, #0
 800b00c:	d005      	beq.n	800b01a <_dtoa_r+0x96a>
 800b00e:	45b8      	cmp	r8, r7
 800b010:	d003      	beq.n	800b01a <_dtoa_r+0x96a>
 800b012:	4641      	mov	r1, r8
 800b014:	4620      	mov	r0, r4
 800b016:	f000 fd83 	bl	800bb20 <_Bfree>
 800b01a:	4639      	mov	r1, r7
 800b01c:	4620      	mov	r0, r4
 800b01e:	f000 fd7f 	bl	800bb20 <_Bfree>
 800b022:	e695      	b.n	800ad50 <_dtoa_r+0x6a0>
 800b024:	2600      	movs	r6, #0
 800b026:	4637      	mov	r7, r6
 800b028:	e7e1      	b.n	800afee <_dtoa_r+0x93e>
 800b02a:	9700      	str	r7, [sp, #0]
 800b02c:	4637      	mov	r7, r6
 800b02e:	e599      	b.n	800ab64 <_dtoa_r+0x4b4>
 800b030:	40240000 	.word	0x40240000
 800b034:	9b08      	ldr	r3, [sp, #32]
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 80ca 	beq.w	800b1d0 <_dtoa_r+0xb20>
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	9302      	str	r3, [sp, #8]
 800b040:	2d00      	cmp	r5, #0
 800b042:	dd05      	ble.n	800b050 <_dtoa_r+0x9a0>
 800b044:	4639      	mov	r1, r7
 800b046:	462a      	mov	r2, r5
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 ff85 	bl	800bf58 <__lshift>
 800b04e:	4607      	mov	r7, r0
 800b050:	f1b8 0f00 	cmp.w	r8, #0
 800b054:	d05b      	beq.n	800b10e <_dtoa_r+0xa5e>
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 fd21 	bl	800baa0 <_Balloc>
 800b05e:	4605      	mov	r5, r0
 800b060:	b928      	cbnz	r0, 800b06e <_dtoa_r+0x9be>
 800b062:	4b87      	ldr	r3, [pc, #540]	; (800b280 <_dtoa_r+0xbd0>)
 800b064:	4602      	mov	r2, r0
 800b066:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b06a:	f7ff bb3b 	b.w	800a6e4 <_dtoa_r+0x34>
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	3202      	adds	r2, #2
 800b072:	0092      	lsls	r2, r2, #2
 800b074:	f107 010c 	add.w	r1, r7, #12
 800b078:	300c      	adds	r0, #12
 800b07a:	f7fd f92d 	bl	80082d8 <memcpy>
 800b07e:	2201      	movs	r2, #1
 800b080:	4629      	mov	r1, r5
 800b082:	4620      	mov	r0, r4
 800b084:	f000 ff68 	bl	800bf58 <__lshift>
 800b088:	9b01      	ldr	r3, [sp, #4]
 800b08a:	f103 0901 	add.w	r9, r3, #1
 800b08e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b092:	4413      	add	r3, r2
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	f00a 0301 	and.w	r3, sl, #1
 800b09a:	46b8      	mov	r8, r7
 800b09c:	9304      	str	r3, [sp, #16]
 800b09e:	4607      	mov	r7, r0
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	ee18 0a10 	vmov	r0, s16
 800b0a6:	f7ff fa75 	bl	800a594 <quorem>
 800b0aa:	4641      	mov	r1, r8
 800b0ac:	9002      	str	r0, [sp, #8]
 800b0ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0b2:	ee18 0a10 	vmov	r0, s16
 800b0b6:	f000 ffbf 	bl	800c038 <__mcmp>
 800b0ba:	463a      	mov	r2, r7
 800b0bc:	9003      	str	r0, [sp, #12]
 800b0be:	4631      	mov	r1, r6
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 ffd5 	bl	800c070 <__mdiff>
 800b0c6:	68c2      	ldr	r2, [r0, #12]
 800b0c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	bb02      	cbnz	r2, 800b112 <_dtoa_r+0xa62>
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	ee18 0a10 	vmov	r0, s16
 800b0d6:	f000 ffaf 	bl	800c038 <__mcmp>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	4629      	mov	r1, r5
 800b0de:	4620      	mov	r0, r4
 800b0e0:	9207      	str	r2, [sp, #28]
 800b0e2:	f000 fd1d 	bl	800bb20 <_Bfree>
 800b0e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b0ea:	ea43 0102 	orr.w	r1, r3, r2
 800b0ee:	9b04      	ldr	r3, [sp, #16]
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	464d      	mov	r5, r9
 800b0f4:	d10f      	bne.n	800b116 <_dtoa_r+0xa66>
 800b0f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0fa:	d02a      	beq.n	800b152 <_dtoa_r+0xaa2>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dd02      	ble.n	800b108 <_dtoa_r+0xa58>
 800b102:	9b02      	ldr	r3, [sp, #8]
 800b104:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b108:	f88b a000 	strb.w	sl, [fp]
 800b10c:	e775      	b.n	800affa <_dtoa_r+0x94a>
 800b10e:	4638      	mov	r0, r7
 800b110:	e7ba      	b.n	800b088 <_dtoa_r+0x9d8>
 800b112:	2201      	movs	r2, #1
 800b114:	e7e2      	b.n	800b0dc <_dtoa_r+0xa2c>
 800b116:	9b03      	ldr	r3, [sp, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	db04      	blt.n	800b126 <_dtoa_r+0xa76>
 800b11c:	9906      	ldr	r1, [sp, #24]
 800b11e:	430b      	orrs	r3, r1
 800b120:	9904      	ldr	r1, [sp, #16]
 800b122:	430b      	orrs	r3, r1
 800b124:	d122      	bne.n	800b16c <_dtoa_r+0xabc>
 800b126:	2a00      	cmp	r2, #0
 800b128:	ddee      	ble.n	800b108 <_dtoa_r+0xa58>
 800b12a:	ee18 1a10 	vmov	r1, s16
 800b12e:	2201      	movs	r2, #1
 800b130:	4620      	mov	r0, r4
 800b132:	f000 ff11 	bl	800bf58 <__lshift>
 800b136:	4631      	mov	r1, r6
 800b138:	ee08 0a10 	vmov	s16, r0
 800b13c:	f000 ff7c 	bl	800c038 <__mcmp>
 800b140:	2800      	cmp	r0, #0
 800b142:	dc03      	bgt.n	800b14c <_dtoa_r+0xa9c>
 800b144:	d1e0      	bne.n	800b108 <_dtoa_r+0xa58>
 800b146:	f01a 0f01 	tst.w	sl, #1
 800b14a:	d0dd      	beq.n	800b108 <_dtoa_r+0xa58>
 800b14c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b150:	d1d7      	bne.n	800b102 <_dtoa_r+0xa52>
 800b152:	2339      	movs	r3, #57	; 0x39
 800b154:	f88b 3000 	strb.w	r3, [fp]
 800b158:	462b      	mov	r3, r5
 800b15a:	461d      	mov	r5, r3
 800b15c:	3b01      	subs	r3, #1
 800b15e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b162:	2a39      	cmp	r2, #57	; 0x39
 800b164:	d071      	beq.n	800b24a <_dtoa_r+0xb9a>
 800b166:	3201      	adds	r2, #1
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	e746      	b.n	800affa <_dtoa_r+0x94a>
 800b16c:	2a00      	cmp	r2, #0
 800b16e:	dd07      	ble.n	800b180 <_dtoa_r+0xad0>
 800b170:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b174:	d0ed      	beq.n	800b152 <_dtoa_r+0xaa2>
 800b176:	f10a 0301 	add.w	r3, sl, #1
 800b17a:	f88b 3000 	strb.w	r3, [fp]
 800b17e:	e73c      	b.n	800affa <_dtoa_r+0x94a>
 800b180:	9b05      	ldr	r3, [sp, #20]
 800b182:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b186:	4599      	cmp	r9, r3
 800b188:	d047      	beq.n	800b21a <_dtoa_r+0xb6a>
 800b18a:	ee18 1a10 	vmov	r1, s16
 800b18e:	2300      	movs	r3, #0
 800b190:	220a      	movs	r2, #10
 800b192:	4620      	mov	r0, r4
 800b194:	f000 fce6 	bl	800bb64 <__multadd>
 800b198:	45b8      	cmp	r8, r7
 800b19a:	ee08 0a10 	vmov	s16, r0
 800b19e:	f04f 0300 	mov.w	r3, #0
 800b1a2:	f04f 020a 	mov.w	r2, #10
 800b1a6:	4641      	mov	r1, r8
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	d106      	bne.n	800b1ba <_dtoa_r+0xb0a>
 800b1ac:	f000 fcda 	bl	800bb64 <__multadd>
 800b1b0:	4680      	mov	r8, r0
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	f109 0901 	add.w	r9, r9, #1
 800b1b8:	e772      	b.n	800b0a0 <_dtoa_r+0x9f0>
 800b1ba:	f000 fcd3 	bl	800bb64 <__multadd>
 800b1be:	4639      	mov	r1, r7
 800b1c0:	4680      	mov	r8, r0
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	220a      	movs	r2, #10
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 fccc 	bl	800bb64 <__multadd>
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	e7f1      	b.n	800b1b4 <_dtoa_r+0xb04>
 800b1d0:	9b03      	ldr	r3, [sp, #12]
 800b1d2:	9302      	str	r3, [sp, #8]
 800b1d4:	9d01      	ldr	r5, [sp, #4]
 800b1d6:	ee18 0a10 	vmov	r0, s16
 800b1da:	4631      	mov	r1, r6
 800b1dc:	f7ff f9da 	bl	800a594 <quorem>
 800b1e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b1e4:	9b01      	ldr	r3, [sp, #4]
 800b1e6:	f805 ab01 	strb.w	sl, [r5], #1
 800b1ea:	1aea      	subs	r2, r5, r3
 800b1ec:	9b02      	ldr	r3, [sp, #8]
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	dd09      	ble.n	800b206 <_dtoa_r+0xb56>
 800b1f2:	ee18 1a10 	vmov	r1, s16
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	220a      	movs	r2, #10
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fcb2 	bl	800bb64 <__multadd>
 800b200:	ee08 0a10 	vmov	s16, r0
 800b204:	e7e7      	b.n	800b1d6 <_dtoa_r+0xb26>
 800b206:	9b02      	ldr	r3, [sp, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	bfc8      	it	gt
 800b20c:	461d      	movgt	r5, r3
 800b20e:	9b01      	ldr	r3, [sp, #4]
 800b210:	bfd8      	it	le
 800b212:	2501      	movle	r5, #1
 800b214:	441d      	add	r5, r3
 800b216:	f04f 0800 	mov.w	r8, #0
 800b21a:	ee18 1a10 	vmov	r1, s16
 800b21e:	2201      	movs	r2, #1
 800b220:	4620      	mov	r0, r4
 800b222:	f000 fe99 	bl	800bf58 <__lshift>
 800b226:	4631      	mov	r1, r6
 800b228:	ee08 0a10 	vmov	s16, r0
 800b22c:	f000 ff04 	bl	800c038 <__mcmp>
 800b230:	2800      	cmp	r0, #0
 800b232:	dc91      	bgt.n	800b158 <_dtoa_r+0xaa8>
 800b234:	d102      	bne.n	800b23c <_dtoa_r+0xb8c>
 800b236:	f01a 0f01 	tst.w	sl, #1
 800b23a:	d18d      	bne.n	800b158 <_dtoa_r+0xaa8>
 800b23c:	462b      	mov	r3, r5
 800b23e:	461d      	mov	r5, r3
 800b240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b244:	2a30      	cmp	r2, #48	; 0x30
 800b246:	d0fa      	beq.n	800b23e <_dtoa_r+0xb8e>
 800b248:	e6d7      	b.n	800affa <_dtoa_r+0x94a>
 800b24a:	9a01      	ldr	r2, [sp, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d184      	bne.n	800b15a <_dtoa_r+0xaaa>
 800b250:	9b00      	ldr	r3, [sp, #0]
 800b252:	3301      	adds	r3, #1
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	2331      	movs	r3, #49	; 0x31
 800b258:	7013      	strb	r3, [r2, #0]
 800b25a:	e6ce      	b.n	800affa <_dtoa_r+0x94a>
 800b25c:	4b09      	ldr	r3, [pc, #36]	; (800b284 <_dtoa_r+0xbd4>)
 800b25e:	f7ff ba95 	b.w	800a78c <_dtoa_r+0xdc>
 800b262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b264:	2b00      	cmp	r3, #0
 800b266:	f47f aa6e 	bne.w	800a746 <_dtoa_r+0x96>
 800b26a:	4b07      	ldr	r3, [pc, #28]	; (800b288 <_dtoa_r+0xbd8>)
 800b26c:	f7ff ba8e 	b.w	800a78c <_dtoa_r+0xdc>
 800b270:	9b02      	ldr	r3, [sp, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	dcae      	bgt.n	800b1d4 <_dtoa_r+0xb24>
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	f73f aea8 	bgt.w	800afce <_dtoa_r+0x91e>
 800b27e:	e7a9      	b.n	800b1d4 <_dtoa_r+0xb24>
 800b280:	0800f09f 	.word	0x0800f09f
 800b284:	0800efa5 	.word	0x0800efa5
 800b288:	0800f020 	.word	0x0800f020

0800b28c <rshift>:
 800b28c:	6903      	ldr	r3, [r0, #16]
 800b28e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b296:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b29a:	f100 0414 	add.w	r4, r0, #20
 800b29e:	dd45      	ble.n	800b32c <rshift+0xa0>
 800b2a0:	f011 011f 	ands.w	r1, r1, #31
 800b2a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2ac:	d10c      	bne.n	800b2c8 <rshift+0x3c>
 800b2ae:	f100 0710 	add.w	r7, r0, #16
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	42b1      	cmp	r1, r6
 800b2b6:	d334      	bcc.n	800b322 <rshift+0x96>
 800b2b8:	1a9b      	subs	r3, r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	1eea      	subs	r2, r5, #3
 800b2be:	4296      	cmp	r6, r2
 800b2c0:	bf38      	it	cc
 800b2c2:	2300      	movcc	r3, #0
 800b2c4:	4423      	add	r3, r4
 800b2c6:	e015      	b.n	800b2f4 <rshift+0x68>
 800b2c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2cc:	f1c1 0820 	rsb	r8, r1, #32
 800b2d0:	40cf      	lsrs	r7, r1
 800b2d2:	f105 0e04 	add.w	lr, r5, #4
 800b2d6:	46a1      	mov	r9, r4
 800b2d8:	4576      	cmp	r6, lr
 800b2da:	46f4      	mov	ip, lr
 800b2dc:	d815      	bhi.n	800b30a <rshift+0x7e>
 800b2de:	1a9a      	subs	r2, r3, r2
 800b2e0:	0092      	lsls	r2, r2, #2
 800b2e2:	3a04      	subs	r2, #4
 800b2e4:	3501      	adds	r5, #1
 800b2e6:	42ae      	cmp	r6, r5
 800b2e8:	bf38      	it	cc
 800b2ea:	2200      	movcc	r2, #0
 800b2ec:	18a3      	adds	r3, r4, r2
 800b2ee:	50a7      	str	r7, [r4, r2]
 800b2f0:	b107      	cbz	r7, 800b2f4 <rshift+0x68>
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	1b1a      	subs	r2, r3, r4
 800b2f6:	42a3      	cmp	r3, r4
 800b2f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2fc:	bf08      	it	eq
 800b2fe:	2300      	moveq	r3, #0
 800b300:	6102      	str	r2, [r0, #16]
 800b302:	bf08      	it	eq
 800b304:	6143      	streq	r3, [r0, #20]
 800b306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b30a:	f8dc c000 	ldr.w	ip, [ip]
 800b30e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b312:	ea4c 0707 	orr.w	r7, ip, r7
 800b316:	f849 7b04 	str.w	r7, [r9], #4
 800b31a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b31e:	40cf      	lsrs	r7, r1
 800b320:	e7da      	b.n	800b2d8 <rshift+0x4c>
 800b322:	f851 cb04 	ldr.w	ip, [r1], #4
 800b326:	f847 cf04 	str.w	ip, [r7, #4]!
 800b32a:	e7c3      	b.n	800b2b4 <rshift+0x28>
 800b32c:	4623      	mov	r3, r4
 800b32e:	e7e1      	b.n	800b2f4 <rshift+0x68>

0800b330 <__hexdig_fun>:
 800b330:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b334:	2b09      	cmp	r3, #9
 800b336:	d802      	bhi.n	800b33e <__hexdig_fun+0xe>
 800b338:	3820      	subs	r0, #32
 800b33a:	b2c0      	uxtb	r0, r0
 800b33c:	4770      	bx	lr
 800b33e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b342:	2b05      	cmp	r3, #5
 800b344:	d801      	bhi.n	800b34a <__hexdig_fun+0x1a>
 800b346:	3847      	subs	r0, #71	; 0x47
 800b348:	e7f7      	b.n	800b33a <__hexdig_fun+0xa>
 800b34a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b34e:	2b05      	cmp	r3, #5
 800b350:	d801      	bhi.n	800b356 <__hexdig_fun+0x26>
 800b352:	3827      	subs	r0, #39	; 0x27
 800b354:	e7f1      	b.n	800b33a <__hexdig_fun+0xa>
 800b356:	2000      	movs	r0, #0
 800b358:	4770      	bx	lr
	...

0800b35c <__gethex>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	ed2d 8b02 	vpush	{d8}
 800b364:	b089      	sub	sp, #36	; 0x24
 800b366:	ee08 0a10 	vmov	s16, r0
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	4bb4      	ldr	r3, [pc, #720]	; (800b640 <__gethex+0x2e4>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	4618      	mov	r0, r3
 800b374:	468b      	mov	fp, r1
 800b376:	4690      	mov	r8, r2
 800b378:	f7f4 ff2a 	bl	80001d0 <strlen>
 800b37c:	9b01      	ldr	r3, [sp, #4]
 800b37e:	f8db 2000 	ldr.w	r2, [fp]
 800b382:	4403      	add	r3, r0
 800b384:	4682      	mov	sl, r0
 800b386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b38a:	9305      	str	r3, [sp, #20]
 800b38c:	1c93      	adds	r3, r2, #2
 800b38e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b392:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b396:	32fe      	adds	r2, #254	; 0xfe
 800b398:	18d1      	adds	r1, r2, r3
 800b39a:	461f      	mov	r7, r3
 800b39c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3a0:	9100      	str	r1, [sp, #0]
 800b3a2:	2830      	cmp	r0, #48	; 0x30
 800b3a4:	d0f8      	beq.n	800b398 <__gethex+0x3c>
 800b3a6:	f7ff ffc3 	bl	800b330 <__hexdig_fun>
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d13a      	bne.n	800b426 <__gethex+0xca>
 800b3b0:	9901      	ldr	r1, [sp, #4]
 800b3b2:	4652      	mov	r2, sl
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	f001 fa1f 	bl	800c7f8 <strncmp>
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d168      	bne.n	800b492 <__gethex+0x136>
 800b3c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b3c4:	eb07 060a 	add.w	r6, r7, sl
 800b3c8:	f7ff ffb2 	bl	800b330 <__hexdig_fun>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d062      	beq.n	800b496 <__gethex+0x13a>
 800b3d0:	4633      	mov	r3, r6
 800b3d2:	7818      	ldrb	r0, [r3, #0]
 800b3d4:	2830      	cmp	r0, #48	; 0x30
 800b3d6:	461f      	mov	r7, r3
 800b3d8:	f103 0301 	add.w	r3, r3, #1
 800b3dc:	d0f9      	beq.n	800b3d2 <__gethex+0x76>
 800b3de:	f7ff ffa7 	bl	800b330 <__hexdig_fun>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	fab0 f480 	clz	r4, r0
 800b3e8:	0964      	lsrs	r4, r4, #5
 800b3ea:	4635      	mov	r5, r6
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	463a      	mov	r2, r7
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	3201      	adds	r2, #1
 800b3f4:	7830      	ldrb	r0, [r6, #0]
 800b3f6:	f7ff ff9b 	bl	800b330 <__hexdig_fun>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d1f8      	bne.n	800b3f0 <__gethex+0x94>
 800b3fe:	9901      	ldr	r1, [sp, #4]
 800b400:	4652      	mov	r2, sl
 800b402:	4630      	mov	r0, r6
 800b404:	f001 f9f8 	bl	800c7f8 <strncmp>
 800b408:	b980      	cbnz	r0, 800b42c <__gethex+0xd0>
 800b40a:	b94d      	cbnz	r5, 800b420 <__gethex+0xc4>
 800b40c:	eb06 050a 	add.w	r5, r6, sl
 800b410:	462a      	mov	r2, r5
 800b412:	4616      	mov	r6, r2
 800b414:	3201      	adds	r2, #1
 800b416:	7830      	ldrb	r0, [r6, #0]
 800b418:	f7ff ff8a 	bl	800b330 <__hexdig_fun>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1f8      	bne.n	800b412 <__gethex+0xb6>
 800b420:	1bad      	subs	r5, r5, r6
 800b422:	00ad      	lsls	r5, r5, #2
 800b424:	e004      	b.n	800b430 <__gethex+0xd4>
 800b426:	2400      	movs	r4, #0
 800b428:	4625      	mov	r5, r4
 800b42a:	e7e0      	b.n	800b3ee <__gethex+0x92>
 800b42c:	2d00      	cmp	r5, #0
 800b42e:	d1f7      	bne.n	800b420 <__gethex+0xc4>
 800b430:	7833      	ldrb	r3, [r6, #0]
 800b432:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b436:	2b50      	cmp	r3, #80	; 0x50
 800b438:	d13b      	bne.n	800b4b2 <__gethex+0x156>
 800b43a:	7873      	ldrb	r3, [r6, #1]
 800b43c:	2b2b      	cmp	r3, #43	; 0x2b
 800b43e:	d02c      	beq.n	800b49a <__gethex+0x13e>
 800b440:	2b2d      	cmp	r3, #45	; 0x2d
 800b442:	d02e      	beq.n	800b4a2 <__gethex+0x146>
 800b444:	1c71      	adds	r1, r6, #1
 800b446:	f04f 0900 	mov.w	r9, #0
 800b44a:	7808      	ldrb	r0, [r1, #0]
 800b44c:	f7ff ff70 	bl	800b330 <__hexdig_fun>
 800b450:	1e43      	subs	r3, r0, #1
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b18      	cmp	r3, #24
 800b456:	d82c      	bhi.n	800b4b2 <__gethex+0x156>
 800b458:	f1a0 0210 	sub.w	r2, r0, #16
 800b45c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b460:	f7ff ff66 	bl	800b330 <__hexdig_fun>
 800b464:	1e43      	subs	r3, r0, #1
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b18      	cmp	r3, #24
 800b46a:	d91d      	bls.n	800b4a8 <__gethex+0x14c>
 800b46c:	f1b9 0f00 	cmp.w	r9, #0
 800b470:	d000      	beq.n	800b474 <__gethex+0x118>
 800b472:	4252      	negs	r2, r2
 800b474:	4415      	add	r5, r2
 800b476:	f8cb 1000 	str.w	r1, [fp]
 800b47a:	b1e4      	cbz	r4, 800b4b6 <__gethex+0x15a>
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bf14      	ite	ne
 800b482:	2700      	movne	r7, #0
 800b484:	2706      	moveq	r7, #6
 800b486:	4638      	mov	r0, r7
 800b488:	b009      	add	sp, #36	; 0x24
 800b48a:	ecbd 8b02 	vpop	{d8}
 800b48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b492:	463e      	mov	r6, r7
 800b494:	4625      	mov	r5, r4
 800b496:	2401      	movs	r4, #1
 800b498:	e7ca      	b.n	800b430 <__gethex+0xd4>
 800b49a:	f04f 0900 	mov.w	r9, #0
 800b49e:	1cb1      	adds	r1, r6, #2
 800b4a0:	e7d3      	b.n	800b44a <__gethex+0xee>
 800b4a2:	f04f 0901 	mov.w	r9, #1
 800b4a6:	e7fa      	b.n	800b49e <__gethex+0x142>
 800b4a8:	230a      	movs	r3, #10
 800b4aa:	fb03 0202 	mla	r2, r3, r2, r0
 800b4ae:	3a10      	subs	r2, #16
 800b4b0:	e7d4      	b.n	800b45c <__gethex+0x100>
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	e7df      	b.n	800b476 <__gethex+0x11a>
 800b4b6:	1bf3      	subs	r3, r6, r7
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	2b07      	cmp	r3, #7
 800b4be:	dc0b      	bgt.n	800b4d8 <__gethex+0x17c>
 800b4c0:	ee18 0a10 	vmov	r0, s16
 800b4c4:	f000 faec 	bl	800baa0 <_Balloc>
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	b940      	cbnz	r0, 800b4de <__gethex+0x182>
 800b4cc:	4b5d      	ldr	r3, [pc, #372]	; (800b644 <__gethex+0x2e8>)
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	21de      	movs	r1, #222	; 0xde
 800b4d2:	485d      	ldr	r0, [pc, #372]	; (800b648 <__gethex+0x2ec>)
 800b4d4:	f7fc fc12 	bl	8007cfc <__assert_func>
 800b4d8:	3101      	adds	r1, #1
 800b4da:	105b      	asrs	r3, r3, #1
 800b4dc:	e7ee      	b.n	800b4bc <__gethex+0x160>
 800b4de:	f100 0914 	add.w	r9, r0, #20
 800b4e2:	f04f 0b00 	mov.w	fp, #0
 800b4e6:	f1ca 0301 	rsb	r3, sl, #1
 800b4ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4ee:	f8cd b000 	str.w	fp, [sp]
 800b4f2:	9306      	str	r3, [sp, #24]
 800b4f4:	42b7      	cmp	r7, r6
 800b4f6:	d340      	bcc.n	800b57a <__gethex+0x21e>
 800b4f8:	9802      	ldr	r0, [sp, #8]
 800b4fa:	9b00      	ldr	r3, [sp, #0]
 800b4fc:	f840 3b04 	str.w	r3, [r0], #4
 800b500:	eba0 0009 	sub.w	r0, r0, r9
 800b504:	1080      	asrs	r0, r0, #2
 800b506:	0146      	lsls	r6, r0, #5
 800b508:	6120      	str	r0, [r4, #16]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 fbba 	bl	800bc84 <__hi0bits>
 800b510:	1a30      	subs	r0, r6, r0
 800b512:	f8d8 6000 	ldr.w	r6, [r8]
 800b516:	42b0      	cmp	r0, r6
 800b518:	dd63      	ble.n	800b5e2 <__gethex+0x286>
 800b51a:	1b87      	subs	r7, r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 ff5e 	bl	800c3e0 <__any_on>
 800b524:	4682      	mov	sl, r0
 800b526:	b1a8      	cbz	r0, 800b554 <__gethex+0x1f8>
 800b528:	1e7b      	subs	r3, r7, #1
 800b52a:	1159      	asrs	r1, r3, #5
 800b52c:	f003 021f 	and.w	r2, r3, #31
 800b530:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b534:	f04f 0a01 	mov.w	sl, #1
 800b538:	fa0a f202 	lsl.w	r2, sl, r2
 800b53c:	420a      	tst	r2, r1
 800b53e:	d009      	beq.n	800b554 <__gethex+0x1f8>
 800b540:	4553      	cmp	r3, sl
 800b542:	dd05      	ble.n	800b550 <__gethex+0x1f4>
 800b544:	1eb9      	subs	r1, r7, #2
 800b546:	4620      	mov	r0, r4
 800b548:	f000 ff4a 	bl	800c3e0 <__any_on>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d145      	bne.n	800b5dc <__gethex+0x280>
 800b550:	f04f 0a02 	mov.w	sl, #2
 800b554:	4639      	mov	r1, r7
 800b556:	4620      	mov	r0, r4
 800b558:	f7ff fe98 	bl	800b28c <rshift>
 800b55c:	443d      	add	r5, r7
 800b55e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b562:	42ab      	cmp	r3, r5
 800b564:	da4c      	bge.n	800b600 <__gethex+0x2a4>
 800b566:	ee18 0a10 	vmov	r0, s16
 800b56a:	4621      	mov	r1, r4
 800b56c:	f000 fad8 	bl	800bb20 <_Bfree>
 800b570:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b572:	2300      	movs	r3, #0
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	27a3      	movs	r7, #163	; 0xa3
 800b578:	e785      	b.n	800b486 <__gethex+0x12a>
 800b57a:	1e73      	subs	r3, r6, #1
 800b57c:	9a05      	ldr	r2, [sp, #20]
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b584:	4293      	cmp	r3, r2
 800b586:	d019      	beq.n	800b5bc <__gethex+0x260>
 800b588:	f1bb 0f20 	cmp.w	fp, #32
 800b58c:	d107      	bne.n	800b59e <__gethex+0x242>
 800b58e:	9b02      	ldr	r3, [sp, #8]
 800b590:	9a00      	ldr	r2, [sp, #0]
 800b592:	f843 2b04 	str.w	r2, [r3], #4
 800b596:	9302      	str	r3, [sp, #8]
 800b598:	2300      	movs	r3, #0
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	469b      	mov	fp, r3
 800b59e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b5a2:	f7ff fec5 	bl	800b330 <__hexdig_fun>
 800b5a6:	9b00      	ldr	r3, [sp, #0]
 800b5a8:	f000 000f 	and.w	r0, r0, #15
 800b5ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800b5b0:	4303      	orrs	r3, r0
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	f10b 0b04 	add.w	fp, fp, #4
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	e00d      	b.n	800b5d8 <__gethex+0x27c>
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	9a06      	ldr	r2, [sp, #24]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	42bb      	cmp	r3, r7
 800b5c4:	d3e0      	bcc.n	800b588 <__gethex+0x22c>
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	9901      	ldr	r1, [sp, #4]
 800b5ca:	9307      	str	r3, [sp, #28]
 800b5cc:	4652      	mov	r2, sl
 800b5ce:	f001 f913 	bl	800c7f8 <strncmp>
 800b5d2:	9b07      	ldr	r3, [sp, #28]
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d1d7      	bne.n	800b588 <__gethex+0x22c>
 800b5d8:	461e      	mov	r6, r3
 800b5da:	e78b      	b.n	800b4f4 <__gethex+0x198>
 800b5dc:	f04f 0a03 	mov.w	sl, #3
 800b5e0:	e7b8      	b.n	800b554 <__gethex+0x1f8>
 800b5e2:	da0a      	bge.n	800b5fa <__gethex+0x29e>
 800b5e4:	1a37      	subs	r7, r6, r0
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	ee18 0a10 	vmov	r0, s16
 800b5ec:	463a      	mov	r2, r7
 800b5ee:	f000 fcb3 	bl	800bf58 <__lshift>
 800b5f2:	1bed      	subs	r5, r5, r7
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	f100 0914 	add.w	r9, r0, #20
 800b5fa:	f04f 0a00 	mov.w	sl, #0
 800b5fe:	e7ae      	b.n	800b55e <__gethex+0x202>
 800b600:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b604:	42a8      	cmp	r0, r5
 800b606:	dd72      	ble.n	800b6ee <__gethex+0x392>
 800b608:	1b45      	subs	r5, r0, r5
 800b60a:	42ae      	cmp	r6, r5
 800b60c:	dc36      	bgt.n	800b67c <__gethex+0x320>
 800b60e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b612:	2b02      	cmp	r3, #2
 800b614:	d02a      	beq.n	800b66c <__gethex+0x310>
 800b616:	2b03      	cmp	r3, #3
 800b618:	d02c      	beq.n	800b674 <__gethex+0x318>
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d11c      	bne.n	800b658 <__gethex+0x2fc>
 800b61e:	42ae      	cmp	r6, r5
 800b620:	d11a      	bne.n	800b658 <__gethex+0x2fc>
 800b622:	2e01      	cmp	r6, #1
 800b624:	d112      	bne.n	800b64c <__gethex+0x2f0>
 800b626:	9a04      	ldr	r2, [sp, #16]
 800b628:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	2301      	movs	r3, #1
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	f8c9 3000 	str.w	r3, [r9]
 800b636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b638:	2762      	movs	r7, #98	; 0x62
 800b63a:	601c      	str	r4, [r3, #0]
 800b63c:	e723      	b.n	800b486 <__gethex+0x12a>
 800b63e:	bf00      	nop
 800b640:	0800f118 	.word	0x0800f118
 800b644:	0800f09f 	.word	0x0800f09f
 800b648:	0800f0b0 	.word	0x0800f0b0
 800b64c:	1e71      	subs	r1, r6, #1
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 fec6 	bl	800c3e0 <__any_on>
 800b654:	2800      	cmp	r0, #0
 800b656:	d1e6      	bne.n	800b626 <__gethex+0x2ca>
 800b658:	ee18 0a10 	vmov	r0, s16
 800b65c:	4621      	mov	r1, r4
 800b65e:	f000 fa5f 	bl	800bb20 <_Bfree>
 800b662:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b664:	2300      	movs	r3, #0
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	2750      	movs	r7, #80	; 0x50
 800b66a:	e70c      	b.n	800b486 <__gethex+0x12a>
 800b66c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f2      	bne.n	800b658 <__gethex+0x2fc>
 800b672:	e7d8      	b.n	800b626 <__gethex+0x2ca>
 800b674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1d5      	bne.n	800b626 <__gethex+0x2ca>
 800b67a:	e7ed      	b.n	800b658 <__gethex+0x2fc>
 800b67c:	1e6f      	subs	r7, r5, #1
 800b67e:	f1ba 0f00 	cmp.w	sl, #0
 800b682:	d131      	bne.n	800b6e8 <__gethex+0x38c>
 800b684:	b127      	cbz	r7, 800b690 <__gethex+0x334>
 800b686:	4639      	mov	r1, r7
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 fea9 	bl	800c3e0 <__any_on>
 800b68e:	4682      	mov	sl, r0
 800b690:	117b      	asrs	r3, r7, #5
 800b692:	2101      	movs	r1, #1
 800b694:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b698:	f007 071f 	and.w	r7, r7, #31
 800b69c:	fa01 f707 	lsl.w	r7, r1, r7
 800b6a0:	421f      	tst	r7, r3
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	bf18      	it	ne
 800b6a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b6ac:	1b76      	subs	r6, r6, r5
 800b6ae:	f7ff fded 	bl	800b28c <rshift>
 800b6b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b6b6:	2702      	movs	r7, #2
 800b6b8:	f1ba 0f00 	cmp.w	sl, #0
 800b6bc:	d048      	beq.n	800b750 <__gethex+0x3f4>
 800b6be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d015      	beq.n	800b6f2 <__gethex+0x396>
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d017      	beq.n	800b6fa <__gethex+0x39e>
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d109      	bne.n	800b6e2 <__gethex+0x386>
 800b6ce:	f01a 0f02 	tst.w	sl, #2
 800b6d2:	d006      	beq.n	800b6e2 <__gethex+0x386>
 800b6d4:	f8d9 0000 	ldr.w	r0, [r9]
 800b6d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b6dc:	f01a 0f01 	tst.w	sl, #1
 800b6e0:	d10e      	bne.n	800b700 <__gethex+0x3a4>
 800b6e2:	f047 0710 	orr.w	r7, r7, #16
 800b6e6:	e033      	b.n	800b750 <__gethex+0x3f4>
 800b6e8:	f04f 0a01 	mov.w	sl, #1
 800b6ec:	e7d0      	b.n	800b690 <__gethex+0x334>
 800b6ee:	2701      	movs	r7, #1
 800b6f0:	e7e2      	b.n	800b6b8 <__gethex+0x35c>
 800b6f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6f4:	f1c3 0301 	rsb	r3, r3, #1
 800b6f8:	9315      	str	r3, [sp, #84]	; 0x54
 800b6fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0f0      	beq.n	800b6e2 <__gethex+0x386>
 800b700:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b704:	f104 0314 	add.w	r3, r4, #20
 800b708:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b70c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b710:	f04f 0c00 	mov.w	ip, #0
 800b714:	4618      	mov	r0, r3
 800b716:	f853 2b04 	ldr.w	r2, [r3], #4
 800b71a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b71e:	d01c      	beq.n	800b75a <__gethex+0x3fe>
 800b720:	3201      	adds	r2, #1
 800b722:	6002      	str	r2, [r0, #0]
 800b724:	2f02      	cmp	r7, #2
 800b726:	f104 0314 	add.w	r3, r4, #20
 800b72a:	d13f      	bne.n	800b7ac <__gethex+0x450>
 800b72c:	f8d8 2000 	ldr.w	r2, [r8]
 800b730:	3a01      	subs	r2, #1
 800b732:	42b2      	cmp	r2, r6
 800b734:	d10a      	bne.n	800b74c <__gethex+0x3f0>
 800b736:	1171      	asrs	r1, r6, #5
 800b738:	2201      	movs	r2, #1
 800b73a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b73e:	f006 061f 	and.w	r6, r6, #31
 800b742:	fa02 f606 	lsl.w	r6, r2, r6
 800b746:	421e      	tst	r6, r3
 800b748:	bf18      	it	ne
 800b74a:	4617      	movne	r7, r2
 800b74c:	f047 0720 	orr.w	r7, r7, #32
 800b750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b752:	601c      	str	r4, [r3, #0]
 800b754:	9b04      	ldr	r3, [sp, #16]
 800b756:	601d      	str	r5, [r3, #0]
 800b758:	e695      	b.n	800b486 <__gethex+0x12a>
 800b75a:	4299      	cmp	r1, r3
 800b75c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b760:	d8d8      	bhi.n	800b714 <__gethex+0x3b8>
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	459b      	cmp	fp, r3
 800b766:	db19      	blt.n	800b79c <__gethex+0x440>
 800b768:	6861      	ldr	r1, [r4, #4]
 800b76a:	ee18 0a10 	vmov	r0, s16
 800b76e:	3101      	adds	r1, #1
 800b770:	f000 f996 	bl	800baa0 <_Balloc>
 800b774:	4681      	mov	r9, r0
 800b776:	b918      	cbnz	r0, 800b780 <__gethex+0x424>
 800b778:	4b1a      	ldr	r3, [pc, #104]	; (800b7e4 <__gethex+0x488>)
 800b77a:	4602      	mov	r2, r0
 800b77c:	2184      	movs	r1, #132	; 0x84
 800b77e:	e6a8      	b.n	800b4d2 <__gethex+0x176>
 800b780:	6922      	ldr	r2, [r4, #16]
 800b782:	3202      	adds	r2, #2
 800b784:	f104 010c 	add.w	r1, r4, #12
 800b788:	0092      	lsls	r2, r2, #2
 800b78a:	300c      	adds	r0, #12
 800b78c:	f7fc fda4 	bl	80082d8 <memcpy>
 800b790:	4621      	mov	r1, r4
 800b792:	ee18 0a10 	vmov	r0, s16
 800b796:	f000 f9c3 	bl	800bb20 <_Bfree>
 800b79a:	464c      	mov	r4, r9
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	1c5a      	adds	r2, r3, #1
 800b7a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7a4:	6122      	str	r2, [r4, #16]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	615a      	str	r2, [r3, #20]
 800b7aa:	e7bb      	b.n	800b724 <__gethex+0x3c8>
 800b7ac:	6922      	ldr	r2, [r4, #16]
 800b7ae:	455a      	cmp	r2, fp
 800b7b0:	dd0b      	ble.n	800b7ca <__gethex+0x46e>
 800b7b2:	2101      	movs	r1, #1
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f7ff fd69 	bl	800b28c <rshift>
 800b7ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7be:	3501      	adds	r5, #1
 800b7c0:	42ab      	cmp	r3, r5
 800b7c2:	f6ff aed0 	blt.w	800b566 <__gethex+0x20a>
 800b7c6:	2701      	movs	r7, #1
 800b7c8:	e7c0      	b.n	800b74c <__gethex+0x3f0>
 800b7ca:	f016 061f 	ands.w	r6, r6, #31
 800b7ce:	d0fa      	beq.n	800b7c6 <__gethex+0x46a>
 800b7d0:	4453      	add	r3, sl
 800b7d2:	f1c6 0620 	rsb	r6, r6, #32
 800b7d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b7da:	f000 fa53 	bl	800bc84 <__hi0bits>
 800b7de:	42b0      	cmp	r0, r6
 800b7e0:	dbe7      	blt.n	800b7b2 <__gethex+0x456>
 800b7e2:	e7f0      	b.n	800b7c6 <__gethex+0x46a>
 800b7e4:	0800f09f 	.word	0x0800f09f

0800b7e8 <L_shift>:
 800b7e8:	f1c2 0208 	rsb	r2, r2, #8
 800b7ec:	0092      	lsls	r2, r2, #2
 800b7ee:	b570      	push	{r4, r5, r6, lr}
 800b7f0:	f1c2 0620 	rsb	r6, r2, #32
 800b7f4:	6843      	ldr	r3, [r0, #4]
 800b7f6:	6804      	ldr	r4, [r0, #0]
 800b7f8:	fa03 f506 	lsl.w	r5, r3, r6
 800b7fc:	432c      	orrs	r4, r5
 800b7fe:	40d3      	lsrs	r3, r2
 800b800:	6004      	str	r4, [r0, #0]
 800b802:	f840 3f04 	str.w	r3, [r0, #4]!
 800b806:	4288      	cmp	r0, r1
 800b808:	d3f4      	bcc.n	800b7f4 <L_shift+0xc>
 800b80a:	bd70      	pop	{r4, r5, r6, pc}

0800b80c <__match>:
 800b80c:	b530      	push	{r4, r5, lr}
 800b80e:	6803      	ldr	r3, [r0, #0]
 800b810:	3301      	adds	r3, #1
 800b812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b816:	b914      	cbnz	r4, 800b81e <__match+0x12>
 800b818:	6003      	str	r3, [r0, #0]
 800b81a:	2001      	movs	r0, #1
 800b81c:	bd30      	pop	{r4, r5, pc}
 800b81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b822:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b826:	2d19      	cmp	r5, #25
 800b828:	bf98      	it	ls
 800b82a:	3220      	addls	r2, #32
 800b82c:	42a2      	cmp	r2, r4
 800b82e:	d0f0      	beq.n	800b812 <__match+0x6>
 800b830:	2000      	movs	r0, #0
 800b832:	e7f3      	b.n	800b81c <__match+0x10>

0800b834 <__hexnan>:
 800b834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b838:	680b      	ldr	r3, [r1, #0]
 800b83a:	115e      	asrs	r6, r3, #5
 800b83c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b840:	f013 031f 	ands.w	r3, r3, #31
 800b844:	b087      	sub	sp, #28
 800b846:	bf18      	it	ne
 800b848:	3604      	addne	r6, #4
 800b84a:	2500      	movs	r5, #0
 800b84c:	1f37      	subs	r7, r6, #4
 800b84e:	4690      	mov	r8, r2
 800b850:	6802      	ldr	r2, [r0, #0]
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	4682      	mov	sl, r0
 800b856:	f846 5c04 	str.w	r5, [r6, #-4]
 800b85a:	46b9      	mov	r9, r7
 800b85c:	463c      	mov	r4, r7
 800b85e:	9502      	str	r5, [sp, #8]
 800b860:	46ab      	mov	fp, r5
 800b862:	7851      	ldrb	r1, [r2, #1]
 800b864:	1c53      	adds	r3, r2, #1
 800b866:	9303      	str	r3, [sp, #12]
 800b868:	b341      	cbz	r1, 800b8bc <__hexnan+0x88>
 800b86a:	4608      	mov	r0, r1
 800b86c:	9205      	str	r2, [sp, #20]
 800b86e:	9104      	str	r1, [sp, #16]
 800b870:	f7ff fd5e 	bl	800b330 <__hexdig_fun>
 800b874:	2800      	cmp	r0, #0
 800b876:	d14f      	bne.n	800b918 <__hexnan+0xe4>
 800b878:	9904      	ldr	r1, [sp, #16]
 800b87a:	9a05      	ldr	r2, [sp, #20]
 800b87c:	2920      	cmp	r1, #32
 800b87e:	d818      	bhi.n	800b8b2 <__hexnan+0x7e>
 800b880:	9b02      	ldr	r3, [sp, #8]
 800b882:	459b      	cmp	fp, r3
 800b884:	dd13      	ble.n	800b8ae <__hexnan+0x7a>
 800b886:	454c      	cmp	r4, r9
 800b888:	d206      	bcs.n	800b898 <__hexnan+0x64>
 800b88a:	2d07      	cmp	r5, #7
 800b88c:	dc04      	bgt.n	800b898 <__hexnan+0x64>
 800b88e:	462a      	mov	r2, r5
 800b890:	4649      	mov	r1, r9
 800b892:	4620      	mov	r0, r4
 800b894:	f7ff ffa8 	bl	800b7e8 <L_shift>
 800b898:	4544      	cmp	r4, r8
 800b89a:	d950      	bls.n	800b93e <__hexnan+0x10a>
 800b89c:	2300      	movs	r3, #0
 800b89e:	f1a4 0904 	sub.w	r9, r4, #4
 800b8a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8a6:	f8cd b008 	str.w	fp, [sp, #8]
 800b8aa:	464c      	mov	r4, r9
 800b8ac:	461d      	mov	r5, r3
 800b8ae:	9a03      	ldr	r2, [sp, #12]
 800b8b0:	e7d7      	b.n	800b862 <__hexnan+0x2e>
 800b8b2:	2929      	cmp	r1, #41	; 0x29
 800b8b4:	d156      	bne.n	800b964 <__hexnan+0x130>
 800b8b6:	3202      	adds	r2, #2
 800b8b8:	f8ca 2000 	str.w	r2, [sl]
 800b8bc:	f1bb 0f00 	cmp.w	fp, #0
 800b8c0:	d050      	beq.n	800b964 <__hexnan+0x130>
 800b8c2:	454c      	cmp	r4, r9
 800b8c4:	d206      	bcs.n	800b8d4 <__hexnan+0xa0>
 800b8c6:	2d07      	cmp	r5, #7
 800b8c8:	dc04      	bgt.n	800b8d4 <__hexnan+0xa0>
 800b8ca:	462a      	mov	r2, r5
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f7ff ff8a 	bl	800b7e8 <L_shift>
 800b8d4:	4544      	cmp	r4, r8
 800b8d6:	d934      	bls.n	800b942 <__hexnan+0x10e>
 800b8d8:	f1a8 0204 	sub.w	r2, r8, #4
 800b8dc:	4623      	mov	r3, r4
 800b8de:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8e6:	429f      	cmp	r7, r3
 800b8e8:	d2f9      	bcs.n	800b8de <__hexnan+0xaa>
 800b8ea:	1b3b      	subs	r3, r7, r4
 800b8ec:	f023 0303 	bic.w	r3, r3, #3
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	3401      	adds	r4, #1
 800b8f4:	3e03      	subs	r6, #3
 800b8f6:	42b4      	cmp	r4, r6
 800b8f8:	bf88      	it	hi
 800b8fa:	2304      	movhi	r3, #4
 800b8fc:	4443      	add	r3, r8
 800b8fe:	2200      	movs	r2, #0
 800b900:	f843 2b04 	str.w	r2, [r3], #4
 800b904:	429f      	cmp	r7, r3
 800b906:	d2fb      	bcs.n	800b900 <__hexnan+0xcc>
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	b91b      	cbnz	r3, 800b914 <__hexnan+0xe0>
 800b90c:	4547      	cmp	r7, r8
 800b90e:	d127      	bne.n	800b960 <__hexnan+0x12c>
 800b910:	2301      	movs	r3, #1
 800b912:	603b      	str	r3, [r7, #0]
 800b914:	2005      	movs	r0, #5
 800b916:	e026      	b.n	800b966 <__hexnan+0x132>
 800b918:	3501      	adds	r5, #1
 800b91a:	2d08      	cmp	r5, #8
 800b91c:	f10b 0b01 	add.w	fp, fp, #1
 800b920:	dd06      	ble.n	800b930 <__hexnan+0xfc>
 800b922:	4544      	cmp	r4, r8
 800b924:	d9c3      	bls.n	800b8ae <__hexnan+0x7a>
 800b926:	2300      	movs	r3, #0
 800b928:	f844 3c04 	str.w	r3, [r4, #-4]
 800b92c:	2501      	movs	r5, #1
 800b92e:	3c04      	subs	r4, #4
 800b930:	6822      	ldr	r2, [r4, #0]
 800b932:	f000 000f 	and.w	r0, r0, #15
 800b936:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b93a:	6022      	str	r2, [r4, #0]
 800b93c:	e7b7      	b.n	800b8ae <__hexnan+0x7a>
 800b93e:	2508      	movs	r5, #8
 800b940:	e7b5      	b.n	800b8ae <__hexnan+0x7a>
 800b942:	9b01      	ldr	r3, [sp, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d0df      	beq.n	800b908 <__hexnan+0xd4>
 800b948:	f04f 32ff 	mov.w	r2, #4294967295
 800b94c:	f1c3 0320 	rsb	r3, r3, #32
 800b950:	fa22 f303 	lsr.w	r3, r2, r3
 800b954:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b958:	401a      	ands	r2, r3
 800b95a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b95e:	e7d3      	b.n	800b908 <__hexnan+0xd4>
 800b960:	3f04      	subs	r7, #4
 800b962:	e7d1      	b.n	800b908 <__hexnan+0xd4>
 800b964:	2004      	movs	r0, #4
 800b966:	b007      	add	sp, #28
 800b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b96c <_localeconv_r>:
 800b96c:	4800      	ldr	r0, [pc, #0]	; (800b970 <_localeconv_r+0x4>)
 800b96e:	4770      	bx	lr
 800b970:	20000164 	.word	0x20000164

0800b974 <_lseek_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4d07      	ldr	r5, [pc, #28]	; (800b994 <_lseek_r+0x20>)
 800b978:	4604      	mov	r4, r0
 800b97a:	4608      	mov	r0, r1
 800b97c:	4611      	mov	r1, r2
 800b97e:	2200      	movs	r2, #0
 800b980:	602a      	str	r2, [r5, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	f7f5 fcfa 	bl	800137c <_lseek>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_lseek_r+0x1e>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_lseek_r+0x1e>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	20000ee8 	.word	0x20000ee8

0800b998 <__swhatbuf_r>:
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	460e      	mov	r6, r1
 800b99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a0:	2900      	cmp	r1, #0
 800b9a2:	b096      	sub	sp, #88	; 0x58
 800b9a4:	4614      	mov	r4, r2
 800b9a6:	461d      	mov	r5, r3
 800b9a8:	da08      	bge.n	800b9bc <__swhatbuf_r+0x24>
 800b9aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	602a      	str	r2, [r5, #0]
 800b9b2:	061a      	lsls	r2, r3, #24
 800b9b4:	d410      	bmi.n	800b9d8 <__swhatbuf_r+0x40>
 800b9b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9ba:	e00e      	b.n	800b9da <__swhatbuf_r+0x42>
 800b9bc:	466a      	mov	r2, sp
 800b9be:	f000 ff3d 	bl	800c83c <_fstat_r>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	dbf1      	blt.n	800b9aa <__swhatbuf_r+0x12>
 800b9c6:	9a01      	ldr	r2, [sp, #4]
 800b9c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9d0:	425a      	negs	r2, r3
 800b9d2:	415a      	adcs	r2, r3
 800b9d4:	602a      	str	r2, [r5, #0]
 800b9d6:	e7ee      	b.n	800b9b6 <__swhatbuf_r+0x1e>
 800b9d8:	2340      	movs	r3, #64	; 0x40
 800b9da:	2000      	movs	r0, #0
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	b016      	add	sp, #88	; 0x58
 800b9e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b9e4 <__smakebuf_r>:
 800b9e4:	898b      	ldrh	r3, [r1, #12]
 800b9e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9e8:	079d      	lsls	r5, r3, #30
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	d507      	bpl.n	800ba00 <__smakebuf_r+0x1c>
 800b9f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	6123      	str	r3, [r4, #16]
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	6163      	str	r3, [r4, #20]
 800b9fc:	b002      	add	sp, #8
 800b9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ba00:	ab01      	add	r3, sp, #4
 800ba02:	466a      	mov	r2, sp
 800ba04:	f7ff ffc8 	bl	800b998 <__swhatbuf_r>
 800ba08:	9900      	ldr	r1, [sp, #0]
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7fc fd15 	bl	800843c <_malloc_r>
 800ba12:	b948      	cbnz	r0, 800ba28 <__smakebuf_r+0x44>
 800ba14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba18:	059a      	lsls	r2, r3, #22
 800ba1a:	d4ef      	bmi.n	800b9fc <__smakebuf_r+0x18>
 800ba1c:	f023 0303 	bic.w	r3, r3, #3
 800ba20:	f043 0302 	orr.w	r3, r3, #2
 800ba24:	81a3      	strh	r3, [r4, #12]
 800ba26:	e7e3      	b.n	800b9f0 <__smakebuf_r+0xc>
 800ba28:	4b0d      	ldr	r3, [pc, #52]	; (800ba60 <__smakebuf_r+0x7c>)
 800ba2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	6020      	str	r0, [r4, #0]
 800ba30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba34:	81a3      	strh	r3, [r4, #12]
 800ba36:	9b00      	ldr	r3, [sp, #0]
 800ba38:	6163      	str	r3, [r4, #20]
 800ba3a:	9b01      	ldr	r3, [sp, #4]
 800ba3c:	6120      	str	r0, [r4, #16]
 800ba3e:	b15b      	cbz	r3, 800ba58 <__smakebuf_r+0x74>
 800ba40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba44:	4630      	mov	r0, r6
 800ba46:	f000 ff0b 	bl	800c860 <_isatty_r>
 800ba4a:	b128      	cbz	r0, 800ba58 <__smakebuf_r+0x74>
 800ba4c:	89a3      	ldrh	r3, [r4, #12]
 800ba4e:	f023 0303 	bic.w	r3, r3, #3
 800ba52:	f043 0301 	orr.w	r3, r3, #1
 800ba56:	81a3      	strh	r3, [r4, #12]
 800ba58:	89a0      	ldrh	r0, [r4, #12]
 800ba5a:	4305      	orrs	r5, r0
 800ba5c:	81a5      	strh	r5, [r4, #12]
 800ba5e:	e7cd      	b.n	800b9fc <__smakebuf_r+0x18>
 800ba60:	08007f45 	.word	0x08007f45

0800ba64 <__ascii_mbtowc>:
 800ba64:	b082      	sub	sp, #8
 800ba66:	b901      	cbnz	r1, 800ba6a <__ascii_mbtowc+0x6>
 800ba68:	a901      	add	r1, sp, #4
 800ba6a:	b142      	cbz	r2, 800ba7e <__ascii_mbtowc+0x1a>
 800ba6c:	b14b      	cbz	r3, 800ba82 <__ascii_mbtowc+0x1e>
 800ba6e:	7813      	ldrb	r3, [r2, #0]
 800ba70:	600b      	str	r3, [r1, #0]
 800ba72:	7812      	ldrb	r2, [r2, #0]
 800ba74:	1e10      	subs	r0, r2, #0
 800ba76:	bf18      	it	ne
 800ba78:	2001      	movne	r0, #1
 800ba7a:	b002      	add	sp, #8
 800ba7c:	4770      	bx	lr
 800ba7e:	4610      	mov	r0, r2
 800ba80:	e7fb      	b.n	800ba7a <__ascii_mbtowc+0x16>
 800ba82:	f06f 0001 	mvn.w	r0, #1
 800ba86:	e7f8      	b.n	800ba7a <__ascii_mbtowc+0x16>

0800ba88 <__malloc_lock>:
 800ba88:	4801      	ldr	r0, [pc, #4]	; (800ba90 <__malloc_lock+0x8>)
 800ba8a:	f7fc bc12 	b.w	80082b2 <__retarget_lock_acquire_recursive>
 800ba8e:	bf00      	nop
 800ba90:	20000edc 	.word	0x20000edc

0800ba94 <__malloc_unlock>:
 800ba94:	4801      	ldr	r0, [pc, #4]	; (800ba9c <__malloc_unlock+0x8>)
 800ba96:	f7fc bc0d 	b.w	80082b4 <__retarget_lock_release_recursive>
 800ba9a:	bf00      	nop
 800ba9c:	20000edc 	.word	0x20000edc

0800baa0 <_Balloc>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800baa4:	4604      	mov	r4, r0
 800baa6:	460d      	mov	r5, r1
 800baa8:	b976      	cbnz	r6, 800bac8 <_Balloc+0x28>
 800baaa:	2010      	movs	r0, #16
 800baac:	f7fc fc04 	bl	80082b8 <malloc>
 800bab0:	4602      	mov	r2, r0
 800bab2:	6260      	str	r0, [r4, #36]	; 0x24
 800bab4:	b920      	cbnz	r0, 800bac0 <_Balloc+0x20>
 800bab6:	4b18      	ldr	r3, [pc, #96]	; (800bb18 <_Balloc+0x78>)
 800bab8:	4818      	ldr	r0, [pc, #96]	; (800bb1c <_Balloc+0x7c>)
 800baba:	2166      	movs	r1, #102	; 0x66
 800babc:	f7fc f91e 	bl	8007cfc <__assert_func>
 800bac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bac4:	6006      	str	r6, [r0, #0]
 800bac6:	60c6      	str	r6, [r0, #12]
 800bac8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800baca:	68f3      	ldr	r3, [r6, #12]
 800bacc:	b183      	cbz	r3, 800baf0 <_Balloc+0x50>
 800bace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bad6:	b9b8      	cbnz	r0, 800bb08 <_Balloc+0x68>
 800bad8:	2101      	movs	r1, #1
 800bada:	fa01 f605 	lsl.w	r6, r1, r5
 800bade:	1d72      	adds	r2, r6, #5
 800bae0:	0092      	lsls	r2, r2, #2
 800bae2:	4620      	mov	r0, r4
 800bae4:	f7fc fc28 	bl	8008338 <_calloc_r>
 800bae8:	b160      	cbz	r0, 800bb04 <_Balloc+0x64>
 800baea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baee:	e00e      	b.n	800bb0e <_Balloc+0x6e>
 800baf0:	2221      	movs	r2, #33	; 0x21
 800baf2:	2104      	movs	r1, #4
 800baf4:	4620      	mov	r0, r4
 800baf6:	f7fc fc1f 	bl	8008338 <_calloc_r>
 800bafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bafc:	60f0      	str	r0, [r6, #12]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1e4      	bne.n	800bace <_Balloc+0x2e>
 800bb04:	2000      	movs	r0, #0
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	6802      	ldr	r2, [r0, #0]
 800bb0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb14:	e7f7      	b.n	800bb06 <_Balloc+0x66>
 800bb16:	bf00      	nop
 800bb18:	0800f02d 	.word	0x0800f02d
 800bb1c:	0800f12c 	.word	0x0800f12c

0800bb20 <_Bfree>:
 800bb20:	b570      	push	{r4, r5, r6, lr}
 800bb22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb24:	4605      	mov	r5, r0
 800bb26:	460c      	mov	r4, r1
 800bb28:	b976      	cbnz	r6, 800bb48 <_Bfree+0x28>
 800bb2a:	2010      	movs	r0, #16
 800bb2c:	f7fc fbc4 	bl	80082b8 <malloc>
 800bb30:	4602      	mov	r2, r0
 800bb32:	6268      	str	r0, [r5, #36]	; 0x24
 800bb34:	b920      	cbnz	r0, 800bb40 <_Bfree+0x20>
 800bb36:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <_Bfree+0x3c>)
 800bb38:	4809      	ldr	r0, [pc, #36]	; (800bb60 <_Bfree+0x40>)
 800bb3a:	218a      	movs	r1, #138	; 0x8a
 800bb3c:	f7fc f8de 	bl	8007cfc <__assert_func>
 800bb40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb44:	6006      	str	r6, [r0, #0]
 800bb46:	60c6      	str	r6, [r0, #12]
 800bb48:	b13c      	cbz	r4, 800bb5a <_Bfree+0x3a>
 800bb4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb4c:	6862      	ldr	r2, [r4, #4]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb54:	6021      	str	r1, [r4, #0]
 800bb56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb5a:	bd70      	pop	{r4, r5, r6, pc}
 800bb5c:	0800f02d 	.word	0x0800f02d
 800bb60:	0800f12c 	.word	0x0800f12c

0800bb64 <__multadd>:
 800bb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb68:	690d      	ldr	r5, [r1, #16]
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	461e      	mov	r6, r3
 800bb70:	f101 0c14 	add.w	ip, r1, #20
 800bb74:	2000      	movs	r0, #0
 800bb76:	f8dc 3000 	ldr.w	r3, [ip]
 800bb7a:	b299      	uxth	r1, r3
 800bb7c:	fb02 6101 	mla	r1, r2, r1, r6
 800bb80:	0c1e      	lsrs	r6, r3, #16
 800bb82:	0c0b      	lsrs	r3, r1, #16
 800bb84:	fb02 3306 	mla	r3, r2, r6, r3
 800bb88:	b289      	uxth	r1, r1
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb90:	4285      	cmp	r5, r0
 800bb92:	f84c 1b04 	str.w	r1, [ip], #4
 800bb96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb9a:	dcec      	bgt.n	800bb76 <__multadd+0x12>
 800bb9c:	b30e      	cbz	r6, 800bbe2 <__multadd+0x7e>
 800bb9e:	68a3      	ldr	r3, [r4, #8]
 800bba0:	42ab      	cmp	r3, r5
 800bba2:	dc19      	bgt.n	800bbd8 <__multadd+0x74>
 800bba4:	6861      	ldr	r1, [r4, #4]
 800bba6:	4638      	mov	r0, r7
 800bba8:	3101      	adds	r1, #1
 800bbaa:	f7ff ff79 	bl	800baa0 <_Balloc>
 800bbae:	4680      	mov	r8, r0
 800bbb0:	b928      	cbnz	r0, 800bbbe <__multadd+0x5a>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <__multadd+0x84>)
 800bbb6:	480d      	ldr	r0, [pc, #52]	; (800bbec <__multadd+0x88>)
 800bbb8:	21b5      	movs	r1, #181	; 0xb5
 800bbba:	f7fc f89f 	bl	8007cfc <__assert_func>
 800bbbe:	6922      	ldr	r2, [r4, #16]
 800bbc0:	3202      	adds	r2, #2
 800bbc2:	f104 010c 	add.w	r1, r4, #12
 800bbc6:	0092      	lsls	r2, r2, #2
 800bbc8:	300c      	adds	r0, #12
 800bbca:	f7fc fb85 	bl	80082d8 <memcpy>
 800bbce:	4621      	mov	r1, r4
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	f7ff ffa5 	bl	800bb20 <_Bfree>
 800bbd6:	4644      	mov	r4, r8
 800bbd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbdc:	3501      	adds	r5, #1
 800bbde:	615e      	str	r6, [r3, #20]
 800bbe0:	6125      	str	r5, [r4, #16]
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe8:	0800f09f 	.word	0x0800f09f
 800bbec:	0800f12c 	.word	0x0800f12c

0800bbf0 <__s2b>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	4615      	mov	r5, r2
 800bbf8:	461f      	mov	r7, r3
 800bbfa:	2209      	movs	r2, #9
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	4606      	mov	r6, r0
 800bc00:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc04:	2100      	movs	r1, #0
 800bc06:	2201      	movs	r2, #1
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	db09      	blt.n	800bc20 <__s2b+0x30>
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7ff ff47 	bl	800baa0 <_Balloc>
 800bc12:	b940      	cbnz	r0, 800bc26 <__s2b+0x36>
 800bc14:	4602      	mov	r2, r0
 800bc16:	4b19      	ldr	r3, [pc, #100]	; (800bc7c <__s2b+0x8c>)
 800bc18:	4819      	ldr	r0, [pc, #100]	; (800bc80 <__s2b+0x90>)
 800bc1a:	21ce      	movs	r1, #206	; 0xce
 800bc1c:	f7fc f86e 	bl	8007cfc <__assert_func>
 800bc20:	0052      	lsls	r2, r2, #1
 800bc22:	3101      	adds	r1, #1
 800bc24:	e7f0      	b.n	800bc08 <__s2b+0x18>
 800bc26:	9b08      	ldr	r3, [sp, #32]
 800bc28:	6143      	str	r3, [r0, #20]
 800bc2a:	2d09      	cmp	r5, #9
 800bc2c:	f04f 0301 	mov.w	r3, #1
 800bc30:	6103      	str	r3, [r0, #16]
 800bc32:	dd16      	ble.n	800bc62 <__s2b+0x72>
 800bc34:	f104 0909 	add.w	r9, r4, #9
 800bc38:	46c8      	mov	r8, r9
 800bc3a:	442c      	add	r4, r5
 800bc3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc40:	4601      	mov	r1, r0
 800bc42:	3b30      	subs	r3, #48	; 0x30
 800bc44:	220a      	movs	r2, #10
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7ff ff8c 	bl	800bb64 <__multadd>
 800bc4c:	45a0      	cmp	r8, r4
 800bc4e:	d1f5      	bne.n	800bc3c <__s2b+0x4c>
 800bc50:	f1a5 0408 	sub.w	r4, r5, #8
 800bc54:	444c      	add	r4, r9
 800bc56:	1b2d      	subs	r5, r5, r4
 800bc58:	1963      	adds	r3, r4, r5
 800bc5a:	42bb      	cmp	r3, r7
 800bc5c:	db04      	blt.n	800bc68 <__s2b+0x78>
 800bc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc62:	340a      	adds	r4, #10
 800bc64:	2509      	movs	r5, #9
 800bc66:	e7f6      	b.n	800bc56 <__s2b+0x66>
 800bc68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	3b30      	subs	r3, #48	; 0x30
 800bc70:	220a      	movs	r2, #10
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7ff ff76 	bl	800bb64 <__multadd>
 800bc78:	e7ee      	b.n	800bc58 <__s2b+0x68>
 800bc7a:	bf00      	nop
 800bc7c:	0800f09f 	.word	0x0800f09f
 800bc80:	0800f12c 	.word	0x0800f12c

0800bc84 <__hi0bits>:
 800bc84:	0c03      	lsrs	r3, r0, #16
 800bc86:	041b      	lsls	r3, r3, #16
 800bc88:	b9d3      	cbnz	r3, 800bcc0 <__hi0bits+0x3c>
 800bc8a:	0400      	lsls	r0, r0, #16
 800bc8c:	2310      	movs	r3, #16
 800bc8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc92:	bf04      	itt	eq
 800bc94:	0200      	lsleq	r0, r0, #8
 800bc96:	3308      	addeq	r3, #8
 800bc98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc9c:	bf04      	itt	eq
 800bc9e:	0100      	lsleq	r0, r0, #4
 800bca0:	3304      	addeq	r3, #4
 800bca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bca6:	bf04      	itt	eq
 800bca8:	0080      	lsleq	r0, r0, #2
 800bcaa:	3302      	addeq	r3, #2
 800bcac:	2800      	cmp	r0, #0
 800bcae:	db05      	blt.n	800bcbc <__hi0bits+0x38>
 800bcb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcb4:	f103 0301 	add.w	r3, r3, #1
 800bcb8:	bf08      	it	eq
 800bcba:	2320      	moveq	r3, #32
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	4770      	bx	lr
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	e7e4      	b.n	800bc8e <__hi0bits+0xa>

0800bcc4 <__lo0bits>:
 800bcc4:	6803      	ldr	r3, [r0, #0]
 800bcc6:	f013 0207 	ands.w	r2, r3, #7
 800bcca:	4601      	mov	r1, r0
 800bccc:	d00b      	beq.n	800bce6 <__lo0bits+0x22>
 800bcce:	07da      	lsls	r2, r3, #31
 800bcd0:	d423      	bmi.n	800bd1a <__lo0bits+0x56>
 800bcd2:	0798      	lsls	r0, r3, #30
 800bcd4:	bf49      	itett	mi
 800bcd6:	085b      	lsrmi	r3, r3, #1
 800bcd8:	089b      	lsrpl	r3, r3, #2
 800bcda:	2001      	movmi	r0, #1
 800bcdc:	600b      	strmi	r3, [r1, #0]
 800bcde:	bf5c      	itt	pl
 800bce0:	600b      	strpl	r3, [r1, #0]
 800bce2:	2002      	movpl	r0, #2
 800bce4:	4770      	bx	lr
 800bce6:	b298      	uxth	r0, r3
 800bce8:	b9a8      	cbnz	r0, 800bd16 <__lo0bits+0x52>
 800bcea:	0c1b      	lsrs	r3, r3, #16
 800bcec:	2010      	movs	r0, #16
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	b90a      	cbnz	r2, 800bcf6 <__lo0bits+0x32>
 800bcf2:	3008      	adds	r0, #8
 800bcf4:	0a1b      	lsrs	r3, r3, #8
 800bcf6:	071a      	lsls	r2, r3, #28
 800bcf8:	bf04      	itt	eq
 800bcfa:	091b      	lsreq	r3, r3, #4
 800bcfc:	3004      	addeq	r0, #4
 800bcfe:	079a      	lsls	r2, r3, #30
 800bd00:	bf04      	itt	eq
 800bd02:	089b      	lsreq	r3, r3, #2
 800bd04:	3002      	addeq	r0, #2
 800bd06:	07da      	lsls	r2, r3, #31
 800bd08:	d403      	bmi.n	800bd12 <__lo0bits+0x4e>
 800bd0a:	085b      	lsrs	r3, r3, #1
 800bd0c:	f100 0001 	add.w	r0, r0, #1
 800bd10:	d005      	beq.n	800bd1e <__lo0bits+0x5a>
 800bd12:	600b      	str	r3, [r1, #0]
 800bd14:	4770      	bx	lr
 800bd16:	4610      	mov	r0, r2
 800bd18:	e7e9      	b.n	800bcee <__lo0bits+0x2a>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	4770      	bx	lr
 800bd1e:	2020      	movs	r0, #32
 800bd20:	4770      	bx	lr
	...

0800bd24 <__i2b>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	460c      	mov	r4, r1
 800bd28:	2101      	movs	r1, #1
 800bd2a:	f7ff feb9 	bl	800baa0 <_Balloc>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	b928      	cbnz	r0, 800bd3e <__i2b+0x1a>
 800bd32:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <__i2b+0x24>)
 800bd34:	4805      	ldr	r0, [pc, #20]	; (800bd4c <__i2b+0x28>)
 800bd36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd3a:	f7fb ffdf 	bl	8007cfc <__assert_func>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	6144      	str	r4, [r0, #20]
 800bd42:	6103      	str	r3, [r0, #16]
 800bd44:	bd10      	pop	{r4, pc}
 800bd46:	bf00      	nop
 800bd48:	0800f09f 	.word	0x0800f09f
 800bd4c:	0800f12c 	.word	0x0800f12c

0800bd50 <__multiply>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	4691      	mov	r9, r2
 800bd56:	690a      	ldr	r2, [r1, #16]
 800bd58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	bfb8      	it	lt
 800bd60:	460b      	movlt	r3, r1
 800bd62:	460c      	mov	r4, r1
 800bd64:	bfbc      	itt	lt
 800bd66:	464c      	movlt	r4, r9
 800bd68:	4699      	movlt	r9, r3
 800bd6a:	6927      	ldr	r7, [r4, #16]
 800bd6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd70:	68a3      	ldr	r3, [r4, #8]
 800bd72:	6861      	ldr	r1, [r4, #4]
 800bd74:	eb07 060a 	add.w	r6, r7, sl
 800bd78:	42b3      	cmp	r3, r6
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	bfb8      	it	lt
 800bd7e:	3101      	addlt	r1, #1
 800bd80:	f7ff fe8e 	bl	800baa0 <_Balloc>
 800bd84:	b930      	cbnz	r0, 800bd94 <__multiply+0x44>
 800bd86:	4602      	mov	r2, r0
 800bd88:	4b44      	ldr	r3, [pc, #272]	; (800be9c <__multiply+0x14c>)
 800bd8a:	4845      	ldr	r0, [pc, #276]	; (800bea0 <__multiply+0x150>)
 800bd8c:	f240 115d 	movw	r1, #349	; 0x15d
 800bd90:	f7fb ffb4 	bl	8007cfc <__assert_func>
 800bd94:	f100 0514 	add.w	r5, r0, #20
 800bd98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd9c:	462b      	mov	r3, r5
 800bd9e:	2200      	movs	r2, #0
 800bda0:	4543      	cmp	r3, r8
 800bda2:	d321      	bcc.n	800bde8 <__multiply+0x98>
 800bda4:	f104 0314 	add.w	r3, r4, #20
 800bda8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bdac:	f109 0314 	add.w	r3, r9, #20
 800bdb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bdb4:	9202      	str	r2, [sp, #8]
 800bdb6:	1b3a      	subs	r2, r7, r4
 800bdb8:	3a15      	subs	r2, #21
 800bdba:	f022 0203 	bic.w	r2, r2, #3
 800bdbe:	3204      	adds	r2, #4
 800bdc0:	f104 0115 	add.w	r1, r4, #21
 800bdc4:	428f      	cmp	r7, r1
 800bdc6:	bf38      	it	cc
 800bdc8:	2204      	movcc	r2, #4
 800bdca:	9201      	str	r2, [sp, #4]
 800bdcc:	9a02      	ldr	r2, [sp, #8]
 800bdce:	9303      	str	r3, [sp, #12]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d80c      	bhi.n	800bdee <__multiply+0x9e>
 800bdd4:	2e00      	cmp	r6, #0
 800bdd6:	dd03      	ble.n	800bde0 <__multiply+0x90>
 800bdd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d05a      	beq.n	800be96 <__multiply+0x146>
 800bde0:	6106      	str	r6, [r0, #16]
 800bde2:	b005      	add	sp, #20
 800bde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde8:	f843 2b04 	str.w	r2, [r3], #4
 800bdec:	e7d8      	b.n	800bda0 <__multiply+0x50>
 800bdee:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdf2:	f1ba 0f00 	cmp.w	sl, #0
 800bdf6:	d024      	beq.n	800be42 <__multiply+0xf2>
 800bdf8:	f104 0e14 	add.w	lr, r4, #20
 800bdfc:	46a9      	mov	r9, r5
 800bdfe:	f04f 0c00 	mov.w	ip, #0
 800be02:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be06:	f8d9 1000 	ldr.w	r1, [r9]
 800be0a:	fa1f fb82 	uxth.w	fp, r2
 800be0e:	b289      	uxth	r1, r1
 800be10:	fb0a 110b 	mla	r1, sl, fp, r1
 800be14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800be18:	f8d9 2000 	ldr.w	r2, [r9]
 800be1c:	4461      	add	r1, ip
 800be1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be22:	fb0a c20b 	mla	r2, sl, fp, ip
 800be26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be2a:	b289      	uxth	r1, r1
 800be2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be30:	4577      	cmp	r7, lr
 800be32:	f849 1b04 	str.w	r1, [r9], #4
 800be36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be3a:	d8e2      	bhi.n	800be02 <__multiply+0xb2>
 800be3c:	9a01      	ldr	r2, [sp, #4]
 800be3e:	f845 c002 	str.w	ip, [r5, r2]
 800be42:	9a03      	ldr	r2, [sp, #12]
 800be44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be48:	3304      	adds	r3, #4
 800be4a:	f1b9 0f00 	cmp.w	r9, #0
 800be4e:	d020      	beq.n	800be92 <__multiply+0x142>
 800be50:	6829      	ldr	r1, [r5, #0]
 800be52:	f104 0c14 	add.w	ip, r4, #20
 800be56:	46ae      	mov	lr, r5
 800be58:	f04f 0a00 	mov.w	sl, #0
 800be5c:	f8bc b000 	ldrh.w	fp, [ip]
 800be60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be64:	fb09 220b 	mla	r2, r9, fp, r2
 800be68:	4492      	add	sl, r2
 800be6a:	b289      	uxth	r1, r1
 800be6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be70:	f84e 1b04 	str.w	r1, [lr], #4
 800be74:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be78:	f8be 1000 	ldrh.w	r1, [lr]
 800be7c:	0c12      	lsrs	r2, r2, #16
 800be7e:	fb09 1102 	mla	r1, r9, r2, r1
 800be82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be86:	4567      	cmp	r7, ip
 800be88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be8c:	d8e6      	bhi.n	800be5c <__multiply+0x10c>
 800be8e:	9a01      	ldr	r2, [sp, #4]
 800be90:	50a9      	str	r1, [r5, r2]
 800be92:	3504      	adds	r5, #4
 800be94:	e79a      	b.n	800bdcc <__multiply+0x7c>
 800be96:	3e01      	subs	r6, #1
 800be98:	e79c      	b.n	800bdd4 <__multiply+0x84>
 800be9a:	bf00      	nop
 800be9c:	0800f09f 	.word	0x0800f09f
 800bea0:	0800f12c 	.word	0x0800f12c

0800bea4 <__pow5mult>:
 800bea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea8:	4615      	mov	r5, r2
 800beaa:	f012 0203 	ands.w	r2, r2, #3
 800beae:	4606      	mov	r6, r0
 800beb0:	460f      	mov	r7, r1
 800beb2:	d007      	beq.n	800bec4 <__pow5mult+0x20>
 800beb4:	4c25      	ldr	r4, [pc, #148]	; (800bf4c <__pow5mult+0xa8>)
 800beb6:	3a01      	subs	r2, #1
 800beb8:	2300      	movs	r3, #0
 800beba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bebe:	f7ff fe51 	bl	800bb64 <__multadd>
 800bec2:	4607      	mov	r7, r0
 800bec4:	10ad      	asrs	r5, r5, #2
 800bec6:	d03d      	beq.n	800bf44 <__pow5mult+0xa0>
 800bec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800beca:	b97c      	cbnz	r4, 800beec <__pow5mult+0x48>
 800becc:	2010      	movs	r0, #16
 800bece:	f7fc f9f3 	bl	80082b8 <malloc>
 800bed2:	4602      	mov	r2, r0
 800bed4:	6270      	str	r0, [r6, #36]	; 0x24
 800bed6:	b928      	cbnz	r0, 800bee4 <__pow5mult+0x40>
 800bed8:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <__pow5mult+0xac>)
 800beda:	481e      	ldr	r0, [pc, #120]	; (800bf54 <__pow5mult+0xb0>)
 800bedc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bee0:	f7fb ff0c 	bl	8007cfc <__assert_func>
 800bee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bee8:	6004      	str	r4, [r0, #0]
 800beea:	60c4      	str	r4, [r0, #12]
 800beec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bef4:	b94c      	cbnz	r4, 800bf0a <__pow5mult+0x66>
 800bef6:	f240 2171 	movw	r1, #625	; 0x271
 800befa:	4630      	mov	r0, r6
 800befc:	f7ff ff12 	bl	800bd24 <__i2b>
 800bf00:	2300      	movs	r3, #0
 800bf02:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf06:	4604      	mov	r4, r0
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	f04f 0900 	mov.w	r9, #0
 800bf0e:	07eb      	lsls	r3, r5, #31
 800bf10:	d50a      	bpl.n	800bf28 <__pow5mult+0x84>
 800bf12:	4639      	mov	r1, r7
 800bf14:	4622      	mov	r2, r4
 800bf16:	4630      	mov	r0, r6
 800bf18:	f7ff ff1a 	bl	800bd50 <__multiply>
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	4680      	mov	r8, r0
 800bf20:	4630      	mov	r0, r6
 800bf22:	f7ff fdfd 	bl	800bb20 <_Bfree>
 800bf26:	4647      	mov	r7, r8
 800bf28:	106d      	asrs	r5, r5, #1
 800bf2a:	d00b      	beq.n	800bf44 <__pow5mult+0xa0>
 800bf2c:	6820      	ldr	r0, [r4, #0]
 800bf2e:	b938      	cbnz	r0, 800bf40 <__pow5mult+0x9c>
 800bf30:	4622      	mov	r2, r4
 800bf32:	4621      	mov	r1, r4
 800bf34:	4630      	mov	r0, r6
 800bf36:	f7ff ff0b 	bl	800bd50 <__multiply>
 800bf3a:	6020      	str	r0, [r4, #0]
 800bf3c:	f8c0 9000 	str.w	r9, [r0]
 800bf40:	4604      	mov	r4, r0
 800bf42:	e7e4      	b.n	800bf0e <__pow5mult+0x6a>
 800bf44:	4638      	mov	r0, r7
 800bf46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf4a:	bf00      	nop
 800bf4c:	0800f278 	.word	0x0800f278
 800bf50:	0800f02d 	.word	0x0800f02d
 800bf54:	0800f12c 	.word	0x0800f12c

0800bf58 <__lshift>:
 800bf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	6849      	ldr	r1, [r1, #4]
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	4607      	mov	r7, r0
 800bf6a:	4691      	mov	r9, r2
 800bf6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf70:	f108 0601 	add.w	r6, r8, #1
 800bf74:	42b3      	cmp	r3, r6
 800bf76:	db0b      	blt.n	800bf90 <__lshift+0x38>
 800bf78:	4638      	mov	r0, r7
 800bf7a:	f7ff fd91 	bl	800baa0 <_Balloc>
 800bf7e:	4605      	mov	r5, r0
 800bf80:	b948      	cbnz	r0, 800bf96 <__lshift+0x3e>
 800bf82:	4602      	mov	r2, r0
 800bf84:	4b2a      	ldr	r3, [pc, #168]	; (800c030 <__lshift+0xd8>)
 800bf86:	482b      	ldr	r0, [pc, #172]	; (800c034 <__lshift+0xdc>)
 800bf88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf8c:	f7fb feb6 	bl	8007cfc <__assert_func>
 800bf90:	3101      	adds	r1, #1
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	e7ee      	b.n	800bf74 <__lshift+0x1c>
 800bf96:	2300      	movs	r3, #0
 800bf98:	f100 0114 	add.w	r1, r0, #20
 800bf9c:	f100 0210 	add.w	r2, r0, #16
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	4553      	cmp	r3, sl
 800bfa4:	db37      	blt.n	800c016 <__lshift+0xbe>
 800bfa6:	6920      	ldr	r0, [r4, #16]
 800bfa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfac:	f104 0314 	add.w	r3, r4, #20
 800bfb0:	f019 091f 	ands.w	r9, r9, #31
 800bfb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bfbc:	d02f      	beq.n	800c01e <__lshift+0xc6>
 800bfbe:	f1c9 0e20 	rsb	lr, r9, #32
 800bfc2:	468a      	mov	sl, r1
 800bfc4:	f04f 0c00 	mov.w	ip, #0
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	fa02 f209 	lsl.w	r2, r2, r9
 800bfce:	ea42 020c 	orr.w	r2, r2, ip
 800bfd2:	f84a 2b04 	str.w	r2, [sl], #4
 800bfd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfda:	4298      	cmp	r0, r3
 800bfdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bfe0:	d8f2      	bhi.n	800bfc8 <__lshift+0x70>
 800bfe2:	1b03      	subs	r3, r0, r4
 800bfe4:	3b15      	subs	r3, #21
 800bfe6:	f023 0303 	bic.w	r3, r3, #3
 800bfea:	3304      	adds	r3, #4
 800bfec:	f104 0215 	add.w	r2, r4, #21
 800bff0:	4290      	cmp	r0, r2
 800bff2:	bf38      	it	cc
 800bff4:	2304      	movcc	r3, #4
 800bff6:	f841 c003 	str.w	ip, [r1, r3]
 800bffa:	f1bc 0f00 	cmp.w	ip, #0
 800bffe:	d001      	beq.n	800c004 <__lshift+0xac>
 800c000:	f108 0602 	add.w	r6, r8, #2
 800c004:	3e01      	subs	r6, #1
 800c006:	4638      	mov	r0, r7
 800c008:	612e      	str	r6, [r5, #16]
 800c00a:	4621      	mov	r1, r4
 800c00c:	f7ff fd88 	bl	800bb20 <_Bfree>
 800c010:	4628      	mov	r0, r5
 800c012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c016:	f842 0f04 	str.w	r0, [r2, #4]!
 800c01a:	3301      	adds	r3, #1
 800c01c:	e7c1      	b.n	800bfa2 <__lshift+0x4a>
 800c01e:	3904      	subs	r1, #4
 800c020:	f853 2b04 	ldr.w	r2, [r3], #4
 800c024:	f841 2f04 	str.w	r2, [r1, #4]!
 800c028:	4298      	cmp	r0, r3
 800c02a:	d8f9      	bhi.n	800c020 <__lshift+0xc8>
 800c02c:	e7ea      	b.n	800c004 <__lshift+0xac>
 800c02e:	bf00      	nop
 800c030:	0800f09f 	.word	0x0800f09f
 800c034:	0800f12c 	.word	0x0800f12c

0800c038 <__mcmp>:
 800c038:	b530      	push	{r4, r5, lr}
 800c03a:	6902      	ldr	r2, [r0, #16]
 800c03c:	690c      	ldr	r4, [r1, #16]
 800c03e:	1b12      	subs	r2, r2, r4
 800c040:	d10e      	bne.n	800c060 <__mcmp+0x28>
 800c042:	f100 0314 	add.w	r3, r0, #20
 800c046:	3114      	adds	r1, #20
 800c048:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c04c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c050:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c054:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c058:	42a5      	cmp	r5, r4
 800c05a:	d003      	beq.n	800c064 <__mcmp+0x2c>
 800c05c:	d305      	bcc.n	800c06a <__mcmp+0x32>
 800c05e:	2201      	movs	r2, #1
 800c060:	4610      	mov	r0, r2
 800c062:	bd30      	pop	{r4, r5, pc}
 800c064:	4283      	cmp	r3, r0
 800c066:	d3f3      	bcc.n	800c050 <__mcmp+0x18>
 800c068:	e7fa      	b.n	800c060 <__mcmp+0x28>
 800c06a:	f04f 32ff 	mov.w	r2, #4294967295
 800c06e:	e7f7      	b.n	800c060 <__mcmp+0x28>

0800c070 <__mdiff>:
 800c070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	460c      	mov	r4, r1
 800c076:	4606      	mov	r6, r0
 800c078:	4611      	mov	r1, r2
 800c07a:	4620      	mov	r0, r4
 800c07c:	4690      	mov	r8, r2
 800c07e:	f7ff ffdb 	bl	800c038 <__mcmp>
 800c082:	1e05      	subs	r5, r0, #0
 800c084:	d110      	bne.n	800c0a8 <__mdiff+0x38>
 800c086:	4629      	mov	r1, r5
 800c088:	4630      	mov	r0, r6
 800c08a:	f7ff fd09 	bl	800baa0 <_Balloc>
 800c08e:	b930      	cbnz	r0, 800c09e <__mdiff+0x2e>
 800c090:	4b3a      	ldr	r3, [pc, #232]	; (800c17c <__mdiff+0x10c>)
 800c092:	4602      	mov	r2, r0
 800c094:	f240 2132 	movw	r1, #562	; 0x232
 800c098:	4839      	ldr	r0, [pc, #228]	; (800c180 <__mdiff+0x110>)
 800c09a:	f7fb fe2f 	bl	8007cfc <__assert_func>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a8:	bfa4      	itt	ge
 800c0aa:	4643      	movge	r3, r8
 800c0ac:	46a0      	movge	r8, r4
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c0b4:	bfa6      	itte	ge
 800c0b6:	461c      	movge	r4, r3
 800c0b8:	2500      	movge	r5, #0
 800c0ba:	2501      	movlt	r5, #1
 800c0bc:	f7ff fcf0 	bl	800baa0 <_Balloc>
 800c0c0:	b920      	cbnz	r0, 800c0cc <__mdiff+0x5c>
 800c0c2:	4b2e      	ldr	r3, [pc, #184]	; (800c17c <__mdiff+0x10c>)
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0ca:	e7e5      	b.n	800c098 <__mdiff+0x28>
 800c0cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c0d0:	6926      	ldr	r6, [r4, #16]
 800c0d2:	60c5      	str	r5, [r0, #12]
 800c0d4:	f104 0914 	add.w	r9, r4, #20
 800c0d8:	f108 0514 	add.w	r5, r8, #20
 800c0dc:	f100 0e14 	add.w	lr, r0, #20
 800c0e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c0e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0e8:	f108 0210 	add.w	r2, r8, #16
 800c0ec:	46f2      	mov	sl, lr
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0f8:	fa1f f883 	uxth.w	r8, r3
 800c0fc:	fa11 f18b 	uxtah	r1, r1, fp
 800c100:	0c1b      	lsrs	r3, r3, #16
 800c102:	eba1 0808 	sub.w	r8, r1, r8
 800c106:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c10a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c10e:	fa1f f888 	uxth.w	r8, r8
 800c112:	1419      	asrs	r1, r3, #16
 800c114:	454e      	cmp	r6, r9
 800c116:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c11a:	f84a 3b04 	str.w	r3, [sl], #4
 800c11e:	d8e7      	bhi.n	800c0f0 <__mdiff+0x80>
 800c120:	1b33      	subs	r3, r6, r4
 800c122:	3b15      	subs	r3, #21
 800c124:	f023 0303 	bic.w	r3, r3, #3
 800c128:	3304      	adds	r3, #4
 800c12a:	3415      	adds	r4, #21
 800c12c:	42a6      	cmp	r6, r4
 800c12e:	bf38      	it	cc
 800c130:	2304      	movcc	r3, #4
 800c132:	441d      	add	r5, r3
 800c134:	4473      	add	r3, lr
 800c136:	469e      	mov	lr, r3
 800c138:	462e      	mov	r6, r5
 800c13a:	4566      	cmp	r6, ip
 800c13c:	d30e      	bcc.n	800c15c <__mdiff+0xec>
 800c13e:	f10c 0203 	add.w	r2, ip, #3
 800c142:	1b52      	subs	r2, r2, r5
 800c144:	f022 0203 	bic.w	r2, r2, #3
 800c148:	3d03      	subs	r5, #3
 800c14a:	45ac      	cmp	ip, r5
 800c14c:	bf38      	it	cc
 800c14e:	2200      	movcc	r2, #0
 800c150:	441a      	add	r2, r3
 800c152:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c156:	b17b      	cbz	r3, 800c178 <__mdiff+0x108>
 800c158:	6107      	str	r7, [r0, #16]
 800c15a:	e7a3      	b.n	800c0a4 <__mdiff+0x34>
 800c15c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c160:	fa11 f288 	uxtah	r2, r1, r8
 800c164:	1414      	asrs	r4, r2, #16
 800c166:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c16a:	b292      	uxth	r2, r2
 800c16c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c170:	f84e 2b04 	str.w	r2, [lr], #4
 800c174:	1421      	asrs	r1, r4, #16
 800c176:	e7e0      	b.n	800c13a <__mdiff+0xca>
 800c178:	3f01      	subs	r7, #1
 800c17a:	e7ea      	b.n	800c152 <__mdiff+0xe2>
 800c17c:	0800f09f 	.word	0x0800f09f
 800c180:	0800f12c 	.word	0x0800f12c

0800c184 <__ulp>:
 800c184:	b082      	sub	sp, #8
 800c186:	ed8d 0b00 	vstr	d0, [sp]
 800c18a:	9b01      	ldr	r3, [sp, #4]
 800c18c:	4912      	ldr	r1, [pc, #72]	; (800c1d8 <__ulp+0x54>)
 800c18e:	4019      	ands	r1, r3
 800c190:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c194:	2900      	cmp	r1, #0
 800c196:	dd05      	ble.n	800c1a4 <__ulp+0x20>
 800c198:	2200      	movs	r2, #0
 800c19a:	460b      	mov	r3, r1
 800c19c:	ec43 2b10 	vmov	d0, r2, r3
 800c1a0:	b002      	add	sp, #8
 800c1a2:	4770      	bx	lr
 800c1a4:	4249      	negs	r1, r1
 800c1a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c1aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c1ae:	f04f 0200 	mov.w	r2, #0
 800c1b2:	f04f 0300 	mov.w	r3, #0
 800c1b6:	da04      	bge.n	800c1c2 <__ulp+0x3e>
 800c1b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c1bc:	fa41 f300 	asr.w	r3, r1, r0
 800c1c0:	e7ec      	b.n	800c19c <__ulp+0x18>
 800c1c2:	f1a0 0114 	sub.w	r1, r0, #20
 800c1c6:	291e      	cmp	r1, #30
 800c1c8:	bfda      	itte	le
 800c1ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c1ce:	fa20 f101 	lsrle.w	r1, r0, r1
 800c1d2:	2101      	movgt	r1, #1
 800c1d4:	460a      	mov	r2, r1
 800c1d6:	e7e1      	b.n	800c19c <__ulp+0x18>
 800c1d8:	7ff00000 	.word	0x7ff00000

0800c1dc <__b2d>:
 800c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1de:	6905      	ldr	r5, [r0, #16]
 800c1e0:	f100 0714 	add.w	r7, r0, #20
 800c1e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c1e8:	1f2e      	subs	r6, r5, #4
 800c1ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f7ff fd48 	bl	800bc84 <__hi0bits>
 800c1f4:	f1c0 0320 	rsb	r3, r0, #32
 800c1f8:	280a      	cmp	r0, #10
 800c1fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c278 <__b2d+0x9c>
 800c1fe:	600b      	str	r3, [r1, #0]
 800c200:	dc14      	bgt.n	800c22c <__b2d+0x50>
 800c202:	f1c0 0e0b 	rsb	lr, r0, #11
 800c206:	fa24 f10e 	lsr.w	r1, r4, lr
 800c20a:	42b7      	cmp	r7, r6
 800c20c:	ea41 030c 	orr.w	r3, r1, ip
 800c210:	bf34      	ite	cc
 800c212:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c216:	2100      	movcs	r1, #0
 800c218:	3015      	adds	r0, #21
 800c21a:	fa04 f000 	lsl.w	r0, r4, r0
 800c21e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c222:	ea40 0201 	orr.w	r2, r0, r1
 800c226:	ec43 2b10 	vmov	d0, r2, r3
 800c22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c22c:	42b7      	cmp	r7, r6
 800c22e:	bf3a      	itte	cc
 800c230:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c234:	f1a5 0608 	subcc.w	r6, r5, #8
 800c238:	2100      	movcs	r1, #0
 800c23a:	380b      	subs	r0, #11
 800c23c:	d017      	beq.n	800c26e <__b2d+0x92>
 800c23e:	f1c0 0c20 	rsb	ip, r0, #32
 800c242:	fa04 f500 	lsl.w	r5, r4, r0
 800c246:	42be      	cmp	r6, r7
 800c248:	fa21 f40c 	lsr.w	r4, r1, ip
 800c24c:	ea45 0504 	orr.w	r5, r5, r4
 800c250:	bf8c      	ite	hi
 800c252:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c256:	2400      	movls	r4, #0
 800c258:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c25c:	fa01 f000 	lsl.w	r0, r1, r0
 800c260:	fa24 f40c 	lsr.w	r4, r4, ip
 800c264:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c268:	ea40 0204 	orr.w	r2, r0, r4
 800c26c:	e7db      	b.n	800c226 <__b2d+0x4a>
 800c26e:	ea44 030c 	orr.w	r3, r4, ip
 800c272:	460a      	mov	r2, r1
 800c274:	e7d7      	b.n	800c226 <__b2d+0x4a>
 800c276:	bf00      	nop
 800c278:	3ff00000 	.word	0x3ff00000

0800c27c <__d2b>:
 800c27c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c280:	4689      	mov	r9, r1
 800c282:	2101      	movs	r1, #1
 800c284:	ec57 6b10 	vmov	r6, r7, d0
 800c288:	4690      	mov	r8, r2
 800c28a:	f7ff fc09 	bl	800baa0 <_Balloc>
 800c28e:	4604      	mov	r4, r0
 800c290:	b930      	cbnz	r0, 800c2a0 <__d2b+0x24>
 800c292:	4602      	mov	r2, r0
 800c294:	4b25      	ldr	r3, [pc, #148]	; (800c32c <__d2b+0xb0>)
 800c296:	4826      	ldr	r0, [pc, #152]	; (800c330 <__d2b+0xb4>)
 800c298:	f240 310a 	movw	r1, #778	; 0x30a
 800c29c:	f7fb fd2e 	bl	8007cfc <__assert_func>
 800c2a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c2a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2a8:	bb35      	cbnz	r5, 800c2f8 <__d2b+0x7c>
 800c2aa:	2e00      	cmp	r6, #0
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	d028      	beq.n	800c302 <__d2b+0x86>
 800c2b0:	4668      	mov	r0, sp
 800c2b2:	9600      	str	r6, [sp, #0]
 800c2b4:	f7ff fd06 	bl	800bcc4 <__lo0bits>
 800c2b8:	9900      	ldr	r1, [sp, #0]
 800c2ba:	b300      	cbz	r0, 800c2fe <__d2b+0x82>
 800c2bc:	9a01      	ldr	r2, [sp, #4]
 800c2be:	f1c0 0320 	rsb	r3, r0, #32
 800c2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c6:	430b      	orrs	r3, r1
 800c2c8:	40c2      	lsrs	r2, r0
 800c2ca:	6163      	str	r3, [r4, #20]
 800c2cc:	9201      	str	r2, [sp, #4]
 800c2ce:	9b01      	ldr	r3, [sp, #4]
 800c2d0:	61a3      	str	r3, [r4, #24]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	bf14      	ite	ne
 800c2d6:	2202      	movne	r2, #2
 800c2d8:	2201      	moveq	r2, #1
 800c2da:	6122      	str	r2, [r4, #16]
 800c2dc:	b1d5      	cbz	r5, 800c314 <__d2b+0x98>
 800c2de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2e2:	4405      	add	r5, r0
 800c2e4:	f8c9 5000 	str.w	r5, [r9]
 800c2e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2ec:	f8c8 0000 	str.w	r0, [r8]
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	b003      	add	sp, #12
 800c2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2fc:	e7d5      	b.n	800c2aa <__d2b+0x2e>
 800c2fe:	6161      	str	r1, [r4, #20]
 800c300:	e7e5      	b.n	800c2ce <__d2b+0x52>
 800c302:	a801      	add	r0, sp, #4
 800c304:	f7ff fcde 	bl	800bcc4 <__lo0bits>
 800c308:	9b01      	ldr	r3, [sp, #4]
 800c30a:	6163      	str	r3, [r4, #20]
 800c30c:	2201      	movs	r2, #1
 800c30e:	6122      	str	r2, [r4, #16]
 800c310:	3020      	adds	r0, #32
 800c312:	e7e3      	b.n	800c2dc <__d2b+0x60>
 800c314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c31c:	f8c9 0000 	str.w	r0, [r9]
 800c320:	6918      	ldr	r0, [r3, #16]
 800c322:	f7ff fcaf 	bl	800bc84 <__hi0bits>
 800c326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c32a:	e7df      	b.n	800c2ec <__d2b+0x70>
 800c32c:	0800f09f 	.word	0x0800f09f
 800c330:	0800f12c 	.word	0x0800f12c

0800c334 <__ratio>:
 800c334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c338:	4688      	mov	r8, r1
 800c33a:	4669      	mov	r1, sp
 800c33c:	4681      	mov	r9, r0
 800c33e:	f7ff ff4d 	bl	800c1dc <__b2d>
 800c342:	a901      	add	r1, sp, #4
 800c344:	4640      	mov	r0, r8
 800c346:	ec55 4b10 	vmov	r4, r5, d0
 800c34a:	f7ff ff47 	bl	800c1dc <__b2d>
 800c34e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c352:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c356:	eba3 0c02 	sub.w	ip, r3, r2
 800c35a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c35e:	1a9b      	subs	r3, r3, r2
 800c360:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c364:	ec51 0b10 	vmov	r0, r1, d0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bfd6      	itet	le
 800c36c:	460a      	movle	r2, r1
 800c36e:	462a      	movgt	r2, r5
 800c370:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c374:	468b      	mov	fp, r1
 800c376:	462f      	mov	r7, r5
 800c378:	bfd4      	ite	le
 800c37a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c37e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c382:	4620      	mov	r0, r4
 800c384:	ee10 2a10 	vmov	r2, s0
 800c388:	465b      	mov	r3, fp
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f4 fa5e 	bl	800084c <__aeabi_ddiv>
 800c390:	ec41 0b10 	vmov	d0, r0, r1
 800c394:	b003      	add	sp, #12
 800c396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c39a <__copybits>:
 800c39a:	3901      	subs	r1, #1
 800c39c:	b570      	push	{r4, r5, r6, lr}
 800c39e:	1149      	asrs	r1, r1, #5
 800c3a0:	6914      	ldr	r4, [r2, #16]
 800c3a2:	3101      	adds	r1, #1
 800c3a4:	f102 0314 	add.w	r3, r2, #20
 800c3a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c3ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c3b0:	1f05      	subs	r5, r0, #4
 800c3b2:	42a3      	cmp	r3, r4
 800c3b4:	d30c      	bcc.n	800c3d0 <__copybits+0x36>
 800c3b6:	1aa3      	subs	r3, r4, r2
 800c3b8:	3b11      	subs	r3, #17
 800c3ba:	f023 0303 	bic.w	r3, r3, #3
 800c3be:	3211      	adds	r2, #17
 800c3c0:	42a2      	cmp	r2, r4
 800c3c2:	bf88      	it	hi
 800c3c4:	2300      	movhi	r3, #0
 800c3c6:	4418      	add	r0, r3
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4288      	cmp	r0, r1
 800c3cc:	d305      	bcc.n	800c3da <__copybits+0x40>
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}
 800c3d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c3d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c3d8:	e7eb      	b.n	800c3b2 <__copybits+0x18>
 800c3da:	f840 3b04 	str.w	r3, [r0], #4
 800c3de:	e7f4      	b.n	800c3ca <__copybits+0x30>

0800c3e0 <__any_on>:
 800c3e0:	f100 0214 	add.w	r2, r0, #20
 800c3e4:	6900      	ldr	r0, [r0, #16]
 800c3e6:	114b      	asrs	r3, r1, #5
 800c3e8:	4298      	cmp	r0, r3
 800c3ea:	b510      	push	{r4, lr}
 800c3ec:	db11      	blt.n	800c412 <__any_on+0x32>
 800c3ee:	dd0a      	ble.n	800c406 <__any_on+0x26>
 800c3f0:	f011 011f 	ands.w	r1, r1, #31
 800c3f4:	d007      	beq.n	800c406 <__any_on+0x26>
 800c3f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3fa:	fa24 f001 	lsr.w	r0, r4, r1
 800c3fe:	fa00 f101 	lsl.w	r1, r0, r1
 800c402:	428c      	cmp	r4, r1
 800c404:	d10b      	bne.n	800c41e <__any_on+0x3e>
 800c406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d803      	bhi.n	800c416 <__any_on+0x36>
 800c40e:	2000      	movs	r0, #0
 800c410:	bd10      	pop	{r4, pc}
 800c412:	4603      	mov	r3, r0
 800c414:	e7f7      	b.n	800c406 <__any_on+0x26>
 800c416:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c41a:	2900      	cmp	r1, #0
 800c41c:	d0f5      	beq.n	800c40a <__any_on+0x2a>
 800c41e:	2001      	movs	r0, #1
 800c420:	e7f6      	b.n	800c410 <__any_on+0x30>

0800c422 <_realloc_r>:
 800c422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c426:	4680      	mov	r8, r0
 800c428:	4614      	mov	r4, r2
 800c42a:	460e      	mov	r6, r1
 800c42c:	b921      	cbnz	r1, 800c438 <_realloc_r+0x16>
 800c42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c432:	4611      	mov	r1, r2
 800c434:	f7fc b802 	b.w	800843c <_malloc_r>
 800c438:	b92a      	cbnz	r2, 800c446 <_realloc_r+0x24>
 800c43a:	f7fb ff93 	bl	8008364 <_free_r>
 800c43e:	4625      	mov	r5, r4
 800c440:	4628      	mov	r0, r5
 800c442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c446:	f000 fa1b 	bl	800c880 <_malloc_usable_size_r>
 800c44a:	4284      	cmp	r4, r0
 800c44c:	4607      	mov	r7, r0
 800c44e:	d802      	bhi.n	800c456 <_realloc_r+0x34>
 800c450:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c454:	d812      	bhi.n	800c47c <_realloc_r+0x5a>
 800c456:	4621      	mov	r1, r4
 800c458:	4640      	mov	r0, r8
 800c45a:	f7fb ffef 	bl	800843c <_malloc_r>
 800c45e:	4605      	mov	r5, r0
 800c460:	2800      	cmp	r0, #0
 800c462:	d0ed      	beq.n	800c440 <_realloc_r+0x1e>
 800c464:	42bc      	cmp	r4, r7
 800c466:	4622      	mov	r2, r4
 800c468:	4631      	mov	r1, r6
 800c46a:	bf28      	it	cs
 800c46c:	463a      	movcs	r2, r7
 800c46e:	f7fb ff33 	bl	80082d8 <memcpy>
 800c472:	4631      	mov	r1, r6
 800c474:	4640      	mov	r0, r8
 800c476:	f7fb ff75 	bl	8008364 <_free_r>
 800c47a:	e7e1      	b.n	800c440 <_realloc_r+0x1e>
 800c47c:	4635      	mov	r5, r6
 800c47e:	e7df      	b.n	800c440 <_realloc_r+0x1e>

0800c480 <__ssputs_r>:
 800c480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c484:	688e      	ldr	r6, [r1, #8]
 800c486:	429e      	cmp	r6, r3
 800c488:	4682      	mov	sl, r0
 800c48a:	460c      	mov	r4, r1
 800c48c:	4690      	mov	r8, r2
 800c48e:	461f      	mov	r7, r3
 800c490:	d838      	bhi.n	800c504 <__ssputs_r+0x84>
 800c492:	898a      	ldrh	r2, [r1, #12]
 800c494:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c498:	d032      	beq.n	800c500 <__ssputs_r+0x80>
 800c49a:	6825      	ldr	r5, [r4, #0]
 800c49c:	6909      	ldr	r1, [r1, #16]
 800c49e:	eba5 0901 	sub.w	r9, r5, r1
 800c4a2:	6965      	ldr	r5, [r4, #20]
 800c4a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	444b      	add	r3, r9
 800c4b0:	106d      	asrs	r5, r5, #1
 800c4b2:	429d      	cmp	r5, r3
 800c4b4:	bf38      	it	cc
 800c4b6:	461d      	movcc	r5, r3
 800c4b8:	0553      	lsls	r3, r2, #21
 800c4ba:	d531      	bpl.n	800c520 <__ssputs_r+0xa0>
 800c4bc:	4629      	mov	r1, r5
 800c4be:	f7fb ffbd 	bl	800843c <_malloc_r>
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	b950      	cbnz	r0, 800c4dc <__ssputs_r+0x5c>
 800c4c6:	230c      	movs	r3, #12
 800c4c8:	f8ca 3000 	str.w	r3, [sl]
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4d2:	81a3      	strh	r3, [r4, #12]
 800c4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4dc:	6921      	ldr	r1, [r4, #16]
 800c4de:	464a      	mov	r2, r9
 800c4e0:	f7fb fefa 	bl	80082d8 <memcpy>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ee:	81a3      	strh	r3, [r4, #12]
 800c4f0:	6126      	str	r6, [r4, #16]
 800c4f2:	6165      	str	r5, [r4, #20]
 800c4f4:	444e      	add	r6, r9
 800c4f6:	eba5 0509 	sub.w	r5, r5, r9
 800c4fa:	6026      	str	r6, [r4, #0]
 800c4fc:	60a5      	str	r5, [r4, #8]
 800c4fe:	463e      	mov	r6, r7
 800c500:	42be      	cmp	r6, r7
 800c502:	d900      	bls.n	800c506 <__ssputs_r+0x86>
 800c504:	463e      	mov	r6, r7
 800c506:	6820      	ldr	r0, [r4, #0]
 800c508:	4632      	mov	r2, r6
 800c50a:	4641      	mov	r1, r8
 800c50c:	f7fb fef2 	bl	80082f4 <memmove>
 800c510:	68a3      	ldr	r3, [r4, #8]
 800c512:	1b9b      	subs	r3, r3, r6
 800c514:	60a3      	str	r3, [r4, #8]
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	4433      	add	r3, r6
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	2000      	movs	r0, #0
 800c51e:	e7db      	b.n	800c4d8 <__ssputs_r+0x58>
 800c520:	462a      	mov	r2, r5
 800c522:	f7ff ff7e 	bl	800c422 <_realloc_r>
 800c526:	4606      	mov	r6, r0
 800c528:	2800      	cmp	r0, #0
 800c52a:	d1e1      	bne.n	800c4f0 <__ssputs_r+0x70>
 800c52c:	6921      	ldr	r1, [r4, #16]
 800c52e:	4650      	mov	r0, sl
 800c530:	f7fb ff18 	bl	8008364 <_free_r>
 800c534:	e7c7      	b.n	800c4c6 <__ssputs_r+0x46>
	...

0800c538 <_svfiprintf_r>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	4698      	mov	r8, r3
 800c53e:	898b      	ldrh	r3, [r1, #12]
 800c540:	061b      	lsls	r3, r3, #24
 800c542:	b09d      	sub	sp, #116	; 0x74
 800c544:	4607      	mov	r7, r0
 800c546:	460d      	mov	r5, r1
 800c548:	4614      	mov	r4, r2
 800c54a:	d50e      	bpl.n	800c56a <_svfiprintf_r+0x32>
 800c54c:	690b      	ldr	r3, [r1, #16]
 800c54e:	b963      	cbnz	r3, 800c56a <_svfiprintf_r+0x32>
 800c550:	2140      	movs	r1, #64	; 0x40
 800c552:	f7fb ff73 	bl	800843c <_malloc_r>
 800c556:	6028      	str	r0, [r5, #0]
 800c558:	6128      	str	r0, [r5, #16]
 800c55a:	b920      	cbnz	r0, 800c566 <_svfiprintf_r+0x2e>
 800c55c:	230c      	movs	r3, #12
 800c55e:	603b      	str	r3, [r7, #0]
 800c560:	f04f 30ff 	mov.w	r0, #4294967295
 800c564:	e0d1      	b.n	800c70a <_svfiprintf_r+0x1d2>
 800c566:	2340      	movs	r3, #64	; 0x40
 800c568:	616b      	str	r3, [r5, #20]
 800c56a:	2300      	movs	r3, #0
 800c56c:	9309      	str	r3, [sp, #36]	; 0x24
 800c56e:	2320      	movs	r3, #32
 800c570:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c574:	f8cd 800c 	str.w	r8, [sp, #12]
 800c578:	2330      	movs	r3, #48	; 0x30
 800c57a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c724 <_svfiprintf_r+0x1ec>
 800c57e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c582:	f04f 0901 	mov.w	r9, #1
 800c586:	4623      	mov	r3, r4
 800c588:	469a      	mov	sl, r3
 800c58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c58e:	b10a      	cbz	r2, 800c594 <_svfiprintf_r+0x5c>
 800c590:	2a25      	cmp	r2, #37	; 0x25
 800c592:	d1f9      	bne.n	800c588 <_svfiprintf_r+0x50>
 800c594:	ebba 0b04 	subs.w	fp, sl, r4
 800c598:	d00b      	beq.n	800c5b2 <_svfiprintf_r+0x7a>
 800c59a:	465b      	mov	r3, fp
 800c59c:	4622      	mov	r2, r4
 800c59e:	4629      	mov	r1, r5
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	f7ff ff6d 	bl	800c480 <__ssputs_r>
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	f000 80aa 	beq.w	800c700 <_svfiprintf_r+0x1c8>
 800c5ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5ae:	445a      	add	r2, fp
 800c5b0:	9209      	str	r2, [sp, #36]	; 0x24
 800c5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 80a2 	beq.w	800c700 <_svfiprintf_r+0x1c8>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5c6:	f10a 0a01 	add.w	sl, sl, #1
 800c5ca:	9304      	str	r3, [sp, #16]
 800c5cc:	9307      	str	r3, [sp, #28]
 800c5ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5d2:	931a      	str	r3, [sp, #104]	; 0x68
 800c5d4:	4654      	mov	r4, sl
 800c5d6:	2205      	movs	r2, #5
 800c5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5dc:	4851      	ldr	r0, [pc, #324]	; (800c724 <_svfiprintf_r+0x1ec>)
 800c5de:	f7f3 fdff 	bl	80001e0 <memchr>
 800c5e2:	9a04      	ldr	r2, [sp, #16]
 800c5e4:	b9d8      	cbnz	r0, 800c61e <_svfiprintf_r+0xe6>
 800c5e6:	06d0      	lsls	r0, r2, #27
 800c5e8:	bf44      	itt	mi
 800c5ea:	2320      	movmi	r3, #32
 800c5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f0:	0711      	lsls	r1, r2, #28
 800c5f2:	bf44      	itt	mi
 800c5f4:	232b      	movmi	r3, #43	; 0x2b
 800c5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c5fe:	2b2a      	cmp	r3, #42	; 0x2a
 800c600:	d015      	beq.n	800c62e <_svfiprintf_r+0xf6>
 800c602:	9a07      	ldr	r2, [sp, #28]
 800c604:	4654      	mov	r4, sl
 800c606:	2000      	movs	r0, #0
 800c608:	f04f 0c0a 	mov.w	ip, #10
 800c60c:	4621      	mov	r1, r4
 800c60e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c612:	3b30      	subs	r3, #48	; 0x30
 800c614:	2b09      	cmp	r3, #9
 800c616:	d94e      	bls.n	800c6b6 <_svfiprintf_r+0x17e>
 800c618:	b1b0      	cbz	r0, 800c648 <_svfiprintf_r+0x110>
 800c61a:	9207      	str	r2, [sp, #28]
 800c61c:	e014      	b.n	800c648 <_svfiprintf_r+0x110>
 800c61e:	eba0 0308 	sub.w	r3, r0, r8
 800c622:	fa09 f303 	lsl.w	r3, r9, r3
 800c626:	4313      	orrs	r3, r2
 800c628:	9304      	str	r3, [sp, #16]
 800c62a:	46a2      	mov	sl, r4
 800c62c:	e7d2      	b.n	800c5d4 <_svfiprintf_r+0x9c>
 800c62e:	9b03      	ldr	r3, [sp, #12]
 800c630:	1d19      	adds	r1, r3, #4
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	9103      	str	r1, [sp, #12]
 800c636:	2b00      	cmp	r3, #0
 800c638:	bfbb      	ittet	lt
 800c63a:	425b      	neglt	r3, r3
 800c63c:	f042 0202 	orrlt.w	r2, r2, #2
 800c640:	9307      	strge	r3, [sp, #28]
 800c642:	9307      	strlt	r3, [sp, #28]
 800c644:	bfb8      	it	lt
 800c646:	9204      	strlt	r2, [sp, #16]
 800c648:	7823      	ldrb	r3, [r4, #0]
 800c64a:	2b2e      	cmp	r3, #46	; 0x2e
 800c64c:	d10c      	bne.n	800c668 <_svfiprintf_r+0x130>
 800c64e:	7863      	ldrb	r3, [r4, #1]
 800c650:	2b2a      	cmp	r3, #42	; 0x2a
 800c652:	d135      	bne.n	800c6c0 <_svfiprintf_r+0x188>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	1d1a      	adds	r2, r3, #4
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	9203      	str	r2, [sp, #12]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	bfb8      	it	lt
 800c660:	f04f 33ff 	movlt.w	r3, #4294967295
 800c664:	3402      	adds	r4, #2
 800c666:	9305      	str	r3, [sp, #20]
 800c668:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c734 <_svfiprintf_r+0x1fc>
 800c66c:	7821      	ldrb	r1, [r4, #0]
 800c66e:	2203      	movs	r2, #3
 800c670:	4650      	mov	r0, sl
 800c672:	f7f3 fdb5 	bl	80001e0 <memchr>
 800c676:	b140      	cbz	r0, 800c68a <_svfiprintf_r+0x152>
 800c678:	2340      	movs	r3, #64	; 0x40
 800c67a:	eba0 000a 	sub.w	r0, r0, sl
 800c67e:	fa03 f000 	lsl.w	r0, r3, r0
 800c682:	9b04      	ldr	r3, [sp, #16]
 800c684:	4303      	orrs	r3, r0
 800c686:	3401      	adds	r4, #1
 800c688:	9304      	str	r3, [sp, #16]
 800c68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c68e:	4826      	ldr	r0, [pc, #152]	; (800c728 <_svfiprintf_r+0x1f0>)
 800c690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c694:	2206      	movs	r2, #6
 800c696:	f7f3 fda3 	bl	80001e0 <memchr>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	d038      	beq.n	800c710 <_svfiprintf_r+0x1d8>
 800c69e:	4b23      	ldr	r3, [pc, #140]	; (800c72c <_svfiprintf_r+0x1f4>)
 800c6a0:	bb1b      	cbnz	r3, 800c6ea <_svfiprintf_r+0x1b2>
 800c6a2:	9b03      	ldr	r3, [sp, #12]
 800c6a4:	3307      	adds	r3, #7
 800c6a6:	f023 0307 	bic.w	r3, r3, #7
 800c6aa:	3308      	adds	r3, #8
 800c6ac:	9303      	str	r3, [sp, #12]
 800c6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b0:	4433      	add	r3, r6
 800c6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b4:	e767      	b.n	800c586 <_svfiprintf_r+0x4e>
 800c6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	2001      	movs	r0, #1
 800c6be:	e7a5      	b.n	800c60c <_svfiprintf_r+0xd4>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	3401      	adds	r4, #1
 800c6c4:	9305      	str	r3, [sp, #20]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	f04f 0c0a 	mov.w	ip, #10
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6d2:	3a30      	subs	r2, #48	; 0x30
 800c6d4:	2a09      	cmp	r2, #9
 800c6d6:	d903      	bls.n	800c6e0 <_svfiprintf_r+0x1a8>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d0c5      	beq.n	800c668 <_svfiprintf_r+0x130>
 800c6dc:	9105      	str	r1, [sp, #20]
 800c6de:	e7c3      	b.n	800c668 <_svfiprintf_r+0x130>
 800c6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e7f0      	b.n	800c6cc <_svfiprintf_r+0x194>
 800c6ea:	ab03      	add	r3, sp, #12
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	462a      	mov	r2, r5
 800c6f0:	4b0f      	ldr	r3, [pc, #60]	; (800c730 <_svfiprintf_r+0x1f8>)
 800c6f2:	a904      	add	r1, sp, #16
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	f7fc f919 	bl	800892c <_printf_float>
 800c6fa:	1c42      	adds	r2, r0, #1
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	d1d6      	bne.n	800c6ae <_svfiprintf_r+0x176>
 800c700:	89ab      	ldrh	r3, [r5, #12]
 800c702:	065b      	lsls	r3, r3, #25
 800c704:	f53f af2c 	bmi.w	800c560 <_svfiprintf_r+0x28>
 800c708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c70a:	b01d      	add	sp, #116	; 0x74
 800c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c710:	ab03      	add	r3, sp, #12
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	462a      	mov	r2, r5
 800c716:	4b06      	ldr	r3, [pc, #24]	; (800c730 <_svfiprintf_r+0x1f8>)
 800c718:	a904      	add	r1, sp, #16
 800c71a:	4638      	mov	r0, r7
 800c71c:	f7fc fbaa 	bl	8008e74 <_printf_i>
 800c720:	e7eb      	b.n	800c6fa <_svfiprintf_r+0x1c2>
 800c722:	bf00      	nop
 800c724:	0800ef84 	.word	0x0800ef84
 800c728:	0800ef8e 	.word	0x0800ef8e
 800c72c:	0800892d 	.word	0x0800892d
 800c730:	0800c481 	.word	0x0800c481
 800c734:	0800ef8a 	.word	0x0800ef8a

0800c738 <_read_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4d07      	ldr	r5, [pc, #28]	; (800c758 <_read_r+0x20>)
 800c73c:	4604      	mov	r4, r0
 800c73e:	4608      	mov	r0, r1
 800c740:	4611      	mov	r1, r2
 800c742:	2200      	movs	r2, #0
 800c744:	602a      	str	r2, [r5, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	f7f4 fdb8 	bl	80012bc <_read>
 800c74c:	1c43      	adds	r3, r0, #1
 800c74e:	d102      	bne.n	800c756 <_read_r+0x1e>
 800c750:	682b      	ldr	r3, [r5, #0]
 800c752:	b103      	cbz	r3, 800c756 <_read_r+0x1e>
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	20000ee8 	.word	0x20000ee8
 800c75c:	00000000 	.word	0x00000000

0800c760 <nan>:
 800c760:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c768 <nan+0x8>
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	00000000 	.word	0x00000000
 800c76c:	7ff80000 	.word	0x7ff80000

0800c770 <_raise_r>:
 800c770:	291f      	cmp	r1, #31
 800c772:	b538      	push	{r3, r4, r5, lr}
 800c774:	4604      	mov	r4, r0
 800c776:	460d      	mov	r5, r1
 800c778:	d904      	bls.n	800c784 <_raise_r+0x14>
 800c77a:	2316      	movs	r3, #22
 800c77c:	6003      	str	r3, [r0, #0]
 800c77e:	f04f 30ff 	mov.w	r0, #4294967295
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c786:	b112      	cbz	r2, 800c78e <_raise_r+0x1e>
 800c788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c78c:	b94b      	cbnz	r3, 800c7a2 <_raise_r+0x32>
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 f830 	bl	800c7f4 <_getpid_r>
 800c794:	462a      	mov	r2, r5
 800c796:	4601      	mov	r1, r0
 800c798:	4620      	mov	r0, r4
 800c79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c79e:	f000 b817 	b.w	800c7d0 <_kill_r>
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d00a      	beq.n	800c7bc <_raise_r+0x4c>
 800c7a6:	1c59      	adds	r1, r3, #1
 800c7a8:	d103      	bne.n	800c7b2 <_raise_r+0x42>
 800c7aa:	2316      	movs	r3, #22
 800c7ac:	6003      	str	r3, [r0, #0]
 800c7ae:	2001      	movs	r0, #1
 800c7b0:	e7e7      	b.n	800c782 <_raise_r+0x12>
 800c7b2:	2400      	movs	r4, #0
 800c7b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	4798      	blx	r3
 800c7bc:	2000      	movs	r0, #0
 800c7be:	e7e0      	b.n	800c782 <_raise_r+0x12>

0800c7c0 <raise>:
 800c7c0:	4b02      	ldr	r3, [pc, #8]	; (800c7cc <raise+0xc>)
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	f7ff bfd3 	b.w	800c770 <_raise_r>
 800c7ca:	bf00      	nop
 800c7cc:	2000000c 	.word	0x2000000c

0800c7d0 <_kill_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d07      	ldr	r5, [pc, #28]	; (800c7f0 <_kill_r+0x20>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	4611      	mov	r1, r2
 800c7dc:	602b      	str	r3, [r5, #0]
 800c7de:	f7f4 fd53 	bl	8001288 <_kill>
 800c7e2:	1c43      	adds	r3, r0, #1
 800c7e4:	d102      	bne.n	800c7ec <_kill_r+0x1c>
 800c7e6:	682b      	ldr	r3, [r5, #0]
 800c7e8:	b103      	cbz	r3, 800c7ec <_kill_r+0x1c>
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	bd38      	pop	{r3, r4, r5, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20000ee8 	.word	0x20000ee8

0800c7f4 <_getpid_r>:
 800c7f4:	f7f4 bd40 	b.w	8001278 <_getpid>

0800c7f8 <strncmp>:
 800c7f8:	b510      	push	{r4, lr}
 800c7fa:	b17a      	cbz	r2, 800c81c <strncmp+0x24>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	3901      	subs	r1, #1
 800c800:	1884      	adds	r4, r0, r2
 800c802:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c806:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c80a:	4290      	cmp	r0, r2
 800c80c:	d101      	bne.n	800c812 <strncmp+0x1a>
 800c80e:	42a3      	cmp	r3, r4
 800c810:	d101      	bne.n	800c816 <strncmp+0x1e>
 800c812:	1a80      	subs	r0, r0, r2
 800c814:	bd10      	pop	{r4, pc}
 800c816:	2800      	cmp	r0, #0
 800c818:	d1f3      	bne.n	800c802 <strncmp+0xa>
 800c81a:	e7fa      	b.n	800c812 <strncmp+0x1a>
 800c81c:	4610      	mov	r0, r2
 800c81e:	e7f9      	b.n	800c814 <strncmp+0x1c>

0800c820 <__ascii_wctomb>:
 800c820:	b149      	cbz	r1, 800c836 <__ascii_wctomb+0x16>
 800c822:	2aff      	cmp	r2, #255	; 0xff
 800c824:	bf85      	ittet	hi
 800c826:	238a      	movhi	r3, #138	; 0x8a
 800c828:	6003      	strhi	r3, [r0, #0]
 800c82a:	700a      	strbls	r2, [r1, #0]
 800c82c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c830:	bf98      	it	ls
 800c832:	2001      	movls	r0, #1
 800c834:	4770      	bx	lr
 800c836:	4608      	mov	r0, r1
 800c838:	4770      	bx	lr
	...

0800c83c <_fstat_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d07      	ldr	r5, [pc, #28]	; (800c85c <_fstat_r+0x20>)
 800c840:	2300      	movs	r3, #0
 800c842:	4604      	mov	r4, r0
 800c844:	4608      	mov	r0, r1
 800c846:	4611      	mov	r1, r2
 800c848:	602b      	str	r3, [r5, #0]
 800c84a:	f7f4 fd7c 	bl	8001346 <_fstat>
 800c84e:	1c43      	adds	r3, r0, #1
 800c850:	d102      	bne.n	800c858 <_fstat_r+0x1c>
 800c852:	682b      	ldr	r3, [r5, #0]
 800c854:	b103      	cbz	r3, 800c858 <_fstat_r+0x1c>
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	bd38      	pop	{r3, r4, r5, pc}
 800c85a:	bf00      	nop
 800c85c:	20000ee8 	.word	0x20000ee8

0800c860 <_isatty_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4d06      	ldr	r5, [pc, #24]	; (800c87c <_isatty_r+0x1c>)
 800c864:	2300      	movs	r3, #0
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	602b      	str	r3, [r5, #0]
 800c86c:	f7f4 fd7b 	bl	8001366 <_isatty>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d102      	bne.n	800c87a <_isatty_r+0x1a>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b103      	cbz	r3, 800c87a <_isatty_r+0x1a>
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	20000ee8 	.word	0x20000ee8

0800c880 <_malloc_usable_size_r>:
 800c880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c884:	1f18      	subs	r0, r3, #4
 800c886:	2b00      	cmp	r3, #0
 800c888:	bfbc      	itt	lt
 800c88a:	580b      	ldrlt	r3, [r1, r0]
 800c88c:	18c0      	addlt	r0, r0, r3
 800c88e:	4770      	bx	lr

0800c890 <_init>:
 800c890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c892:	bf00      	nop
 800c894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c896:	bc08      	pop	{r3}
 800c898:	469e      	mov	lr, r3
 800c89a:	4770      	bx	lr

0800c89c <_fini>:
 800c89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89e:	bf00      	nop
 800c8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8a2:	bc08      	pop	{r3}
 800c8a4:	469e      	mov	lr, r3
 800c8a6:	4770      	bx	lr

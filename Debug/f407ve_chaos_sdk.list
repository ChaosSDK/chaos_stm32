
f407ve_chaos_sdk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000296c  0800ca48  0800ca48  0001ca48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b4  0800f3b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3b4  0800f3b4  0001f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3bc  0800f3bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3bc  0800f3bc  0001f3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3c0  0800f3c0  0001f3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000d0c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000eec  20000eec  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ee1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c3a  00000000  00000000  000360f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00039d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f10  00000000  00000000  0003ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028fb5  00000000  00000000  0003bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019948  00000000  00000000  00064c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e27ec  00000000  00000000  0007e59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160d89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005780  00000000  00000000  00160ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca30 	.word	0x0800ca30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ca30 	.word	0x0800ca30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_GPIO_Init+0x9c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xa0>)
 800106a:	f004 fb41 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NP_dir_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NP_dir_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xa0>)
 8001088:	f004 f996 	bl	80053b8 <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f003 ff74 	bl	8004f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f818 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff ffa6 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ac:	f000 fa90 	bl	80015d0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010b0:	f000 f9ba 	bl	8001428 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010b4:	2108      	movs	r1, #8
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <main+0x34>)
 80010b8:	f005 f89a 	bl	80061f0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <main+0x38>)
 80010c4:	f004 fb14 	bl	80056f0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80010c8:	f000 fb26 	bl	8001718 <app_main>
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x30>
 80010ce:	bf00      	nop
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40020400 	.word	0x40020400

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 f9ee 	bl	80084c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemClock_Config+0xd0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemClock_Config+0xd0>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a22      	ldr	r2, [pc, #136]	; (80011ac <SystemClock_Config+0xd4>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800114c:	23a8      	movs	r3, #168	; 0xa8
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fae1 	bl	8005724 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 f822 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2105      	movs	r1, #5
 800118a:	4618      	mov	r0, r3
 800118c:	f004 fd42 	bl	8005c14 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f80b 	bl	80011b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800119a:	f004 fe21 	bl	8005de0 <HAL_RCC_EnableCSS>
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001210:	f004 ff2a 	bl	8006068 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x8>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f003 fee8 	bl	8005030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART1_IRQHandler+0x10>)
 800126a:	f005 feaf 	bl	8006fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000248 	.word	0x20000248

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f006 fe29 	bl	8007ee8 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fe29 	bl	8004f68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f006 fd8e 	bl	8007ee8 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	20000ef0 	.word	0x20000ef0

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_TIM4_Init+0xe8>)
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <MX_TIM4_Init+0xec>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM4_Init+0xe8>)
 800146c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM4_Init+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001480:	f004 fe0d 	bl	800609e <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800148a:	f7ff fe91 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	4619      	mov	r1, r3
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <MX_TIM4_Init+0xe8>)
 800149c:	f005 f832 	bl	8006504 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014a6:	f7ff fe83 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014aa:	4819      	ldr	r0, [pc, #100]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ac:	f004 fe46 	bl	800613c <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014b6:	f7ff fe7b 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ca:	f005 fbf3 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014d4:	f7ff fe6c 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80014dc:	f241 0368 	movw	r3, #4200	; 0x1068
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014f2:	f004 ff45 	bl	8006380 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f7ff fe58 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001502:	f000 f82b 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000200 	.word	0x20000200
 8001514:	40000800 	.word	0x40000800

08001518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40000800 	.word	0x40000800
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_TIM_MspPostInit+0x68>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d11e      	bne.n	80015bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PP_step_Pin;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PP_step_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_TIM_MspPostInit+0x70>)
 80015b8:	f003 fefe 	bl	80053b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART1_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001608:	f005 fbd0 	bl	8006dac <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fdcd 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000248 	.word	0x20000248
 8001620:	40011000 	.word	0x40011000

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_UART_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d134      	bne.n	80016b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_UART_MspInit+0x98>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_UART_MspInit+0x9c>)
 800169c:	f003 fe8c 	bl	80053b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f003 fdbe 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f003 fdd7 	bl	800525e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ee:	f7ff fe89 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f006 fe89 	bl	8008408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fcd1 	bl	800109c <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001708:	0800f3c4 	.word	0x0800f3c4
  ldr r2, =_sbss
 800170c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001710:	20000eec 	.word	0x20000eec

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <app_main>:

#include "board_pkg.h"


void app_main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af02      	add	r7, sp, #8
	int state = newEntities(5);
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fd7a 	bl	8002218 <newEntities>
 8001724:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "app_main: error entity allocation");
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10e      	bne.n	800174a <app_main+0x32>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf0c      	ite	eq
 8001732:	2301      	moveq	r3, #1
 8001734:	2300      	movne	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <app_main+0x48>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	230e      	movs	r3, #14
 8001740:	4a08      	ldr	r2, [pc, #32]	; (8001764 <app_main+0x4c>)
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <app_main+0x50>)
 8001744:	f003 faee 	bl	8004d24 <__M_Error>
 8001748:	e006      	b.n	8001758 <app_main+0x40>
	entityBoardInit();
 800174a:	f000 f80f 	bl	800176c <entityBoardInit>


	init_stm32_communicator();
 800174e:	f003 fb4b 	bl	8004de8 <init_stm32_communicator>
	// protocolAllTest(44, 100, (TESTER_CRC | TESTER_ENDIAN | TESTER_CONVERT | TESTER_RAW_P_DMA | TESTER_REED_SOLOMON_ECC | TESTER_CALLBACK_MANAGER | TESTER_PULL_CONTAINER | TESTER_RAW_P_IT | TESTER_RAW_P_GEN));
	//protocolAllTest(44, 100, TESTER_ENDIAN | TESTER_CONVERT | TESTER_RAW_P_GEN |TESTER_RAW_P_IT | TESTER_RAW_P_DMA);
	while(1) {
		proceedIncommingMessage();
 8001752:	f003 fb7b 	bl	8004e4c <proceedIncommingMessage>
 8001756:	e7fc      	b.n	8001752 <app_main+0x3a>
	}
}
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800ca7c 	.word	0x0800ca7c
 8001764:	0800ca48 	.word	0x0800ca48
 8001768:	0800ca64 	.word	0x0800ca64

0800176c <entityBoardInit>:
#include "smart_assert.h"

const boards_t* board_entry = NULL;

void entityBoardInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af04      	add	r7, sp, #16
	reg board_entityNum = ENTITY_NUMBER_ERROR;
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	60bb      	str	r3, [r7, #8]
	reg fieldNumber = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]

	int state = initEntity(&board_entityNum, 17, sizeof(boards_t), "BID ", 0, 0, NULL);
 800177c:	f107 0008 	add.w	r0, r7, #8
 8001780:	2300      	movs	r3, #0
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2300      	movs	r3, #0
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <entityBoardInit+0xdc>)
 800178e:	2260      	movs	r2, #96	; 0x60
 8001790:	2111      	movs	r1, #17
 8001792:	f000 fd93 	bl	80022bc <initEntity>
 8001796:	61f8      	str	r0, [r7, #28]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "entityBoardInit: initEntity Error");
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <entityBoardInit+0x50>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <entityBoardInit+0xe0>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	230d      	movs	r3, #13
 80017b2:	4a27      	ldr	r2, [pc, #156]	; (8001850 <entityBoardInit+0xe4>)
 80017b4:	4827      	ldr	r0, [pc, #156]	; (8001854 <entityBoardInit+0xe8>)
 80017b6:	f003 fab5 	bl	8004d24 <__M_Error>
 80017ba:	e142      	b.n	8001a42 <entityBoardInit+0x2d6>

	Entity* const entity = getEntityPointer(board_entityNum);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	613b      	str	r3, [r7, #16]
 */

// getter entity pointer by entity number
STATIC_FORCEINLINE Entity * getEntityPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <entityBoardInit+0xec>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d206      	bcs.n	80017d8 <entityBoardInit+0x6c>
        return entityInfo.entities[entityNumber];
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <entityBoardInit+0xec>)
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e000      	b.n	80017da <entityBoardInit+0x6e>
    }
    return NULLPTR(Entity*);
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
	M_Assert_BreakSaveCheck((entity == NULL), M_EMPTY, return, "entityBoardInit: entity is null");
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10e      	bne.n	8001800 <entityBoardInit+0x94>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <entityBoardInit+0xf0>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2310      	movs	r3, #16
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <entityBoardInit+0xe4>)
 80017f8:	4819      	ldr	r0, [pc, #100]	; (8001860 <entityBoardInit+0xf4>)
 80017fa:	f003 fa93 	bl	8004d24 <__M_Error>
 80017fe:	e120      	b.n	8001a42 <entityBoardInit+0x2d6>

	boards_t* entry = getVoidPointer(board_entityNum);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60fb      	str	r3, [r7, #12]
}

// getter data pointer by entity number
STATIC_FORCEINLINE void * getVoidPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <entityBoardInit+0xec>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	429a      	cmp	r2, r3
 800180c:	d207      	bcs.n	800181e <entityBoardInit+0xb2>
        return entityInfo.entities[entityNumber]->pointer;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <entityBoardInit+0xec>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e000      	b.n	8001820 <entityBoardInit+0xb4>
    }
    return NULL;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
	M_Assert_BreakSaveCheck((entry == NULL), M_EMPTY, return, "entityBoardInit: entry is null");
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d121      	bne.n	800186c <entityBoardInit+0x100>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <entityBoardInit+0xf8>)
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2313      	movs	r3, #19
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <entityBoardInit+0xe4>)
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <entityBoardInit+0xfc>)
 8001840:	f003 fa70 	bl	8004d24 <__M_Error>
 8001844:	e0fd      	b.n	8001a42 <entityBoardInit+0x2d6>
 8001846:	bf00      	nop
 8001848:	0800caa0 	.word	0x0800caa0
 800184c:	0800cae0 	.word	0x0800cae0
 8001850:	0800caa8 	.word	0x0800caa8
 8001854:	0800cac8 	.word	0x0800cac8
 8001858:	20000290 	.word	0x20000290
 800185c:	0800cb18 	.word	0x0800cb18
 8001860:	0800cb04 	.word	0x0800cb04
 8001864:	0800cb48 	.word	0x0800cb48
 8001868:	0800cb38 	.word	0x0800cb38

	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, boardId), 	UINT8_TYPE, 	"B   ", &entry->boardId);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	1d39      	adds	r1, r7, #4
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <entityBoardInit+0x2dc>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2301      	movs	r3, #1
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	2201      	movs	r2, #1
 800187e:	69b8      	ldr	r0, [r7, #24]
 8001880:	f000 fe2e 	bl	80024e0 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, major), 		UINT8_TYPE, 	"VerH", &entry->major);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	1d39      	adds	r1, r7, #4
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <entityBoardInit+0x2e0>)
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	2201      	movs	r2, #1
 8001898:	69b8      	ldr	r0, [r7, #24]
 800189a:	f000 fe21 	bl	80024e0 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, minor), 		UINT8_TYPE, 	"VerM", &entry->minor);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3302      	adds	r3, #2
 80018a2:	1d39      	adds	r1, r7, #4
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <entityBoardInit+0x2e4>)
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	2201      	movs	r2, #1
 80018b2:	69b8      	ldr	r0, [r7, #24]
 80018b4:	f000 fe14 	bl	80024e0 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, patch), 		UINT16_TYPE, 	"VerL", &entry->patch);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3304      	adds	r3, #4
 80018bc:	1d39      	adds	r1, r7, #4
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <entityBoardInit+0x2e8>)
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2304      	movs	r3, #4
 80018ca:	2201      	movs	r2, #1
 80018cc:	69b8      	ldr	r0, [r7, #24]
 80018ce:	f000 fe07 	bl	80024e0 <initField>

    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _1), UINT8_TYPE,                "F1", &entry->_1);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3306      	adds	r3, #6
 80018d6:	1d39      	adds	r1, r7, #4
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <entityBoardInit+0x2ec>)
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2301      	movs	r3, #1
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2306      	movs	r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	69b8      	ldr	r0, [r7, #24]
 80018e8:	f000 fdfa 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _2), UINT8_TYPE,                "F2", &entry->_2);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3307      	adds	r3, #7
 80018f0:	1d39      	adds	r1, r7, #4
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <entityBoardInit+0x2f0>)
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2307      	movs	r3, #7
 80018fe:	2200      	movs	r2, #0
 8001900:	69b8      	ldr	r0, [r7, #24]
 8001902:	f000 fded 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _3), UINT16_TYPE,               "F3", &entry->_3);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3308      	adds	r3, #8
 800190a:	1d39      	adds	r1, r7, #4
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	4b54      	ldr	r3, [pc, #336]	; (8001a60 <entityBoardInit+0x2f4>)
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2302      	movs	r3, #2
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2308      	movs	r3, #8
 8001918:	2200      	movs	r2, #0
 800191a:	69b8      	ldr	r0, [r7, #24]
 800191c:	f000 fde0 	bl	80024e0 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _4), UINT24_TYPE,               "F4", &entry->_4);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _5), UINT32_TYPE,               "F5", &entry->_5);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3310      	adds	r3, #16
 8001924:	1d39      	adds	r1, r7, #4
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <entityBoardInit+0x2f8>)
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2303      	movs	r3, #3
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2310      	movs	r3, #16
 8001932:	2200      	movs	r2, #0
 8001934:	69b8      	ldr	r0, [r7, #24]
 8001936:	f000 fdd3 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _6), UINT64_TYPE,               "F6", &entry->_6);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3318      	adds	r3, #24
 800193e:	1d39      	adds	r1, r7, #4
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <entityBoardInit+0x2fc>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2304      	movs	r3, #4
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2318      	movs	r3, #24
 800194c:	2200      	movs	r2, #0
 800194e:	69b8      	ldr	r0, [r7, #24]
 8001950:	f000 fdc6 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _7), CHAR_TYPE,                 "F7", &entry->_7);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3320      	adds	r3, #32
 8001958:	1d39      	adds	r1, r7, #4
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <entityBoardInit+0x300>)
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2305      	movs	r3, #5
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2320      	movs	r3, #32
 8001966:	2200      	movs	r2, #0
 8001968:	69b8      	ldr	r0, [r7, #24]
 800196a:	f000 fdb9 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _8), INT8_TYPE,                 "F8", &entry->_8);
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3321      	adds	r3, #33	; 0x21
 8001972:	1d39      	adds	r1, r7, #4
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <entityBoardInit+0x304>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2306      	movs	r3, #6
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2321      	movs	r3, #33	; 0x21
 8001980:	2200      	movs	r2, #0
 8001982:	69b8      	ldr	r0, [r7, #24]
 8001984:	f000 fdac 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _9), INT16_TYPE,                "F9", &entry->_9);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3322      	adds	r3, #34	; 0x22
 800198c:	1d39      	adds	r1, r7, #4
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <entityBoardInit+0x308>)
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2307      	movs	r3, #7
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2322      	movs	r3, #34	; 0x22
 800199a:	2200      	movs	r2, #0
 800199c:	69b8      	ldr	r0, [r7, #24]
 800199e:	f000 fd9f 	bl	80024e0 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _10), INT24_TYPE,               "F10", &entry->_10);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _11), INT32_TYPE,               "F11", &entry->_11);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3328      	adds	r3, #40	; 0x28
 80019a6:	1d39      	adds	r1, r7, #4
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <entityBoardInit+0x30c>)
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2308      	movs	r3, #8
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2328      	movs	r3, #40	; 0x28
 80019b4:	2200      	movs	r2, #0
 80019b6:	69b8      	ldr	r0, [r7, #24]
 80019b8:	f000 fd92 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _12), INT64_TYPE,               "F12", &entry->_12);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3330      	adds	r3, #48	; 0x30
 80019c0:	1d39      	adds	r1, r7, #4
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <entityBoardInit+0x310>)
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2309      	movs	r3, #9
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2330      	movs	r3, #48	; 0x30
 80019ce:	2200      	movs	r2, #0
 80019d0:	69b8      	ldr	r0, [r7, #24]
 80019d2:	f000 fd85 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _13), FLOAT_TYPE,               "F13", &entry->_13);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	1d39      	adds	r1, r7, #4
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <entityBoardInit+0x314>)
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	230a      	movs	r3, #10
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2338      	movs	r3, #56	; 0x38
 80019e8:	2200      	movs	r2, #0
 80019ea:	69b8      	ldr	r0, [r7, #24]
 80019ec:	f000 fd78 	bl	80024e0 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _14), DOUBLE_TYPE,              "F14", &entry->_14);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3340      	adds	r3, #64	; 0x40
 80019f4:	1d39      	adds	r1, r7, #4
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <entityBoardInit+0x318>)
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	230b      	movs	r3, #11
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	2200      	movs	r2, #0
 8001a04:	69b8      	ldr	r0, [r7, #24]
 8001a06:	f000 fd6b 	bl	80024e0 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _15), LONG_DOUBLE_TYPE,         "F15", &entry->_15);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _16), BOOL_TYPE,                "F16", &entry->_16);
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3350      	adds	r3, #80	; 0x50
 8001a0e:	1d39      	adds	r1, r7, #4
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <entityBoardInit+0x31c>)
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	230d      	movs	r3, #13
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2350      	movs	r3, #80	; 0x50
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	69b8      	ldr	r0, [r7, #24]
 8001a20:	f000 fd5e 	bl	80024e0 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _17), REG_TYPE,                 "F17", &entry->_17);
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _18), SREG_TYPE,                "F18", &entry->_18);

	entry->boardId 	= INIT_BOARD_ID;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
	entry->major 	= BOARD_MAJOR;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	705a      	strb	r2, [r3, #1]
	entry->minor 	= BOARD_MINOR;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2200      	movs	r2, #0
 8001a34:	709a      	strb	r2, [r3, #2]
	entry->patch	= BOARD_PATCHLEVEL;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	809a      	strh	r2, [r3, #4]
	board_entry = entry;
 8001a3c:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <entityBoardInit+0x320>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	6013      	str	r3, [r2, #0]
}
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	0800cb68 	.word	0x0800cb68
 8001a4c:	0800cb70 	.word	0x0800cb70
 8001a50:	0800cb78 	.word	0x0800cb78
 8001a54:	0800cb80 	.word	0x0800cb80
 8001a58:	0800cb88 	.word	0x0800cb88
 8001a5c:	0800cb8c 	.word	0x0800cb8c
 8001a60:	0800cb90 	.word	0x0800cb90
 8001a64:	0800cb94 	.word	0x0800cb94
 8001a68:	0800cb98 	.word	0x0800cb98
 8001a6c:	0800cb9c 	.word	0x0800cb9c
 8001a70:	0800cba0 	.word	0x0800cba0
 8001a74:	0800cba4 	.word	0x0800cba4
 8001a78:	0800cba8 	.word	0x0800cba8
 8001a7c:	0800cbac 	.word	0x0800cbac
 8001a80:	0800cbb0 	.word	0x0800cbb0
 8001a84:	0800cbb4 	.word	0x0800cbb4
 8001a88:	0800cbb8 	.word	0x0800cbb8
 8001a8c:	2000028c 	.word	0x2000028c

08001a90 <HAL_UART_RxCpltCallback>:



// uart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_UART_RxCpltCallback+0x54>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d11c      	bne.n	8001adc <HAL_UART_RxCpltCallback+0x4c>

		RawParser_dma_receiveByte(&comm.rawparser, comm.receiveByte);
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_UART_RxCpltCallback+0x58>)
 8001aa4:	f893 3a34 	ldrb.w	r3, [r3, #2612]	; 0xa34
 8001aa8:	75fb      	strb	r3, [r7, #23]

// receive functions-----------------------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_receiveByte(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == NULL), M_EMPTY, return, "RawParser_dma_receiveByte: No valid input");
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_UART_RxCpltCallback+0x5c>)
 8001aac:	613b      	str	r3, [r7, #16]
    reg m_receivePos            = self->m_receivePos;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_UART_RxCpltCallback+0x58>)
 8001ab0:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001ab4:	60fb      	str	r3, [r7, #12]

    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	701a      	strb	r2, [r3, #0]
    ++m_receivePos;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]

    self->m_receivePos = m_receivePos;
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_UART_RxCpltCallback+0x58>)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
		HAL_UART_Receive_IT(huart, (uint8_t*) &comm.receiveByte, 1);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4906      	ldr	r1, [pc, #24]	; (8001af0 <HAL_UART_RxCpltCallback+0x60>)
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f005 fa47 	bl	8006f6a <HAL_UART_Receive_IT>
	}
}
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40011000 	.word	0x40011000
 8001ae8:	200002a0 	.word	0x200002a0
 8001aec:	200002a8 	.word	0x200002a8
 8001af0:	20000cd4 	.word	0x20000cd4

08001af4 <CallbackManager_init>:
    CallbackManager_init(m_manager);
    return m_manager;
}

void CallbackManager_init(CallbackManager_t * const self)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_init: no valid input data", ENA, LIB);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d112      	bne.n	8001b28 <CallbackManager_init+0x34>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <CallbackManager_init+0x60>)
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	2301      	movs	r3, #1
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <CallbackManager_init+0x64>)
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2314      	movs	r3, #20
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <CallbackManager_init+0x68>)
 8001b20:	480f      	ldr	r0, [pc, #60]	; (8001b60 <CallbackManager_init+0x6c>)
 8001b22:	f003 f8ff 	bl	8004d24 <__M_Error>
 8001b26:	e011      	b.n	8001b4c <CallbackManager_init+0x58>
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e007      	b.n	8001b3e <CallbackManager_init+0x4a>
        self->workers[i] = (CallbackWorker)NULL;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	2100      	movs	r1, #0
 8001b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2bff      	cmp	r3, #255	; 0xff
 8001b42:	d9f4      	bls.n	8001b2e <CallbackManager_init+0x3a>
        self->ctx[i] = NULL;
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
    }

#ifndef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx = NULL;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	0800cc1c 	.word	0x0800cc1c
 8001b58:	0800cc88 	.word	0x0800cc88
 8001b5c:	0800cbbc 	.word	0x0800cbbc
 8001b60:	0800cc64 	.word	0x0800cc64

08001b64 <CallbackManager_addWorker>:

    return 0;
}

void CallbackManager_addWorker(CallbackManager_t * const self, const CallBManIdType id, const CallbackWorker worker, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	460b      	mov	r3, r1
 8001b72:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d112      	bne.n	8001ba0 <CallbackManager_addWorker+0x3c>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <CallbackManager_addWorker+0x54>)
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <CallbackManager_addWorker+0x58>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	232d      	movs	r3, #45	; 0x2d
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <CallbackManager_addWorker+0x5c>)
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <CallbackManager_addWorker+0x60>)
 8001b9a:	f003 f8c3 	bl	8004d24 <__M_Error>
 8001b9e:	e008      	b.n	8001bb2 <CallbackManager_addWorker+0x4e>

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    self->workers[id] = worker;
 8001ba0:	7afa      	ldrb	r2, [r7, #11]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx[id] = PREPROCESSOR_CTX_TYPE_CAST(ctx);
#else
    self->ctx = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	0800cc1c 	.word	0x0800cc1c
 8001bbc:	0800cd0c 	.word	0x0800cd0c
 8001bc0:	0800cbbc 	.word	0x0800cbbc
 8001bc4:	0800cc64 	.word	0x0800cc64

08001bc8 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
int CallbackManager_proceed(const CallbackManager_t* const self, const CallBManIdType id,
                            u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b08b      	sub	sp, #44	; 0x2c
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input data", ENA, LIB);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d113      	bne.n	8001c06 <CallbackManager_proceed+0x3e>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <CallbackManager_proceed+0x84>)
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <CallbackManager_proceed+0x88>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2341      	movs	r3, #65	; 0x41
 8001bfa:	4a16      	ldr	r2, [pc, #88]	; (8001c54 <CallbackManager_proceed+0x8c>)
 8001bfc:	4816      	ldr	r0, [pc, #88]	; (8001c58 <CallbackManager_proceed+0x90>)
 8001bfe:	f003 f891 	bl	8004d24 <__M_Error>
 8001c02:	2300      	movs	r3, #0
 8001c04:	e01e      	b.n	8001c44 <CallbackManager_proceed+0x7c>
#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    // move to cash
    const CallbackWorker worker = self->workers[id];
 8001c06:	7afa      	ldrb	r2, [r7, #11]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0e:	617b      	str	r3, [r7, #20]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx[id];
#else
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c16:	613b      	str	r3, [r7, #16]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    // do logic
    M_Assert_SafeFunctionCall((worker != (CallbackWorker)NULL), {
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <CallbackManager_proceed+0x6a>
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	697c      	ldr	r4, [r7, #20]
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	47a0      	blx	r4
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e008      	b.n	8001c44 <CallbackManager_proceed+0x7c>
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <CallbackManager_proceed+0x94>)
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2351      	movs	r3, #81	; 0x51
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <CallbackManager_proceed+0x8c>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4808      	ldr	r0, [pc, #32]	; (8001c60 <CallbackManager_proceed+0x98>)
 8001c3e:	f003 f88f 	bl	8004d60 <__M_Warning>
                                  worker(inputData, outputData, size, maxOutBufferSize, ctx);
                                  return 1;
                              });
    return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	0800cc1c 	.word	0x0800cc1c
 8001c50:	0800cd40 	.word	0x0800cd40
 8001c54:	0800cbbc 	.word	0x0800cbbc
 8001c58:	0800cc64 	.word	0x0800cc64
 8001c5c:	0800cd94 	.word	0x0800cd94
 8001c60:	0800cd70 	.word	0x0800cd70

08001c64 <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 8001c74:	79fa      	ldrb	r2, [r7, #7]
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	4053      	eors	r3, r2
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <fast_crc8_maxim_byte+0x2c>)
 8001c80:	5c9b      	ldrb	r3, [r3, r2]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	0800edc4 	.word	0x0800edc4

08001c94 <entityCMD>:
#ifdef C_ENTITY_FRAMEWORK_LIB_ENA
#include "entity_packet.h"
#include "smart_assert.h"

void entityCMD(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b0b4      	sub	sp, #208	; 0xd0
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
    M_Assert_Break((inputData == NULL) || (outputData == NULL) || (size == NULL), M_EMPTY, return, "entityCMD: invalid input");
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <entityCMD+0x20>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <entityCMD+0x20>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d114      	bne.n	8001cde <entityCMD+0x4a>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <entityCMD+0x32>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <entityCMD+0x32>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <entityCMD+0x36>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <entityCMD+0x38>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	b2d9      	uxtb	r1, r3
 8001cce:	4bb9      	ldr	r3, [pc, #740]	; (8001fb4 <entityCMD+0x320>)
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	4ab8      	ldr	r2, [pc, #736]	; (8001fb8 <entityCMD+0x324>)
 8001cd6:	48b9      	ldr	r0, [pc, #740]	; (8001fbc <entityCMD+0x328>)
 8001cd8:	f003 f824 	bl	8004d24 <__M_Error>
 8001cdc:	e1fb      	b.n	80020d6 <entityCMD+0x442>

    const reg sizeInternal = (*size);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    M_Assert_Break((sizeInternal == 0) || (maxOutBufferSize == 0), M_EMPTY, return, "entityCMD: invalid input size");
 8001ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <entityCMD+0x60>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d112      	bne.n	8001d1a <entityCMD+0x86>
 8001cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <entityCMD+0x6e>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <entityCMD+0x72>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <entityCMD+0x74>
 8001d06:	2300      	movs	r3, #0
 8001d08:	b2d9      	uxtb	r1, r3
 8001d0a:	4bad      	ldr	r3, [pc, #692]	; (8001fc0 <entityCMD+0x32c>)
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	230d      	movs	r3, #13
 8001d10:	4aa9      	ldr	r2, [pc, #676]	; (8001fb8 <entityCMD+0x324>)
 8001d12:	48ac      	ldr	r0, [pc, #688]	; (8001fc4 <entityCMD+0x330>)
 8001d14:	f003 f806 	bl	8004d24 <__M_Error>
 8001d18:	e1dd      	b.n	80020d6 <entityCMD+0x442>

    reg Wpos = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    reg Rpos = 1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
    reg entitySize = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
    const u8 cmd = inputData[0];
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf


    // write header------------------------------------------
    outputData[0] =   cmd;                     // CMD_ID
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8001d36:	701a      	strb	r2, [r3, #0]

    // do logic------------------------------------------
    switch(cmd) {
 8001d38:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001d3c:	2b0a      	cmp	r3, #10
 8001d3e:	f200 81c4 	bhi.w	80020ca <entityCMD+0x436>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <entityCMD+0xb4>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d91 	.word	0x08001d91
 8001d4c:	08001e1f 	.word	0x08001e1f
 8001d50:	08001f17 	.word	0x08001f17
 8001d54:	08001ff1 	.word	0x08001ff1
 8001d58:	08001fc9 	.word	0x08001fc9
 8001d5c:	08002083 	.word	0x08002083
 8001d60:	080020ab 	.word	0x080020ab
 8001d64:	080020ab 	.word	0x080020ab
 8001d68:	080020cb 	.word	0x080020cb
 8001d6c:	080020cb 	.word	0x080020cb
 8001d70:	08001d75 	.word	0x08001d75

    /* **********************************************************************************************************************************
     *  READ MAIN TYPE DIMENSIONS
     */
    case ENTITY_READ_DIMENSIONS: {
        readEntitiesSizes((outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d7a:	18d0      	adds	r0, r2, r3
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f000 fc1f 	bl	80025cc <readEntitiesSizes>
        break;}
 8001d8e:	e19c      	b.n	80020ca <entityCMD+0x436>
    case READ_ENTITY_DESCRIPTIONS: {
        //ENTITY_DBG_ASSERT_BUF( (Rpos + (ENTITIES_SIZEOF << 1)) > sizeInternal, M_EMPTY, return, "entityCMD: read size more than buffer");

        // read entity start
        TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber;
        readEntityNumberFromBuf(&startEntityNumber, &inputData[Rpos]);
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001da0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
/************************************************************************************
 *  Macro for user copy
 */
STATIC_FORCEINLINE void MY_CTYPE_USER_DATA_MEMCPY(reg n, void* from, void* to)
{
    switch (n) {
 8001db0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d106      	bne.n	8001dc6 <entityCMD+0x132>
//-------------------- NOT WORK --------------------------------------------------------
//    case sizeof(u64): *(u64*)to = *(u64*)from; break;
//    case sizeof(u32): *(u32*)to = *(u32*)from; break;
//    case sizeof(u16): *(u16*)to = *(u16*)from; break;
//-------------------- NOT WORK --------------------------------------------------------
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e008      	b.n	8001dd8 <entityCMD+0x144>
    default: memcpy(to, from, n); break;
 8001dc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001dca:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001dce:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001dd2:	f006 fb51 	bl	8008478 <memcpy>
 8001dd6:	bf00      	nop
    }
}
 8001dd8:	bf00      	nop
     */
#if (MAX_NUBER_OF_ENTITIES < 256U)
    (*entityNumber) = *(inputData);
#else
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF, inputData, (u8*)entityNumber);
    (*entityNumber) &= 0x0000FFFFUL;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* (MAX_NUBER_OF_ENTITIES < 256U) */
    //----------------- END --------------------------------------------------------------------------------
}
 8001de0:	bf00      	nop
        Rpos += ENTITIES_SIZEOF;
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	3302      	adds	r3, #2
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34

        // read number of entity
        //        TYPEOF_STRUCT(EntityInfo, entities_count) len; //(WARNING!!!) do not supported on old version!!!!!!!
        //        readEntityNumberFromBuf(&len, &inputData[Rpos]);
        //        Rpos += ENTITIES_SIZEOF;
        const TYPEOF_STRUCT(EntityInfo, entities_count) len = inputData[Rpos++]; // support on old version (this is glitch!!!)
 8001de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	637a      	str	r2, [r7, #52]	; 0x34
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

        // read descriptions function
        readEntitiesDescriptions(startEntityNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e00:	18d1      	adds	r1, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	460a      	mov	r2, r1
 8001e14:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001e18:	f000 fc76 	bl	8002708 <readEntitiesDescriptions>
        break;}
 8001e1c:	e155      	b.n	80020ca <entityCMD+0x436>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
}

// read entity & field number from input buffer by next position
STATIC_FORCEINLINE void readEntityFieldNumbersfromBuf(TYPEOF_STRUCT(EntityInfo, entities_count)* const entityNumber, TYPEOF_STRUCT(Entity, fields_count)* const fieldNumber, u8* const inputData, reg* const Rpos)
{
    reg Rpos_internal = (*Rpos);
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read entity number
     */
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8001e2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e32:	4413      	add	r3, r2
 8001e34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e38:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001e3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    switch (n) {
 8001e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d106      	bne.n	8001e6c <entityCMD+0x1d8>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e008      	b.n	8001e7e <entityCMD+0x1ea>
    default: memcpy(to, from, n); break;
 8001e6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001e70:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001e74:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001e78:	f006 fafe 	bl	8008478 <memcpy>
 8001e7c:	bf00      	nop
}
 8001e7e:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8001e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8001e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e94:	3302      	adds	r3, #2
 8001e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read field number
     */
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8001e9a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001ea8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    (*fieldNumber) = *(inputData);
 8001eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ebc:	801a      	strh	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    //----------------- END -----------------------------------------------
    (*Rpos) = Rpos_internal;
 8001eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
}
 8001ed0:	bf00      	nop
        TYPEOF_STRUCT(Entity, fields_count)         startFieldNumber;
        TYPEOF_STRUCT(Entity, fields_count)         len;
        readEntityFieldNumbersfromBuf(&entityNumber, &startFieldNumber, inputData, &Rpos);

        //read number of fields
        readFieldNumberFromBuf(&len, &inputData[Rpos]);
 8001ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*fieldNumber) = *(inputData);
 8001edc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
}
 8001ee6:	bf00      	nop
        Rpos += ENTITY_FIELD_SIZEOF;
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	3301      	adds	r3, #1
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34

        readEntityFields(entityNumber, startFieldNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ef0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001ef2:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001efa:	18d5      	adds	r5, r2, r3
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	462b      	mov	r3, r5
 8001f0e:	4622      	mov	r2, r4
 8001f10:	f000 fcb2 	bl	8002878 <readEntityFields>
        break;}
 8001f14:	e0d9      	b.n	80020ca <entityCMD+0x436>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	67fb      	str	r3, [r7, #124]	; 0x7c
    reg Rpos_internal = (*Rpos);
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1c:	67bb      	str	r3, [r7, #120]	; 0x78
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8001f1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f22:	4413      	add	r3, r2
 8001f24:	f107 0220 	add.w	r2, r7, #32
 8001f28:	677a      	str	r2, [r7, #116]	; 0x74
 8001f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f36:	667b      	str	r3, [r7, #100]	; 0x64
    switch (n) {
 8001f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d104      	bne.n	8001f48 <entityCMD+0x2b4>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	e005      	b.n	8001f54 <entityCMD+0x2c0>
    default: memcpy(to, from, n); break;
 8001f48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f4c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001f4e:	f006 fa93 	bl	8008478 <memcpy>
 8001f52:	bf00      	nop
}
 8001f54:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8001f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f5e:	601a      	str	r2, [r3, #0]
}
 8001f60:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8001f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f64:	3302      	adds	r3, #2
 8001f66:	67bb      	str	r3, [r7, #120]	; 0x78
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8001f68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f107 021e 	add.w	r2, r7, #30
 8001f72:	663a      	str	r2, [r7, #96]	; 0x60
 8001f74:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*fieldNumber) = *(inputData);
 8001f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f7e:	801a      	strh	r2, [r3, #0]
}
 8001f80:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f84:	3301      	adds	r3, #1
 8001f86:	67bb      	str	r3, [r7, #120]	; 0x78
    (*Rpos) = Rpos_internal;
 8001f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
}
 8001f8c:	bf00      	nop

        TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
        TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        readFieldValue(entityNumber, fieldNumber, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001f8e:	6a38      	ldr	r0, [r7, #32]
 8001f90:	8bf9      	ldrh	r1, [r7, #30]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f98:	18d4      	adds	r4, r2, r3
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	4622      	mov	r2, r4
 8001fac:	f000 fd78 	bl	8002aa0 <readFieldValue>
        break;}
 8001fb0:	e08b      	b.n	80020ca <entityCMD+0x436>
 8001fb2:	bf00      	nop
 8001fb4:	0800ce18 	.word	0x0800ce18
 8001fb8:	0800cda8 	.word	0x0800cda8
 8001fbc:	0800cdd8 	.word	0x0800cdd8
 8001fc0:	0800ce64 	.word	0x0800ce64
 8001fc4:	0800ce34 	.word	0x0800ce34

    case READ_SEVERAL_VALUES: {
        entitySize = (sizeInternal - 1U);
 8001fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
        readSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	18d0      	adds	r0, r2, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fdc:	18d1      	adds	r1, r2, r3
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fea:	f000 fe8d 	bl	8002d08 <readSeveralFieldsValues>
        break;}
 8001fee:	e06c      	b.n	80020ca <entityCMD+0x436>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	65bb      	str	r3, [r7, #88]	; 0x58
    reg Rpos_internal = (*Rpos);
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff6:	657b      	str	r3, [r7, #84]	; 0x54
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8001ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f107 0218 	add.w	r2, r7, #24
 8002002:	653a      	str	r2, [r7, #80]	; 0x50
 8002004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002006:	2302      	movs	r3, #2
 8002008:	64bb      	str	r3, [r7, #72]	; 0x48
 800200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	643b      	str	r3, [r7, #64]	; 0x40
    switch (n) {
 8002012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002014:	2b01      	cmp	r3, #1
 8002016:	d104      	bne.n	8002022 <entityCMD+0x38e>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e005      	b.n	800202e <entityCMD+0x39a>
    default: memcpy(to, from, n); break;
 8002022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002024:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002026:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002028:	f006 fa26 	bl	8008478 <memcpy>
 800202c:	bf00      	nop
}
 800202e:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8002030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29a      	uxth	r2, r3
 8002036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 800203c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203e:	3302      	adds	r3, #2
 8002040:	657b      	str	r3, [r7, #84]	; 0x54
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8002042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002046:	4413      	add	r3, r2
 8002048:	f107 0216 	add.w	r2, r7, #22
 800204c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
    (*fieldNumber) = *(inputData);
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b29a      	uxth	r2, r3
 8002056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002058:	801a      	strh	r2, [r3, #0]
}
 800205a:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800205c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205e:	3301      	adds	r3, #1
 8002060:	657b      	str	r3, [r7, #84]	; 0x54
    (*Rpos) = Rpos_internal;
 8002062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
}
 8002066:	bf00      	nop

        TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
        TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        setFieldValue(entityNumber, fieldNumber, (inputData + Rpos), (sizeInternal - Rpos));
 8002068:	69b8      	ldr	r0, [r7, #24]
 800206a:	8af9      	ldrh	r1, [r7, #22]
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	18d4      	adds	r4, r2, r3
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	4622      	mov	r2, r4
 800207c:	f001 f848 	bl	8003110 <setFieldValue>
        break;}
 8002080:	e023      	b.n	80020ca <entityCMD+0x436>

    case WRITE_SEVERAL_VALUES: {
        entitySize = (sizeInternal - 1U);
 8002082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002086:	3b01      	subs	r3, #1
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
        setSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 800208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	18d0      	adds	r0, r2, r3
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002096:	18d1      	adds	r1, r2, r3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020a4:	f001 f93c 	bl	8003320 <setSeveralFieldsValues>
        break;}
 80020a8:	e00f      	b.n	80020ca <entityCMD+0x436>
    /* **********************************************************************************************************************************
     *  WRITE/READ Values
     */
    case READ_SEVERAL_VALUES_GLUED :
    case WRITE_SEVERAL_VALUES_GLUED: {
        proceedGluedValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	18d0      	adds	r0, r2, r3
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020b6:	18d1      	adds	r1, r2, r3
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020c4:	f001 fb32 	bl	800372c <proceedGluedValues>
        break;}
 80020c8:	bf00      	nop
    case ENTITY_FLASH_OPERATION: {
        break;}

    }

    (*size) = (Wpos + entitySize);
 80020ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020d0:	441a      	add	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	601a      	str	r2, [r3, #0]
    UNUSED(ctx);
}
 80020d6:	37c8      	adds	r7, #200	; 0xc8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bdb0      	pop	{r4, r5, r7, pc}

080020dc <deleteEntitityFieldsInternal>:
 * **********************************************************************************************************************************
 */

/// delete some entity for internal using
static void deleteEntitityFieldsInternal(const reg entityNumber)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((entityNumber > entityInfo.entities_count), M_EMPTY, return, "deleteEntitityFieldsInternal: No entity for delete!!!");
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <deleteEntitityFieldsInternal+0x34>
 80020ee:	4b33      	ldr	r3, [pc, #204]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	bf8c      	ite	hi
 80020f8:	2301      	movhi	r3, #1
 80020fa:	2300      	movls	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <deleteEntitityFieldsInternal+0xe4>)
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	231b      	movs	r3, #27
 8002106:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <deleteEntitityFieldsInternal+0xe8>)
 8002108:	482f      	ldr	r0, [pc, #188]	; (80021c8 <deleteEntitityFieldsInternal+0xec>)
 800210a:	f002 fe0b 	bl	8004d24 <__M_Error>
 800210e:	e051      	b.n	80021b4 <deleteEntitityFieldsInternal+0xd8>
    M_Assert_BreakSaveCheck((entityInfo.entities[entityNumber] == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]))), M_EMPTY, return, "initEntity: entity number: %d is null", entityNumber);
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d115      	bne.n	800214c <deleteEntitityFieldsInternal+0x70>
 8002120:	4b26      	ldr	r3, [pc, #152]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <deleteEntitityFieldsInternal+0xf0>)
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	231c      	movs	r3, #28
 8002142:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <deleteEntitityFieldsInternal+0xe8>)
 8002144:	4822      	ldr	r0, [pc, #136]	; (80021d0 <deleteEntitityFieldsInternal+0xf4>)
 8002146:	f002 fded 	bl	8004d24 <__M_Error>
 800214a:	e033      	b.n	80021b4 <deleteEntitityFieldsInternal+0xd8>
    if(entityInfo.entities[entityNumber]->isHeap) {
        free(entityInfo.entities[entityNumber]->pointer);
        entityInfo.entities[entityNumber]->pointer = NULL;
    }
#else
    free(entityInfo.entities[entityNumber]->pointer);
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f006 f984 	bl	8008468 <free>
    entityInfo.entities[entityNumber]->pointer = NULL;
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
#endif /* USE_ENTITY_USER_SPACE */

    free(entityInfo.entities[entityNumber]->fields);
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4618      	mov	r0, r3
 8002180:	f006 f972 	bl	8008468 <free>
    entityInfo.entities[entityNumber]->fields = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]->fields));
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]

    free(entityInfo.entities[entityNumber]);
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f006 f961 	bl	8008468 <free>
    entityInfo.entities[entityNumber] = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]));
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <deleteEntitityFieldsInternal+0xe0>)
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000290 	.word	0x20000290
 80021c0:	0800cee4 	.word	0x0800cee4
 80021c4:	0800ce84 	.word	0x0800ce84
 80021c8:	0800ceb8 	.word	0x0800ceb8
 80021cc:	0800cf80 	.word	0x0800cf80
 80021d0:	0800cf1c 	.word	0x0800cf1c

080021d4 <deleteEntities>:
}


/// delete all entities and deallocation all memory
void deleteEntities(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <deleteEntities+0x40>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	603b      	str	r3, [r7, #0]

    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	e005      	b.n	80021f2 <deleteEntities+0x1e>
        deleteEntitityFieldsInternal(i);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff78 	bl	80020dc <deleteEntitityFieldsInternal>
    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3301      	adds	r3, #1
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d3f5      	bcc.n	80021e6 <deleteEntities+0x12>
    }

    free(entityInfo.entities);
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <deleteEntities+0x40>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4618      	mov	r0, r3
 8002200:	f006 f932 	bl	8008468 <free>
    pointerInit(sizeof(entityInfo), (u8*)&entityInfo);
 8002204:	4903      	ldr	r1, [pc, #12]	; (8002214 <deleteEntities+0x40>)
 8002206:	200c      	movs	r0, #12
 8002208:	f002 f85e 	bl	80042c8 <pointerInit>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000290 	.word	0x20000290

08002218 <newEntities>:



/// allocation new entities pointers
int newEntities(const reg numberOfEntities)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af04      	add	r7, sp, #16
 800221e:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((numberOfEntities > MAX_NUBER_OF_ENTITIES), M_EMPTY, return ENTITY_ERROR, "newEntities: No valid input number of entities, value: %d, max: %d", numberOfEntities, MAX_NUBER_OF_ENTITIES);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002226:	d915      	bls.n	8002254 <newEntities+0x3c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800222e:	bf8c      	ite	hi
 8002230:	2301      	movhi	r3, #1
 8002232:	2300      	movls	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <newEntities+0x8c>)
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2359      	movs	r3, #89	; 0x59
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <newEntities+0x90>)
 800224a:	4818      	ldr	r0, [pc, #96]	; (80022ac <newEntities+0x94>)
 800224c:	f002 fd6a 	bl	8004d24 <__M_Error>
 8002250:	2300      	movs	r3, #0
 8002252:	e022      	b.n	800229a <newEntities+0x82>

    deleteEntities(); // delete all entities
 8002254:	f7ff ffbe 	bl	80021d4 <deleteEntities>

    entityInfo.entities = (Entity**) calloc(numberOfEntities, sizeof(Entity*)); // allocation & initialization all entity pointers
 8002258:	2104      	movs	r1, #4
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f005 fe3c 	bl	8007ed8 <calloc>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <newEntities+0x98>)
 8002266:	609a      	str	r2, [r3, #8]
    M_Assert_BreakSaveCheck((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities))), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entity pointers");
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <newEntities+0x98>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d110      	bne.n	8002292 <newEntities+0x7a>
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <newEntities+0x98>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	4619      	mov	r1, r3
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <newEntities+0x9c>)
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	235e      	movs	r3, #94	; 0x5e
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <newEntities+0x90>)
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <newEntities+0xa0>)
 800228a:	f002 fd4b 	bl	8004d24 <__M_Error>
 800228e:	2300      	movs	r3, #0
 8002290:	e003      	b.n	800229a <newEntities+0x82>

    entityInfo.allocated_entity_pointers = numberOfEntities;
 8002292:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <newEntities+0x98>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6013      	str	r3, [r2, #0]
    return ENTITY_OK;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	0800d000 	.word	0x0800d000
 80022a8:	0800ce84 	.word	0x0800ce84
 80022ac:	0800cfd4 	.word	0x0800cfd4
 80022b0:	20000290 	.word	0x20000290
 80022b4:	0800d08c 	.word	0x0800d08c
 80022b8:	0800d044 	.word	0x0800d044

080022bc <initEntity>:


/// allocation entitites pointer & fields
int initEntity(reg* const entityNumber, const reg NumberOfFields, const reg pointerSize, const char descr[ENTITY_DESCRIPTION_SIZE], const b isCustomSpace, const b isHeap, void* arg)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b093      	sub	sp, #76	; 0x4c
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((NumberOfFields > MAX_NUBER_OF_FIELDS), M_EMPTY, return ENTITY_ERROR, "initEntity: No valid input number of fields, value: %d, max: %d", NumberOfFields, MAX_NUBER_OF_FIELDS);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2bff      	cmp	r3, #255	; 0xff
 80022ce:	d913      	bls.n	80022f8 <initEntity+0x3c>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2bff      	cmp	r3, #255	; 0xff
 80022d4:	bf8c      	ite	hi
 80022d6:	2301      	movhi	r3, #1
 80022d8:	2300      	movls	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	23ff      	movs	r3, #255	; 0xff
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	4b71      	ldr	r3, [pc, #452]	; (80024ac <initEntity+0x1f0>)
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2368      	movs	r3, #104	; 0x68
 80022ec:	4a70      	ldr	r2, [pc, #448]	; (80024b0 <initEntity+0x1f4>)
 80022ee:	4871      	ldr	r0, [pc, #452]	; (80024b4 <initEntity+0x1f8>)
 80022f0:	f002 fd18 	bl	8004d24 <__M_Error>
 80022f4:	2300      	movs	r3, #0
 80022f6:	e0d4      	b.n	80024a2 <initEntity+0x1e6>

    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80022f8:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <initEntity+0x1fc>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
    const TYPEOF_STRUCT(EntityInfo, allocated_entity_pointers) allocated_entity_pointers = entityInfo.allocated_entity_pointers;
 80022fe:	4b6e      	ldr	r3, [pc, #440]	; (80024b8 <initEntity+0x1fc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c

    M_Assert_BreakSaveCheck((entities_count >= allocated_entity_pointers), M_EMPTY, return ENTITY_ERROR, "initEntity: There is no free entity for initialization!!!, use /newEntities/ function before");
 8002304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	429a      	cmp	r2, r3
 800230a:	d310      	bcc.n	800232e <initEntity+0x72>
 800230c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	429a      	cmp	r2, r3
 8002312:	bf2c      	ite	cs
 8002314:	2301      	movcs	r3, #1
 8002316:	2300      	movcc	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	4b67      	ldr	r3, [pc, #412]	; (80024bc <initEntity+0x200>)
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	236d      	movs	r3, #109	; 0x6d
 8002322:	4a63      	ldr	r2, [pc, #396]	; (80024b0 <initEntity+0x1f4>)
 8002324:	4866      	ldr	r0, [pc, #408]	; (80024c0 <initEntity+0x204>)
 8002326:	f002 fcfd 	bl	8004d24 <__M_Error>
 800232a:	2300      	movs	r3, #0
 800232c:	e0b9      	b.n	80024a2 <initEntity+0x1e6>

    char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	f107 0318 	add.w	r3, r7, #24
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	721a      	strb	r2, [r3, #8]

    // allocation pointer to Entity--------------------------------------------------------------------------------------------------------------------------------------------------------------
    Entity* const new_entity = entityInfo.entities[entities_count] = (Entity*) calloc(1, sizeof(Entity));
 800233e:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <initEntity+0x1fc>)
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	18d4      	adds	r4, r2, r3
 8002348:	2110      	movs	r1, #16
 800234a:	2001      	movs	r0, #1
 800234c:	f005 fdc4 	bl	8007ed8 <calloc>
 8002350:	4603      	mov	r3, r0
 8002352:	6023      	str	r3, [r4, #0]
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
    M_Assert_BreakSaveCheck(new_entity == NULLPTR(Entity*), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entitity");
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <initEntity+0xc2>
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	4b55      	ldr	r3, [pc, #340]	; (80024c4 <initEntity+0x208>)
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2373      	movs	r3, #115	; 0x73
 8002372:	4a4f      	ldr	r2, [pc, #316]	; (80024b0 <initEntity+0x1f4>)
 8002374:	4854      	ldr	r0, [pc, #336]	; (80024c8 <initEntity+0x20c>)
 8002376:	f002 fcd5 	bl	8004d24 <__M_Error>
 800237a:	2300      	movs	r3, #0
 800237c:	e091      	b.n	80024a2 <initEntity+0x1e6>

    // copy entity description-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if(descr) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <initEntity+0xd4>
        memcpy(new_entity->descr, descr, ENTITY_DESCRIPTION_SIZE);
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	3304      	adds	r3, #4
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e00a      	b.n	80023a6 <initEntity+0xea>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)descr, (u8 *)new_entity->descr);
    } else {
        sprintf(str, "E%d", entities_count);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002396:	494d      	ldr	r1, [pc, #308]	; (80024cc <initEntity+0x210>)
 8002398:	4618      	mov	r0, r3
 800239a:	f007 f9cf 	bl	800973c <siprintf>
        memcpy(new_entity->descr, str, ENTITY_DESCRIPTION_SIZE);
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	3304      	adds	r3, #4
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	601a      	str	r2, [r3, #0]
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, (isCustomSpace ? "newEntities: Invalid user input space" : "newEntities: No memory for allocation Entitity"));

#else

    new_entity->pointer = calloc(1, pointerSize);
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	2001      	movs	r0, #1
 80023aa:	f005 fd95 	bl	8007ed8 <calloc>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	601a      	str	r2, [r3, #0]
    UNUSED(isCustomSpace);
    UNUSED(isHeap);
    UNUSED(arg);

    M_Assert_BreakSaveCheck((new_entity->pointer == NULL), {
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <initEntity+0x12a>
 80023be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023c0:	f7ff fe8c 	bl	80020dc <deleteEntitityFieldsInternal>
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4619      	mov	r1, r3
 80023d4:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <initEntity+0x208>)
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2396      	movs	r3, #150	; 0x96
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <initEntity+0x1f4>)
 80023dc:	483c      	ldr	r0, [pc, #240]	; (80024d0 <initEntity+0x214>)
 80023de:	f002 fca1 	bl	8004d24 <__M_Error>
 80023e2:	2300      	movs	r3, #0
 80023e4:	e05d      	b.n	80024a2 <initEntity+0x1e6>

#endif /* USE_ENTITY_USER_SPACE */


    // allocation pointer to Fields------------------------------------------------------------------------------------------------------------------------------------------------------------
    new_entity->fields = (EntityField*) calloc(NumberOfFields, sizeof(EntityField));
 80023e6:	2120      	movs	r1, #32
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f005 fd75 	bl	8007ed8 <calloc>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	60da      	str	r2, [r3, #12]
    M_Assert_BreakSaveCheck((new_entity->fields == NULLPTR(TYPEOF_STRUCT(Entity, fields))), {
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <initEntity+0x16a>
 80023fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002400:	f7ff fe6c 	bl	80020dc <deleteEntitityFieldsInternal>
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	4619      	mov	r1, r3
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <initEntity+0x218>)
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	239f      	movs	r3, #159	; 0x9f
 800241a:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <initEntity+0x1f4>)
 800241c:	482e      	ldr	r0, [pc, #184]	; (80024d8 <initEntity+0x21c>)
 800241e:	f002 fc81 	bl	8004d24 <__M_Error>
 8002422:	2300      	movs	r3, #0
 8002424:	e03d      	b.n	80024a2 <initEntity+0x1e6>
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, "newEntities: No memory for allocation EntityField");

    new_entity->fields_count = NumberOfFields;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	b29a      	uxth	r2, r3
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	811a      	strh	r2, [r3, #8]

    // initialization Fields-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    for(reg i = 0; i < NumberOfFields; ++i) {
 800242e:	2300      	movs	r3, #0
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
 8002432:	e028      	b.n	8002486 <initEntity+0x1ca>
        EntityField* const    field = &new_entity->fields[i];
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	015b      	lsls	r3, r3, #5
 800243c:	4413      	add	r3, r2
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef USE_ENTITY_CALLBACKS

#   ifdef USE_ENTITY_READ_CALLBACK
        field->rdCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
        field->rdCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
#   endif /* USE_ENTITY_READ_CALLBACK */

#   ifdef USE_ENTITY_WRITE_CALLBACK
        field->wrCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
        field->wrCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
#   endif /* USE_ENTITY_WRITE_CALLBACK */

#endif /* USE_ENTITY_CALLBACKS */

        field->bitFlags  = 0;
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
        field->shift     = 0;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
        field->type      = VOID_TYPE;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	2200      	movs	r2, #0
 8002468:	761a      	strb	r2, [r3, #24]

        sprintf(str, "F%d", i);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002470:	491a      	ldr	r1, [pc, #104]	; (80024dc <initEntity+0x220>)
 8002472:	4618      	mov	r0, r3
 8002474:	f007 f962 	bl	800973c <siprintf>
        memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	3319      	adds	r3, #25
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	601a      	str	r2, [r3, #0]
    for(reg i = 0; i < NumberOfFields; ++i) {
 8002480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002482:	3301      	adds	r3, #1
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
 8002486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	d3d2      	bcc.n	8002434 <initEntity+0x178>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);
    }

    (*entityNumber) = entities_count;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002492:	601a      	str	r2, [r3, #0]
    ++entities_count;
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	3301      	adds	r3, #1
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
    entityInfo.entities_count = entities_count;
 800249a:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <initEntity+0x1fc>)
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	6053      	str	r3, [r2, #4]
    return ENTITY_OK;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	373c      	adds	r7, #60	; 0x3c
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd90      	pop	{r4, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0800d0ec 	.word	0x0800d0ec
 80024b0:	0800ce84 	.word	0x0800ce84
 80024b4:	0800d0c4 	.word	0x0800d0c4
 80024b8:	20000290 	.word	0x20000290
 80024bc:	0800d15c 	.word	0x0800d15c
 80024c0:	0800d12c 	.word	0x0800d12c
 80024c4:	0800d1dc 	.word	0x0800d1dc
 80024c8:	0800d1bc 	.word	0x0800d1bc
 80024cc:	0800d20c 	.word	0x0800d20c
 80024d0:	0800d210 	.word	0x0800d210
 80024d4:	0800d270 	.word	0x0800d270
 80024d8:	0800d230 	.word	0x0800d230
 80024dc:	0800d2a4 	.word	0x0800d2a4

080024e0 <initField>:
 * **********************************************************************************************************************************
 */

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af04      	add	r7, sp, #16
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL), M_EMPTY, return ENTITY_ERROR, "initField: No valid input");
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <initField+0x1a>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d112      	bne.n	8002520 <initField+0x40>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <initField+0x26>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <initField+0x2a>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <initField+0x2c>
 800250a:	2300      	movs	r3, #0
 800250c:	b2d9      	uxtb	r1, r3
 800250e:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <initField+0xd8>)
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	23cf      	movs	r3, #207	; 0xcf
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <initField+0xdc>)
 8002516:	482a      	ldr	r0, [pc, #168]	; (80025c0 <initField+0xe0>)
 8002518:	f002 fc04 	bl	8004d24 <__M_Error>
 800251c:	2300      	movs	r3, #0
 800251e:	e046      	b.n	80025ae <initField+0xce>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && !(type == REG_TYPE || type == SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initField: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61fb      	str	r3, [r7, #28]
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	891b      	ldrh	r3, [r3, #8]
 800252a:	837b      	strh	r3, [r7, #26]

    M_Assert_BreakElseSaveCheck((fields_count > fieldNumber_readed), {
 800252c:	8b7b      	ldrh	r3, [r7, #26]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	429a      	cmp	r2, r3
 8002532:	d228      	bcs.n	8002586 <initField+0xa6>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	015b      	lsls	r3, r3, #5
 800253c:	4413      	add	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	611a      	str	r2, [r3, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	615a      	str	r2, [r3, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002552:	761a      	strb	r2, [r3, #24]
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <initField+0x84>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3319      	adds	r3, #25
 800255e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <initField+0x96>
 800256a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800256e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002570:	4618      	mov	r0, r3
 8002572:	f001 fe83 	bl	800427c <cTypePointerInit>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3301      	adds	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	2301      	movs	r3, #1
 8002584:	e013      	b.n	80025ae <initField+0xce>
 8002586:	8b7b      	ldrh	r3, [r7, #26]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	429a      	cmp	r2, r3
 800258c:	bf34      	ite	cc
 800258e:	2301      	movcc	r3, #1
 8002590:	2300      	movcs	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	8b7b      	ldrh	r3, [r7, #26]
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <initField+0xe4>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	23d8      	movs	r3, #216	; 0xd8
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <initField+0xdc>)
 80025a6:	4808      	ldr	r0, [pc, #32]	; (80025c8 <initField+0xe8>)
 80025a8:	f002 fbbc 	bl	8004d24 <__M_Error>
                                    ++fieldNumber_readed;
                                    (*fieldNumber) = fieldNumber_readed;
                                    return ENTITY_OK;
                                }, M_EMPTY, M_EMPTY, "initField: fieldNumber: &d,  is too long than allocated fields_count: %d", fieldNumber_readed, fields_count);

    return ENTITY_ERROR;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	0800d2e4 	.word	0x0800d2e4
 80025bc:	0800ce84 	.word	0x0800ce84
 80025c0:	0800d2a8 	.word	0x0800d2a8
 80025c4:	0800d348 	.word	0x0800d348
 80025c8:	0800d300 	.word	0x0800d300

080025cc <readEntitiesSizes>:
}

#endif /* USE_ENTITY_PING */

int readEntitiesSizes(u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: No allocated entities or invalid input");
 80025d8:	4b44      	ldr	r3, [pc, #272]	; (80026ec <readEntitiesSizes+0x120>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <readEntitiesSizes+0x20>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <readEntitiesSizes+0x20>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d116      	bne.n	800261a <readEntitiesSizes+0x4e>
 80025ec:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <readEntitiesSizes+0x120>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <readEntitiesSizes+0x34>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <readEntitiesSizes+0x34>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <readEntitiesSizes+0x38>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <readEntitiesSizes+0x3a>
 8002604:	2300      	movs	r3, #0
 8002606:	b2d9      	uxtb	r1, r3
 8002608:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <readEntitiesSizes+0x124>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	231f      	movs	r3, #31
 800260e:	4a39      	ldr	r2, [pc, #228]	; (80026f4 <readEntitiesSizes+0x128>)
 8002610:	4839      	ldr	r0, [pc, #228]	; (80026f8 <readEntitiesSizes+0x12c>)
 8002612:	f002 fb87 	bl	8004d24 <__M_Error>
 8002616:	2300      	movs	r3, #0
 8002618:	e064      	b.n	80026e4 <readEntitiesSizes+0x118>
    ENTITY_DBG_ASSERT_BUF(maxOutBufferSize < (8 + TYPE_ARRAY_LENGTH), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: sizes read more than buffer");
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b19      	cmp	r3, #25
 800261e:	d80f      	bhi.n	8002640 <readEntitiesSizes+0x74>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b19      	cmp	r3, #25
 8002624:	bf94      	ite	ls
 8002626:	2301      	movls	r3, #1
 8002628:	2300      	movhi	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4619      	mov	r1, r3
 800262e:	4b33      	ldr	r3, [pc, #204]	; (80026fc <readEntitiesSizes+0x130>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2320      	movs	r3, #32
 8002634:	4a2f      	ldr	r2, [pc, #188]	; (80026f4 <readEntitiesSizes+0x128>)
 8002636:	4832      	ldr	r0, [pc, #200]	; (8002700 <readEntitiesSizes+0x134>)
 8002638:	f002 fb74 	bl	8004d24 <__M_Error>
 800263c:	2300      	movs	r3, #0
 800263e:	e051      	b.n	80026e4 <readEntitiesSizes+0x118>

    reg pos = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

    // main sizes -----------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_OK;                              // OK byte
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	617a      	str	r2, [r7, #20]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	617a      	str	r2, [r7, #20]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	2204      	movs	r2, #4
 800265e:	701a      	strb	r2, [r3, #0]

    // entities sizes -------------------------------------------------------------------------------------
    outputData[pos++] = ENTITIES_SIZEOF;                        // entities count sizeof
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	617a      	str	r2, [r7, #20]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	2202      	movs	r2, #2
 800266c:	701a      	strb	r2, [r3, #0]

    // fields sizes --------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_FIELD_SIZEOF;                    // fields count sizeof
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	617a      	str	r2, [r7, #20]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]

    outputData[pos++] = SIZEOF_STRUCT(EntityField, bitFlags);   // fields bitFlags sizeof
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	617a      	str	r2, [r7, #20]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	2204      	movs	r2, #4
 8002688:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = SIZEOF_STRUCT(EntityField, shift);      // fields shift sizeof
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	617a      	str	r2, [r7, #20]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	2204      	movs	r2, #4
 8002696:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = 1;                                      // fields type sizeof
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	617a      	str	r2, [r7, #20]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]

    // system types sizes --------------------------------------------------------------------------------
    outputData[pos++] = TYPE_ARRAY_LENGTH;                      // size array types
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	617a      	str	r2, [r7, #20]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	2212      	movs	r2, #18
 80026b2:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e00d      	b.n	80026d6 <readEntitiesSizes+0x10a>
        outputData[pos++] = typeLengthMappingArray[i];          // copy array types
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <readEntitiesSizes+0x138>)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	617a      	str	r2, [r7, #20]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	b2ca      	uxtb	r2, r1
 80026ce:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	3301      	adds	r3, #1
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b11      	cmp	r3, #17
 80026da:	d9ee      	bls.n	80026ba <readEntitiesSizes+0xee>
    }

    (*size) = pos;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000290 	.word	0x20000290
 80026f0:	0800d9f0 	.word	0x0800d9f0
 80026f4:	0800d94c 	.word	0x0800d94c
 80026f8:	0800d980 	.word	0x0800d980
 80026fc:	0800da58 	.word	0x0800da58
 8002700:	0800da2c 	.word	0x0800da2c
 8002704:	0800eec4 	.word	0x0800eec4

08002708 <readEntitiesDescriptions>:

int readEntitiesDescriptions(const TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber, TYPEOF_STRUCT(EntityInfo, entities_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[0].descr, ... entities[entities_count].descr}
 8002708:	b580      	push	{r7, lr}
 800270a:	b08e      	sub	sp, #56	; 0x38
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (2 + ENTITIES_SIZEOF)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesDescriptions: No allocated entities or invalid input");
 8002716:	4b52      	ldr	r3, [pc, #328]	; (8002860 <readEntitiesDescriptions+0x158>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <readEntitiesDescriptions+0x28>
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	2b03      	cmp	r3, #3
 8002722:	d905      	bls.n	8002730 <readEntitiesDescriptions+0x28>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <readEntitiesDescriptions+0x28>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d119      	bne.n	8002764 <readEntitiesDescriptions+0x5c>
 8002730:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <readEntitiesDescriptions+0x158>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <readEntitiesDescriptions+0x42>
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	2b03      	cmp	r3, #3
 800273c:	d905      	bls.n	800274a <readEntitiesDescriptions+0x42>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <readEntitiesDescriptions+0x42>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <readEntitiesDescriptions+0x46>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <readEntitiesDescriptions+0x48>
 800274e:	2300      	movs	r3, #0
 8002750:	b2d9      	uxtb	r1, r3
 8002752:	4b44      	ldr	r3, [pc, #272]	; (8002864 <readEntitiesDescriptions+0x15c>)
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	4a43      	ldr	r2, [pc, #268]	; (8002868 <readEntitiesDescriptions+0x160>)
 800275a:	4844      	ldr	r0, [pc, #272]	; (800286c <readEntitiesDescriptions+0x164>)
 800275c:	f002 fae2 	bl	8004d24 <__M_Error>
 8002760:	2300      	movs	r3, #0
 8002762:	e079      	b.n	8002858 <readEntitiesDescriptions+0x150>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002764:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <readEntitiesDescriptions+0x158>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

    if(startEntityNumber < entities_count) {
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	429a      	cmp	r2, r3
 8002770:	d26a      	bcs.n	8002848 <readEntitiesDescriptions+0x140>
        reg pos = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c

        outputData[pos++] = ENTITY_OK;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	2204      	movs	r2, #4
 8002790:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(EntityInfo, entities_count) tmp = (entities_count - startEntityNumber);
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	623b      	str	r3, [r7, #32]
        len = MIN(tmp, len);
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	4293      	cmp	r3, r2
 80027a0:	bf28      	it	cs
 80027a2:	4613      	movcs	r3, r2
 80027a4:	60bb      	str	r3, [r7, #8]
        //#else
        //        len &= 0xFFFFUL;
        //        ENTITY_BYTE_CPY(ENTITIES_SIZEOF, (u8*)&len, &outputData[pos]);
        //        pos += ENTITIES_SIZEOF;
        //#endif /* MAX_NUBER_OF_ENTITIES < 256 */
        outputData[pos++] = (u8)(len & 0xFFU); // support on old version (this is glitch!!!)
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]
        //---------------------------================================----------------------------------==================================-----------------------------------================================---------------------------===========================---------------------------=========================------------------------
        len += startEntityNumber;
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60bb      	str	r3, [r7, #8]

        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c2:	e038      	b.n	8002836 <readEntitiesDescriptions+0x12e>

            ENTITY_DBG_ASSERT_BUF( (pos + ENTITY_DESCRIPTION_SIZE) > maxOutBufferSize, M_EMPTY, {
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	3304      	adds	r3, #4
 80027c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d210      	bcs.n	80027f0 <readEntitiesDescriptions+0xe8>
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	3304      	adds	r3, #4
 80027d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d4:	429a      	cmp	r2, r3
 80027d6:	bf34      	ite	cc
 80027d8:	2301      	movcc	r3, #1
 80027da:	2300      	movcs	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <readEntitiesDescriptions+0x168>)
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	235a      	movs	r3, #90	; 0x5a
 80027e6:	4a20      	ldr	r2, [pc, #128]	; (8002868 <readEntitiesDescriptions+0x160>)
 80027e8:	4822      	ldr	r0, [pc, #136]	; (8002874 <readEntitiesDescriptions+0x16c>)
 80027ea:	f002 fa9b 	bl	8004d24 <__M_Error>
 80027ee:	e02c      	b.n	800284a <readEntitiesDescriptions+0x142>
                                       goto error;
                                   }, "readEntitiesDescriptions: description read size more than buffer");


            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)entityInfo.entities[i]->descr, &outputData[pos]);
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <readEntitiesDescriptions+0x158>)
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1d1a      	adds	r2, r3, #4
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	440b      	add	r3, r1
 8002804:	2104      	movs	r1, #4
 8002806:	61f9      	str	r1, [r7, #28]
 8002808:	61ba      	str	r2, [r7, #24]
 800280a:	617b      	str	r3, [r7, #20]
    switch (n) {
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d104      	bne.n	800281c <readEntitiesDescriptions+0x114>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e005      	b.n	8002828 <readEntitiesDescriptions+0x120>
    default: memcpy(to, from, n); break;
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f005 fe29 	bl	8008478 <memcpy>
 8002826:	bf00      	nop
}
 8002828:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	3304      	adds	r3, #4
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	3301      	adds	r3, #1
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 8002836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d3c2      	bcc.n	80027c4 <readEntitiesDescriptions+0xbc>
        }

        (*size) = pos;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002842:	601a      	str	r2, [r3, #0]
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002844:	2301      	movs	r3, #1
 8002846:	e007      	b.n	8002858 <readEntitiesDescriptions+0x150>
        goto error;
 8002848:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3730      	adds	r7, #48	; 0x30
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000290 	.word	0x20000290
 8002864:	0800db28 	.word	0x0800db28
 8002868:	0800d94c 	.word	0x0800d94c
 800286c:	0800da88 	.word	0x0800da88
 8002870:	0800dba0 	.word	0x0800dba0
 8002874:	0800db6c 	.word	0x0800db6c

08002878 <readEntityFields>:

int readEntityFields(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) startFieldNumber, TYPEOF_STRUCT(Entity, fields_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[entityNum].fields[startFieldNum], ... entities[num].fields[entities[num].fields_count]}
 8002878:	b580      	push	{r7, lr}
 800287a:	b096      	sub	sp, #88	; 0x58
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	817b      	strh	r3, [r7, #10]
 8002886:	4613      	mov	r3, r2
 8002888:	813b      	strh	r3, [r7, #8]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITY_FIELD_SIZEOF << 1))) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntityFields: No allocated entities or invalid input");
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <readEntityFields+0x210>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <readEntityFields+0x2c>
 8002892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002894:	2b02      	cmp	r3, #2
 8002896:	d905      	bls.n	80028a4 <readEntityFields+0x2c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <readEntityFields+0x2c>
 800289e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d119      	bne.n	80028d8 <readEntityFields+0x60>
 80028a4:	4b78      	ldr	r3, [pc, #480]	; (8002a88 <readEntityFields+0x210>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <readEntityFields+0x46>
 80028ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d905      	bls.n	80028be <readEntityFields+0x46>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <readEntityFields+0x46>
 80028b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <readEntityFields+0x4a>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <readEntityFields+0x4c>
 80028c2:	2300      	movs	r3, #0
 80028c4:	b2d9      	uxtb	r1, r3
 80028c6:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <readEntityFields+0x214>)
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2376      	movs	r3, #118	; 0x76
 80028cc:	4a70      	ldr	r2, [pc, #448]	; (8002a90 <readEntityFields+0x218>)
 80028ce:	4871      	ldr	r0, [pc, #452]	; (8002a94 <readEntityFields+0x21c>)
 80028d0:	f002 fa28 	bl	8004d24 <__M_Error>
 80028d4:	2300      	movs	r3, #0
 80028d6:	e0d3      	b.n	8002a80 <readEntityFields+0x208>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80028d8:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <readEntityFields+0x210>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
    const Entity* const entity = entityInfo.entities[entityNumber];
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <readEntityFields+0x210>)
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40
    const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 80028ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ee:	891b      	ldrh	r3, [r3, #8]
 80028f0:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f6:	429a      	cmp	r2, r3
 80028f8:	f080 80ba 	bcs.w	8002a70 <readEntityFields+0x1f8>
 80028fc:	897a      	ldrh	r2, [r7, #10]
 80028fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002900:	429a      	cmp	r2, r3
 8002902:	f080 80b5 	bcs.w	8002a70 <readEntityFields+0x1f8>
        reg pos = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	64fb      	str	r3, [r7, #76]	; 0x4c

        outputData[pos++] = ENTITY_OK;
 800290a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]

#if (MAX_NUBER_OF_FIELDS < 256U)
        outputData[pos++] = (u8)(startFieldNumber & 0xFFU);                             /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	897a      	ldrh	r2, [r7, #10]
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(Entity, fields_count) tmp = (fields_count - startFieldNumber);
 8002928:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	87bb      	strh	r3, [r7, #60]	; 0x3c
        len = MIN(tmp, len);
 8002930:	893a      	ldrh	r2, [r7, #8]
 8002932:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002934:	4293      	cmp	r3, r2
 8002936:	bf28      	it	cs
 8002938:	4613      	movcs	r3, r2
 800293a:	813b      	strh	r3, [r7, #8]
        outputData[pos++] = (u8)(len & 0xFFU);
 800293c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	893a      	ldrh	r2, [r7, #8]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]
        ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, (u8*)&len, &outputData[pos]);
        pos += ENTITY_FIELD_SIZEOF;

#endif /* MAX_NUBER_OF_FIELDS < 256 */

        len += startFieldNumber;
 800294c:	893a      	ldrh	r2, [r7, #8]
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	4413      	add	r3, r2
 8002952:	813b      	strh	r3, [r7, #8]

        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002954:	897b      	ldrh	r3, [r7, #10]
 8002956:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800295a:	e07d      	b.n	8002a58 <readEntityFields+0x1e0>
            const EntityField* const field = &entity->fields[i];
 800295c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002964:	015b      	lsls	r3, r3, #5
 8002966:	4413      	add	r3, r2
 8002968:	63bb      	str	r3, [r7, #56]	; 0x38

            ENTITY_DBG_ASSERT_BUF( ((pos + (sizeof(field->bitFlags) + sizeof(field->shift) + 1 + ENTITY_DESCRIPTION_SIZE)) > maxOutBufferSize), M_EMPTY, {
 800296a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296c:	330d      	adds	r3, #13
 800296e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002970:	429a      	cmp	r2, r3
 8002972:	d210      	bcs.n	8002996 <readEntityFields+0x11e>
 8002974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002976:	330d      	adds	r3, #13
 8002978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800297a:	429a      	cmp	r2, r3
 800297c:	bf34      	ite	cc
 800297e:	2301      	movcc	r3, #1
 8002980:	2300      	movcs	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	4b44      	ldr	r3, [pc, #272]	; (8002a98 <readEntityFields+0x220>)
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	239a      	movs	r3, #154	; 0x9a
 800298c:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <readEntityFields+0x218>)
 800298e:	4843      	ldr	r0, [pc, #268]	; (8002a9c <readEntityFields+0x224>)
 8002990:	f002 f9c8 	bl	8004d24 <__M_Error>
 8002994:	e06d      	b.n	8002a72 <readEntityFields+0x1fa>

            //            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
            //            pos += ENTITY_DESCRIPTION_SIZE;
            //-----------------=============================-----------------------------------===========================-----------------------------=================================-------------------------------===========================-------------------======================
            // this is glitch
            ENTITY_BYTE_CPY(1, (u8 *)&field->bitFlags, &outputData[pos]);
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	f103 0210 	add.w	r2, r3, #16
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a0:	440b      	add	r3, r1
 80029a2:	2101      	movs	r1, #1
 80029a4:	61f9      	str	r1, [r7, #28]
 80029a6:	61ba      	str	r2, [r7, #24]
 80029a8:	617b      	str	r3, [r7, #20]
    switch (n) {
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d104      	bne.n	80029ba <readEntityFields+0x142>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e005      	b.n	80029c6 <readEntityFields+0x14e>
    default: memcpy(to, from, n); break;
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	69b9      	ldr	r1, [r7, #24]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f005 fd5a 	bl	8008478 <memcpy>
 80029c4:	bf00      	nop
}
 80029c6:	bf00      	nop
            pos += 1;
 80029c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ca:	3301      	adds	r3, #1
 80029cc:	64fb      	str	r3, [r7, #76]	; 0x4c

            ENTITY_BYTE_CPY(2, (u8 *)&field->shift, &outputData[pos]);
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	f103 0214 	add.w	r2, r3, #20
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d8:	440b      	add	r3, r1
 80029da:	2102      	movs	r1, #2
 80029dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80029de:	627a      	str	r2, [r7, #36]	; 0x24
 80029e0:	623b      	str	r3, [r7, #32]
    switch (n) {
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d104      	bne.n	80029f2 <readEntityFields+0x17a>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e005      	b.n	80029fe <readEntityFields+0x186>
    default: memcpy(to, from, n); break;
 80029f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f6:	6a38      	ldr	r0, [r7, #32]
 80029f8:	f005 fd3e 	bl	8008478 <memcpy>
 80029fc:	bf00      	nop
}
 80029fe:	bf00      	nop
            pos += 2;
 8002a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a02:	3302      	adds	r3, #2
 8002a04:	64fb      	str	r3, [r7, #76]	; 0x4c

            outputData[pos++] = (field->type & 0xFFU);
 8002a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a12:	7e12      	ldrb	r2, [r2, #24]
 8002a14:	701a      	strb	r2, [r3, #0]

            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	f103 0219 	add.w	r2, r3, #25
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a20:	440b      	add	r3, r1
 8002a22:	2104      	movs	r1, #4
 8002a24:	6379      	str	r1, [r7, #52]	; 0x34
 8002a26:	633a      	str	r2, [r7, #48]	; 0x30
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d104      	bne.n	8002a3a <readEntityFields+0x1c2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e005      	b.n	8002a46 <readEntityFields+0x1ce>
    default: memcpy(to, from, n); break;
 8002a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a40:	f005 fd1a 	bl	8008478 <memcpy>
 8002a44:	bf00      	nop
}
 8002a46:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002a4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a52:	3301      	adds	r3, #1
 8002a54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002a58:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	f4ff af7c 	bcc.w	800295c <readEntityFields+0xe4>
            //------------------------------=========================================--------------------------------------===================================--------------------------------------=============================---------------------------------========================

        }

        (*size) = pos;
 8002a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a68:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002a6a:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e007      	b.n	8002a80 <readEntityFields+0x208>
        goto error;
 8002a70:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3750      	adds	r7, #80	; 0x50
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000290 	.word	0x20000290
 8002a8c:	0800dc90 	.word	0x0800dc90
 8002a90:	0800d94c 	.word	0x0800d94c
 8002a94:	0800dbe4 	.word	0x0800dbe4
 8002a98:	0800dd38 	.word	0x0800dd38
 8002a9c:	0800dccc 	.word	0x0800dccc

08002aa0 <readFieldValue>:
/* ******************************************************************************************************************
 * READ one field value
 *
 */
int readFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{ //send {0x01 , prt + 0, ... , ptr + getTypeLen(entities[no].fields[fieldNo].type)}
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b0a3      	sub	sp, #140	; 0x8c
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	460b      	mov	r3, r1
 8002aae:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 2) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readFieldValue: No allocated entities or invalid input");
 8002ab0:	4b8e      	ldr	r3, [pc, #568]	; (8002cec <readFieldValue+0x24c>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <readFieldValue+0x2c>
 8002ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d905      	bls.n	8002acc <readFieldValue+0x2c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <readFieldValue+0x2c>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11a      	bne.n	8002b02 <readFieldValue+0x62>
 8002acc:	4b87      	ldr	r3, [pc, #540]	; (8002cec <readFieldValue+0x24c>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <readFieldValue+0x48>
 8002ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d905      	bls.n	8002ae8 <readFieldValue+0x48>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <readFieldValue+0x48>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <readFieldValue+0x4c>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <readFieldValue+0x4e>
 8002aec:	2300      	movs	r3, #0
 8002aee:	b2d9      	uxtb	r1, r3
 8002af0:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <readFieldValue+0x250>)
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	23d0      	movs	r3, #208	; 0xd0
 8002af6:	4a7f      	ldr	r2, [pc, #508]	; (8002cf4 <readFieldValue+0x254>)
 8002af8:	487f      	ldr	r0, [pc, #508]	; (8002cf8 <readFieldValue+0x258>)
 8002afa:	f002 f913 	bl	8004d24 <__M_Error>
 8002afe:	2300      	movs	r3, #0
 8002b00:	e0ef      	b.n	8002ce2 <readFieldValue+0x242>

    Entity*         const       entity  = entityInfo.entities[entityNumber];
 8002b02:	4b7a      	ldr	r3, [pc, #488]	; (8002cec <readFieldValue+0x24c>)
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    EntityField*    const       field   = &entity->fields[fieldNumber];
 8002b10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	897b      	ldrh	r3, [r7, #10]
 8002b16:	015b      	lsls	r3, r3, #5
 8002b18:	4413      	add	r3, r2
 8002b1a:	67bb      	str	r3, [r7, #120]	; 0x78

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8002b1c:	4b73      	ldr	r3, [pc, #460]	; (8002cec <readFieldValue+0x24c>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	677b      	str	r3, [r7, #116]	; 0x74
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8002b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b24:	891b      	ldrh	r3, [r3, #8]
 8002b26:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	f080 80cf 	bcs.w	8002cd2 <readFieldValue+0x232>
 8002b34:	897a      	ldrh	r2, [r7, #10]
 8002b36:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	f080 80c9 	bcs.w	8002cd2 <readFieldValue+0x232>
        const u8        type    = field->type;
 8002b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b42:	7e1b      	ldrb	r3, [r3, #24]
 8002b44:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        const reg       typeLen = getMYCTypeLen(type);
 8002b48:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8002b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
}


STATIC_FORCEINLINE reg getMYCTypeLen(reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b50:	2b11      	cmp	r3, #17
 8002b52:	d804      	bhi.n	8002b5e <readFieldValue+0xbe>
        return typeLengthMappingArray[type];
 8002b54:	4a69      	ldr	r2, [pc, #420]	; (8002cfc <readFieldValue+0x25c>)
 8002b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5c:	e000      	b.n	8002b60 <readFieldValue+0xc0>
    }
    return 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	66fb      	str	r3, [r7, #108]	; 0x6c
        void* const     ptr     = (entity->pointer + field->shift);
 8002b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	66bb      	str	r3, [r7, #104]	; 0x68

        reg pos = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	667b      	str	r3, [r7, #100]	; 0x64

        outputData[pos++] = ENTITY_OK;
 8002b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	667a      	str	r2, [r7, #100]	; 0x64
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = type;    /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	667a      	str	r2, [r7, #100]	; 0x64
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8002b8e:	701a      	strb	r2, [r3, #0]

        ENTITY_DBG_ASSERT_BUF(((pos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8002b90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	4413      	add	r3, r2
 8002b96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d212      	bcs.n	8002bc4 <readFieldValue+0x124>
 8002b9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	bf34      	ite	cc
 8002bac:	2301      	movcc	r3, #1
 8002bae:	2300      	movcs	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <readFieldValue+0x260>)
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	23e2      	movs	r3, #226	; 0xe2
 8002bba:	4a4e      	ldr	r2, [pc, #312]	; (8002cf4 <readFieldValue+0x254>)
 8002bbc:	4851      	ldr	r0, [pc, #324]	; (8002d04 <readFieldValue+0x264>)
 8002bbe:	f002 f8b1 	bl	8004d24 <__M_Error>
 8002bc2:	e087      	b.n	8002cd4 <readFieldValue+0x234>
                                  goto error;
                              }, "readFieldValue: field read size more than buffer");

        proceedReadEntity(field->bitFlags, ptr, &outputData[pos], typeLen);
 8002bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bcc:	440b      	add	r3, r1
 8002bce:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002bd2:	657a      	str	r2, [r7, #84]	; 0x54
 8002bd4:	653b      	str	r3, [r7, #80]	; 0x50
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d016      	beq.n	8002c12 <readFieldValue+0x172>
 8002be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d011      	beq.n	8002c12 <readFieldValue+0x172>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8002bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	647b      	str	r3, [r7, #68]	; 0x44
                                        if(reg_ptr_from) {
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d050      	beq.n	8002ca0 <readFieldValue+0x200>
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
 8002c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
    MY_CTYPE_REG_CPY(to, from);
 8002c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002c10:	e046      	b.n	8002ca0 <readFieldValue+0x200>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8002c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00c      	beq.n	8002c36 <readFieldValue+0x196>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1e:	63bb      	str	r3, [r7, #56]	; 0x38
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8002c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    MY_CTYPE_REG_CPY(to, from);
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	e035      	b.n	8002ca2 <readFieldValue+0x202>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8002c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01a      	beq.n	8002c76 <readFieldValue+0x1d6>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 8002c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
                                        if(reg_ptr_from) {
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02a      	beq.n	8002ca2 <readFieldValue+0x202>
 8002c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c56:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d104      	bne.n	8002c68 <readFieldValue+0x1c8>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e005      	b.n	8002c74 <readFieldValue+0x1d4>
    default: memcpy(to, from, n); break;
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	6a39      	ldr	r1, [r7, #32]
 8002c6c:	69f8      	ldr	r0, [r7, #28]
 8002c6e:	f005 fc03 	bl	8008478 <memcpy>
 8002c72:	bf00      	nop
}
 8002c74:	e015      	b.n	8002ca2 <readFieldValue+0x202>
 8002c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c80:	613b      	str	r3, [r7, #16]
    switch (n) {
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d104      	bne.n	8002c92 <readFieldValue+0x1f2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e005      	b.n	8002c9e <readFieldValue+0x1fe>
    default: memcpy(to, from, n); break;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	6979      	ldr	r1, [r7, #20]
 8002c96:	6938      	ldr	r0, [r7, #16]
 8002c98:	f005 fbee 	bl	8008478 <memcpy>
 8002c9c:	bf00      	nop
}
 8002c9e:	e000      	b.n	8002ca2 <readFieldValue+0x202>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002ca0:	bf00      	nop
}
 8002ca2:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8002ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	663b      	str	r3, [r7, #96]	; 0x60
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8002caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <readFieldValue+0x21e>
            __entityCallback(entity, field, ptr, field->rdCallback.context);
 8002cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8002cb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002cb8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002cba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002cbc:	47a0      	blx	r4
        }
#endif /* USE_ENTITY_READ_CALLBACK */

        pos += typeLen;
 8002cbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc2:	4413      	add	r3, r2
 8002cc4:	667b      	str	r3, [r7, #100]	; 0x64
        (*size) = pos;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002cca:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002ccc:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e007      	b.n	8002ce2 <readFieldValue+0x242>
        goto error;
 8002cd2:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3784      	adds	r7, #132	; 0x84
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000290 	.word	0x20000290
 8002cf0:	0800ddf8 	.word	0x0800ddf8
 8002cf4:	0800d94c 	.word	0x0800d94c
 8002cf8:	0800dd6c 	.word	0x0800dd6c
 8002cfc:	0800eec4 	.word	0x0800eec4
 8002d00:	0800de58 	.word	0x0800de58
 8002d04:	0800de30 	.word	0x0800de30

08002d08 <readSeveralFieldsValues>:
 * READ several fields values
 *
 */

int readSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b0b7      	sub	sp, #220	; 0xdc
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readSeveralFieldsValues: No allocated entities or invalid input");
 8002d16:	4bad      	ldr	r3, [pc, #692]	; (8002fcc <readSeveralFieldsValues+0x2c4>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <readSeveralFieldsValues+0x2e>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d908      	bls.n	8002d36 <readSeveralFieldsValues+0x2e>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <readSeveralFieldsValues+0x2e>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <readSeveralFieldsValues+0x2e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11d      	bne.n	8002d72 <readSeveralFieldsValues+0x6a>
 8002d36:	4ba5      	ldr	r3, [pc, #660]	; (8002fcc <readSeveralFieldsValues+0x2c4>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <readSeveralFieldsValues+0x4e>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d908      	bls.n	8002d56 <readSeveralFieldsValues+0x4e>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <readSeveralFieldsValues+0x4e>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <readSeveralFieldsValues+0x4e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <readSeveralFieldsValues+0x52>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <readSeveralFieldsValues+0x54>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	b2d9      	uxtb	r1, r3
 8002d5e:	4b9c      	ldr	r3, [pc, #624]	; (8002fd0 <readSeveralFieldsValues+0x2c8>)
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002d66:	4a9b      	ldr	r2, [pc, #620]	; (8002fd4 <readSeveralFieldsValues+0x2cc>)
 8002d68:	489b      	ldr	r0, [pc, #620]	; (8002fd8 <readSeveralFieldsValues+0x2d0>)
 8002d6a:	f001 ffdb 	bl	8004d24 <__M_Error>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e1c9      	b.n	8003106 <readSeveralFieldsValues+0x3fe>

    const reg inputMsgSize = (*size);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Wpos = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Rpos = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002d84:	4b91      	ldr	r3, [pc, #580]	; (8002fcc <readSeveralFieldsValues+0x2c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8002d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 8002d9e:	e157      	b.n	8003050 <readSeveralFieldsValues+0x348>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    reg Rpos_internal = (*Rpos);
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8002dac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002db4:	4413      	add	r3, r2
 8002db6:	f107 0218 	add.w	r2, r7, #24
 8002dba:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    switch (n) {
 8002dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d106      	bne.n	8002dee <readSeveralFieldsValues+0xe6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e008      	b.n	8002e00 <readSeveralFieldsValues+0xf8>
    default: memcpy(to, from, n); break;
 8002dee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002df2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002df6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002dfa:	f005 fb3d 	bl	8008478 <memcpy>
 8002dfe:	bf00      	nop
}
 8002e00:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8002e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e0e:	601a      	str	r2, [r3, #0]
}
 8002e10:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8002e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e16:	3302      	adds	r3, #2
 8002e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8002e1c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e24:	4413      	add	r3, r2
 8002e26:	f107 0216 	add.w	r2, r7, #22
 8002e2a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    (*fieldNumber) = *(inputData);
 8002e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e3e:	801a      	strh	r2, [r3, #0]
}
 8002e40:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8002e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e46:	3301      	adds	r3, #1
 8002e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*Rpos) = Rpos_internal;
 8002e4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e50:	61fb      	str	r3, [r7, #28]
}
 8002e52:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 8002e54:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <readSeveralFieldsValues+0x2c4>)
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 8002e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	8afb      	ldrh	r3, [r7, #22]
 8002e6c:	015b      	lsls	r3, r3, #5
 8002e6e:	4413      	add	r3, r2
 8002e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 8002e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e78:	891b      	ldrh	r3, [r3, #8]
 8002e7a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f240 80f0 	bls.w	800306a <readSeveralFieldsValues+0x362>
 8002e8a:	8afb      	ldrh	r3, [r7, #22]
 8002e8c:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8002e90:	429a      	cmp	r2, r3
 8002e92:	f240 80ea 	bls.w	800306a <readSeveralFieldsValues+0x362>

            const reg typeLen = getMYCTypeLen(field->type);
 8002e96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e9a:	7e1b      	ldrb	r3, [r3, #24]
 8002e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if(type < TYPE_ARRAY_LENGTH) {
 8002ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea4:	2b11      	cmp	r3, #17
 8002ea6:	d805      	bhi.n	8002eb4 <readSeveralFieldsValues+0x1ac>
        return typeLengthMappingArray[type];
 8002ea8:	4a4c      	ldr	r2, [pc, #304]	; (8002fdc <readSeveralFieldsValues+0x2d4>)
 8002eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	e000      	b.n	8002eb6 <readSeveralFieldsValues+0x1ae>
    return 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8002eba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d214      	bcs.n	8002ef4 <readSeveralFieldsValues+0x1ec>
 8002eca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ed2:	4413      	add	r3, r2
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	bf34      	ite	cc
 8002eda:	2301      	movcc	r3, #1
 8002edc:	2300      	movcs	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <readSeveralFieldsValues+0x2d8>)
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	f240 1321 	movw	r3, #289	; 0x121
 8002eea:	4a3a      	ldr	r2, [pc, #232]	; (8002fd4 <readSeveralFieldsValues+0x2cc>)
 8002eec:	483d      	ldr	r0, [pc, #244]	; (8002fe4 <readSeveralFieldsValues+0x2dc>)
 8002eee:	f001 ff19 	bl	8004d24 <__M_Error>
 8002ef2:	e0bb      	b.n	800306c <readSeveralFieldsValues+0x364>
                                      goto error;
                                  }, "readSeveralFieldsValues: field size more than buffer");

            ptr = (entity->pointer + field->shift);
 8002ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	4413      	add	r3, r2
 8002f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 8002f06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f12:	440b      	add	r3, r1
 8002f14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f1c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f24:	677b      	str	r3, [r7, #116]	; 0x74
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002f26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <readSeveralFieldsValues+0x25a>
 8002f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d011      	beq.n	8002f62 <readSeveralFieldsValues+0x25a>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8002f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	673b      	str	r3, [r7, #112]	; 0x70
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 8002f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f46:	66fb      	str	r3, [r7, #108]	; 0x6c
                                        if(reg_ptr_from) {
 8002f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d061      	beq.n	8003012 <readSeveralFieldsValues+0x30a>
 8002f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	667b      	str	r3, [r7, #100]	; 0x64
    MY_CTYPE_REG_CPY(to, from);
 8002f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002f60:	e057      	b.n	8003012 <readSeveralFieldsValues+0x30a>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8002f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00c      	beq.n	8002f88 <readSeveralFieldsValues+0x280>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8002f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f70:	663b      	str	r3, [r7, #96]	; 0x60
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8002f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f78:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7c:	657b      	str	r3, [r7, #84]	; 0x54
    MY_CTYPE_REG_CPY(to, from);
 8002f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	e045      	b.n	8003014 <readSeveralFieldsValues+0x30c>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8002f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d029      	beq.n	8002fe8 <readSeveralFieldsValues+0x2e0>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 8002f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	653b      	str	r3, [r7, #80]	; 0x50
                                        if(reg_ptr_from) {
 8002f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d039      	beq.n	8003014 <readSeveralFieldsValues+0x30c>
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002faa:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 8002fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d104      	bne.n	8002fbc <readSeveralFieldsValues+0x2b4>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	e005      	b.n	8002fc8 <readSeveralFieldsValues+0x2c0>
    default: memcpy(to, from, n); break;
 8002fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002fc2:	f005 fa59 	bl	8008478 <memcpy>
 8002fc6:	bf00      	nop
}
 8002fc8:	e024      	b.n	8003014 <readSeveralFieldsValues+0x30c>
 8002fca:	bf00      	nop
 8002fcc:	20000290 	.word	0x20000290
 8002fd0:	0800df5c 	.word	0x0800df5c
 8002fd4:	0800d94c 	.word	0x0800d94c
 8002fd8:	0800de8c 	.word	0x0800de8c
 8002fdc:	0800eec4 	.word	0x0800eec4
 8002fe0:	0800dfc4 	.word	0x0800dfc4
 8002fe4:	0800df9c 	.word	0x0800df9c
 8002fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fea:	643b      	str	r3, [r7, #64]	; 0x40
 8002fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d104      	bne.n	8003004 <readSeveralFieldsValues+0x2fc>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e005      	b.n	8003010 <readSeveralFieldsValues+0x308>
    default: memcpy(to, from, n); break;
 8003004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800300a:	f005 fa35 	bl	8008478 <memcpy>
 800300e:	bf00      	nop
}
 8003010:	e000      	b.n	8003014 <readSeveralFieldsValues+0x30c>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003012:	bf00      	nop
}
 8003014:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
            const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8003016:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00b      	beq.n	8003040 <readSeveralFieldsValues+0x338>
                __entityCallback(entity, field, ptr, field->rdCallback.context);
 8003028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003032:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003036:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800303a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800303e:	47a0      	blx	r4
            }
#endif /* USE_ENTITY_READ_CALLBACK */

            Wpos += typeLen;
 8003040:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003048:	4413      	add	r3, r2
 800304a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 800304e:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3302      	adds	r3, #2
 8003054:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003058:	429a      	cmp	r2, r3
 800305a:	f63f aea1 	bhi.w	8002da0 <readSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003064:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003066:	2301      	movs	r3, #1
 8003068:	e04d      	b.n	8003106 <readSeveralFieldsValues+0x3fe>
            goto error;
 800306a:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    outputData[Wpos++] = ENTITY_ERROR;
 8003072:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	4413      	add	r3, r2
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800308a:	4413      	add	r3, r2
 800308c:	2202      	movs	r2, #2
 800308e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	f107 0318 	add.w	r3, r7, #24
 8003096:	623b      	str	r3, [r7, #32]
    switch (n) {
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b01      	cmp	r3, #1
 800309c:	d104      	bne.n	80030a8 <readSeveralFieldsValues+0x3a0>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e005      	b.n	80030b4 <readSeveralFieldsValues+0x3ac>
    default: memcpy(to, from, n); break;
 80030a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ac:	6a38      	ldr	r0, [r7, #32]
 80030ae:	f005 f9e3 	bl	8008478 <memcpy>
 80030b2:	bf00      	nop
}
 80030b4:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 80030b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030ba:	3302      	adds	r3, #2
 80030bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030c6:	4413      	add	r3, r2
 80030c8:	2201      	movs	r2, #1
 80030ca:	637a      	str	r2, [r7, #52]	; 0x34
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
 80030ce:	f107 0316 	add.w	r3, r7, #22
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d104      	bne.n	80030e4 <readSeveralFieldsValues+0x3dc>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e005      	b.n	80030f0 <readSeveralFieldsValues+0x3e8>
    default: memcpy(to, from, n); break;
 80030e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ea:	f005 f9c5 	bl	8008478 <memcpy>
 80030ee:	bf00      	nop
}
 80030f0:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 80030f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030f6:	3301      	adds	r3, #1
 80030f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    (*size) = Wpos;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003102:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	37d4      	adds	r7, #212	; 0xd4
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}
 800310e:	bf00      	nop

08003110 <setFieldValue>:
/* ******************************************************************************************************************
 * WRITE one field value
 *
 */
int setFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const inputData, const reg inputBufferSize)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b0a3      	sub	sp, #140	; 0x8c
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	460b      	mov	r3, r1
 800311e:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (inputData == NULL) || (inputBufferSize == 0)), M_EMPTY, return ENTITY_ERROR, "setFieldValue: No allocated entities or invalid input");
 8003120:	4b78      	ldr	r3, [pc, #480]	; (8003304 <setFieldValue+0x1f4>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <setFieldValue+0x24>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <setFieldValue+0x24>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d117      	bne.n	8003164 <setFieldValue+0x54>
 8003134:	4b73      	ldr	r3, [pc, #460]	; (8003304 <setFieldValue+0x1f4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <setFieldValue+0x38>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <setFieldValue+0x38>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <setFieldValue+0x3c>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <setFieldValue+0x3e>
 800314c:	2300      	movs	r3, #0
 800314e:	b2d9      	uxtb	r1, r3
 8003150:	4b6d      	ldr	r3, [pc, #436]	; (8003308 <setFieldValue+0x1f8>)
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	f44f 73a9 	mov.w	r3, #338	; 0x152
 8003158:	4a6c      	ldr	r2, [pc, #432]	; (800330c <setFieldValue+0x1fc>)
 800315a:	486d      	ldr	r0, [pc, #436]	; (8003310 <setFieldValue+0x200>)
 800315c:	f001 fde2 	bl	8004d24 <__M_Error>
 8003160:	2300      	movs	r3, #0
 8003162:	e0cb      	b.n	80032fc <setFieldValue+0x1ec>

    Entity* const entity = entityInfo.entities[entityNumber];
 8003164:	4b67      	ldr	r3, [pc, #412]	; (8003304 <setFieldValue+0x1f4>)
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	67fb      	str	r3, [r7, #124]	; 0x7c
    EntityField* const field = &entity->fields[fieldNumber];
 8003172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	015b      	lsls	r3, r3, #5
 800317a:	4413      	add	r3, r2
 800317c:	67bb      	str	r3, [r7, #120]	; 0x78

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 800317e:	4b61      	ldr	r3, [pc, #388]	; (8003304 <setFieldValue+0x1f4>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	677b      	str	r3, [r7, #116]	; 0x74
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003184:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003186:	891b      	ldrh	r3, [r3, #8]
 8003188:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 800318c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	66fb      	str	r3, [r7, #108]	; 0x6c

    if((entityNumber < entities_count) && (fieldNumber < fields_count) && ((bitFlags & ENTITY_READ_ONLY_MSK) == 0)) {
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003196:	429a      	cmp	r2, r3
 8003198:	f080 80af 	bcs.w	80032fa <setFieldValue+0x1ea>
 800319c:	897a      	ldrh	r2, [r7, #10]
 800319e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80031a2:	429a      	cmp	r2, r3
 80031a4:	f080 80a9 	bcs.w	80032fa <setFieldValue+0x1ea>
 80031a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 80a3 	bne.w	80032fa <setFieldValue+0x1ea>
        void* const ptr = (entity->pointer + field->shift);
 80031b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	4413      	add	r3, r2
 80031be:	66bb      	str	r3, [r7, #104]	; 0x68
        const reg typeLen = getMYCTypeLen(field->type);
 80031c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c2:	7e1b      	ldrb	r3, [r3, #24]
 80031c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if(type < TYPE_ARRAY_LENGTH) {
 80031c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c8:	2b11      	cmp	r3, #17
 80031ca:	d804      	bhi.n	80031d6 <setFieldValue+0xc6>
        return typeLengthMappingArray[type];
 80031cc:	4a51      	ldr	r2, [pc, #324]	; (8003314 <setFieldValue+0x204>)
 80031ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	e000      	b.n	80031d8 <setFieldValue+0xc8>
    return 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	667b      	str	r3, [r7, #100]	; 0x64

        ENTITY_DBG_ASSERT_BUF((typeLen > inputBufferSize), M_EMPTY, {
 80031da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d911      	bls.n	8003206 <setFieldValue+0xf6>
 80031e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	bf8c      	ite	hi
 80031ea:	2301      	movhi	r3, #1
 80031ec:	2300      	movls	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4619      	mov	r1, r3
 80031f2:	4b49      	ldr	r3, [pc, #292]	; (8003318 <setFieldValue+0x208>)
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	f240 135f 	movw	r3, #351	; 0x15f
 80031fa:	4a44      	ldr	r2, [pc, #272]	; (800330c <setFieldValue+0x1fc>)
 80031fc:	4847      	ldr	r0, [pc, #284]	; (800331c <setFieldValue+0x20c>)
 80031fe:	f001 fd91 	bl	8004d24 <__M_Error>
 8003202:	2300      	movs	r3, #0
 8003204:	e07a      	b.n	80032fc <setFieldValue+0x1ec>
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003208:	65bb      	str	r3, [r7, #88]	; 0x58
 800320a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320c:	657b      	str	r3, [r7, #84]	; 0x54
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	653b      	str	r3, [r7, #80]	; 0x50
 8003212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003214:	64fb      	str	r3, [r7, #76]	; 0x4c
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d016      	beq.n	800324e <setFieldValue+0x13e>
 8003220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d011      	beq.n	800324e <setFieldValue+0x13e>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 800322a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 8003230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
                                        if(reg_ptr_to) {
 8003234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003236:	2b00      	cmp	r3, #0
 8003238:	d050      	beq.n	80032dc <setFieldValue+0x1cc>
 800323a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323c:	643b      	str	r3, [r7, #64]	; 0x40
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
    MY_CTYPE_REG_CPY(to, from);
 8003242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	601a      	str	r2, [r3, #0]
}
 800324a:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800324c:	e046      	b.n	80032dc <setFieldValue+0x1cc>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 800324e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <setFieldValue+0x162>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 8003258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 800325c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
    MY_CTYPE_REG_CPY(to, from);
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	e035      	b.n	80032de <setFieldValue+0x1ce>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01a      	beq.n	80032b2 <setFieldValue+0x1a2>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 800327c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
                                        if(reg_ptr_to) {
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d02a      	beq.n	80032de <setFieldValue+0x1ce>
 8003288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	2b01      	cmp	r3, #1
 8003298:	d104      	bne.n	80032a4 <setFieldValue+0x194>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e005      	b.n	80032b0 <setFieldValue+0x1a0>
    default: memcpy(to, from, n); break;
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	6a39      	ldr	r1, [r7, #32]
 80032a8:	69f8      	ldr	r0, [r7, #28]
 80032aa:	f005 f8e5 	bl	8008478 <memcpy>
 80032ae:	bf00      	nop
}
 80032b0:	e015      	b.n	80032de <setFieldValue+0x1ce>
 80032b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032bc:	613b      	str	r3, [r7, #16]
    switch (n) {
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d104      	bne.n	80032ce <setFieldValue+0x1be>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e005      	b.n	80032da <setFieldValue+0x1ca>
    default: memcpy(to, from, n); break;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	6979      	ldr	r1, [r7, #20]
 80032d2:	6938      	ldr	r0, [r7, #16]
 80032d4:	f005 f8d0 	bl	8008478 <memcpy>
 80032d8:	bf00      	nop
}
 80032da:	e000      	b.n	80032de <setFieldValue+0x1ce>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80032dc:	bf00      	nop
}
 80032de:	bf00      	nop

        proceedWriteEntity(bitFlags, ptr, inputData, typeLen);


#ifdef USE_ENTITY_WRITE_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 80032e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	663b      	str	r3, [r7, #96]	; 0x60
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80032e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <setFieldValue+0x1ea>
            __entityCallback(entity, field, ptr, field->wrCallback.context);
 80032ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80032f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032f4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80032f6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80032f8:	47a0      	blx	r4
#endif /* USE_ENTITY_WRITE_CALLBACK */

    }

    UNUSED(inputBufferSize);
    return ENTITY_OK;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3784      	adds	r7, #132	; 0x84
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	20000290 	.word	0x20000290
 8003308:	0800e074 	.word	0x0800e074
 800330c:	0800d94c 	.word	0x0800d94c
 8003310:	0800dffc 	.word	0x0800dffc
 8003314:	0800eec4 	.word	0x0800eec4
 8003318:	0800e0c8 	.word	0x0800e0c8
 800331c:	0800e0ac 	.word	0x0800e0ac

08003320 <setSeveralFieldsValues>:
/* ******************************************************************************************************************
 * WRITE several fields values
 *
 */
int setSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b0b7      	sub	sp, #220	; 0xdc
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "setSeveralFieldsValues: No allocated entities or invalid input");
 800332e:	4bac      	ldr	r3, [pc, #688]	; (80035e0 <setSeveralFieldsValues+0x2c0>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <setSeveralFieldsValues+0x2e>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d908      	bls.n	800334e <setSeveralFieldsValues+0x2e>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <setSeveralFieldsValues+0x2e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <setSeveralFieldsValues+0x2e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11d      	bne.n	800338a <setSeveralFieldsValues+0x6a>
 800334e:	4ba4      	ldr	r3, [pc, #656]	; (80035e0 <setSeveralFieldsValues+0x2c0>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <setSeveralFieldsValues+0x4e>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d908      	bls.n	800336e <setSeveralFieldsValues+0x4e>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <setSeveralFieldsValues+0x4e>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <setSeveralFieldsValues+0x4e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <setSeveralFieldsValues+0x52>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <setSeveralFieldsValues+0x54>
 8003372:	2300      	movs	r3, #0
 8003374:	b2d9      	uxtb	r1, r3
 8003376:	4b9b      	ldr	r3, [pc, #620]	; (80035e4 <setSeveralFieldsValues+0x2c4>)
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	f240 137b 	movw	r3, #379	; 0x17b
 800337e:	4a9a      	ldr	r2, [pc, #616]	; (80035e8 <setSeveralFieldsValues+0x2c8>)
 8003380:	489a      	ldr	r0, [pc, #616]	; (80035ec <setSeveralFieldsValues+0x2cc>)
 8003382:	f001 fccf 	bl	8004d24 <__M_Error>
 8003386:	2300      	movs	r3, #0
 8003388:	e1cc      	b.n	8003724 <setSeveralFieldsValues+0x404>

    const reg inputMsgSize = (*size);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Wpos = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Rpos = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800339c:	4b90      	ldr	r3, [pc, #576]	; (80035e0 <setSeveralFieldsValues+0x2c0>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 80033a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4413      	add	r3, r2
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 80033b6:	e15a      	b.n	800366e <setSeveralFieldsValues+0x34e>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    reg Rpos_internal = (*Rpos);
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 80033c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80033c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033cc:	4413      	add	r3, r2
 80033ce:	f107 0214 	add.w	r2, r7, #20
 80033d2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80033d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033da:	2302      	movs	r3, #2
 80033dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 80033f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d106      	bne.n	8003406 <setSeveralFieldsValues+0xe6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80033f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e008      	b.n	8003418 <setSeveralFieldsValues+0xf8>
    default: memcpy(to, from, n); break;
 8003406:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800340a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800340e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003412:	f005 f831 	bl	8008478 <memcpy>
 8003416:	bf00      	nop
}
 8003418:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 800341a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b29a      	uxth	r2, r3
 8003422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003426:	601a      	str	r2, [r3, #0]
}
 8003428:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 800342a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800342e:	3302      	adds	r3, #2
 8003430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8003434:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800343c:	4413      	add	r3, r2
 800343e:	f107 0212 	add.w	r2, r7, #18
 8003442:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    (*fieldNumber) = *(inputData);
 800344a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b29a      	uxth	r2, r3
 8003452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003456:	801a      	strh	r2, [r3, #0]
}
 8003458:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800345a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800345e:	3301      	adds	r3, #1
 8003460:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    (*Rpos) = Rpos_internal;
 8003464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003468:	61bb      	str	r3, [r7, #24]
}
 800346a:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 800346c:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <setSeveralFieldsValues+0x2c0>)
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 800347c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	8a7b      	ldrh	r3, [r7, #18]
 8003484:	015b      	lsls	r3, r3, #5
 8003486:	4413      	add	r3, r2
 8003488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 800348c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003490:	891b      	ldrh	r3, [r3, #8]
 8003492:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003496:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034a6:	429a      	cmp	r2, r3
 80034a8:	f240 80ee 	bls.w	8003688 <setSeveralFieldsValues+0x368>
 80034ac:	8a7b      	ldrh	r3, [r7, #18]
 80034ae:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80034b2:	429a      	cmp	r2, r3
 80034b4:	f240 80e8 	bls.w	8003688 <setSeveralFieldsValues+0x368>
            const reg typeLen = getMYCTypeLen(field->type);
 80034b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034bc:	7e1b      	ldrb	r3, [r3, #24]
 80034be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if(type < TYPE_ARRAY_LENGTH) {
 80034c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034c6:	2b11      	cmp	r3, #17
 80034c8:	d805      	bhi.n	80034d6 <setSeveralFieldsValues+0x1b6>
        return typeLengthMappingArray[type];
 80034ca:	4a49      	ldr	r2, [pc, #292]	; (80035f0 <setSeveralFieldsValues+0x2d0>)
 80034cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d4:	e000      	b.n	80034d8 <setSeveralFieldsValues+0x1b8>
    return 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, {
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034e2:	4413      	add	r3, r2
 80034e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d214      	bcs.n	8003516 <setSeveralFieldsValues+0x1f6>
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034f2:	4413      	add	r3, r2
 80034f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80034f8:	429a      	cmp	r2, r3
 80034fa:	bf34      	ite	cc
 80034fc:	2301      	movcc	r3, #1
 80034fe:	2300      	movcs	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <setSeveralFieldsValues+0x2d4>)
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800350c:	4a36      	ldr	r2, [pc, #216]	; (80035e8 <setSeveralFieldsValues+0x2c8>)
 800350e:	483a      	ldr	r0, [pc, #232]	; (80035f8 <setSeveralFieldsValues+0x2d8>)
 8003510:	f001 fc08 	bl	8004d24 <__M_Error>
 8003514:	e0b9      	b.n	800368a <setSeveralFieldsValues+0x36a>
                                      goto error;
                                  }, "setSeveralFieldsValues: field read size more than buffer");


            if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8003516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 809f 	bne.w	8003662 <setSeveralFieldsValues+0x342>

                ptr = (entity->pointer + field->shift);
 8003524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	4413      	add	r3, r2
 8003532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003540:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003542:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003546:	67ba      	str	r2, [r7, #120]	; 0x78
 8003548:	677b      	str	r3, [r7, #116]	; 0x74
 800354a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800354e:	673b      	str	r3, [r7, #112]	; 0x70
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003550:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <setSeveralFieldsValues+0x268>
 800355a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d011      	beq.n	8003588 <setSeveralFieldsValues+0x268>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	66fb      	str	r3, [r7, #108]	; 0x6c
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 800356a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356c:	66bb      	str	r3, [r7, #104]	; 0x68
                                        if(reg_ptr_to) {
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05f      	beq.n	8003634 <setSeveralFieldsValues+0x314>
 8003574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003576:	667b      	str	r3, [r7, #100]	; 0x64
 8003578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357a:	663b      	str	r3, [r7, #96]	; 0x60
    MY_CTYPE_REG_CPY(to, from);
 800357c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003582:	601a      	str	r2, [r3, #0]
}
 8003584:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003586:	e055      	b.n	8003634 <setSeveralFieldsValues+0x314>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <setSeveralFieldsValues+0x28c>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 8003592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003594:	65fb      	str	r3, [r7, #92]	; 0x5c
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 8003596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003598:	65bb      	str	r3, [r7, #88]	; 0x58
 800359a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359c:	657b      	str	r3, [r7, #84]	; 0x54
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	653b      	str	r3, [r7, #80]	; 0x50
    MY_CTYPE_REG_CPY(to, from);
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	e044      	b.n	8003636 <setSeveralFieldsValues+0x316>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80035ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d029      	beq.n	800360a <setSeveralFieldsValues+0x2ea>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 80035b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
                                        if(reg_ptr_to) {
 80035bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d039      	beq.n	8003636 <setSeveralFieldsValues+0x316>
 80035c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035cc:	643b      	str	r3, [r7, #64]	; 0x40
    switch (n) {
 80035ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d113      	bne.n	80035fc <setSeveralFieldsValues+0x2dc>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80035d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	e014      	b.n	8003608 <setSeveralFieldsValues+0x2e8>
 80035de:	bf00      	nop
 80035e0:	20000290 	.word	0x20000290
 80035e4:	0800e0f4 	.word	0x0800e0f4
 80035e8:	0800d94c 	.word	0x0800d94c
 80035ec:	0800de8c 	.word	0x0800de8c
 80035f0:	0800eec4 	.word	0x0800eec4
 80035f4:	0800e158 	.word	0x0800e158
 80035f8:	0800e134 	.word	0x0800e134
    default: memcpy(to, from, n); break;
 80035fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003600:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003602:	f004 ff39 	bl	8008478 <memcpy>
 8003606:	bf00      	nop
}
 8003608:	e015      	b.n	8003636 <setSeveralFieldsValues+0x316>
 800360a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800360c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
 8003612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
    switch (n) {
 8003616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d104      	bne.n	8003626 <setSeveralFieldsValues+0x306>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800361c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361e:	781a      	ldrb	r2, [r3, #0]
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e005      	b.n	8003632 <setSeveralFieldsValues+0x312>
    default: memcpy(to, from, n); break;
 8003626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800362a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800362c:	f004 ff24 	bl	8008478 <memcpy>
 8003630:	bf00      	nop
}
 8003632:	e000      	b.n	8003636 <setSeveralFieldsValues+0x316>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003634:	bf00      	nop
}
 8003636:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <setSeveralFieldsValues+0x342>
                    __entityCallback(entity, field, ptr, field->wrCallback.context);
 800364a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8003654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003658:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800365c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003660:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_WRITE_CALLBACK */

            }

            Rpos += typeLen;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003668:	4413      	add	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 800366c:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3303      	adds	r3, #3
 8003672:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003676:	429a      	cmp	r2, r3
 8003678:	f63f ae9e 	bhi.w	80033b8 <setSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003682:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003684:	2301      	movs	r3, #1
 8003686:	e04d      	b.n	8003724 <setSeveralFieldsValues+0x404>
            goto error;
 8003688:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    outputData[Wpos++] = ENTITY_ERROR;
 8003690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036a8:	4413      	add	r3, r2
 80036aa:	2202      	movs	r2, #2
 80036ac:	627a      	str	r2, [r7, #36]	; 0x24
 80036ae:	623b      	str	r3, [r7, #32]
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	61fb      	str	r3, [r7, #28]
    switch (n) {
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d104      	bne.n	80036c6 <setSeveralFieldsValues+0x3a6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e005      	b.n	80036d2 <setSeveralFieldsValues+0x3b2>
    default: memcpy(to, from, n); break;
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	69f8      	ldr	r0, [r7, #28]
 80036cc:	f004 fed4 	bl	8008478 <memcpy>
 80036d0:	bf00      	nop
}
 80036d2:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 80036d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036d8:	3302      	adds	r3, #2
 80036da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036e4:	4413      	add	r3, r2
 80036e6:	2201      	movs	r2, #1
 80036e8:	633a      	str	r2, [r7, #48]	; 0x30
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ec:	f107 0312 	add.w	r3, r7, #18
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d104      	bne.n	8003702 <setSeveralFieldsValues+0x3e2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e005      	b.n	800370e <setSeveralFieldsValues+0x3ee>
    default: memcpy(to, from, n); break;
 8003702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003708:	f004 feb6 	bl	8008478 <memcpy>
 800370c:	bf00      	nop
}
 800370e:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 8003710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003714:	3301      	adds	r3, #1
 8003716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    (*size) = Wpos;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003720:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	37d4      	adds	r7, #212	; 0xd4
 8003728:	46bd      	mov	sp, r7
 800372a:	bd90      	pop	{r4, r7, pc}

0800372c <proceedGluedValues>:
/* ******************************************************************************************************************
 * GLUED functions fields values
 *
 */
int proceedGluedValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b0d9      	sub	sp, #356	; 0x164
 8003730:	af02      	add	r7, sp, #8
 8003732:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8003736:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 800373a:	6020      	str	r0, [r4, #0]
 800373c:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8003740:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8003744:	6001      	str	r1, [r0, #0]
 8003746:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800374a:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 800374e:	600a      	str	r2, [r1, #0]
 8003750:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003754:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003758:	6013      	str	r3, [r2, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 3) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: No allocated entities or invalid input");
 800375a:	4bc6      	ldr	r3, [pc, #792]	; (8003a74 <proceedGluedValues+0x348>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01b      	beq.n	800379a <proceedGluedValues+0x6e>
 8003762:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003766:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d914      	bls.n	800379a <proceedGluedValues+0x6e>
 8003770:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003774:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <proceedGluedValues+0x6e>
 800377e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003782:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d006      	beq.n	800379a <proceedGluedValues+0x6e>
 800378c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003790:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d12e      	bne.n	80037f8 <proceedGluedValues+0xcc>
 800379a:	4bb6      	ldr	r3, [pc, #728]	; (8003a74 <proceedGluedValues+0x348>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01b      	beq.n	80037da <proceedGluedValues+0xae>
 80037a2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037a6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d914      	bls.n	80037da <proceedGluedValues+0xae>
 80037b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <proceedGluedValues+0xae>
 80037be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d006      	beq.n	80037da <proceedGluedValues+0xae>
 80037cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037d0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <proceedGluedValues+0xb2>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <proceedGluedValues+0xb4>
 80037de:	2300      	movs	r3, #0
 80037e0:	b2d9      	uxtb	r1, r3
 80037e2:	4ba5      	ldr	r3, [pc, #660]	; (8003a78 <proceedGluedValues+0x34c>)
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f240 13c9 	movw	r3, #457	; 0x1c9
 80037ea:	4aa4      	ldr	r2, [pc, #656]	; (8003a7c <proceedGluedValues+0x350>)
 80037ec:	48a4      	ldr	r0, [pc, #656]	; (8003a80 <proceedGluedValues+0x354>)
 80037ee:	f001 fa99 	bl	8004d24 <__M_Error>
 80037f2:	2300      	movs	r3, #0
 80037f4:	f000 bd3c 	b.w	8004270 <proceedGluedValues+0xb44>

    const reg inputMsgSize = (*size);
 80037f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037fc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    reg Wpos = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    reg Rpos = 0;
 800380e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003812:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800381a:	4b96      	ldr	r3, [pc, #600]	; (8003a74 <proceedGluedValues+0x348>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    u8 cmd = inputData[Rpos++];
 8003822:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003826:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	1c59      	adds	r1, r3, #1
 800382e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003832:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003836:	6011      	str	r1, [r2, #0]
 8003838:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800383c:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	4413      	add	r3, r2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

    if(cmd == WRITE_SEVERAL_VALUES_GLUED) {
 800384a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800384e:	2b07      	cmp	r3, #7
 8003850:	f040 824f 	bne.w	8003cf2 <proceedGluedValues+0x5c6>
        const u8 writeRequestCnt = inputData[Rpos++];
 8003854:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003858:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003864:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800386e:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	4413      	add	r3, r2
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        for(reg i = 0; i < writeRequestCnt; ++i) {
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003882:	e1f2      	b.n	8003c6a <proceedGluedValues+0x53e>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize),
 8003884:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003888:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3303      	adds	r3, #3
 8003890:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003894:	429a      	cmp	r2, r3
 8003896:	d218      	bcs.n	80038ca <proceedGluedValues+0x19e>
 8003898:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800389c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3303      	adds	r3, #3
 80038a4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038a8:	429a      	cmp	r2, r3
 80038aa:	bf34      	ite	cc
 80038ac:	2301      	movcc	r3, #1
 80038ae:	2300      	movcs	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <proceedGluedValues+0x358>)
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	f240 13d9 	movw	r3, #473	; 0x1d9
 80038bc:	4a6f      	ldr	r2, [pc, #444]	; (8003a7c <proceedGluedValues+0x350>)
 80038be:	4872      	ldr	r0, [pc, #456]	; (8003a88 <proceedGluedValues+0x35c>)
 80038c0:	f001 fa30 	bl	8004d24 <__M_Error>
 80038c4:	2300      	movs	r3, #0
 80038c6:	f000 bcd3 	b.w	8004270 <proceedGluedValues+0xb44>
 80038ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80038ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    reg Rpos_internal = (*Rpos);
 80038d8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80038dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 80038e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80038ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038ee:	4413      	add	r3, r2
 80038f0:	f107 0218 	add.w	r2, r7, #24
 80038f4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80038f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038fc:	2302      	movs	r3, #2
 80038fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003906:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800390a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    switch (n) {
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	2b01      	cmp	r3, #1
 8003918:	d106      	bne.n	8003928 <proceedGluedValues+0x1fc>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800391a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e008      	b.n	800393a <proceedGluedValues+0x20e>
    default: memcpy(to, from, n); break;
 8003928:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800392c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003930:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003934:	f004 fda0 	bl	8008478 <memcpy>
 8003938:	bf00      	nop
}
 800393a:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 800393c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	b29a      	uxth	r2, r3
 8003944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003948:	601a      	str	r2, [r3, #0]
}
 800394a:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 800394c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003950:	3302      	adds	r3, #2
 8003952:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8003956:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800395a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800395e:	4413      	add	r3, r2
 8003960:	f107 0216 	add.w	r2, r7, #22
 8003964:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8003968:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    (*fieldNumber) = *(inputData);
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b29a      	uxth	r2, r3
 8003974:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003978:	801a      	strh	r2, [r3, #0]
}
 800397a:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800397c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003980:	3301      	adds	r3, #1
 8003982:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    (*Rpos) = Rpos_internal;
 8003986:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800398a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800398e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003992:	601a      	str	r2, [r3, #0]
}
 8003994:	bf00      	nop
                                  M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 8003996:	4b37      	ldr	r3, [pc, #220]	; (8003a74 <proceedGluedValues+0x348>)
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800399e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            EntityField* const field = &entity->fields[fieldNumber];
 80039ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80039b8:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	015b      	lsls	r3, r3, #5
 80039c0:	4413      	add	r3, r2
 80039c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80039c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80039ca:	891b      	ldrh	r3, [r3, #8]
 80039cc:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 80039d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80039da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80039de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80039e8:	429a      	cmp	r2, r3
 80039ea:	f240 8139 	bls.w	8003c60 <proceedGluedValues+0x534>
 80039ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80039f2:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80039fc:	429a      	cmp	r2, r3
 80039fe:	f240 812f 	bls.w	8003c60 <proceedGluedValues+0x534>
                const reg typeLen = getMYCTypeLen(field->type);
 8003a02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a06:	7e1b      	ldrb	r3, [r3, #24]
 8003a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(type < TYPE_ARRAY_LENGTH) {
 8003a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a10:	2b11      	cmp	r3, #17
 8003a12:	d805      	bhi.n	8003a20 <proceedGluedValues+0x2f4>
        return typeLengthMappingArray[type];
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <proceedGluedValues+0x360>)
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	e000      	b.n	8003a22 <proceedGluedValues+0x2f6>
    return 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003a26:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a2a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a34:	4413      	add	r3, r2
 8003a36:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d22c      	bcs.n	8003a98 <proceedGluedValues+0x36c>
 8003a3e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a52:	429a      	cmp	r2, r3
 8003a54:	bf34      	ite	cc
 8003a56:	2301      	movcc	r3, #1
 8003a58:	2300      	movcs	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <proceedGluedValues+0x364>)
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <proceedGluedValues+0x350>)
 8003a68:	480a      	ldr	r0, [pc, #40]	; (8003a94 <proceedGluedValues+0x368>)
 8003a6a:	f001 f95b 	bl	8004d24 <__M_Error>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e3fe      	b.n	8004270 <proceedGluedValues+0xb44>
 8003a72:	bf00      	nop
 8003a74:	20000290 	.word	0x20000290
 8003a78:	0800e238 	.word	0x0800e238
 8003a7c:	0800d94c 	.word	0x0800d94c
 8003a80:	0800e194 	.word	0x0800e194
 8003a84:	0800e2b8 	.word	0x0800e2b8
 8003a88:	0800e274 	.word	0x0800e274
 8003a8c:	0800eec4 	.word	0x0800eec4
 8003a90:	0800e2f4 	.word	0x0800e2f4
 8003a94:	0800e134 	.word	0x0800e134

                if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8003a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f040 80d0 	bne.w	8003c46 <proceedGluedValues+0x51a>

                    ptr = (entity->pointer + field->shift);
 8003aa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 8003ab8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003abc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003ac6:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	4413      	add	r3, r2
 8003ace:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ad6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003ada:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8003ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d022      	beq.n	8003b3c <proceedGluedValues+0x410>
 8003af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01c      	beq.n	8003b3c <proceedGluedValues+0x410>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 8003b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 8003b0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                                        if(reg_ptr_to) {
 8003b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d07d      	beq.n	8003c18 <proceedGluedValues+0x4ec>
 8003b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    MY_CTYPE_REG_CPY(to, from);
 8003b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003b3a:	e06d      	b.n	8003c18 <proceedGluedValues+0x4ec>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d016      	beq.n	8003b76 <proceedGluedValues+0x44a>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 8003b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 8003b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    MY_CTYPE_REG_CPY(to, from);
 8003b68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b72:	601a      	str	r2, [r3, #0]
}
 8003b74:	e051      	b.n	8003c1a <proceedGluedValues+0x4ee>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d029      	beq.n	8003bd6 <proceedGluedValues+0x4aa>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                                        if(reg_ptr_to) {
 8003b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d042      	beq.n	8003c1a <proceedGluedValues+0x4ee>
 8003b94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ba8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    switch (n) {
 8003bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d106      	bne.n	8003bc2 <proceedGluedValues+0x496>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e008      	b.n	8003bd4 <proceedGluedValues+0x4a8>
    default: memcpy(to, from, n); break;
 8003bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bca:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003bce:	f004 fc53 	bl	8008478 <memcpy>
 8003bd2:	bf00      	nop
}
 8003bd4:	e021      	b.n	8003c1a <proceedGluedValues+0x4ee>
 8003bd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003be2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    switch (n) {
 8003bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d106      	bne.n	8003c04 <proceedGluedValues+0x4d8>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003bf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e008      	b.n	8003c16 <proceedGluedValues+0x4ea>
    default: memcpy(to, from, n); break;
 8003c04:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003c08:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003c0c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003c10:	f004 fc32 	bl	8008478 <memcpy>
 8003c14:	bf00      	nop
}
 8003c16:	e000      	b.n	8003c1a <proceedGluedValues+0x4ee>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003c18:	bf00      	nop
}
 8003c1a:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                    const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003c1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003c26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <proceedGluedValues+0x51a>
                        __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8003c38:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003c3c:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8003c40:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003c44:	47a0      	blx	r4
                    }
#endif /* USE_ENTITY_WRITE_CALLBACK */

                }

                Rpos += typeLen;
 8003c46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c4a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c54:	441a      	add	r2, r3
 8003c56:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c5e:	601a      	str	r2, [r3, #0]
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8003c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c64:	3301      	adds	r3, #1
 8003c66:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003c6a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003c6e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	f4ff ae06 	bcc.w	8003884 <proceedGluedValues+0x158>
            }
        }

        ENTITY_DBG_ASSERT_BUF(((Rpos + 1) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003c78:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d217      	bcs.n	8003cbc <proceedGluedValues+0x590>
 8003c8c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf34      	ite	cc
 8003ca0:	2301      	movcc	r3, #1
 8003ca2:	2300      	movcs	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4bc0      	ldr	r3, [pc, #768]	; (8003fac <proceedGluedValues+0x880>)
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	f240 13fb 	movw	r3, #507	; 0x1fb
 8003cb0:	4abf      	ldr	r2, [pc, #764]	; (8003fb0 <proceedGluedValues+0x884>)
 8003cb2:	48c0      	ldr	r0, [pc, #768]	; (8003fb4 <proceedGluedValues+0x888>)
 8003cb4:	f001 f836 	bl	8004d24 <__M_Error>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e2d9      	b.n	8004270 <proceedGluedValues+0xb44>
        cmd = inputData[Rpos];
 8003cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003cc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003cca:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        if(cmd == SEVERAL_VALUES_GLUED_END) {
 8003cd8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003cdc:	2b09      	cmp	r3, #9
 8003cde:	d108      	bne.n	8003cf2 <proceedGluedValues+0x5c6>
            (*size) = 0;
 8003ce0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ce4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
            return ENTITY_OK;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e2be      	b.n	8004270 <proceedGluedValues+0xb44>
        }
    }

    if(cmd == READ_SEVERAL_VALUES_GLUED) {
 8003cf2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	f040 82b1 	bne.w	800425e <proceedGluedValues+0xb32>
        ENTITY_DBG_ASSERT_BUF(((Rpos + 2) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003cfc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3302      	adds	r3, #2
 8003d08:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d217      	bcs.n	8003d40 <proceedGluedValues+0x614>
 8003d10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d20:	429a      	cmp	r2, r3
 8003d22:	bf34      	ite	cc
 8003d24:	2301      	movcc	r3, #1
 8003d26:	2300      	movcs	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4b9f      	ldr	r3, [pc, #636]	; (8003fac <proceedGluedValues+0x880>)
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	f240 2305 	movw	r3, #517	; 0x205
 8003d34:	4a9e      	ldr	r2, [pc, #632]	; (8003fb0 <proceedGluedValues+0x884>)
 8003d36:	48a0      	ldr	r0, [pc, #640]	; (8003fb8 <proceedGluedValues+0x88c>)
 8003d38:	f000 fff4 	bl	8004d24 <__M_Error>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e297      	b.n	8004270 <proceedGluedValues+0xb44>

        const u8 readRequestCnt = inputData[Rpos++];
 8003d40:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003d50:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003d54:	6011      	str	r1, [r2, #0]
 8003d56:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003d5a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        outputData[Wpos++] = READ_SEVERAL_VALUES_GLUED;
 8003d68:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003d72:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003d76:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	2206      	movs	r2, #6
 8003d80:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = readRequestCnt;
 8003d82:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8003d8c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003d90:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8003d9c:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = inputData[Rpos++];
 8003d9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003da2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003dae:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8003db2:	6011      	str	r1, [r2, #0]
 8003db4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003db8:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	441a      	add	r2, r3
 8003dc0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8003dca:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8003dce:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8003dd2:	6809      	ldr	r1, [r1, #0]
 8003dd4:	440b      	add	r3, r1
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	701a      	strb	r2, [r3, #0]

        for(reg i = 0; i < readRequestCnt; ++i) {
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003de0:	e236      	b.n	8004250 <proceedGluedValues+0xb24>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field request size more than buffer");
 8003de2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003de6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3303      	adds	r3, #3
 8003dee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d217      	bcs.n	8003e26 <proceedGluedValues+0x6fa>
 8003df6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003dfa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3303      	adds	r3, #3
 8003e02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf34      	ite	cc
 8003e0a:	2301      	movcc	r3, #1
 8003e0c:	2300      	movcs	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	4b6a      	ldr	r3, [pc, #424]	; (8003fbc <proceedGluedValues+0x890>)
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	f240 230d 	movw	r3, #525	; 0x20d
 8003e1a:	4a65      	ldr	r2, [pc, #404]	; (8003fb0 <proceedGluedValues+0x884>)
 8003e1c:	4868      	ldr	r0, [pc, #416]	; (8003fc0 <proceedGluedValues+0x894>)
 8003e1e:	f000 ff81 	bl	8004d24 <__M_Error>
 8003e22:	2300      	movs	r3, #0
 8003e24:	e224      	b.n	8004270 <proceedGluedValues+0xb44>
 8003e26:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003e2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    reg Rpos_internal = (*Rpos);
 8003e34:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003e38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    readEntityNumberFromBuf(entityNumber, &inputData[Rpos_internal]);
 8003e42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f107 0218 	add.w	r2, r7, #24
 8003e50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e68:	67bb      	str	r3, [r7, #120]	; 0x78
    switch (n) {
 8003e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d104      	bne.n	8003e7c <proceedGluedValues+0x750>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003e72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e006      	b.n	8003e8a <proceedGluedValues+0x75e>
    default: memcpy(to, from, n); break;
 8003e7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e82:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003e84:	f004 faf8 	bl	8008478 <memcpy>
 8003e88:	bf00      	nop
}
 8003e8a:	bf00      	nop
    (*entityNumber) &= 0x0000FFFFUL;
 8003e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e98:	601a      	str	r2, [r3, #0]
}
 8003e9a:	bf00      	nop
    Rpos_internal += ENTITIES_SIZEOF;
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    readFieldNumberFromBuf(fieldNumber, &inputData[Rpos_internal]);
 8003ea6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eae:	4413      	add	r3, r2
 8003eb0:	f107 0216 	add.w	r2, r7, #22
 8003eb4:	677a      	str	r2, [r7, #116]	; 0x74
 8003eb6:	673b      	str	r3, [r7, #112]	; 0x70
    (*fieldNumber) = *(inputData);
 8003eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec0:	801a      	strh	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ec8:	3301      	adds	r3, #1
 8003eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    (*Rpos) = Rpos_internal;
 8003ece:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ed2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ed6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003eda:	601a      	str	r2, [r3, #0]
}
 8003edc:	bf00      	nop

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 8003ede:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <proceedGluedValues+0x898>)
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ee6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            EntityField* const field = &entity->fields[fieldNumber];
 8003ef6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f00:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	015b      	lsls	r3, r3, #5
 8003f08:	4413      	add	r3, r2
 8003f0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003f0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003f12:	891b      	ldrh	r3, [r3, #8]
 8003f14:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003f18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003f26:	429a      	cmp	r2, r3
 8003f28:	f240 818b 	bls.w	8004242 <proceedGluedValues+0xb16>
 8003f2c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f30:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f240 8181 	bls.w	8004242 <proceedGluedValues+0xb16>
                const reg typeLen = getMYCTypeLen(field->type);
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f44:	7e1b      	ldrb	r3, [r3, #24]
 8003f46:	66fb      	str	r3, [r7, #108]	; 0x6c
    if(type < TYPE_ARRAY_LENGTH) {
 8003f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4a:	2b11      	cmp	r3, #17
 8003f4c:	d804      	bhi.n	8003f58 <proceedGluedValues+0x82c>
        return typeLengthMappingArray[type];
 8003f4e:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <proceedGluedValues+0x89c>)
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	e000      	b.n	8003f5a <proceedGluedValues+0x82e>
    return 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

                ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");
 8003f5e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f66:	4413      	add	r3, r2
 8003f68:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003f6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d22e      	bcs.n	8003fd4 <proceedGluedValues+0x8a8>
 8003f76:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7e:	4413      	add	r3, r2
 8003f80:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003f84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	bf34      	ite	cc
 8003f8e:	2301      	movcc	r3, #1
 8003f90:	2300      	movcs	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <proceedGluedValues+0x8a0>)
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <proceedGluedValues+0x884>)
 8003fa0:	480b      	ldr	r0, [pc, #44]	; (8003fd0 <proceedGluedValues+0x8a4>)
 8003fa2:	f000 febf 	bl	8004d24 <__M_Error>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e162      	b.n	8004270 <proceedGluedValues+0xb44>
 8003faa:	bf00      	nop
 8003fac:	0800e2f4 	.word	0x0800e2f4
 8003fb0:	0800d94c 	.word	0x0800d94c
 8003fb4:	0800e32c 	.word	0x0800e32c
 8003fb8:	0800e348 	.word	0x0800e348
 8003fbc:	0800e364 	.word	0x0800e364
 8003fc0:	0800e274 	.word	0x0800e274
 8003fc4:	20000290 	.word	0x20000290
 8003fc8:	0800eec4 	.word	0x0800eec4
 8003fcc:	0800e2b8 	.word	0x0800e2b8
 8003fd0:	0800df9c 	.word	0x0800df9c

                ptr = (entity->pointer + field->shift);
 8003fd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ff0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003ffa:	440b      	add	r3, r1
 8003ffc:	66ba      	str	r2, [r7, #104]	; 0x68
 8003ffe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004002:	667a      	str	r2, [r7, #100]	; 0x64
 8004004:	663b      	str	r3, [r7, #96]	; 0x60
 8004006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400a:	65fb      	str	r3, [r7, #92]	; 0x5c
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800400c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d03b      	beq.n	800408e <proceedGluedValues+0x962>
 8004016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d036      	beq.n	800408e <proceedGluedValues+0x962>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8004020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004028:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800402c:	601a      	str	r2, [r3, #0]
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 800402e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004038:	601a      	str	r2, [r3, #0]
                                        if(reg_ptr_from) {
 800403a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800403e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80dd 	beq.w	8004204 <proceedGluedValues+0xad8>
 800404a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800404e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004052:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004056:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004062:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004066:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800406a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	601a      	str	r2, [r3, #0]
    MY_CTYPE_REG_CPY(to, from);
 8004072:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004082:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800408c:	e0ba      	b.n	8004204 <proceedGluedValues+0xad8>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 800408e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d02c      	beq.n	80040f2 <proceedGluedValues+0x9c6>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8004098:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800409c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040a2:	601a      	str	r2, [r3, #0]
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 80040a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80040ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040b8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80040bc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80040cc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80040d0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	601a      	str	r2, [r3, #0]
    MY_CTYPE_REG_CPY(to, from);
 80040d8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	601a      	str	r2, [r3, #0]
}
 80040f0:	e089      	b.n	8004206 <proceedGluedValues+0xada>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80040f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d04a      	beq.n	8004192 <proceedGluedValues+0xa66>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 80040fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004104:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004108:	601a      	str	r2, [r3, #0]
                                        if(reg_ptr_from) {
 800410a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800410e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d076      	beq.n	8004206 <proceedGluedValues+0xada>
 8004118:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800411c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004128:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800412c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004130:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800413c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004140:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004142:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004144:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004148:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d10c      	bne.n	800416c <proceedGluedValues+0xa40>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8004152:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004156:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e011      	b.n	8004190 <proceedGluedValues+0xa64>
    default: memcpy(to, from, n); break;
 800416c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004170:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8004174:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004178:	f5a3 7194 	sub.w	r1, r3, #296	; 0x128
 800417c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	6809      	ldr	r1, [r1, #0]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	f004 f975 	bl	8008478 <memcpy>
 800418e:	bf00      	nop
}
 8004190:	e039      	b.n	8004206 <proceedGluedValues+0xada>
 8004192:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800419a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80041b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041b4:	601a      	str	r2, [r3, #0]
    switch (n) {
 80041b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d10c      	bne.n	80041de <proceedGluedValues+0xab2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80041c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041d4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e011      	b.n	8004202 <proceedGluedValues+0xad6>
    default: memcpy(to, from, n); break;
 80041de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041e2:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80041e6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041ea:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 80041ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	6809      	ldr	r1, [r1, #0]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	f004 f93c 	bl	8008478 <memcpy>
 8004200:	bf00      	nop
}
 8004202:	e000      	b.n	8004206 <proceedGluedValues+0xada>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004204:	bf00      	nop
}
 8004206:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8004212:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <proceedGluedValues+0xb06>
                    __entityCallback(entity, field, ptr, field->rdCallback.context);
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8004224:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004228:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800422c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004230:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_READ_CALLBACK */

                Wpos += typeLen;
 8004232:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423a:	4413      	add	r3, r2
 800423c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8004240:	e001      	b.n	8004246 <proceedGluedValues+0xb1a>
            } else {
                return ENTITY_ERROR;
 8004242:	2300      	movs	r3, #0
 8004244:	e014      	b.n	8004270 <proceedGluedValues+0xb44>
        for(reg i = 0; i < readRequestCnt; ++i) {
 8004246:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800424a:	3301      	adds	r3, #1
 800424c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004250:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004254:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004258:	429a      	cmp	r2, r3
 800425a:	f4ff adc2 	bcc.w	8003de2 <proceedGluedValues+0x6b6>
            }
        }
    }

    (*size) = Wpos;
 800425e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004262:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800426c:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 800426e:	2301      	movs	r3, #1
}
 8004270:	4618      	mov	r0, r3
 8004272:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop

0800427c <cTypePointerInit>:
    MY_CTYPE_USER_DATA_REVCPY(len, from, to);
}

// init data type ---------------------------------------
void cTypePointerInit(reg type, u8* ptr)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60bb      	str	r3, [r7, #8]
}


STATIC_FORCEINLINE reg getMYCTypeLen(reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b11      	cmp	r3, #17
 800428e:	d804      	bhi.n	800429a <cTypePointerInit+0x1e>
        return typeLengthMappingArray[type];
 8004290:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <cTypePointerInit+0x48>)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004298:	e000      	b.n	800429c <cTypePointerInit+0x20>
    }
    return 0;
 800429a:	2300      	movs	r3, #0
    reg len = getMYCTypeLen(type);
 800429c:	60fb      	str	r3, [r7, #12]

    while(len--) {
 800429e:	e004      	b.n	80042aa <cTypePointerInit+0x2e>
        *ptr++ = 0;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	603a      	str	r2, [r7, #0]
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
    while(len--) {
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	60fa      	str	r2, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f5      	bne.n	80042a0 <cTypePointerInit+0x24>
    }
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	0800eec4 	.word	0x0800eec4

080042c8 <pointerInit>:

// init data sizeof ---------------------------------------
void pointerInit(reg n, u8* ptr)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
    while(n--) {
 80042d2:	e004      	b.n	80042de <pointerInit+0x16>
        *ptr++ = 0;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	603a      	str	r2, [r7, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
    while(n--) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f5      	bne.n	80042d4 <pointerInit+0xc>
    }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <rawParser_dma_init>:
    }
    return self;
}

int rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: No input data valid ");
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <rawParser_dma_init+0x32>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	4619      	mov	r1, r3
 8004318:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <rawParser_dma_init+0xb0>)
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2348      	movs	r3, #72	; 0x48
 800431e:	4a23      	ldr	r2, [pc, #140]	; (80043ac <rawParser_dma_init+0xb4>)
 8004320:	4823      	ldr	r0, [pc, #140]	; (80043b0 <rawParser_dma_init+0xb8>)
 8004322:	f000 fcff 	bl	8004d24 <__M_Error>
 8004326:	2300      	movs	r3, #0
 8004328:	e03a      	b.n	80043a0 <rawParser_dma_init+0xa8>

    self->m_startByte = packStart;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	701a      	strb	r2, [r3, #0]
    self->m_receivePackLen = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
    self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	22ff      	movs	r2, #255	; 0xff
 800433a:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

    self->m_triggerSB = 0;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
    self->m_receivePos = 0;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    self->m_receiveReadPos = 0;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    self->m_receiveHandlePos = 0;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    self->TX.data = self->m_sendBuffer;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#else
    self->TX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    self->TX.size = 0;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
    self->RX.data = self->m_receiveFrameBuffer;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
#else
    self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

    self->RX.size = 0;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

    self->uniRXPosition = 0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return D_RAW_P_OK;
 800439e:	2301      	movs	r3, #1
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	0800e428 	.word	0x0800e428
 80043ac:	0800e39c 	.word	0x0800e39c
 80043b0:	0800e3d8 	.word	0x0800e3d8

080043b4 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af04      	add	r7, sp, #16
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
 80043c0:	4613      	mov	r3, r2
 80043c2:	70bb      	strb	r3, [r7, #2]
    if (newFrame) {
 80043c4:	78bb      	ldrb	r3, [r7, #2]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	22ff      	movs	r2, #255	; 0xff
 80043ce:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

        self->m_receiveHandlePos = 0;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
    }

    switch(self->receiveState) {
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 80043e8:	2b0d      	cmp	r3, #13
 80043ea:	f200 80d1 	bhi.w	8004590 <RawParser_dma_proceedByte+0x1dc>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <RawParser_dma_proceedByte+0x40>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	0800442d 	.word	0x0800442d
 80043f8:	08004591 	.word	0x08004591
 80043fc:	08004591 	.word	0x08004591
 8004400:	080044bb 	.word	0x080044bb
 8004404:	0800450d 	.word	0x0800450d
 8004408:	08004591 	.word	0x08004591
 800440c:	08004591 	.word	0x08004591
 8004410:	08004591 	.word	0x08004591
 8004414:	08004591 	.word	0x08004591
 8004418:	08004591 	.word	0x08004591
 800441c:	08004591 	.word	0x08004591
 8004420:	08004591 	.word	0x08004591
 8004424:	08004555 	.word	0x08004555
 8004428:	08004579 	.word	0x08004579

    case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	4611      	mov	r1, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd fc14 	bl	8001c64 <fast_crc8_maxim_byte>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        if(RECEIVE_EXTENDED_LEN_CMD == ch) {
            self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
        } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

            const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	429a      	cmp	r2, r3
 800444e:	d902      	bls.n	8004456 <RawParser_dma_proceedByte+0xa2>
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	3b01      	subs	r3, #1
 8004454:	e000      	b.n	8004458 <RawParser_dma_proceedByte+0xa4>
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6053      	str	r3, [r2, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60bb      	str	r3, [r7, #8]
            self->m_receiveHandlePos = 0;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2203      	movs	r2, #3
 800446e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

            M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004478:	d803      	bhi.n	8004482 <RawParser_dma_proceedByte+0xce>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f040 8089 	bne.w	8004594 <RawParser_dma_proceedByte+0x1e0>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004488:	d802      	bhi.n	8004490 <RawParser_dma_proceedByte+0xdc>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <RawParser_dma_proceedByte+0xe0>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <RawParser_dma_proceedByte+0xe2>
 8004494:	2300      	movs	r3, #0
 8004496:	b2d9      	uxtb	r1, r3
 8004498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800449c:	9302      	str	r3, [sp, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <RawParser_dma_proceedByte+0x1ec>)
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	23cb      	movs	r3, #203	; 0xcb
 80044a8:	4a3e      	ldr	r2, [pc, #248]	; (80045a4 <RawParser_dma_proceedByte+0x1f0>)
 80044aa:	483f      	ldr	r0, [pc, #252]	; (80045a8 <RawParser_dma_proceedByte+0x1f4>)
 80044ac:	f000 fc58 	bl	8004d60 <__M_Warning>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	220c      	movs	r2, #12
 80044b4:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
        }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        break;}
 80044b8:	e06c      	b.n	8004594 <RawParser_dma_proceedByte+0x1e0>

        break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    case RAW_P_DMA_RECEIVE_DATA: {
        reg rx_pos = self->m_receiveHandlePos;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 80044c0:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fd fbc9 	bl	8001c64 <fast_crc8_maxim_byte>
 80044d2:	4603      	mov	r3, r0
 80044d4:	461a      	mov	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
#endif /* D_RAW_P_CRC_ENA */

        self->RX.data[rx_pos] = ch;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 2624 	ldr.w	r2, [r3, #1572]	; 0x624
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	701a      	strb	r2, [r3, #0]
        ++rx_pos;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]

        if (rx_pos == self->m_receivePackLen) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d103      	bne.n	8004502 <RawParser_dma_proceedByte+0x14e>

#ifdef D_RAW_P_CRC_ENA
            D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
            self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
            self->RX.size = self->m_receivePackLen;
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
        }

        self->m_receiveHandlePos = rx_pos;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        break;}
 800450a:	e044      	b.n	8004596 <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

        if(self->m_receiveCalcCRC == ch) {
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	429a      	cmp	r2, r3
 8004516:	d109      	bne.n	800452c <RawParser_dma_proceedByte+0x178>
            self->RX.size = self->m_receivePackLen;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	220d      	movs	r2, #13
 8004526:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
        self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

        break;}
 800452a:	e034      	b.n	8004596 <RawParser_dma_proceedByte+0x1e2>
            M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive CRC8 error, rx_crc: %d, calc_crc: %d", ch, self->m_receiveCalcCRC);
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	f892 2608 	ldrb.w	r2, [r2, #1544]	; 0x608
 8004534:	9202      	str	r2, [sp, #8]
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <RawParser_dma_proceedByte+0x1f8>)
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	f240 1321 	movw	r3, #289	; 0x121
 8004540:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <RawParser_dma_proceedByte+0x1f0>)
 8004542:	2101      	movs	r1, #1
 8004544:	481a      	ldr	r0, [pc, #104]	; (80045b0 <RawParser_dma_proceedByte+0x1fc>)
 8004546:	f000 fc0b 	bl	8004d60 <__M_Warning>
            self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	220c      	movs	r2, #12
 800454e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        break;}
 8004552:	e020      	b.n	8004596 <RawParser_dma_proceedByte+0x1e2>

#endif /* D_RAW_P_CRC_ENA */


    case RAW_P_DMA_RECEIVE_ERR:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive error, byte: %d, rx_len: %d, max_rxlen: %d", ch, self->m_receivePackLen, D_RAW_P_RX_BUF_SIZE);
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6852      	ldr	r2, [r2, #4]
 800455a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800455e:	9103      	str	r1, [sp, #12]
 8004560:	9202      	str	r2, [sp, #8]
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <RawParser_dma_proceedByte+0x200>)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 800456c:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <RawParser_dma_proceedByte+0x1f0>)
 800456e:	2101      	movs	r1, #1
 8004570:	480f      	ldr	r0, [pc, #60]	; (80045b0 <RawParser_dma_proceedByte+0x1fc>)
 8004572:	f000 fbf5 	bl	8004d60 <__M_Warning>
        break;
 8004576:	e00e      	b.n	8004596 <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_OK:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: LAST Received OK, byte: %d is not received because no SB", ch);
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <RawParser_dma_proceedByte+0x204>)
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <RawParser_dma_proceedByte+0x1f0>)
 8004586:	2101      	movs	r1, #1
 8004588:	4809      	ldr	r0, [pc, #36]	; (80045b0 <RawParser_dma_proceedByte+0x1fc>)
 800458a:	f000 fbe9 	bl	8004d60 <__M_Warning>
        break;
 800458e:	e002      	b.n	8004596 <RawParser_dma_proceedByte+0x1e2>

    default:
        break;
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <RawParser_dma_proceedByte+0x1e2>
        break;}
 8004594:	bf00      	nop
    }
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	0800e4d4 	.word	0x0800e4d4
 80045a4:	0800e39c 	.word	0x0800e39c
 80045a8:	0800e4a4 	.word	0x0800e4a4
 80045ac:	0800e530 	.word	0x0800e530
 80045b0:	0800e524 	.word	0x0800e524
 80045b4:	0800e578 	.word	0x0800e578
 80045b8:	0800e5c8 	.word	0x0800e5c8

080045bc <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid input");
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d110      	bne.n	80045ec <RawParser_dma_proceed+0x30>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <RawParser_dma_proceed+0xec>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80045e0:	4a32      	ldr	r2, [pc, #200]	; (80046ac <RawParser_dma_proceed+0xf0>)
 80045e2:	4833      	ldr	r0, [pc, #204]	; (80046b0 <RawParser_dma_proceed+0xf4>)
 80045e4:	f000 fb9e 	bl	8004d24 <__M_Error>
 80045e8:	2300      	movs	r3, #0
 80045ea:	e059      	b.n	80046a0 <RawParser_dma_proceed+0xe4>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	613b      	str	r3, [r7, #16]
            reg   receiveReadPos      = self->m_receiveReadPos    & (D_RAW_P_RX_BUF_SIZE - 1U);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	617b      	str	r3, [r7, #20]
    self->RX.size = 0;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

//    if(receivePos_saved == receiveReadPos) { // may be needed
//        return &self->RX;
//    }

    while (receivePos_saved != receiveReadPos) {
 800460c:	e03b      	b.n	8004686 <RawParser_dma_proceed+0xca>

        const u8 ch = self->m_receiveBuffer[receiveReadPos];
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4413      	add	r3, r2
 8004614:	3308      	adds	r3, #8
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	73fb      	strb	r3, [r7, #15]

        if (self->m_triggerSB) {
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 360a 	ldrb.w	r3, [r3, #1546]	; 0x60a
 8004620:	2b00      	cmp	r3, #0
 8004622:	d016      	beq.n	8004652 <RawParser_dma_proceed+0x96>
            if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	429a      	cmp	r2, r3
 800462c:	d106      	bne.n	800463c <RawParser_dma_proceed+0x80>
                RawParser_dma_proceedByte(self, ch, 0);
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2200      	movs	r2, #0
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff febd 	bl	80043b4 <RawParser_dma_proceedByte>
 800463a:	e005      	b.n	8004648 <RawParser_dma_proceed+0x8c>
            } else { //{SB}{!SB} -> {SB} and newframe
                RawParser_dma_proceedByte(self, ch, 1);
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2201      	movs	r2, #1
 8004640:	4619      	mov	r1, r3
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff feb6 	bl	80043b4 <RawParser_dma_proceedByte>
            }
            self->m_triggerSB = 0;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8004650:	e00f      	b.n	8004672 <RawParser_dma_proceed+0xb6>
        } else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	7bfa      	ldrb	r2, [r7, #15]
 8004658:	429a      	cmp	r2, r3
 800465a:	d104      	bne.n	8004666 <RawParser_dma_proceed+0xaa>
            self->m_triggerSB = 1;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8004664:	e005      	b.n	8004672 <RawParser_dma_proceed+0xb6>
        } else { //{!SB}{!SB} -> {!SB}
            RawParser_dma_proceedByte(self, ch, 0);
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2200      	movs	r2, #0
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff fea1 	bl	80043b4 <RawParser_dma_proceedByte>
        }

        receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467a:	617b      	str	r3, [r7, #20]

        if(self->RX.size != 0) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <RawParser_dma_proceed+0xd4>
    while (receivePos_saved != receiveReadPos) {
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	429a      	cmp	r2, r3
 800468c:	d1bf      	bne.n	800460e <RawParser_dma_proceed+0x52>
 800468e:	e000      	b.n	8004692 <RawParser_dma_proceed+0xd6>
#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
            /* Now decode -- encoded codeword size must be passed */
            rscode_decode(&self->rs_ecc, self->RX.data, self->RX.size);
            self->RX.size -= RSCODE_NPAR;
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */
            break;
 8004690:	bf00      	nop
        }
    }

    self->m_receiveReadPos = receiveReadPos;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    return &self->RX;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f203 6324 	addw	r3, r3, #1572	; 0x624
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	0800e640 	.word	0x0800e640
 80046ac:	0800e39c 	.word	0x0800e39c
 80046b0:	0800e61c 	.word	0x0800e61c

080046b4 <RawParser_dma_shieldFrame>:

// slow shield functions (slow & more copy)-----------------------------------------------------------------------------------------
RawParser_Frame_t* RawParser_dma_shieldFrame(RawParser_dma_t* const self, const u8* data, reg len)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	; 0x30
 80046b8:	af04      	add	r7, sp, #16
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_shieldFrame: No valid input");
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d110      	bne.n	80046e8 <RawParser_dma_shieldFrame+0x34>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	4619      	mov	r1, r3
 80046d4:	4b57      	ldr	r3, [pc, #348]	; (8004834 <RawParser_dma_shieldFrame+0x180>)
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80046dc:	4a56      	ldr	r2, [pc, #344]	; (8004838 <RawParser_dma_shieldFrame+0x184>)
 80046de:	4857      	ldr	r0, [pc, #348]	; (800483c <RawParser_dma_shieldFrame+0x188>)
 80046e0:	f000 fb20 	bl	8004d24 <__M_Error>
 80046e4:	2300      	movs	r3, #0
 80046e6:	e0a1      	b.n	800482c <RawParser_dma_shieldFrame+0x178>
    M_Assert_Break((data == (u8*)NULL) || len == 0, M_EMPTY, {
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <RawParser_dma_shieldFrame+0x40>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d119      	bne.n	8004728 <RawParser_dma_shieldFrame+0x74>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <RawParser_dma_shieldFrame+0x4c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <RawParser_dma_shieldFrame+0x50>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <RawParser_dma_shieldFrame+0x52>
 8004704:	2300      	movs	r3, #0
 8004706:	b2d9      	uxtb	r1, r3
 8004708:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <RawParser_dma_shieldFrame+0x180>)
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	f240 13d1 	movw	r3, #465	; 0x1d1
 8004710:	4a49      	ldr	r2, [pc, #292]	; (8004838 <RawParser_dma_shieldFrame+0x184>)
 8004712:	484b      	ldr	r0, [pc, #300]	; (8004840 <RawParser_dma_shieldFrame+0x18c>)
 8004714:	f000 fb06 	bl	8004d24 <__M_Error>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8004726:	e081      	b.n	800482c <RawParser_dma_shieldFrame+0x178>

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    RawParser_dma_startTransmittPacket(self, (len + RSCODE_NPAR));
    rs_encode_data_onlyParity(&self->rs_ecc, data, len);
#else
    RawParser_dma_startTransmittPacket(self, len);
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f892 	bl	8004854 <RawParser_dma_startTransmittPacket>

#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    while(len--) {
 8004730:	e073      	b.n	800481a <RawParser_dma_shieldFrame+0x166>
        RawParser_dma_addTxByteCRC(self, *data++);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	60ba      	str	r2, [r7, #8]
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	4613      	mov	r3, r2
 8004740:	76fb      	strb	r3, [r7, #27]

#ifdef D_RAW_P_CRC_ENA
// elementary byte adding functions with calc crc----------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_addTxByteCRC(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10e      	bne.n	8004766 <RawParser_dma_shieldFrame+0xb2>
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <RawParser_dma_shieldFrame+0x190>)
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	23a1      	movs	r3, #161	; 0xa1
 800475c:	4a3a      	ldr	r2, [pc, #232]	; (8004848 <RawParser_dma_shieldFrame+0x194>)
 800475e:	4837      	ldr	r0, [pc, #220]	; (800483c <RawParser_dma_shieldFrame+0x188>)
 8004760:	f000 fae0 	bl	8004d24 <__M_Error>
 8004764:	e059      	b.n	800481a <RawParser_dma_shieldFrame+0x166>
#   ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#   endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    // move to cash
    u8* const   TX_data   = self->TX.data;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 800476c:	617b      	str	r3, [r7, #20]
    reg         TX_size   = self->TX.size;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004774:	613b      	str	r3, [r7, #16]


#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2bfd      	cmp	r3, #253	; 0xfd
 800477a:	d113      	bne.n	80047a4 <RawParser_dma_shieldFrame+0xf0>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2bfd      	cmp	r3, #253	; 0xfd
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	4619      	mov	r1, r3
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	3301      	adds	r3, #1
 800478e:	22fd      	movs	r2, #253	; 0xfd
 8004790:	9202      	str	r2, [sp, #8]
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	4b2d      	ldr	r3, [pc, #180]	; (800484c <RawParser_dma_shieldFrame+0x198>)
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	23b1      	movs	r3, #177	; 0xb1
 800479a:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <RawParser_dma_shieldFrame+0x194>)
 800479c:	482c      	ldr	r0, [pc, #176]	; (8004850 <RawParser_dma_shieldFrame+0x19c>)
 800479e:	f000 fac1 	bl	8004d24 <__M_Error>
 80047a2:	e03a      	b.n	800481a <RawParser_dma_shieldFrame+0x166>
#   else
    M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */


    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 80047aa:	7efa      	ldrb	r2, [r7, #27]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd fa58 	bl	8001c64 <fast_crc8_maxim_byte>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461a      	mov	r2, r3
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609

    TX_data[TX_size++] = byte;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	613a      	str	r2, [r7, #16]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4413      	add	r3, r2
 80047c8:	7efa      	ldrb	r2, [r7, #27]
 80047ca:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	7efa      	ldrb	r2, [r7, #27]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d11d      	bne.n	8004812 <RawParser_dma_shieldFrame+0x15e>

#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2bfd      	cmp	r3, #253	; 0xfd
 80047da:	d113      	bne.n	8004804 <RawParser_dma_shieldFrame+0x150>
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2bfd      	cmp	r3, #253	; 0xfd
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4619      	mov	r1, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3301      	adds	r3, #1
 80047ee:	22fd      	movs	r2, #253	; 0xfd
 80047f0:	9202      	str	r2, [sp, #8]
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <RawParser_dma_shieldFrame+0x198>)
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	23bd      	movs	r3, #189	; 0xbd
 80047fa:	4a13      	ldr	r2, [pc, #76]	; (8004848 <RawParser_dma_shieldFrame+0x194>)
 80047fc:	4814      	ldr	r0, [pc, #80]	; (8004850 <RawParser_dma_shieldFrame+0x19c>)
 80047fe:	f000 fa91 	bl	8004d24 <__M_Error>
 8004802:	e00a      	b.n	800481a <RawParser_dma_shieldFrame+0x166>
#   else
        M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */

        TX_data[TX_size++] = byte;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	613a      	str	r2, [r7, #16]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4413      	add	r3, r2
 800480e:	7efa      	ldrb	r2, [r7, #27]
 8004810:	701a      	strb	r2, [r3, #0]
    }

    self->TX.size = TX_size;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    while(len--) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	1e5a      	subs	r2, r3, #1
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d186      	bne.n	8004732 <RawParser_dma_shieldFrame+0x7e>
    for (unsigned i = 0; i < RSCODE_NPAR; ++i) {
        RawParser_dma_addTxByteCRC(self, pBytes[RSCODE_NPAR-1-i]);
    }
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return RawParser_dma_finishTransmittPacket(self);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f91f 	bl	8004a68 <RawParser_dma_finishTransmittPacket>
 800482a:	4603      	mov	r3, r0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	0800e668 	.word	0x0800e668
 8004838:	0800e39c 	.word	0x0800e39c
 800483c:	0800e61c 	.word	0x0800e61c
 8004840:	0800e694 	.word	0x0800e694
 8004844:	0800e6f0 	.word	0x0800e6f0
 8004848:	0800e6b4 	.word	0x0800e6b4
 800484c:	0800e748 	.word	0x0800e748
 8004850:	0800e71c 	.word	0x0800e71c

08004854 <RawParser_dma_startTransmittPacket>:

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
void RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen) /////////////////////////////////////////////////////
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	; 0x30
 8004858:	af04      	add	r7, sp, #16
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input");
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <RawParser_dma_startTransmittPacket+0x30>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	4619      	mov	r1, r3
 8004872:	4b70      	ldr	r3, [pc, #448]	; (8004a34 <RawParser_dma_startTransmittPacket+0x1e0>)
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	f240 13f1 	movw	r3, #497	; 0x1f1
 800487a:	4a6f      	ldr	r2, [pc, #444]	; (8004a38 <RawParser_dma_startTransmittPacket+0x1e4>)
 800487c:	486f      	ldr	r0, [pc, #444]	; (8004a3c <RawParser_dma_startTransmittPacket+0x1e8>)
 800487e:	f000 fa51 	bl	8004d24 <__M_Error>
 8004882:	e0d3      	b.n	8004a2c <RawParser_dma_startTransmittPacket+0x1d8>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    M_Assert_Break((predictedLen == 0), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length");
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <RawParser_dma_startTransmittPacket+0x56>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	4619      	mov	r1, r3
 8004898:	4b69      	ldr	r3, [pc, #420]	; (8004a40 <RawParser_dma_startTransmittPacket+0x1ec>)
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	f240 13fb 	movw	r3, #507	; 0x1fb
 80048a0:	4a65      	ldr	r2, [pc, #404]	; (8004a38 <RawParser_dma_startTransmittPacket+0x1e4>)
 80048a2:	4868      	ldr	r0, [pc, #416]	; (8004a44 <RawParser_dma_startTransmittPacket+0x1f0>)
 80048a4:	f000 fa3e 	bl	8004d24 <__M_Error>
 80048a8:	e0c0      	b.n	8004a2c <RawParser_dma_startTransmittPacket+0x1d8>

#if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE // control undefined behavior
    M_Assert_Break( ((predictedLen + 4) > (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_MAX_PROTOCOL_LEN);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2bfd      	cmp	r3, #253	; 0xfd
 80048b0:	d914      	bls.n	80048dc <RawParser_dma_startTransmittPacket+0x88>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	3304      	adds	r3, #4
 80048b6:	2bfd      	cmp	r3, #253	; 0xfd
 80048b8:	bf8c      	ite	hi
 80048ba:	2301      	movhi	r3, #1
 80048bc:	2300      	movls	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	23fe      	movs	r3, #254	; 0xfe
 80048c4:	9302      	str	r3, [sp, #8]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	4b5f      	ldr	r3, [pc, #380]	; (8004a48 <RawParser_dma_startTransmittPacket+0x1f4>)
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80048d2:	4a59      	ldr	r2, [pc, #356]	; (8004a38 <RawParser_dma_startTransmittPacket+0x1e4>)
 80048d4:	485d      	ldr	r0, [pc, #372]	; (8004a4c <RawParser_dma_startTransmittPacket+0x1f8>)
 80048d6:	f000 fa25 	bl	8004d24 <__M_Error>
 80048da:	e0a7      	b.n	8004a2c <RawParser_dma_startTransmittPacket+0x1d8>
    M_Assert_Warning((predictedLen > (D_RAW_P_MAX_PROTOCOL_LEN >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_MAX_PROTOCOL_LEN >> 1));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b7f      	cmp	r3, #127	; 0x7f
 80048e0:	d912      	bls.n	8004908 <RawParser_dma_startTransmittPacket+0xb4>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b7f      	cmp	r3, #127	; 0x7f
 80048e6:	bf8c      	ite	hi
 80048e8:	2301      	movhi	r3, #1
 80048ea:	2300      	movls	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	237f      	movs	r3, #127	; 0x7f
 80048f2:	9302      	str	r3, [sp, #8]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	4b55      	ldr	r3, [pc, #340]	; (8004a50 <RawParser_dma_startTransmittPacket+0x1fc>)
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004900:	4a4d      	ldr	r2, [pc, #308]	; (8004a38 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004902:	4854      	ldr	r0, [pc, #336]	; (8004a54 <RawParser_dma_startTransmittPacket+0x200>)
 8004904:	f000 fa2c 	bl	8004d60 <__M_Warning>
    M_Assert_Warning((predictedLen > (D_RAW_P_TX_BUF_SIZE >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - buffer size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_TX_BUF_SIZE >> 1));
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */


#ifdef D_RAW_P_CRC_ENA
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	22ff      	movs	r2, #255	; 0xff
 800490c:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    D_RAW_P_CRC_START(self->m_transmittCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

    const u8 startByte = self->m_startByte;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	77fb      	strb	r3, [r7, #31]


    self->TX.size = 0;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    self->TX.data[self->TX.size++] = startByte;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800492a:	1c58      	adds	r0, r3, #1
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	f8c1 0620 	str.w	r0, [r1, #1568]	; 0x620
 8004932:	4413      	add	r3, r2
 8004934:	7ffa      	ldrb	r2, [r7, #31]
 8004936:	701a      	strb	r2, [r3, #0]
        RawParser_dma_addTxByteCRC(self, (u8)((predictedLen >> 8U) & 0x000000FFUL));

    } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        RawParser_dma_addTxByteCRC(self, (u8)(((predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen) & 0x000000FFUL));
 8004938:	7ffb      	ldrb	r3, [r7, #31]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d304      	bcc.n	800494a <RawParser_dma_startTransmittPacket+0xf6>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	3301      	adds	r3, #1
 8004946:	b2db      	uxtb	r3, r3
 8004948:	e001      	b.n	800494e <RawParser_dma_startTransmittPacket+0xfa>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	61ba      	str	r2, [r7, #24]
 8004952:	75fb      	strb	r3, [r7, #23]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10e      	bne.n	8004978 <RawParser_dma_startTransmittPacket+0x124>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	4619      	mov	r1, r3
 8004968:	4b3b      	ldr	r3, [pc, #236]	; (8004a58 <RawParser_dma_startTransmittPacket+0x204>)
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	23a1      	movs	r3, #161	; 0xa1
 800496e:	4a3b      	ldr	r2, [pc, #236]	; (8004a5c <RawParser_dma_startTransmittPacket+0x208>)
 8004970:	4832      	ldr	r0, [pc, #200]	; (8004a3c <RawParser_dma_startTransmittPacket+0x1e8>)
 8004972:	f000 f9d7 	bl	8004d24 <__M_Error>
 8004976:	e059      	b.n	8004a2c <RawParser_dma_startTransmittPacket+0x1d8>
    u8* const   TX_data   = self->TX.data;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 800497e:	613b      	str	r3, [r7, #16]
    reg         TX_size   = self->TX.size;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004986:	60fb      	str	r3, [r7, #12]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2bfd      	cmp	r3, #253	; 0xfd
 800498c:	d113      	bne.n	80049b6 <RawParser_dma_startTransmittPacket+0x162>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2bfd      	cmp	r3, #253	; 0xfd
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	4619      	mov	r1, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	22fd      	movs	r2, #253	; 0xfd
 80049a2:	9202      	str	r2, [sp, #8]
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	4b2e      	ldr	r3, [pc, #184]	; (8004a60 <RawParser_dma_startTransmittPacket+0x20c>)
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	23b1      	movs	r3, #177	; 0xb1
 80049ac:	4a2b      	ldr	r2, [pc, #172]	; (8004a5c <RawParser_dma_startTransmittPacket+0x208>)
 80049ae:	482d      	ldr	r0, [pc, #180]	; (8004a64 <RawParser_dma_startTransmittPacket+0x210>)
 80049b0:	f000 f9b8 	bl	8004d24 <__M_Error>
 80049b4:	e03a      	b.n	8004a2c <RawParser_dma_startTransmittPacket+0x1d8>
    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 80049bc:	7dfa      	ldrb	r2, [r7, #23]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fd f94f 	bl	8001c64 <fast_crc8_maxim_byte>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461a      	mov	r2, r3
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    TX_data[TX_size++] = byte;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	60fa      	str	r2, [r7, #12]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	7dfa      	ldrb	r2, [r7, #23]
 80049dc:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	7dfa      	ldrb	r2, [r7, #23]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d11d      	bne.n	8004a24 <RawParser_dma_startTransmittPacket+0x1d0>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2bfd      	cmp	r3, #253	; 0xfd
 80049ec:	d113      	bne.n	8004a16 <RawParser_dma_startTransmittPacket+0x1c2>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2bfd      	cmp	r3, #253	; 0xfd
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	4619      	mov	r1, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	22fd      	movs	r2, #253	; 0xfd
 8004a02:	9202      	str	r2, [sp, #8]
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <RawParser_dma_startTransmittPacket+0x20c>)
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	23bd      	movs	r3, #189	; 0xbd
 8004a0c:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <RawParser_dma_startTransmittPacket+0x208>)
 8004a0e:	4815      	ldr	r0, [pc, #84]	; (8004a64 <RawParser_dma_startTransmittPacket+0x210>)
 8004a10:	f000 f988 	bl	8004d24 <__M_Error>
 8004a14:	e00a      	b.n	8004a2c <RawParser_dma_startTransmittPacket+0x1d8>
        TX_data[TX_size++] = byte;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	60fa      	str	r2, [r7, #12]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4413      	add	r3, r2
 8004a20:	7dfa      	ldrb	r2, [r7, #23]
 8004a22:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */
}
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	0800e798 	.word	0x0800e798
 8004a38:	0800e39c 	.word	0x0800e39c
 8004a3c:	0800e61c 	.word	0x0800e61c
 8004a40:	0800e7e0 	.word	0x0800e7e0
 8004a44:	0800e7cc 	.word	0x0800e7cc
 8004a48:	0800e854 	.word	0x0800e854
 8004a4c:	0800e81c 	.word	0x0800e81c
 8004a50:	0800e8d4 	.word	0x0800e8d4
 8004a54:	0800e8a0 	.word	0x0800e8a0
 8004a58:	0800e6f0 	.word	0x0800e6f0
 8004a5c:	0800e6b4 	.word	0x0800e6b4
 8004a60:	0800e748 	.word	0x0800e748
 8004a64:	0800e71c 	.word	0x0800e71c

08004a68 <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af04      	add	r7, sp, #16
 8004a6e:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_startTransmittPacket: No valid input");
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d110      	bne.n	8004a98 <RawParser_dma_finishTransmittPacket+0x30>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	4619      	mov	r1, r3
 8004a84:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <RawParser_dma_finishTransmittPacket+0x10c>)
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	f240 2326 	movw	r3, #550	; 0x226
 8004a8c:	4a3a      	ldr	r2, [pc, #232]	; (8004b78 <RawParser_dma_finishTransmittPacket+0x110>)
 8004a8e:	483b      	ldr	r0, [pc, #236]	; (8004b7c <RawParser_dma_finishTransmittPacket+0x114>)
 8004a90:	f000 f948 	bl	8004d24 <__M_Error>
 8004a94:	2300      	movs	r3, #0
 8004a96:	e068      	b.n	8004b6a <RawParser_dma_finishTransmittPacket+0x102>
#ifdef D_RAW_P_CRC_ENA
    D_RAW_P_CRC_FINAL(self->m_transmittCalcCRC);

#   ifdef D_RAW_P_USE_CRC8

    RawParser_dma_addTxByte(self, self->m_transmittCalcCRC);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 2609 	ldrb.w	r2, [r3, #1545]	; 0x609
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	74fb      	strb	r3, [r7, #19]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid input");
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10e      	bne.n	8004aca <RawParser_dma_finishTransmittPacket+0x62>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <RawParser_dma_finishTransmittPacket+0x118>)
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2379      	movs	r3, #121	; 0x79
 8004ac0:	4a30      	ldr	r2, [pc, #192]	; (8004b84 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004ac2:	482e      	ldr	r0, [pc, #184]	; (8004b7c <RawParser_dma_finishTransmittPacket+0x114>)
 8004ac4:	f000 f92e 	bl	8004d24 <__M_Error>
 8004ac8:	e04c      	b.n	8004b64 <RawParser_dma_finishTransmittPacket+0xfc>
    u8* const   TX_data   = self->TX.data;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004ad0:	60fb      	str	r3, [r7, #12]
    reg         TX_size   = self->TX.size;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004ad8:	60bb      	str	r3, [r7, #8]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2bfd      	cmp	r3, #253	; 0xfd
 8004ade:	d113      	bne.n	8004b08 <RawParser_dma_finishTransmittPacket+0xa0>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2bfd      	cmp	r3, #253	; 0xfd
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	4619      	mov	r1, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3301      	adds	r3, #1
 8004af2:	22fd      	movs	r2, #253	; 0xfd
 8004af4:	9202      	str	r2, [sp, #8]
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <RawParser_dma_finishTransmittPacket+0x120>)
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2389      	movs	r3, #137	; 0x89
 8004afe:	4a21      	ldr	r2, [pc, #132]	; (8004b84 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004b00:	4822      	ldr	r0, [pc, #136]	; (8004b8c <RawParser_dma_finishTransmittPacket+0x124>)
 8004b02:	f000 f90f 	bl	8004d24 <__M_Error>
 8004b06:	e02d      	b.n	8004b64 <RawParser_dma_finishTransmittPacket+0xfc>
    TX_data[TX_size++] = byte;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	60ba      	str	r2, [r7, #8]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	7cfa      	ldrb	r2, [r7, #19]
 8004b14:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	7cfa      	ldrb	r2, [r7, #19]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d11d      	bne.n	8004b5c <RawParser_dma_finishTransmittPacket+0xf4>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2bfd      	cmp	r3, #253	; 0xfd
 8004b24:	d113      	bne.n	8004b4e <RawParser_dma_finishTransmittPacket+0xe6>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2bfd      	cmp	r3, #253	; 0xfd
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	3301      	adds	r3, #1
 8004b38:	22fd      	movs	r2, #253	; 0xfd
 8004b3a:	9202      	str	r2, [sp, #8]
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <RawParser_dma_finishTransmittPacket+0x120>)
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	2392      	movs	r3, #146	; 0x92
 8004b44:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004b46:	4811      	ldr	r0, [pc, #68]	; (8004b8c <RawParser_dma_finishTransmittPacket+0x124>)
 8004b48:	f000 f8ec 	bl	8004d24 <__M_Error>
 8004b4c:	e00a      	b.n	8004b64 <RawParser_dma_finishTransmittPacket+0xfc>
        TX_data[TX_size++] = byte;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	60ba      	str	r2, [r7, #8]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	7cfa      	ldrb	r2, [r7, #19]
 8004b5a:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    RawParser_dma_addTxByte(self, (u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

    return &self->TX;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f203 631c 	addw	r3, r3, #1564	; 0x61c
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	0800e798 	.word	0x0800e798
 8004b78:	0800e39c 	.word	0x0800e39c
 8004b7c:	0800e61c 	.word	0x0800e61c
 8004b80:	0800e978 	.word	0x0800e978
 8004b84:	0800e6b4 	.word	0x0800e6b4
 8004b88:	0800e9a0 	.word	0x0800e9a0
 8004b8c:	0800e71c 	.word	0x0800e71c

08004b90 <__M_SEND_ASSERT_MSG>:

static inline void __M_SEND_ASSERT_MSG(const char* const header,
                                const char* const expr_str, const unsigned char expr,
                                const char* const file, const int line,
                                const char* const msg, va_list args)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	71fb      	strb	r3, [r7, #7]
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)

    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b5b      	cmp	r3, #91	; 0x5b
 8004ba6:	d175      	bne.n	8004c94 <__M_SEND_ASSERT_MSG+0x104>
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	3302      	adds	r3, #2
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b5d      	cmp	r3, #93	; 0x5d
 8004bb0:	d170      	bne.n	8004c94 <__M_SEND_ASSERT_MSG+0x104>

        int assertEna = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
        char* descr = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]

        switch(__M_ASSERT_DATA(msg)) {
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b73      	cmp	r3, #115	; 0x73
 8004bc2:	d015      	beq.n	8004bf0 <__M_SEND_ASSERT_MSG+0x60>
 8004bc4:	2b73      	cmp	r3, #115	; 0x73
 8004bc6:	dc23      	bgt.n	8004c10 <__M_SEND_ASSERT_MSG+0x80>
 8004bc8:	2b65      	cmp	r3, #101	; 0x65
 8004bca:	d019      	beq.n	8004c00 <__M_SEND_ASSERT_MSG+0x70>
 8004bcc:	2b65      	cmp	r3, #101	; 0x65
 8004bce:	dc1f      	bgt.n	8004c10 <__M_SEND_ASSERT_MSG+0x80>
 8004bd0:	2b30      	cmp	r3, #48	; 0x30
 8004bd2:	f000 8095 	beq.w	8004d00 <__M_SEND_ASSERT_MSG+0x170>
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d11a      	bne.n	8004c10 <__M_SEND_ASSERT_MSG+0x80>

        case 'd':
            // get library info
            assertEna = va_arg(args, const int);
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	1d1a      	adds	r2, r3, #4
 8004bde:	62ba      	str	r2, [r7, #40]	; 0x28
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	62ba      	str	r2, [r7, #40]	; 0x28
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]
            break;
 8004bee:	e00f      	b.n	8004c10 <__M_SEND_ASSERT_MSG+0x80>

        case 's':
            // get library info
            assertEna = 1;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	62ba      	str	r2, [r7, #40]	; 0x28
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	613b      	str	r3, [r7, #16]
            break;
 8004bfe:	e007      	b.n	8004c10 <__M_SEND_ASSERT_MSG+0x80>

        case 'e':
            // get library info
            assertEna = va_arg(args, const int);
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	1d1a      	adds	r2, r3, #4
 8004c04:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	617b      	str	r3, [r7, #20]
            descr = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
            break;
 8004c0e:	bf00      	nop

        }

#   if !defined(M_MESSAGE_ALWAYS_ENABLE)
        // send message if enabled message
        if(assertEna) {
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d076      	beq.n	8004d04 <__M_SEND_ASSERT_MSG+0x174>
#   endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) */
            fprintf(stderr, "\n%s\n", header);
 8004c16:	4b3d      	ldr	r3, [pc, #244]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	493c      	ldr	r1, [pc, #240]	; (8004d10 <__M_SEND_ASSERT_MSG+0x180>)
 8004c20:	4618      	mov	r0, r3
 8004c22:	f003 fb11 	bl	8008248 <fiprintf>
            fprintf(stderr, "Library Name: %s\n", descr);
 8004c26:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4939      	ldr	r1, [pc, #228]	; (8004d14 <__M_SEND_ASSERT_MSG+0x184>)
 8004c30:	4618      	mov	r0, r3
 8004c32:	f003 fb09 	bl	8008248 <fiprintf>
            fprintf(stderr, "Assert failed:\t");
 8004c36:	4b35      	ldr	r3, [pc, #212]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	220f      	movs	r2, #15
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4835      	ldr	r0, [pc, #212]	; (8004d18 <__M_SEND_ASSERT_MSG+0x188>)
 8004c42:	f003 fbd3 	bl	80083ec <fwrite>
            vfprintf(stderr, &msg[3], args);
 8004c46:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68d8      	ldr	r0, [r3, #12]
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	3303      	adds	r3, #3
 8004c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c52:	4619      	mov	r1, r3
 8004c54:	f003 fe90 	bl	8008978 <vfiprintf>
            fprintf(stderr, "\n");
 8004c58:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	200a      	movs	r0, #10
 8004c62:	f003 fb3b 	bl	80082dc <fputc>

#   if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8004c66:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68d8      	ldr	r0, [r3, #12]
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	492a      	ldr	r1, [pc, #168]	; (8004d1c <__M_SEND_ASSERT_MSG+0x18c>)
 8004c72:	f003 fae9 	bl	8008248 <fiprintf>
#   endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#   if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8004c76:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68d8      	ldr	r0, [r3, #12]
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	4927      	ldr	r1, [pc, #156]	; (8004d20 <__M_SEND_ASSERT_MSG+0x190>)
 8004c82:	f003 fae1 	bl	8008248 <fiprintf>
#   endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */
            fflush(stderr);
 8004c86:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f003 f9f3 	bl	8008078 <fflush>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004c92:	e037      	b.n	8004d04 <__M_SEND_ASSERT_MSG+0x174>
        (void)assertEna;
    } else {

#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

        fprintf(stderr, "\n%s\n", header);
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	491c      	ldr	r1, [pc, #112]	; (8004d10 <__M_SEND_ASSERT_MSG+0x180>)
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fad2 	bl	8008248 <fiprintf>
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
        fprintf(stderr, "Assert failed:\t");
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	220f      	movs	r2, #15
 8004cac:	2101      	movs	r1, #1
 8004cae:	481a      	ldr	r0, [pc, #104]	; (8004d18 <__M_SEND_ASSERT_MSG+0x188>)
 8004cb0:	f003 fb9c 	bl	80083ec <fwrite>
        vfprintf(stderr, msg, args);
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f003 fe5a 	bl	8008978 <vfiprintf>
        fprintf(stderr, "\n");
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	200a      	movs	r0, #10
 8004cce:	f003 fb05 	bl	80082dc <fputc>
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

#if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68d8      	ldr	r0, [r3, #12]
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	490f      	ldr	r1, [pc, #60]	; (8004d1c <__M_SEND_ASSERT_MSG+0x18c>)
 8004cde:	f003 fab3 	bl	8008248 <fiprintf>
#endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68d8      	ldr	r0, [r3, #12]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	490c      	ldr	r1, [pc, #48]	; (8004d20 <__M_SEND_ASSERT_MSG+0x190>)
 8004cee:	f003 faab 	bl	8008248 <fiprintf>
#endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */

        fflush(stderr);
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <__M_SEND_ASSERT_MSG+0x17c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f003 f9bd 	bl	8008078 <fflush>
 8004cfe:	e002      	b.n	8004d06 <__M_SEND_ASSERT_MSG+0x176>
            return;
 8004d00:	bf00      	nop
 8004d02:	e000      	b.n	8004d06 <__M_SEND_ASSERT_MSG+0x176>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004d04:	bf00      	nop
    (void)expr;
    (void)file;
    (void)line;
    (void)msg;
    (void)args;
}
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	2000000c 	.word	0x2000000c
 8004d10:	0800eaf0 	.word	0x0800eaf0
 8004d14:	0800eaf8 	.word	0x0800eaf8
 8004d18:	0800eb0c 	.word	0x0800eb0c
 8004d1c:	0800eb1c 	.word	0x0800eb1c
 8004d20:	0800eb38 	.word	0x0800eb38

08004d24 <__M_Error>:

void __M_Error(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af04      	add	r7, sp, #16
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	460b      	mov	r3, r1
 8004d32:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8004d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d38:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("PROGRAMM EXIT WITH ERROR!!!", expr_str, expr, file, line, msg, args);
 8004d3a:	7afa      	ldrb	r2, [r7, #11]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	4803      	ldr	r0, [pc, #12]	; (8004d5c <__M_Error+0x38>)
 8004d4e:	f7ff ff1f 	bl	8004b90 <__M_SEND_ASSERT_MSG>
    va_end(args);
    //abort(); // exit programm
}
 8004d52:	bf00      	nop
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	0800eb50 	.word	0x0800eb50

08004d60 <__M_Warning>:

void __M_Warning(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af04      	add	r7, sp, #16
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8004d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d74:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("WARNING!!!", expr_str, expr, file, line, msg, args);
 8004d76:	7afa      	ldrb	r2, [r7, #11]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	9302      	str	r3, [sp, #8]
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	4803      	ldr	r0, [pc, #12]	; (8004d98 <__M_Warning+0x38>)
 8004d8a:	f7ff ff01 	bl	8004b90 <__M_SEND_ASSERT_MSG>
    va_end(args);
}
 8004d8e:	bf00      	nop
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	0800eb6c 	.word	0x0800eb6c

08004d9c <ping_worker>:
#include <string.h>



void ping_worker(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
	static u8 counte = 0;


	memcpy(outputData, inputData, (*size));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	68f9      	ldr	r1, [r7, #12]
 8004db2:	68b8      	ldr	r0, [r7, #8]
 8004db4:	f003 fb60 	bl	8008478 <memcpy>
	outputData[(*size)] = counte;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <ping_worker+0x48>)
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	701a      	strb	r2, [r3, #0]
	++(*size);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]
	++counte;
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <ping_worker+0x48>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	4b02      	ldr	r3, [pc, #8]	; (8004de4 <ping_worker+0x48>)
 8004dda:	701a      	strb	r2, [r3, #0]
	UNUSED(maxOutBufferSize);
	UNUSED(ctx);
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	2000029c 	.word	0x2000029c

08004de8 <init_stm32_communicator>:

Communicator_t comm;
extern UART_HandleTypeDef huart1;

int init_stm32_communicator(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
	int state = rawParser_dma_init(&comm.rawparser, 0x1A);
 8004dee:	211a      	movs	r1, #26
 8004df0:	4810      	ldr	r0, [pc, #64]	; (8004e34 <init_stm32_communicator+0x4c>)
 8004df2:	f7ff fa81 	bl	80042f8 <rawParser_dma_init>
 8004df6:	6078      	str	r0, [r7, #4]
	if(state != D_RAW_P_OK) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d001      	beq.n	8004e02 <init_stm32_communicator+0x1a>
		return D_RAW_P_ERROR;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e014      	b.n	8004e2c <init_stm32_communicator+0x44>
	}

	// init callback manager
	CallbackManager_init(&comm.manager);
 8004e02:	480d      	ldr	r0, [pc, #52]	; (8004e38 <init_stm32_communicator+0x50>)
 8004e04:	f7fc fe76 	bl	8001af4 <CallbackManager_init>
	CallbackManager_addWorker(&comm.manager, 0x00, ping_worker, NULL);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4a0c      	ldr	r2, [pc, #48]	; (8004e3c <init_stm32_communicator+0x54>)
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	480a      	ldr	r0, [pc, #40]	; (8004e38 <init_stm32_communicator+0x50>)
 8004e10:	f7fc fea8 	bl	8001b64 <CallbackManager_addWorker>
	CallbackManager_addWorker(&comm.manager, 0xF0, entityCMD, NULL);
 8004e14:	2300      	movs	r3, #0
 8004e16:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <init_stm32_communicator+0x58>)
 8004e18:	21f0      	movs	r1, #240	; 0xf0
 8004e1a:	4807      	ldr	r0, [pc, #28]	; (8004e38 <init_stm32_communicator+0x50>)
 8004e1c:	f7fc fea2 	bl	8001b64 <CallbackManager_addWorker>

	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8004e20:	2201      	movs	r2, #1
 8004e22:	4908      	ldr	r1, [pc, #32]	; (8004e44 <init_stm32_communicator+0x5c>)
 8004e24:	4808      	ldr	r0, [pc, #32]	; (8004e48 <init_stm32_communicator+0x60>)
 8004e26:	f002 f8a0 	bl	8006f6a <HAL_UART_Receive_IT>
	return state;
 8004e2a:	687b      	ldr	r3, [r7, #4]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200002a0 	.word	0x200002a0
 8004e38:	200008d0 	.word	0x200008d0
 8004e3c:	08004d9d 	.word	0x08004d9d
 8004e40:	08001c95 	.word	0x08001c95
 8004e44:	20000cd4 	.word	0x20000cd4
 8004e48:	20000248 	.word	0x20000248

08004e4c <proceedIncommingMessage>:


void proceedIncommingMessage(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af02      	add	r7, sp, #8
	// move to cash--------------------------------------------------------------
	const RawParser_Frame_t* const Rxframe = RawParser_dma_proceed(&comm.rawparser);
 8004e52:	483b      	ldr	r0, [pc, #236]	; (8004f40 <proceedIncommingMessage+0xf4>)
 8004e54:	f7ff fbb2 	bl	80045bc <RawParser_dma_proceed>
 8004e58:	6178      	str	r0, [r7, #20]
	u8* const input_data 	= Rxframe->data;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	613b      	str	r3, [r7, #16]
	reg input_size 			= Rxframe->size;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	603b      	str	r3, [r7, #0]
	const boards_t* const board_entry_internal = board_entry;
 8004e66:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <proceedIncommingMessage+0xf8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

	const u8 bid 		= input_data[0];
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	72fb      	strb	r3, [r7, #11]
	const u8 cmd_id 	= input_data[1];
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	72bb      	strb	r3, [r7, #10]

	// do logic ------------------------------------------------------------------
	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4933      	ldr	r1, [pc, #204]	; (8004f48 <proceedIncommingMessage+0xfc>)
 8004e7c:	4833      	ldr	r0, [pc, #204]	; (8004f4c <proceedIncommingMessage+0x100>)
 8004e7e:	f002 f874 	bl	8006f6a <HAL_UART_Receive_IT>

	M_Assert_Break(((Rxframe == NULL) || (input_data == NULL) || (board_entry_internal == NULL)), M_EMPTY, return, "proceedIncommingMessage: No valid descriptors");
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <proceedIncommingMessage+0x48>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <proceedIncommingMessage+0x48>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d114      	bne.n	8004ebe <proceedIncommingMessage+0x72>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <proceedIncommingMessage+0x5a>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <proceedIncommingMessage+0x5a>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <proceedIncommingMessage+0x5e>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <proceedIncommingMessage+0x60>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	b2d9      	uxtb	r1, r3
 8004eae:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <proceedIncommingMessage+0x104>)
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	232f      	movs	r3, #47	; 0x2f
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <proceedIncommingMessage+0x108>)
 8004eb6:	4828      	ldr	r0, [pc, #160]	; (8004f58 <proceedIncommingMessage+0x10c>)
 8004eb8:	f7ff ff34 	bl	8004d24 <__M_Error>
 8004ebc:	e03c      	b.n	8004f38 <proceedIncommingMessage+0xec>

	// check input size and board id
	if((input_size < 2U) || (bid != board_entry_internal->boardId)) {
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d936      	bls.n	8004f32 <proceedIncommingMessage+0xe6>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	7afa      	ldrb	r2, [r7, #11]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d131      	bne.n	8004f32 <proceedIncommingMessage+0xe6>
		return;
	}

	// call worker
	input_size -= 2;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	3b02      	subs	r3, #2
 8004ed2:	603b      	str	r3, [r7, #0]
	if(!CallbackManager_proceed(&comm.manager, cmd_id, &input_data[2], &comm.outputData[2], &input_size, (D_RAW_P_TX_BUF_SIZE - 2U))) {
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1c9a      	adds	r2, r3, #2
 8004ed8:	7ab9      	ldrb	r1, [r7, #10]
 8004eda:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <proceedIncommingMessage+0x110>)
 8004ee6:	481e      	ldr	r0, [pc, #120]	; (8004f60 <proceedIncommingMessage+0x114>)
 8004ee8:	f7fc fe6e 	bl	8001bc8 <CallbackManager_proceed>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <proceedIncommingMessage+0xaa>
		input_size = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	603b      	str	r3, [r7, #0]
	}

//	// check if worker want to send packet
	if(input_size == 0) {
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <proceedIncommingMessage+0xea>
		return;
	}

	comm.outputData[0] = bid;
 8004efc:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <proceedIncommingMessage+0xf4>)
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	f882 3a35 	strb.w	r3, [r2, #2613]	; 0xa35
	comm.outputData[1] = cmd_id;
 8004f04:	4a0e      	ldr	r2, [pc, #56]	; (8004f40 <proceedIncommingMessage+0xf4>)
 8004f06:	7abb      	ldrb	r3, [r7, #10]
 8004f08:	f882 3a36 	strb.w	r3, [r2, #2614]	; 0xa36

	const RawParser_Frame_t* const Txframe = RawParser_dma_shieldFrame(&comm.rawparser, comm.outputData, (input_size + 2));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	3302      	adds	r3, #2
 8004f10:	461a      	mov	r2, r3
 8004f12:	4914      	ldr	r1, [pc, #80]	; (8004f64 <proceedIncommingMessage+0x118>)
 8004f14:	480a      	ldr	r0, [pc, #40]	; (8004f40 <proceedIncommingMessage+0xf4>)
 8004f16:	f7ff fbcd 	bl	80046b4 <RawParser_dma_shieldFrame>
 8004f1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, Txframe->data, Txframe->size, 1000);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f2a:	4808      	ldr	r0, [pc, #32]	; (8004f4c <proceedIncommingMessage+0x100>)
 8004f2c:	f001 ff8b 	bl	8006e46 <HAL_UART_Transmit>
 8004f30:	e002      	b.n	8004f38 <proceedIncommingMessage+0xec>
		return;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <proceedIncommingMessage+0xec>
		return;
 8004f36:	bf00      	nop
}
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	200002a0 	.word	0x200002a0
 8004f44:	2000028c 	.word	0x2000028c
 8004f48:	20000cd4 	.word	0x20000cd4
 8004f4c:	20000248 	.word	0x20000248
 8004f50:	0800ed7c 	.word	0x0800ed7c
 8004f54:	0800ed04 	.word	0x0800ed04
 8004f58:	0800ed2c 	.word	0x0800ed2c
 8004f5c:	20000cd7 	.word	0x20000cd7
 8004f60:	200008d0 	.word	0x200008d0
 8004f64:	20000cd5 	.word	0x20000cd5

08004f68 <__io_putchar>:
#include "main.h"
#include "stm32_printf.h"

extern UART_HandleTypeDef huart1;
PUTCHAR_PROTOTYPE
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004f70:	1d39      	adds	r1, r7, #4
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
 8004f76:	2201      	movs	r2, #1
 8004f78:	4803      	ldr	r0, [pc, #12]	; (8004f88 <__io_putchar+0x20>)
 8004f7a:	f001 ff64 	bl	8006e46 <HAL_UART_Transmit>
	return ch;
 8004f7e:	687b      	ldr	r3, [r7, #4]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000248 	.word	0x20000248

08004f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f90:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <HAL_Init+0x40>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <HAL_Init+0x40>)
 8004f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_Init+0x40>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <HAL_Init+0x40>)
 8004fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fa8:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <HAL_Init+0x40>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <HAL_Init+0x40>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fb4:	2003      	movs	r0, #3
 8004fb6:	f000 f92b 	bl	8005210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fba:	200f      	movs	r0, #15
 8004fbc:	f000 f808 	bl	8004fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fc0:	f7fc f8fc 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40023c00 	.word	0x40023c00

08004fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fd8:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_InitTick+0x54>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_InitTick+0x58>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f943 	bl	800527a <HAL_SYSTICK_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e00e      	b.n	800501c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b0f      	cmp	r3, #15
 8005002:	d80a      	bhi.n	800501a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005004:	2200      	movs	r2, #0
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	f000 f90b 	bl	8005226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005010:	4a06      	ldr	r2, [pc, #24]	; (800502c <HAL_InitTick+0x5c>)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000000 	.word	0x20000000
 8005028:	20000008 	.word	0x20000008
 800502c:	20000004 	.word	0x20000004

08005030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_IncTick+0x20>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_IncTick+0x24>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4413      	add	r3, r2
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <HAL_IncTick+0x24>)
 8005042:	6013      	str	r3, [r2, #0]
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000008 	.word	0x20000008
 8005054:	20000ed8 	.word	0x20000ed8

08005058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return uwTick;
 800505c:	4b03      	ldr	r3, [pc, #12]	; (800506c <HAL_GetTick+0x14>)
 800505e:	681b      	ldr	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000ed8 	.word	0x20000ed8

08005070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005080:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800508c:	4013      	ands	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800509c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050a2:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <__NVIC_SetPriorityGrouping+0x44>)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	60d3      	str	r3, [r2, #12]
}
 80050a8:	bf00      	nop
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	e000ed00 	.word	0xe000ed00

080050b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <__NVIC_GetPriorityGrouping+0x18>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	f003 0307 	and.w	r3, r3, #7
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	db0b      	blt.n	80050fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	f003 021f 	and.w	r2, r3, #31
 80050ec:	4907      	ldr	r1, [pc, #28]	; (800510c <__NVIC_EnableIRQ+0x38>)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2001      	movs	r0, #1
 80050f6:	fa00 f202 	lsl.w	r2, r0, r2
 80050fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	e000e100 	.word	0xe000e100

08005110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	6039      	str	r1, [r7, #0]
 800511a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800511c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005120:	2b00      	cmp	r3, #0
 8005122:	db0a      	blt.n	800513a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	490c      	ldr	r1, [pc, #48]	; (800515c <__NVIC_SetPriority+0x4c>)
 800512a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512e:	0112      	lsls	r2, r2, #4
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	440b      	add	r3, r1
 8005134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005138:	e00a      	b.n	8005150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4908      	ldr	r1, [pc, #32]	; (8005160 <__NVIC_SetPriority+0x50>)
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	3b04      	subs	r3, #4
 8005148:	0112      	lsls	r2, r2, #4
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	440b      	add	r3, r1
 800514e:	761a      	strb	r2, [r3, #24]
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	e000e100 	.word	0xe000e100
 8005160:	e000ed00 	.word	0xe000ed00

08005164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f1c3 0307 	rsb	r3, r3, #7
 800517e:	2b04      	cmp	r3, #4
 8005180:	bf28      	it	cs
 8005182:	2304      	movcs	r3, #4
 8005184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3304      	adds	r3, #4
 800518a:	2b06      	cmp	r3, #6
 800518c:	d902      	bls.n	8005194 <NVIC_EncodePriority+0x30>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	3b03      	subs	r3, #3
 8005192:	e000      	b.n	8005196 <NVIC_EncodePriority+0x32>
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005198:	f04f 32ff 	mov.w	r2, #4294967295
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43da      	mvns	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	401a      	ands	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051ac:	f04f 31ff 	mov.w	r1, #4294967295
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	fa01 f303 	lsl.w	r3, r1, r3
 80051b6:	43d9      	mvns	r1, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051bc:	4313      	orrs	r3, r2
         );
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3724      	adds	r7, #36	; 0x24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051dc:	d301      	bcc.n	80051e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051de:	2301      	movs	r3, #1
 80051e0:	e00f      	b.n	8005202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051e2:	4a0a      	ldr	r2, [pc, #40]	; (800520c <SysTick_Config+0x40>)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ea:	210f      	movs	r1, #15
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	f7ff ff8e 	bl	8005110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <SysTick_Config+0x40>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051fa:	4b04      	ldr	r3, [pc, #16]	; (800520c <SysTick_Config+0x40>)
 80051fc:	2207      	movs	r2, #7
 80051fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	e000e010 	.word	0xe000e010

08005210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff ff29 	bl	8005070 <__NVIC_SetPriorityGrouping>
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	4603      	mov	r3, r0
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005238:	f7ff ff3e 	bl	80050b8 <__NVIC_GetPriorityGrouping>
 800523c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f7ff ff8e 	bl	8005164 <NVIC_EncodePriority>
 8005248:	4602      	mov	r2, r0
 800524a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ff5d 	bl	8005110 <__NVIC_SetPriority>
}
 8005256:	bf00      	nop
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	4603      	mov	r3, r0
 8005266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff ff31 	bl	80050d4 <__NVIC_EnableIRQ>
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ffa2 	bl	80051cc <SysTick_Config>
 8005288:	4603      	mov	r3, r0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052a0:	f7ff feda 	bl	8005058 <HAL_GetTick>
 80052a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d008      	beq.n	80052c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2280      	movs	r2, #128	; 0x80
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e052      	b.n	800536a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0216 	bic.w	r2, r2, #22
 80052d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d103      	bne.n	80052f4 <HAL_DMA_Abort+0x62>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0208 	bic.w	r2, r2, #8
 8005302:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005314:	e013      	b.n	800533e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005316:	f7ff fe9f 	bl	8005058 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b05      	cmp	r3, #5
 8005322:	d90c      	bls.n	800533e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2203      	movs	r2, #3
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e015      	b.n	800536a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e4      	bne.n	8005316 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	223f      	movs	r2, #63	; 0x3f
 8005352:	409a      	lsls	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d004      	beq.n	8005390 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e00c      	b.n	80053aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2205      	movs	r2, #5
 8005394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b089      	sub	sp, #36	; 0x24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	e16b      	b.n	80056ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053d4:	2201      	movs	r2, #1
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4013      	ands	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	f040 815a 	bne.w	80056a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d005      	beq.n	800540a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005406:	2b02      	cmp	r3, #2
 8005408:	d130      	bne.n	800546c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4313      	orrs	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005440:	2201      	movs	r2, #1
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 0201 	and.w	r2, r3, #1
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	2b03      	cmp	r3, #3
 8005476:	d017      	beq.n	80054a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	2203      	movs	r2, #3
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	4013      	ands	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d123      	bne.n	80054fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	08da      	lsrs	r2, r3, #3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3208      	adds	r2, #8
 80054bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	220f      	movs	r2, #15
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4013      	ands	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	08da      	lsrs	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3208      	adds	r2, #8
 80054f6:	69b9      	ldr	r1, [r7, #24]
 80054f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	2203      	movs	r2, #3
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 0203 	and.w	r2, r3, #3
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80b4 	beq.w	80056a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	4b60      	ldr	r3, [pc, #384]	; (80056c4 <HAL_GPIO_Init+0x30c>)
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	4a5f      	ldr	r2, [pc, #380]	; (80056c4 <HAL_GPIO_Init+0x30c>)
 8005548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800554c:	6453      	str	r3, [r2, #68]	; 0x44
 800554e:	4b5d      	ldr	r3, [pc, #372]	; (80056c4 <HAL_GPIO_Init+0x30c>)
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800555a:	4a5b      	ldr	r2, [pc, #364]	; (80056c8 <HAL_GPIO_Init+0x310>)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	089b      	lsrs	r3, r3, #2
 8005560:	3302      	adds	r3, #2
 8005562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	220f      	movs	r2, #15
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a52      	ldr	r2, [pc, #328]	; (80056cc <HAL_GPIO_Init+0x314>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02b      	beq.n	80055de <HAL_GPIO_Init+0x226>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a51      	ldr	r2, [pc, #324]	; (80056d0 <HAL_GPIO_Init+0x318>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d025      	beq.n	80055da <HAL_GPIO_Init+0x222>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a50      	ldr	r2, [pc, #320]	; (80056d4 <HAL_GPIO_Init+0x31c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01f      	beq.n	80055d6 <HAL_GPIO_Init+0x21e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a4f      	ldr	r2, [pc, #316]	; (80056d8 <HAL_GPIO_Init+0x320>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d019      	beq.n	80055d2 <HAL_GPIO_Init+0x21a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a4e      	ldr	r2, [pc, #312]	; (80056dc <HAL_GPIO_Init+0x324>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_GPIO_Init+0x216>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a4d      	ldr	r2, [pc, #308]	; (80056e0 <HAL_GPIO_Init+0x328>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00d      	beq.n	80055ca <HAL_GPIO_Init+0x212>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a4c      	ldr	r2, [pc, #304]	; (80056e4 <HAL_GPIO_Init+0x32c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <HAL_GPIO_Init+0x20e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a4b      	ldr	r2, [pc, #300]	; (80056e8 <HAL_GPIO_Init+0x330>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_GPIO_Init+0x20a>
 80055be:	2307      	movs	r3, #7
 80055c0:	e00e      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055c2:	2308      	movs	r3, #8
 80055c4:	e00c      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055c6:	2306      	movs	r3, #6
 80055c8:	e00a      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055ca:	2305      	movs	r3, #5
 80055cc:	e008      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055ce:	2304      	movs	r3, #4
 80055d0:	e006      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055d2:	2303      	movs	r3, #3
 80055d4:	e004      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e002      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055de:	2300      	movs	r3, #0
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	f002 0203 	and.w	r2, r2, #3
 80055e6:	0092      	lsls	r2, r2, #2
 80055e8:	4093      	lsls	r3, r2
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055f0:	4935      	ldr	r1, [pc, #212]	; (80056c8 <HAL_GPIO_Init+0x310>)
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	3302      	adds	r3, #2
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055fe:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <HAL_GPIO_Init+0x334>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005622:	4a32      	ldr	r2, [pc, #200]	; (80056ec <HAL_GPIO_Init+0x334>)
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005628:	4b30      	ldr	r3, [pc, #192]	; (80056ec <HAL_GPIO_Init+0x334>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	43db      	mvns	r3, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	4013      	ands	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800564c:	4a27      	ldr	r2, [pc, #156]	; (80056ec <HAL_GPIO_Init+0x334>)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005652:	4b26      	ldr	r3, [pc, #152]	; (80056ec <HAL_GPIO_Init+0x334>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	43db      	mvns	r3, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4013      	ands	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005676:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <HAL_GPIO_Init+0x334>)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800567c:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <HAL_GPIO_Init+0x334>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056a0:	4a12      	ldr	r2, [pc, #72]	; (80056ec <HAL_GPIO_Init+0x334>)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b0f      	cmp	r3, #15
 80056b0:	f67f ae90 	bls.w	80053d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	3724      	adds	r7, #36	; 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40013800 	.word	0x40013800
 80056cc:	40020000 	.word	0x40020000
 80056d0:	40020400 	.word	0x40020400
 80056d4:	40020800 	.word	0x40020800
 80056d8:	40020c00 	.word	0x40020c00
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40021400 	.word	0x40021400
 80056e4:	40021800 	.word	0x40021800
 80056e8:	40021c00 	.word	0x40021c00
 80056ec:	40013c00 	.word	0x40013c00

080056f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
 80056fc:	4613      	mov	r3, r2
 80056fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005700:	787b      	ldrb	r3, [r7, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005706:	887a      	ldrh	r2, [r7, #2]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800570c:	e003      	b.n	8005716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	041a      	lsls	r2, r3, #16
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	619a      	str	r2, [r3, #24]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e267      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d075      	beq.n	800582e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005742:	4b88      	ldr	r3, [pc, #544]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b04      	cmp	r3, #4
 800574c:	d00c      	beq.n	8005768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800574e:	4b85      	ldr	r3, [pc, #532]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005756:	2b08      	cmp	r3, #8
 8005758:	d112      	bne.n	8005780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800575a:	4b82      	ldr	r3, [pc, #520]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005766:	d10b      	bne.n	8005780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005768:	4b7e      	ldr	r3, [pc, #504]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d05b      	beq.n	800582c <HAL_RCC_OscConfig+0x108>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d157      	bne.n	800582c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e242      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d106      	bne.n	8005798 <HAL_RCC_OscConfig+0x74>
 800578a:	4b76      	ldr	r3, [pc, #472]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a75      	ldr	r2, [pc, #468]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e01d      	b.n	80057d4 <HAL_RCC_OscConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x98>
 80057a2:	4b70      	ldr	r3, [pc, #448]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a6f      	ldr	r2, [pc, #444]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4b6d      	ldr	r3, [pc, #436]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a6c      	ldr	r2, [pc, #432]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_OscConfig+0xb0>
 80057bc:	4b69      	ldr	r3, [pc, #420]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a68      	ldr	r2, [pc, #416]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4b66      	ldr	r3, [pc, #408]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a65      	ldr	r2, [pc, #404]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d013      	beq.n	8005804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057dc:	f7ff fc3c 	bl	8005058 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057e4:	f7ff fc38 	bl	8005058 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	; 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e207      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	4b5b      	ldr	r3, [pc, #364]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0xc0>
 8005802:	e014      	b.n	800582e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005804:	f7ff fc28 	bl	8005058 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800580c:	f7ff fc24 	bl	8005058 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b64      	cmp	r3, #100	; 0x64
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e1f3      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581e:	4b51      	ldr	r3, [pc, #324]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0xe8>
 800582a:	e000      	b.n	800582e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d063      	beq.n	8005902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800583a:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005846:	4b47      	ldr	r3, [pc, #284]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800584e:	2b08      	cmp	r3, #8
 8005850:	d11c      	bne.n	800588c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005852:	4b44      	ldr	r3, [pc, #272]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d116      	bne.n	800588c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585e:	4b41      	ldr	r3, [pc, #260]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_RCC_OscConfig+0x152>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d001      	beq.n	8005876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e1c7      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005876:	4b3b      	ldr	r3, [pc, #236]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4937      	ldr	r1, [pc, #220]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588a:	e03a      	b.n	8005902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d020      	beq.n	80058d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005894:	4b34      	ldr	r3, [pc, #208]	; (8005968 <HAL_RCC_OscConfig+0x244>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7ff fbdd 	bl	8005058 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058a2:	f7ff fbd9 	bl	8005058 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e1a8      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b4:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b28      	ldr	r3, [pc, #160]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4925      	ldr	r1, [pc, #148]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]
 80058d4:	e015      	b.n	8005902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <HAL_RCC_OscConfig+0x244>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7ff fbbc 	bl	8005058 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e4:	f7ff fbb8 	bl	8005058 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e187      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d036      	beq.n	800597c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_RCC_OscConfig+0x248>)
 8005918:	2201      	movs	r2, #1
 800591a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7ff fb9c 	bl	8005058 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005924:	f7ff fb98 	bl	8005058 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e167      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_RCC_OscConfig+0x240>)
 8005938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x200>
 8005942:	e01b      	b.n	800597c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_OscConfig+0x248>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594a:	f7ff fb85 	bl	8005058 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005950:	e00e      	b.n	8005970 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005952:	f7ff fb81 	bl	8005058 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d907      	bls.n	8005970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e150      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
 8005964:	40023800 	.word	0x40023800
 8005968:	42470000 	.word	0x42470000
 800596c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	4b88      	ldr	r3, [pc, #544]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ea      	bne.n	8005952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8097 	beq.w	8005ab8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598e:	4b81      	ldr	r3, [pc, #516]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10f      	bne.n	80059ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	4b7d      	ldr	r3, [pc, #500]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	4a7c      	ldr	r2, [pc, #496]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 80059a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6413      	str	r3, [r2, #64]	; 0x40
 80059aa:	4b7a      	ldr	r3, [pc, #488]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b6:	2301      	movs	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ba:	4b77      	ldr	r3, [pc, #476]	; (8005b98 <HAL_RCC_OscConfig+0x474>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d118      	bne.n	80059f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c6:	4b74      	ldr	r3, [pc, #464]	; (8005b98 <HAL_RCC_OscConfig+0x474>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a73      	ldr	r2, [pc, #460]	; (8005b98 <HAL_RCC_OscConfig+0x474>)
 80059cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d2:	f7ff fb41 	bl	8005058 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059da:	f7ff fb3d 	bl	8005058 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e10c      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ec:	4b6a      	ldr	r3, [pc, #424]	; (8005b98 <HAL_RCC_OscConfig+0x474>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d106      	bne.n	8005a0e <HAL_RCC_OscConfig+0x2ea>
 8005a00:	4b64      	ldr	r3, [pc, #400]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4a63      	ldr	r2, [pc, #396]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0c:	e01c      	b.n	8005a48 <HAL_RCC_OscConfig+0x324>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d10c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x30c>
 8005a16:	4b5f      	ldr	r3, [pc, #380]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	4a5e      	ldr	r2, [pc, #376]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	f043 0304 	orr.w	r3, r3, #4
 8005a20:	6713      	str	r3, [r2, #112]	; 0x70
 8005a22:	4b5c      	ldr	r3, [pc, #368]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	4a5b      	ldr	r2, [pc, #364]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_OscConfig+0x324>
 8005a30:	4b58      	ldr	r3, [pc, #352]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a34:	4a57      	ldr	r2, [pc, #348]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3c:	4b55      	ldr	r3, [pc, #340]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	4a54      	ldr	r2, [pc, #336]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a42:	f023 0304 	bic.w	r3, r3, #4
 8005a46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a50:	f7ff fb02 	bl	8005058 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a56:	e00a      	b.n	8005a6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a58:	f7ff fafe 	bl	8005058 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e0cb      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6e:	4b49      	ldr	r3, [pc, #292]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0ee      	beq.n	8005a58 <HAL_RCC_OscConfig+0x334>
 8005a7a:	e014      	b.n	8005aa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7c:	f7ff faec 	bl	8005058 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a84:	f7ff fae8 	bl	8005058 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e0b5      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1ee      	bne.n	8005a84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aac:	4b39      	ldr	r3, [pc, #228]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	4a38      	ldr	r2, [pc, #224]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80a1 	beq.w	8005c04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ac2:	4b34      	ldr	r3, [pc, #208]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d05c      	beq.n	8005b88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d141      	bne.n	8005b5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad6:	4b31      	ldr	r3, [pc, #196]	; (8005b9c <HAL_RCC_OscConfig+0x478>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7ff fabc 	bl	8005058 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae4:	f7ff fab8 	bl	8005058 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e087      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b18:	085b      	lsrs	r3, r3, #1
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	491b      	ldr	r1, [pc, #108]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <HAL_RCC_OscConfig+0x478>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7ff fa91 	bl	8005058 <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3a:	f7ff fa8d 	bl	8005058 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e05c      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4c:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f0      	beq.n	8005b3a <HAL_RCC_OscConfig+0x416>
 8005b58:	e054      	b.n	8005c04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5a:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <HAL_RCC_OscConfig+0x478>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b60:	f7ff fa7a 	bl	8005058 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b68:	f7ff fa76 	bl	8005058 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e045      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x444>
 8005b86:	e03d      	b.n	8005c04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e038      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
 8005b94:	40023800 	.word	0x40023800
 8005b98:	40007000 	.word	0x40007000
 8005b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <HAL_RCC_OscConfig+0x4ec>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d028      	beq.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d121      	bne.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d11a      	bne.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d111      	bne.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	3b01      	subs	r3, #1
 8005bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800

08005c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0cc      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c28:	4b68      	ldr	r3, [pc, #416]	; (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d90c      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c36:	4b65      	ldr	r3, [pc, #404]	; (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b63      	ldr	r3, [pc, #396]	; (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0b8      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d020      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c68:	4b59      	ldr	r3, [pc, #356]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4a58      	ldr	r2, [pc, #352]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c80:	4b53      	ldr	r3, [pc, #332]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a52      	ldr	r2, [pc, #328]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c8c:	4b50      	ldr	r3, [pc, #320]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	494d      	ldr	r1, [pc, #308]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d044      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb2:	4b47      	ldr	r3, [pc, #284]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d119      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e07f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d003      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d107      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd2:	4b3f      	ldr	r3, [pc, #252]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e06f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce2:	4b3b      	ldr	r3, [pc, #236]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e067      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cf2:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f023 0203 	bic.w	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4934      	ldr	r1, [pc, #208]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d04:	f7ff f9a8 	bl	8005058 <HAL_GetTick>
 8005d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d0c:	f7ff f9a4 	bl	8005058 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e04f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d22:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 020c 	and.w	r2, r3, #12
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d1eb      	bne.n	8005d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d34:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d20c      	bcs.n	8005d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d42:	4b22      	ldr	r3, [pc, #136]	; (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4a:	4b20      	ldr	r3, [pc, #128]	; (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d001      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e032      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d68:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4916      	ldr	r1, [pc, #88]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d86:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	490e      	ldr	r1, [pc, #56]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d9a:	f000 f82d 	bl	8005df8 <HAL_RCC_GetSysClockFreq>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	490a      	ldr	r1, [pc, #40]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005dac:	5ccb      	ldrb	r3, [r1, r3]
 8005dae:	fa22 f303 	lsr.w	r3, r2, r3
 8005db2:	4a09      	ldr	r2, [pc, #36]	; (8005dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005db6:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <HAL_RCC_ClockConfig+0x1c8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff f908 	bl	8004fd0 <HAL_InitTick>

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40023c00 	.word	0x40023c00
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	0800edac 	.word	0x0800edac
 8005dd8:	20000000 	.word	0x20000000
 8005ddc:	20000004 	.word	0x20000004

08005de0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005de4:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <HAL_RCC_EnableCSS+0x14>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	4247004c 	.word	0x4247004c

08005df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dfc:	b094      	sub	sp, #80	; 0x50
 8005dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	647b      	str	r3, [r7, #68]	; 0x44
 8005e04:	2300      	movs	r3, #0
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e08:	2300      	movs	r3, #0
 8005e0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e10:	4b79      	ldr	r3, [pc, #484]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 030c 	and.w	r3, r3, #12
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d00d      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0x40>
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	f200 80e1 	bhi.w	8005fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_RCC_GetSysClockFreq+0x34>
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d003      	beq.n	8005e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e2a:	e0db      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e2c:	4b73      	ldr	r3, [pc, #460]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8005e2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e30:	e0db      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e32:	4b72      	ldr	r3, [pc, #456]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8005e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e36:	e0d8      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e38:	4b6f      	ldr	r3, [pc, #444]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e42:	4b6d      	ldr	r3, [pc, #436]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d063      	beq.n	8005f16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	099b      	lsrs	r3, r3, #6
 8005e54:	2200      	movs	r2, #0
 8005e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e60:	633b      	str	r3, [r7, #48]	; 0x30
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
 8005e66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	f04f 0000 	mov.w	r0, #0
 8005e72:	f04f 0100 	mov.w	r1, #0
 8005e76:	0159      	lsls	r1, r3, #5
 8005e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e7c:	0150      	lsls	r0, r2, #5
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4621      	mov	r1, r4
 8005e84:	1a51      	subs	r1, r2, r1
 8005e86:	6139      	str	r1, [r7, #16]
 8005e88:	4629      	mov	r1, r5
 8005e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e9c:	4659      	mov	r1, fp
 8005e9e:	018b      	lsls	r3, r1, #6
 8005ea0:	4651      	mov	r1, sl
 8005ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ea6:	4651      	mov	r1, sl
 8005ea8:	018a      	lsls	r2, r1, #6
 8005eaa:	4651      	mov	r1, sl
 8005eac:	ebb2 0801 	subs.w	r8, r2, r1
 8005eb0:	4659      	mov	r1, fp
 8005eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eca:	4690      	mov	r8, r2
 8005ecc:	4699      	mov	r9, r3
 8005ece:	4623      	mov	r3, r4
 8005ed0:	eb18 0303 	adds.w	r3, r8, r3
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	462b      	mov	r3, r5
 8005ed8:	eb49 0303 	adc.w	r3, r9, r3
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005eea:	4629      	mov	r1, r5
 8005eec:	028b      	lsls	r3, r1, #10
 8005eee:	4621      	mov	r1, r4
 8005ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	028a      	lsls	r2, r1, #10
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4619      	mov	r1, r3
 8005efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efe:	2200      	movs	r2, #0
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f08:	f7fa febe 	bl	8000c88 <__aeabi_uldivmod>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4613      	mov	r3, r2
 8005f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f14:	e058      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f16:	4b38      	ldr	r3, [pc, #224]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	099b      	lsrs	r3, r3, #6
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	4611      	mov	r1, r2
 8005f22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f26:	623b      	str	r3, [r7, #32]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f30:	4642      	mov	r2, r8
 8005f32:	464b      	mov	r3, r9
 8005f34:	f04f 0000 	mov.w	r0, #0
 8005f38:	f04f 0100 	mov.w	r1, #0
 8005f3c:	0159      	lsls	r1, r3, #5
 8005f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f42:	0150      	lsls	r0, r2, #5
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4641      	mov	r1, r8
 8005f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f4e:	4649      	mov	r1, r9
 8005f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f68:	ebb2 040a 	subs.w	r4, r2, sl
 8005f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	00eb      	lsls	r3, r5, #3
 8005f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f7e:	00e2      	lsls	r2, r4, #3
 8005f80:	4614      	mov	r4, r2
 8005f82:	461d      	mov	r5, r3
 8005f84:	4643      	mov	r3, r8
 8005f86:	18e3      	adds	r3, r4, r3
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	eb45 0303 	adc.w	r3, r5, r3
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	028b      	lsls	r3, r1, #10
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fa8:	4621      	mov	r1, r4
 8005faa:	028a      	lsls	r2, r1, #10
 8005fac:	4610      	mov	r0, r2
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	61fa      	str	r2, [r7, #28]
 8005fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fbc:	f7fa fe64 	bl	8000c88 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3750      	adds	r7, #80	; 0x50
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	00f42400 	.word	0x00f42400

08006000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <HAL_RCC_GetHCLKFreq+0x14>)
 8006006:	681b      	ldr	r3, [r3, #0]
}
 8006008:	4618      	mov	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000000 	.word	0x20000000

08006018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800601c:	f7ff fff0 	bl	8006000 <HAL_RCC_GetHCLKFreq>
 8006020:	4602      	mov	r2, r0
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	0a9b      	lsrs	r3, r3, #10
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	4903      	ldr	r1, [pc, #12]	; (800603c <HAL_RCC_GetPCLK1Freq+0x24>)
 800602e:	5ccb      	ldrb	r3, [r1, r3]
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40023800 	.word	0x40023800
 800603c:	0800edbc 	.word	0x0800edbc

08006040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006044:	f7ff ffdc 	bl	8006000 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	0b5b      	lsrs	r3, r3, #13
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4903      	ldr	r1, [pc, #12]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40023800 	.word	0x40023800
 8006064:	0800edbc 	.word	0x0800edbc

08006068 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCC_NMI_IRQHandler+0x20>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d104      	bne.n	8006082 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006078:	f000 f80a 	bl	8006090 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800607c:	4b03      	ldr	r3, [pc, #12]	; (800608c <HAL_RCC_NMI_IRQHandler+0x24>)
 800607e:	2280      	movs	r2, #128	; 0x80
 8006080:	701a      	strb	r2, [r3, #0]
  }
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	4002380e 	.word	0x4002380e

08006090 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e041      	b.n	8006134 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fb fa27 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3304      	adds	r3, #4
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f000 fad9 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e041      	b.n	80061d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f839 	bl	80061da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f000 fa8a 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x24>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e022      	b.n	800625a <HAL_TIM_PWM_Start+0x6a>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d109      	bne.n	800622e <HAL_TIM_PWM_Start+0x3e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e015      	b.n	800625a <HAL_TIM_PWM_Start+0x6a>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x58>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e008      	b.n	800625a <HAL_TIM_PWM_Start+0x6a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b01      	cmp	r3, #1
 8006252:	bf14      	ite	ne
 8006254:	2301      	movne	r3, #1
 8006256:	2300      	moveq	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e07c      	b.n	800635c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <HAL_TIM_PWM_Start+0x82>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006270:	e013      	b.n	800629a <HAL_TIM_PWM_Start+0xaa>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b04      	cmp	r3, #4
 8006276:	d104      	bne.n	8006282 <HAL_TIM_PWM_Start+0x92>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006280:	e00b      	b.n	800629a <HAL_TIM_PWM_Start+0xaa>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0xa2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006290:	e003      	b.n	800629a <HAL_TIM_PWM_Start+0xaa>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2201      	movs	r2, #1
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fce0 	bl	8006c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2d      	ldr	r2, [pc, #180]	; (8006364 <HAL_TIM_PWM_Start+0x174>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_TIM_PWM_Start+0xcc>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2c      	ldr	r2, [pc, #176]	; (8006368 <HAL_TIM_PWM_Start+0x178>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d101      	bne.n	80062c0 <HAL_TIM_PWM_Start+0xd0>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <HAL_TIM_PWM_Start+0xd2>
 80062c0:	2300      	movs	r3, #0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a22      	ldr	r2, [pc, #136]	; (8006364 <HAL_TIM_PWM_Start+0x174>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d022      	beq.n	8006326 <HAL_TIM_PWM_Start+0x136>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e8:	d01d      	beq.n	8006326 <HAL_TIM_PWM_Start+0x136>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1f      	ldr	r2, [pc, #124]	; (800636c <HAL_TIM_PWM_Start+0x17c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d018      	beq.n	8006326 <HAL_TIM_PWM_Start+0x136>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <HAL_TIM_PWM_Start+0x180>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d013      	beq.n	8006326 <HAL_TIM_PWM_Start+0x136>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <HAL_TIM_PWM_Start+0x184>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00e      	beq.n	8006326 <HAL_TIM_PWM_Start+0x136>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a16      	ldr	r2, [pc, #88]	; (8006368 <HAL_TIM_PWM_Start+0x178>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d009      	beq.n	8006326 <HAL_TIM_PWM_Start+0x136>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a18      	ldr	r2, [pc, #96]	; (8006378 <HAL_TIM_PWM_Start+0x188>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d004      	beq.n	8006326 <HAL_TIM_PWM_Start+0x136>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a16      	ldr	r2, [pc, #88]	; (800637c <HAL_TIM_PWM_Start+0x18c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d111      	bne.n	800634a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b06      	cmp	r3, #6
 8006336:	d010      	beq.n	800635a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006348:	e007      	b.n	800635a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f042 0201 	orr.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40010000 	.word	0x40010000
 8006368:	40010400 	.word	0x40010400
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40014000 	.word	0x40014000
 800637c:	40001800 	.word	0x40001800

08006380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800639a:	2302      	movs	r3, #2
 800639c:	e0ae      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b0c      	cmp	r3, #12
 80063aa:	f200 809f 	bhi.w	80064ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063e9 	.word	0x080063e9
 80063b8:	080064ed 	.word	0x080064ed
 80063bc:	080064ed 	.word	0x080064ed
 80063c0:	080064ed 	.word	0x080064ed
 80063c4:	08006429 	.word	0x08006429
 80063c8:	080064ed 	.word	0x080064ed
 80063cc:	080064ed 	.word	0x080064ed
 80063d0:	080064ed 	.word	0x080064ed
 80063d4:	0800646b 	.word	0x0800646b
 80063d8:	080064ed 	.word	0x080064ed
 80063dc:	080064ed 	.word	0x080064ed
 80063e0:	080064ed 	.word	0x080064ed
 80063e4:	080064ab 	.word	0x080064ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f9f0 	bl	80067d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0208 	orr.w	r2, r2, #8
 8006402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0204 	bic.w	r2, r2, #4
 8006412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6999      	ldr	r1, [r3, #24]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	619a      	str	r2, [r3, #24]
      break;
 8006426:	e064      	b.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fa40 	bl	80068b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6999      	ldr	r1, [r3, #24]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	021a      	lsls	r2, r3, #8
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	619a      	str	r2, [r3, #24]
      break;
 8006468:	e043      	b.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fa95 	bl	80069a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0208 	orr.w	r2, r2, #8
 8006484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0204 	bic.w	r2, r2, #4
 8006494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69d9      	ldr	r1, [r3, #28]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	61da      	str	r2, [r3, #28]
      break;
 80064a8:	e023      	b.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fae9 	bl	8006a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69d9      	ldr	r1, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	021a      	lsls	r2, r3, #8
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	61da      	str	r2, [r3, #28]
      break;
 80064ea:	e002      	b.n	80064f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
      break;
 80064f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIM_ConfigClockSource+0x1c>
 800651c:	2302      	movs	r3, #2
 800651e:	e0b4      	b.n	800668a <HAL_TIM_ConfigClockSource+0x186>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800653e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006558:	d03e      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0xd4>
 800655a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655e:	f200 8087 	bhi.w	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006566:	f000 8086 	beq.w	8006676 <HAL_TIM_ConfigClockSource+0x172>
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656e:	d87f      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b70      	cmp	r3, #112	; 0x70
 8006572:	d01a      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0xa6>
 8006574:	2b70      	cmp	r3, #112	; 0x70
 8006576:	d87b      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006578:	2b60      	cmp	r3, #96	; 0x60
 800657a:	d050      	beq.n	800661e <HAL_TIM_ConfigClockSource+0x11a>
 800657c:	2b60      	cmp	r3, #96	; 0x60
 800657e:	d877      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b50      	cmp	r3, #80	; 0x50
 8006582:	d03c      	beq.n	80065fe <HAL_TIM_ConfigClockSource+0xfa>
 8006584:	2b50      	cmp	r3, #80	; 0x50
 8006586:	d873      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d058      	beq.n	800663e <HAL_TIM_ConfigClockSource+0x13a>
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d86f      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b30      	cmp	r3, #48	; 0x30
 8006592:	d064      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x15a>
 8006594:	2b30      	cmp	r3, #48	; 0x30
 8006596:	d86b      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b20      	cmp	r3, #32
 800659a:	d060      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x15a>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d867      	bhi.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d05c      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x15a>
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d05a      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x15a>
 80065a8:	e062      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6899      	ldr	r1, [r3, #8]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f000 fb35 	bl	8006c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	609a      	str	r2, [r3, #8]
      break;
 80065d6:	e04f      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	6899      	ldr	r1, [r3, #8]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f000 fb1e 	bl	8006c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065fa:	609a      	str	r2, [r3, #8]
      break;
 80065fc:	e03c      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	461a      	mov	r2, r3
 800660c:	f000 fa92 	bl	8006b34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2150      	movs	r1, #80	; 0x50
 8006616:	4618      	mov	r0, r3
 8006618:	f000 faeb 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 800661c:	e02c      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6859      	ldr	r1, [r3, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	461a      	mov	r2, r3
 800662c:	f000 fab1 	bl	8006b92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2160      	movs	r1, #96	; 0x60
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fadb 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 800663c:	e01c      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6859      	ldr	r1, [r3, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	461a      	mov	r2, r3
 800664c:	f000 fa72 	bl	8006b34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2140      	movs	r1, #64	; 0x40
 8006656:	4618      	mov	r0, r3
 8006658:	f000 facb 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 800665c:	e00c      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f000 fac2 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 800666e:	e003      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
      break;
 8006674:	e000      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a40      	ldr	r2, [pc, #256]	; (80067a8 <TIM_Base_SetConfig+0x114>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b2:	d00f      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3d      	ldr	r2, [pc, #244]	; (80067ac <TIM_Base_SetConfig+0x118>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a3c      	ldr	r2, [pc, #240]	; (80067b0 <TIM_Base_SetConfig+0x11c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d007      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3b      	ldr	r2, [pc, #236]	; (80067b4 <TIM_Base_SetConfig+0x120>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a3a      	ldr	r2, [pc, #232]	; (80067b8 <TIM_Base_SetConfig+0x124>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d108      	bne.n	80066e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2f      	ldr	r2, [pc, #188]	; (80067a8 <TIM_Base_SetConfig+0x114>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f4:	d027      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2c      	ldr	r2, [pc, #176]	; (80067ac <TIM_Base_SetConfig+0x118>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d023      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a2b      	ldr	r2, [pc, #172]	; (80067b0 <TIM_Base_SetConfig+0x11c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01f      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2a      	ldr	r2, [pc, #168]	; (80067b4 <TIM_Base_SetConfig+0x120>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d01b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a29      	ldr	r2, [pc, #164]	; (80067b8 <TIM_Base_SetConfig+0x124>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d017      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a28      	ldr	r2, [pc, #160]	; (80067bc <TIM_Base_SetConfig+0x128>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <TIM_Base_SetConfig+0x12c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00f      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <TIM_Base_SetConfig+0x130>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a25      	ldr	r2, [pc, #148]	; (80067c8 <TIM_Base_SetConfig+0x134>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a24      	ldr	r2, [pc, #144]	; (80067cc <TIM_Base_SetConfig+0x138>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a23      	ldr	r2, [pc, #140]	; (80067d0 <TIM_Base_SetConfig+0x13c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a0a      	ldr	r2, [pc, #40]	; (80067a8 <TIM_Base_SetConfig+0x114>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_Base_SetConfig+0xf8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a0c      	ldr	r2, [pc, #48]	; (80067b8 <TIM_Base_SetConfig+0x124>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d103      	bne.n	8006794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	615a      	str	r2, [r3, #20]
}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40010000 	.word	0x40010000
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40000c00 	.word	0x40000c00
 80067b8:	40010400 	.word	0x40010400
 80067bc:	40014000 	.word	0x40014000
 80067c0:	40014400 	.word	0x40014400
 80067c4:	40014800 	.word	0x40014800
 80067c8:	40001800 	.word	0x40001800
 80067cc:	40001c00 	.word	0x40001c00
 80067d0:	40002000 	.word	0x40002000

080067d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f023 0201 	bic.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 0302 	bic.w	r3, r3, #2
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a20      	ldr	r2, [pc, #128]	; (80068ac <TIM_OC1_SetConfig+0xd8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_OC1_SetConfig+0x64>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <TIM_OC1_SetConfig+0xdc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d10c      	bne.n	8006852 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0308 	bic.w	r3, r3, #8
 800683e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f023 0304 	bic.w	r3, r3, #4
 8006850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a15      	ldr	r2, [pc, #84]	; (80068ac <TIM_OC1_SetConfig+0xd8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC1_SetConfig+0x8e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a14      	ldr	r2, [pc, #80]	; (80068b0 <TIM_OC1_SetConfig+0xdc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d111      	bne.n	8006886 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	621a      	str	r2, [r3, #32]
}
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40010400 	.word	0x40010400

080068b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0210 	bic.w	r2, r3, #16
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f023 0320 	bic.w	r3, r3, #32
 80068fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a22      	ldr	r2, [pc, #136]	; (8006998 <TIM_OC2_SetConfig+0xe4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC2_SetConfig+0x68>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a21      	ldr	r2, [pc, #132]	; (800699c <TIM_OC2_SetConfig+0xe8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10d      	bne.n	8006938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <TIM_OC2_SetConfig+0xe4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_OC2_SetConfig+0x94>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a16      	ldr	r2, [pc, #88]	; (800699c <TIM_OC2_SetConfig+0xe8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d113      	bne.n	8006970 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800694e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40010400 	.word	0x40010400

080069a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a21      	ldr	r2, [pc, #132]	; (8006a80 <TIM_OC3_SetConfig+0xe0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_OC3_SetConfig+0x66>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a20      	ldr	r2, [pc, #128]	; (8006a84 <TIM_OC3_SetConfig+0xe4>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d10d      	bne.n	8006a22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <TIM_OC3_SetConfig+0xe0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d003      	beq.n	8006a32 <TIM_OC3_SetConfig+0x92>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <TIM_OC3_SetConfig+0xe4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d113      	bne.n	8006a5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	621a      	str	r2, [r3, #32]
}
 8006a74:	bf00      	nop
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40010400 	.word	0x40010400

08006a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	031b      	lsls	r3, r3, #12
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a12      	ldr	r2, [pc, #72]	; (8006b2c <TIM_OC4_SetConfig+0xa4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_OC4_SetConfig+0x68>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a11      	ldr	r2, [pc, #68]	; (8006b30 <TIM_OC4_SetConfig+0xa8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d109      	bne.n	8006b04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	019b      	lsls	r3, r3, #6
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40010400 	.word	0x40010400

08006b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f023 0201 	bic.w	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 030a 	bic.w	r3, r3, #10
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b087      	sub	sp, #28
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f023 0210 	bic.w	r2, r3, #16
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	031b      	lsls	r3, r3, #12
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f043 0307 	orr.w	r3, r3, #7
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	609a      	str	r2, [r3, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	021a      	lsls	r2, r3, #8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	609a      	str	r2, [r3, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1a      	ldr	r2, [r3, #32]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1a      	ldr	r2, [r3, #32]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
	...

08006cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e05a      	b.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a21      	ldr	r2, [pc, #132]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d022      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d18:	d01d      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d018      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1b      	ldr	r2, [pc, #108]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d013      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1a      	ldr	r2, [pc, #104]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d009      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a17      	ldr	r2, [pc, #92]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d10c      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40010400 	.word	0x40010400
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40001800 	.word	0x40001800

08006dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e03f      	b.n	8006e3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fa fc26 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2224      	movs	r2, #36	; 0x24
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fddf 	bl	80079b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b08a      	sub	sp, #40	; 0x28
 8006e4a:	af02      	add	r7, sp, #8
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	603b      	str	r3, [r7, #0]
 8006e52:	4613      	mov	r3, r2
 8006e54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d17c      	bne.n	8006f60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_UART_Transmit+0x2c>
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e075      	b.n	8006f62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_UART_Transmit+0x3e>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e06e      	b.n	8006f62 <HAL_UART_Transmit+0x11c>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2221      	movs	r2, #33	; 0x21
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e9a:	f7fe f8dd 	bl	8005058 <HAL_GetTick>
 8006e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	88fa      	ldrh	r2, [r7, #6]
 8006ea4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	88fa      	ldrh	r2, [r7, #6]
 8006eaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb4:	d108      	bne.n	8006ec8 <HAL_UART_Transmit+0x82>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	e003      	b.n	8006ed0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ed8:	e02a      	b.n	8006f30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2180      	movs	r1, #128	; 0x80
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 fb1f 	bl	8007528 <UART_WaitOnFlagUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e036      	b.n	8006f62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	e007      	b.n	8006f22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	781a      	ldrb	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1cf      	bne.n	8006eda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	2140      	movs	r1, #64	; 0x40
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 faef 	bl	8007528 <UART_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e006      	b.n	8006f62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e000      	b.n	8006f62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3720      	adds	r7, #32
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	4613      	mov	r3, r2
 8006f76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d11d      	bne.n	8006fc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <HAL_UART_Receive_IT+0x26>
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e016      	b.n	8006fc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_UART_Receive_IT+0x38>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e00f      	b.n	8006fc2 <HAL_UART_Receive_IT+0x58>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fb0:	88fb      	ldrh	r3, [r7, #6]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fb24 	bl	8007604 <UART_Start_Receive_IT>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	e000      	b.n	8006fc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b0ba      	sub	sp, #232	; 0xe8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800700a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10f      	bne.n	8007032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <HAL_UART_IRQHandler+0x66>
 800701e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fc07 	bl	800783e <UART_Receive_IT>
      return;
 8007030:	e256      	b.n	80074e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80de 	beq.w	80071f8 <HAL_UART_IRQHandler+0x22c>
 800703c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 80d1 	beq.w	80071f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <HAL_UART_IRQHandler+0xae>
 8007062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	f043 0201 	orr.w	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <HAL_UART_IRQHandler+0xd2>
 8007086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	f043 0202 	orr.w	r2, r3, #2
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <HAL_UART_IRQHandler+0xf6>
 80070aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	f043 0204 	orr.w	r2, r3, #4
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d011      	beq.n	80070f2 <HAL_UART_IRQHandler+0x126>
 80070ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d105      	bne.n	80070e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f043 0208 	orr.w	r2, r3, #8
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 81ed 	beq.w	80074d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <HAL_UART_IRQHandler+0x14e>
 8007108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fb92 	bl	800783e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b40      	cmp	r3, #64	; 0x40
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <HAL_UART_IRQHandler+0x17a>
 800713e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d04f      	beq.n	80071e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa9a 	bl	8007680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d141      	bne.n	80071de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3314      	adds	r3, #20
 8007160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800718a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800719e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1d9      	bne.n	800715a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d013      	beq.n	80071d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	4a7d      	ldr	r2, [pc, #500]	; (80073a8 <HAL_UART_IRQHandler+0x3dc>)
 80071b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe f8d9 	bl	8005372 <HAL_DMA_Abort_IT>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	e00e      	b.n	80071f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f990 	bl	80074fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071dc:	e00a      	b.n	80071f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f98c 	bl	80074fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e4:	e006      	b.n	80071f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f988 	bl	80074fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071f2:	e170      	b.n	80074d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	bf00      	nop
    return;
 80071f6:	e16e      	b.n	80074d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	f040 814a 	bne.w	8007496 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8143 	beq.w	8007496 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 813c 	beq.w	8007496 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	f040 80b4 	bne.w	80073ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8140 	beq.w	80074da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800725e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007262:	429a      	cmp	r2, r3
 8007264:	f080 8139 	bcs.w	80074da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800726e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727a:	f000 8088 	beq.w	800738e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800729c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1d9      	bne.n	800727e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3314      	adds	r3, #20
 80072d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072dc:	f023 0301 	bic.w	r3, r3, #1
 80072e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3314      	adds	r3, #20
 80072ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e1      	bne.n	80072ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3314      	adds	r3, #20
 800730c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3314      	adds	r3, #20
 8007326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800732a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800732c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e3      	bne.n	8007306 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	330c      	adds	r3, #12
 8007352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800735c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735e:	f023 0310 	bic.w	r3, r3, #16
 8007362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007370:	65ba      	str	r2, [r7, #88]	; 0x58
 8007372:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800737e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e3      	bne.n	800734c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	4618      	mov	r0, r3
 800738a:	f7fd ff82 	bl	8005292 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007396:	b29b      	uxth	r3, r3
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	b29b      	uxth	r3, r3
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f8b6 	bl	8007510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073a4:	e099      	b.n	80074da <HAL_UART_IRQHandler+0x50e>
 80073a6:	bf00      	nop
 80073a8:	08007747 	.word	0x08007747
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 808b 	beq.w	80074de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80073c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8086 	beq.w	80074de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	330c      	adds	r3, #12
 80073d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073f6:	647a      	str	r2, [r7, #68]	; 0x44
 80073f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e3      	bne.n	80073d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3314      	adds	r3, #20
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	623b      	str	r3, [r7, #32]
   return(result);
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3314      	adds	r3, #20
 800742a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800742e:	633a      	str	r2, [r7, #48]	; 0x30
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e3      	bne.n	800740a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	330c      	adds	r3, #12
 8007456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0310 	bic.w	r3, r3, #16
 8007466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007474:	61fa      	str	r2, [r7, #28]
 8007476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	69b9      	ldr	r1, [r7, #24]
 800747a:	69fa      	ldr	r2, [r7, #28]
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	617b      	str	r3, [r7, #20]
   return(result);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e3      	bne.n	8007450 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f83e 	bl	8007510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007494:	e023      	b.n	80074de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <HAL_UART_IRQHandler+0x4ea>
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f95d 	bl	800776e <UART_Transmit_IT>
    return;
 80074b4:	e014      	b.n	80074e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00e      	beq.n	80074e0 <HAL_UART_IRQHandler+0x514>
 80074c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d008      	beq.n	80074e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f99d 	bl	800780e <UART_EndTransmit_IT>
    return;
 80074d4:	e004      	b.n	80074e0 <HAL_UART_IRQHandler+0x514>
    return;
 80074d6:	bf00      	nop
 80074d8:	e002      	b.n	80074e0 <HAL_UART_IRQHandler+0x514>
      return;
 80074da:	bf00      	nop
 80074dc:	e000      	b.n	80074e0 <HAL_UART_IRQHandler+0x514>
      return;
 80074de:	bf00      	nop
  }
}
 80074e0:	37e8      	adds	r7, #232	; 0xe8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop

080074e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b090      	sub	sp, #64	; 0x40
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007538:	e050      	b.n	80075dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d04c      	beq.n	80075dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <UART_WaitOnFlagUntilTimeout+0x30>
 8007548:	f7fd fd86 	bl	8005058 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007554:	429a      	cmp	r2, r3
 8007556:	d241      	bcs.n	80075dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007578:	637a      	str	r2, [r7, #52]	; 0x34
 800757a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800757e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3314      	adds	r3, #20
 8007592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	613b      	str	r3, [r7, #16]
   return(result);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3314      	adds	r3, #20
 80075aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ac:	623a      	str	r2, [r7, #32]
 80075ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	69f9      	ldr	r1, [r7, #28]
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e5      	bne.n	800758c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e00f      	b.n	80075fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4013      	ands	r3, r2
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	bf0c      	ite	eq
 80075ec:	2301      	moveq	r3, #1
 80075ee:	2300      	movne	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d09f      	beq.n	800753a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3740      	adds	r7, #64	; 0x40
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2222      	movs	r2, #34	; 0x22
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007650:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695a      	ldr	r2, [r3, #20]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0201 	orr.w	r2, r2, #1
 8007660:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0220 	orr.w	r2, r2, #32
 8007670:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b095      	sub	sp, #84	; 0x54
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800769e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076a8:	643a      	str	r2, [r7, #64]	; 0x40
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e5      	bne.n	8007688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3314      	adds	r3, #20
 80076c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3314      	adds	r3, #20
 80076da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e5      	bne.n	80076bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d119      	bne.n	800772c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	330c      	adds	r3, #12
 80076fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	60bb      	str	r3, [r7, #8]
   return(result);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f023 0310 	bic.w	r3, r3, #16
 800770e:	647b      	str	r3, [r7, #68]	; 0x44
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007718:	61ba      	str	r2, [r7, #24]
 800771a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	613b      	str	r3, [r7, #16]
   return(result);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e5      	bne.n	80076f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800773a:	bf00      	nop
 800773c:	3754      	adds	r7, #84	; 0x54
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff fecb 	bl	80074fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b21      	cmp	r3, #33	; 0x21
 8007780:	d13e      	bne.n	8007800 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778a:	d114      	bne.n	80077b6 <UART_Transmit_IT+0x48>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d110      	bne.n	80077b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	1c9a      	adds	r2, r3, #2
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	621a      	str	r2, [r3, #32]
 80077b4:	e008      	b.n	80077c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	1c59      	adds	r1, r3, #1
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6211      	str	r1, [r2, #32]
 80077c0:	781a      	ldrb	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	4619      	mov	r1, r3
 80077d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10f      	bne.n	80077fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e000      	b.n	8007802 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007800:	2302      	movs	r3, #2
  }
}
 8007802:	4618      	mov	r0, r3
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007824:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff fe5a 	bl	80074e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b08c      	sub	sp, #48	; 0x30
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b22      	cmp	r3, #34	; 0x22
 8007850:	f040 80ab 	bne.w	80079aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785c:	d117      	bne.n	800788e <UART_Receive_IT+0x50>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d113      	bne.n	800788e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787c:	b29a      	uxth	r2, r3
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	1c9a      	adds	r2, r3, #2
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	629a      	str	r2, [r3, #40]	; 0x28
 800788c:	e026      	b.n	80078dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a0:	d007      	beq.n	80078b2 <UART_Receive_IT+0x74>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <UART_Receive_IT+0x82>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e008      	b.n	80078d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	4619      	mov	r1, r3
 80078ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d15a      	bne.n	80079a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0220 	bic.w	r2, r2, #32
 80078fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800790e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695a      	ldr	r2, [r3, #20]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0201 	bic.w	r2, r2, #1
 800791e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	2b01      	cmp	r3, #1
 800792e:	d135      	bne.n	800799c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	330c      	adds	r3, #12
 800793c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	613b      	str	r3, [r7, #16]
   return(result);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f023 0310 	bic.w	r3, r3, #16
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007956:	623a      	str	r2, [r7, #32]
 8007958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	69f9      	ldr	r1, [r7, #28]
 800795c:	6a3a      	ldr	r2, [r7, #32]
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	61bb      	str	r3, [r7, #24]
   return(result);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b10      	cmp	r3, #16
 8007976:	d10a      	bne.n	800798e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007978:	2300      	movs	r3, #0
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff fdbb 	bl	8007510 <HAL_UARTEx_RxEventCallback>
 800799a:	e002      	b.n	80079a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fa f877 	bl	8001a90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e002      	b.n	80079ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e000      	b.n	80079ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80079aa:	2302      	movs	r3, #2
  }
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3730      	adds	r7, #48	; 0x30
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b8:	b0c0      	sub	sp, #256	; 0x100
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d0:	68d9      	ldr	r1, [r3, #12]
 80079d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	ea40 0301 	orr.w	r3, r0, r1
 80079dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a0c:	f021 010c 	bic.w	r1, r1, #12
 8007a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2e:	6999      	ldr	r1, [r3, #24]
 8007a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	ea40 0301 	orr.w	r3, r0, r1
 8007a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b8f      	ldr	r3, [pc, #572]	; (8007c80 <UART_SetConfig+0x2cc>)
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d005      	beq.n	8007a54 <UART_SetConfig+0xa0>
 8007a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b8d      	ldr	r3, [pc, #564]	; (8007c84 <UART_SetConfig+0x2d0>)
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d104      	bne.n	8007a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a54:	f7fe faf4 	bl	8006040 <HAL_RCC_GetPCLK2Freq>
 8007a58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a5c:	e003      	b.n	8007a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a5e:	f7fe fadb 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 8007a62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a70:	f040 810c 	bne.w	8007c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a86:	4622      	mov	r2, r4
 8007a88:	462b      	mov	r3, r5
 8007a8a:	1891      	adds	r1, r2, r2
 8007a8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a8e:	415b      	adcs	r3, r3
 8007a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a96:	4621      	mov	r1, r4
 8007a98:	eb12 0801 	adds.w	r8, r2, r1
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	eb43 0901 	adc.w	r9, r3, r1
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ab6:	4690      	mov	r8, r2
 8007ab8:	4699      	mov	r9, r3
 8007aba:	4623      	mov	r3, r4
 8007abc:	eb18 0303 	adds.w	r3, r8, r3
 8007ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ac4:	462b      	mov	r3, r5
 8007ac6:	eb49 0303 	adc.w	r3, r9, r3
 8007aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ada:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	18db      	adds	r3, r3, r3
 8007ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ae8:	4613      	mov	r3, r2
 8007aea:	eb42 0303 	adc.w	r3, r2, r3
 8007aee:	657b      	str	r3, [r7, #84]	; 0x54
 8007af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007af8:	f7f9 f8c6 	bl	8000c88 <__aeabi_uldivmod>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4b61      	ldr	r3, [pc, #388]	; (8007c88 <UART_SetConfig+0x2d4>)
 8007b02:	fba3 2302 	umull	r2, r3, r3, r2
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	011c      	lsls	r4, r3, #4
 8007b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	1891      	adds	r1, r2, r2
 8007b22:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b24:	415b      	adcs	r3, r3
 8007b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b2c:	4641      	mov	r1, r8
 8007b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8007b32:	4649      	mov	r1, r9
 8007b34:	eb43 0b01 	adc.w	fp, r3, r1
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b4c:	4692      	mov	sl, r2
 8007b4e:	469b      	mov	fp, r3
 8007b50:	4643      	mov	r3, r8
 8007b52:	eb1a 0303 	adds.w	r3, sl, r3
 8007b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b5a:	464b      	mov	r3, r9
 8007b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8007b60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	18db      	adds	r3, r3, r3
 8007b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7e:	4613      	mov	r3, r2
 8007b80:	eb42 0303 	adc.w	r3, r2, r3
 8007b84:	647b      	str	r3, [r7, #68]	; 0x44
 8007b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b8e:	f7f9 f87b 	bl	8000c88 <__aeabi_uldivmod>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	4b3b      	ldr	r3, [pc, #236]	; (8007c88 <UART_SetConfig+0x2d4>)
 8007b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	2264      	movs	r2, #100	; 0x64
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
 8007ba6:	1acb      	subs	r3, r1, r3
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007bae:	4b36      	ldr	r3, [pc, #216]	; (8007c88 <UART_SetConfig+0x2d4>)
 8007bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bbc:	441c      	add	r4, r3
 8007bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	1891      	adds	r1, r2, r2
 8007bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007bd8:	415b      	adcs	r3, r3
 8007bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007be0:	4641      	mov	r1, r8
 8007be2:	1851      	adds	r1, r2, r1
 8007be4:	6339      	str	r1, [r7, #48]	; 0x30
 8007be6:	4649      	mov	r1, r9
 8007be8:	414b      	adcs	r3, r1
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007bf8:	4659      	mov	r1, fp
 8007bfa:	00cb      	lsls	r3, r1, #3
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c02:	4651      	mov	r1, sl
 8007c04:	00ca      	lsls	r2, r1, #3
 8007c06:	4610      	mov	r0, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4642      	mov	r2, r8
 8007c0e:	189b      	adds	r3, r3, r2
 8007c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c14:	464b      	mov	r3, r9
 8007c16:	460a      	mov	r2, r1
 8007c18:	eb42 0303 	adc.w	r3, r2, r3
 8007c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c34:	460b      	mov	r3, r1
 8007c36:	18db      	adds	r3, r3, r3
 8007c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	eb42 0303 	adc.w	r3, r2, r3
 8007c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007c4a:	f7f9 f81d 	bl	8000c88 <__aeabi_uldivmod>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <UART_SetConfig+0x2d4>)
 8007c54:	fba3 1302 	umull	r1, r3, r3, r2
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	2164      	movs	r1, #100	; 0x64
 8007c5c:	fb01 f303 	mul.w	r3, r1, r3
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	3332      	adds	r3, #50	; 0x32
 8007c66:	4a08      	ldr	r2, [pc, #32]	; (8007c88 <UART_SetConfig+0x2d4>)
 8007c68:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	f003 0207 	and.w	r2, r3, #7
 8007c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4422      	add	r2, r4
 8007c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c7c:	e105      	b.n	8007e8a <UART_SetConfig+0x4d6>
 8007c7e:	bf00      	nop
 8007c80:	40011000 	.word	0x40011000
 8007c84:	40011400 	.word	0x40011400
 8007c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c9e:	4642      	mov	r2, r8
 8007ca0:	464b      	mov	r3, r9
 8007ca2:	1891      	adds	r1, r2, r2
 8007ca4:	6239      	str	r1, [r7, #32]
 8007ca6:	415b      	adcs	r3, r3
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8007caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cae:	4641      	mov	r1, r8
 8007cb0:	1854      	adds	r4, r2, r1
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	eb43 0501 	adc.w	r5, r3, r1
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	00eb      	lsls	r3, r5, #3
 8007cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cc6:	00e2      	lsls	r2, r4, #3
 8007cc8:	4614      	mov	r4, r2
 8007cca:	461d      	mov	r5, r3
 8007ccc:	4643      	mov	r3, r8
 8007cce:	18e3      	adds	r3, r4, r3
 8007cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	eb45 0303 	adc.w	r3, r5, r3
 8007cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cee:	f04f 0200 	mov.w	r2, #0
 8007cf2:	f04f 0300 	mov.w	r3, #0
 8007cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	008b      	lsls	r3, r1, #2
 8007cfe:	4621      	mov	r1, r4
 8007d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d04:	4621      	mov	r1, r4
 8007d06:	008a      	lsls	r2, r1, #2
 8007d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d0c:	f7f8 ffbc 	bl	8000c88 <__aeabi_uldivmod>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4b60      	ldr	r3, [pc, #384]	; (8007e98 <UART_SetConfig+0x4e4>)
 8007d16:	fba3 2302 	umull	r2, r3, r3, r2
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	011c      	lsls	r4, r3, #4
 8007d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d30:	4642      	mov	r2, r8
 8007d32:	464b      	mov	r3, r9
 8007d34:	1891      	adds	r1, r2, r2
 8007d36:	61b9      	str	r1, [r7, #24]
 8007d38:	415b      	adcs	r3, r3
 8007d3a:	61fb      	str	r3, [r7, #28]
 8007d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d40:	4641      	mov	r1, r8
 8007d42:	1851      	adds	r1, r2, r1
 8007d44:	6139      	str	r1, [r7, #16]
 8007d46:	4649      	mov	r1, r9
 8007d48:	414b      	adcs	r3, r1
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	f04f 0300 	mov.w	r3, #0
 8007d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d58:	4659      	mov	r1, fp
 8007d5a:	00cb      	lsls	r3, r1, #3
 8007d5c:	4651      	mov	r1, sl
 8007d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d62:	4651      	mov	r1, sl
 8007d64:	00ca      	lsls	r2, r1, #3
 8007d66:	4610      	mov	r0, r2
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	189b      	adds	r3, r3, r2
 8007d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d74:	464b      	mov	r3, r9
 8007d76:	460a      	mov	r2, r1
 8007d78:	eb42 0303 	adc.w	r3, r2, r3
 8007d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d98:	4649      	mov	r1, r9
 8007d9a:	008b      	lsls	r3, r1, #2
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007da2:	4641      	mov	r1, r8
 8007da4:	008a      	lsls	r2, r1, #2
 8007da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007daa:	f7f8 ff6d 	bl	8000c88 <__aeabi_uldivmod>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4b39      	ldr	r3, [pc, #228]	; (8007e98 <UART_SetConfig+0x4e4>)
 8007db4:	fba3 1302 	umull	r1, r3, r3, r2
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	2164      	movs	r1, #100	; 0x64
 8007dbc:	fb01 f303 	mul.w	r3, r1, r3
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	3332      	adds	r3, #50	; 0x32
 8007dc6:	4a34      	ldr	r2, [pc, #208]	; (8007e98 <UART_SetConfig+0x4e4>)
 8007dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dd2:	441c      	add	r4, r3
 8007dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dd8:	2200      	movs	r2, #0
 8007dda:	673b      	str	r3, [r7, #112]	; 0x70
 8007ddc:	677a      	str	r2, [r7, #116]	; 0x74
 8007dde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007de2:	4642      	mov	r2, r8
 8007de4:	464b      	mov	r3, r9
 8007de6:	1891      	adds	r1, r2, r2
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	415b      	adcs	r3, r3
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007df2:	4641      	mov	r1, r8
 8007df4:	1851      	adds	r1, r2, r1
 8007df6:	6039      	str	r1, [r7, #0]
 8007df8:	4649      	mov	r1, r9
 8007dfa:	414b      	adcs	r3, r1
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e0a:	4659      	mov	r1, fp
 8007e0c:	00cb      	lsls	r3, r1, #3
 8007e0e:	4651      	mov	r1, sl
 8007e10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e14:	4651      	mov	r1, sl
 8007e16:	00ca      	lsls	r2, r1, #3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	4642      	mov	r2, r8
 8007e20:	189b      	adds	r3, r3, r2
 8007e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e24:	464b      	mov	r3, r9
 8007e26:	460a      	mov	r2, r1
 8007e28:	eb42 0303 	adc.w	r3, r2, r3
 8007e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	663b      	str	r3, [r7, #96]	; 0x60
 8007e38:	667a      	str	r2, [r7, #100]	; 0x64
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007e46:	4649      	mov	r1, r9
 8007e48:	008b      	lsls	r3, r1, #2
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e50:	4641      	mov	r1, r8
 8007e52:	008a      	lsls	r2, r1, #2
 8007e54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e58:	f7f8 ff16 	bl	8000c88 <__aeabi_uldivmod>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <UART_SetConfig+0x4e4>)
 8007e62:	fba3 1302 	umull	r1, r3, r3, r2
 8007e66:	095b      	lsrs	r3, r3, #5
 8007e68:	2164      	movs	r1, #100	; 0x64
 8007e6a:	fb01 f303 	mul.w	r3, r1, r3
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	3332      	adds	r3, #50	; 0x32
 8007e74:	4a08      	ldr	r2, [pc, #32]	; (8007e98 <UART_SetConfig+0x4e4>)
 8007e76:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	f003 020f 	and.w	r2, r3, #15
 8007e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4422      	add	r2, r4
 8007e88:	609a      	str	r2, [r3, #8]
}
 8007e8a:	bf00      	nop
 8007e8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e90:	46bd      	mov	sp, r7
 8007e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e96:	bf00      	nop
 8007e98:	51eb851f 	.word	0x51eb851f

08007e9c <__assert_func>:
 8007e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <__assert_func+0x2c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	68d8      	ldr	r0, [r3, #12]
 8007eaa:	b14c      	cbz	r4, 8007ec0 <__assert_func+0x24>
 8007eac:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <__assert_func+0x30>)
 8007eae:	9100      	str	r1, [sp, #0]
 8007eb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007eb4:	4906      	ldr	r1, [pc, #24]	; (8007ed0 <__assert_func+0x34>)
 8007eb6:	462b      	mov	r3, r5
 8007eb8:	f000 f9c6 	bl	8008248 <fiprintf>
 8007ebc:	f002 fc22 	bl	800a704 <abort>
 8007ec0:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <__assert_func+0x38>)
 8007ec2:	461c      	mov	r4, r3
 8007ec4:	e7f3      	b.n	8007eae <__assert_func+0x12>
 8007ec6:	bf00      	nop
 8007ec8:	2000000c 	.word	0x2000000c
 8007ecc:	0800ef0c 	.word	0x0800ef0c
 8007ed0:	0800ef19 	.word	0x0800ef19
 8007ed4:	0800ef47 	.word	0x0800ef47

08007ed8 <calloc>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <calloc+0xc>)
 8007eda:	460a      	mov	r2, r1
 8007edc:	4601      	mov	r1, r0
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	f000 bafa 	b.w	80084d8 <_calloc_r>
 8007ee4:	2000000c 	.word	0x2000000c

08007ee8 <__errno>:
 8007ee8:	4b01      	ldr	r3, [pc, #4]	; (8007ef0 <__errno+0x8>)
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	2000000c 	.word	0x2000000c

08007ef4 <__sflush_r>:
 8007ef4:	898a      	ldrh	r2, [r1, #12]
 8007ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efa:	4605      	mov	r5, r0
 8007efc:	0710      	lsls	r0, r2, #28
 8007efe:	460c      	mov	r4, r1
 8007f00:	d458      	bmi.n	8007fb4 <__sflush_r+0xc0>
 8007f02:	684b      	ldr	r3, [r1, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dc05      	bgt.n	8007f14 <__sflush_r+0x20>
 8007f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	dc02      	bgt.n	8007f14 <__sflush_r+0x20>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	d0f9      	beq.n	8007f0e <__sflush_r+0x1a>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f20:	682f      	ldr	r7, [r5, #0]
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	d032      	beq.n	8007f8c <__sflush_r+0x98>
 8007f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	075a      	lsls	r2, r3, #29
 8007f2c:	d505      	bpl.n	8007f3a <__sflush_r+0x46>
 8007f2e:	6863      	ldr	r3, [r4, #4]
 8007f30:	1ac0      	subs	r0, r0, r3
 8007f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f34:	b10b      	cbz	r3, 8007f3a <__sflush_r+0x46>
 8007f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f38:	1ac0      	subs	r0, r0, r3
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f40:	6a21      	ldr	r1, [r4, #32]
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b0      	blx	r6
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	d106      	bne.n	8007f5a <__sflush_r+0x66>
 8007f4c:	6829      	ldr	r1, [r5, #0]
 8007f4e:	291d      	cmp	r1, #29
 8007f50:	d82c      	bhi.n	8007fac <__sflush_r+0xb8>
 8007f52:	4a2a      	ldr	r2, [pc, #168]	; (8007ffc <__sflush_r+0x108>)
 8007f54:	40ca      	lsrs	r2, r1
 8007f56:	07d6      	lsls	r6, r2, #31
 8007f58:	d528      	bpl.n	8007fac <__sflush_r+0xb8>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	6062      	str	r2, [r4, #4]
 8007f5e:	04d9      	lsls	r1, r3, #19
 8007f60:	6922      	ldr	r2, [r4, #16]
 8007f62:	6022      	str	r2, [r4, #0]
 8007f64:	d504      	bpl.n	8007f70 <__sflush_r+0x7c>
 8007f66:	1c42      	adds	r2, r0, #1
 8007f68:	d101      	bne.n	8007f6e <__sflush_r+0x7a>
 8007f6a:	682b      	ldr	r3, [r5, #0]
 8007f6c:	b903      	cbnz	r3, 8007f70 <__sflush_r+0x7c>
 8007f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f72:	602f      	str	r7, [r5, #0]
 8007f74:	2900      	cmp	r1, #0
 8007f76:	d0ca      	beq.n	8007f0e <__sflush_r+0x1a>
 8007f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f7c:	4299      	cmp	r1, r3
 8007f7e:	d002      	beq.n	8007f86 <__sflush_r+0x92>
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 fabf 	bl	8008504 <_free_r>
 8007f86:	2000      	movs	r0, #0
 8007f88:	6360      	str	r0, [r4, #52]	; 0x34
 8007f8a:	e7c1      	b.n	8007f10 <__sflush_r+0x1c>
 8007f8c:	6a21      	ldr	r1, [r4, #32]
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b0      	blx	r6
 8007f94:	1c41      	adds	r1, r0, #1
 8007f96:	d1c7      	bne.n	8007f28 <__sflush_r+0x34>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0c4      	beq.n	8007f28 <__sflush_r+0x34>
 8007f9e:	2b1d      	cmp	r3, #29
 8007fa0:	d001      	beq.n	8007fa6 <__sflush_r+0xb2>
 8007fa2:	2b16      	cmp	r3, #22
 8007fa4:	d101      	bne.n	8007faa <__sflush_r+0xb6>
 8007fa6:	602f      	str	r7, [r5, #0]
 8007fa8:	e7b1      	b.n	8007f0e <__sflush_r+0x1a>
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	e7ad      	b.n	8007f10 <__sflush_r+0x1c>
 8007fb4:	690f      	ldr	r7, [r1, #16]
 8007fb6:	2f00      	cmp	r7, #0
 8007fb8:	d0a9      	beq.n	8007f0e <__sflush_r+0x1a>
 8007fba:	0793      	lsls	r3, r2, #30
 8007fbc:	680e      	ldr	r6, [r1, #0]
 8007fbe:	bf08      	it	eq
 8007fc0:	694b      	ldreq	r3, [r1, #20]
 8007fc2:	600f      	str	r7, [r1, #0]
 8007fc4:	bf18      	it	ne
 8007fc6:	2300      	movne	r3, #0
 8007fc8:	eba6 0807 	sub.w	r8, r6, r7
 8007fcc:	608b      	str	r3, [r1, #8]
 8007fce:	f1b8 0f00 	cmp.w	r8, #0
 8007fd2:	dd9c      	ble.n	8007f0e <__sflush_r+0x1a>
 8007fd4:	6a21      	ldr	r1, [r4, #32]
 8007fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fd8:	4643      	mov	r3, r8
 8007fda:	463a      	mov	r2, r7
 8007fdc:	4628      	mov	r0, r5
 8007fde:	47b0      	blx	r6
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	dc06      	bgt.n	8007ff2 <__sflush_r+0xfe>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	e78e      	b.n	8007f10 <__sflush_r+0x1c>
 8007ff2:	4407      	add	r7, r0
 8007ff4:	eba8 0800 	sub.w	r8, r8, r0
 8007ff8:	e7e9      	b.n	8007fce <__sflush_r+0xda>
 8007ffa:	bf00      	nop
 8007ffc:	20400001 	.word	0x20400001

08008000 <_fflush_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	690b      	ldr	r3, [r1, #16]
 8008004:	4605      	mov	r5, r0
 8008006:	460c      	mov	r4, r1
 8008008:	b913      	cbnz	r3, 8008010 <_fflush_r+0x10>
 800800a:	2500      	movs	r5, #0
 800800c:	4628      	mov	r0, r5
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	b118      	cbz	r0, 800801a <_fflush_r+0x1a>
 8008012:	6983      	ldr	r3, [r0, #24]
 8008014:	b90b      	cbnz	r3, 800801a <_fflush_r+0x1a>
 8008016:	f000 f899 	bl	800814c <__sinit>
 800801a:	4b14      	ldr	r3, [pc, #80]	; (800806c <_fflush_r+0x6c>)
 800801c:	429c      	cmp	r4, r3
 800801e:	d11b      	bne.n	8008058 <_fflush_r+0x58>
 8008020:	686c      	ldr	r4, [r5, #4]
 8008022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0ef      	beq.n	800800a <_fflush_r+0xa>
 800802a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800802c:	07d0      	lsls	r0, r2, #31
 800802e:	d404      	bmi.n	800803a <_fflush_r+0x3a>
 8008030:	0599      	lsls	r1, r3, #22
 8008032:	d402      	bmi.n	800803a <_fflush_r+0x3a>
 8008034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008036:	f000 fa0c 	bl	8008452 <__retarget_lock_acquire_recursive>
 800803a:	4628      	mov	r0, r5
 800803c:	4621      	mov	r1, r4
 800803e:	f7ff ff59 	bl	8007ef4 <__sflush_r>
 8008042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008044:	07da      	lsls	r2, r3, #31
 8008046:	4605      	mov	r5, r0
 8008048:	d4e0      	bmi.n	800800c <_fflush_r+0xc>
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	059b      	lsls	r3, r3, #22
 800804e:	d4dd      	bmi.n	800800c <_fflush_r+0xc>
 8008050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008052:	f000 f9ff 	bl	8008454 <__retarget_lock_release_recursive>
 8008056:	e7d9      	b.n	800800c <_fflush_r+0xc>
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <_fflush_r+0x70>)
 800805a:	429c      	cmp	r4, r3
 800805c:	d101      	bne.n	8008062 <_fflush_r+0x62>
 800805e:	68ac      	ldr	r4, [r5, #8]
 8008060:	e7df      	b.n	8008022 <_fflush_r+0x22>
 8008062:	4b04      	ldr	r3, [pc, #16]	; (8008074 <_fflush_r+0x74>)
 8008064:	429c      	cmp	r4, r3
 8008066:	bf08      	it	eq
 8008068:	68ec      	ldreq	r4, [r5, #12]
 800806a:	e7da      	b.n	8008022 <_fflush_r+0x22>
 800806c:	0800f06c 	.word	0x0800f06c
 8008070:	0800f08c 	.word	0x0800f08c
 8008074:	0800f04c 	.word	0x0800f04c

08008078 <fflush>:
 8008078:	4601      	mov	r1, r0
 800807a:	b920      	cbnz	r0, 8008086 <fflush+0xe>
 800807c:	4b04      	ldr	r3, [pc, #16]	; (8008090 <fflush+0x18>)
 800807e:	4905      	ldr	r1, [pc, #20]	; (8008094 <fflush+0x1c>)
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f000 b933 	b.w	80082ec <_fwalk_reent>
 8008086:	4b04      	ldr	r3, [pc, #16]	; (8008098 <fflush+0x20>)
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	f7ff bfb9 	b.w	8008000 <_fflush_r>
 800808e:	bf00      	nop
 8008090:	0800f0ac 	.word	0x0800f0ac
 8008094:	08008001 	.word	0x08008001
 8008098:	2000000c 	.word	0x2000000c

0800809c <std>:
 800809c:	2300      	movs	r3, #0
 800809e:	b510      	push	{r4, lr}
 80080a0:	4604      	mov	r4, r0
 80080a2:	e9c0 3300 	strd	r3, r3, [r0]
 80080a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080aa:	6083      	str	r3, [r0, #8]
 80080ac:	8181      	strh	r1, [r0, #12]
 80080ae:	6643      	str	r3, [r0, #100]	; 0x64
 80080b0:	81c2      	strh	r2, [r0, #14]
 80080b2:	6183      	str	r3, [r0, #24]
 80080b4:	4619      	mov	r1, r3
 80080b6:	2208      	movs	r2, #8
 80080b8:	305c      	adds	r0, #92	; 0x5c
 80080ba:	f000 fa05 	bl	80084c8 <memset>
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <std+0x38>)
 80080c0:	6263      	str	r3, [r4, #36]	; 0x24
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <std+0x3c>)
 80080c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <std+0x40>)
 80080c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <std+0x44>)
 80080cc:	6224      	str	r4, [r4, #32]
 80080ce:	6323      	str	r3, [r4, #48]	; 0x30
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	bf00      	nop
 80080d4:	0800977d 	.word	0x0800977d
 80080d8:	0800979f 	.word	0x0800979f
 80080dc:	080097d7 	.word	0x080097d7
 80080e0:	080097fb 	.word	0x080097fb

080080e4 <_cleanup_r>:
 80080e4:	4901      	ldr	r1, [pc, #4]	; (80080ec <_cleanup_r+0x8>)
 80080e6:	f000 b901 	b.w	80082ec <_fwalk_reent>
 80080ea:	bf00      	nop
 80080ec:	08008001 	.word	0x08008001

080080f0 <__sfmoreglue>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	2268      	movs	r2, #104	; 0x68
 80080f4:	1e4d      	subs	r5, r1, #1
 80080f6:	4355      	muls	r5, r2
 80080f8:	460e      	mov	r6, r1
 80080fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080fe:	f000 fa6d 	bl	80085dc <_malloc_r>
 8008102:	4604      	mov	r4, r0
 8008104:	b140      	cbz	r0, 8008118 <__sfmoreglue+0x28>
 8008106:	2100      	movs	r1, #0
 8008108:	e9c0 1600 	strd	r1, r6, [r0]
 800810c:	300c      	adds	r0, #12
 800810e:	60a0      	str	r0, [r4, #8]
 8008110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008114:	f000 f9d8 	bl	80084c8 <memset>
 8008118:	4620      	mov	r0, r4
 800811a:	bd70      	pop	{r4, r5, r6, pc}

0800811c <__sfp_lock_acquire>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__sfp_lock_acquire+0x8>)
 800811e:	f000 b998 	b.w	8008452 <__retarget_lock_acquire_recursive>
 8008122:	bf00      	nop
 8008124:	20000edd 	.word	0x20000edd

08008128 <__sfp_lock_release>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__sfp_lock_release+0x8>)
 800812a:	f000 b993 	b.w	8008454 <__retarget_lock_release_recursive>
 800812e:	bf00      	nop
 8008130:	20000edd 	.word	0x20000edd

08008134 <__sinit_lock_acquire>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__sinit_lock_acquire+0x8>)
 8008136:	f000 b98c 	b.w	8008452 <__retarget_lock_acquire_recursive>
 800813a:	bf00      	nop
 800813c:	20000ede 	.word	0x20000ede

08008140 <__sinit_lock_release>:
 8008140:	4801      	ldr	r0, [pc, #4]	; (8008148 <__sinit_lock_release+0x8>)
 8008142:	f000 b987 	b.w	8008454 <__retarget_lock_release_recursive>
 8008146:	bf00      	nop
 8008148:	20000ede 	.word	0x20000ede

0800814c <__sinit>:
 800814c:	b510      	push	{r4, lr}
 800814e:	4604      	mov	r4, r0
 8008150:	f7ff fff0 	bl	8008134 <__sinit_lock_acquire>
 8008154:	69a3      	ldr	r3, [r4, #24]
 8008156:	b11b      	cbz	r3, 8008160 <__sinit+0x14>
 8008158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800815c:	f7ff bff0 	b.w	8008140 <__sinit_lock_release>
 8008160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008164:	6523      	str	r3, [r4, #80]	; 0x50
 8008166:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <__sinit+0x68>)
 8008168:	4a13      	ldr	r2, [pc, #76]	; (80081b8 <__sinit+0x6c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	62a2      	str	r2, [r4, #40]	; 0x28
 800816e:	42a3      	cmp	r3, r4
 8008170:	bf04      	itt	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	61a3      	streq	r3, [r4, #24]
 8008176:	4620      	mov	r0, r4
 8008178:	f000 f820 	bl	80081bc <__sfp>
 800817c:	6060      	str	r0, [r4, #4]
 800817e:	4620      	mov	r0, r4
 8008180:	f000 f81c 	bl	80081bc <__sfp>
 8008184:	60a0      	str	r0, [r4, #8]
 8008186:	4620      	mov	r0, r4
 8008188:	f000 f818 	bl	80081bc <__sfp>
 800818c:	2200      	movs	r2, #0
 800818e:	60e0      	str	r0, [r4, #12]
 8008190:	2104      	movs	r1, #4
 8008192:	6860      	ldr	r0, [r4, #4]
 8008194:	f7ff ff82 	bl	800809c <std>
 8008198:	68a0      	ldr	r0, [r4, #8]
 800819a:	2201      	movs	r2, #1
 800819c:	2109      	movs	r1, #9
 800819e:	f7ff ff7d 	bl	800809c <std>
 80081a2:	68e0      	ldr	r0, [r4, #12]
 80081a4:	2202      	movs	r2, #2
 80081a6:	2112      	movs	r1, #18
 80081a8:	f7ff ff78 	bl	800809c <std>
 80081ac:	2301      	movs	r3, #1
 80081ae:	61a3      	str	r3, [r4, #24]
 80081b0:	e7d2      	b.n	8008158 <__sinit+0xc>
 80081b2:	bf00      	nop
 80081b4:	0800f0ac 	.word	0x0800f0ac
 80081b8:	080080e5 	.word	0x080080e5

080081bc <__sfp>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	4607      	mov	r7, r0
 80081c0:	f7ff ffac 	bl	800811c <__sfp_lock_acquire>
 80081c4:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <__sfp+0x84>)
 80081c6:	681e      	ldr	r6, [r3, #0]
 80081c8:	69b3      	ldr	r3, [r6, #24]
 80081ca:	b913      	cbnz	r3, 80081d2 <__sfp+0x16>
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff ffbd 	bl	800814c <__sinit>
 80081d2:	3648      	adds	r6, #72	; 0x48
 80081d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081d8:	3b01      	subs	r3, #1
 80081da:	d503      	bpl.n	80081e4 <__sfp+0x28>
 80081dc:	6833      	ldr	r3, [r6, #0]
 80081de:	b30b      	cbz	r3, 8008224 <__sfp+0x68>
 80081e0:	6836      	ldr	r6, [r6, #0]
 80081e2:	e7f7      	b.n	80081d4 <__sfp+0x18>
 80081e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081e8:	b9d5      	cbnz	r5, 8008220 <__sfp+0x64>
 80081ea:	4b16      	ldr	r3, [pc, #88]	; (8008244 <__sfp+0x88>)
 80081ec:	60e3      	str	r3, [r4, #12]
 80081ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081f2:	6665      	str	r5, [r4, #100]	; 0x64
 80081f4:	f000 f92c 	bl	8008450 <__retarget_lock_init_recursive>
 80081f8:	f7ff ff96 	bl	8008128 <__sfp_lock_release>
 80081fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008204:	6025      	str	r5, [r4, #0]
 8008206:	61a5      	str	r5, [r4, #24]
 8008208:	2208      	movs	r2, #8
 800820a:	4629      	mov	r1, r5
 800820c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008210:	f000 f95a 	bl	80084c8 <memset>
 8008214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800821c:	4620      	mov	r0, r4
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	3468      	adds	r4, #104	; 0x68
 8008222:	e7d9      	b.n	80081d8 <__sfp+0x1c>
 8008224:	2104      	movs	r1, #4
 8008226:	4638      	mov	r0, r7
 8008228:	f7ff ff62 	bl	80080f0 <__sfmoreglue>
 800822c:	4604      	mov	r4, r0
 800822e:	6030      	str	r0, [r6, #0]
 8008230:	2800      	cmp	r0, #0
 8008232:	d1d5      	bne.n	80081e0 <__sfp+0x24>
 8008234:	f7ff ff78 	bl	8008128 <__sfp_lock_release>
 8008238:	230c      	movs	r3, #12
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	e7ee      	b.n	800821c <__sfp+0x60>
 800823e:	bf00      	nop
 8008240:	0800f0ac 	.word	0x0800f0ac
 8008244:	ffff0001 	.word	0xffff0001

08008248 <fiprintf>:
 8008248:	b40e      	push	{r1, r2, r3}
 800824a:	b503      	push	{r0, r1, lr}
 800824c:	4601      	mov	r1, r0
 800824e:	ab03      	add	r3, sp, #12
 8008250:	4805      	ldr	r0, [pc, #20]	; (8008268 <fiprintf+0x20>)
 8008252:	f853 2b04 	ldr.w	r2, [r3], #4
 8008256:	6800      	ldr	r0, [r0, #0]
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	f000 fa5d 	bl	8008718 <_vfiprintf_r>
 800825e:	b002      	add	sp, #8
 8008260:	f85d eb04 	ldr.w	lr, [sp], #4
 8008264:	b003      	add	sp, #12
 8008266:	4770      	bx	lr
 8008268:	2000000c 	.word	0x2000000c

0800826c <_fputc_r>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	460e      	mov	r6, r1
 8008270:	4614      	mov	r4, r2
 8008272:	4605      	mov	r5, r0
 8008274:	b118      	cbz	r0, 800827e <_fputc_r+0x12>
 8008276:	6983      	ldr	r3, [r0, #24]
 8008278:	b90b      	cbnz	r3, 800827e <_fputc_r+0x12>
 800827a:	f7ff ff67 	bl	800814c <__sinit>
 800827e:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <_fputc_r+0x64>)
 8008280:	429c      	cmp	r4, r3
 8008282:	d11a      	bne.n	80082ba <_fputc_r+0x4e>
 8008284:	686c      	ldr	r4, [r5, #4]
 8008286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008288:	07d8      	lsls	r0, r3, #31
 800828a:	d405      	bmi.n	8008298 <_fputc_r+0x2c>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	0599      	lsls	r1, r3, #22
 8008290:	d402      	bmi.n	8008298 <_fputc_r+0x2c>
 8008292:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008294:	f000 f8dd 	bl	8008452 <__retarget_lock_acquire_recursive>
 8008298:	4622      	mov	r2, r4
 800829a:	4628      	mov	r0, r5
 800829c:	4631      	mov	r1, r6
 800829e:	f001 f9ef 	bl	8009680 <_putc_r>
 80082a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082a4:	07da      	lsls	r2, r3, #31
 80082a6:	4605      	mov	r5, r0
 80082a8:	d405      	bmi.n	80082b6 <_fputc_r+0x4a>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	059b      	lsls	r3, r3, #22
 80082ae:	d402      	bmi.n	80082b6 <_fputc_r+0x4a>
 80082b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082b2:	f000 f8cf 	bl	8008454 <__retarget_lock_release_recursive>
 80082b6:	4628      	mov	r0, r5
 80082b8:	bd70      	pop	{r4, r5, r6, pc}
 80082ba:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <_fputc_r+0x68>)
 80082bc:	429c      	cmp	r4, r3
 80082be:	d101      	bne.n	80082c4 <_fputc_r+0x58>
 80082c0:	68ac      	ldr	r4, [r5, #8]
 80082c2:	e7e0      	b.n	8008286 <_fputc_r+0x1a>
 80082c4:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <_fputc_r+0x6c>)
 80082c6:	429c      	cmp	r4, r3
 80082c8:	bf08      	it	eq
 80082ca:	68ec      	ldreq	r4, [r5, #12]
 80082cc:	e7db      	b.n	8008286 <_fputc_r+0x1a>
 80082ce:	bf00      	nop
 80082d0:	0800f06c 	.word	0x0800f06c
 80082d4:	0800f08c 	.word	0x0800f08c
 80082d8:	0800f04c 	.word	0x0800f04c

080082dc <fputc>:
 80082dc:	4b02      	ldr	r3, [pc, #8]	; (80082e8 <fputc+0xc>)
 80082de:	460a      	mov	r2, r1
 80082e0:	4601      	mov	r1, r0
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	f7ff bfc2 	b.w	800826c <_fputc_r>
 80082e8:	2000000c 	.word	0x2000000c

080082ec <_fwalk_reent>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	4606      	mov	r6, r0
 80082f2:	4688      	mov	r8, r1
 80082f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082f8:	2700      	movs	r7, #0
 80082fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082fe:	f1b9 0901 	subs.w	r9, r9, #1
 8008302:	d505      	bpl.n	8008310 <_fwalk_reent+0x24>
 8008304:	6824      	ldr	r4, [r4, #0]
 8008306:	2c00      	cmp	r4, #0
 8008308:	d1f7      	bne.n	80082fa <_fwalk_reent+0xe>
 800830a:	4638      	mov	r0, r7
 800830c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008310:	89ab      	ldrh	r3, [r5, #12]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d907      	bls.n	8008326 <_fwalk_reent+0x3a>
 8008316:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800831a:	3301      	adds	r3, #1
 800831c:	d003      	beq.n	8008326 <_fwalk_reent+0x3a>
 800831e:	4629      	mov	r1, r5
 8008320:	4630      	mov	r0, r6
 8008322:	47c0      	blx	r8
 8008324:	4307      	orrs	r7, r0
 8008326:	3568      	adds	r5, #104	; 0x68
 8008328:	e7e9      	b.n	80082fe <_fwalk_reent+0x12>
	...

0800832c <_fwrite_r>:
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	9c08      	ldr	r4, [sp, #32]
 8008332:	468a      	mov	sl, r1
 8008334:	4690      	mov	r8, r2
 8008336:	fb02 f903 	mul.w	r9, r2, r3
 800833a:	4605      	mov	r5, r0
 800833c:	b118      	cbz	r0, 8008346 <_fwrite_r+0x1a>
 800833e:	6983      	ldr	r3, [r0, #24]
 8008340:	b90b      	cbnz	r3, 8008346 <_fwrite_r+0x1a>
 8008342:	f7ff ff03 	bl	800814c <__sinit>
 8008346:	4b26      	ldr	r3, [pc, #152]	; (80083e0 <_fwrite_r+0xb4>)
 8008348:	429c      	cmp	r4, r3
 800834a:	d123      	bne.n	8008394 <_fwrite_r+0x68>
 800834c:	686c      	ldr	r4, [r5, #4]
 800834e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008350:	07de      	lsls	r6, r3, #31
 8008352:	d405      	bmi.n	8008360 <_fwrite_r+0x34>
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	0598      	lsls	r0, r3, #22
 8008358:	d402      	bmi.n	8008360 <_fwrite_r+0x34>
 800835a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800835c:	f000 f879 	bl	8008452 <__retarget_lock_acquire_recursive>
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	0719      	lsls	r1, r3, #28
 8008364:	d520      	bpl.n	80083a8 <_fwrite_r+0x7c>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	b1f3      	cbz	r3, 80083a8 <_fwrite_r+0x7c>
 800836a:	2600      	movs	r6, #0
 800836c:	454e      	cmp	r6, r9
 800836e:	d029      	beq.n	80083c4 <_fwrite_r+0x98>
 8008370:	68a7      	ldr	r7, [r4, #8]
 8008372:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8008376:	3f01      	subs	r7, #1
 8008378:	2f00      	cmp	r7, #0
 800837a:	60a7      	str	r7, [r4, #8]
 800837c:	da04      	bge.n	8008388 <_fwrite_r+0x5c>
 800837e:	69a3      	ldr	r3, [r4, #24]
 8008380:	429f      	cmp	r7, r3
 8008382:	db19      	blt.n	80083b8 <_fwrite_r+0x8c>
 8008384:	290a      	cmp	r1, #10
 8008386:	d017      	beq.n	80083b8 <_fwrite_r+0x8c>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	6022      	str	r2, [r4, #0]
 800838e:	7019      	strb	r1, [r3, #0]
 8008390:	3601      	adds	r6, #1
 8008392:	e7eb      	b.n	800836c <_fwrite_r+0x40>
 8008394:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <_fwrite_r+0xb8>)
 8008396:	429c      	cmp	r4, r3
 8008398:	d101      	bne.n	800839e <_fwrite_r+0x72>
 800839a:	68ac      	ldr	r4, [r5, #8]
 800839c:	e7d7      	b.n	800834e <_fwrite_r+0x22>
 800839e:	4b12      	ldr	r3, [pc, #72]	; (80083e8 <_fwrite_r+0xbc>)
 80083a0:	429c      	cmp	r4, r3
 80083a2:	bf08      	it	eq
 80083a4:	68ec      	ldreq	r4, [r5, #12]
 80083a6:	e7d2      	b.n	800834e <_fwrite_r+0x22>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4628      	mov	r0, r5
 80083ac:	f002 f93c 	bl	800a628 <__swsetup_r>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d0da      	beq.n	800836a <_fwrite_r+0x3e>
 80083b4:	2600      	movs	r6, #0
 80083b6:	e005      	b.n	80083c4 <_fwrite_r+0x98>
 80083b8:	4622      	mov	r2, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f002 f8d0 	bl	800a560 <__swbuf_r>
 80083c0:	3001      	adds	r0, #1
 80083c2:	d1e5      	bne.n	8008390 <_fwrite_r+0x64>
 80083c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083c6:	07da      	lsls	r2, r3, #31
 80083c8:	d405      	bmi.n	80083d6 <_fwrite_r+0xaa>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	059b      	lsls	r3, r3, #22
 80083ce:	d402      	bmi.n	80083d6 <_fwrite_r+0xaa>
 80083d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083d2:	f000 f83f 	bl	8008454 <__retarget_lock_release_recursive>
 80083d6:	fbb6 f0f8 	udiv	r0, r6, r8
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	bf00      	nop
 80083e0:	0800f06c 	.word	0x0800f06c
 80083e4:	0800f08c 	.word	0x0800f08c
 80083e8:	0800f04c 	.word	0x0800f04c

080083ec <fwrite>:
 80083ec:	b507      	push	{r0, r1, r2, lr}
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4613      	mov	r3, r2
 80083f2:	460a      	mov	r2, r1
 80083f4:	4601      	mov	r1, r0
 80083f6:	4803      	ldr	r0, [pc, #12]	; (8008404 <fwrite+0x18>)
 80083f8:	6800      	ldr	r0, [r0, #0]
 80083fa:	f7ff ff97 	bl	800832c <_fwrite_r>
 80083fe:	b003      	add	sp, #12
 8008400:	f85d fb04 	ldr.w	pc, [sp], #4
 8008404:	2000000c 	.word	0x2000000c

08008408 <__libc_init_array>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	4d0d      	ldr	r5, [pc, #52]	; (8008440 <__libc_init_array+0x38>)
 800840c:	4c0d      	ldr	r4, [pc, #52]	; (8008444 <__libc_init_array+0x3c>)
 800840e:	1b64      	subs	r4, r4, r5
 8008410:	10a4      	asrs	r4, r4, #2
 8008412:	2600      	movs	r6, #0
 8008414:	42a6      	cmp	r6, r4
 8008416:	d109      	bne.n	800842c <__libc_init_array+0x24>
 8008418:	4d0b      	ldr	r5, [pc, #44]	; (8008448 <__libc_init_array+0x40>)
 800841a:	4c0c      	ldr	r4, [pc, #48]	; (800844c <__libc_init_array+0x44>)
 800841c:	f004 fb08 	bl	800ca30 <_init>
 8008420:	1b64      	subs	r4, r4, r5
 8008422:	10a4      	asrs	r4, r4, #2
 8008424:	2600      	movs	r6, #0
 8008426:	42a6      	cmp	r6, r4
 8008428:	d105      	bne.n	8008436 <__libc_init_array+0x2e>
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008430:	4798      	blx	r3
 8008432:	3601      	adds	r6, #1
 8008434:	e7ee      	b.n	8008414 <__libc_init_array+0xc>
 8008436:	f855 3b04 	ldr.w	r3, [r5], #4
 800843a:	4798      	blx	r3
 800843c:	3601      	adds	r6, #1
 800843e:	e7f2      	b.n	8008426 <__libc_init_array+0x1e>
 8008440:	0800f3bc 	.word	0x0800f3bc
 8008444:	0800f3bc 	.word	0x0800f3bc
 8008448:	0800f3bc 	.word	0x0800f3bc
 800844c:	0800f3c0 	.word	0x0800f3c0

08008450 <__retarget_lock_init_recursive>:
 8008450:	4770      	bx	lr

08008452 <__retarget_lock_acquire_recursive>:
 8008452:	4770      	bx	lr

08008454 <__retarget_lock_release_recursive>:
 8008454:	4770      	bx	lr
	...

08008458 <malloc>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <malloc+0xc>)
 800845a:	4601      	mov	r1, r0
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f000 b8bd 	b.w	80085dc <_malloc_r>
 8008462:	bf00      	nop
 8008464:	2000000c 	.word	0x2000000c

08008468 <free>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <free+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f000 b849 	b.w	8008504 <_free_r>
 8008472:	bf00      	nop
 8008474:	2000000c 	.word	0x2000000c

08008478 <memcpy>:
 8008478:	440a      	add	r2, r1
 800847a:	4291      	cmp	r1, r2
 800847c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008480:	d100      	bne.n	8008484 <memcpy+0xc>
 8008482:	4770      	bx	lr
 8008484:	b510      	push	{r4, lr}
 8008486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800848a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800848e:	4291      	cmp	r1, r2
 8008490:	d1f9      	bne.n	8008486 <memcpy+0xe>
 8008492:	bd10      	pop	{r4, pc}

08008494 <memmove>:
 8008494:	4288      	cmp	r0, r1
 8008496:	b510      	push	{r4, lr}
 8008498:	eb01 0402 	add.w	r4, r1, r2
 800849c:	d902      	bls.n	80084a4 <memmove+0x10>
 800849e:	4284      	cmp	r4, r0
 80084a0:	4623      	mov	r3, r4
 80084a2:	d807      	bhi.n	80084b4 <memmove+0x20>
 80084a4:	1e43      	subs	r3, r0, #1
 80084a6:	42a1      	cmp	r1, r4
 80084a8:	d008      	beq.n	80084bc <memmove+0x28>
 80084aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084b2:	e7f8      	b.n	80084a6 <memmove+0x12>
 80084b4:	4402      	add	r2, r0
 80084b6:	4601      	mov	r1, r0
 80084b8:	428a      	cmp	r2, r1
 80084ba:	d100      	bne.n	80084be <memmove+0x2a>
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084c6:	e7f7      	b.n	80084b8 <memmove+0x24>

080084c8 <memset>:
 80084c8:	4402      	add	r2, r0
 80084ca:	4603      	mov	r3, r0
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d100      	bne.n	80084d2 <memset+0xa>
 80084d0:	4770      	bx	lr
 80084d2:	f803 1b01 	strb.w	r1, [r3], #1
 80084d6:	e7f9      	b.n	80084cc <memset+0x4>

080084d8 <_calloc_r>:
 80084d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084da:	fba1 2402 	umull	r2, r4, r1, r2
 80084de:	b94c      	cbnz	r4, 80084f4 <_calloc_r+0x1c>
 80084e0:	4611      	mov	r1, r2
 80084e2:	9201      	str	r2, [sp, #4]
 80084e4:	f000 f87a 	bl	80085dc <_malloc_r>
 80084e8:	9a01      	ldr	r2, [sp, #4]
 80084ea:	4605      	mov	r5, r0
 80084ec:	b930      	cbnz	r0, 80084fc <_calloc_r+0x24>
 80084ee:	4628      	mov	r0, r5
 80084f0:	b003      	add	sp, #12
 80084f2:	bd30      	pop	{r4, r5, pc}
 80084f4:	220c      	movs	r2, #12
 80084f6:	6002      	str	r2, [r0, #0]
 80084f8:	2500      	movs	r5, #0
 80084fa:	e7f8      	b.n	80084ee <_calloc_r+0x16>
 80084fc:	4621      	mov	r1, r4
 80084fe:	f7ff ffe3 	bl	80084c8 <memset>
 8008502:	e7f4      	b.n	80084ee <_calloc_r+0x16>

08008504 <_free_r>:
 8008504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008506:	2900      	cmp	r1, #0
 8008508:	d044      	beq.n	8008594 <_free_r+0x90>
 800850a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800850e:	9001      	str	r0, [sp, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	f1a1 0404 	sub.w	r4, r1, #4
 8008516:	bfb8      	it	lt
 8008518:	18e4      	addlt	r4, r4, r3
 800851a:	f003 fb85 	bl	800bc28 <__malloc_lock>
 800851e:	4a1e      	ldr	r2, [pc, #120]	; (8008598 <_free_r+0x94>)
 8008520:	9801      	ldr	r0, [sp, #4]
 8008522:	6813      	ldr	r3, [r2, #0]
 8008524:	b933      	cbnz	r3, 8008534 <_free_r+0x30>
 8008526:	6063      	str	r3, [r4, #4]
 8008528:	6014      	str	r4, [r2, #0]
 800852a:	b003      	add	sp, #12
 800852c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008530:	f003 bb80 	b.w	800bc34 <__malloc_unlock>
 8008534:	42a3      	cmp	r3, r4
 8008536:	d908      	bls.n	800854a <_free_r+0x46>
 8008538:	6825      	ldr	r5, [r4, #0]
 800853a:	1961      	adds	r1, r4, r5
 800853c:	428b      	cmp	r3, r1
 800853e:	bf01      	itttt	eq
 8008540:	6819      	ldreq	r1, [r3, #0]
 8008542:	685b      	ldreq	r3, [r3, #4]
 8008544:	1949      	addeq	r1, r1, r5
 8008546:	6021      	streq	r1, [r4, #0]
 8008548:	e7ed      	b.n	8008526 <_free_r+0x22>
 800854a:	461a      	mov	r2, r3
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	b10b      	cbz	r3, 8008554 <_free_r+0x50>
 8008550:	42a3      	cmp	r3, r4
 8008552:	d9fa      	bls.n	800854a <_free_r+0x46>
 8008554:	6811      	ldr	r1, [r2, #0]
 8008556:	1855      	adds	r5, r2, r1
 8008558:	42a5      	cmp	r5, r4
 800855a:	d10b      	bne.n	8008574 <_free_r+0x70>
 800855c:	6824      	ldr	r4, [r4, #0]
 800855e:	4421      	add	r1, r4
 8008560:	1854      	adds	r4, r2, r1
 8008562:	42a3      	cmp	r3, r4
 8008564:	6011      	str	r1, [r2, #0]
 8008566:	d1e0      	bne.n	800852a <_free_r+0x26>
 8008568:	681c      	ldr	r4, [r3, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	6053      	str	r3, [r2, #4]
 800856e:	4421      	add	r1, r4
 8008570:	6011      	str	r1, [r2, #0]
 8008572:	e7da      	b.n	800852a <_free_r+0x26>
 8008574:	d902      	bls.n	800857c <_free_r+0x78>
 8008576:	230c      	movs	r3, #12
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	e7d6      	b.n	800852a <_free_r+0x26>
 800857c:	6825      	ldr	r5, [r4, #0]
 800857e:	1961      	adds	r1, r4, r5
 8008580:	428b      	cmp	r3, r1
 8008582:	bf04      	itt	eq
 8008584:	6819      	ldreq	r1, [r3, #0]
 8008586:	685b      	ldreq	r3, [r3, #4]
 8008588:	6063      	str	r3, [r4, #4]
 800858a:	bf04      	itt	eq
 800858c:	1949      	addeq	r1, r1, r5
 800858e:	6021      	streq	r1, [r4, #0]
 8008590:	6054      	str	r4, [r2, #4]
 8008592:	e7ca      	b.n	800852a <_free_r+0x26>
 8008594:	b003      	add	sp, #12
 8008596:	bd30      	pop	{r4, r5, pc}
 8008598:	20000ee0 	.word	0x20000ee0

0800859c <sbrk_aligned>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	4e0e      	ldr	r6, [pc, #56]	; (80085d8 <sbrk_aligned+0x3c>)
 80085a0:	460c      	mov	r4, r1
 80085a2:	6831      	ldr	r1, [r6, #0]
 80085a4:	4605      	mov	r5, r0
 80085a6:	b911      	cbnz	r1, 80085ae <sbrk_aligned+0x12>
 80085a8:	f001 f8b2 	bl	8009710 <_sbrk_r>
 80085ac:	6030      	str	r0, [r6, #0]
 80085ae:	4621      	mov	r1, r4
 80085b0:	4628      	mov	r0, r5
 80085b2:	f001 f8ad 	bl	8009710 <_sbrk_r>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d00a      	beq.n	80085d0 <sbrk_aligned+0x34>
 80085ba:	1cc4      	adds	r4, r0, #3
 80085bc:	f024 0403 	bic.w	r4, r4, #3
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d007      	beq.n	80085d4 <sbrk_aligned+0x38>
 80085c4:	1a21      	subs	r1, r4, r0
 80085c6:	4628      	mov	r0, r5
 80085c8:	f001 f8a2 	bl	8009710 <_sbrk_r>
 80085cc:	3001      	adds	r0, #1
 80085ce:	d101      	bne.n	80085d4 <sbrk_aligned+0x38>
 80085d0:	f04f 34ff 	mov.w	r4, #4294967295
 80085d4:	4620      	mov	r0, r4
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	20000ee4 	.word	0x20000ee4

080085dc <_malloc_r>:
 80085dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e0:	1ccd      	adds	r5, r1, #3
 80085e2:	f025 0503 	bic.w	r5, r5, #3
 80085e6:	3508      	adds	r5, #8
 80085e8:	2d0c      	cmp	r5, #12
 80085ea:	bf38      	it	cc
 80085ec:	250c      	movcc	r5, #12
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	4607      	mov	r7, r0
 80085f2:	db01      	blt.n	80085f8 <_malloc_r+0x1c>
 80085f4:	42a9      	cmp	r1, r5
 80085f6:	d905      	bls.n	8008604 <_malloc_r+0x28>
 80085f8:	230c      	movs	r3, #12
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	2600      	movs	r6, #0
 80085fe:	4630      	mov	r0, r6
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	4e2e      	ldr	r6, [pc, #184]	; (80086c0 <_malloc_r+0xe4>)
 8008606:	f003 fb0f 	bl	800bc28 <__malloc_lock>
 800860a:	6833      	ldr	r3, [r6, #0]
 800860c:	461c      	mov	r4, r3
 800860e:	bb34      	cbnz	r4, 800865e <_malloc_r+0x82>
 8008610:	4629      	mov	r1, r5
 8008612:	4638      	mov	r0, r7
 8008614:	f7ff ffc2 	bl	800859c <sbrk_aligned>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	4604      	mov	r4, r0
 800861c:	d14d      	bne.n	80086ba <_malloc_r+0xde>
 800861e:	6834      	ldr	r4, [r6, #0]
 8008620:	4626      	mov	r6, r4
 8008622:	2e00      	cmp	r6, #0
 8008624:	d140      	bne.n	80086a8 <_malloc_r+0xcc>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	4631      	mov	r1, r6
 800862a:	4638      	mov	r0, r7
 800862c:	eb04 0803 	add.w	r8, r4, r3
 8008630:	f001 f86e 	bl	8009710 <_sbrk_r>
 8008634:	4580      	cmp	r8, r0
 8008636:	d13a      	bne.n	80086ae <_malloc_r+0xd2>
 8008638:	6821      	ldr	r1, [r4, #0]
 800863a:	3503      	adds	r5, #3
 800863c:	1a6d      	subs	r5, r5, r1
 800863e:	f025 0503 	bic.w	r5, r5, #3
 8008642:	3508      	adds	r5, #8
 8008644:	2d0c      	cmp	r5, #12
 8008646:	bf38      	it	cc
 8008648:	250c      	movcc	r5, #12
 800864a:	4629      	mov	r1, r5
 800864c:	4638      	mov	r0, r7
 800864e:	f7ff ffa5 	bl	800859c <sbrk_aligned>
 8008652:	3001      	adds	r0, #1
 8008654:	d02b      	beq.n	80086ae <_malloc_r+0xd2>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	442b      	add	r3, r5
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	e00e      	b.n	800867c <_malloc_r+0xa0>
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	1b52      	subs	r2, r2, r5
 8008662:	d41e      	bmi.n	80086a2 <_malloc_r+0xc6>
 8008664:	2a0b      	cmp	r2, #11
 8008666:	d916      	bls.n	8008696 <_malloc_r+0xba>
 8008668:	1961      	adds	r1, r4, r5
 800866a:	42a3      	cmp	r3, r4
 800866c:	6025      	str	r5, [r4, #0]
 800866e:	bf18      	it	ne
 8008670:	6059      	strne	r1, [r3, #4]
 8008672:	6863      	ldr	r3, [r4, #4]
 8008674:	bf08      	it	eq
 8008676:	6031      	streq	r1, [r6, #0]
 8008678:	5162      	str	r2, [r4, r5]
 800867a:	604b      	str	r3, [r1, #4]
 800867c:	4638      	mov	r0, r7
 800867e:	f104 060b 	add.w	r6, r4, #11
 8008682:	f003 fad7 	bl	800bc34 <__malloc_unlock>
 8008686:	f026 0607 	bic.w	r6, r6, #7
 800868a:	1d23      	adds	r3, r4, #4
 800868c:	1af2      	subs	r2, r6, r3
 800868e:	d0b6      	beq.n	80085fe <_malloc_r+0x22>
 8008690:	1b9b      	subs	r3, r3, r6
 8008692:	50a3      	str	r3, [r4, r2]
 8008694:	e7b3      	b.n	80085fe <_malloc_r+0x22>
 8008696:	6862      	ldr	r2, [r4, #4]
 8008698:	42a3      	cmp	r3, r4
 800869a:	bf0c      	ite	eq
 800869c:	6032      	streq	r2, [r6, #0]
 800869e:	605a      	strne	r2, [r3, #4]
 80086a0:	e7ec      	b.n	800867c <_malloc_r+0xa0>
 80086a2:	4623      	mov	r3, r4
 80086a4:	6864      	ldr	r4, [r4, #4]
 80086a6:	e7b2      	b.n	800860e <_malloc_r+0x32>
 80086a8:	4634      	mov	r4, r6
 80086aa:	6876      	ldr	r6, [r6, #4]
 80086ac:	e7b9      	b.n	8008622 <_malloc_r+0x46>
 80086ae:	230c      	movs	r3, #12
 80086b0:	603b      	str	r3, [r7, #0]
 80086b2:	4638      	mov	r0, r7
 80086b4:	f003 fabe 	bl	800bc34 <__malloc_unlock>
 80086b8:	e7a1      	b.n	80085fe <_malloc_r+0x22>
 80086ba:	6025      	str	r5, [r4, #0]
 80086bc:	e7de      	b.n	800867c <_malloc_r+0xa0>
 80086be:	bf00      	nop
 80086c0:	20000ee0 	.word	0x20000ee0

080086c4 <__sfputc_r>:
 80086c4:	6893      	ldr	r3, [r2, #8]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	b410      	push	{r4}
 80086cc:	6093      	str	r3, [r2, #8]
 80086ce:	da08      	bge.n	80086e2 <__sfputc_r+0x1e>
 80086d0:	6994      	ldr	r4, [r2, #24]
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	db01      	blt.n	80086da <__sfputc_r+0x16>
 80086d6:	290a      	cmp	r1, #10
 80086d8:	d103      	bne.n	80086e2 <__sfputc_r+0x1e>
 80086da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086de:	f001 bf3f 	b.w	800a560 <__swbuf_r>
 80086e2:	6813      	ldr	r3, [r2, #0]
 80086e4:	1c58      	adds	r0, r3, #1
 80086e6:	6010      	str	r0, [r2, #0]
 80086e8:	7019      	strb	r1, [r3, #0]
 80086ea:	4608      	mov	r0, r1
 80086ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <__sfputs_r>:
 80086f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	4614      	mov	r4, r2
 80086fa:	18d5      	adds	r5, r2, r3
 80086fc:	42ac      	cmp	r4, r5
 80086fe:	d101      	bne.n	8008704 <__sfputs_r+0x12>
 8008700:	2000      	movs	r0, #0
 8008702:	e007      	b.n	8008714 <__sfputs_r+0x22>
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	463a      	mov	r2, r7
 800870a:	4630      	mov	r0, r6
 800870c:	f7ff ffda 	bl	80086c4 <__sfputc_r>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d1f3      	bne.n	80086fc <__sfputs_r+0xa>
 8008714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008718 <_vfiprintf_r>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	460d      	mov	r5, r1
 800871e:	b09d      	sub	sp, #116	; 0x74
 8008720:	4614      	mov	r4, r2
 8008722:	4698      	mov	r8, r3
 8008724:	4606      	mov	r6, r0
 8008726:	b118      	cbz	r0, 8008730 <_vfiprintf_r+0x18>
 8008728:	6983      	ldr	r3, [r0, #24]
 800872a:	b90b      	cbnz	r3, 8008730 <_vfiprintf_r+0x18>
 800872c:	f7ff fd0e 	bl	800814c <__sinit>
 8008730:	4b89      	ldr	r3, [pc, #548]	; (8008958 <_vfiprintf_r+0x240>)
 8008732:	429d      	cmp	r5, r3
 8008734:	d11b      	bne.n	800876e <_vfiprintf_r+0x56>
 8008736:	6875      	ldr	r5, [r6, #4]
 8008738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800873a:	07d9      	lsls	r1, r3, #31
 800873c:	d405      	bmi.n	800874a <_vfiprintf_r+0x32>
 800873e:	89ab      	ldrh	r3, [r5, #12]
 8008740:	059a      	lsls	r2, r3, #22
 8008742:	d402      	bmi.n	800874a <_vfiprintf_r+0x32>
 8008744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008746:	f7ff fe84 	bl	8008452 <__retarget_lock_acquire_recursive>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	071b      	lsls	r3, r3, #28
 800874e:	d501      	bpl.n	8008754 <_vfiprintf_r+0x3c>
 8008750:	692b      	ldr	r3, [r5, #16]
 8008752:	b9eb      	cbnz	r3, 8008790 <_vfiprintf_r+0x78>
 8008754:	4629      	mov	r1, r5
 8008756:	4630      	mov	r0, r6
 8008758:	f001 ff66 	bl	800a628 <__swsetup_r>
 800875c:	b1c0      	cbz	r0, 8008790 <_vfiprintf_r+0x78>
 800875e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008760:	07dc      	lsls	r4, r3, #31
 8008762:	d50e      	bpl.n	8008782 <_vfiprintf_r+0x6a>
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	b01d      	add	sp, #116	; 0x74
 800876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876e:	4b7b      	ldr	r3, [pc, #492]	; (800895c <_vfiprintf_r+0x244>)
 8008770:	429d      	cmp	r5, r3
 8008772:	d101      	bne.n	8008778 <_vfiprintf_r+0x60>
 8008774:	68b5      	ldr	r5, [r6, #8]
 8008776:	e7df      	b.n	8008738 <_vfiprintf_r+0x20>
 8008778:	4b79      	ldr	r3, [pc, #484]	; (8008960 <_vfiprintf_r+0x248>)
 800877a:	429d      	cmp	r5, r3
 800877c:	bf08      	it	eq
 800877e:	68f5      	ldreq	r5, [r6, #12]
 8008780:	e7da      	b.n	8008738 <_vfiprintf_r+0x20>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	0598      	lsls	r0, r3, #22
 8008786:	d4ed      	bmi.n	8008764 <_vfiprintf_r+0x4c>
 8008788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800878a:	f7ff fe63 	bl	8008454 <__retarget_lock_release_recursive>
 800878e:	e7e9      	b.n	8008764 <_vfiprintf_r+0x4c>
 8008790:	2300      	movs	r3, #0
 8008792:	9309      	str	r3, [sp, #36]	; 0x24
 8008794:	2320      	movs	r3, #32
 8008796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800879a:	f8cd 800c 	str.w	r8, [sp, #12]
 800879e:	2330      	movs	r3, #48	; 0x30
 80087a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008964 <_vfiprintf_r+0x24c>
 80087a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087a8:	f04f 0901 	mov.w	r9, #1
 80087ac:	4623      	mov	r3, r4
 80087ae:	469a      	mov	sl, r3
 80087b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b4:	b10a      	cbz	r2, 80087ba <_vfiprintf_r+0xa2>
 80087b6:	2a25      	cmp	r2, #37	; 0x25
 80087b8:	d1f9      	bne.n	80087ae <_vfiprintf_r+0x96>
 80087ba:	ebba 0b04 	subs.w	fp, sl, r4
 80087be:	d00b      	beq.n	80087d8 <_vfiprintf_r+0xc0>
 80087c0:	465b      	mov	r3, fp
 80087c2:	4622      	mov	r2, r4
 80087c4:	4629      	mov	r1, r5
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7ff ff93 	bl	80086f2 <__sfputs_r>
 80087cc:	3001      	adds	r0, #1
 80087ce:	f000 80aa 	beq.w	8008926 <_vfiprintf_r+0x20e>
 80087d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d4:	445a      	add	r2, fp
 80087d6:	9209      	str	r2, [sp, #36]	; 0x24
 80087d8:	f89a 3000 	ldrb.w	r3, [sl]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 80a2 	beq.w	8008926 <_vfiprintf_r+0x20e>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f04f 32ff 	mov.w	r2, #4294967295
 80087e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ec:	f10a 0a01 	add.w	sl, sl, #1
 80087f0:	9304      	str	r3, [sp, #16]
 80087f2:	9307      	str	r3, [sp, #28]
 80087f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087f8:	931a      	str	r3, [sp, #104]	; 0x68
 80087fa:	4654      	mov	r4, sl
 80087fc:	2205      	movs	r2, #5
 80087fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008802:	4858      	ldr	r0, [pc, #352]	; (8008964 <_vfiprintf_r+0x24c>)
 8008804:	f7f7 fcec 	bl	80001e0 <memchr>
 8008808:	9a04      	ldr	r2, [sp, #16]
 800880a:	b9d8      	cbnz	r0, 8008844 <_vfiprintf_r+0x12c>
 800880c:	06d1      	lsls	r1, r2, #27
 800880e:	bf44      	itt	mi
 8008810:	2320      	movmi	r3, #32
 8008812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008816:	0713      	lsls	r3, r2, #28
 8008818:	bf44      	itt	mi
 800881a:	232b      	movmi	r3, #43	; 0x2b
 800881c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008820:	f89a 3000 	ldrb.w	r3, [sl]
 8008824:	2b2a      	cmp	r3, #42	; 0x2a
 8008826:	d015      	beq.n	8008854 <_vfiprintf_r+0x13c>
 8008828:	9a07      	ldr	r2, [sp, #28]
 800882a:	4654      	mov	r4, sl
 800882c:	2000      	movs	r0, #0
 800882e:	f04f 0c0a 	mov.w	ip, #10
 8008832:	4621      	mov	r1, r4
 8008834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008838:	3b30      	subs	r3, #48	; 0x30
 800883a:	2b09      	cmp	r3, #9
 800883c:	d94e      	bls.n	80088dc <_vfiprintf_r+0x1c4>
 800883e:	b1b0      	cbz	r0, 800886e <_vfiprintf_r+0x156>
 8008840:	9207      	str	r2, [sp, #28]
 8008842:	e014      	b.n	800886e <_vfiprintf_r+0x156>
 8008844:	eba0 0308 	sub.w	r3, r0, r8
 8008848:	fa09 f303 	lsl.w	r3, r9, r3
 800884c:	4313      	orrs	r3, r2
 800884e:	9304      	str	r3, [sp, #16]
 8008850:	46a2      	mov	sl, r4
 8008852:	e7d2      	b.n	80087fa <_vfiprintf_r+0xe2>
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	1d19      	adds	r1, r3, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	9103      	str	r1, [sp, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	bfbb      	ittet	lt
 8008860:	425b      	neglt	r3, r3
 8008862:	f042 0202 	orrlt.w	r2, r2, #2
 8008866:	9307      	strge	r3, [sp, #28]
 8008868:	9307      	strlt	r3, [sp, #28]
 800886a:	bfb8      	it	lt
 800886c:	9204      	strlt	r2, [sp, #16]
 800886e:	7823      	ldrb	r3, [r4, #0]
 8008870:	2b2e      	cmp	r3, #46	; 0x2e
 8008872:	d10c      	bne.n	800888e <_vfiprintf_r+0x176>
 8008874:	7863      	ldrb	r3, [r4, #1]
 8008876:	2b2a      	cmp	r3, #42	; 0x2a
 8008878:	d135      	bne.n	80088e6 <_vfiprintf_r+0x1ce>
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	1d1a      	adds	r2, r3, #4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	9203      	str	r2, [sp, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	bfb8      	it	lt
 8008886:	f04f 33ff 	movlt.w	r3, #4294967295
 800888a:	3402      	adds	r4, #2
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008974 <_vfiprintf_r+0x25c>
 8008892:	7821      	ldrb	r1, [r4, #0]
 8008894:	2203      	movs	r2, #3
 8008896:	4650      	mov	r0, sl
 8008898:	f7f7 fca2 	bl	80001e0 <memchr>
 800889c:	b140      	cbz	r0, 80088b0 <_vfiprintf_r+0x198>
 800889e:	2340      	movs	r3, #64	; 0x40
 80088a0:	eba0 000a 	sub.w	r0, r0, sl
 80088a4:	fa03 f000 	lsl.w	r0, r3, r0
 80088a8:	9b04      	ldr	r3, [sp, #16]
 80088aa:	4303      	orrs	r3, r0
 80088ac:	3401      	adds	r4, #1
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b4:	482c      	ldr	r0, [pc, #176]	; (8008968 <_vfiprintf_r+0x250>)
 80088b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ba:	2206      	movs	r2, #6
 80088bc:	f7f7 fc90 	bl	80001e0 <memchr>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d03f      	beq.n	8008944 <_vfiprintf_r+0x22c>
 80088c4:	4b29      	ldr	r3, [pc, #164]	; (800896c <_vfiprintf_r+0x254>)
 80088c6:	bb1b      	cbnz	r3, 8008910 <_vfiprintf_r+0x1f8>
 80088c8:	9b03      	ldr	r3, [sp, #12]
 80088ca:	3307      	adds	r3, #7
 80088cc:	f023 0307 	bic.w	r3, r3, #7
 80088d0:	3308      	adds	r3, #8
 80088d2:	9303      	str	r3, [sp, #12]
 80088d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d6:	443b      	add	r3, r7
 80088d8:	9309      	str	r3, [sp, #36]	; 0x24
 80088da:	e767      	b.n	80087ac <_vfiprintf_r+0x94>
 80088dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80088e0:	460c      	mov	r4, r1
 80088e2:	2001      	movs	r0, #1
 80088e4:	e7a5      	b.n	8008832 <_vfiprintf_r+0x11a>
 80088e6:	2300      	movs	r3, #0
 80088e8:	3401      	adds	r4, #1
 80088ea:	9305      	str	r3, [sp, #20]
 80088ec:	4619      	mov	r1, r3
 80088ee:	f04f 0c0a 	mov.w	ip, #10
 80088f2:	4620      	mov	r0, r4
 80088f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f8:	3a30      	subs	r2, #48	; 0x30
 80088fa:	2a09      	cmp	r2, #9
 80088fc:	d903      	bls.n	8008906 <_vfiprintf_r+0x1ee>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0c5      	beq.n	800888e <_vfiprintf_r+0x176>
 8008902:	9105      	str	r1, [sp, #20]
 8008904:	e7c3      	b.n	800888e <_vfiprintf_r+0x176>
 8008906:	fb0c 2101 	mla	r1, ip, r1, r2
 800890a:	4604      	mov	r4, r0
 800890c:	2301      	movs	r3, #1
 800890e:	e7f0      	b.n	80088f2 <_vfiprintf_r+0x1da>
 8008910:	ab03      	add	r3, sp, #12
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	462a      	mov	r2, r5
 8008916:	4b16      	ldr	r3, [pc, #88]	; (8008970 <_vfiprintf_r+0x258>)
 8008918:	a904      	add	r1, sp, #16
 800891a:	4630      	mov	r0, r6
 800891c:	f000 f8d6 	bl	8008acc <_printf_float>
 8008920:	4607      	mov	r7, r0
 8008922:	1c78      	adds	r0, r7, #1
 8008924:	d1d6      	bne.n	80088d4 <_vfiprintf_r+0x1bc>
 8008926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008928:	07d9      	lsls	r1, r3, #31
 800892a:	d405      	bmi.n	8008938 <_vfiprintf_r+0x220>
 800892c:	89ab      	ldrh	r3, [r5, #12]
 800892e:	059a      	lsls	r2, r3, #22
 8008930:	d402      	bmi.n	8008938 <_vfiprintf_r+0x220>
 8008932:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008934:	f7ff fd8e 	bl	8008454 <__retarget_lock_release_recursive>
 8008938:	89ab      	ldrh	r3, [r5, #12]
 800893a:	065b      	lsls	r3, r3, #25
 800893c:	f53f af12 	bmi.w	8008764 <_vfiprintf_r+0x4c>
 8008940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008942:	e711      	b.n	8008768 <_vfiprintf_r+0x50>
 8008944:	ab03      	add	r3, sp, #12
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	462a      	mov	r2, r5
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <_vfiprintf_r+0x258>)
 800894c:	a904      	add	r1, sp, #16
 800894e:	4630      	mov	r0, r6
 8008950:	f000 fb60 	bl	8009014 <_printf_i>
 8008954:	e7e4      	b.n	8008920 <_vfiprintf_r+0x208>
 8008956:	bf00      	nop
 8008958:	0800f06c 	.word	0x0800f06c
 800895c:	0800f08c 	.word	0x0800f08c
 8008960:	0800f04c 	.word	0x0800f04c
 8008964:	0800f0b0 	.word	0x0800f0b0
 8008968:	0800f0ba 	.word	0x0800f0ba
 800896c:	08008acd 	.word	0x08008acd
 8008970:	080086f3 	.word	0x080086f3
 8008974:	0800f0b6 	.word	0x0800f0b6

08008978 <vfiprintf>:
 8008978:	4613      	mov	r3, r2
 800897a:	460a      	mov	r2, r1
 800897c:	4601      	mov	r1, r0
 800897e:	4802      	ldr	r0, [pc, #8]	; (8008988 <vfiprintf+0x10>)
 8008980:	6800      	ldr	r0, [r0, #0]
 8008982:	f7ff bec9 	b.w	8008718 <_vfiprintf_r>
 8008986:	bf00      	nop
 8008988:	2000000c 	.word	0x2000000c

0800898c <__cvt>:
 800898c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	ec55 4b10 	vmov	r4, r5, d0
 8008994:	2d00      	cmp	r5, #0
 8008996:	460e      	mov	r6, r1
 8008998:	4619      	mov	r1, r3
 800899a:	462b      	mov	r3, r5
 800899c:	bfbb      	ittet	lt
 800899e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089a2:	461d      	movlt	r5, r3
 80089a4:	2300      	movge	r3, #0
 80089a6:	232d      	movlt	r3, #45	; 0x2d
 80089a8:	700b      	strb	r3, [r1, #0]
 80089aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089b0:	4691      	mov	r9, r2
 80089b2:	f023 0820 	bic.w	r8, r3, #32
 80089b6:	bfbc      	itt	lt
 80089b8:	4622      	movlt	r2, r4
 80089ba:	4614      	movlt	r4, r2
 80089bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089c0:	d005      	beq.n	80089ce <__cvt+0x42>
 80089c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80089c6:	d100      	bne.n	80089ca <__cvt+0x3e>
 80089c8:	3601      	adds	r6, #1
 80089ca:	2102      	movs	r1, #2
 80089cc:	e000      	b.n	80089d0 <__cvt+0x44>
 80089ce:	2103      	movs	r1, #3
 80089d0:	ab03      	add	r3, sp, #12
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	ab02      	add	r3, sp, #8
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	ec45 4b10 	vmov	d0, r4, r5
 80089dc:	4653      	mov	r3, sl
 80089de:	4632      	mov	r2, r6
 80089e0:	f001 ff36 	bl	800a850 <_dtoa_r>
 80089e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80089e8:	4607      	mov	r7, r0
 80089ea:	d102      	bne.n	80089f2 <__cvt+0x66>
 80089ec:	f019 0f01 	tst.w	r9, #1
 80089f0:	d022      	beq.n	8008a38 <__cvt+0xac>
 80089f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089f6:	eb07 0906 	add.w	r9, r7, r6
 80089fa:	d110      	bne.n	8008a1e <__cvt+0x92>
 80089fc:	783b      	ldrb	r3, [r7, #0]
 80089fe:	2b30      	cmp	r3, #48	; 0x30
 8008a00:	d10a      	bne.n	8008a18 <__cvt+0x8c>
 8008a02:	2200      	movs	r2, #0
 8008a04:	2300      	movs	r3, #0
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f8 f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a0e:	b918      	cbnz	r0, 8008a18 <__cvt+0x8c>
 8008a10:	f1c6 0601 	rsb	r6, r6, #1
 8008a14:	f8ca 6000 	str.w	r6, [sl]
 8008a18:	f8da 3000 	ldr.w	r3, [sl]
 8008a1c:	4499      	add	r9, r3
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7f8 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a2a:	b108      	cbz	r0, 8008a30 <__cvt+0xa4>
 8008a2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a30:	2230      	movs	r2, #48	; 0x30
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	454b      	cmp	r3, r9
 8008a36:	d307      	bcc.n	8008a48 <__cvt+0xbc>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a3c:	1bdb      	subs	r3, r3, r7
 8008a3e:	4638      	mov	r0, r7
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	b004      	add	sp, #16
 8008a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a48:	1c59      	adds	r1, r3, #1
 8008a4a:	9103      	str	r1, [sp, #12]
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	e7f0      	b.n	8008a32 <__cvt+0xa6>

08008a50 <__exponent>:
 8008a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a52:	4603      	mov	r3, r0
 8008a54:	2900      	cmp	r1, #0
 8008a56:	bfb8      	it	lt
 8008a58:	4249      	neglt	r1, r1
 8008a5a:	f803 2b02 	strb.w	r2, [r3], #2
 8008a5e:	bfb4      	ite	lt
 8008a60:	222d      	movlt	r2, #45	; 0x2d
 8008a62:	222b      	movge	r2, #43	; 0x2b
 8008a64:	2909      	cmp	r1, #9
 8008a66:	7042      	strb	r2, [r0, #1]
 8008a68:	dd2a      	ble.n	8008ac0 <__exponent+0x70>
 8008a6a:	f10d 0407 	add.w	r4, sp, #7
 8008a6e:	46a4      	mov	ip, r4
 8008a70:	270a      	movs	r7, #10
 8008a72:	46a6      	mov	lr, r4
 8008a74:	460a      	mov	r2, r1
 8008a76:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a7a:	fb07 1516 	mls	r5, r7, r6, r1
 8008a7e:	3530      	adds	r5, #48	; 0x30
 8008a80:	2a63      	cmp	r2, #99	; 0x63
 8008a82:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	dcf1      	bgt.n	8008a72 <__exponent+0x22>
 8008a8e:	3130      	adds	r1, #48	; 0x30
 8008a90:	f1ae 0502 	sub.w	r5, lr, #2
 8008a94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a98:	1c44      	adds	r4, r0, #1
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4561      	cmp	r1, ip
 8008a9e:	d30a      	bcc.n	8008ab6 <__exponent+0x66>
 8008aa0:	f10d 0209 	add.w	r2, sp, #9
 8008aa4:	eba2 020e 	sub.w	r2, r2, lr
 8008aa8:	4565      	cmp	r5, ip
 8008aaa:	bf88      	it	hi
 8008aac:	2200      	movhi	r2, #0
 8008aae:	4413      	add	r3, r2
 8008ab0:	1a18      	subs	r0, r3, r0
 8008ab2:	b003      	add	sp, #12
 8008ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008abe:	e7ed      	b.n	8008a9c <__exponent+0x4c>
 8008ac0:	2330      	movs	r3, #48	; 0x30
 8008ac2:	3130      	adds	r1, #48	; 0x30
 8008ac4:	7083      	strb	r3, [r0, #2]
 8008ac6:	70c1      	strb	r1, [r0, #3]
 8008ac8:	1d03      	adds	r3, r0, #4
 8008aca:	e7f1      	b.n	8008ab0 <__exponent+0x60>

08008acc <_printf_float>:
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	ed2d 8b02 	vpush	{d8}
 8008ad4:	b08d      	sub	sp, #52	; 0x34
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008adc:	4616      	mov	r6, r2
 8008ade:	461f      	mov	r7, r3
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	f003 f813 	bl	800bb0c <_localeconv_r>
 8008ae6:	f8d0 a000 	ldr.w	sl, [r0]
 8008aea:	4650      	mov	r0, sl
 8008aec:	f7f7 fb70 	bl	80001d0 <strlen>
 8008af0:	2300      	movs	r3, #0
 8008af2:	930a      	str	r3, [sp, #40]	; 0x28
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	9305      	str	r3, [sp, #20]
 8008af8:	f8d8 3000 	ldr.w	r3, [r8]
 8008afc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b00:	3307      	adds	r3, #7
 8008b02:	f023 0307 	bic.w	r3, r3, #7
 8008b06:	f103 0208 	add.w	r2, r3, #8
 8008b0a:	f8c8 2000 	str.w	r2, [r8]
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b1e:	9307      	str	r3, [sp, #28]
 8008b20:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b24:	ee08 0a10 	vmov	s16, r0
 8008b28:	4b9f      	ldr	r3, [pc, #636]	; (8008da8 <_printf_float+0x2dc>)
 8008b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b32:	f7f7 fffb 	bl	8000b2c <__aeabi_dcmpun>
 8008b36:	bb88      	cbnz	r0, 8008b9c <_printf_float+0xd0>
 8008b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b3c:	4b9a      	ldr	r3, [pc, #616]	; (8008da8 <_printf_float+0x2dc>)
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b42:	f7f7 ffd5 	bl	8000af0 <__aeabi_dcmple>
 8008b46:	bb48      	cbnz	r0, 8008b9c <_printf_float+0xd0>
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	4649      	mov	r1, r9
 8008b50:	f7f7 ffc4 	bl	8000adc <__aeabi_dcmplt>
 8008b54:	b110      	cbz	r0, 8008b5c <_printf_float+0x90>
 8008b56:	232d      	movs	r3, #45	; 0x2d
 8008b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b5c:	4b93      	ldr	r3, [pc, #588]	; (8008dac <_printf_float+0x2e0>)
 8008b5e:	4894      	ldr	r0, [pc, #592]	; (8008db0 <_printf_float+0x2e4>)
 8008b60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b64:	bf94      	ite	ls
 8008b66:	4698      	movls	r8, r3
 8008b68:	4680      	movhi	r8, r0
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	9b05      	ldr	r3, [sp, #20]
 8008b70:	f023 0204 	bic.w	r2, r3, #4
 8008b74:	6022      	str	r2, [r4, #0]
 8008b76:	f04f 0900 	mov.w	r9, #0
 8008b7a:	9700      	str	r7, [sp, #0]
 8008b7c:	4633      	mov	r3, r6
 8008b7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008b80:	4621      	mov	r1, r4
 8008b82:	4628      	mov	r0, r5
 8008b84:	f000 f9d8 	bl	8008f38 <_printf_common>
 8008b88:	3001      	adds	r0, #1
 8008b8a:	f040 8090 	bne.w	8008cae <_printf_float+0x1e2>
 8008b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b92:	b00d      	add	sp, #52	; 0x34
 8008b94:	ecbd 8b02 	vpop	{d8}
 8008b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9c:	4642      	mov	r2, r8
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	f7f7 ffc2 	bl	8000b2c <__aeabi_dcmpun>
 8008ba8:	b140      	cbz	r0, 8008bbc <_printf_float+0xf0>
 8008baa:	464b      	mov	r3, r9
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfbc      	itt	lt
 8008bb0:	232d      	movlt	r3, #45	; 0x2d
 8008bb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bb6:	487f      	ldr	r0, [pc, #508]	; (8008db4 <_printf_float+0x2e8>)
 8008bb8:	4b7f      	ldr	r3, [pc, #508]	; (8008db8 <_printf_float+0x2ec>)
 8008bba:	e7d1      	b.n	8008b60 <_printf_float+0x94>
 8008bbc:	6863      	ldr	r3, [r4, #4]
 8008bbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008bc2:	9206      	str	r2, [sp, #24]
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	d13f      	bne.n	8008c48 <_printf_float+0x17c>
 8008bc8:	2306      	movs	r3, #6
 8008bca:	6063      	str	r3, [r4, #4]
 8008bcc:	9b05      	ldr	r3, [sp, #20]
 8008bce:	6861      	ldr	r1, [r4, #4]
 8008bd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9303      	str	r3, [sp, #12]
 8008bd8:	ab0a      	add	r3, sp, #40	; 0x28
 8008bda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008bde:	ab09      	add	r3, sp, #36	; 0x24
 8008be0:	ec49 8b10 	vmov	d0, r8, r9
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	6022      	str	r2, [r4, #0]
 8008be8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008bec:	4628      	mov	r0, r5
 8008bee:	f7ff fecd 	bl	800898c <__cvt>
 8008bf2:	9b06      	ldr	r3, [sp, #24]
 8008bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bf6:	2b47      	cmp	r3, #71	; 0x47
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	d108      	bne.n	8008c0e <_printf_float+0x142>
 8008bfc:	1cc8      	adds	r0, r1, #3
 8008bfe:	db02      	blt.n	8008c06 <_printf_float+0x13a>
 8008c00:	6863      	ldr	r3, [r4, #4]
 8008c02:	4299      	cmp	r1, r3
 8008c04:	dd41      	ble.n	8008c8a <_printf_float+0x1be>
 8008c06:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c0a:	fa5f fb8b 	uxtb.w	fp, fp
 8008c0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c12:	d820      	bhi.n	8008c56 <_printf_float+0x18a>
 8008c14:	3901      	subs	r1, #1
 8008c16:	465a      	mov	r2, fp
 8008c18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c1c:	9109      	str	r1, [sp, #36]	; 0x24
 8008c1e:	f7ff ff17 	bl	8008a50 <__exponent>
 8008c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c24:	1813      	adds	r3, r2, r0
 8008c26:	2a01      	cmp	r2, #1
 8008c28:	4681      	mov	r9, r0
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	dc02      	bgt.n	8008c34 <_printf_float+0x168>
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	07d2      	lsls	r2, r2, #31
 8008c32:	d501      	bpl.n	8008c38 <_printf_float+0x16c>
 8008c34:	3301      	adds	r3, #1
 8008c36:	6123      	str	r3, [r4, #16]
 8008c38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d09c      	beq.n	8008b7a <_printf_float+0xae>
 8008c40:	232d      	movs	r3, #45	; 0x2d
 8008c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c46:	e798      	b.n	8008b7a <_printf_float+0xae>
 8008c48:	9a06      	ldr	r2, [sp, #24]
 8008c4a:	2a47      	cmp	r2, #71	; 0x47
 8008c4c:	d1be      	bne.n	8008bcc <_printf_float+0x100>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1bc      	bne.n	8008bcc <_printf_float+0x100>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e7b9      	b.n	8008bca <_printf_float+0xfe>
 8008c56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c5a:	d118      	bne.n	8008c8e <_printf_float+0x1c2>
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	6863      	ldr	r3, [r4, #4]
 8008c60:	dd0b      	ble.n	8008c7a <_printf_float+0x1ae>
 8008c62:	6121      	str	r1, [r4, #16]
 8008c64:	b913      	cbnz	r3, 8008c6c <_printf_float+0x1a0>
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	07d0      	lsls	r0, r2, #31
 8008c6a:	d502      	bpl.n	8008c72 <_printf_float+0x1a6>
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	440b      	add	r3, r1
 8008c70:	6123      	str	r3, [r4, #16]
 8008c72:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c74:	f04f 0900 	mov.w	r9, #0
 8008c78:	e7de      	b.n	8008c38 <_printf_float+0x16c>
 8008c7a:	b913      	cbnz	r3, 8008c82 <_printf_float+0x1b6>
 8008c7c:	6822      	ldr	r2, [r4, #0]
 8008c7e:	07d2      	lsls	r2, r2, #31
 8008c80:	d501      	bpl.n	8008c86 <_printf_float+0x1ba>
 8008c82:	3302      	adds	r3, #2
 8008c84:	e7f4      	b.n	8008c70 <_printf_float+0x1a4>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e7f2      	b.n	8008c70 <_printf_float+0x1a4>
 8008c8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c90:	4299      	cmp	r1, r3
 8008c92:	db05      	blt.n	8008ca0 <_printf_float+0x1d4>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	6121      	str	r1, [r4, #16]
 8008c98:	07d8      	lsls	r0, r3, #31
 8008c9a:	d5ea      	bpl.n	8008c72 <_printf_float+0x1a6>
 8008c9c:	1c4b      	adds	r3, r1, #1
 8008c9e:	e7e7      	b.n	8008c70 <_printf_float+0x1a4>
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	bfd4      	ite	le
 8008ca4:	f1c1 0202 	rsble	r2, r1, #2
 8008ca8:	2201      	movgt	r2, #1
 8008caa:	4413      	add	r3, r2
 8008cac:	e7e0      	b.n	8008c70 <_printf_float+0x1a4>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	055a      	lsls	r2, r3, #21
 8008cb2:	d407      	bmi.n	8008cc4 <_printf_float+0x1f8>
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b8      	blx	r7
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d12c      	bne.n	8008d1c <_printf_float+0x250>
 8008cc2:	e764      	b.n	8008b8e <_printf_float+0xc2>
 8008cc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cc8:	f240 80e0 	bls.w	8008e8c <_printf_float+0x3c0>
 8008ccc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f7f7 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d034      	beq.n	8008d46 <_printf_float+0x27a>
 8008cdc:	4a37      	ldr	r2, [pc, #220]	; (8008dbc <_printf_float+0x2f0>)
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	47b8      	blx	r7
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	f43f af51 	beq.w	8008b8e <_printf_float+0xc2>
 8008cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	db02      	blt.n	8008cfa <_printf_float+0x22e>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	07d8      	lsls	r0, r3, #31
 8008cf8:	d510      	bpl.n	8008d1c <_printf_float+0x250>
 8008cfa:	ee18 3a10 	vmov	r3, s16
 8008cfe:	4652      	mov	r2, sl
 8008d00:	4631      	mov	r1, r6
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b8      	blx	r7
 8008d06:	3001      	adds	r0, #1
 8008d08:	f43f af41 	beq.w	8008b8e <_printf_float+0xc2>
 8008d0c:	f04f 0800 	mov.w	r8, #0
 8008d10:	f104 091a 	add.w	r9, r4, #26
 8008d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d16:	3b01      	subs	r3, #1
 8008d18:	4543      	cmp	r3, r8
 8008d1a:	dc09      	bgt.n	8008d30 <_printf_float+0x264>
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	079b      	lsls	r3, r3, #30
 8008d20:	f100 8105 	bmi.w	8008f2e <_printf_float+0x462>
 8008d24:	68e0      	ldr	r0, [r4, #12]
 8008d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d28:	4298      	cmp	r0, r3
 8008d2a:	bfb8      	it	lt
 8008d2c:	4618      	movlt	r0, r3
 8008d2e:	e730      	b.n	8008b92 <_printf_float+0xc6>
 8008d30:	2301      	movs	r3, #1
 8008d32:	464a      	mov	r2, r9
 8008d34:	4631      	mov	r1, r6
 8008d36:	4628      	mov	r0, r5
 8008d38:	47b8      	blx	r7
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	f43f af27 	beq.w	8008b8e <_printf_float+0xc2>
 8008d40:	f108 0801 	add.w	r8, r8, #1
 8008d44:	e7e6      	b.n	8008d14 <_printf_float+0x248>
 8008d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dc39      	bgt.n	8008dc0 <_printf_float+0x2f4>
 8008d4c:	4a1b      	ldr	r2, [pc, #108]	; (8008dbc <_printf_float+0x2f0>)
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4631      	mov	r1, r6
 8008d52:	4628      	mov	r0, r5
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	f43f af19 	beq.w	8008b8e <_printf_float+0xc2>
 8008d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d60:	4313      	orrs	r3, r2
 8008d62:	d102      	bne.n	8008d6a <_printf_float+0x29e>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	07d9      	lsls	r1, r3, #31
 8008d68:	d5d8      	bpl.n	8008d1c <_printf_float+0x250>
 8008d6a:	ee18 3a10 	vmov	r3, s16
 8008d6e:	4652      	mov	r2, sl
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f43f af09 	beq.w	8008b8e <_printf_float+0xc2>
 8008d7c:	f04f 0900 	mov.w	r9, #0
 8008d80:	f104 0a1a 	add.w	sl, r4, #26
 8008d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d86:	425b      	negs	r3, r3
 8008d88:	454b      	cmp	r3, r9
 8008d8a:	dc01      	bgt.n	8008d90 <_printf_float+0x2c4>
 8008d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8e:	e792      	b.n	8008cb6 <_printf_float+0x1ea>
 8008d90:	2301      	movs	r3, #1
 8008d92:	4652      	mov	r2, sl
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f aef7 	beq.w	8008b8e <_printf_float+0xc2>
 8008da0:	f109 0901 	add.w	r9, r9, #1
 8008da4:	e7ee      	b.n	8008d84 <_printf_float+0x2b8>
 8008da6:	bf00      	nop
 8008da8:	7fefffff 	.word	0x7fefffff
 8008dac:	0800f0c1 	.word	0x0800f0c1
 8008db0:	0800f0c5 	.word	0x0800f0c5
 8008db4:	0800f0cd 	.word	0x0800f0cd
 8008db8:	0800f0c9 	.word	0x0800f0c9
 8008dbc:	0800f0d1 	.word	0x0800f0d1
 8008dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	bfa8      	it	ge
 8008dc8:	461a      	movge	r2, r3
 8008dca:	2a00      	cmp	r2, #0
 8008dcc:	4691      	mov	r9, r2
 8008dce:	dc37      	bgt.n	8008e40 <_printf_float+0x374>
 8008dd0:	f04f 0b00 	mov.w	fp, #0
 8008dd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dd8:	f104 021a 	add.w	r2, r4, #26
 8008ddc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dde:	9305      	str	r3, [sp, #20]
 8008de0:	eba3 0309 	sub.w	r3, r3, r9
 8008de4:	455b      	cmp	r3, fp
 8008de6:	dc33      	bgt.n	8008e50 <_printf_float+0x384>
 8008de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dec:	429a      	cmp	r2, r3
 8008dee:	db3b      	blt.n	8008e68 <_printf_float+0x39c>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	07da      	lsls	r2, r3, #31
 8008df4:	d438      	bmi.n	8008e68 <_printf_float+0x39c>
 8008df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df8:	9a05      	ldr	r2, [sp, #20]
 8008dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dfc:	1a9a      	subs	r2, r3, r2
 8008dfe:	eba3 0901 	sub.w	r9, r3, r1
 8008e02:	4591      	cmp	r9, r2
 8008e04:	bfa8      	it	ge
 8008e06:	4691      	movge	r9, r2
 8008e08:	f1b9 0f00 	cmp.w	r9, #0
 8008e0c:	dc35      	bgt.n	8008e7a <_printf_float+0x3ae>
 8008e0e:	f04f 0800 	mov.w	r8, #0
 8008e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e16:	f104 0a1a 	add.w	sl, r4, #26
 8008e1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e1e:	1a9b      	subs	r3, r3, r2
 8008e20:	eba3 0309 	sub.w	r3, r3, r9
 8008e24:	4543      	cmp	r3, r8
 8008e26:	f77f af79 	ble.w	8008d1c <_printf_float+0x250>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	4652      	mov	r2, sl
 8008e2e:	4631      	mov	r1, r6
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b8      	blx	r7
 8008e34:	3001      	adds	r0, #1
 8008e36:	f43f aeaa 	beq.w	8008b8e <_printf_float+0xc2>
 8008e3a:	f108 0801 	add.w	r8, r8, #1
 8008e3e:	e7ec      	b.n	8008e1a <_printf_float+0x34e>
 8008e40:	4613      	mov	r3, r2
 8008e42:	4631      	mov	r1, r6
 8008e44:	4642      	mov	r2, r8
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d1c0      	bne.n	8008dd0 <_printf_float+0x304>
 8008e4e:	e69e      	b.n	8008b8e <_printf_float+0xc2>
 8008e50:	2301      	movs	r3, #1
 8008e52:	4631      	mov	r1, r6
 8008e54:	4628      	mov	r0, r5
 8008e56:	9205      	str	r2, [sp, #20]
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f ae97 	beq.w	8008b8e <_printf_float+0xc2>
 8008e60:	9a05      	ldr	r2, [sp, #20]
 8008e62:	f10b 0b01 	add.w	fp, fp, #1
 8008e66:	e7b9      	b.n	8008ddc <_printf_float+0x310>
 8008e68:	ee18 3a10 	vmov	r3, s16
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	4631      	mov	r1, r6
 8008e70:	4628      	mov	r0, r5
 8008e72:	47b8      	blx	r7
 8008e74:	3001      	adds	r0, #1
 8008e76:	d1be      	bne.n	8008df6 <_printf_float+0x32a>
 8008e78:	e689      	b.n	8008b8e <_printf_float+0xc2>
 8008e7a:	9a05      	ldr	r2, [sp, #20]
 8008e7c:	464b      	mov	r3, r9
 8008e7e:	4442      	add	r2, r8
 8008e80:	4631      	mov	r1, r6
 8008e82:	4628      	mov	r0, r5
 8008e84:	47b8      	blx	r7
 8008e86:	3001      	adds	r0, #1
 8008e88:	d1c1      	bne.n	8008e0e <_printf_float+0x342>
 8008e8a:	e680      	b.n	8008b8e <_printf_float+0xc2>
 8008e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e8e:	2a01      	cmp	r2, #1
 8008e90:	dc01      	bgt.n	8008e96 <_printf_float+0x3ca>
 8008e92:	07db      	lsls	r3, r3, #31
 8008e94:	d538      	bpl.n	8008f08 <_printf_float+0x43c>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4642      	mov	r2, r8
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	47b8      	blx	r7
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f43f ae74 	beq.w	8008b8e <_printf_float+0xc2>
 8008ea6:	ee18 3a10 	vmov	r3, s16
 8008eaa:	4652      	mov	r2, sl
 8008eac:	4631      	mov	r1, r6
 8008eae:	4628      	mov	r0, r5
 8008eb0:	47b8      	blx	r7
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	f43f ae6b 	beq.w	8008b8e <_printf_float+0xc2>
 8008eb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f7f7 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ec4:	b9d8      	cbnz	r0, 8008efe <_printf_float+0x432>
 8008ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec8:	f108 0201 	add.w	r2, r8, #1
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	47b8      	blx	r7
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d10e      	bne.n	8008ef6 <_printf_float+0x42a>
 8008ed8:	e659      	b.n	8008b8e <_printf_float+0xc2>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4652      	mov	r2, sl
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f ae52 	beq.w	8008b8e <_printf_float+0xc2>
 8008eea:	f108 0801 	add.w	r8, r8, #1
 8008eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	4543      	cmp	r3, r8
 8008ef4:	dcf1      	bgt.n	8008eda <_printf_float+0x40e>
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008efc:	e6dc      	b.n	8008cb8 <_printf_float+0x1ec>
 8008efe:	f04f 0800 	mov.w	r8, #0
 8008f02:	f104 0a1a 	add.w	sl, r4, #26
 8008f06:	e7f2      	b.n	8008eee <_printf_float+0x422>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	4642      	mov	r2, r8
 8008f0c:	e7df      	b.n	8008ece <_printf_float+0x402>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	464a      	mov	r2, r9
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	f43f ae38 	beq.w	8008b8e <_printf_float+0xc2>
 8008f1e:	f108 0801 	add.w	r8, r8, #1
 8008f22:	68e3      	ldr	r3, [r4, #12]
 8008f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f26:	1a5b      	subs	r3, r3, r1
 8008f28:	4543      	cmp	r3, r8
 8008f2a:	dcf0      	bgt.n	8008f0e <_printf_float+0x442>
 8008f2c:	e6fa      	b.n	8008d24 <_printf_float+0x258>
 8008f2e:	f04f 0800 	mov.w	r8, #0
 8008f32:	f104 0919 	add.w	r9, r4, #25
 8008f36:	e7f4      	b.n	8008f22 <_printf_float+0x456>

08008f38 <_printf_common>:
 8008f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	4699      	mov	r9, r3
 8008f40:	688a      	ldr	r2, [r1, #8]
 8008f42:	690b      	ldr	r3, [r1, #16]
 8008f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	bfb8      	it	lt
 8008f4c:	4613      	movlt	r3, r2
 8008f4e:	6033      	str	r3, [r6, #0]
 8008f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f54:	4607      	mov	r7, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	b10a      	cbz	r2, 8008f5e <_printf_common+0x26>
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	6033      	str	r3, [r6, #0]
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	0699      	lsls	r1, r3, #26
 8008f62:	bf42      	ittt	mi
 8008f64:	6833      	ldrmi	r3, [r6, #0]
 8008f66:	3302      	addmi	r3, #2
 8008f68:	6033      	strmi	r3, [r6, #0]
 8008f6a:	6825      	ldr	r5, [r4, #0]
 8008f6c:	f015 0506 	ands.w	r5, r5, #6
 8008f70:	d106      	bne.n	8008f80 <_printf_common+0x48>
 8008f72:	f104 0a19 	add.w	sl, r4, #25
 8008f76:	68e3      	ldr	r3, [r4, #12]
 8008f78:	6832      	ldr	r2, [r6, #0]
 8008f7a:	1a9b      	subs	r3, r3, r2
 8008f7c:	42ab      	cmp	r3, r5
 8008f7e:	dc26      	bgt.n	8008fce <_printf_common+0x96>
 8008f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f84:	1e13      	subs	r3, r2, #0
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	bf18      	it	ne
 8008f8a:	2301      	movne	r3, #1
 8008f8c:	0692      	lsls	r2, r2, #26
 8008f8e:	d42b      	bmi.n	8008fe8 <_printf_common+0xb0>
 8008f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f94:	4649      	mov	r1, r9
 8008f96:	4638      	mov	r0, r7
 8008f98:	47c0      	blx	r8
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	d01e      	beq.n	8008fdc <_printf_common+0xa4>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	68e5      	ldr	r5, [r4, #12]
 8008fa2:	6832      	ldr	r2, [r6, #0]
 8008fa4:	f003 0306 	and.w	r3, r3, #6
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	bf08      	it	eq
 8008fac:	1aad      	subeq	r5, r5, r2
 8008fae:	68a3      	ldr	r3, [r4, #8]
 8008fb0:	6922      	ldr	r2, [r4, #16]
 8008fb2:	bf0c      	ite	eq
 8008fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fb8:	2500      	movne	r5, #0
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	bfc4      	itt	gt
 8008fbe:	1a9b      	subgt	r3, r3, r2
 8008fc0:	18ed      	addgt	r5, r5, r3
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	341a      	adds	r4, #26
 8008fc6:	42b5      	cmp	r5, r6
 8008fc8:	d11a      	bne.n	8009000 <_printf_common+0xc8>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e008      	b.n	8008fe0 <_printf_common+0xa8>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	47c0      	blx	r8
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d103      	bne.n	8008fe4 <_printf_common+0xac>
 8008fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe4:	3501      	adds	r5, #1
 8008fe6:	e7c6      	b.n	8008f76 <_printf_common+0x3e>
 8008fe8:	18e1      	adds	r1, r4, r3
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	2030      	movs	r0, #48	; 0x30
 8008fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ff2:	4422      	add	r2, r4
 8008ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ffc:	3302      	adds	r3, #2
 8008ffe:	e7c7      	b.n	8008f90 <_printf_common+0x58>
 8009000:	2301      	movs	r3, #1
 8009002:	4622      	mov	r2, r4
 8009004:	4649      	mov	r1, r9
 8009006:	4638      	mov	r0, r7
 8009008:	47c0      	blx	r8
 800900a:	3001      	adds	r0, #1
 800900c:	d0e6      	beq.n	8008fdc <_printf_common+0xa4>
 800900e:	3601      	adds	r6, #1
 8009010:	e7d9      	b.n	8008fc6 <_printf_common+0x8e>
	...

08009014 <_printf_i>:
 8009014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	7e0f      	ldrb	r7, [r1, #24]
 800901a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800901c:	2f78      	cmp	r7, #120	; 0x78
 800901e:	4691      	mov	r9, r2
 8009020:	4680      	mov	r8, r0
 8009022:	460c      	mov	r4, r1
 8009024:	469a      	mov	sl, r3
 8009026:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800902a:	d807      	bhi.n	800903c <_printf_i+0x28>
 800902c:	2f62      	cmp	r7, #98	; 0x62
 800902e:	d80a      	bhi.n	8009046 <_printf_i+0x32>
 8009030:	2f00      	cmp	r7, #0
 8009032:	f000 80d8 	beq.w	80091e6 <_printf_i+0x1d2>
 8009036:	2f58      	cmp	r7, #88	; 0x58
 8009038:	f000 80a3 	beq.w	8009182 <_printf_i+0x16e>
 800903c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009044:	e03a      	b.n	80090bc <_printf_i+0xa8>
 8009046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800904a:	2b15      	cmp	r3, #21
 800904c:	d8f6      	bhi.n	800903c <_printf_i+0x28>
 800904e:	a101      	add	r1, pc, #4	; (adr r1, 8009054 <_printf_i+0x40>)
 8009050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009054:	080090ad 	.word	0x080090ad
 8009058:	080090c1 	.word	0x080090c1
 800905c:	0800903d 	.word	0x0800903d
 8009060:	0800903d 	.word	0x0800903d
 8009064:	0800903d 	.word	0x0800903d
 8009068:	0800903d 	.word	0x0800903d
 800906c:	080090c1 	.word	0x080090c1
 8009070:	0800903d 	.word	0x0800903d
 8009074:	0800903d 	.word	0x0800903d
 8009078:	0800903d 	.word	0x0800903d
 800907c:	0800903d 	.word	0x0800903d
 8009080:	080091cd 	.word	0x080091cd
 8009084:	080090f1 	.word	0x080090f1
 8009088:	080091af 	.word	0x080091af
 800908c:	0800903d 	.word	0x0800903d
 8009090:	0800903d 	.word	0x0800903d
 8009094:	080091ef 	.word	0x080091ef
 8009098:	0800903d 	.word	0x0800903d
 800909c:	080090f1 	.word	0x080090f1
 80090a0:	0800903d 	.word	0x0800903d
 80090a4:	0800903d 	.word	0x0800903d
 80090a8:	080091b7 	.word	0x080091b7
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	1d1a      	adds	r2, r3, #4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	602a      	str	r2, [r5, #0]
 80090b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090bc:	2301      	movs	r3, #1
 80090be:	e0a3      	b.n	8009208 <_printf_i+0x1f4>
 80090c0:	6820      	ldr	r0, [r4, #0]
 80090c2:	6829      	ldr	r1, [r5, #0]
 80090c4:	0606      	lsls	r6, r0, #24
 80090c6:	f101 0304 	add.w	r3, r1, #4
 80090ca:	d50a      	bpl.n	80090e2 <_printf_i+0xce>
 80090cc:	680e      	ldr	r6, [r1, #0]
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	2e00      	cmp	r6, #0
 80090d2:	da03      	bge.n	80090dc <_printf_i+0xc8>
 80090d4:	232d      	movs	r3, #45	; 0x2d
 80090d6:	4276      	negs	r6, r6
 80090d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090dc:	485e      	ldr	r0, [pc, #376]	; (8009258 <_printf_i+0x244>)
 80090de:	230a      	movs	r3, #10
 80090e0:	e019      	b.n	8009116 <_printf_i+0x102>
 80090e2:	680e      	ldr	r6, [r1, #0]
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090ea:	bf18      	it	ne
 80090ec:	b236      	sxthne	r6, r6
 80090ee:	e7ef      	b.n	80090d0 <_printf_i+0xbc>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	6820      	ldr	r0, [r4, #0]
 80090f4:	1d19      	adds	r1, r3, #4
 80090f6:	6029      	str	r1, [r5, #0]
 80090f8:	0601      	lsls	r1, r0, #24
 80090fa:	d501      	bpl.n	8009100 <_printf_i+0xec>
 80090fc:	681e      	ldr	r6, [r3, #0]
 80090fe:	e002      	b.n	8009106 <_printf_i+0xf2>
 8009100:	0646      	lsls	r6, r0, #25
 8009102:	d5fb      	bpl.n	80090fc <_printf_i+0xe8>
 8009104:	881e      	ldrh	r6, [r3, #0]
 8009106:	4854      	ldr	r0, [pc, #336]	; (8009258 <_printf_i+0x244>)
 8009108:	2f6f      	cmp	r7, #111	; 0x6f
 800910a:	bf0c      	ite	eq
 800910c:	2308      	moveq	r3, #8
 800910e:	230a      	movne	r3, #10
 8009110:	2100      	movs	r1, #0
 8009112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009116:	6865      	ldr	r5, [r4, #4]
 8009118:	60a5      	str	r5, [r4, #8]
 800911a:	2d00      	cmp	r5, #0
 800911c:	bfa2      	ittt	ge
 800911e:	6821      	ldrge	r1, [r4, #0]
 8009120:	f021 0104 	bicge.w	r1, r1, #4
 8009124:	6021      	strge	r1, [r4, #0]
 8009126:	b90e      	cbnz	r6, 800912c <_printf_i+0x118>
 8009128:	2d00      	cmp	r5, #0
 800912a:	d04d      	beq.n	80091c8 <_printf_i+0x1b4>
 800912c:	4615      	mov	r5, r2
 800912e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009132:	fb03 6711 	mls	r7, r3, r1, r6
 8009136:	5dc7      	ldrb	r7, [r0, r7]
 8009138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800913c:	4637      	mov	r7, r6
 800913e:	42bb      	cmp	r3, r7
 8009140:	460e      	mov	r6, r1
 8009142:	d9f4      	bls.n	800912e <_printf_i+0x11a>
 8009144:	2b08      	cmp	r3, #8
 8009146:	d10b      	bne.n	8009160 <_printf_i+0x14c>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	07de      	lsls	r6, r3, #31
 800914c:	d508      	bpl.n	8009160 <_printf_i+0x14c>
 800914e:	6923      	ldr	r3, [r4, #16]
 8009150:	6861      	ldr	r1, [r4, #4]
 8009152:	4299      	cmp	r1, r3
 8009154:	bfde      	ittt	le
 8009156:	2330      	movle	r3, #48	; 0x30
 8009158:	f805 3c01 	strble.w	r3, [r5, #-1]
 800915c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009160:	1b52      	subs	r2, r2, r5
 8009162:	6122      	str	r2, [r4, #16]
 8009164:	f8cd a000 	str.w	sl, [sp]
 8009168:	464b      	mov	r3, r9
 800916a:	aa03      	add	r2, sp, #12
 800916c:	4621      	mov	r1, r4
 800916e:	4640      	mov	r0, r8
 8009170:	f7ff fee2 	bl	8008f38 <_printf_common>
 8009174:	3001      	adds	r0, #1
 8009176:	d14c      	bne.n	8009212 <_printf_i+0x1fe>
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	b004      	add	sp, #16
 800917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009182:	4835      	ldr	r0, [pc, #212]	; (8009258 <_printf_i+0x244>)
 8009184:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009188:	6829      	ldr	r1, [r5, #0]
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009190:	6029      	str	r1, [r5, #0]
 8009192:	061d      	lsls	r5, r3, #24
 8009194:	d514      	bpl.n	80091c0 <_printf_i+0x1ac>
 8009196:	07df      	lsls	r7, r3, #31
 8009198:	bf44      	itt	mi
 800919a:	f043 0320 	orrmi.w	r3, r3, #32
 800919e:	6023      	strmi	r3, [r4, #0]
 80091a0:	b91e      	cbnz	r6, 80091aa <_printf_i+0x196>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	f023 0320 	bic.w	r3, r3, #32
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	2310      	movs	r3, #16
 80091ac:	e7b0      	b.n	8009110 <_printf_i+0xfc>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	f043 0320 	orr.w	r3, r3, #32
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	2378      	movs	r3, #120	; 0x78
 80091b8:	4828      	ldr	r0, [pc, #160]	; (800925c <_printf_i+0x248>)
 80091ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091be:	e7e3      	b.n	8009188 <_printf_i+0x174>
 80091c0:	0659      	lsls	r1, r3, #25
 80091c2:	bf48      	it	mi
 80091c4:	b2b6      	uxthmi	r6, r6
 80091c6:	e7e6      	b.n	8009196 <_printf_i+0x182>
 80091c8:	4615      	mov	r5, r2
 80091ca:	e7bb      	b.n	8009144 <_printf_i+0x130>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	6826      	ldr	r6, [r4, #0]
 80091d0:	6961      	ldr	r1, [r4, #20]
 80091d2:	1d18      	adds	r0, r3, #4
 80091d4:	6028      	str	r0, [r5, #0]
 80091d6:	0635      	lsls	r5, r6, #24
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	d501      	bpl.n	80091e0 <_printf_i+0x1cc>
 80091dc:	6019      	str	r1, [r3, #0]
 80091de:	e002      	b.n	80091e6 <_printf_i+0x1d2>
 80091e0:	0670      	lsls	r0, r6, #25
 80091e2:	d5fb      	bpl.n	80091dc <_printf_i+0x1c8>
 80091e4:	8019      	strh	r1, [r3, #0]
 80091e6:	2300      	movs	r3, #0
 80091e8:	6123      	str	r3, [r4, #16]
 80091ea:	4615      	mov	r5, r2
 80091ec:	e7ba      	b.n	8009164 <_printf_i+0x150>
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	1d1a      	adds	r2, r3, #4
 80091f2:	602a      	str	r2, [r5, #0]
 80091f4:	681d      	ldr	r5, [r3, #0]
 80091f6:	6862      	ldr	r2, [r4, #4]
 80091f8:	2100      	movs	r1, #0
 80091fa:	4628      	mov	r0, r5
 80091fc:	f7f6 fff0 	bl	80001e0 <memchr>
 8009200:	b108      	cbz	r0, 8009206 <_printf_i+0x1f2>
 8009202:	1b40      	subs	r0, r0, r5
 8009204:	6060      	str	r0, [r4, #4]
 8009206:	6863      	ldr	r3, [r4, #4]
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	2300      	movs	r3, #0
 800920c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009210:	e7a8      	b.n	8009164 <_printf_i+0x150>
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	462a      	mov	r2, r5
 8009216:	4649      	mov	r1, r9
 8009218:	4640      	mov	r0, r8
 800921a:	47d0      	blx	sl
 800921c:	3001      	adds	r0, #1
 800921e:	d0ab      	beq.n	8009178 <_printf_i+0x164>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	079b      	lsls	r3, r3, #30
 8009224:	d413      	bmi.n	800924e <_printf_i+0x23a>
 8009226:	68e0      	ldr	r0, [r4, #12]
 8009228:	9b03      	ldr	r3, [sp, #12]
 800922a:	4298      	cmp	r0, r3
 800922c:	bfb8      	it	lt
 800922e:	4618      	movlt	r0, r3
 8009230:	e7a4      	b.n	800917c <_printf_i+0x168>
 8009232:	2301      	movs	r3, #1
 8009234:	4632      	mov	r2, r6
 8009236:	4649      	mov	r1, r9
 8009238:	4640      	mov	r0, r8
 800923a:	47d0      	blx	sl
 800923c:	3001      	adds	r0, #1
 800923e:	d09b      	beq.n	8009178 <_printf_i+0x164>
 8009240:	3501      	adds	r5, #1
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	9903      	ldr	r1, [sp, #12]
 8009246:	1a5b      	subs	r3, r3, r1
 8009248:	42ab      	cmp	r3, r5
 800924a:	dcf2      	bgt.n	8009232 <_printf_i+0x21e>
 800924c:	e7eb      	b.n	8009226 <_printf_i+0x212>
 800924e:	2500      	movs	r5, #0
 8009250:	f104 0619 	add.w	r6, r4, #25
 8009254:	e7f5      	b.n	8009242 <_printf_i+0x22e>
 8009256:	bf00      	nop
 8009258:	0800f0d3 	.word	0x0800f0d3
 800925c:	0800f0e4 	.word	0x0800f0e4

08009260 <_scanf_float>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	b087      	sub	sp, #28
 8009266:	4617      	mov	r7, r2
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	688b      	ldr	r3, [r1, #8]
 800926c:	1e5a      	subs	r2, r3, #1
 800926e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009272:	bf83      	ittte	hi
 8009274:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009278:	195b      	addhi	r3, r3, r5
 800927a:	9302      	strhi	r3, [sp, #8]
 800927c:	2300      	movls	r3, #0
 800927e:	bf86      	itte	hi
 8009280:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009284:	608b      	strhi	r3, [r1, #8]
 8009286:	9302      	strls	r3, [sp, #8]
 8009288:	680b      	ldr	r3, [r1, #0]
 800928a:	468b      	mov	fp, r1
 800928c:	2500      	movs	r5, #0
 800928e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009292:	f84b 3b1c 	str.w	r3, [fp], #28
 8009296:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800929a:	4680      	mov	r8, r0
 800929c:	460c      	mov	r4, r1
 800929e:	465e      	mov	r6, fp
 80092a0:	46aa      	mov	sl, r5
 80092a2:	46a9      	mov	r9, r5
 80092a4:	9501      	str	r5, [sp, #4]
 80092a6:	68a2      	ldr	r2, [r4, #8]
 80092a8:	b152      	cbz	r2, 80092c0 <_scanf_float+0x60>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b4e      	cmp	r3, #78	; 0x4e
 80092b0:	d864      	bhi.n	800937c <_scanf_float+0x11c>
 80092b2:	2b40      	cmp	r3, #64	; 0x40
 80092b4:	d83c      	bhi.n	8009330 <_scanf_float+0xd0>
 80092b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80092ba:	b2c8      	uxtb	r0, r1
 80092bc:	280e      	cmp	r0, #14
 80092be:	d93a      	bls.n	8009336 <_scanf_float+0xd6>
 80092c0:	f1b9 0f00 	cmp.w	r9, #0
 80092c4:	d003      	beq.n	80092ce <_scanf_float+0x6e>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092d2:	f1ba 0f01 	cmp.w	sl, #1
 80092d6:	f200 8113 	bhi.w	8009500 <_scanf_float+0x2a0>
 80092da:	455e      	cmp	r6, fp
 80092dc:	f200 8105 	bhi.w	80094ea <_scanf_float+0x28a>
 80092e0:	2501      	movs	r5, #1
 80092e2:	4628      	mov	r0, r5
 80092e4:	b007      	add	sp, #28
 80092e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80092ee:	2a0d      	cmp	r2, #13
 80092f0:	d8e6      	bhi.n	80092c0 <_scanf_float+0x60>
 80092f2:	a101      	add	r1, pc, #4	; (adr r1, 80092f8 <_scanf_float+0x98>)
 80092f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092f8:	08009437 	.word	0x08009437
 80092fc:	080092c1 	.word	0x080092c1
 8009300:	080092c1 	.word	0x080092c1
 8009304:	080092c1 	.word	0x080092c1
 8009308:	08009497 	.word	0x08009497
 800930c:	0800946f 	.word	0x0800946f
 8009310:	080092c1 	.word	0x080092c1
 8009314:	080092c1 	.word	0x080092c1
 8009318:	08009445 	.word	0x08009445
 800931c:	080092c1 	.word	0x080092c1
 8009320:	080092c1 	.word	0x080092c1
 8009324:	080092c1 	.word	0x080092c1
 8009328:	080092c1 	.word	0x080092c1
 800932c:	080093fd 	.word	0x080093fd
 8009330:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009334:	e7db      	b.n	80092ee <_scanf_float+0x8e>
 8009336:	290e      	cmp	r1, #14
 8009338:	d8c2      	bhi.n	80092c0 <_scanf_float+0x60>
 800933a:	a001      	add	r0, pc, #4	; (adr r0, 8009340 <_scanf_float+0xe0>)
 800933c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009340:	080093ef 	.word	0x080093ef
 8009344:	080092c1 	.word	0x080092c1
 8009348:	080093ef 	.word	0x080093ef
 800934c:	08009483 	.word	0x08009483
 8009350:	080092c1 	.word	0x080092c1
 8009354:	0800939d 	.word	0x0800939d
 8009358:	080093d9 	.word	0x080093d9
 800935c:	080093d9 	.word	0x080093d9
 8009360:	080093d9 	.word	0x080093d9
 8009364:	080093d9 	.word	0x080093d9
 8009368:	080093d9 	.word	0x080093d9
 800936c:	080093d9 	.word	0x080093d9
 8009370:	080093d9 	.word	0x080093d9
 8009374:	080093d9 	.word	0x080093d9
 8009378:	080093d9 	.word	0x080093d9
 800937c:	2b6e      	cmp	r3, #110	; 0x6e
 800937e:	d809      	bhi.n	8009394 <_scanf_float+0x134>
 8009380:	2b60      	cmp	r3, #96	; 0x60
 8009382:	d8b2      	bhi.n	80092ea <_scanf_float+0x8a>
 8009384:	2b54      	cmp	r3, #84	; 0x54
 8009386:	d077      	beq.n	8009478 <_scanf_float+0x218>
 8009388:	2b59      	cmp	r3, #89	; 0x59
 800938a:	d199      	bne.n	80092c0 <_scanf_float+0x60>
 800938c:	2d07      	cmp	r5, #7
 800938e:	d197      	bne.n	80092c0 <_scanf_float+0x60>
 8009390:	2508      	movs	r5, #8
 8009392:	e029      	b.n	80093e8 <_scanf_float+0x188>
 8009394:	2b74      	cmp	r3, #116	; 0x74
 8009396:	d06f      	beq.n	8009478 <_scanf_float+0x218>
 8009398:	2b79      	cmp	r3, #121	; 0x79
 800939a:	e7f6      	b.n	800938a <_scanf_float+0x12a>
 800939c:	6821      	ldr	r1, [r4, #0]
 800939e:	05c8      	lsls	r0, r1, #23
 80093a0:	d51a      	bpl.n	80093d8 <_scanf_float+0x178>
 80093a2:	9b02      	ldr	r3, [sp, #8]
 80093a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80093a8:	6021      	str	r1, [r4, #0]
 80093aa:	f109 0901 	add.w	r9, r9, #1
 80093ae:	b11b      	cbz	r3, 80093b8 <_scanf_float+0x158>
 80093b0:	3b01      	subs	r3, #1
 80093b2:	3201      	adds	r2, #1
 80093b4:	9302      	str	r3, [sp, #8]
 80093b6:	60a2      	str	r2, [r4, #8]
 80093b8:	68a3      	ldr	r3, [r4, #8]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	60a3      	str	r3, [r4, #8]
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	3301      	adds	r3, #1
 80093c2:	6123      	str	r3, [r4, #16]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	607b      	str	r3, [r7, #4]
 80093cc:	f340 8084 	ble.w	80094d8 <_scanf_float+0x278>
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	603b      	str	r3, [r7, #0]
 80093d6:	e766      	b.n	80092a6 <_scanf_float+0x46>
 80093d8:	eb1a 0f05 	cmn.w	sl, r5
 80093dc:	f47f af70 	bne.w	80092c0 <_scanf_float+0x60>
 80093e0:	6822      	ldr	r2, [r4, #0]
 80093e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80093e6:	6022      	str	r2, [r4, #0]
 80093e8:	f806 3b01 	strb.w	r3, [r6], #1
 80093ec:	e7e4      	b.n	80093b8 <_scanf_float+0x158>
 80093ee:	6822      	ldr	r2, [r4, #0]
 80093f0:	0610      	lsls	r0, r2, #24
 80093f2:	f57f af65 	bpl.w	80092c0 <_scanf_float+0x60>
 80093f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093fa:	e7f4      	b.n	80093e6 <_scanf_float+0x186>
 80093fc:	f1ba 0f00 	cmp.w	sl, #0
 8009400:	d10e      	bne.n	8009420 <_scanf_float+0x1c0>
 8009402:	f1b9 0f00 	cmp.w	r9, #0
 8009406:	d10e      	bne.n	8009426 <_scanf_float+0x1c6>
 8009408:	6822      	ldr	r2, [r4, #0]
 800940a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800940e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009412:	d108      	bne.n	8009426 <_scanf_float+0x1c6>
 8009414:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009418:	6022      	str	r2, [r4, #0]
 800941a:	f04f 0a01 	mov.w	sl, #1
 800941e:	e7e3      	b.n	80093e8 <_scanf_float+0x188>
 8009420:	f1ba 0f02 	cmp.w	sl, #2
 8009424:	d055      	beq.n	80094d2 <_scanf_float+0x272>
 8009426:	2d01      	cmp	r5, #1
 8009428:	d002      	beq.n	8009430 <_scanf_float+0x1d0>
 800942a:	2d04      	cmp	r5, #4
 800942c:	f47f af48 	bne.w	80092c0 <_scanf_float+0x60>
 8009430:	3501      	adds	r5, #1
 8009432:	b2ed      	uxtb	r5, r5
 8009434:	e7d8      	b.n	80093e8 <_scanf_float+0x188>
 8009436:	f1ba 0f01 	cmp.w	sl, #1
 800943a:	f47f af41 	bne.w	80092c0 <_scanf_float+0x60>
 800943e:	f04f 0a02 	mov.w	sl, #2
 8009442:	e7d1      	b.n	80093e8 <_scanf_float+0x188>
 8009444:	b97d      	cbnz	r5, 8009466 <_scanf_float+0x206>
 8009446:	f1b9 0f00 	cmp.w	r9, #0
 800944a:	f47f af3c 	bne.w	80092c6 <_scanf_float+0x66>
 800944e:	6822      	ldr	r2, [r4, #0]
 8009450:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009454:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009458:	f47f af39 	bne.w	80092ce <_scanf_float+0x6e>
 800945c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009460:	6022      	str	r2, [r4, #0]
 8009462:	2501      	movs	r5, #1
 8009464:	e7c0      	b.n	80093e8 <_scanf_float+0x188>
 8009466:	2d03      	cmp	r5, #3
 8009468:	d0e2      	beq.n	8009430 <_scanf_float+0x1d0>
 800946a:	2d05      	cmp	r5, #5
 800946c:	e7de      	b.n	800942c <_scanf_float+0x1cc>
 800946e:	2d02      	cmp	r5, #2
 8009470:	f47f af26 	bne.w	80092c0 <_scanf_float+0x60>
 8009474:	2503      	movs	r5, #3
 8009476:	e7b7      	b.n	80093e8 <_scanf_float+0x188>
 8009478:	2d06      	cmp	r5, #6
 800947a:	f47f af21 	bne.w	80092c0 <_scanf_float+0x60>
 800947e:	2507      	movs	r5, #7
 8009480:	e7b2      	b.n	80093e8 <_scanf_float+0x188>
 8009482:	6822      	ldr	r2, [r4, #0]
 8009484:	0591      	lsls	r1, r2, #22
 8009486:	f57f af1b 	bpl.w	80092c0 <_scanf_float+0x60>
 800948a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800948e:	6022      	str	r2, [r4, #0]
 8009490:	f8cd 9004 	str.w	r9, [sp, #4]
 8009494:	e7a8      	b.n	80093e8 <_scanf_float+0x188>
 8009496:	6822      	ldr	r2, [r4, #0]
 8009498:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800949c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80094a0:	d006      	beq.n	80094b0 <_scanf_float+0x250>
 80094a2:	0550      	lsls	r0, r2, #21
 80094a4:	f57f af0c 	bpl.w	80092c0 <_scanf_float+0x60>
 80094a8:	f1b9 0f00 	cmp.w	r9, #0
 80094ac:	f43f af0f 	beq.w	80092ce <_scanf_float+0x6e>
 80094b0:	0591      	lsls	r1, r2, #22
 80094b2:	bf58      	it	pl
 80094b4:	9901      	ldrpl	r1, [sp, #4]
 80094b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094ba:	bf58      	it	pl
 80094bc:	eba9 0101 	subpl.w	r1, r9, r1
 80094c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80094c4:	bf58      	it	pl
 80094c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80094ca:	6022      	str	r2, [r4, #0]
 80094cc:	f04f 0900 	mov.w	r9, #0
 80094d0:	e78a      	b.n	80093e8 <_scanf_float+0x188>
 80094d2:	f04f 0a03 	mov.w	sl, #3
 80094d6:	e787      	b.n	80093e8 <_scanf_float+0x188>
 80094d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80094dc:	4639      	mov	r1, r7
 80094de:	4640      	mov	r0, r8
 80094e0:	4798      	blx	r3
 80094e2:	2800      	cmp	r0, #0
 80094e4:	f43f aedf 	beq.w	80092a6 <_scanf_float+0x46>
 80094e8:	e6ea      	b.n	80092c0 <_scanf_float+0x60>
 80094ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094f2:	463a      	mov	r2, r7
 80094f4:	4640      	mov	r0, r8
 80094f6:	4798      	blx	r3
 80094f8:	6923      	ldr	r3, [r4, #16]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	e6ec      	b.n	80092da <_scanf_float+0x7a>
 8009500:	1e6b      	subs	r3, r5, #1
 8009502:	2b06      	cmp	r3, #6
 8009504:	d825      	bhi.n	8009552 <_scanf_float+0x2f2>
 8009506:	2d02      	cmp	r5, #2
 8009508:	d836      	bhi.n	8009578 <_scanf_float+0x318>
 800950a:	455e      	cmp	r6, fp
 800950c:	f67f aee8 	bls.w	80092e0 <_scanf_float+0x80>
 8009510:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009514:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009518:	463a      	mov	r2, r7
 800951a:	4640      	mov	r0, r8
 800951c:	4798      	blx	r3
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	3b01      	subs	r3, #1
 8009522:	6123      	str	r3, [r4, #16]
 8009524:	e7f1      	b.n	800950a <_scanf_float+0x2aa>
 8009526:	9802      	ldr	r0, [sp, #8]
 8009528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800952c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009530:	9002      	str	r0, [sp, #8]
 8009532:	463a      	mov	r2, r7
 8009534:	4640      	mov	r0, r8
 8009536:	4798      	blx	r3
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	3b01      	subs	r3, #1
 800953c:	6123      	str	r3, [r4, #16]
 800953e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009542:	fa5f fa8a 	uxtb.w	sl, sl
 8009546:	f1ba 0f02 	cmp.w	sl, #2
 800954a:	d1ec      	bne.n	8009526 <_scanf_float+0x2c6>
 800954c:	3d03      	subs	r5, #3
 800954e:	b2ed      	uxtb	r5, r5
 8009550:	1b76      	subs	r6, r6, r5
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	05da      	lsls	r2, r3, #23
 8009556:	d52f      	bpl.n	80095b8 <_scanf_float+0x358>
 8009558:	055b      	lsls	r3, r3, #21
 800955a:	d510      	bpl.n	800957e <_scanf_float+0x31e>
 800955c:	455e      	cmp	r6, fp
 800955e:	f67f aebf 	bls.w	80092e0 <_scanf_float+0x80>
 8009562:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009566:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800956a:	463a      	mov	r2, r7
 800956c:	4640      	mov	r0, r8
 800956e:	4798      	blx	r3
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	3b01      	subs	r3, #1
 8009574:	6123      	str	r3, [r4, #16]
 8009576:	e7f1      	b.n	800955c <_scanf_float+0x2fc>
 8009578:	46aa      	mov	sl, r5
 800957a:	9602      	str	r6, [sp, #8]
 800957c:	e7df      	b.n	800953e <_scanf_float+0x2de>
 800957e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	2965      	cmp	r1, #101	; 0x65
 8009586:	f103 33ff 	add.w	r3, r3, #4294967295
 800958a:	f106 35ff 	add.w	r5, r6, #4294967295
 800958e:	6123      	str	r3, [r4, #16]
 8009590:	d00c      	beq.n	80095ac <_scanf_float+0x34c>
 8009592:	2945      	cmp	r1, #69	; 0x45
 8009594:	d00a      	beq.n	80095ac <_scanf_float+0x34c>
 8009596:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800959a:	463a      	mov	r2, r7
 800959c:	4640      	mov	r0, r8
 800959e:	4798      	blx	r3
 80095a0:	6923      	ldr	r3, [r4, #16]
 80095a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	1eb5      	subs	r5, r6, #2
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095b0:	463a      	mov	r2, r7
 80095b2:	4640      	mov	r0, r8
 80095b4:	4798      	blx	r3
 80095b6:	462e      	mov	r6, r5
 80095b8:	6825      	ldr	r5, [r4, #0]
 80095ba:	f015 0510 	ands.w	r5, r5, #16
 80095be:	d159      	bne.n	8009674 <_scanf_float+0x414>
 80095c0:	7035      	strb	r5, [r6, #0]
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80095c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095cc:	d11b      	bne.n	8009606 <_scanf_float+0x3a6>
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	454b      	cmp	r3, r9
 80095d2:	eba3 0209 	sub.w	r2, r3, r9
 80095d6:	d123      	bne.n	8009620 <_scanf_float+0x3c0>
 80095d8:	2200      	movs	r2, #0
 80095da:	4659      	mov	r1, fp
 80095dc:	4640      	mov	r0, r8
 80095de:	f000 ff35 	bl	800a44c <_strtod_r>
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	f012 0f02 	tst.w	r2, #2
 80095ea:	ec57 6b10 	vmov	r6, r7, d0
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	d021      	beq.n	8009636 <_scanf_float+0x3d6>
 80095f2:	9903      	ldr	r1, [sp, #12]
 80095f4:	1d1a      	adds	r2, r3, #4
 80095f6:	600a      	str	r2, [r1, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	e9c3 6700 	strd	r6, r7, [r3]
 80095fe:	68e3      	ldr	r3, [r4, #12]
 8009600:	3301      	adds	r3, #1
 8009602:	60e3      	str	r3, [r4, #12]
 8009604:	e66d      	b.n	80092e2 <_scanf_float+0x82>
 8009606:	9b04      	ldr	r3, [sp, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0e5      	beq.n	80095d8 <_scanf_float+0x378>
 800960c:	9905      	ldr	r1, [sp, #20]
 800960e:	230a      	movs	r3, #10
 8009610:	462a      	mov	r2, r5
 8009612:	3101      	adds	r1, #1
 8009614:	4640      	mov	r0, r8
 8009616:	f000 ffa1 	bl	800a55c <_strtol_r>
 800961a:	9b04      	ldr	r3, [sp, #16]
 800961c:	9e05      	ldr	r6, [sp, #20]
 800961e:	1ac2      	subs	r2, r0, r3
 8009620:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009624:	429e      	cmp	r6, r3
 8009626:	bf28      	it	cs
 8009628:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800962c:	4912      	ldr	r1, [pc, #72]	; (8009678 <_scanf_float+0x418>)
 800962e:	4630      	mov	r0, r6
 8009630:	f000 f884 	bl	800973c <siprintf>
 8009634:	e7d0      	b.n	80095d8 <_scanf_float+0x378>
 8009636:	9903      	ldr	r1, [sp, #12]
 8009638:	f012 0f04 	tst.w	r2, #4
 800963c:	f103 0204 	add.w	r2, r3, #4
 8009640:	600a      	str	r2, [r1, #0]
 8009642:	d1d9      	bne.n	80095f8 <_scanf_float+0x398>
 8009644:	f8d3 8000 	ldr.w	r8, [r3]
 8009648:	ee10 2a10 	vmov	r2, s0
 800964c:	ee10 0a10 	vmov	r0, s0
 8009650:	463b      	mov	r3, r7
 8009652:	4639      	mov	r1, r7
 8009654:	f7f7 fa6a 	bl	8000b2c <__aeabi_dcmpun>
 8009658:	b128      	cbz	r0, 8009666 <_scanf_float+0x406>
 800965a:	4808      	ldr	r0, [pc, #32]	; (800967c <_scanf_float+0x41c>)
 800965c:	f000 f868 	bl	8009730 <nanf>
 8009660:	ed88 0a00 	vstr	s0, [r8]
 8009664:	e7cb      	b.n	80095fe <_scanf_float+0x39e>
 8009666:	4630      	mov	r0, r6
 8009668:	4639      	mov	r1, r7
 800966a:	f7f7 fabd 	bl	8000be8 <__aeabi_d2f>
 800966e:	f8c8 0000 	str.w	r0, [r8]
 8009672:	e7c4      	b.n	80095fe <_scanf_float+0x39e>
 8009674:	2500      	movs	r5, #0
 8009676:	e634      	b.n	80092e2 <_scanf_float+0x82>
 8009678:	0800f0f5 	.word	0x0800f0f5
 800967c:	0800ef47 	.word	0x0800ef47

08009680 <_putc_r>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	460d      	mov	r5, r1
 8009684:	4614      	mov	r4, r2
 8009686:	4606      	mov	r6, r0
 8009688:	b118      	cbz	r0, 8009692 <_putc_r+0x12>
 800968a:	6983      	ldr	r3, [r0, #24]
 800968c:	b90b      	cbnz	r3, 8009692 <_putc_r+0x12>
 800968e:	f7fe fd5d 	bl	800814c <__sinit>
 8009692:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <_putc_r+0x84>)
 8009694:	429c      	cmp	r4, r3
 8009696:	d124      	bne.n	80096e2 <_putc_r+0x62>
 8009698:	6874      	ldr	r4, [r6, #4]
 800969a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800969c:	07d8      	lsls	r0, r3, #31
 800969e:	d405      	bmi.n	80096ac <_putc_r+0x2c>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	0599      	lsls	r1, r3, #22
 80096a4:	d402      	bmi.n	80096ac <_putc_r+0x2c>
 80096a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a8:	f7fe fed3 	bl	8008452 <__retarget_lock_acquire_recursive>
 80096ac:	68a3      	ldr	r3, [r4, #8]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	60a3      	str	r3, [r4, #8]
 80096b4:	da05      	bge.n	80096c2 <_putc_r+0x42>
 80096b6:	69a2      	ldr	r2, [r4, #24]
 80096b8:	4293      	cmp	r3, r2
 80096ba:	db1c      	blt.n	80096f6 <_putc_r+0x76>
 80096bc:	b2eb      	uxtb	r3, r5
 80096be:	2b0a      	cmp	r3, #10
 80096c0:	d019      	beq.n	80096f6 <_putc_r+0x76>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	1c5a      	adds	r2, r3, #1
 80096c6:	6022      	str	r2, [r4, #0]
 80096c8:	701d      	strb	r5, [r3, #0]
 80096ca:	b2ed      	uxtb	r5, r5
 80096cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ce:	07da      	lsls	r2, r3, #31
 80096d0:	d405      	bmi.n	80096de <_putc_r+0x5e>
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	059b      	lsls	r3, r3, #22
 80096d6:	d402      	bmi.n	80096de <_putc_r+0x5e>
 80096d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096da:	f7fe febb 	bl	8008454 <__retarget_lock_release_recursive>
 80096de:	4628      	mov	r0, r5
 80096e0:	bd70      	pop	{r4, r5, r6, pc}
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <_putc_r+0x88>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	d101      	bne.n	80096ec <_putc_r+0x6c>
 80096e8:	68b4      	ldr	r4, [r6, #8]
 80096ea:	e7d6      	b.n	800969a <_putc_r+0x1a>
 80096ec:	4b07      	ldr	r3, [pc, #28]	; (800970c <_putc_r+0x8c>)
 80096ee:	429c      	cmp	r4, r3
 80096f0:	bf08      	it	eq
 80096f2:	68f4      	ldreq	r4, [r6, #12]
 80096f4:	e7d1      	b.n	800969a <_putc_r+0x1a>
 80096f6:	4629      	mov	r1, r5
 80096f8:	4622      	mov	r2, r4
 80096fa:	4630      	mov	r0, r6
 80096fc:	f000 ff30 	bl	800a560 <__swbuf_r>
 8009700:	4605      	mov	r5, r0
 8009702:	e7e3      	b.n	80096cc <_putc_r+0x4c>
 8009704:	0800f06c 	.word	0x0800f06c
 8009708:	0800f08c 	.word	0x0800f08c
 800970c:	0800f04c 	.word	0x0800f04c

08009710 <_sbrk_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	; (800972c <_sbrk_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f7 fe3c 	bl	8001398 <_sbrk>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_sbrk_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_sbrk_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20000ee8 	.word	0x20000ee8

08009730 <nanf>:
 8009730:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009738 <nanf+0x8>
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	7fc00000 	.word	0x7fc00000

0800973c <siprintf>:
 800973c:	b40e      	push	{r1, r2, r3}
 800973e:	b500      	push	{lr}
 8009740:	b09c      	sub	sp, #112	; 0x70
 8009742:	ab1d      	add	r3, sp, #116	; 0x74
 8009744:	9002      	str	r0, [sp, #8]
 8009746:	9006      	str	r0, [sp, #24]
 8009748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800974c:	4809      	ldr	r0, [pc, #36]	; (8009774 <siprintf+0x38>)
 800974e:	9107      	str	r1, [sp, #28]
 8009750:	9104      	str	r1, [sp, #16]
 8009752:	4909      	ldr	r1, [pc, #36]	; (8009778 <siprintf+0x3c>)
 8009754:	f853 2b04 	ldr.w	r2, [r3], #4
 8009758:	9105      	str	r1, [sp, #20]
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	a902      	add	r1, sp, #8
 8009760:	f002 ffba 	bl	800c6d8 <_svfiprintf_r>
 8009764:	9b02      	ldr	r3, [sp, #8]
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	b01c      	add	sp, #112	; 0x70
 800976c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009770:	b003      	add	sp, #12
 8009772:	4770      	bx	lr
 8009774:	2000000c 	.word	0x2000000c
 8009778:	ffff0208 	.word	0xffff0208

0800977c <__sread>:
 800977c:	b510      	push	{r4, lr}
 800977e:	460c      	mov	r4, r1
 8009780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009784:	f003 f8a8 	bl	800c8d8 <_read_r>
 8009788:	2800      	cmp	r0, #0
 800978a:	bfab      	itete	ge
 800978c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800978e:	89a3      	ldrhlt	r3, [r4, #12]
 8009790:	181b      	addge	r3, r3, r0
 8009792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009796:	bfac      	ite	ge
 8009798:	6563      	strge	r3, [r4, #84]	; 0x54
 800979a:	81a3      	strhlt	r3, [r4, #12]
 800979c:	bd10      	pop	{r4, pc}

0800979e <__swrite>:
 800979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a2:	461f      	mov	r7, r3
 80097a4:	898b      	ldrh	r3, [r1, #12]
 80097a6:	05db      	lsls	r3, r3, #23
 80097a8:	4605      	mov	r5, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	4616      	mov	r6, r2
 80097ae:	d505      	bpl.n	80097bc <__swrite+0x1e>
 80097b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b4:	2302      	movs	r3, #2
 80097b6:	2200      	movs	r2, #0
 80097b8:	f002 f9ac 	bl	800bb14 <_lseek_r>
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097c6:	81a3      	strh	r3, [r4, #12]
 80097c8:	4632      	mov	r2, r6
 80097ca:	463b      	mov	r3, r7
 80097cc:	4628      	mov	r0, r5
 80097ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097d2:	f000 bf17 	b.w	800a604 <_write_r>

080097d6 <__sseek>:
 80097d6:	b510      	push	{r4, lr}
 80097d8:	460c      	mov	r4, r1
 80097da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097de:	f002 f999 	bl	800bb14 <_lseek_r>
 80097e2:	1c43      	adds	r3, r0, #1
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	bf15      	itete	ne
 80097e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80097ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097f2:	81a3      	strheq	r3, [r4, #12]
 80097f4:	bf18      	it	ne
 80097f6:	81a3      	strhne	r3, [r4, #12]
 80097f8:	bd10      	pop	{r4, pc}

080097fa <__sclose>:
 80097fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fe:	f000 bf89 	b.w	800a714 <_close_r>

08009802 <sulp>:
 8009802:	b570      	push	{r4, r5, r6, lr}
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	ec45 4b10 	vmov	d0, r4, r5
 800980c:	4616      	mov	r6, r2
 800980e:	f002 fd89 	bl	800c324 <__ulp>
 8009812:	ec51 0b10 	vmov	r0, r1, d0
 8009816:	b17e      	cbz	r6, 8009838 <sulp+0x36>
 8009818:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800981c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009820:	2b00      	cmp	r3, #0
 8009822:	dd09      	ble.n	8009838 <sulp+0x36>
 8009824:	051b      	lsls	r3, r3, #20
 8009826:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800982a:	2400      	movs	r4, #0
 800982c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009830:	4622      	mov	r2, r4
 8009832:	462b      	mov	r3, r5
 8009834:	f7f6 fee0 	bl	80005f8 <__aeabi_dmul>
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	0000      	movs	r0, r0
 800983c:	0000      	movs	r0, r0
	...

08009840 <_strtod_l>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	ed2d 8b02 	vpush	{d8}
 8009848:	b09d      	sub	sp, #116	; 0x74
 800984a:	461f      	mov	r7, r3
 800984c:	2300      	movs	r3, #0
 800984e:	9318      	str	r3, [sp, #96]	; 0x60
 8009850:	4ba2      	ldr	r3, [pc, #648]	; (8009adc <_strtod_l+0x29c>)
 8009852:	9213      	str	r2, [sp, #76]	; 0x4c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	9305      	str	r3, [sp, #20]
 8009858:	4604      	mov	r4, r0
 800985a:	4618      	mov	r0, r3
 800985c:	4688      	mov	r8, r1
 800985e:	f7f6 fcb7 	bl	80001d0 <strlen>
 8009862:	f04f 0a00 	mov.w	sl, #0
 8009866:	4605      	mov	r5, r0
 8009868:	f04f 0b00 	mov.w	fp, #0
 800986c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009872:	781a      	ldrb	r2, [r3, #0]
 8009874:	2a2b      	cmp	r2, #43	; 0x2b
 8009876:	d04e      	beq.n	8009916 <_strtod_l+0xd6>
 8009878:	d83b      	bhi.n	80098f2 <_strtod_l+0xb2>
 800987a:	2a0d      	cmp	r2, #13
 800987c:	d834      	bhi.n	80098e8 <_strtod_l+0xa8>
 800987e:	2a08      	cmp	r2, #8
 8009880:	d834      	bhi.n	80098ec <_strtod_l+0xac>
 8009882:	2a00      	cmp	r2, #0
 8009884:	d03e      	beq.n	8009904 <_strtod_l+0xc4>
 8009886:	2300      	movs	r3, #0
 8009888:	930a      	str	r3, [sp, #40]	; 0x28
 800988a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800988c:	7833      	ldrb	r3, [r6, #0]
 800988e:	2b30      	cmp	r3, #48	; 0x30
 8009890:	f040 80b0 	bne.w	80099f4 <_strtod_l+0x1b4>
 8009894:	7873      	ldrb	r3, [r6, #1]
 8009896:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800989a:	2b58      	cmp	r3, #88	; 0x58
 800989c:	d168      	bne.n	8009970 <_strtod_l+0x130>
 800989e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	ab18      	add	r3, sp, #96	; 0x60
 80098a4:	9702      	str	r7, [sp, #8]
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4a8d      	ldr	r2, [pc, #564]	; (8009ae0 <_strtod_l+0x2a0>)
 80098aa:	ab19      	add	r3, sp, #100	; 0x64
 80098ac:	a917      	add	r1, sp, #92	; 0x5c
 80098ae:	4620      	mov	r0, r4
 80098b0:	f001 fe24 	bl	800b4fc <__gethex>
 80098b4:	f010 0707 	ands.w	r7, r0, #7
 80098b8:	4605      	mov	r5, r0
 80098ba:	d005      	beq.n	80098c8 <_strtod_l+0x88>
 80098bc:	2f06      	cmp	r7, #6
 80098be:	d12c      	bne.n	800991a <_strtod_l+0xda>
 80098c0:	3601      	adds	r6, #1
 80098c2:	2300      	movs	r3, #0
 80098c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80098c6:	930a      	str	r3, [sp, #40]	; 0x28
 80098c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f040 8590 	bne.w	800a3f0 <_strtod_l+0xbb0>
 80098d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d2:	b1eb      	cbz	r3, 8009910 <_strtod_l+0xd0>
 80098d4:	4652      	mov	r2, sl
 80098d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80098da:	ec43 2b10 	vmov	d0, r2, r3
 80098de:	b01d      	add	sp, #116	; 0x74
 80098e0:	ecbd 8b02 	vpop	{d8}
 80098e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e8:	2a20      	cmp	r2, #32
 80098ea:	d1cc      	bne.n	8009886 <_strtod_l+0x46>
 80098ec:	3301      	adds	r3, #1
 80098ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80098f0:	e7be      	b.n	8009870 <_strtod_l+0x30>
 80098f2:	2a2d      	cmp	r2, #45	; 0x2d
 80098f4:	d1c7      	bne.n	8009886 <_strtod_l+0x46>
 80098f6:	2201      	movs	r2, #1
 80098f8:	920a      	str	r2, [sp, #40]	; 0x28
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80098fe:	785b      	ldrb	r3, [r3, #1]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1c2      	bne.n	800988a <_strtod_l+0x4a>
 8009904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009906:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800990a:	2b00      	cmp	r3, #0
 800990c:	f040 856e 	bne.w	800a3ec <_strtod_l+0xbac>
 8009910:	4652      	mov	r2, sl
 8009912:	465b      	mov	r3, fp
 8009914:	e7e1      	b.n	80098da <_strtod_l+0x9a>
 8009916:	2200      	movs	r2, #0
 8009918:	e7ee      	b.n	80098f8 <_strtod_l+0xb8>
 800991a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800991c:	b13a      	cbz	r2, 800992e <_strtod_l+0xee>
 800991e:	2135      	movs	r1, #53	; 0x35
 8009920:	a81a      	add	r0, sp, #104	; 0x68
 8009922:	f002 fe0a 	bl	800c53a <__copybits>
 8009926:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009928:	4620      	mov	r0, r4
 800992a:	f002 f9c9 	bl	800bcc0 <_Bfree>
 800992e:	3f01      	subs	r7, #1
 8009930:	2f04      	cmp	r7, #4
 8009932:	d806      	bhi.n	8009942 <_strtod_l+0x102>
 8009934:	e8df f007 	tbb	[pc, r7]
 8009938:	1714030a 	.word	0x1714030a
 800993c:	0a          	.byte	0x0a
 800993d:	00          	.byte	0x00
 800993e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009942:	0728      	lsls	r0, r5, #28
 8009944:	d5c0      	bpl.n	80098c8 <_strtod_l+0x88>
 8009946:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800994a:	e7bd      	b.n	80098c8 <_strtod_l+0x88>
 800994c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009950:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009952:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009956:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800995a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800995e:	e7f0      	b.n	8009942 <_strtod_l+0x102>
 8009960:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009ae4 <_strtod_l+0x2a4>
 8009964:	e7ed      	b.n	8009942 <_strtod_l+0x102>
 8009966:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800996a:	f04f 3aff 	mov.w	sl, #4294967295
 800996e:	e7e8      	b.n	8009942 <_strtod_l+0x102>
 8009970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	9217      	str	r2, [sp, #92]	; 0x5c
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	2b30      	cmp	r3, #48	; 0x30
 800997a:	d0f9      	beq.n	8009970 <_strtod_l+0x130>
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0a3      	beq.n	80098c8 <_strtod_l+0x88>
 8009980:	2301      	movs	r3, #1
 8009982:	f04f 0900 	mov.w	r9, #0
 8009986:	9304      	str	r3, [sp, #16]
 8009988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800998a:	9308      	str	r3, [sp, #32]
 800998c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009990:	464f      	mov	r7, r9
 8009992:	220a      	movs	r2, #10
 8009994:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009996:	7806      	ldrb	r6, [r0, #0]
 8009998:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800999c:	b2d9      	uxtb	r1, r3
 800999e:	2909      	cmp	r1, #9
 80099a0:	d92a      	bls.n	80099f8 <_strtod_l+0x1b8>
 80099a2:	9905      	ldr	r1, [sp, #20]
 80099a4:	462a      	mov	r2, r5
 80099a6:	f002 fff7 	bl	800c998 <strncmp>
 80099aa:	b398      	cbz	r0, 8009a14 <_strtod_l+0x1d4>
 80099ac:	2000      	movs	r0, #0
 80099ae:	4632      	mov	r2, r6
 80099b0:	463d      	mov	r5, r7
 80099b2:	9005      	str	r0, [sp, #20]
 80099b4:	4603      	mov	r3, r0
 80099b6:	2a65      	cmp	r2, #101	; 0x65
 80099b8:	d001      	beq.n	80099be <_strtod_l+0x17e>
 80099ba:	2a45      	cmp	r2, #69	; 0x45
 80099bc:	d118      	bne.n	80099f0 <_strtod_l+0x1b0>
 80099be:	b91d      	cbnz	r5, 80099c8 <_strtod_l+0x188>
 80099c0:	9a04      	ldr	r2, [sp, #16]
 80099c2:	4302      	orrs	r2, r0
 80099c4:	d09e      	beq.n	8009904 <_strtod_l+0xc4>
 80099c6:	2500      	movs	r5, #0
 80099c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80099cc:	f108 0201 	add.w	r2, r8, #1
 80099d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80099d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80099d6:	2a2b      	cmp	r2, #43	; 0x2b
 80099d8:	d075      	beq.n	8009ac6 <_strtod_l+0x286>
 80099da:	2a2d      	cmp	r2, #45	; 0x2d
 80099dc:	d07b      	beq.n	8009ad6 <_strtod_l+0x296>
 80099de:	f04f 0c00 	mov.w	ip, #0
 80099e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80099e6:	2909      	cmp	r1, #9
 80099e8:	f240 8082 	bls.w	8009af0 <_strtod_l+0x2b0>
 80099ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80099f0:	2600      	movs	r6, #0
 80099f2:	e09d      	b.n	8009b30 <_strtod_l+0x2f0>
 80099f4:	2300      	movs	r3, #0
 80099f6:	e7c4      	b.n	8009982 <_strtod_l+0x142>
 80099f8:	2f08      	cmp	r7, #8
 80099fa:	bfd8      	it	le
 80099fc:	9907      	ldrle	r1, [sp, #28]
 80099fe:	f100 0001 	add.w	r0, r0, #1
 8009a02:	bfda      	itte	le
 8009a04:	fb02 3301 	mlale	r3, r2, r1, r3
 8009a08:	9307      	strle	r3, [sp, #28]
 8009a0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009a0e:	3701      	adds	r7, #1
 8009a10:	9017      	str	r0, [sp, #92]	; 0x5c
 8009a12:	e7bf      	b.n	8009994 <_strtod_l+0x154>
 8009a14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a16:	195a      	adds	r2, r3, r5
 8009a18:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a1a:	5d5a      	ldrb	r2, [r3, r5]
 8009a1c:	2f00      	cmp	r7, #0
 8009a1e:	d037      	beq.n	8009a90 <_strtod_l+0x250>
 8009a20:	9005      	str	r0, [sp, #20]
 8009a22:	463d      	mov	r5, r7
 8009a24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009a28:	2b09      	cmp	r3, #9
 8009a2a:	d912      	bls.n	8009a52 <_strtod_l+0x212>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e7c2      	b.n	80099b6 <_strtod_l+0x176>
 8009a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a36:	785a      	ldrb	r2, [r3, #1]
 8009a38:	3001      	adds	r0, #1
 8009a3a:	2a30      	cmp	r2, #48	; 0x30
 8009a3c:	d0f8      	beq.n	8009a30 <_strtod_l+0x1f0>
 8009a3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009a42:	2b08      	cmp	r3, #8
 8009a44:	f200 84d9 	bhi.w	800a3fa <_strtod_l+0xbba>
 8009a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a4a:	9005      	str	r0, [sp, #20]
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	9308      	str	r3, [sp, #32]
 8009a50:	4605      	mov	r5, r0
 8009a52:	3a30      	subs	r2, #48	; 0x30
 8009a54:	f100 0301 	add.w	r3, r0, #1
 8009a58:	d014      	beq.n	8009a84 <_strtod_l+0x244>
 8009a5a:	9905      	ldr	r1, [sp, #20]
 8009a5c:	4419      	add	r1, r3
 8009a5e:	9105      	str	r1, [sp, #20]
 8009a60:	462b      	mov	r3, r5
 8009a62:	eb00 0e05 	add.w	lr, r0, r5
 8009a66:	210a      	movs	r1, #10
 8009a68:	4573      	cmp	r3, lr
 8009a6a:	d113      	bne.n	8009a94 <_strtod_l+0x254>
 8009a6c:	182b      	adds	r3, r5, r0
 8009a6e:	2b08      	cmp	r3, #8
 8009a70:	f105 0501 	add.w	r5, r5, #1
 8009a74:	4405      	add	r5, r0
 8009a76:	dc1c      	bgt.n	8009ab2 <_strtod_l+0x272>
 8009a78:	9907      	ldr	r1, [sp, #28]
 8009a7a:	230a      	movs	r3, #10
 8009a7c:	fb03 2301 	mla	r3, r3, r1, r2
 8009a80:	9307      	str	r3, [sp, #28]
 8009a82:	2300      	movs	r3, #0
 8009a84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a86:	1c51      	adds	r1, r2, #1
 8009a88:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a8a:	7852      	ldrb	r2, [r2, #1]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	e7c9      	b.n	8009a24 <_strtod_l+0x1e4>
 8009a90:	4638      	mov	r0, r7
 8009a92:	e7d2      	b.n	8009a3a <_strtod_l+0x1fa>
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	dc04      	bgt.n	8009aa2 <_strtod_l+0x262>
 8009a98:	9e07      	ldr	r6, [sp, #28]
 8009a9a:	434e      	muls	r6, r1
 8009a9c:	9607      	str	r6, [sp, #28]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	e7e2      	b.n	8009a68 <_strtod_l+0x228>
 8009aa2:	f103 0c01 	add.w	ip, r3, #1
 8009aa6:	f1bc 0f10 	cmp.w	ip, #16
 8009aaa:	bfd8      	it	le
 8009aac:	fb01 f909 	mulle.w	r9, r1, r9
 8009ab0:	e7f5      	b.n	8009a9e <_strtod_l+0x25e>
 8009ab2:	2d10      	cmp	r5, #16
 8009ab4:	bfdc      	itt	le
 8009ab6:	230a      	movle	r3, #10
 8009ab8:	fb03 2909 	mlale	r9, r3, r9, r2
 8009abc:	e7e1      	b.n	8009a82 <_strtod_l+0x242>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9305      	str	r3, [sp, #20]
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e77c      	b.n	80099c0 <_strtod_l+0x180>
 8009ac6:	f04f 0c00 	mov.w	ip, #0
 8009aca:	f108 0202 	add.w	r2, r8, #2
 8009ace:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ad0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009ad4:	e785      	b.n	80099e2 <_strtod_l+0x1a2>
 8009ad6:	f04f 0c01 	mov.w	ip, #1
 8009ada:	e7f6      	b.n	8009aca <_strtod_l+0x28a>
 8009adc:	0800f248 	.word	0x0800f248
 8009ae0:	0800f0fc 	.word	0x0800f0fc
 8009ae4:	7ff00000 	.word	0x7ff00000
 8009ae8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009aea:	1c51      	adds	r1, r2, #1
 8009aec:	9117      	str	r1, [sp, #92]	; 0x5c
 8009aee:	7852      	ldrb	r2, [r2, #1]
 8009af0:	2a30      	cmp	r2, #48	; 0x30
 8009af2:	d0f9      	beq.n	8009ae8 <_strtod_l+0x2a8>
 8009af4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009af8:	2908      	cmp	r1, #8
 8009afa:	f63f af79 	bhi.w	80099f0 <_strtod_l+0x1b0>
 8009afe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009b02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b04:	9206      	str	r2, [sp, #24]
 8009b06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b08:	1c51      	adds	r1, r2, #1
 8009b0a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009b0c:	7852      	ldrb	r2, [r2, #1]
 8009b0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009b12:	2e09      	cmp	r6, #9
 8009b14:	d937      	bls.n	8009b86 <_strtod_l+0x346>
 8009b16:	9e06      	ldr	r6, [sp, #24]
 8009b18:	1b89      	subs	r1, r1, r6
 8009b1a:	2908      	cmp	r1, #8
 8009b1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009b20:	dc02      	bgt.n	8009b28 <_strtod_l+0x2e8>
 8009b22:	4576      	cmp	r6, lr
 8009b24:	bfa8      	it	ge
 8009b26:	4676      	movge	r6, lr
 8009b28:	f1bc 0f00 	cmp.w	ip, #0
 8009b2c:	d000      	beq.n	8009b30 <_strtod_l+0x2f0>
 8009b2e:	4276      	negs	r6, r6
 8009b30:	2d00      	cmp	r5, #0
 8009b32:	d14d      	bne.n	8009bd0 <_strtod_l+0x390>
 8009b34:	9904      	ldr	r1, [sp, #16]
 8009b36:	4301      	orrs	r1, r0
 8009b38:	f47f aec6 	bne.w	80098c8 <_strtod_l+0x88>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f47f aee1 	bne.w	8009904 <_strtod_l+0xc4>
 8009b42:	2a69      	cmp	r2, #105	; 0x69
 8009b44:	d027      	beq.n	8009b96 <_strtod_l+0x356>
 8009b46:	dc24      	bgt.n	8009b92 <_strtod_l+0x352>
 8009b48:	2a49      	cmp	r2, #73	; 0x49
 8009b4a:	d024      	beq.n	8009b96 <_strtod_l+0x356>
 8009b4c:	2a4e      	cmp	r2, #78	; 0x4e
 8009b4e:	f47f aed9 	bne.w	8009904 <_strtod_l+0xc4>
 8009b52:	499f      	ldr	r1, [pc, #636]	; (8009dd0 <_strtod_l+0x590>)
 8009b54:	a817      	add	r0, sp, #92	; 0x5c
 8009b56:	f001 ff29 	bl	800b9ac <__match>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	f43f aed2 	beq.w	8009904 <_strtod_l+0xc4>
 8009b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	2b28      	cmp	r3, #40	; 0x28
 8009b66:	d12d      	bne.n	8009bc4 <_strtod_l+0x384>
 8009b68:	499a      	ldr	r1, [pc, #616]	; (8009dd4 <_strtod_l+0x594>)
 8009b6a:	aa1a      	add	r2, sp, #104	; 0x68
 8009b6c:	a817      	add	r0, sp, #92	; 0x5c
 8009b6e:	f001 ff31 	bl	800b9d4 <__hexnan>
 8009b72:	2805      	cmp	r0, #5
 8009b74:	d126      	bne.n	8009bc4 <_strtod_l+0x384>
 8009b76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009b7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009b80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009b84:	e6a0      	b.n	80098c8 <_strtod_l+0x88>
 8009b86:	210a      	movs	r1, #10
 8009b88:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009b8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009b90:	e7b9      	b.n	8009b06 <_strtod_l+0x2c6>
 8009b92:	2a6e      	cmp	r2, #110	; 0x6e
 8009b94:	e7db      	b.n	8009b4e <_strtod_l+0x30e>
 8009b96:	4990      	ldr	r1, [pc, #576]	; (8009dd8 <_strtod_l+0x598>)
 8009b98:	a817      	add	r0, sp, #92	; 0x5c
 8009b9a:	f001 ff07 	bl	800b9ac <__match>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f43f aeb0 	beq.w	8009904 <_strtod_l+0xc4>
 8009ba4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ba6:	498d      	ldr	r1, [pc, #564]	; (8009ddc <_strtod_l+0x59c>)
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	a817      	add	r0, sp, #92	; 0x5c
 8009bac:	9317      	str	r3, [sp, #92]	; 0x5c
 8009bae:	f001 fefd 	bl	800b9ac <__match>
 8009bb2:	b910      	cbnz	r0, 8009bba <_strtod_l+0x37a>
 8009bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009bba:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009dec <_strtod_l+0x5ac>
 8009bbe:	f04f 0a00 	mov.w	sl, #0
 8009bc2:	e681      	b.n	80098c8 <_strtod_l+0x88>
 8009bc4:	4886      	ldr	r0, [pc, #536]	; (8009de0 <_strtod_l+0x5a0>)
 8009bc6:	f002 fe9b 	bl	800c900 <nan>
 8009bca:	ec5b ab10 	vmov	sl, fp, d0
 8009bce:	e67b      	b.n	80098c8 <_strtod_l+0x88>
 8009bd0:	9b05      	ldr	r3, [sp, #20]
 8009bd2:	9807      	ldr	r0, [sp, #28]
 8009bd4:	1af3      	subs	r3, r6, r3
 8009bd6:	2f00      	cmp	r7, #0
 8009bd8:	bf08      	it	eq
 8009bda:	462f      	moveq	r7, r5
 8009bdc:	2d10      	cmp	r5, #16
 8009bde:	9306      	str	r3, [sp, #24]
 8009be0:	46a8      	mov	r8, r5
 8009be2:	bfa8      	it	ge
 8009be4:	f04f 0810 	movge.w	r8, #16
 8009be8:	f7f6 fc8c 	bl	8000504 <__aeabi_ui2d>
 8009bec:	2d09      	cmp	r5, #9
 8009bee:	4682      	mov	sl, r0
 8009bf0:	468b      	mov	fp, r1
 8009bf2:	dd13      	ble.n	8009c1c <_strtod_l+0x3dc>
 8009bf4:	4b7b      	ldr	r3, [pc, #492]	; (8009de4 <_strtod_l+0x5a4>)
 8009bf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009bfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009bfe:	f7f6 fcfb 	bl	80005f8 <__aeabi_dmul>
 8009c02:	4682      	mov	sl, r0
 8009c04:	4648      	mov	r0, r9
 8009c06:	468b      	mov	fp, r1
 8009c08:	f7f6 fc7c 	bl	8000504 <__aeabi_ui2d>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4650      	mov	r0, sl
 8009c12:	4659      	mov	r1, fp
 8009c14:	f7f6 fb3a 	bl	800028c <__adddf3>
 8009c18:	4682      	mov	sl, r0
 8009c1a:	468b      	mov	fp, r1
 8009c1c:	2d0f      	cmp	r5, #15
 8009c1e:	dc38      	bgt.n	8009c92 <_strtod_l+0x452>
 8009c20:	9b06      	ldr	r3, [sp, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f43f ae50 	beq.w	80098c8 <_strtod_l+0x88>
 8009c28:	dd24      	ble.n	8009c74 <_strtod_l+0x434>
 8009c2a:	2b16      	cmp	r3, #22
 8009c2c:	dc0b      	bgt.n	8009c46 <_strtod_l+0x406>
 8009c2e:	496d      	ldr	r1, [pc, #436]	; (8009de4 <_strtod_l+0x5a4>)
 8009c30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c38:	4652      	mov	r2, sl
 8009c3a:	465b      	mov	r3, fp
 8009c3c:	f7f6 fcdc 	bl	80005f8 <__aeabi_dmul>
 8009c40:	4682      	mov	sl, r0
 8009c42:	468b      	mov	fp, r1
 8009c44:	e640      	b.n	80098c8 <_strtod_l+0x88>
 8009c46:	9a06      	ldr	r2, [sp, #24]
 8009c48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	db20      	blt.n	8009c92 <_strtod_l+0x452>
 8009c50:	4c64      	ldr	r4, [pc, #400]	; (8009de4 <_strtod_l+0x5a4>)
 8009c52:	f1c5 050f 	rsb	r5, r5, #15
 8009c56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	465b      	mov	r3, fp
 8009c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c62:	f7f6 fcc9 	bl	80005f8 <__aeabi_dmul>
 8009c66:	9b06      	ldr	r3, [sp, #24]
 8009c68:	1b5d      	subs	r5, r3, r5
 8009c6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c72:	e7e3      	b.n	8009c3c <_strtod_l+0x3fc>
 8009c74:	9b06      	ldr	r3, [sp, #24]
 8009c76:	3316      	adds	r3, #22
 8009c78:	db0b      	blt.n	8009c92 <_strtod_l+0x452>
 8009c7a:	9b05      	ldr	r3, [sp, #20]
 8009c7c:	1b9e      	subs	r6, r3, r6
 8009c7e:	4b59      	ldr	r3, [pc, #356]	; (8009de4 <_strtod_l+0x5a4>)
 8009c80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009c84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c88:	4650      	mov	r0, sl
 8009c8a:	4659      	mov	r1, fp
 8009c8c:	f7f6 fdde 	bl	800084c <__aeabi_ddiv>
 8009c90:	e7d6      	b.n	8009c40 <_strtod_l+0x400>
 8009c92:	9b06      	ldr	r3, [sp, #24]
 8009c94:	eba5 0808 	sub.w	r8, r5, r8
 8009c98:	4498      	add	r8, r3
 8009c9a:	f1b8 0f00 	cmp.w	r8, #0
 8009c9e:	dd74      	ble.n	8009d8a <_strtod_l+0x54a>
 8009ca0:	f018 030f 	ands.w	r3, r8, #15
 8009ca4:	d00a      	beq.n	8009cbc <_strtod_l+0x47c>
 8009ca6:	494f      	ldr	r1, [pc, #316]	; (8009de4 <_strtod_l+0x5a4>)
 8009ca8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cac:	4652      	mov	r2, sl
 8009cae:	465b      	mov	r3, fp
 8009cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	4682      	mov	sl, r0
 8009cba:	468b      	mov	fp, r1
 8009cbc:	f038 080f 	bics.w	r8, r8, #15
 8009cc0:	d04f      	beq.n	8009d62 <_strtod_l+0x522>
 8009cc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009cc6:	dd22      	ble.n	8009d0e <_strtod_l+0x4ce>
 8009cc8:	2500      	movs	r5, #0
 8009cca:	462e      	mov	r6, r5
 8009ccc:	9507      	str	r5, [sp, #28]
 8009cce:	9505      	str	r5, [sp, #20]
 8009cd0:	2322      	movs	r3, #34	; 0x22
 8009cd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009dec <_strtod_l+0x5ac>
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	f04f 0a00 	mov.w	sl, #0
 8009cdc:	9b07      	ldr	r3, [sp, #28]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f43f adf2 	beq.w	80098c8 <_strtod_l+0x88>
 8009ce4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f001 ffea 	bl	800bcc0 <_Bfree>
 8009cec:	9905      	ldr	r1, [sp, #20]
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f001 ffe6 	bl	800bcc0 <_Bfree>
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f001 ffe2 	bl	800bcc0 <_Bfree>
 8009cfc:	9907      	ldr	r1, [sp, #28]
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f001 ffde 	bl	800bcc0 <_Bfree>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4620      	mov	r0, r4
 8009d08:	f001 ffda 	bl	800bcc0 <_Bfree>
 8009d0c:	e5dc      	b.n	80098c8 <_strtod_l+0x88>
 8009d0e:	4b36      	ldr	r3, [pc, #216]	; (8009de8 <_strtod_l+0x5a8>)
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	2300      	movs	r3, #0
 8009d14:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009d18:	4650      	mov	r0, sl
 8009d1a:	4659      	mov	r1, fp
 8009d1c:	4699      	mov	r9, r3
 8009d1e:	f1b8 0f01 	cmp.w	r8, #1
 8009d22:	dc21      	bgt.n	8009d68 <_strtod_l+0x528>
 8009d24:	b10b      	cbz	r3, 8009d2a <_strtod_l+0x4ea>
 8009d26:	4682      	mov	sl, r0
 8009d28:	468b      	mov	fp, r1
 8009d2a:	4b2f      	ldr	r3, [pc, #188]	; (8009de8 <_strtod_l+0x5a8>)
 8009d2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009d30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009d34:	4652      	mov	r2, sl
 8009d36:	465b      	mov	r3, fp
 8009d38:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009d3c:	f7f6 fc5c 	bl	80005f8 <__aeabi_dmul>
 8009d40:	4b2a      	ldr	r3, [pc, #168]	; (8009dec <_strtod_l+0x5ac>)
 8009d42:	460a      	mov	r2, r1
 8009d44:	400b      	ands	r3, r1
 8009d46:	492a      	ldr	r1, [pc, #168]	; (8009df0 <_strtod_l+0x5b0>)
 8009d48:	428b      	cmp	r3, r1
 8009d4a:	4682      	mov	sl, r0
 8009d4c:	d8bc      	bhi.n	8009cc8 <_strtod_l+0x488>
 8009d4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009d52:	428b      	cmp	r3, r1
 8009d54:	bf86      	itte	hi
 8009d56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009df4 <_strtod_l+0x5b4>
 8009d5a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009d5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009d62:	2300      	movs	r3, #0
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	e084      	b.n	8009e72 <_strtod_l+0x632>
 8009d68:	f018 0f01 	tst.w	r8, #1
 8009d6c:	d005      	beq.n	8009d7a <_strtod_l+0x53a>
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fc40 	bl	80005f8 <__aeabi_dmul>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	9a04      	ldr	r2, [sp, #16]
 8009d7c:	3208      	adds	r2, #8
 8009d7e:	f109 0901 	add.w	r9, r9, #1
 8009d82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d86:	9204      	str	r2, [sp, #16]
 8009d88:	e7c9      	b.n	8009d1e <_strtod_l+0x4de>
 8009d8a:	d0ea      	beq.n	8009d62 <_strtod_l+0x522>
 8009d8c:	f1c8 0800 	rsb	r8, r8, #0
 8009d90:	f018 020f 	ands.w	r2, r8, #15
 8009d94:	d00a      	beq.n	8009dac <_strtod_l+0x56c>
 8009d96:	4b13      	ldr	r3, [pc, #76]	; (8009de4 <_strtod_l+0x5a4>)
 8009d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d9c:	4650      	mov	r0, sl
 8009d9e:	4659      	mov	r1, fp
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	f7f6 fd52 	bl	800084c <__aeabi_ddiv>
 8009da8:	4682      	mov	sl, r0
 8009daa:	468b      	mov	fp, r1
 8009dac:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009db0:	d0d7      	beq.n	8009d62 <_strtod_l+0x522>
 8009db2:	f1b8 0f1f 	cmp.w	r8, #31
 8009db6:	dd1f      	ble.n	8009df8 <_strtod_l+0x5b8>
 8009db8:	2500      	movs	r5, #0
 8009dba:	462e      	mov	r6, r5
 8009dbc:	9507      	str	r5, [sp, #28]
 8009dbe:	9505      	str	r5, [sp, #20]
 8009dc0:	2322      	movs	r3, #34	; 0x22
 8009dc2:	f04f 0a00 	mov.w	sl, #0
 8009dc6:	f04f 0b00 	mov.w	fp, #0
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	e786      	b.n	8009cdc <_strtod_l+0x49c>
 8009dce:	bf00      	nop
 8009dd0:	0800f0ce 	.word	0x0800f0ce
 8009dd4:	0800f110 	.word	0x0800f110
 8009dd8:	0800f0c6 	.word	0x0800f0c6
 8009ddc:	0800f153 	.word	0x0800f153
 8009de0:	0800ef47 	.word	0x0800ef47
 8009de4:	0800f2e0 	.word	0x0800f2e0
 8009de8:	0800f2b8 	.word	0x0800f2b8
 8009dec:	7ff00000 	.word	0x7ff00000
 8009df0:	7ca00000 	.word	0x7ca00000
 8009df4:	7fefffff 	.word	0x7fefffff
 8009df8:	f018 0310 	ands.w	r3, r8, #16
 8009dfc:	bf18      	it	ne
 8009dfe:	236a      	movne	r3, #106	; 0x6a
 8009e00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a1b0 <_strtod_l+0x970>
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	4650      	mov	r0, sl
 8009e08:	4659      	mov	r1, fp
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f018 0f01 	tst.w	r8, #1
 8009e10:	d004      	beq.n	8009e1c <_strtod_l+0x5dc>
 8009e12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009e16:	f7f6 fbef 	bl	80005f8 <__aeabi_dmul>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009e20:	f109 0908 	add.w	r9, r9, #8
 8009e24:	d1f2      	bne.n	8009e0c <_strtod_l+0x5cc>
 8009e26:	b10b      	cbz	r3, 8009e2c <_strtod_l+0x5ec>
 8009e28:	4682      	mov	sl, r0
 8009e2a:	468b      	mov	fp, r1
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	b1c3      	cbz	r3, 8009e62 <_strtod_l+0x622>
 8009e30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009e34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	4659      	mov	r1, fp
 8009e3c:	dd11      	ble.n	8009e62 <_strtod_l+0x622>
 8009e3e:	2b1f      	cmp	r3, #31
 8009e40:	f340 8124 	ble.w	800a08c <_strtod_l+0x84c>
 8009e44:	2b34      	cmp	r3, #52	; 0x34
 8009e46:	bfde      	ittt	le
 8009e48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009e4c:	f04f 33ff 	movle.w	r3, #4294967295
 8009e50:	fa03 f202 	lslle.w	r2, r3, r2
 8009e54:	f04f 0a00 	mov.w	sl, #0
 8009e58:	bfcc      	ite	gt
 8009e5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009e5e:	ea02 0b01 	andle.w	fp, r2, r1
 8009e62:	2200      	movs	r2, #0
 8009e64:	2300      	movs	r3, #0
 8009e66:	4650      	mov	r0, sl
 8009e68:	4659      	mov	r1, fp
 8009e6a:	f7f6 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d1a2      	bne.n	8009db8 <_strtod_l+0x578>
 8009e72:	9b07      	ldr	r3, [sp, #28]
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	9908      	ldr	r1, [sp, #32]
 8009e78:	462b      	mov	r3, r5
 8009e7a:	463a      	mov	r2, r7
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f001 ff87 	bl	800bd90 <__s2b>
 8009e82:	9007      	str	r0, [sp, #28]
 8009e84:	2800      	cmp	r0, #0
 8009e86:	f43f af1f 	beq.w	8009cc8 <_strtod_l+0x488>
 8009e8a:	9b05      	ldr	r3, [sp, #20]
 8009e8c:	1b9e      	subs	r6, r3, r6
 8009e8e:	9b06      	ldr	r3, [sp, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	bfb4      	ite	lt
 8009e94:	4633      	movlt	r3, r6
 8009e96:	2300      	movge	r3, #0
 8009e98:	930c      	str	r3, [sp, #48]	; 0x30
 8009e9a:	9b06      	ldr	r3, [sp, #24]
 8009e9c:	2500      	movs	r5, #0
 8009e9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8009ea4:	462e      	mov	r6, r5
 8009ea6:	9b07      	ldr	r3, [sp, #28]
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	6859      	ldr	r1, [r3, #4]
 8009eac:	f001 fec8 	bl	800bc40 <_Balloc>
 8009eb0:	9005      	str	r0, [sp, #20]
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f43f af0c 	beq.w	8009cd0 <_strtod_l+0x490>
 8009eb8:	9b07      	ldr	r3, [sp, #28]
 8009eba:	691a      	ldr	r2, [r3, #16]
 8009ebc:	3202      	adds	r2, #2
 8009ebe:	f103 010c 	add.w	r1, r3, #12
 8009ec2:	0092      	lsls	r2, r2, #2
 8009ec4:	300c      	adds	r0, #12
 8009ec6:	f7fe fad7 	bl	8008478 <memcpy>
 8009eca:	ec4b ab10 	vmov	d0, sl, fp
 8009ece:	aa1a      	add	r2, sp, #104	; 0x68
 8009ed0:	a919      	add	r1, sp, #100	; 0x64
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f002 faa2 	bl	800c41c <__d2b>
 8009ed8:	ec4b ab18 	vmov	d8, sl, fp
 8009edc:	9018      	str	r0, [sp, #96]	; 0x60
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f43f aef6 	beq.w	8009cd0 <_strtod_l+0x490>
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f001 ffec 	bl	800bec4 <__i2b>
 8009eec:	4606      	mov	r6, r0
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f43f aeee 	beq.w	8009cd0 <_strtod_l+0x490>
 8009ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ef6:	9904      	ldr	r1, [sp, #16]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bfab      	itete	ge
 8009efc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009efe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009f00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009f02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009f06:	bfac      	ite	ge
 8009f08:	eb03 0902 	addge.w	r9, r3, r2
 8009f0c:	1ad7      	sublt	r7, r2, r3
 8009f0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f10:	eba3 0801 	sub.w	r8, r3, r1
 8009f14:	4490      	add	r8, r2
 8009f16:	4ba1      	ldr	r3, [pc, #644]	; (800a19c <_strtod_l+0x95c>)
 8009f18:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f1c:	4598      	cmp	r8, r3
 8009f1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f22:	f280 80c7 	bge.w	800a0b4 <_strtod_l+0x874>
 8009f26:	eba3 0308 	sub.w	r3, r3, r8
 8009f2a:	2b1f      	cmp	r3, #31
 8009f2c:	eba2 0203 	sub.w	r2, r2, r3
 8009f30:	f04f 0101 	mov.w	r1, #1
 8009f34:	f300 80b1 	bgt.w	800a09a <_strtod_l+0x85a>
 8009f38:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9308      	str	r3, [sp, #32]
 8009f42:	eb09 0802 	add.w	r8, r9, r2
 8009f46:	9b04      	ldr	r3, [sp, #16]
 8009f48:	45c1      	cmp	r9, r8
 8009f4a:	4417      	add	r7, r2
 8009f4c:	441f      	add	r7, r3
 8009f4e:	464b      	mov	r3, r9
 8009f50:	bfa8      	it	ge
 8009f52:	4643      	movge	r3, r8
 8009f54:	42bb      	cmp	r3, r7
 8009f56:	bfa8      	it	ge
 8009f58:	463b      	movge	r3, r7
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bfc2      	ittt	gt
 8009f5e:	eba8 0803 	subgt.w	r8, r8, r3
 8009f62:	1aff      	subgt	r7, r7, r3
 8009f64:	eba9 0903 	subgt.w	r9, r9, r3
 8009f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	dd17      	ble.n	8009f9e <_strtod_l+0x75e>
 8009f6e:	4631      	mov	r1, r6
 8009f70:	461a      	mov	r2, r3
 8009f72:	4620      	mov	r0, r4
 8009f74:	f002 f866 	bl	800c044 <__pow5mult>
 8009f78:	4606      	mov	r6, r0
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	f43f aea8 	beq.w	8009cd0 <_strtod_l+0x490>
 8009f80:	4601      	mov	r1, r0
 8009f82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f84:	4620      	mov	r0, r4
 8009f86:	f001 ffb3 	bl	800bef0 <__multiply>
 8009f8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	f43f ae9f 	beq.w	8009cd0 <_strtod_l+0x490>
 8009f92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f94:	4620      	mov	r0, r4
 8009f96:	f001 fe93 	bl	800bcc0 <_Bfree>
 8009f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f9c:	9318      	str	r3, [sp, #96]	; 0x60
 8009f9e:	f1b8 0f00 	cmp.w	r8, #0
 8009fa2:	f300 808c 	bgt.w	800a0be <_strtod_l+0x87e>
 8009fa6:	9b06      	ldr	r3, [sp, #24]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dd08      	ble.n	8009fbe <_strtod_l+0x77e>
 8009fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fae:	9905      	ldr	r1, [sp, #20]
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f002 f847 	bl	800c044 <__pow5mult>
 8009fb6:	9005      	str	r0, [sp, #20]
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	f43f ae89 	beq.w	8009cd0 <_strtod_l+0x490>
 8009fbe:	2f00      	cmp	r7, #0
 8009fc0:	dd08      	ble.n	8009fd4 <_strtod_l+0x794>
 8009fc2:	9905      	ldr	r1, [sp, #20]
 8009fc4:	463a      	mov	r2, r7
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f002 f896 	bl	800c0f8 <__lshift>
 8009fcc:	9005      	str	r0, [sp, #20]
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	f43f ae7e 	beq.w	8009cd0 <_strtod_l+0x490>
 8009fd4:	f1b9 0f00 	cmp.w	r9, #0
 8009fd8:	dd08      	ble.n	8009fec <_strtod_l+0x7ac>
 8009fda:	4631      	mov	r1, r6
 8009fdc:	464a      	mov	r2, r9
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f002 f88a 	bl	800c0f8 <__lshift>
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f43f ae72 	beq.w	8009cd0 <_strtod_l+0x490>
 8009fec:	9a05      	ldr	r2, [sp, #20]
 8009fee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f002 f90d 	bl	800c210 <__mdiff>
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	f43f ae69 	beq.w	8009cd0 <_strtod_l+0x490>
 8009ffe:	68c3      	ldr	r3, [r0, #12]
 800a000:	930b      	str	r3, [sp, #44]	; 0x2c
 800a002:	2300      	movs	r3, #0
 800a004:	60c3      	str	r3, [r0, #12]
 800a006:	4631      	mov	r1, r6
 800a008:	f002 f8e6 	bl	800c1d8 <__mcmp>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	da60      	bge.n	800a0d2 <_strtod_l+0x892>
 800a010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a012:	ea53 030a 	orrs.w	r3, r3, sl
 800a016:	f040 8082 	bne.w	800a11e <_strtod_l+0x8de>
 800a01a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d17d      	bne.n	800a11e <_strtod_l+0x8de>
 800a022:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a026:	0d1b      	lsrs	r3, r3, #20
 800a028:	051b      	lsls	r3, r3, #20
 800a02a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a02e:	d976      	bls.n	800a11e <_strtod_l+0x8de>
 800a030:	696b      	ldr	r3, [r5, #20]
 800a032:	b913      	cbnz	r3, 800a03a <_strtod_l+0x7fa>
 800a034:	692b      	ldr	r3, [r5, #16]
 800a036:	2b01      	cmp	r3, #1
 800a038:	dd71      	ble.n	800a11e <_strtod_l+0x8de>
 800a03a:	4629      	mov	r1, r5
 800a03c:	2201      	movs	r2, #1
 800a03e:	4620      	mov	r0, r4
 800a040:	f002 f85a 	bl	800c0f8 <__lshift>
 800a044:	4631      	mov	r1, r6
 800a046:	4605      	mov	r5, r0
 800a048:	f002 f8c6 	bl	800c1d8 <__mcmp>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	dd66      	ble.n	800a11e <_strtod_l+0x8de>
 800a050:	9904      	ldr	r1, [sp, #16]
 800a052:	4a53      	ldr	r2, [pc, #332]	; (800a1a0 <_strtod_l+0x960>)
 800a054:	465b      	mov	r3, fp
 800a056:	2900      	cmp	r1, #0
 800a058:	f000 8081 	beq.w	800a15e <_strtod_l+0x91e>
 800a05c:	ea02 010b 	and.w	r1, r2, fp
 800a060:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a064:	dc7b      	bgt.n	800a15e <_strtod_l+0x91e>
 800a066:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a06a:	f77f aea9 	ble.w	8009dc0 <_strtod_l+0x580>
 800a06e:	4b4d      	ldr	r3, [pc, #308]	; (800a1a4 <_strtod_l+0x964>)
 800a070:	4650      	mov	r0, sl
 800a072:	4659      	mov	r1, fp
 800a074:	2200      	movs	r2, #0
 800a076:	f7f6 fabf 	bl	80005f8 <__aeabi_dmul>
 800a07a:	460b      	mov	r3, r1
 800a07c:	4303      	orrs	r3, r0
 800a07e:	bf08      	it	eq
 800a080:	2322      	moveq	r3, #34	; 0x22
 800a082:	4682      	mov	sl, r0
 800a084:	468b      	mov	fp, r1
 800a086:	bf08      	it	eq
 800a088:	6023      	streq	r3, [r4, #0]
 800a08a:	e62b      	b.n	8009ce4 <_strtod_l+0x4a4>
 800a08c:	f04f 32ff 	mov.w	r2, #4294967295
 800a090:	fa02 f303 	lsl.w	r3, r2, r3
 800a094:	ea03 0a0a 	and.w	sl, r3, sl
 800a098:	e6e3      	b.n	8009e62 <_strtod_l+0x622>
 800a09a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a09e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a0a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a0a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a0aa:	fa01 f308 	lsl.w	r3, r1, r8
 800a0ae:	9308      	str	r3, [sp, #32]
 800a0b0:	910d      	str	r1, [sp, #52]	; 0x34
 800a0b2:	e746      	b.n	8009f42 <_strtod_l+0x702>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9308      	str	r3, [sp, #32]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a0bc:	e741      	b.n	8009f42 <_strtod_l+0x702>
 800a0be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f002 f818 	bl	800c0f8 <__lshift>
 800a0c8:	9018      	str	r0, [sp, #96]	; 0x60
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	f47f af6b 	bne.w	8009fa6 <_strtod_l+0x766>
 800a0d0:	e5fe      	b.n	8009cd0 <_strtod_l+0x490>
 800a0d2:	465f      	mov	r7, fp
 800a0d4:	d16e      	bne.n	800a1b4 <_strtod_l+0x974>
 800a0d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0dc:	b342      	cbz	r2, 800a130 <_strtod_l+0x8f0>
 800a0de:	4a32      	ldr	r2, [pc, #200]	; (800a1a8 <_strtod_l+0x968>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d128      	bne.n	800a136 <_strtod_l+0x8f6>
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	4651      	mov	r1, sl
 800a0e8:	b1eb      	cbz	r3, 800a126 <_strtod_l+0x8e6>
 800a0ea:	4b2d      	ldr	r3, [pc, #180]	; (800a1a0 <_strtod_l+0x960>)
 800a0ec:	403b      	ands	r3, r7
 800a0ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f6:	d819      	bhi.n	800a12c <_strtod_l+0x8ec>
 800a0f8:	0d1b      	lsrs	r3, r3, #20
 800a0fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a102:	4299      	cmp	r1, r3
 800a104:	d117      	bne.n	800a136 <_strtod_l+0x8f6>
 800a106:	4b29      	ldr	r3, [pc, #164]	; (800a1ac <_strtod_l+0x96c>)
 800a108:	429f      	cmp	r7, r3
 800a10a:	d102      	bne.n	800a112 <_strtod_l+0x8d2>
 800a10c:	3101      	adds	r1, #1
 800a10e:	f43f addf 	beq.w	8009cd0 <_strtod_l+0x490>
 800a112:	4b23      	ldr	r3, [pc, #140]	; (800a1a0 <_strtod_l+0x960>)
 800a114:	403b      	ands	r3, r7
 800a116:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a11a:	f04f 0a00 	mov.w	sl, #0
 800a11e:	9b04      	ldr	r3, [sp, #16]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1a4      	bne.n	800a06e <_strtod_l+0x82e>
 800a124:	e5de      	b.n	8009ce4 <_strtod_l+0x4a4>
 800a126:	f04f 33ff 	mov.w	r3, #4294967295
 800a12a:	e7ea      	b.n	800a102 <_strtod_l+0x8c2>
 800a12c:	4613      	mov	r3, r2
 800a12e:	e7e8      	b.n	800a102 <_strtod_l+0x8c2>
 800a130:	ea53 030a 	orrs.w	r3, r3, sl
 800a134:	d08c      	beq.n	800a050 <_strtod_l+0x810>
 800a136:	9b08      	ldr	r3, [sp, #32]
 800a138:	b1db      	cbz	r3, 800a172 <_strtod_l+0x932>
 800a13a:	423b      	tst	r3, r7
 800a13c:	d0ef      	beq.n	800a11e <_strtod_l+0x8de>
 800a13e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a140:	9a04      	ldr	r2, [sp, #16]
 800a142:	4650      	mov	r0, sl
 800a144:	4659      	mov	r1, fp
 800a146:	b1c3      	cbz	r3, 800a17a <_strtod_l+0x93a>
 800a148:	f7ff fb5b 	bl	8009802 <sulp>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	ec51 0b18 	vmov	r0, r1, d8
 800a154:	f7f6 f89a 	bl	800028c <__adddf3>
 800a158:	4682      	mov	sl, r0
 800a15a:	468b      	mov	fp, r1
 800a15c:	e7df      	b.n	800a11e <_strtod_l+0x8de>
 800a15e:	4013      	ands	r3, r2
 800a160:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a164:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a168:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a16c:	f04f 3aff 	mov.w	sl, #4294967295
 800a170:	e7d5      	b.n	800a11e <_strtod_l+0x8de>
 800a172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a174:	ea13 0f0a 	tst.w	r3, sl
 800a178:	e7e0      	b.n	800a13c <_strtod_l+0x8fc>
 800a17a:	f7ff fb42 	bl	8009802 <sulp>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	ec51 0b18 	vmov	r0, r1, d8
 800a186:	f7f6 f87f 	bl	8000288 <__aeabi_dsub>
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	4682      	mov	sl, r0
 800a190:	468b      	mov	fp, r1
 800a192:	f7f6 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 800a196:	2800      	cmp	r0, #0
 800a198:	d0c1      	beq.n	800a11e <_strtod_l+0x8de>
 800a19a:	e611      	b.n	8009dc0 <_strtod_l+0x580>
 800a19c:	fffffc02 	.word	0xfffffc02
 800a1a0:	7ff00000 	.word	0x7ff00000
 800a1a4:	39500000 	.word	0x39500000
 800a1a8:	000fffff 	.word	0x000fffff
 800a1ac:	7fefffff 	.word	0x7fefffff
 800a1b0:	0800f128 	.word	0x0800f128
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f002 f98c 	bl	800c4d4 <__ratio>
 800a1bc:	ec59 8b10 	vmov	r8, r9, d0
 800a1c0:	ee10 0a10 	vmov	r0, s0
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	f7f6 fc90 	bl	8000af0 <__aeabi_dcmple>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d07a      	beq.n	800a2ca <_strtod_l+0xa8a>
 800a1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d04a      	beq.n	800a270 <_strtod_l+0xa30>
 800a1da:	4b95      	ldr	r3, [pc, #596]	; (800a430 <_strtod_l+0xbf0>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a430 <_strtod_l+0xbf0>
 800a1e6:	f04f 0800 	mov.w	r8, #0
 800a1ea:	4b92      	ldr	r3, [pc, #584]	; (800a434 <_strtod_l+0xbf4>)
 800a1ec:	403b      	ands	r3, r7
 800a1ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a1f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1f2:	4b91      	ldr	r3, [pc, #580]	; (800a438 <_strtod_l+0xbf8>)
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	f040 80b0 	bne.w	800a35a <_strtod_l+0xb1a>
 800a1fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a202:	ec4b ab10 	vmov	d0, sl, fp
 800a206:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a20a:	f002 f88b 	bl	800c324 <__ulp>
 800a20e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a212:	ec53 2b10 	vmov	r2, r3, d0
 800a216:	f7f6 f9ef 	bl	80005f8 <__aeabi_dmul>
 800a21a:	4652      	mov	r2, sl
 800a21c:	465b      	mov	r3, fp
 800a21e:	f7f6 f835 	bl	800028c <__adddf3>
 800a222:	460b      	mov	r3, r1
 800a224:	4983      	ldr	r1, [pc, #524]	; (800a434 <_strtod_l+0xbf4>)
 800a226:	4a85      	ldr	r2, [pc, #532]	; (800a43c <_strtod_l+0xbfc>)
 800a228:	4019      	ands	r1, r3
 800a22a:	4291      	cmp	r1, r2
 800a22c:	4682      	mov	sl, r0
 800a22e:	d960      	bls.n	800a2f2 <_strtod_l+0xab2>
 800a230:	ee18 3a90 	vmov	r3, s17
 800a234:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a238:	4293      	cmp	r3, r2
 800a23a:	d104      	bne.n	800a246 <_strtod_l+0xa06>
 800a23c:	ee18 3a10 	vmov	r3, s16
 800a240:	3301      	adds	r3, #1
 800a242:	f43f ad45 	beq.w	8009cd0 <_strtod_l+0x490>
 800a246:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a448 <_strtod_l+0xc08>
 800a24a:	f04f 3aff 	mov.w	sl, #4294967295
 800a24e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a250:	4620      	mov	r0, r4
 800a252:	f001 fd35 	bl	800bcc0 <_Bfree>
 800a256:	9905      	ldr	r1, [sp, #20]
 800a258:	4620      	mov	r0, r4
 800a25a:	f001 fd31 	bl	800bcc0 <_Bfree>
 800a25e:	4631      	mov	r1, r6
 800a260:	4620      	mov	r0, r4
 800a262:	f001 fd2d 	bl	800bcc0 <_Bfree>
 800a266:	4629      	mov	r1, r5
 800a268:	4620      	mov	r0, r4
 800a26a:	f001 fd29 	bl	800bcc0 <_Bfree>
 800a26e:	e61a      	b.n	8009ea6 <_strtod_l+0x666>
 800a270:	f1ba 0f00 	cmp.w	sl, #0
 800a274:	d11b      	bne.n	800a2ae <_strtod_l+0xa6e>
 800a276:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a27a:	b9f3      	cbnz	r3, 800a2ba <_strtod_l+0xa7a>
 800a27c:	4b6c      	ldr	r3, [pc, #432]	; (800a430 <_strtod_l+0xbf0>)
 800a27e:	2200      	movs	r2, #0
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	f7f6 fc2a 	bl	8000adc <__aeabi_dcmplt>
 800a288:	b9d0      	cbnz	r0, 800a2c0 <_strtod_l+0xa80>
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	4b6c      	ldr	r3, [pc, #432]	; (800a440 <_strtod_l+0xc00>)
 800a290:	2200      	movs	r2, #0
 800a292:	f7f6 f9b1 	bl	80005f8 <__aeabi_dmul>
 800a296:	4680      	mov	r8, r0
 800a298:	4689      	mov	r9, r1
 800a29a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a29e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a2a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a2a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a2a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2ac:	e79d      	b.n	800a1ea <_strtod_l+0x9aa>
 800a2ae:	f1ba 0f01 	cmp.w	sl, #1
 800a2b2:	d102      	bne.n	800a2ba <_strtod_l+0xa7a>
 800a2b4:	2f00      	cmp	r7, #0
 800a2b6:	f43f ad83 	beq.w	8009dc0 <_strtod_l+0x580>
 800a2ba:	4b62      	ldr	r3, [pc, #392]	; (800a444 <_strtod_l+0xc04>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	e78e      	b.n	800a1de <_strtod_l+0x99e>
 800a2c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a440 <_strtod_l+0xc00>
 800a2c4:	f04f 0800 	mov.w	r8, #0
 800a2c8:	e7e7      	b.n	800a29a <_strtod_l+0xa5a>
 800a2ca:	4b5d      	ldr	r3, [pc, #372]	; (800a440 <_strtod_l+0xc00>)
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f7f6 f991 	bl	80005f8 <__aeabi_dmul>
 800a2d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2d8:	4680      	mov	r8, r0
 800a2da:	4689      	mov	r9, r1
 800a2dc:	b933      	cbnz	r3, 800a2ec <_strtod_l+0xaac>
 800a2de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2e2:	900e      	str	r0, [sp, #56]	; 0x38
 800a2e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a2ea:	e7dd      	b.n	800a2a8 <_strtod_l+0xa68>
 800a2ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a2f0:	e7f9      	b.n	800a2e6 <_strtod_l+0xaa6>
 800a2f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1a8      	bne.n	800a24e <_strtod_l+0xa0e>
 800a2fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a302:	0d1b      	lsrs	r3, r3, #20
 800a304:	051b      	lsls	r3, r3, #20
 800a306:	429a      	cmp	r2, r3
 800a308:	d1a1      	bne.n	800a24e <_strtod_l+0xa0e>
 800a30a:	4640      	mov	r0, r8
 800a30c:	4649      	mov	r1, r9
 800a30e:	f7f6 fcd3 	bl	8000cb8 <__aeabi_d2lz>
 800a312:	f7f6 f943 	bl	800059c <__aeabi_l2d>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	4640      	mov	r0, r8
 800a31c:	4649      	mov	r1, r9
 800a31e:	f7f5 ffb3 	bl	8000288 <__aeabi_dsub>
 800a322:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a328:	ea43 030a 	orr.w	r3, r3, sl
 800a32c:	4313      	orrs	r3, r2
 800a32e:	4680      	mov	r8, r0
 800a330:	4689      	mov	r9, r1
 800a332:	d055      	beq.n	800a3e0 <_strtod_l+0xba0>
 800a334:	a336      	add	r3, pc, #216	; (adr r3, 800a410 <_strtod_l+0xbd0>)
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	f7f6 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800a33e:	2800      	cmp	r0, #0
 800a340:	f47f acd0 	bne.w	8009ce4 <_strtod_l+0x4a4>
 800a344:	a334      	add	r3, pc, #208	; (adr r3, 800a418 <_strtod_l+0xbd8>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	4640      	mov	r0, r8
 800a34c:	4649      	mov	r1, r9
 800a34e:	f7f6 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 800a352:	2800      	cmp	r0, #0
 800a354:	f43f af7b 	beq.w	800a24e <_strtod_l+0xa0e>
 800a358:	e4c4      	b.n	8009ce4 <_strtod_l+0x4a4>
 800a35a:	9b04      	ldr	r3, [sp, #16]
 800a35c:	b333      	cbz	r3, 800a3ac <_strtod_l+0xb6c>
 800a35e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a360:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a364:	d822      	bhi.n	800a3ac <_strtod_l+0xb6c>
 800a366:	a32e      	add	r3, pc, #184	; (adr r3, 800a420 <_strtod_l+0xbe0>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	4640      	mov	r0, r8
 800a36e:	4649      	mov	r1, r9
 800a370:	f7f6 fbbe 	bl	8000af0 <__aeabi_dcmple>
 800a374:	b1a0      	cbz	r0, 800a3a0 <_strtod_l+0xb60>
 800a376:	4649      	mov	r1, r9
 800a378:	4640      	mov	r0, r8
 800a37a:	f7f6 fc15 	bl	8000ba8 <__aeabi_d2uiz>
 800a37e:	2801      	cmp	r0, #1
 800a380:	bf38      	it	cc
 800a382:	2001      	movcc	r0, #1
 800a384:	f7f6 f8be 	bl	8000504 <__aeabi_ui2d>
 800a388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a38a:	4680      	mov	r8, r0
 800a38c:	4689      	mov	r9, r1
 800a38e:	bb23      	cbnz	r3, 800a3da <_strtod_l+0xb9a>
 800a390:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a394:	9010      	str	r0, [sp, #64]	; 0x40
 800a396:	9311      	str	r3, [sp, #68]	; 0x44
 800a398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a39c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a3b4:	eef0 0a68 	vmov.f32	s1, s17
 800a3b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3bc:	f001 ffb2 	bl	800c324 <__ulp>
 800a3c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3c4:	ec53 2b10 	vmov	r2, r3, d0
 800a3c8:	f7f6 f916 	bl	80005f8 <__aeabi_dmul>
 800a3cc:	ec53 2b18 	vmov	r2, r3, d8
 800a3d0:	f7f5 ff5c 	bl	800028c <__adddf3>
 800a3d4:	4682      	mov	sl, r0
 800a3d6:	468b      	mov	fp, r1
 800a3d8:	e78d      	b.n	800a2f6 <_strtod_l+0xab6>
 800a3da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a3de:	e7db      	b.n	800a398 <_strtod_l+0xb58>
 800a3e0:	a311      	add	r3, pc, #68	; (adr r3, 800a428 <_strtod_l+0xbe8>)
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	f7f6 fb79 	bl	8000adc <__aeabi_dcmplt>
 800a3ea:	e7b2      	b.n	800a352 <_strtod_l+0xb12>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a3f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3f4:	6013      	str	r3, [r2, #0]
 800a3f6:	f7ff ba6b 	b.w	80098d0 <_strtod_l+0x90>
 800a3fa:	2a65      	cmp	r2, #101	; 0x65
 800a3fc:	f43f ab5f 	beq.w	8009abe <_strtod_l+0x27e>
 800a400:	2a45      	cmp	r2, #69	; 0x45
 800a402:	f43f ab5c 	beq.w	8009abe <_strtod_l+0x27e>
 800a406:	2301      	movs	r3, #1
 800a408:	f7ff bb94 	b.w	8009b34 <_strtod_l+0x2f4>
 800a40c:	f3af 8000 	nop.w
 800a410:	94a03595 	.word	0x94a03595
 800a414:	3fdfffff 	.word	0x3fdfffff
 800a418:	35afe535 	.word	0x35afe535
 800a41c:	3fe00000 	.word	0x3fe00000
 800a420:	ffc00000 	.word	0xffc00000
 800a424:	41dfffff 	.word	0x41dfffff
 800a428:	94a03595 	.word	0x94a03595
 800a42c:	3fcfffff 	.word	0x3fcfffff
 800a430:	3ff00000 	.word	0x3ff00000
 800a434:	7ff00000 	.word	0x7ff00000
 800a438:	7fe00000 	.word	0x7fe00000
 800a43c:	7c9fffff 	.word	0x7c9fffff
 800a440:	3fe00000 	.word	0x3fe00000
 800a444:	bff00000 	.word	0xbff00000
 800a448:	7fefffff 	.word	0x7fefffff

0800a44c <_strtod_r>:
 800a44c:	4b01      	ldr	r3, [pc, #4]	; (800a454 <_strtod_r+0x8>)
 800a44e:	f7ff b9f7 	b.w	8009840 <_strtod_l>
 800a452:	bf00      	nop
 800a454:	20000074 	.word	0x20000074

0800a458 <_strtol_l.constprop.0>:
 800a458:	2b01      	cmp	r3, #1
 800a45a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a45e:	d001      	beq.n	800a464 <_strtol_l.constprop.0+0xc>
 800a460:	2b24      	cmp	r3, #36	; 0x24
 800a462:	d906      	bls.n	800a472 <_strtol_l.constprop.0+0x1a>
 800a464:	f7fd fd40 	bl	8007ee8 <__errno>
 800a468:	2316      	movs	r3, #22
 800a46a:	6003      	str	r3, [r0, #0]
 800a46c:	2000      	movs	r0, #0
 800a46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a472:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a558 <_strtol_l.constprop.0+0x100>
 800a476:	460d      	mov	r5, r1
 800a478:	462e      	mov	r6, r5
 800a47a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a47e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a482:	f017 0708 	ands.w	r7, r7, #8
 800a486:	d1f7      	bne.n	800a478 <_strtol_l.constprop.0+0x20>
 800a488:	2c2d      	cmp	r4, #45	; 0x2d
 800a48a:	d132      	bne.n	800a4f2 <_strtol_l.constprop.0+0x9a>
 800a48c:	782c      	ldrb	r4, [r5, #0]
 800a48e:	2701      	movs	r7, #1
 800a490:	1cb5      	adds	r5, r6, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d05b      	beq.n	800a54e <_strtol_l.constprop.0+0xf6>
 800a496:	2b10      	cmp	r3, #16
 800a498:	d109      	bne.n	800a4ae <_strtol_l.constprop.0+0x56>
 800a49a:	2c30      	cmp	r4, #48	; 0x30
 800a49c:	d107      	bne.n	800a4ae <_strtol_l.constprop.0+0x56>
 800a49e:	782c      	ldrb	r4, [r5, #0]
 800a4a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a4a4:	2c58      	cmp	r4, #88	; 0x58
 800a4a6:	d14d      	bne.n	800a544 <_strtol_l.constprop.0+0xec>
 800a4a8:	786c      	ldrb	r4, [r5, #1]
 800a4aa:	2310      	movs	r3, #16
 800a4ac:	3502      	adds	r5, #2
 800a4ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a4b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4b6:	f04f 0c00 	mov.w	ip, #0
 800a4ba:	fbb8 f9f3 	udiv	r9, r8, r3
 800a4be:	4666      	mov	r6, ip
 800a4c0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a4c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a4c8:	f1be 0f09 	cmp.w	lr, #9
 800a4cc:	d816      	bhi.n	800a4fc <_strtol_l.constprop.0+0xa4>
 800a4ce:	4674      	mov	r4, lr
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	dd24      	ble.n	800a51e <_strtol_l.constprop.0+0xc6>
 800a4d4:	f1bc 0f00 	cmp.w	ip, #0
 800a4d8:	db1e      	blt.n	800a518 <_strtol_l.constprop.0+0xc0>
 800a4da:	45b1      	cmp	r9, r6
 800a4dc:	d31c      	bcc.n	800a518 <_strtol_l.constprop.0+0xc0>
 800a4de:	d101      	bne.n	800a4e4 <_strtol_l.constprop.0+0x8c>
 800a4e0:	45a2      	cmp	sl, r4
 800a4e2:	db19      	blt.n	800a518 <_strtol_l.constprop.0+0xc0>
 800a4e4:	fb06 4603 	mla	r6, r6, r3, r4
 800a4e8:	f04f 0c01 	mov.w	ip, #1
 800a4ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4f0:	e7e8      	b.n	800a4c4 <_strtol_l.constprop.0+0x6c>
 800a4f2:	2c2b      	cmp	r4, #43	; 0x2b
 800a4f4:	bf04      	itt	eq
 800a4f6:	782c      	ldrbeq	r4, [r5, #0]
 800a4f8:	1cb5      	addeq	r5, r6, #2
 800a4fa:	e7ca      	b.n	800a492 <_strtol_l.constprop.0+0x3a>
 800a4fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a500:	f1be 0f19 	cmp.w	lr, #25
 800a504:	d801      	bhi.n	800a50a <_strtol_l.constprop.0+0xb2>
 800a506:	3c37      	subs	r4, #55	; 0x37
 800a508:	e7e2      	b.n	800a4d0 <_strtol_l.constprop.0+0x78>
 800a50a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a50e:	f1be 0f19 	cmp.w	lr, #25
 800a512:	d804      	bhi.n	800a51e <_strtol_l.constprop.0+0xc6>
 800a514:	3c57      	subs	r4, #87	; 0x57
 800a516:	e7db      	b.n	800a4d0 <_strtol_l.constprop.0+0x78>
 800a518:	f04f 3cff 	mov.w	ip, #4294967295
 800a51c:	e7e6      	b.n	800a4ec <_strtol_l.constprop.0+0x94>
 800a51e:	f1bc 0f00 	cmp.w	ip, #0
 800a522:	da05      	bge.n	800a530 <_strtol_l.constprop.0+0xd8>
 800a524:	2322      	movs	r3, #34	; 0x22
 800a526:	6003      	str	r3, [r0, #0]
 800a528:	4646      	mov	r6, r8
 800a52a:	b942      	cbnz	r2, 800a53e <_strtol_l.constprop.0+0xe6>
 800a52c:	4630      	mov	r0, r6
 800a52e:	e79e      	b.n	800a46e <_strtol_l.constprop.0+0x16>
 800a530:	b107      	cbz	r7, 800a534 <_strtol_l.constprop.0+0xdc>
 800a532:	4276      	negs	r6, r6
 800a534:	2a00      	cmp	r2, #0
 800a536:	d0f9      	beq.n	800a52c <_strtol_l.constprop.0+0xd4>
 800a538:	f1bc 0f00 	cmp.w	ip, #0
 800a53c:	d000      	beq.n	800a540 <_strtol_l.constprop.0+0xe8>
 800a53e:	1e69      	subs	r1, r5, #1
 800a540:	6011      	str	r1, [r2, #0]
 800a542:	e7f3      	b.n	800a52c <_strtol_l.constprop.0+0xd4>
 800a544:	2430      	movs	r4, #48	; 0x30
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1b1      	bne.n	800a4ae <_strtol_l.constprop.0+0x56>
 800a54a:	2308      	movs	r3, #8
 800a54c:	e7af      	b.n	800a4ae <_strtol_l.constprop.0+0x56>
 800a54e:	2c30      	cmp	r4, #48	; 0x30
 800a550:	d0a5      	beq.n	800a49e <_strtol_l.constprop.0+0x46>
 800a552:	230a      	movs	r3, #10
 800a554:	e7ab      	b.n	800a4ae <_strtol_l.constprop.0+0x56>
 800a556:	bf00      	nop
 800a558:	0800ef49 	.word	0x0800ef49

0800a55c <_strtol_r>:
 800a55c:	f7ff bf7c 	b.w	800a458 <_strtol_l.constprop.0>

0800a560 <__swbuf_r>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	460e      	mov	r6, r1
 800a564:	4614      	mov	r4, r2
 800a566:	4605      	mov	r5, r0
 800a568:	b118      	cbz	r0, 800a572 <__swbuf_r+0x12>
 800a56a:	6983      	ldr	r3, [r0, #24]
 800a56c:	b90b      	cbnz	r3, 800a572 <__swbuf_r+0x12>
 800a56e:	f7fd fded 	bl	800814c <__sinit>
 800a572:	4b21      	ldr	r3, [pc, #132]	; (800a5f8 <__swbuf_r+0x98>)
 800a574:	429c      	cmp	r4, r3
 800a576:	d12b      	bne.n	800a5d0 <__swbuf_r+0x70>
 800a578:	686c      	ldr	r4, [r5, #4]
 800a57a:	69a3      	ldr	r3, [r4, #24]
 800a57c:	60a3      	str	r3, [r4, #8]
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	071a      	lsls	r2, r3, #28
 800a582:	d52f      	bpl.n	800a5e4 <__swbuf_r+0x84>
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	b36b      	cbz	r3, 800a5e4 <__swbuf_r+0x84>
 800a588:	6923      	ldr	r3, [r4, #16]
 800a58a:	6820      	ldr	r0, [r4, #0]
 800a58c:	1ac0      	subs	r0, r0, r3
 800a58e:	6963      	ldr	r3, [r4, #20]
 800a590:	b2f6      	uxtb	r6, r6
 800a592:	4283      	cmp	r3, r0
 800a594:	4637      	mov	r7, r6
 800a596:	dc04      	bgt.n	800a5a2 <__swbuf_r+0x42>
 800a598:	4621      	mov	r1, r4
 800a59a:	4628      	mov	r0, r5
 800a59c:	f7fd fd30 	bl	8008000 <_fflush_r>
 800a5a0:	bb30      	cbnz	r0, 800a5f0 <__swbuf_r+0x90>
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	60a3      	str	r3, [r4, #8]
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	6022      	str	r2, [r4, #0]
 800a5ae:	701e      	strb	r6, [r3, #0]
 800a5b0:	6963      	ldr	r3, [r4, #20]
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	4283      	cmp	r3, r0
 800a5b6:	d004      	beq.n	800a5c2 <__swbuf_r+0x62>
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	07db      	lsls	r3, r3, #31
 800a5bc:	d506      	bpl.n	800a5cc <__swbuf_r+0x6c>
 800a5be:	2e0a      	cmp	r6, #10
 800a5c0:	d104      	bne.n	800a5cc <__swbuf_r+0x6c>
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f7fd fd1b 	bl	8008000 <_fflush_r>
 800a5ca:	b988      	cbnz	r0, 800a5f0 <__swbuf_r+0x90>
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d0:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <__swbuf_r+0x9c>)
 800a5d2:	429c      	cmp	r4, r3
 800a5d4:	d101      	bne.n	800a5da <__swbuf_r+0x7a>
 800a5d6:	68ac      	ldr	r4, [r5, #8]
 800a5d8:	e7cf      	b.n	800a57a <__swbuf_r+0x1a>
 800a5da:	4b09      	ldr	r3, [pc, #36]	; (800a600 <__swbuf_r+0xa0>)
 800a5dc:	429c      	cmp	r4, r3
 800a5de:	bf08      	it	eq
 800a5e0:	68ec      	ldreq	r4, [r5, #12]
 800a5e2:	e7ca      	b.n	800a57a <__swbuf_r+0x1a>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f000 f81e 	bl	800a628 <__swsetup_r>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d0cb      	beq.n	800a588 <__swbuf_r+0x28>
 800a5f0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5f4:	e7ea      	b.n	800a5cc <__swbuf_r+0x6c>
 800a5f6:	bf00      	nop
 800a5f8:	0800f06c 	.word	0x0800f06c
 800a5fc:	0800f08c 	.word	0x0800f08c
 800a600:	0800f04c 	.word	0x0800f04c

0800a604 <_write_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d07      	ldr	r5, [pc, #28]	; (800a624 <_write_r+0x20>)
 800a608:	4604      	mov	r4, r0
 800a60a:	4608      	mov	r0, r1
 800a60c:	4611      	mov	r1, r2
 800a60e:	2200      	movs	r2, #0
 800a610:	602a      	str	r2, [r5, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	f7f6 fe6f 	bl	80012f6 <_write>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	d102      	bne.n	800a622 <_write_r+0x1e>
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	b103      	cbz	r3, 800a622 <_write_r+0x1e>
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	bd38      	pop	{r3, r4, r5, pc}
 800a624:	20000ee8 	.word	0x20000ee8

0800a628 <__swsetup_r>:
 800a628:	4b32      	ldr	r3, [pc, #200]	; (800a6f4 <__swsetup_r+0xcc>)
 800a62a:	b570      	push	{r4, r5, r6, lr}
 800a62c:	681d      	ldr	r5, [r3, #0]
 800a62e:	4606      	mov	r6, r0
 800a630:	460c      	mov	r4, r1
 800a632:	b125      	cbz	r5, 800a63e <__swsetup_r+0x16>
 800a634:	69ab      	ldr	r3, [r5, #24]
 800a636:	b913      	cbnz	r3, 800a63e <__swsetup_r+0x16>
 800a638:	4628      	mov	r0, r5
 800a63a:	f7fd fd87 	bl	800814c <__sinit>
 800a63e:	4b2e      	ldr	r3, [pc, #184]	; (800a6f8 <__swsetup_r+0xd0>)
 800a640:	429c      	cmp	r4, r3
 800a642:	d10f      	bne.n	800a664 <__swsetup_r+0x3c>
 800a644:	686c      	ldr	r4, [r5, #4]
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a64c:	0719      	lsls	r1, r3, #28
 800a64e:	d42c      	bmi.n	800a6aa <__swsetup_r+0x82>
 800a650:	06dd      	lsls	r5, r3, #27
 800a652:	d411      	bmi.n	800a678 <__swsetup_r+0x50>
 800a654:	2309      	movs	r3, #9
 800a656:	6033      	str	r3, [r6, #0]
 800a658:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a65c:	81a3      	strh	r3, [r4, #12]
 800a65e:	f04f 30ff 	mov.w	r0, #4294967295
 800a662:	e03e      	b.n	800a6e2 <__swsetup_r+0xba>
 800a664:	4b25      	ldr	r3, [pc, #148]	; (800a6fc <__swsetup_r+0xd4>)
 800a666:	429c      	cmp	r4, r3
 800a668:	d101      	bne.n	800a66e <__swsetup_r+0x46>
 800a66a:	68ac      	ldr	r4, [r5, #8]
 800a66c:	e7eb      	b.n	800a646 <__swsetup_r+0x1e>
 800a66e:	4b24      	ldr	r3, [pc, #144]	; (800a700 <__swsetup_r+0xd8>)
 800a670:	429c      	cmp	r4, r3
 800a672:	bf08      	it	eq
 800a674:	68ec      	ldreq	r4, [r5, #12]
 800a676:	e7e6      	b.n	800a646 <__swsetup_r+0x1e>
 800a678:	0758      	lsls	r0, r3, #29
 800a67a:	d512      	bpl.n	800a6a2 <__swsetup_r+0x7a>
 800a67c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a67e:	b141      	cbz	r1, 800a692 <__swsetup_r+0x6a>
 800a680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a684:	4299      	cmp	r1, r3
 800a686:	d002      	beq.n	800a68e <__swsetup_r+0x66>
 800a688:	4630      	mov	r0, r6
 800a68a:	f7fd ff3b 	bl	8008504 <_free_r>
 800a68e:	2300      	movs	r3, #0
 800a690:	6363      	str	r3, [r4, #52]	; 0x34
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	2300      	movs	r3, #0
 800a69c:	6063      	str	r3, [r4, #4]
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	f043 0308 	orr.w	r3, r3, #8
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	b94b      	cbnz	r3, 800a6c2 <__swsetup_r+0x9a>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b8:	d003      	beq.n	800a6c2 <__swsetup_r+0x9a>
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f001 fa61 	bl	800bb84 <__smakebuf_r>
 800a6c2:	89a0      	ldrh	r0, [r4, #12]
 800a6c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6c8:	f010 0301 	ands.w	r3, r0, #1
 800a6cc:	d00a      	beq.n	800a6e4 <__swsetup_r+0xbc>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60a3      	str	r3, [r4, #8]
 800a6d2:	6963      	ldr	r3, [r4, #20]
 800a6d4:	425b      	negs	r3, r3
 800a6d6:	61a3      	str	r3, [r4, #24]
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	b943      	cbnz	r3, 800a6ee <__swsetup_r+0xc6>
 800a6dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6e0:	d1ba      	bne.n	800a658 <__swsetup_r+0x30>
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	0781      	lsls	r1, r0, #30
 800a6e6:	bf58      	it	pl
 800a6e8:	6963      	ldrpl	r3, [r4, #20]
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	e7f4      	b.n	800a6d8 <__swsetup_r+0xb0>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	e7f7      	b.n	800a6e2 <__swsetup_r+0xba>
 800a6f2:	bf00      	nop
 800a6f4:	2000000c 	.word	0x2000000c
 800a6f8:	0800f06c 	.word	0x0800f06c
 800a6fc:	0800f08c 	.word	0x0800f08c
 800a700:	0800f04c 	.word	0x0800f04c

0800a704 <abort>:
 800a704:	b508      	push	{r3, lr}
 800a706:	2006      	movs	r0, #6
 800a708:	f002 f92a 	bl	800c960 <raise>
 800a70c:	2001      	movs	r0, #1
 800a70e:	f7f6 fdcb 	bl	80012a8 <_exit>
	...

0800a714 <_close_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d06      	ldr	r5, [pc, #24]	; (800a730 <_close_r+0x1c>)
 800a718:	2300      	movs	r3, #0
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	f7f6 fe05 	bl	800132e <_close>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_close_r+0x1a>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_close_r+0x1a>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	20000ee8 	.word	0x20000ee8

0800a734 <quorem>:
 800a734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	6903      	ldr	r3, [r0, #16]
 800a73a:	690c      	ldr	r4, [r1, #16]
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	4607      	mov	r7, r0
 800a740:	f2c0 8081 	blt.w	800a846 <quorem+0x112>
 800a744:	3c01      	subs	r4, #1
 800a746:	f101 0814 	add.w	r8, r1, #20
 800a74a:	f100 0514 	add.w	r5, r0, #20
 800a74e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a75c:	3301      	adds	r3, #1
 800a75e:	429a      	cmp	r2, r3
 800a760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a768:	fbb2 f6f3 	udiv	r6, r2, r3
 800a76c:	d331      	bcc.n	800a7d2 <quorem+0x9e>
 800a76e:	f04f 0e00 	mov.w	lr, #0
 800a772:	4640      	mov	r0, r8
 800a774:	46ac      	mov	ip, r5
 800a776:	46f2      	mov	sl, lr
 800a778:	f850 2b04 	ldr.w	r2, [r0], #4
 800a77c:	b293      	uxth	r3, r2
 800a77e:	fb06 e303 	mla	r3, r6, r3, lr
 800a782:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a786:	b29b      	uxth	r3, r3
 800a788:	ebaa 0303 	sub.w	r3, sl, r3
 800a78c:	f8dc a000 	ldr.w	sl, [ip]
 800a790:	0c12      	lsrs	r2, r2, #16
 800a792:	fa13 f38a 	uxtah	r3, r3, sl
 800a796:	fb06 e202 	mla	r2, r6, r2, lr
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	9b00      	ldr	r3, [sp, #0]
 800a79e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7a2:	b292      	uxth	r2, r2
 800a7a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7b0:	4581      	cmp	r9, r0
 800a7b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a7ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7be:	d2db      	bcs.n	800a778 <quorem+0x44>
 800a7c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7c4:	b92b      	cbnz	r3, 800a7d2 <quorem+0x9e>
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	3b04      	subs	r3, #4
 800a7ca:	429d      	cmp	r5, r3
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	d32e      	bcc.n	800a82e <quorem+0xfa>
 800a7d0:	613c      	str	r4, [r7, #16]
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f001 fd00 	bl	800c1d8 <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	db24      	blt.n	800a826 <quorem+0xf2>
 800a7dc:	3601      	adds	r6, #1
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f04f 0c00 	mov.w	ip, #0
 800a7e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7e8:	f8d0 e000 	ldr.w	lr, [r0]
 800a7ec:	b293      	uxth	r3, r2
 800a7ee:	ebac 0303 	sub.w	r3, ip, r3
 800a7f2:	0c12      	lsrs	r2, r2, #16
 800a7f4:	fa13 f38e 	uxtah	r3, r3, lr
 800a7f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a7fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a800:	b29b      	uxth	r3, r3
 800a802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a806:	45c1      	cmp	r9, r8
 800a808:	f840 3b04 	str.w	r3, [r0], #4
 800a80c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a810:	d2e8      	bcs.n	800a7e4 <quorem+0xb0>
 800a812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a81a:	b922      	cbnz	r2, 800a826 <quorem+0xf2>
 800a81c:	3b04      	subs	r3, #4
 800a81e:	429d      	cmp	r5, r3
 800a820:	461a      	mov	r2, r3
 800a822:	d30a      	bcc.n	800a83a <quorem+0x106>
 800a824:	613c      	str	r4, [r7, #16]
 800a826:	4630      	mov	r0, r6
 800a828:	b003      	add	sp, #12
 800a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82e:	6812      	ldr	r2, [r2, #0]
 800a830:	3b04      	subs	r3, #4
 800a832:	2a00      	cmp	r2, #0
 800a834:	d1cc      	bne.n	800a7d0 <quorem+0x9c>
 800a836:	3c01      	subs	r4, #1
 800a838:	e7c7      	b.n	800a7ca <quorem+0x96>
 800a83a:	6812      	ldr	r2, [r2, #0]
 800a83c:	3b04      	subs	r3, #4
 800a83e:	2a00      	cmp	r2, #0
 800a840:	d1f0      	bne.n	800a824 <quorem+0xf0>
 800a842:	3c01      	subs	r4, #1
 800a844:	e7eb      	b.n	800a81e <quorem+0xea>
 800a846:	2000      	movs	r0, #0
 800a848:	e7ee      	b.n	800a828 <quorem+0xf4>
 800a84a:	0000      	movs	r0, r0
 800a84c:	0000      	movs	r0, r0
	...

0800a850 <_dtoa_r>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	ed2d 8b04 	vpush	{d8-d9}
 800a858:	ec57 6b10 	vmov	r6, r7, d0
 800a85c:	b093      	sub	sp, #76	; 0x4c
 800a85e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a860:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a864:	9106      	str	r1, [sp, #24]
 800a866:	ee10 aa10 	vmov	sl, s0
 800a86a:	4604      	mov	r4, r0
 800a86c:	9209      	str	r2, [sp, #36]	; 0x24
 800a86e:	930c      	str	r3, [sp, #48]	; 0x30
 800a870:	46bb      	mov	fp, r7
 800a872:	b975      	cbnz	r5, 800a892 <_dtoa_r+0x42>
 800a874:	2010      	movs	r0, #16
 800a876:	f7fd fdef 	bl	8008458 <malloc>
 800a87a:	4602      	mov	r2, r0
 800a87c:	6260      	str	r0, [r4, #36]	; 0x24
 800a87e:	b920      	cbnz	r0, 800a88a <_dtoa_r+0x3a>
 800a880:	4ba7      	ldr	r3, [pc, #668]	; (800ab20 <_dtoa_r+0x2d0>)
 800a882:	21ea      	movs	r1, #234	; 0xea
 800a884:	48a7      	ldr	r0, [pc, #668]	; (800ab24 <_dtoa_r+0x2d4>)
 800a886:	f7fd fb09 	bl	8007e9c <__assert_func>
 800a88a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a88e:	6005      	str	r5, [r0, #0]
 800a890:	60c5      	str	r5, [r0, #12]
 800a892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a894:	6819      	ldr	r1, [r3, #0]
 800a896:	b151      	cbz	r1, 800a8ae <_dtoa_r+0x5e>
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	604a      	str	r2, [r1, #4]
 800a89c:	2301      	movs	r3, #1
 800a89e:	4093      	lsls	r3, r2
 800a8a0:	608b      	str	r3, [r1, #8]
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f001 fa0c 	bl	800bcc0 <_Bfree>
 800a8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	1e3b      	subs	r3, r7, #0
 800a8b0:	bfaa      	itet	ge
 800a8b2:	2300      	movge	r3, #0
 800a8b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a8b8:	f8c8 3000 	strge.w	r3, [r8]
 800a8bc:	4b9a      	ldr	r3, [pc, #616]	; (800ab28 <_dtoa_r+0x2d8>)
 800a8be:	bfbc      	itt	lt
 800a8c0:	2201      	movlt	r2, #1
 800a8c2:	f8c8 2000 	strlt.w	r2, [r8]
 800a8c6:	ea33 030b 	bics.w	r3, r3, fp
 800a8ca:	d11b      	bne.n	800a904 <_dtoa_r+0xb4>
 800a8cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8d8:	4333      	orrs	r3, r6
 800a8da:	f000 8592 	beq.w	800b402 <_dtoa_r+0xbb2>
 800a8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8e0:	b963      	cbnz	r3, 800a8fc <_dtoa_r+0xac>
 800a8e2:	4b92      	ldr	r3, [pc, #584]	; (800ab2c <_dtoa_r+0x2dc>)
 800a8e4:	e022      	b.n	800a92c <_dtoa_r+0xdc>
 800a8e6:	4b92      	ldr	r3, [pc, #584]	; (800ab30 <_dtoa_r+0x2e0>)
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	9801      	ldr	r0, [sp, #4]
 800a8f2:	b013      	add	sp, #76	; 0x4c
 800a8f4:	ecbd 8b04 	vpop	{d8-d9}
 800a8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fc:	4b8b      	ldr	r3, [pc, #556]	; (800ab2c <_dtoa_r+0x2dc>)
 800a8fe:	9301      	str	r3, [sp, #4]
 800a900:	3303      	adds	r3, #3
 800a902:	e7f3      	b.n	800a8ec <_dtoa_r+0x9c>
 800a904:	2200      	movs	r2, #0
 800a906:	2300      	movs	r3, #0
 800a908:	4650      	mov	r0, sl
 800a90a:	4659      	mov	r1, fp
 800a90c:	f7f6 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a910:	ec4b ab19 	vmov	d9, sl, fp
 800a914:	4680      	mov	r8, r0
 800a916:	b158      	cbz	r0, 800a930 <_dtoa_r+0xe0>
 800a918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a91a:	2301      	movs	r3, #1
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 856b 	beq.w	800b3fc <_dtoa_r+0xbac>
 800a926:	4883      	ldr	r0, [pc, #524]	; (800ab34 <_dtoa_r+0x2e4>)
 800a928:	6018      	str	r0, [r3, #0]
 800a92a:	1e43      	subs	r3, r0, #1
 800a92c:	9301      	str	r3, [sp, #4]
 800a92e:	e7df      	b.n	800a8f0 <_dtoa_r+0xa0>
 800a930:	ec4b ab10 	vmov	d0, sl, fp
 800a934:	aa10      	add	r2, sp, #64	; 0x40
 800a936:	a911      	add	r1, sp, #68	; 0x44
 800a938:	4620      	mov	r0, r4
 800a93a:	f001 fd6f 	bl	800c41c <__d2b>
 800a93e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a942:	ee08 0a10 	vmov	s16, r0
 800a946:	2d00      	cmp	r5, #0
 800a948:	f000 8084 	beq.w	800aa54 <_dtoa_r+0x204>
 800a94c:	ee19 3a90 	vmov	r3, s19
 800a950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a954:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a958:	4656      	mov	r6, sl
 800a95a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a95e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a962:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a966:	4b74      	ldr	r3, [pc, #464]	; (800ab38 <_dtoa_r+0x2e8>)
 800a968:	2200      	movs	r2, #0
 800a96a:	4630      	mov	r0, r6
 800a96c:	4639      	mov	r1, r7
 800a96e:	f7f5 fc8b 	bl	8000288 <__aeabi_dsub>
 800a972:	a365      	add	r3, pc, #404	; (adr r3, 800ab08 <_dtoa_r+0x2b8>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f7f5 fe3e 	bl	80005f8 <__aeabi_dmul>
 800a97c:	a364      	add	r3, pc, #400	; (adr r3, 800ab10 <_dtoa_r+0x2c0>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	f7f5 fc83 	bl	800028c <__adddf3>
 800a986:	4606      	mov	r6, r0
 800a988:	4628      	mov	r0, r5
 800a98a:	460f      	mov	r7, r1
 800a98c:	f7f5 fdca 	bl	8000524 <__aeabi_i2d>
 800a990:	a361      	add	r3, pc, #388	; (adr r3, 800ab18 <_dtoa_r+0x2c8>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f5 fe2f 	bl	80005f8 <__aeabi_dmul>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	4630      	mov	r0, r6
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	f7f5 fc73 	bl	800028c <__adddf3>
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	f7f6 f8d5 	bl	8000b58 <__aeabi_d2iz>
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	9000      	str	r0, [sp, #0]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	f7f6 f890 	bl	8000adc <__aeabi_dcmplt>
 800a9bc:	b150      	cbz	r0, 800a9d4 <_dtoa_r+0x184>
 800a9be:	9800      	ldr	r0, [sp, #0]
 800a9c0:	f7f5 fdb0 	bl	8000524 <__aeabi_i2d>
 800a9c4:	4632      	mov	r2, r6
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	f7f6 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9cc:	b910      	cbnz	r0, 800a9d4 <_dtoa_r+0x184>
 800a9ce:	9b00      	ldr	r3, [sp, #0]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	2b16      	cmp	r3, #22
 800a9d8:	d85a      	bhi.n	800aa90 <_dtoa_r+0x240>
 800a9da:	9a00      	ldr	r2, [sp, #0]
 800a9dc:	4b57      	ldr	r3, [pc, #348]	; (800ab3c <_dtoa_r+0x2ec>)
 800a9de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	ec51 0b19 	vmov	r0, r1, d9
 800a9ea:	f7f6 f877 	bl	8000adc <__aeabi_dcmplt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d050      	beq.n	800aa94 <_dtoa_r+0x244>
 800a9f2:	9b00      	ldr	r3, [sp, #0]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9fe:	1b5d      	subs	r5, r3, r5
 800aa00:	1e6b      	subs	r3, r5, #1
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	bf45      	ittet	mi
 800aa06:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa0a:	9304      	strmi	r3, [sp, #16]
 800aa0c:	2300      	movpl	r3, #0
 800aa0e:	2300      	movmi	r3, #0
 800aa10:	bf4c      	ite	mi
 800aa12:	9305      	strmi	r3, [sp, #20]
 800aa14:	9304      	strpl	r3, [sp, #16]
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	db3d      	blt.n	800aa98 <_dtoa_r+0x248>
 800aa1c:	9b05      	ldr	r3, [sp, #20]
 800aa1e:	9a00      	ldr	r2, [sp, #0]
 800aa20:	920a      	str	r2, [sp, #40]	; 0x28
 800aa22:	4413      	add	r3, r2
 800aa24:	9305      	str	r3, [sp, #20]
 800aa26:	2300      	movs	r3, #0
 800aa28:	9307      	str	r3, [sp, #28]
 800aa2a:	9b06      	ldr	r3, [sp, #24]
 800aa2c:	2b09      	cmp	r3, #9
 800aa2e:	f200 8089 	bhi.w	800ab44 <_dtoa_r+0x2f4>
 800aa32:	2b05      	cmp	r3, #5
 800aa34:	bfc4      	itt	gt
 800aa36:	3b04      	subgt	r3, #4
 800aa38:	9306      	strgt	r3, [sp, #24]
 800aa3a:	9b06      	ldr	r3, [sp, #24]
 800aa3c:	f1a3 0302 	sub.w	r3, r3, #2
 800aa40:	bfcc      	ite	gt
 800aa42:	2500      	movgt	r5, #0
 800aa44:	2501      	movle	r5, #1
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	f200 8087 	bhi.w	800ab5a <_dtoa_r+0x30a>
 800aa4c:	e8df f003 	tbb	[pc, r3]
 800aa50:	59383a2d 	.word	0x59383a2d
 800aa54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa58:	441d      	add	r5, r3
 800aa5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	bfc1      	itttt	gt
 800aa62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aa6a:	fa0b f303 	lslgt.w	r3, fp, r3
 800aa6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aa72:	bfda      	itte	le
 800aa74:	f1c3 0320 	rsble	r3, r3, #32
 800aa78:	fa06 f003 	lslle.w	r0, r6, r3
 800aa7c:	4318      	orrgt	r0, r3
 800aa7e:	f7f5 fd41 	bl	8000504 <__aeabi_ui2d>
 800aa82:	2301      	movs	r3, #1
 800aa84:	4606      	mov	r6, r0
 800aa86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aa8a:	3d01      	subs	r5, #1
 800aa8c:	930e      	str	r3, [sp, #56]	; 0x38
 800aa8e:	e76a      	b.n	800a966 <_dtoa_r+0x116>
 800aa90:	2301      	movs	r3, #1
 800aa92:	e7b2      	b.n	800a9fa <_dtoa_r+0x1aa>
 800aa94:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa96:	e7b1      	b.n	800a9fc <_dtoa_r+0x1ac>
 800aa98:	9b04      	ldr	r3, [sp, #16]
 800aa9a:	9a00      	ldr	r2, [sp, #0]
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	4253      	negs	r3, r2
 800aaa2:	9307      	str	r3, [sp, #28]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	930a      	str	r3, [sp, #40]	; 0x28
 800aaa8:	e7bf      	b.n	800aa2a <_dtoa_r+0x1da>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9308      	str	r3, [sp, #32]
 800aaae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dc55      	bgt.n	800ab60 <_dtoa_r+0x310>
 800aab4:	2301      	movs	r3, #1
 800aab6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aaba:	461a      	mov	r2, r3
 800aabc:	9209      	str	r2, [sp, #36]	; 0x24
 800aabe:	e00c      	b.n	800aada <_dtoa_r+0x28a>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e7f3      	b.n	800aaac <_dtoa_r+0x25c>
 800aac4:	2300      	movs	r3, #0
 800aac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aac8:	9308      	str	r3, [sp, #32]
 800aaca:	9b00      	ldr	r3, [sp, #0]
 800aacc:	4413      	add	r3, r2
 800aace:	9302      	str	r3, [sp, #8]
 800aad0:	3301      	adds	r3, #1
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	9303      	str	r3, [sp, #12]
 800aad6:	bfb8      	it	lt
 800aad8:	2301      	movlt	r3, #1
 800aada:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aadc:	2200      	movs	r2, #0
 800aade:	6042      	str	r2, [r0, #4]
 800aae0:	2204      	movs	r2, #4
 800aae2:	f102 0614 	add.w	r6, r2, #20
 800aae6:	429e      	cmp	r6, r3
 800aae8:	6841      	ldr	r1, [r0, #4]
 800aaea:	d93d      	bls.n	800ab68 <_dtoa_r+0x318>
 800aaec:	4620      	mov	r0, r4
 800aaee:	f001 f8a7 	bl	800bc40 <_Balloc>
 800aaf2:	9001      	str	r0, [sp, #4]
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d13b      	bne.n	800ab70 <_dtoa_r+0x320>
 800aaf8:	4b11      	ldr	r3, [pc, #68]	; (800ab40 <_dtoa_r+0x2f0>)
 800aafa:	4602      	mov	r2, r0
 800aafc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab00:	e6c0      	b.n	800a884 <_dtoa_r+0x34>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e7df      	b.n	800aac6 <_dtoa_r+0x276>
 800ab06:	bf00      	nop
 800ab08:	636f4361 	.word	0x636f4361
 800ab0c:	3fd287a7 	.word	0x3fd287a7
 800ab10:	8b60c8b3 	.word	0x8b60c8b3
 800ab14:	3fc68a28 	.word	0x3fc68a28
 800ab18:	509f79fb 	.word	0x509f79fb
 800ab1c:	3fd34413 	.word	0x3fd34413
 800ab20:	0800f15d 	.word	0x0800f15d
 800ab24:	0800f174 	.word	0x0800f174
 800ab28:	7ff00000 	.word	0x7ff00000
 800ab2c:	0800f159 	.word	0x0800f159
 800ab30:	0800f150 	.word	0x0800f150
 800ab34:	0800f0d2 	.word	0x0800f0d2
 800ab38:	3ff80000 	.word	0x3ff80000
 800ab3c:	0800f2e0 	.word	0x0800f2e0
 800ab40:	0800f1cf 	.word	0x0800f1cf
 800ab44:	2501      	movs	r5, #1
 800ab46:	2300      	movs	r3, #0
 800ab48:	9306      	str	r3, [sp, #24]
 800ab4a:	9508      	str	r5, [sp, #32]
 800ab4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab54:	2200      	movs	r2, #0
 800ab56:	2312      	movs	r3, #18
 800ab58:	e7b0      	b.n	800aabc <_dtoa_r+0x26c>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	9308      	str	r3, [sp, #32]
 800ab5e:	e7f5      	b.n	800ab4c <_dtoa_r+0x2fc>
 800ab60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab66:	e7b8      	b.n	800aada <_dtoa_r+0x28a>
 800ab68:	3101      	adds	r1, #1
 800ab6a:	6041      	str	r1, [r0, #4]
 800ab6c:	0052      	lsls	r2, r2, #1
 800ab6e:	e7b8      	b.n	800aae2 <_dtoa_r+0x292>
 800ab70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab72:	9a01      	ldr	r2, [sp, #4]
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	9b03      	ldr	r3, [sp, #12]
 800ab78:	2b0e      	cmp	r3, #14
 800ab7a:	f200 809d 	bhi.w	800acb8 <_dtoa_r+0x468>
 800ab7e:	2d00      	cmp	r5, #0
 800ab80:	f000 809a 	beq.w	800acb8 <_dtoa_r+0x468>
 800ab84:	9b00      	ldr	r3, [sp, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	dd32      	ble.n	800abf0 <_dtoa_r+0x3a0>
 800ab8a:	4ab7      	ldr	r2, [pc, #732]	; (800ae68 <_dtoa_r+0x618>)
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab98:	9b00      	ldr	r3, [sp, #0]
 800ab9a:	05d8      	lsls	r0, r3, #23
 800ab9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aba0:	d516      	bpl.n	800abd0 <_dtoa_r+0x380>
 800aba2:	4bb2      	ldr	r3, [pc, #712]	; (800ae6c <_dtoa_r+0x61c>)
 800aba4:	ec51 0b19 	vmov	r0, r1, d9
 800aba8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abac:	f7f5 fe4e 	bl	800084c <__aeabi_ddiv>
 800abb0:	f007 070f 	and.w	r7, r7, #15
 800abb4:	4682      	mov	sl, r0
 800abb6:	468b      	mov	fp, r1
 800abb8:	2503      	movs	r5, #3
 800abba:	4eac      	ldr	r6, [pc, #688]	; (800ae6c <_dtoa_r+0x61c>)
 800abbc:	b957      	cbnz	r7, 800abd4 <_dtoa_r+0x384>
 800abbe:	4642      	mov	r2, r8
 800abc0:	464b      	mov	r3, r9
 800abc2:	4650      	mov	r0, sl
 800abc4:	4659      	mov	r1, fp
 800abc6:	f7f5 fe41 	bl	800084c <__aeabi_ddiv>
 800abca:	4682      	mov	sl, r0
 800abcc:	468b      	mov	fp, r1
 800abce:	e028      	b.n	800ac22 <_dtoa_r+0x3d2>
 800abd0:	2502      	movs	r5, #2
 800abd2:	e7f2      	b.n	800abba <_dtoa_r+0x36a>
 800abd4:	07f9      	lsls	r1, r7, #31
 800abd6:	d508      	bpl.n	800abea <_dtoa_r+0x39a>
 800abd8:	4640      	mov	r0, r8
 800abda:	4649      	mov	r1, r9
 800abdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abe0:	f7f5 fd0a 	bl	80005f8 <__aeabi_dmul>
 800abe4:	3501      	adds	r5, #1
 800abe6:	4680      	mov	r8, r0
 800abe8:	4689      	mov	r9, r1
 800abea:	107f      	asrs	r7, r7, #1
 800abec:	3608      	adds	r6, #8
 800abee:	e7e5      	b.n	800abbc <_dtoa_r+0x36c>
 800abf0:	f000 809b 	beq.w	800ad2a <_dtoa_r+0x4da>
 800abf4:	9b00      	ldr	r3, [sp, #0]
 800abf6:	4f9d      	ldr	r7, [pc, #628]	; (800ae6c <_dtoa_r+0x61c>)
 800abf8:	425e      	negs	r6, r3
 800abfa:	4b9b      	ldr	r3, [pc, #620]	; (800ae68 <_dtoa_r+0x618>)
 800abfc:	f006 020f 	and.w	r2, r6, #15
 800ac00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	ec51 0b19 	vmov	r0, r1, d9
 800ac0c:	f7f5 fcf4 	bl	80005f8 <__aeabi_dmul>
 800ac10:	1136      	asrs	r6, r6, #4
 800ac12:	4682      	mov	sl, r0
 800ac14:	468b      	mov	fp, r1
 800ac16:	2300      	movs	r3, #0
 800ac18:	2502      	movs	r5, #2
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d17a      	bne.n	800ad14 <_dtoa_r+0x4c4>
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1d3      	bne.n	800abca <_dtoa_r+0x37a>
 800ac22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8082 	beq.w	800ad2e <_dtoa_r+0x4de>
 800ac2a:	4b91      	ldr	r3, [pc, #580]	; (800ae70 <_dtoa_r+0x620>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4650      	mov	r0, sl
 800ac30:	4659      	mov	r1, fp
 800ac32:	f7f5 ff53 	bl	8000adc <__aeabi_dcmplt>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d079      	beq.n	800ad2e <_dtoa_r+0x4de>
 800ac3a:	9b03      	ldr	r3, [sp, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d076      	beq.n	800ad2e <_dtoa_r+0x4de>
 800ac40:	9b02      	ldr	r3, [sp, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	dd36      	ble.n	800acb4 <_dtoa_r+0x464>
 800ac46:	9b00      	ldr	r3, [sp, #0]
 800ac48:	4650      	mov	r0, sl
 800ac4a:	4659      	mov	r1, fp
 800ac4c:	1e5f      	subs	r7, r3, #1
 800ac4e:	2200      	movs	r2, #0
 800ac50:	4b88      	ldr	r3, [pc, #544]	; (800ae74 <_dtoa_r+0x624>)
 800ac52:	f7f5 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ac56:	9e02      	ldr	r6, [sp, #8]
 800ac58:	4682      	mov	sl, r0
 800ac5a:	468b      	mov	fp, r1
 800ac5c:	3501      	adds	r5, #1
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f7f5 fc60 	bl	8000524 <__aeabi_i2d>
 800ac64:	4652      	mov	r2, sl
 800ac66:	465b      	mov	r3, fp
 800ac68:	f7f5 fcc6 	bl	80005f8 <__aeabi_dmul>
 800ac6c:	4b82      	ldr	r3, [pc, #520]	; (800ae78 <_dtoa_r+0x628>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f7f5 fb0c 	bl	800028c <__adddf3>
 800ac74:	46d0      	mov	r8, sl
 800ac76:	46d9      	mov	r9, fp
 800ac78:	4682      	mov	sl, r0
 800ac7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	d158      	bne.n	800ad34 <_dtoa_r+0x4e4>
 800ac82:	4b7e      	ldr	r3, [pc, #504]	; (800ae7c <_dtoa_r+0x62c>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	4640      	mov	r0, r8
 800ac88:	4649      	mov	r1, r9
 800ac8a:	f7f5 fafd 	bl	8000288 <__aeabi_dsub>
 800ac8e:	4652      	mov	r2, sl
 800ac90:	465b      	mov	r3, fp
 800ac92:	4680      	mov	r8, r0
 800ac94:	4689      	mov	r9, r1
 800ac96:	f7f5 ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	f040 8295 	bne.w	800b1ca <_dtoa_r+0x97a>
 800aca0:	4652      	mov	r2, sl
 800aca2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aca6:	4640      	mov	r0, r8
 800aca8:	4649      	mov	r1, r9
 800acaa:	f7f5 ff17 	bl	8000adc <__aeabi_dcmplt>
 800acae:	2800      	cmp	r0, #0
 800acb0:	f040 8289 	bne.w	800b1c6 <_dtoa_r+0x976>
 800acb4:	ec5b ab19 	vmov	sl, fp, d9
 800acb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f2c0 8148 	blt.w	800af50 <_dtoa_r+0x700>
 800acc0:	9a00      	ldr	r2, [sp, #0]
 800acc2:	2a0e      	cmp	r2, #14
 800acc4:	f300 8144 	bgt.w	800af50 <_dtoa_r+0x700>
 800acc8:	4b67      	ldr	r3, [pc, #412]	; (800ae68 <_dtoa_r+0x618>)
 800acca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f280 80d5 	bge.w	800ae84 <_dtoa_r+0x634>
 800acda:	9b03      	ldr	r3, [sp, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f300 80d1 	bgt.w	800ae84 <_dtoa_r+0x634>
 800ace2:	f040 826f 	bne.w	800b1c4 <_dtoa_r+0x974>
 800ace6:	4b65      	ldr	r3, [pc, #404]	; (800ae7c <_dtoa_r+0x62c>)
 800ace8:	2200      	movs	r2, #0
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	f7f5 fc83 	bl	80005f8 <__aeabi_dmul>
 800acf2:	4652      	mov	r2, sl
 800acf4:	465b      	mov	r3, fp
 800acf6:	f7f5 ff05 	bl	8000b04 <__aeabi_dcmpge>
 800acfa:	9e03      	ldr	r6, [sp, #12]
 800acfc:	4637      	mov	r7, r6
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f040 8245 	bne.w	800b18e <_dtoa_r+0x93e>
 800ad04:	9d01      	ldr	r5, [sp, #4]
 800ad06:	2331      	movs	r3, #49	; 0x31
 800ad08:	f805 3b01 	strb.w	r3, [r5], #1
 800ad0c:	9b00      	ldr	r3, [sp, #0]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	e240      	b.n	800b196 <_dtoa_r+0x946>
 800ad14:	07f2      	lsls	r2, r6, #31
 800ad16:	d505      	bpl.n	800ad24 <_dtoa_r+0x4d4>
 800ad18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad1c:	f7f5 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ad20:	3501      	adds	r5, #1
 800ad22:	2301      	movs	r3, #1
 800ad24:	1076      	asrs	r6, r6, #1
 800ad26:	3708      	adds	r7, #8
 800ad28:	e777      	b.n	800ac1a <_dtoa_r+0x3ca>
 800ad2a:	2502      	movs	r5, #2
 800ad2c:	e779      	b.n	800ac22 <_dtoa_r+0x3d2>
 800ad2e:	9f00      	ldr	r7, [sp, #0]
 800ad30:	9e03      	ldr	r6, [sp, #12]
 800ad32:	e794      	b.n	800ac5e <_dtoa_r+0x40e>
 800ad34:	9901      	ldr	r1, [sp, #4]
 800ad36:	4b4c      	ldr	r3, [pc, #304]	; (800ae68 <_dtoa_r+0x618>)
 800ad38:	4431      	add	r1, r6
 800ad3a:	910d      	str	r1, [sp, #52]	; 0x34
 800ad3c:	9908      	ldr	r1, [sp, #32]
 800ad3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad46:	2900      	cmp	r1, #0
 800ad48:	d043      	beq.n	800add2 <_dtoa_r+0x582>
 800ad4a:	494d      	ldr	r1, [pc, #308]	; (800ae80 <_dtoa_r+0x630>)
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	f7f5 fd7d 	bl	800084c <__aeabi_ddiv>
 800ad52:	4652      	mov	r2, sl
 800ad54:	465b      	mov	r3, fp
 800ad56:	f7f5 fa97 	bl	8000288 <__aeabi_dsub>
 800ad5a:	9d01      	ldr	r5, [sp, #4]
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	468b      	mov	fp, r1
 800ad60:	4649      	mov	r1, r9
 800ad62:	4640      	mov	r0, r8
 800ad64:	f7f5 fef8 	bl	8000b58 <__aeabi_d2iz>
 800ad68:	4606      	mov	r6, r0
 800ad6a:	f7f5 fbdb 	bl	8000524 <__aeabi_i2d>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fa87 	bl	8000288 <__aeabi_dsub>
 800ad7a:	3630      	adds	r6, #48	; 0x30
 800ad7c:	f805 6b01 	strb.w	r6, [r5], #1
 800ad80:	4652      	mov	r2, sl
 800ad82:	465b      	mov	r3, fp
 800ad84:	4680      	mov	r8, r0
 800ad86:	4689      	mov	r9, r1
 800ad88:	f7f5 fea8 	bl	8000adc <__aeabi_dcmplt>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d163      	bne.n	800ae58 <_dtoa_r+0x608>
 800ad90:	4642      	mov	r2, r8
 800ad92:	464b      	mov	r3, r9
 800ad94:	4936      	ldr	r1, [pc, #216]	; (800ae70 <_dtoa_r+0x620>)
 800ad96:	2000      	movs	r0, #0
 800ad98:	f7f5 fa76 	bl	8000288 <__aeabi_dsub>
 800ad9c:	4652      	mov	r2, sl
 800ad9e:	465b      	mov	r3, fp
 800ada0:	f7f5 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f040 80b5 	bne.w	800af14 <_dtoa_r+0x6c4>
 800adaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adac:	429d      	cmp	r5, r3
 800adae:	d081      	beq.n	800acb4 <_dtoa_r+0x464>
 800adb0:	4b30      	ldr	r3, [pc, #192]	; (800ae74 <_dtoa_r+0x624>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	4650      	mov	r0, sl
 800adb6:	4659      	mov	r1, fp
 800adb8:	f7f5 fc1e 	bl	80005f8 <__aeabi_dmul>
 800adbc:	4b2d      	ldr	r3, [pc, #180]	; (800ae74 <_dtoa_r+0x624>)
 800adbe:	4682      	mov	sl, r0
 800adc0:	468b      	mov	fp, r1
 800adc2:	4640      	mov	r0, r8
 800adc4:	4649      	mov	r1, r9
 800adc6:	2200      	movs	r2, #0
 800adc8:	f7f5 fc16 	bl	80005f8 <__aeabi_dmul>
 800adcc:	4680      	mov	r8, r0
 800adce:	4689      	mov	r9, r1
 800add0:	e7c6      	b.n	800ad60 <_dtoa_r+0x510>
 800add2:	4650      	mov	r0, sl
 800add4:	4659      	mov	r1, fp
 800add6:	f7f5 fc0f 	bl	80005f8 <__aeabi_dmul>
 800adda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800addc:	9d01      	ldr	r5, [sp, #4]
 800adde:	930f      	str	r3, [sp, #60]	; 0x3c
 800ade0:	4682      	mov	sl, r0
 800ade2:	468b      	mov	fp, r1
 800ade4:	4649      	mov	r1, r9
 800ade6:	4640      	mov	r0, r8
 800ade8:	f7f5 feb6 	bl	8000b58 <__aeabi_d2iz>
 800adec:	4606      	mov	r6, r0
 800adee:	f7f5 fb99 	bl	8000524 <__aeabi_i2d>
 800adf2:	3630      	adds	r6, #48	; 0x30
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4640      	mov	r0, r8
 800adfa:	4649      	mov	r1, r9
 800adfc:	f7f5 fa44 	bl	8000288 <__aeabi_dsub>
 800ae00:	f805 6b01 	strb.w	r6, [r5], #1
 800ae04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae06:	429d      	cmp	r5, r3
 800ae08:	4680      	mov	r8, r0
 800ae0a:	4689      	mov	r9, r1
 800ae0c:	f04f 0200 	mov.w	r2, #0
 800ae10:	d124      	bne.n	800ae5c <_dtoa_r+0x60c>
 800ae12:	4b1b      	ldr	r3, [pc, #108]	; (800ae80 <_dtoa_r+0x630>)
 800ae14:	4650      	mov	r0, sl
 800ae16:	4659      	mov	r1, fp
 800ae18:	f7f5 fa38 	bl	800028c <__adddf3>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4640      	mov	r0, r8
 800ae22:	4649      	mov	r1, r9
 800ae24:	f7f5 fe78 	bl	8000b18 <__aeabi_dcmpgt>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d173      	bne.n	800af14 <_dtoa_r+0x6c4>
 800ae2c:	4652      	mov	r2, sl
 800ae2e:	465b      	mov	r3, fp
 800ae30:	4913      	ldr	r1, [pc, #76]	; (800ae80 <_dtoa_r+0x630>)
 800ae32:	2000      	movs	r0, #0
 800ae34:	f7f5 fa28 	bl	8000288 <__aeabi_dsub>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4640      	mov	r0, r8
 800ae3e:	4649      	mov	r1, r9
 800ae40:	f7f5 fe4c 	bl	8000adc <__aeabi_dcmplt>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	f43f af35 	beq.w	800acb4 <_dtoa_r+0x464>
 800ae4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae4c:	1e6b      	subs	r3, r5, #1
 800ae4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae54:	2b30      	cmp	r3, #48	; 0x30
 800ae56:	d0f8      	beq.n	800ae4a <_dtoa_r+0x5fa>
 800ae58:	9700      	str	r7, [sp, #0]
 800ae5a:	e049      	b.n	800aef0 <_dtoa_r+0x6a0>
 800ae5c:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <_dtoa_r+0x624>)
 800ae5e:	f7f5 fbcb 	bl	80005f8 <__aeabi_dmul>
 800ae62:	4680      	mov	r8, r0
 800ae64:	4689      	mov	r9, r1
 800ae66:	e7bd      	b.n	800ade4 <_dtoa_r+0x594>
 800ae68:	0800f2e0 	.word	0x0800f2e0
 800ae6c:	0800f2b8 	.word	0x0800f2b8
 800ae70:	3ff00000 	.word	0x3ff00000
 800ae74:	40240000 	.word	0x40240000
 800ae78:	401c0000 	.word	0x401c0000
 800ae7c:	40140000 	.word	0x40140000
 800ae80:	3fe00000 	.word	0x3fe00000
 800ae84:	9d01      	ldr	r5, [sp, #4]
 800ae86:	4656      	mov	r6, sl
 800ae88:	465f      	mov	r7, fp
 800ae8a:	4642      	mov	r2, r8
 800ae8c:	464b      	mov	r3, r9
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4639      	mov	r1, r7
 800ae92:	f7f5 fcdb 	bl	800084c <__aeabi_ddiv>
 800ae96:	f7f5 fe5f 	bl	8000b58 <__aeabi_d2iz>
 800ae9a:	4682      	mov	sl, r0
 800ae9c:	f7f5 fb42 	bl	8000524 <__aeabi_i2d>
 800aea0:	4642      	mov	r2, r8
 800aea2:	464b      	mov	r3, r9
 800aea4:	f7f5 fba8 	bl	80005f8 <__aeabi_dmul>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4630      	mov	r0, r6
 800aeae:	4639      	mov	r1, r7
 800aeb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aeb4:	f7f5 f9e8 	bl	8000288 <__aeabi_dsub>
 800aeb8:	f805 6b01 	strb.w	r6, [r5], #1
 800aebc:	9e01      	ldr	r6, [sp, #4]
 800aebe:	9f03      	ldr	r7, [sp, #12]
 800aec0:	1bae      	subs	r6, r5, r6
 800aec2:	42b7      	cmp	r7, r6
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	d135      	bne.n	800af36 <_dtoa_r+0x6e6>
 800aeca:	f7f5 f9df 	bl	800028c <__adddf3>
 800aece:	4642      	mov	r2, r8
 800aed0:	464b      	mov	r3, r9
 800aed2:	4606      	mov	r6, r0
 800aed4:	460f      	mov	r7, r1
 800aed6:	f7f5 fe1f 	bl	8000b18 <__aeabi_dcmpgt>
 800aeda:	b9d0      	cbnz	r0, 800af12 <_dtoa_r+0x6c2>
 800aedc:	4642      	mov	r2, r8
 800aede:	464b      	mov	r3, r9
 800aee0:	4630      	mov	r0, r6
 800aee2:	4639      	mov	r1, r7
 800aee4:	f7f5 fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800aee8:	b110      	cbz	r0, 800aef0 <_dtoa_r+0x6a0>
 800aeea:	f01a 0f01 	tst.w	sl, #1
 800aeee:	d110      	bne.n	800af12 <_dtoa_r+0x6c2>
 800aef0:	4620      	mov	r0, r4
 800aef2:	ee18 1a10 	vmov	r1, s16
 800aef6:	f000 fee3 	bl	800bcc0 <_Bfree>
 800aefa:	2300      	movs	r3, #0
 800aefc:	9800      	ldr	r0, [sp, #0]
 800aefe:	702b      	strb	r3, [r5, #0]
 800af00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af02:	3001      	adds	r0, #1
 800af04:	6018      	str	r0, [r3, #0]
 800af06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f43f acf1 	beq.w	800a8f0 <_dtoa_r+0xa0>
 800af0e:	601d      	str	r5, [r3, #0]
 800af10:	e4ee      	b.n	800a8f0 <_dtoa_r+0xa0>
 800af12:	9f00      	ldr	r7, [sp, #0]
 800af14:	462b      	mov	r3, r5
 800af16:	461d      	mov	r5, r3
 800af18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af1c:	2a39      	cmp	r2, #57	; 0x39
 800af1e:	d106      	bne.n	800af2e <_dtoa_r+0x6de>
 800af20:	9a01      	ldr	r2, [sp, #4]
 800af22:	429a      	cmp	r2, r3
 800af24:	d1f7      	bne.n	800af16 <_dtoa_r+0x6c6>
 800af26:	9901      	ldr	r1, [sp, #4]
 800af28:	2230      	movs	r2, #48	; 0x30
 800af2a:	3701      	adds	r7, #1
 800af2c:	700a      	strb	r2, [r1, #0]
 800af2e:	781a      	ldrb	r2, [r3, #0]
 800af30:	3201      	adds	r2, #1
 800af32:	701a      	strb	r2, [r3, #0]
 800af34:	e790      	b.n	800ae58 <_dtoa_r+0x608>
 800af36:	4ba6      	ldr	r3, [pc, #664]	; (800b1d0 <_dtoa_r+0x980>)
 800af38:	2200      	movs	r2, #0
 800af3a:	f7f5 fb5d 	bl	80005f8 <__aeabi_dmul>
 800af3e:	2200      	movs	r2, #0
 800af40:	2300      	movs	r3, #0
 800af42:	4606      	mov	r6, r0
 800af44:	460f      	mov	r7, r1
 800af46:	f7f5 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d09d      	beq.n	800ae8a <_dtoa_r+0x63a>
 800af4e:	e7cf      	b.n	800aef0 <_dtoa_r+0x6a0>
 800af50:	9a08      	ldr	r2, [sp, #32]
 800af52:	2a00      	cmp	r2, #0
 800af54:	f000 80d7 	beq.w	800b106 <_dtoa_r+0x8b6>
 800af58:	9a06      	ldr	r2, [sp, #24]
 800af5a:	2a01      	cmp	r2, #1
 800af5c:	f300 80ba 	bgt.w	800b0d4 <_dtoa_r+0x884>
 800af60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af62:	2a00      	cmp	r2, #0
 800af64:	f000 80b2 	beq.w	800b0cc <_dtoa_r+0x87c>
 800af68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af6c:	9e07      	ldr	r6, [sp, #28]
 800af6e:	9d04      	ldr	r5, [sp, #16]
 800af70:	9a04      	ldr	r2, [sp, #16]
 800af72:	441a      	add	r2, r3
 800af74:	9204      	str	r2, [sp, #16]
 800af76:	9a05      	ldr	r2, [sp, #20]
 800af78:	2101      	movs	r1, #1
 800af7a:	441a      	add	r2, r3
 800af7c:	4620      	mov	r0, r4
 800af7e:	9205      	str	r2, [sp, #20]
 800af80:	f000 ffa0 	bl	800bec4 <__i2b>
 800af84:	4607      	mov	r7, r0
 800af86:	2d00      	cmp	r5, #0
 800af88:	dd0c      	ble.n	800afa4 <_dtoa_r+0x754>
 800af8a:	9b05      	ldr	r3, [sp, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	dd09      	ble.n	800afa4 <_dtoa_r+0x754>
 800af90:	42ab      	cmp	r3, r5
 800af92:	9a04      	ldr	r2, [sp, #16]
 800af94:	bfa8      	it	ge
 800af96:	462b      	movge	r3, r5
 800af98:	1ad2      	subs	r2, r2, r3
 800af9a:	9204      	str	r2, [sp, #16]
 800af9c:	9a05      	ldr	r2, [sp, #20]
 800af9e:	1aed      	subs	r5, r5, r3
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	9305      	str	r3, [sp, #20]
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	b31b      	cbz	r3, 800aff0 <_dtoa_r+0x7a0>
 800afa8:	9b08      	ldr	r3, [sp, #32]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 80af 	beq.w	800b10e <_dtoa_r+0x8be>
 800afb0:	2e00      	cmp	r6, #0
 800afb2:	dd13      	ble.n	800afdc <_dtoa_r+0x78c>
 800afb4:	4639      	mov	r1, r7
 800afb6:	4632      	mov	r2, r6
 800afb8:	4620      	mov	r0, r4
 800afba:	f001 f843 	bl	800c044 <__pow5mult>
 800afbe:	ee18 2a10 	vmov	r2, s16
 800afc2:	4601      	mov	r1, r0
 800afc4:	4607      	mov	r7, r0
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 ff92 	bl	800bef0 <__multiply>
 800afcc:	ee18 1a10 	vmov	r1, s16
 800afd0:	4680      	mov	r8, r0
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 fe74 	bl	800bcc0 <_Bfree>
 800afd8:	ee08 8a10 	vmov	s16, r8
 800afdc:	9b07      	ldr	r3, [sp, #28]
 800afde:	1b9a      	subs	r2, r3, r6
 800afe0:	d006      	beq.n	800aff0 <_dtoa_r+0x7a0>
 800afe2:	ee18 1a10 	vmov	r1, s16
 800afe6:	4620      	mov	r0, r4
 800afe8:	f001 f82c 	bl	800c044 <__pow5mult>
 800afec:	ee08 0a10 	vmov	s16, r0
 800aff0:	2101      	movs	r1, #1
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 ff66 	bl	800bec4 <__i2b>
 800aff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800affa:	2b00      	cmp	r3, #0
 800affc:	4606      	mov	r6, r0
 800affe:	f340 8088 	ble.w	800b112 <_dtoa_r+0x8c2>
 800b002:	461a      	mov	r2, r3
 800b004:	4601      	mov	r1, r0
 800b006:	4620      	mov	r0, r4
 800b008:	f001 f81c 	bl	800c044 <__pow5mult>
 800b00c:	9b06      	ldr	r3, [sp, #24]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	4606      	mov	r6, r0
 800b012:	f340 8081 	ble.w	800b118 <_dtoa_r+0x8c8>
 800b016:	f04f 0800 	mov.w	r8, #0
 800b01a:	6933      	ldr	r3, [r6, #16]
 800b01c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b020:	6918      	ldr	r0, [r3, #16]
 800b022:	f000 feff 	bl	800be24 <__hi0bits>
 800b026:	f1c0 0020 	rsb	r0, r0, #32
 800b02a:	9b05      	ldr	r3, [sp, #20]
 800b02c:	4418      	add	r0, r3
 800b02e:	f010 001f 	ands.w	r0, r0, #31
 800b032:	f000 8092 	beq.w	800b15a <_dtoa_r+0x90a>
 800b036:	f1c0 0320 	rsb	r3, r0, #32
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	f340 808a 	ble.w	800b154 <_dtoa_r+0x904>
 800b040:	f1c0 001c 	rsb	r0, r0, #28
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	4403      	add	r3, r0
 800b048:	9304      	str	r3, [sp, #16]
 800b04a:	9b05      	ldr	r3, [sp, #20]
 800b04c:	4403      	add	r3, r0
 800b04e:	4405      	add	r5, r0
 800b050:	9305      	str	r3, [sp, #20]
 800b052:	9b04      	ldr	r3, [sp, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	dd07      	ble.n	800b068 <_dtoa_r+0x818>
 800b058:	ee18 1a10 	vmov	r1, s16
 800b05c:	461a      	mov	r2, r3
 800b05e:	4620      	mov	r0, r4
 800b060:	f001 f84a 	bl	800c0f8 <__lshift>
 800b064:	ee08 0a10 	vmov	s16, r0
 800b068:	9b05      	ldr	r3, [sp, #20]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	dd05      	ble.n	800b07a <_dtoa_r+0x82a>
 800b06e:	4631      	mov	r1, r6
 800b070:	461a      	mov	r2, r3
 800b072:	4620      	mov	r0, r4
 800b074:	f001 f840 	bl	800c0f8 <__lshift>
 800b078:	4606      	mov	r6, r0
 800b07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d06e      	beq.n	800b15e <_dtoa_r+0x90e>
 800b080:	ee18 0a10 	vmov	r0, s16
 800b084:	4631      	mov	r1, r6
 800b086:	f001 f8a7 	bl	800c1d8 <__mcmp>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	da67      	bge.n	800b15e <_dtoa_r+0x90e>
 800b08e:	9b00      	ldr	r3, [sp, #0]
 800b090:	3b01      	subs	r3, #1
 800b092:	ee18 1a10 	vmov	r1, s16
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	220a      	movs	r2, #10
 800b09a:	2300      	movs	r3, #0
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 fe31 	bl	800bd04 <__multadd>
 800b0a2:	9b08      	ldr	r3, [sp, #32]
 800b0a4:	ee08 0a10 	vmov	s16, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 81b1 	beq.w	800b410 <_dtoa_r+0xbc0>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	220a      	movs	r2, #10
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f000 fe25 	bl	800bd04 <__multadd>
 800b0ba:	9b02      	ldr	r3, [sp, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	4607      	mov	r7, r0
 800b0c0:	f300 808e 	bgt.w	800b1e0 <_dtoa_r+0x990>
 800b0c4:	9b06      	ldr	r3, [sp, #24]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	dc51      	bgt.n	800b16e <_dtoa_r+0x91e>
 800b0ca:	e089      	b.n	800b1e0 <_dtoa_r+0x990>
 800b0cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0d2:	e74b      	b.n	800af6c <_dtoa_r+0x71c>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	1e5e      	subs	r6, r3, #1
 800b0d8:	9b07      	ldr	r3, [sp, #28]
 800b0da:	42b3      	cmp	r3, r6
 800b0dc:	bfbf      	itttt	lt
 800b0de:	9b07      	ldrlt	r3, [sp, #28]
 800b0e0:	9607      	strlt	r6, [sp, #28]
 800b0e2:	1af2      	sublt	r2, r6, r3
 800b0e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b0e6:	bfb6      	itet	lt
 800b0e8:	189b      	addlt	r3, r3, r2
 800b0ea:	1b9e      	subge	r6, r3, r6
 800b0ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	bfb8      	it	lt
 800b0f2:	2600      	movlt	r6, #0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	bfb7      	itett	lt
 800b0f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b0fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b100:	1a9d      	sublt	r5, r3, r2
 800b102:	2300      	movlt	r3, #0
 800b104:	e734      	b.n	800af70 <_dtoa_r+0x720>
 800b106:	9e07      	ldr	r6, [sp, #28]
 800b108:	9d04      	ldr	r5, [sp, #16]
 800b10a:	9f08      	ldr	r7, [sp, #32]
 800b10c:	e73b      	b.n	800af86 <_dtoa_r+0x736>
 800b10e:	9a07      	ldr	r2, [sp, #28]
 800b110:	e767      	b.n	800afe2 <_dtoa_r+0x792>
 800b112:	9b06      	ldr	r3, [sp, #24]
 800b114:	2b01      	cmp	r3, #1
 800b116:	dc18      	bgt.n	800b14a <_dtoa_r+0x8fa>
 800b118:	f1ba 0f00 	cmp.w	sl, #0
 800b11c:	d115      	bne.n	800b14a <_dtoa_r+0x8fa>
 800b11e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b122:	b993      	cbnz	r3, 800b14a <_dtoa_r+0x8fa>
 800b124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b128:	0d1b      	lsrs	r3, r3, #20
 800b12a:	051b      	lsls	r3, r3, #20
 800b12c:	b183      	cbz	r3, 800b150 <_dtoa_r+0x900>
 800b12e:	9b04      	ldr	r3, [sp, #16]
 800b130:	3301      	adds	r3, #1
 800b132:	9304      	str	r3, [sp, #16]
 800b134:	9b05      	ldr	r3, [sp, #20]
 800b136:	3301      	adds	r3, #1
 800b138:	9305      	str	r3, [sp, #20]
 800b13a:	f04f 0801 	mov.w	r8, #1
 800b13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b140:	2b00      	cmp	r3, #0
 800b142:	f47f af6a 	bne.w	800b01a <_dtoa_r+0x7ca>
 800b146:	2001      	movs	r0, #1
 800b148:	e76f      	b.n	800b02a <_dtoa_r+0x7da>
 800b14a:	f04f 0800 	mov.w	r8, #0
 800b14e:	e7f6      	b.n	800b13e <_dtoa_r+0x8ee>
 800b150:	4698      	mov	r8, r3
 800b152:	e7f4      	b.n	800b13e <_dtoa_r+0x8ee>
 800b154:	f43f af7d 	beq.w	800b052 <_dtoa_r+0x802>
 800b158:	4618      	mov	r0, r3
 800b15a:	301c      	adds	r0, #28
 800b15c:	e772      	b.n	800b044 <_dtoa_r+0x7f4>
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	dc37      	bgt.n	800b1d4 <_dtoa_r+0x984>
 800b164:	9b06      	ldr	r3, [sp, #24]
 800b166:	2b02      	cmp	r3, #2
 800b168:	dd34      	ble.n	800b1d4 <_dtoa_r+0x984>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	9302      	str	r3, [sp, #8]
 800b16e:	9b02      	ldr	r3, [sp, #8]
 800b170:	b96b      	cbnz	r3, 800b18e <_dtoa_r+0x93e>
 800b172:	4631      	mov	r1, r6
 800b174:	2205      	movs	r2, #5
 800b176:	4620      	mov	r0, r4
 800b178:	f000 fdc4 	bl	800bd04 <__multadd>
 800b17c:	4601      	mov	r1, r0
 800b17e:	4606      	mov	r6, r0
 800b180:	ee18 0a10 	vmov	r0, s16
 800b184:	f001 f828 	bl	800c1d8 <__mcmp>
 800b188:	2800      	cmp	r0, #0
 800b18a:	f73f adbb 	bgt.w	800ad04 <_dtoa_r+0x4b4>
 800b18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b190:	9d01      	ldr	r5, [sp, #4]
 800b192:	43db      	mvns	r3, r3
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	f04f 0800 	mov.w	r8, #0
 800b19a:	4631      	mov	r1, r6
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 fd8f 	bl	800bcc0 <_Bfree>
 800b1a2:	2f00      	cmp	r7, #0
 800b1a4:	f43f aea4 	beq.w	800aef0 <_dtoa_r+0x6a0>
 800b1a8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ac:	d005      	beq.n	800b1ba <_dtoa_r+0x96a>
 800b1ae:	45b8      	cmp	r8, r7
 800b1b0:	d003      	beq.n	800b1ba <_dtoa_r+0x96a>
 800b1b2:	4641      	mov	r1, r8
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fd83 	bl	800bcc0 <_Bfree>
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 fd7f 	bl	800bcc0 <_Bfree>
 800b1c2:	e695      	b.n	800aef0 <_dtoa_r+0x6a0>
 800b1c4:	2600      	movs	r6, #0
 800b1c6:	4637      	mov	r7, r6
 800b1c8:	e7e1      	b.n	800b18e <_dtoa_r+0x93e>
 800b1ca:	9700      	str	r7, [sp, #0]
 800b1cc:	4637      	mov	r7, r6
 800b1ce:	e599      	b.n	800ad04 <_dtoa_r+0x4b4>
 800b1d0:	40240000 	.word	0x40240000
 800b1d4:	9b08      	ldr	r3, [sp, #32]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 80ca 	beq.w	800b370 <_dtoa_r+0xb20>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	9302      	str	r3, [sp, #8]
 800b1e0:	2d00      	cmp	r5, #0
 800b1e2:	dd05      	ble.n	800b1f0 <_dtoa_r+0x9a0>
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	462a      	mov	r2, r5
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f000 ff85 	bl	800c0f8 <__lshift>
 800b1ee:	4607      	mov	r7, r0
 800b1f0:	f1b8 0f00 	cmp.w	r8, #0
 800b1f4:	d05b      	beq.n	800b2ae <_dtoa_r+0xa5e>
 800b1f6:	6879      	ldr	r1, [r7, #4]
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 fd21 	bl	800bc40 <_Balloc>
 800b1fe:	4605      	mov	r5, r0
 800b200:	b928      	cbnz	r0, 800b20e <_dtoa_r+0x9be>
 800b202:	4b87      	ldr	r3, [pc, #540]	; (800b420 <_dtoa_r+0xbd0>)
 800b204:	4602      	mov	r2, r0
 800b206:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b20a:	f7ff bb3b 	b.w	800a884 <_dtoa_r+0x34>
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	3202      	adds	r2, #2
 800b212:	0092      	lsls	r2, r2, #2
 800b214:	f107 010c 	add.w	r1, r7, #12
 800b218:	300c      	adds	r0, #12
 800b21a:	f7fd f92d 	bl	8008478 <memcpy>
 800b21e:	2201      	movs	r2, #1
 800b220:	4629      	mov	r1, r5
 800b222:	4620      	mov	r0, r4
 800b224:	f000 ff68 	bl	800c0f8 <__lshift>
 800b228:	9b01      	ldr	r3, [sp, #4]
 800b22a:	f103 0901 	add.w	r9, r3, #1
 800b22e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b232:	4413      	add	r3, r2
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	f00a 0301 	and.w	r3, sl, #1
 800b23a:	46b8      	mov	r8, r7
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	4607      	mov	r7, r0
 800b240:	4631      	mov	r1, r6
 800b242:	ee18 0a10 	vmov	r0, s16
 800b246:	f7ff fa75 	bl	800a734 <quorem>
 800b24a:	4641      	mov	r1, r8
 800b24c:	9002      	str	r0, [sp, #8]
 800b24e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b252:	ee18 0a10 	vmov	r0, s16
 800b256:	f000 ffbf 	bl	800c1d8 <__mcmp>
 800b25a:	463a      	mov	r2, r7
 800b25c:	9003      	str	r0, [sp, #12]
 800b25e:	4631      	mov	r1, r6
 800b260:	4620      	mov	r0, r4
 800b262:	f000 ffd5 	bl	800c210 <__mdiff>
 800b266:	68c2      	ldr	r2, [r0, #12]
 800b268:	f109 3bff 	add.w	fp, r9, #4294967295
 800b26c:	4605      	mov	r5, r0
 800b26e:	bb02      	cbnz	r2, 800b2b2 <_dtoa_r+0xa62>
 800b270:	4601      	mov	r1, r0
 800b272:	ee18 0a10 	vmov	r0, s16
 800b276:	f000 ffaf 	bl	800c1d8 <__mcmp>
 800b27a:	4602      	mov	r2, r0
 800b27c:	4629      	mov	r1, r5
 800b27e:	4620      	mov	r0, r4
 800b280:	9207      	str	r2, [sp, #28]
 800b282:	f000 fd1d 	bl	800bcc0 <_Bfree>
 800b286:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b28a:	ea43 0102 	orr.w	r1, r3, r2
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	430b      	orrs	r3, r1
 800b292:	464d      	mov	r5, r9
 800b294:	d10f      	bne.n	800b2b6 <_dtoa_r+0xa66>
 800b296:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b29a:	d02a      	beq.n	800b2f2 <_dtoa_r+0xaa2>
 800b29c:	9b03      	ldr	r3, [sp, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	dd02      	ble.n	800b2a8 <_dtoa_r+0xa58>
 800b2a2:	9b02      	ldr	r3, [sp, #8]
 800b2a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b2a8:	f88b a000 	strb.w	sl, [fp]
 800b2ac:	e775      	b.n	800b19a <_dtoa_r+0x94a>
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	e7ba      	b.n	800b228 <_dtoa_r+0x9d8>
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	e7e2      	b.n	800b27c <_dtoa_r+0xa2c>
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	db04      	blt.n	800b2c6 <_dtoa_r+0xa76>
 800b2bc:	9906      	ldr	r1, [sp, #24]
 800b2be:	430b      	orrs	r3, r1
 800b2c0:	9904      	ldr	r1, [sp, #16]
 800b2c2:	430b      	orrs	r3, r1
 800b2c4:	d122      	bne.n	800b30c <_dtoa_r+0xabc>
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	ddee      	ble.n	800b2a8 <_dtoa_r+0xa58>
 800b2ca:	ee18 1a10 	vmov	r1, s16
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 ff11 	bl	800c0f8 <__lshift>
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	ee08 0a10 	vmov	s16, r0
 800b2dc:	f000 ff7c 	bl	800c1d8 <__mcmp>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	dc03      	bgt.n	800b2ec <_dtoa_r+0xa9c>
 800b2e4:	d1e0      	bne.n	800b2a8 <_dtoa_r+0xa58>
 800b2e6:	f01a 0f01 	tst.w	sl, #1
 800b2ea:	d0dd      	beq.n	800b2a8 <_dtoa_r+0xa58>
 800b2ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2f0:	d1d7      	bne.n	800b2a2 <_dtoa_r+0xa52>
 800b2f2:	2339      	movs	r3, #57	; 0x39
 800b2f4:	f88b 3000 	strb.w	r3, [fp]
 800b2f8:	462b      	mov	r3, r5
 800b2fa:	461d      	mov	r5, r3
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b302:	2a39      	cmp	r2, #57	; 0x39
 800b304:	d071      	beq.n	800b3ea <_dtoa_r+0xb9a>
 800b306:	3201      	adds	r2, #1
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	e746      	b.n	800b19a <_dtoa_r+0x94a>
 800b30c:	2a00      	cmp	r2, #0
 800b30e:	dd07      	ble.n	800b320 <_dtoa_r+0xad0>
 800b310:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b314:	d0ed      	beq.n	800b2f2 <_dtoa_r+0xaa2>
 800b316:	f10a 0301 	add.w	r3, sl, #1
 800b31a:	f88b 3000 	strb.w	r3, [fp]
 800b31e:	e73c      	b.n	800b19a <_dtoa_r+0x94a>
 800b320:	9b05      	ldr	r3, [sp, #20]
 800b322:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b326:	4599      	cmp	r9, r3
 800b328:	d047      	beq.n	800b3ba <_dtoa_r+0xb6a>
 800b32a:	ee18 1a10 	vmov	r1, s16
 800b32e:	2300      	movs	r3, #0
 800b330:	220a      	movs	r2, #10
 800b332:	4620      	mov	r0, r4
 800b334:	f000 fce6 	bl	800bd04 <__multadd>
 800b338:	45b8      	cmp	r8, r7
 800b33a:	ee08 0a10 	vmov	s16, r0
 800b33e:	f04f 0300 	mov.w	r3, #0
 800b342:	f04f 020a 	mov.w	r2, #10
 800b346:	4641      	mov	r1, r8
 800b348:	4620      	mov	r0, r4
 800b34a:	d106      	bne.n	800b35a <_dtoa_r+0xb0a>
 800b34c:	f000 fcda 	bl	800bd04 <__multadd>
 800b350:	4680      	mov	r8, r0
 800b352:	4607      	mov	r7, r0
 800b354:	f109 0901 	add.w	r9, r9, #1
 800b358:	e772      	b.n	800b240 <_dtoa_r+0x9f0>
 800b35a:	f000 fcd3 	bl	800bd04 <__multadd>
 800b35e:	4639      	mov	r1, r7
 800b360:	4680      	mov	r8, r0
 800b362:	2300      	movs	r3, #0
 800b364:	220a      	movs	r2, #10
 800b366:	4620      	mov	r0, r4
 800b368:	f000 fccc 	bl	800bd04 <__multadd>
 800b36c:	4607      	mov	r7, r0
 800b36e:	e7f1      	b.n	800b354 <_dtoa_r+0xb04>
 800b370:	9b03      	ldr	r3, [sp, #12]
 800b372:	9302      	str	r3, [sp, #8]
 800b374:	9d01      	ldr	r5, [sp, #4]
 800b376:	ee18 0a10 	vmov	r0, s16
 800b37a:	4631      	mov	r1, r6
 800b37c:	f7ff f9da 	bl	800a734 <quorem>
 800b380:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b384:	9b01      	ldr	r3, [sp, #4]
 800b386:	f805 ab01 	strb.w	sl, [r5], #1
 800b38a:	1aea      	subs	r2, r5, r3
 800b38c:	9b02      	ldr	r3, [sp, #8]
 800b38e:	4293      	cmp	r3, r2
 800b390:	dd09      	ble.n	800b3a6 <_dtoa_r+0xb56>
 800b392:	ee18 1a10 	vmov	r1, s16
 800b396:	2300      	movs	r3, #0
 800b398:	220a      	movs	r2, #10
 800b39a:	4620      	mov	r0, r4
 800b39c:	f000 fcb2 	bl	800bd04 <__multadd>
 800b3a0:	ee08 0a10 	vmov	s16, r0
 800b3a4:	e7e7      	b.n	800b376 <_dtoa_r+0xb26>
 800b3a6:	9b02      	ldr	r3, [sp, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bfc8      	it	gt
 800b3ac:	461d      	movgt	r5, r3
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	bfd8      	it	le
 800b3b2:	2501      	movle	r5, #1
 800b3b4:	441d      	add	r5, r3
 800b3b6:	f04f 0800 	mov.w	r8, #0
 800b3ba:	ee18 1a10 	vmov	r1, s16
 800b3be:	2201      	movs	r2, #1
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fe99 	bl	800c0f8 <__lshift>
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	ee08 0a10 	vmov	s16, r0
 800b3cc:	f000 ff04 	bl	800c1d8 <__mcmp>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	dc91      	bgt.n	800b2f8 <_dtoa_r+0xaa8>
 800b3d4:	d102      	bne.n	800b3dc <_dtoa_r+0xb8c>
 800b3d6:	f01a 0f01 	tst.w	sl, #1
 800b3da:	d18d      	bne.n	800b2f8 <_dtoa_r+0xaa8>
 800b3dc:	462b      	mov	r3, r5
 800b3de:	461d      	mov	r5, r3
 800b3e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3e4:	2a30      	cmp	r2, #48	; 0x30
 800b3e6:	d0fa      	beq.n	800b3de <_dtoa_r+0xb8e>
 800b3e8:	e6d7      	b.n	800b19a <_dtoa_r+0x94a>
 800b3ea:	9a01      	ldr	r2, [sp, #4]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d184      	bne.n	800b2fa <_dtoa_r+0xaaa>
 800b3f0:	9b00      	ldr	r3, [sp, #0]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	2331      	movs	r3, #49	; 0x31
 800b3f8:	7013      	strb	r3, [r2, #0]
 800b3fa:	e6ce      	b.n	800b19a <_dtoa_r+0x94a>
 800b3fc:	4b09      	ldr	r3, [pc, #36]	; (800b424 <_dtoa_r+0xbd4>)
 800b3fe:	f7ff ba95 	b.w	800a92c <_dtoa_r+0xdc>
 800b402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b404:	2b00      	cmp	r3, #0
 800b406:	f47f aa6e 	bne.w	800a8e6 <_dtoa_r+0x96>
 800b40a:	4b07      	ldr	r3, [pc, #28]	; (800b428 <_dtoa_r+0xbd8>)
 800b40c:	f7ff ba8e 	b.w	800a92c <_dtoa_r+0xdc>
 800b410:	9b02      	ldr	r3, [sp, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	dcae      	bgt.n	800b374 <_dtoa_r+0xb24>
 800b416:	9b06      	ldr	r3, [sp, #24]
 800b418:	2b02      	cmp	r3, #2
 800b41a:	f73f aea8 	bgt.w	800b16e <_dtoa_r+0x91e>
 800b41e:	e7a9      	b.n	800b374 <_dtoa_r+0xb24>
 800b420:	0800f1cf 	.word	0x0800f1cf
 800b424:	0800f0d1 	.word	0x0800f0d1
 800b428:	0800f150 	.word	0x0800f150

0800b42c <rshift>:
 800b42c:	6903      	ldr	r3, [r0, #16]
 800b42e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b436:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b43a:	f100 0414 	add.w	r4, r0, #20
 800b43e:	dd45      	ble.n	800b4cc <rshift+0xa0>
 800b440:	f011 011f 	ands.w	r1, r1, #31
 800b444:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b448:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b44c:	d10c      	bne.n	800b468 <rshift+0x3c>
 800b44e:	f100 0710 	add.w	r7, r0, #16
 800b452:	4629      	mov	r1, r5
 800b454:	42b1      	cmp	r1, r6
 800b456:	d334      	bcc.n	800b4c2 <rshift+0x96>
 800b458:	1a9b      	subs	r3, r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	1eea      	subs	r2, r5, #3
 800b45e:	4296      	cmp	r6, r2
 800b460:	bf38      	it	cc
 800b462:	2300      	movcc	r3, #0
 800b464:	4423      	add	r3, r4
 800b466:	e015      	b.n	800b494 <rshift+0x68>
 800b468:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b46c:	f1c1 0820 	rsb	r8, r1, #32
 800b470:	40cf      	lsrs	r7, r1
 800b472:	f105 0e04 	add.w	lr, r5, #4
 800b476:	46a1      	mov	r9, r4
 800b478:	4576      	cmp	r6, lr
 800b47a:	46f4      	mov	ip, lr
 800b47c:	d815      	bhi.n	800b4aa <rshift+0x7e>
 800b47e:	1a9a      	subs	r2, r3, r2
 800b480:	0092      	lsls	r2, r2, #2
 800b482:	3a04      	subs	r2, #4
 800b484:	3501      	adds	r5, #1
 800b486:	42ae      	cmp	r6, r5
 800b488:	bf38      	it	cc
 800b48a:	2200      	movcc	r2, #0
 800b48c:	18a3      	adds	r3, r4, r2
 800b48e:	50a7      	str	r7, [r4, r2]
 800b490:	b107      	cbz	r7, 800b494 <rshift+0x68>
 800b492:	3304      	adds	r3, #4
 800b494:	1b1a      	subs	r2, r3, r4
 800b496:	42a3      	cmp	r3, r4
 800b498:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b49c:	bf08      	it	eq
 800b49e:	2300      	moveq	r3, #0
 800b4a0:	6102      	str	r2, [r0, #16]
 800b4a2:	bf08      	it	eq
 800b4a4:	6143      	streq	r3, [r0, #20]
 800b4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4aa:	f8dc c000 	ldr.w	ip, [ip]
 800b4ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800b4b2:	ea4c 0707 	orr.w	r7, ip, r7
 800b4b6:	f849 7b04 	str.w	r7, [r9], #4
 800b4ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4be:	40cf      	lsrs	r7, r1
 800b4c0:	e7da      	b.n	800b478 <rshift+0x4c>
 800b4c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b4c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b4ca:	e7c3      	b.n	800b454 <rshift+0x28>
 800b4cc:	4623      	mov	r3, r4
 800b4ce:	e7e1      	b.n	800b494 <rshift+0x68>

0800b4d0 <__hexdig_fun>:
 800b4d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	d802      	bhi.n	800b4de <__hexdig_fun+0xe>
 800b4d8:	3820      	subs	r0, #32
 800b4da:	b2c0      	uxtb	r0, r0
 800b4dc:	4770      	bx	lr
 800b4de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	d801      	bhi.n	800b4ea <__hexdig_fun+0x1a>
 800b4e6:	3847      	subs	r0, #71	; 0x47
 800b4e8:	e7f7      	b.n	800b4da <__hexdig_fun+0xa>
 800b4ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b4ee:	2b05      	cmp	r3, #5
 800b4f0:	d801      	bhi.n	800b4f6 <__hexdig_fun+0x26>
 800b4f2:	3827      	subs	r0, #39	; 0x27
 800b4f4:	e7f1      	b.n	800b4da <__hexdig_fun+0xa>
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	4770      	bx	lr
	...

0800b4fc <__gethex>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	ed2d 8b02 	vpush	{d8}
 800b504:	b089      	sub	sp, #36	; 0x24
 800b506:	ee08 0a10 	vmov	s16, r0
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	4bb4      	ldr	r3, [pc, #720]	; (800b7e0 <__gethex+0x2e4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	4618      	mov	r0, r3
 800b514:	468b      	mov	fp, r1
 800b516:	4690      	mov	r8, r2
 800b518:	f7f4 fe5a 	bl	80001d0 <strlen>
 800b51c:	9b01      	ldr	r3, [sp, #4]
 800b51e:	f8db 2000 	ldr.w	r2, [fp]
 800b522:	4403      	add	r3, r0
 800b524:	4682      	mov	sl, r0
 800b526:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b52a:	9305      	str	r3, [sp, #20]
 800b52c:	1c93      	adds	r3, r2, #2
 800b52e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b532:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b536:	32fe      	adds	r2, #254	; 0xfe
 800b538:	18d1      	adds	r1, r2, r3
 800b53a:	461f      	mov	r7, r3
 800b53c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b540:	9100      	str	r1, [sp, #0]
 800b542:	2830      	cmp	r0, #48	; 0x30
 800b544:	d0f8      	beq.n	800b538 <__gethex+0x3c>
 800b546:	f7ff ffc3 	bl	800b4d0 <__hexdig_fun>
 800b54a:	4604      	mov	r4, r0
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d13a      	bne.n	800b5c6 <__gethex+0xca>
 800b550:	9901      	ldr	r1, [sp, #4]
 800b552:	4652      	mov	r2, sl
 800b554:	4638      	mov	r0, r7
 800b556:	f001 fa1f 	bl	800c998 <strncmp>
 800b55a:	4605      	mov	r5, r0
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d168      	bne.n	800b632 <__gethex+0x136>
 800b560:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b564:	eb07 060a 	add.w	r6, r7, sl
 800b568:	f7ff ffb2 	bl	800b4d0 <__hexdig_fun>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d062      	beq.n	800b636 <__gethex+0x13a>
 800b570:	4633      	mov	r3, r6
 800b572:	7818      	ldrb	r0, [r3, #0]
 800b574:	2830      	cmp	r0, #48	; 0x30
 800b576:	461f      	mov	r7, r3
 800b578:	f103 0301 	add.w	r3, r3, #1
 800b57c:	d0f9      	beq.n	800b572 <__gethex+0x76>
 800b57e:	f7ff ffa7 	bl	800b4d0 <__hexdig_fun>
 800b582:	2301      	movs	r3, #1
 800b584:	fab0 f480 	clz	r4, r0
 800b588:	0964      	lsrs	r4, r4, #5
 800b58a:	4635      	mov	r5, r6
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	463a      	mov	r2, r7
 800b590:	4616      	mov	r6, r2
 800b592:	3201      	adds	r2, #1
 800b594:	7830      	ldrb	r0, [r6, #0]
 800b596:	f7ff ff9b 	bl	800b4d0 <__hexdig_fun>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d1f8      	bne.n	800b590 <__gethex+0x94>
 800b59e:	9901      	ldr	r1, [sp, #4]
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f001 f9f8 	bl	800c998 <strncmp>
 800b5a8:	b980      	cbnz	r0, 800b5cc <__gethex+0xd0>
 800b5aa:	b94d      	cbnz	r5, 800b5c0 <__gethex+0xc4>
 800b5ac:	eb06 050a 	add.w	r5, r6, sl
 800b5b0:	462a      	mov	r2, r5
 800b5b2:	4616      	mov	r6, r2
 800b5b4:	3201      	adds	r2, #1
 800b5b6:	7830      	ldrb	r0, [r6, #0]
 800b5b8:	f7ff ff8a 	bl	800b4d0 <__hexdig_fun>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d1f8      	bne.n	800b5b2 <__gethex+0xb6>
 800b5c0:	1bad      	subs	r5, r5, r6
 800b5c2:	00ad      	lsls	r5, r5, #2
 800b5c4:	e004      	b.n	800b5d0 <__gethex+0xd4>
 800b5c6:	2400      	movs	r4, #0
 800b5c8:	4625      	mov	r5, r4
 800b5ca:	e7e0      	b.n	800b58e <__gethex+0x92>
 800b5cc:	2d00      	cmp	r5, #0
 800b5ce:	d1f7      	bne.n	800b5c0 <__gethex+0xc4>
 800b5d0:	7833      	ldrb	r3, [r6, #0]
 800b5d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b5d6:	2b50      	cmp	r3, #80	; 0x50
 800b5d8:	d13b      	bne.n	800b652 <__gethex+0x156>
 800b5da:	7873      	ldrb	r3, [r6, #1]
 800b5dc:	2b2b      	cmp	r3, #43	; 0x2b
 800b5de:	d02c      	beq.n	800b63a <__gethex+0x13e>
 800b5e0:	2b2d      	cmp	r3, #45	; 0x2d
 800b5e2:	d02e      	beq.n	800b642 <__gethex+0x146>
 800b5e4:	1c71      	adds	r1, r6, #1
 800b5e6:	f04f 0900 	mov.w	r9, #0
 800b5ea:	7808      	ldrb	r0, [r1, #0]
 800b5ec:	f7ff ff70 	bl	800b4d0 <__hexdig_fun>
 800b5f0:	1e43      	subs	r3, r0, #1
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b18      	cmp	r3, #24
 800b5f6:	d82c      	bhi.n	800b652 <__gethex+0x156>
 800b5f8:	f1a0 0210 	sub.w	r2, r0, #16
 800b5fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b600:	f7ff ff66 	bl	800b4d0 <__hexdig_fun>
 800b604:	1e43      	subs	r3, r0, #1
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b18      	cmp	r3, #24
 800b60a:	d91d      	bls.n	800b648 <__gethex+0x14c>
 800b60c:	f1b9 0f00 	cmp.w	r9, #0
 800b610:	d000      	beq.n	800b614 <__gethex+0x118>
 800b612:	4252      	negs	r2, r2
 800b614:	4415      	add	r5, r2
 800b616:	f8cb 1000 	str.w	r1, [fp]
 800b61a:	b1e4      	cbz	r4, 800b656 <__gethex+0x15a>
 800b61c:	9b00      	ldr	r3, [sp, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	bf14      	ite	ne
 800b622:	2700      	movne	r7, #0
 800b624:	2706      	moveq	r7, #6
 800b626:	4638      	mov	r0, r7
 800b628:	b009      	add	sp, #36	; 0x24
 800b62a:	ecbd 8b02 	vpop	{d8}
 800b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b632:	463e      	mov	r6, r7
 800b634:	4625      	mov	r5, r4
 800b636:	2401      	movs	r4, #1
 800b638:	e7ca      	b.n	800b5d0 <__gethex+0xd4>
 800b63a:	f04f 0900 	mov.w	r9, #0
 800b63e:	1cb1      	adds	r1, r6, #2
 800b640:	e7d3      	b.n	800b5ea <__gethex+0xee>
 800b642:	f04f 0901 	mov.w	r9, #1
 800b646:	e7fa      	b.n	800b63e <__gethex+0x142>
 800b648:	230a      	movs	r3, #10
 800b64a:	fb03 0202 	mla	r2, r3, r2, r0
 800b64e:	3a10      	subs	r2, #16
 800b650:	e7d4      	b.n	800b5fc <__gethex+0x100>
 800b652:	4631      	mov	r1, r6
 800b654:	e7df      	b.n	800b616 <__gethex+0x11a>
 800b656:	1bf3      	subs	r3, r6, r7
 800b658:	3b01      	subs	r3, #1
 800b65a:	4621      	mov	r1, r4
 800b65c:	2b07      	cmp	r3, #7
 800b65e:	dc0b      	bgt.n	800b678 <__gethex+0x17c>
 800b660:	ee18 0a10 	vmov	r0, s16
 800b664:	f000 faec 	bl	800bc40 <_Balloc>
 800b668:	4604      	mov	r4, r0
 800b66a:	b940      	cbnz	r0, 800b67e <__gethex+0x182>
 800b66c:	4b5d      	ldr	r3, [pc, #372]	; (800b7e4 <__gethex+0x2e8>)
 800b66e:	4602      	mov	r2, r0
 800b670:	21de      	movs	r1, #222	; 0xde
 800b672:	485d      	ldr	r0, [pc, #372]	; (800b7e8 <__gethex+0x2ec>)
 800b674:	f7fc fc12 	bl	8007e9c <__assert_func>
 800b678:	3101      	adds	r1, #1
 800b67a:	105b      	asrs	r3, r3, #1
 800b67c:	e7ee      	b.n	800b65c <__gethex+0x160>
 800b67e:	f100 0914 	add.w	r9, r0, #20
 800b682:	f04f 0b00 	mov.w	fp, #0
 800b686:	f1ca 0301 	rsb	r3, sl, #1
 800b68a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b68e:	f8cd b000 	str.w	fp, [sp]
 800b692:	9306      	str	r3, [sp, #24]
 800b694:	42b7      	cmp	r7, r6
 800b696:	d340      	bcc.n	800b71a <__gethex+0x21e>
 800b698:	9802      	ldr	r0, [sp, #8]
 800b69a:	9b00      	ldr	r3, [sp, #0]
 800b69c:	f840 3b04 	str.w	r3, [r0], #4
 800b6a0:	eba0 0009 	sub.w	r0, r0, r9
 800b6a4:	1080      	asrs	r0, r0, #2
 800b6a6:	0146      	lsls	r6, r0, #5
 800b6a8:	6120      	str	r0, [r4, #16]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fbba 	bl	800be24 <__hi0bits>
 800b6b0:	1a30      	subs	r0, r6, r0
 800b6b2:	f8d8 6000 	ldr.w	r6, [r8]
 800b6b6:	42b0      	cmp	r0, r6
 800b6b8:	dd63      	ble.n	800b782 <__gethex+0x286>
 800b6ba:	1b87      	subs	r7, r0, r6
 800b6bc:	4639      	mov	r1, r7
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 ff5e 	bl	800c580 <__any_on>
 800b6c4:	4682      	mov	sl, r0
 800b6c6:	b1a8      	cbz	r0, 800b6f4 <__gethex+0x1f8>
 800b6c8:	1e7b      	subs	r3, r7, #1
 800b6ca:	1159      	asrs	r1, r3, #5
 800b6cc:	f003 021f 	and.w	r2, r3, #31
 800b6d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b6d4:	f04f 0a01 	mov.w	sl, #1
 800b6d8:	fa0a f202 	lsl.w	r2, sl, r2
 800b6dc:	420a      	tst	r2, r1
 800b6de:	d009      	beq.n	800b6f4 <__gethex+0x1f8>
 800b6e0:	4553      	cmp	r3, sl
 800b6e2:	dd05      	ble.n	800b6f0 <__gethex+0x1f4>
 800b6e4:	1eb9      	subs	r1, r7, #2
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 ff4a 	bl	800c580 <__any_on>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d145      	bne.n	800b77c <__gethex+0x280>
 800b6f0:	f04f 0a02 	mov.w	sl, #2
 800b6f4:	4639      	mov	r1, r7
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7ff fe98 	bl	800b42c <rshift>
 800b6fc:	443d      	add	r5, r7
 800b6fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b702:	42ab      	cmp	r3, r5
 800b704:	da4c      	bge.n	800b7a0 <__gethex+0x2a4>
 800b706:	ee18 0a10 	vmov	r0, s16
 800b70a:	4621      	mov	r1, r4
 800b70c:	f000 fad8 	bl	800bcc0 <_Bfree>
 800b710:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b712:	2300      	movs	r3, #0
 800b714:	6013      	str	r3, [r2, #0]
 800b716:	27a3      	movs	r7, #163	; 0xa3
 800b718:	e785      	b.n	800b626 <__gethex+0x12a>
 800b71a:	1e73      	subs	r3, r6, #1
 800b71c:	9a05      	ldr	r2, [sp, #20]
 800b71e:	9303      	str	r3, [sp, #12]
 800b720:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b724:	4293      	cmp	r3, r2
 800b726:	d019      	beq.n	800b75c <__gethex+0x260>
 800b728:	f1bb 0f20 	cmp.w	fp, #32
 800b72c:	d107      	bne.n	800b73e <__gethex+0x242>
 800b72e:	9b02      	ldr	r3, [sp, #8]
 800b730:	9a00      	ldr	r2, [sp, #0]
 800b732:	f843 2b04 	str.w	r2, [r3], #4
 800b736:	9302      	str	r3, [sp, #8]
 800b738:	2300      	movs	r3, #0
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	469b      	mov	fp, r3
 800b73e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b742:	f7ff fec5 	bl	800b4d0 <__hexdig_fun>
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	f000 000f 	and.w	r0, r0, #15
 800b74c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b750:	4303      	orrs	r3, r0
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	f10b 0b04 	add.w	fp, fp, #4
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	e00d      	b.n	800b778 <__gethex+0x27c>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	9a06      	ldr	r2, [sp, #24]
 800b760:	4413      	add	r3, r2
 800b762:	42bb      	cmp	r3, r7
 800b764:	d3e0      	bcc.n	800b728 <__gethex+0x22c>
 800b766:	4618      	mov	r0, r3
 800b768:	9901      	ldr	r1, [sp, #4]
 800b76a:	9307      	str	r3, [sp, #28]
 800b76c:	4652      	mov	r2, sl
 800b76e:	f001 f913 	bl	800c998 <strncmp>
 800b772:	9b07      	ldr	r3, [sp, #28]
 800b774:	2800      	cmp	r0, #0
 800b776:	d1d7      	bne.n	800b728 <__gethex+0x22c>
 800b778:	461e      	mov	r6, r3
 800b77a:	e78b      	b.n	800b694 <__gethex+0x198>
 800b77c:	f04f 0a03 	mov.w	sl, #3
 800b780:	e7b8      	b.n	800b6f4 <__gethex+0x1f8>
 800b782:	da0a      	bge.n	800b79a <__gethex+0x29e>
 800b784:	1a37      	subs	r7, r6, r0
 800b786:	4621      	mov	r1, r4
 800b788:	ee18 0a10 	vmov	r0, s16
 800b78c:	463a      	mov	r2, r7
 800b78e:	f000 fcb3 	bl	800c0f8 <__lshift>
 800b792:	1bed      	subs	r5, r5, r7
 800b794:	4604      	mov	r4, r0
 800b796:	f100 0914 	add.w	r9, r0, #20
 800b79a:	f04f 0a00 	mov.w	sl, #0
 800b79e:	e7ae      	b.n	800b6fe <__gethex+0x202>
 800b7a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b7a4:	42a8      	cmp	r0, r5
 800b7a6:	dd72      	ble.n	800b88e <__gethex+0x392>
 800b7a8:	1b45      	subs	r5, r0, r5
 800b7aa:	42ae      	cmp	r6, r5
 800b7ac:	dc36      	bgt.n	800b81c <__gethex+0x320>
 800b7ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d02a      	beq.n	800b80c <__gethex+0x310>
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d02c      	beq.n	800b814 <__gethex+0x318>
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d11c      	bne.n	800b7f8 <__gethex+0x2fc>
 800b7be:	42ae      	cmp	r6, r5
 800b7c0:	d11a      	bne.n	800b7f8 <__gethex+0x2fc>
 800b7c2:	2e01      	cmp	r6, #1
 800b7c4:	d112      	bne.n	800b7ec <__gethex+0x2f0>
 800b7c6:	9a04      	ldr	r2, [sp, #16]
 800b7c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	6123      	str	r3, [r4, #16]
 800b7d2:	f8c9 3000 	str.w	r3, [r9]
 800b7d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7d8:	2762      	movs	r7, #98	; 0x62
 800b7da:	601c      	str	r4, [r3, #0]
 800b7dc:	e723      	b.n	800b626 <__gethex+0x12a>
 800b7de:	bf00      	nop
 800b7e0:	0800f248 	.word	0x0800f248
 800b7e4:	0800f1cf 	.word	0x0800f1cf
 800b7e8:	0800f1e0 	.word	0x0800f1e0
 800b7ec:	1e71      	subs	r1, r6, #1
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f000 fec6 	bl	800c580 <__any_on>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d1e6      	bne.n	800b7c6 <__gethex+0x2ca>
 800b7f8:	ee18 0a10 	vmov	r0, s16
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	f000 fa5f 	bl	800bcc0 <_Bfree>
 800b802:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b804:	2300      	movs	r3, #0
 800b806:	6013      	str	r3, [r2, #0]
 800b808:	2750      	movs	r7, #80	; 0x50
 800b80a:	e70c      	b.n	800b626 <__gethex+0x12a>
 800b80c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f2      	bne.n	800b7f8 <__gethex+0x2fc>
 800b812:	e7d8      	b.n	800b7c6 <__gethex+0x2ca>
 800b814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1d5      	bne.n	800b7c6 <__gethex+0x2ca>
 800b81a:	e7ed      	b.n	800b7f8 <__gethex+0x2fc>
 800b81c:	1e6f      	subs	r7, r5, #1
 800b81e:	f1ba 0f00 	cmp.w	sl, #0
 800b822:	d131      	bne.n	800b888 <__gethex+0x38c>
 800b824:	b127      	cbz	r7, 800b830 <__gethex+0x334>
 800b826:	4639      	mov	r1, r7
 800b828:	4620      	mov	r0, r4
 800b82a:	f000 fea9 	bl	800c580 <__any_on>
 800b82e:	4682      	mov	sl, r0
 800b830:	117b      	asrs	r3, r7, #5
 800b832:	2101      	movs	r1, #1
 800b834:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b838:	f007 071f 	and.w	r7, r7, #31
 800b83c:	fa01 f707 	lsl.w	r7, r1, r7
 800b840:	421f      	tst	r7, r3
 800b842:	4629      	mov	r1, r5
 800b844:	4620      	mov	r0, r4
 800b846:	bf18      	it	ne
 800b848:	f04a 0a02 	orrne.w	sl, sl, #2
 800b84c:	1b76      	subs	r6, r6, r5
 800b84e:	f7ff fded 	bl	800b42c <rshift>
 800b852:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b856:	2702      	movs	r7, #2
 800b858:	f1ba 0f00 	cmp.w	sl, #0
 800b85c:	d048      	beq.n	800b8f0 <__gethex+0x3f4>
 800b85e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b862:	2b02      	cmp	r3, #2
 800b864:	d015      	beq.n	800b892 <__gethex+0x396>
 800b866:	2b03      	cmp	r3, #3
 800b868:	d017      	beq.n	800b89a <__gethex+0x39e>
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d109      	bne.n	800b882 <__gethex+0x386>
 800b86e:	f01a 0f02 	tst.w	sl, #2
 800b872:	d006      	beq.n	800b882 <__gethex+0x386>
 800b874:	f8d9 0000 	ldr.w	r0, [r9]
 800b878:	ea4a 0a00 	orr.w	sl, sl, r0
 800b87c:	f01a 0f01 	tst.w	sl, #1
 800b880:	d10e      	bne.n	800b8a0 <__gethex+0x3a4>
 800b882:	f047 0710 	orr.w	r7, r7, #16
 800b886:	e033      	b.n	800b8f0 <__gethex+0x3f4>
 800b888:	f04f 0a01 	mov.w	sl, #1
 800b88c:	e7d0      	b.n	800b830 <__gethex+0x334>
 800b88e:	2701      	movs	r7, #1
 800b890:	e7e2      	b.n	800b858 <__gethex+0x35c>
 800b892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b894:	f1c3 0301 	rsb	r3, r3, #1
 800b898:	9315      	str	r3, [sp, #84]	; 0x54
 800b89a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0f0      	beq.n	800b882 <__gethex+0x386>
 800b8a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b8a4:	f104 0314 	add.w	r3, r4, #20
 800b8a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b8ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b8b0:	f04f 0c00 	mov.w	ip, #0
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b8be:	d01c      	beq.n	800b8fa <__gethex+0x3fe>
 800b8c0:	3201      	adds	r2, #1
 800b8c2:	6002      	str	r2, [r0, #0]
 800b8c4:	2f02      	cmp	r7, #2
 800b8c6:	f104 0314 	add.w	r3, r4, #20
 800b8ca:	d13f      	bne.n	800b94c <__gethex+0x450>
 800b8cc:	f8d8 2000 	ldr.w	r2, [r8]
 800b8d0:	3a01      	subs	r2, #1
 800b8d2:	42b2      	cmp	r2, r6
 800b8d4:	d10a      	bne.n	800b8ec <__gethex+0x3f0>
 800b8d6:	1171      	asrs	r1, r6, #5
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8de:	f006 061f 	and.w	r6, r6, #31
 800b8e2:	fa02 f606 	lsl.w	r6, r2, r6
 800b8e6:	421e      	tst	r6, r3
 800b8e8:	bf18      	it	ne
 800b8ea:	4617      	movne	r7, r2
 800b8ec:	f047 0720 	orr.w	r7, r7, #32
 800b8f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8f2:	601c      	str	r4, [r3, #0]
 800b8f4:	9b04      	ldr	r3, [sp, #16]
 800b8f6:	601d      	str	r5, [r3, #0]
 800b8f8:	e695      	b.n	800b626 <__gethex+0x12a>
 800b8fa:	4299      	cmp	r1, r3
 800b8fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b900:	d8d8      	bhi.n	800b8b4 <__gethex+0x3b8>
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	459b      	cmp	fp, r3
 800b906:	db19      	blt.n	800b93c <__gethex+0x440>
 800b908:	6861      	ldr	r1, [r4, #4]
 800b90a:	ee18 0a10 	vmov	r0, s16
 800b90e:	3101      	adds	r1, #1
 800b910:	f000 f996 	bl	800bc40 <_Balloc>
 800b914:	4681      	mov	r9, r0
 800b916:	b918      	cbnz	r0, 800b920 <__gethex+0x424>
 800b918:	4b1a      	ldr	r3, [pc, #104]	; (800b984 <__gethex+0x488>)
 800b91a:	4602      	mov	r2, r0
 800b91c:	2184      	movs	r1, #132	; 0x84
 800b91e:	e6a8      	b.n	800b672 <__gethex+0x176>
 800b920:	6922      	ldr	r2, [r4, #16]
 800b922:	3202      	adds	r2, #2
 800b924:	f104 010c 	add.w	r1, r4, #12
 800b928:	0092      	lsls	r2, r2, #2
 800b92a:	300c      	adds	r0, #12
 800b92c:	f7fc fda4 	bl	8008478 <memcpy>
 800b930:	4621      	mov	r1, r4
 800b932:	ee18 0a10 	vmov	r0, s16
 800b936:	f000 f9c3 	bl	800bcc0 <_Bfree>
 800b93a:	464c      	mov	r4, r9
 800b93c:	6923      	ldr	r3, [r4, #16]
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b944:	6122      	str	r2, [r4, #16]
 800b946:	2201      	movs	r2, #1
 800b948:	615a      	str	r2, [r3, #20]
 800b94a:	e7bb      	b.n	800b8c4 <__gethex+0x3c8>
 800b94c:	6922      	ldr	r2, [r4, #16]
 800b94e:	455a      	cmp	r2, fp
 800b950:	dd0b      	ble.n	800b96a <__gethex+0x46e>
 800b952:	2101      	movs	r1, #1
 800b954:	4620      	mov	r0, r4
 800b956:	f7ff fd69 	bl	800b42c <rshift>
 800b95a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b95e:	3501      	adds	r5, #1
 800b960:	42ab      	cmp	r3, r5
 800b962:	f6ff aed0 	blt.w	800b706 <__gethex+0x20a>
 800b966:	2701      	movs	r7, #1
 800b968:	e7c0      	b.n	800b8ec <__gethex+0x3f0>
 800b96a:	f016 061f 	ands.w	r6, r6, #31
 800b96e:	d0fa      	beq.n	800b966 <__gethex+0x46a>
 800b970:	4453      	add	r3, sl
 800b972:	f1c6 0620 	rsb	r6, r6, #32
 800b976:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b97a:	f000 fa53 	bl	800be24 <__hi0bits>
 800b97e:	42b0      	cmp	r0, r6
 800b980:	dbe7      	blt.n	800b952 <__gethex+0x456>
 800b982:	e7f0      	b.n	800b966 <__gethex+0x46a>
 800b984:	0800f1cf 	.word	0x0800f1cf

0800b988 <L_shift>:
 800b988:	f1c2 0208 	rsb	r2, r2, #8
 800b98c:	0092      	lsls	r2, r2, #2
 800b98e:	b570      	push	{r4, r5, r6, lr}
 800b990:	f1c2 0620 	rsb	r6, r2, #32
 800b994:	6843      	ldr	r3, [r0, #4]
 800b996:	6804      	ldr	r4, [r0, #0]
 800b998:	fa03 f506 	lsl.w	r5, r3, r6
 800b99c:	432c      	orrs	r4, r5
 800b99e:	40d3      	lsrs	r3, r2
 800b9a0:	6004      	str	r4, [r0, #0]
 800b9a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b9a6:	4288      	cmp	r0, r1
 800b9a8:	d3f4      	bcc.n	800b994 <L_shift+0xc>
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}

0800b9ac <__match>:
 800b9ac:	b530      	push	{r4, r5, lr}
 800b9ae:	6803      	ldr	r3, [r0, #0]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9b6:	b914      	cbnz	r4, 800b9be <__match+0x12>
 800b9b8:	6003      	str	r3, [r0, #0]
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	bd30      	pop	{r4, r5, pc}
 800b9be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b9c6:	2d19      	cmp	r5, #25
 800b9c8:	bf98      	it	ls
 800b9ca:	3220      	addls	r2, #32
 800b9cc:	42a2      	cmp	r2, r4
 800b9ce:	d0f0      	beq.n	800b9b2 <__match+0x6>
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	e7f3      	b.n	800b9bc <__match+0x10>

0800b9d4 <__hexnan>:
 800b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	680b      	ldr	r3, [r1, #0]
 800b9da:	115e      	asrs	r6, r3, #5
 800b9dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b9e0:	f013 031f 	ands.w	r3, r3, #31
 800b9e4:	b087      	sub	sp, #28
 800b9e6:	bf18      	it	ne
 800b9e8:	3604      	addne	r6, #4
 800b9ea:	2500      	movs	r5, #0
 800b9ec:	1f37      	subs	r7, r6, #4
 800b9ee:	4690      	mov	r8, r2
 800b9f0:	6802      	ldr	r2, [r0, #0]
 800b9f2:	9301      	str	r3, [sp, #4]
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b9fa:	46b9      	mov	r9, r7
 800b9fc:	463c      	mov	r4, r7
 800b9fe:	9502      	str	r5, [sp, #8]
 800ba00:	46ab      	mov	fp, r5
 800ba02:	7851      	ldrb	r1, [r2, #1]
 800ba04:	1c53      	adds	r3, r2, #1
 800ba06:	9303      	str	r3, [sp, #12]
 800ba08:	b341      	cbz	r1, 800ba5c <__hexnan+0x88>
 800ba0a:	4608      	mov	r0, r1
 800ba0c:	9205      	str	r2, [sp, #20]
 800ba0e:	9104      	str	r1, [sp, #16]
 800ba10:	f7ff fd5e 	bl	800b4d0 <__hexdig_fun>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d14f      	bne.n	800bab8 <__hexnan+0xe4>
 800ba18:	9904      	ldr	r1, [sp, #16]
 800ba1a:	9a05      	ldr	r2, [sp, #20]
 800ba1c:	2920      	cmp	r1, #32
 800ba1e:	d818      	bhi.n	800ba52 <__hexnan+0x7e>
 800ba20:	9b02      	ldr	r3, [sp, #8]
 800ba22:	459b      	cmp	fp, r3
 800ba24:	dd13      	ble.n	800ba4e <__hexnan+0x7a>
 800ba26:	454c      	cmp	r4, r9
 800ba28:	d206      	bcs.n	800ba38 <__hexnan+0x64>
 800ba2a:	2d07      	cmp	r5, #7
 800ba2c:	dc04      	bgt.n	800ba38 <__hexnan+0x64>
 800ba2e:	462a      	mov	r2, r5
 800ba30:	4649      	mov	r1, r9
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7ff ffa8 	bl	800b988 <L_shift>
 800ba38:	4544      	cmp	r4, r8
 800ba3a:	d950      	bls.n	800bade <__hexnan+0x10a>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f1a4 0904 	sub.w	r9, r4, #4
 800ba42:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba46:	f8cd b008 	str.w	fp, [sp, #8]
 800ba4a:	464c      	mov	r4, r9
 800ba4c:	461d      	mov	r5, r3
 800ba4e:	9a03      	ldr	r2, [sp, #12]
 800ba50:	e7d7      	b.n	800ba02 <__hexnan+0x2e>
 800ba52:	2929      	cmp	r1, #41	; 0x29
 800ba54:	d156      	bne.n	800bb04 <__hexnan+0x130>
 800ba56:	3202      	adds	r2, #2
 800ba58:	f8ca 2000 	str.w	r2, [sl]
 800ba5c:	f1bb 0f00 	cmp.w	fp, #0
 800ba60:	d050      	beq.n	800bb04 <__hexnan+0x130>
 800ba62:	454c      	cmp	r4, r9
 800ba64:	d206      	bcs.n	800ba74 <__hexnan+0xa0>
 800ba66:	2d07      	cmp	r5, #7
 800ba68:	dc04      	bgt.n	800ba74 <__hexnan+0xa0>
 800ba6a:	462a      	mov	r2, r5
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f7ff ff8a 	bl	800b988 <L_shift>
 800ba74:	4544      	cmp	r4, r8
 800ba76:	d934      	bls.n	800bae2 <__hexnan+0x10e>
 800ba78:	f1a8 0204 	sub.w	r2, r8, #4
 800ba7c:	4623      	mov	r3, r4
 800ba7e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba82:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba86:	429f      	cmp	r7, r3
 800ba88:	d2f9      	bcs.n	800ba7e <__hexnan+0xaa>
 800ba8a:	1b3b      	subs	r3, r7, r4
 800ba8c:	f023 0303 	bic.w	r3, r3, #3
 800ba90:	3304      	adds	r3, #4
 800ba92:	3401      	adds	r4, #1
 800ba94:	3e03      	subs	r6, #3
 800ba96:	42b4      	cmp	r4, r6
 800ba98:	bf88      	it	hi
 800ba9a:	2304      	movhi	r3, #4
 800ba9c:	4443      	add	r3, r8
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f843 2b04 	str.w	r2, [r3], #4
 800baa4:	429f      	cmp	r7, r3
 800baa6:	d2fb      	bcs.n	800baa0 <__hexnan+0xcc>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	b91b      	cbnz	r3, 800bab4 <__hexnan+0xe0>
 800baac:	4547      	cmp	r7, r8
 800baae:	d127      	bne.n	800bb00 <__hexnan+0x12c>
 800bab0:	2301      	movs	r3, #1
 800bab2:	603b      	str	r3, [r7, #0]
 800bab4:	2005      	movs	r0, #5
 800bab6:	e026      	b.n	800bb06 <__hexnan+0x132>
 800bab8:	3501      	adds	r5, #1
 800baba:	2d08      	cmp	r5, #8
 800babc:	f10b 0b01 	add.w	fp, fp, #1
 800bac0:	dd06      	ble.n	800bad0 <__hexnan+0xfc>
 800bac2:	4544      	cmp	r4, r8
 800bac4:	d9c3      	bls.n	800ba4e <__hexnan+0x7a>
 800bac6:	2300      	movs	r3, #0
 800bac8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bacc:	2501      	movs	r5, #1
 800bace:	3c04      	subs	r4, #4
 800bad0:	6822      	ldr	r2, [r4, #0]
 800bad2:	f000 000f 	and.w	r0, r0, #15
 800bad6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bada:	6022      	str	r2, [r4, #0]
 800badc:	e7b7      	b.n	800ba4e <__hexnan+0x7a>
 800bade:	2508      	movs	r5, #8
 800bae0:	e7b5      	b.n	800ba4e <__hexnan+0x7a>
 800bae2:	9b01      	ldr	r3, [sp, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0df      	beq.n	800baa8 <__hexnan+0xd4>
 800bae8:	f04f 32ff 	mov.w	r2, #4294967295
 800baec:	f1c3 0320 	rsb	r3, r3, #32
 800baf0:	fa22 f303 	lsr.w	r3, r2, r3
 800baf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800baf8:	401a      	ands	r2, r3
 800bafa:	f846 2c04 	str.w	r2, [r6, #-4]
 800bafe:	e7d3      	b.n	800baa8 <__hexnan+0xd4>
 800bb00:	3f04      	subs	r7, #4
 800bb02:	e7d1      	b.n	800baa8 <__hexnan+0xd4>
 800bb04:	2004      	movs	r0, #4
 800bb06:	b007      	add	sp, #28
 800bb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb0c <_localeconv_r>:
 800bb0c:	4800      	ldr	r0, [pc, #0]	; (800bb10 <_localeconv_r+0x4>)
 800bb0e:	4770      	bx	lr
 800bb10:	20000164 	.word	0x20000164

0800bb14 <_lseek_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d07      	ldr	r5, [pc, #28]	; (800bb34 <_lseek_r+0x20>)
 800bb18:	4604      	mov	r4, r0
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	2200      	movs	r2, #0
 800bb20:	602a      	str	r2, [r5, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	f7f5 fc2a 	bl	800137c <_lseek>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_lseek_r+0x1e>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_lseek_r+0x1e>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	20000ee8 	.word	0x20000ee8

0800bb38 <__swhatbuf_r>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	460e      	mov	r6, r1
 800bb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb40:	2900      	cmp	r1, #0
 800bb42:	b096      	sub	sp, #88	; 0x58
 800bb44:	4614      	mov	r4, r2
 800bb46:	461d      	mov	r5, r3
 800bb48:	da08      	bge.n	800bb5c <__swhatbuf_r+0x24>
 800bb4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	602a      	str	r2, [r5, #0]
 800bb52:	061a      	lsls	r2, r3, #24
 800bb54:	d410      	bmi.n	800bb78 <__swhatbuf_r+0x40>
 800bb56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb5a:	e00e      	b.n	800bb7a <__swhatbuf_r+0x42>
 800bb5c:	466a      	mov	r2, sp
 800bb5e:	f000 ff3d 	bl	800c9dc <_fstat_r>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	dbf1      	blt.n	800bb4a <__swhatbuf_r+0x12>
 800bb66:	9a01      	ldr	r2, [sp, #4]
 800bb68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb70:	425a      	negs	r2, r3
 800bb72:	415a      	adcs	r2, r3
 800bb74:	602a      	str	r2, [r5, #0]
 800bb76:	e7ee      	b.n	800bb56 <__swhatbuf_r+0x1e>
 800bb78:	2340      	movs	r3, #64	; 0x40
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	b016      	add	sp, #88	; 0x58
 800bb80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb84 <__smakebuf_r>:
 800bb84:	898b      	ldrh	r3, [r1, #12]
 800bb86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb88:	079d      	lsls	r5, r3, #30
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	d507      	bpl.n	800bba0 <__smakebuf_r+0x1c>
 800bb90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	6123      	str	r3, [r4, #16]
 800bb98:	2301      	movs	r3, #1
 800bb9a:	6163      	str	r3, [r4, #20]
 800bb9c:	b002      	add	sp, #8
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}
 800bba0:	ab01      	add	r3, sp, #4
 800bba2:	466a      	mov	r2, sp
 800bba4:	f7ff ffc8 	bl	800bb38 <__swhatbuf_r>
 800bba8:	9900      	ldr	r1, [sp, #0]
 800bbaa:	4605      	mov	r5, r0
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7fc fd15 	bl	80085dc <_malloc_r>
 800bbb2:	b948      	cbnz	r0, 800bbc8 <__smakebuf_r+0x44>
 800bbb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb8:	059a      	lsls	r2, r3, #22
 800bbba:	d4ef      	bmi.n	800bb9c <__smakebuf_r+0x18>
 800bbbc:	f023 0303 	bic.w	r3, r3, #3
 800bbc0:	f043 0302 	orr.w	r3, r3, #2
 800bbc4:	81a3      	strh	r3, [r4, #12]
 800bbc6:	e7e3      	b.n	800bb90 <__smakebuf_r+0xc>
 800bbc8:	4b0d      	ldr	r3, [pc, #52]	; (800bc00 <__smakebuf_r+0x7c>)
 800bbca:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	6020      	str	r0, [r4, #0]
 800bbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd4:	81a3      	strh	r3, [r4, #12]
 800bbd6:	9b00      	ldr	r3, [sp, #0]
 800bbd8:	6163      	str	r3, [r4, #20]
 800bbda:	9b01      	ldr	r3, [sp, #4]
 800bbdc:	6120      	str	r0, [r4, #16]
 800bbde:	b15b      	cbz	r3, 800bbf8 <__smakebuf_r+0x74>
 800bbe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f000 ff0b 	bl	800ca00 <_isatty_r>
 800bbea:	b128      	cbz	r0, 800bbf8 <__smakebuf_r+0x74>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f023 0303 	bic.w	r3, r3, #3
 800bbf2:	f043 0301 	orr.w	r3, r3, #1
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	89a0      	ldrh	r0, [r4, #12]
 800bbfa:	4305      	orrs	r5, r0
 800bbfc:	81a5      	strh	r5, [r4, #12]
 800bbfe:	e7cd      	b.n	800bb9c <__smakebuf_r+0x18>
 800bc00:	080080e5 	.word	0x080080e5

0800bc04 <__ascii_mbtowc>:
 800bc04:	b082      	sub	sp, #8
 800bc06:	b901      	cbnz	r1, 800bc0a <__ascii_mbtowc+0x6>
 800bc08:	a901      	add	r1, sp, #4
 800bc0a:	b142      	cbz	r2, 800bc1e <__ascii_mbtowc+0x1a>
 800bc0c:	b14b      	cbz	r3, 800bc22 <__ascii_mbtowc+0x1e>
 800bc0e:	7813      	ldrb	r3, [r2, #0]
 800bc10:	600b      	str	r3, [r1, #0]
 800bc12:	7812      	ldrb	r2, [r2, #0]
 800bc14:	1e10      	subs	r0, r2, #0
 800bc16:	bf18      	it	ne
 800bc18:	2001      	movne	r0, #1
 800bc1a:	b002      	add	sp, #8
 800bc1c:	4770      	bx	lr
 800bc1e:	4610      	mov	r0, r2
 800bc20:	e7fb      	b.n	800bc1a <__ascii_mbtowc+0x16>
 800bc22:	f06f 0001 	mvn.w	r0, #1
 800bc26:	e7f8      	b.n	800bc1a <__ascii_mbtowc+0x16>

0800bc28 <__malloc_lock>:
 800bc28:	4801      	ldr	r0, [pc, #4]	; (800bc30 <__malloc_lock+0x8>)
 800bc2a:	f7fc bc12 	b.w	8008452 <__retarget_lock_acquire_recursive>
 800bc2e:	bf00      	nop
 800bc30:	20000edc 	.word	0x20000edc

0800bc34 <__malloc_unlock>:
 800bc34:	4801      	ldr	r0, [pc, #4]	; (800bc3c <__malloc_unlock+0x8>)
 800bc36:	f7fc bc0d 	b.w	8008454 <__retarget_lock_release_recursive>
 800bc3a:	bf00      	nop
 800bc3c:	20000edc 	.word	0x20000edc

0800bc40 <_Balloc>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc44:	4604      	mov	r4, r0
 800bc46:	460d      	mov	r5, r1
 800bc48:	b976      	cbnz	r6, 800bc68 <_Balloc+0x28>
 800bc4a:	2010      	movs	r0, #16
 800bc4c:	f7fc fc04 	bl	8008458 <malloc>
 800bc50:	4602      	mov	r2, r0
 800bc52:	6260      	str	r0, [r4, #36]	; 0x24
 800bc54:	b920      	cbnz	r0, 800bc60 <_Balloc+0x20>
 800bc56:	4b18      	ldr	r3, [pc, #96]	; (800bcb8 <_Balloc+0x78>)
 800bc58:	4818      	ldr	r0, [pc, #96]	; (800bcbc <_Balloc+0x7c>)
 800bc5a:	2166      	movs	r1, #102	; 0x66
 800bc5c:	f7fc f91e 	bl	8007e9c <__assert_func>
 800bc60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc64:	6006      	str	r6, [r0, #0]
 800bc66:	60c6      	str	r6, [r0, #12]
 800bc68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc6a:	68f3      	ldr	r3, [r6, #12]
 800bc6c:	b183      	cbz	r3, 800bc90 <_Balloc+0x50>
 800bc6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc76:	b9b8      	cbnz	r0, 800bca8 <_Balloc+0x68>
 800bc78:	2101      	movs	r1, #1
 800bc7a:	fa01 f605 	lsl.w	r6, r1, r5
 800bc7e:	1d72      	adds	r2, r6, #5
 800bc80:	0092      	lsls	r2, r2, #2
 800bc82:	4620      	mov	r0, r4
 800bc84:	f7fc fc28 	bl	80084d8 <_calloc_r>
 800bc88:	b160      	cbz	r0, 800bca4 <_Balloc+0x64>
 800bc8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc8e:	e00e      	b.n	800bcae <_Balloc+0x6e>
 800bc90:	2221      	movs	r2, #33	; 0x21
 800bc92:	2104      	movs	r1, #4
 800bc94:	4620      	mov	r0, r4
 800bc96:	f7fc fc1f 	bl	80084d8 <_calloc_r>
 800bc9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc9c:	60f0      	str	r0, [r6, #12]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1e4      	bne.n	800bc6e <_Balloc+0x2e>
 800bca4:	2000      	movs	r0, #0
 800bca6:	bd70      	pop	{r4, r5, r6, pc}
 800bca8:	6802      	ldr	r2, [r0, #0]
 800bcaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcb4:	e7f7      	b.n	800bca6 <_Balloc+0x66>
 800bcb6:	bf00      	nop
 800bcb8:	0800f15d 	.word	0x0800f15d
 800bcbc:	0800f25c 	.word	0x0800f25c

0800bcc0 <_Bfree>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcc4:	4605      	mov	r5, r0
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	b976      	cbnz	r6, 800bce8 <_Bfree+0x28>
 800bcca:	2010      	movs	r0, #16
 800bccc:	f7fc fbc4 	bl	8008458 <malloc>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	6268      	str	r0, [r5, #36]	; 0x24
 800bcd4:	b920      	cbnz	r0, 800bce0 <_Bfree+0x20>
 800bcd6:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <_Bfree+0x3c>)
 800bcd8:	4809      	ldr	r0, [pc, #36]	; (800bd00 <_Bfree+0x40>)
 800bcda:	218a      	movs	r1, #138	; 0x8a
 800bcdc:	f7fc f8de 	bl	8007e9c <__assert_func>
 800bce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bce4:	6006      	str	r6, [r0, #0]
 800bce6:	60c6      	str	r6, [r0, #12]
 800bce8:	b13c      	cbz	r4, 800bcfa <_Bfree+0x3a>
 800bcea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcec:	6862      	ldr	r2, [r4, #4]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcf4:	6021      	str	r1, [r4, #0]
 800bcf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	0800f15d 	.word	0x0800f15d
 800bd00:	0800f25c 	.word	0x0800f25c

0800bd04 <__multadd>:
 800bd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd08:	690d      	ldr	r5, [r1, #16]
 800bd0a:	4607      	mov	r7, r0
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	461e      	mov	r6, r3
 800bd10:	f101 0c14 	add.w	ip, r1, #20
 800bd14:	2000      	movs	r0, #0
 800bd16:	f8dc 3000 	ldr.w	r3, [ip]
 800bd1a:	b299      	uxth	r1, r3
 800bd1c:	fb02 6101 	mla	r1, r2, r1, r6
 800bd20:	0c1e      	lsrs	r6, r3, #16
 800bd22:	0c0b      	lsrs	r3, r1, #16
 800bd24:	fb02 3306 	mla	r3, r2, r6, r3
 800bd28:	b289      	uxth	r1, r1
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd30:	4285      	cmp	r5, r0
 800bd32:	f84c 1b04 	str.w	r1, [ip], #4
 800bd36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd3a:	dcec      	bgt.n	800bd16 <__multadd+0x12>
 800bd3c:	b30e      	cbz	r6, 800bd82 <__multadd+0x7e>
 800bd3e:	68a3      	ldr	r3, [r4, #8]
 800bd40:	42ab      	cmp	r3, r5
 800bd42:	dc19      	bgt.n	800bd78 <__multadd+0x74>
 800bd44:	6861      	ldr	r1, [r4, #4]
 800bd46:	4638      	mov	r0, r7
 800bd48:	3101      	adds	r1, #1
 800bd4a:	f7ff ff79 	bl	800bc40 <_Balloc>
 800bd4e:	4680      	mov	r8, r0
 800bd50:	b928      	cbnz	r0, 800bd5e <__multadd+0x5a>
 800bd52:	4602      	mov	r2, r0
 800bd54:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <__multadd+0x84>)
 800bd56:	480d      	ldr	r0, [pc, #52]	; (800bd8c <__multadd+0x88>)
 800bd58:	21b5      	movs	r1, #181	; 0xb5
 800bd5a:	f7fc f89f 	bl	8007e9c <__assert_func>
 800bd5e:	6922      	ldr	r2, [r4, #16]
 800bd60:	3202      	adds	r2, #2
 800bd62:	f104 010c 	add.w	r1, r4, #12
 800bd66:	0092      	lsls	r2, r2, #2
 800bd68:	300c      	adds	r0, #12
 800bd6a:	f7fc fb85 	bl	8008478 <memcpy>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7ff ffa5 	bl	800bcc0 <_Bfree>
 800bd76:	4644      	mov	r4, r8
 800bd78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd7c:	3501      	adds	r5, #1
 800bd7e:	615e      	str	r6, [r3, #20]
 800bd80:	6125      	str	r5, [r4, #16]
 800bd82:	4620      	mov	r0, r4
 800bd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd88:	0800f1cf 	.word	0x0800f1cf
 800bd8c:	0800f25c 	.word	0x0800f25c

0800bd90 <__s2b>:
 800bd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd94:	460c      	mov	r4, r1
 800bd96:	4615      	mov	r5, r2
 800bd98:	461f      	mov	r7, r3
 800bd9a:	2209      	movs	r2, #9
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	4606      	mov	r6, r0
 800bda0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bda4:	2100      	movs	r1, #0
 800bda6:	2201      	movs	r2, #1
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	db09      	blt.n	800bdc0 <__s2b+0x30>
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff ff47 	bl	800bc40 <_Balloc>
 800bdb2:	b940      	cbnz	r0, 800bdc6 <__s2b+0x36>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	4b19      	ldr	r3, [pc, #100]	; (800be1c <__s2b+0x8c>)
 800bdb8:	4819      	ldr	r0, [pc, #100]	; (800be20 <__s2b+0x90>)
 800bdba:	21ce      	movs	r1, #206	; 0xce
 800bdbc:	f7fc f86e 	bl	8007e9c <__assert_func>
 800bdc0:	0052      	lsls	r2, r2, #1
 800bdc2:	3101      	adds	r1, #1
 800bdc4:	e7f0      	b.n	800bda8 <__s2b+0x18>
 800bdc6:	9b08      	ldr	r3, [sp, #32]
 800bdc8:	6143      	str	r3, [r0, #20]
 800bdca:	2d09      	cmp	r5, #9
 800bdcc:	f04f 0301 	mov.w	r3, #1
 800bdd0:	6103      	str	r3, [r0, #16]
 800bdd2:	dd16      	ble.n	800be02 <__s2b+0x72>
 800bdd4:	f104 0909 	add.w	r9, r4, #9
 800bdd8:	46c8      	mov	r8, r9
 800bdda:	442c      	add	r4, r5
 800bddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bde0:	4601      	mov	r1, r0
 800bde2:	3b30      	subs	r3, #48	; 0x30
 800bde4:	220a      	movs	r2, #10
 800bde6:	4630      	mov	r0, r6
 800bde8:	f7ff ff8c 	bl	800bd04 <__multadd>
 800bdec:	45a0      	cmp	r8, r4
 800bdee:	d1f5      	bne.n	800bddc <__s2b+0x4c>
 800bdf0:	f1a5 0408 	sub.w	r4, r5, #8
 800bdf4:	444c      	add	r4, r9
 800bdf6:	1b2d      	subs	r5, r5, r4
 800bdf8:	1963      	adds	r3, r4, r5
 800bdfa:	42bb      	cmp	r3, r7
 800bdfc:	db04      	blt.n	800be08 <__s2b+0x78>
 800bdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be02:	340a      	adds	r4, #10
 800be04:	2509      	movs	r5, #9
 800be06:	e7f6      	b.n	800bdf6 <__s2b+0x66>
 800be08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be0c:	4601      	mov	r1, r0
 800be0e:	3b30      	subs	r3, #48	; 0x30
 800be10:	220a      	movs	r2, #10
 800be12:	4630      	mov	r0, r6
 800be14:	f7ff ff76 	bl	800bd04 <__multadd>
 800be18:	e7ee      	b.n	800bdf8 <__s2b+0x68>
 800be1a:	bf00      	nop
 800be1c:	0800f1cf 	.word	0x0800f1cf
 800be20:	0800f25c 	.word	0x0800f25c

0800be24 <__hi0bits>:
 800be24:	0c03      	lsrs	r3, r0, #16
 800be26:	041b      	lsls	r3, r3, #16
 800be28:	b9d3      	cbnz	r3, 800be60 <__hi0bits+0x3c>
 800be2a:	0400      	lsls	r0, r0, #16
 800be2c:	2310      	movs	r3, #16
 800be2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be32:	bf04      	itt	eq
 800be34:	0200      	lsleq	r0, r0, #8
 800be36:	3308      	addeq	r3, #8
 800be38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be3c:	bf04      	itt	eq
 800be3e:	0100      	lsleq	r0, r0, #4
 800be40:	3304      	addeq	r3, #4
 800be42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be46:	bf04      	itt	eq
 800be48:	0080      	lsleq	r0, r0, #2
 800be4a:	3302      	addeq	r3, #2
 800be4c:	2800      	cmp	r0, #0
 800be4e:	db05      	blt.n	800be5c <__hi0bits+0x38>
 800be50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be54:	f103 0301 	add.w	r3, r3, #1
 800be58:	bf08      	it	eq
 800be5a:	2320      	moveq	r3, #32
 800be5c:	4618      	mov	r0, r3
 800be5e:	4770      	bx	lr
 800be60:	2300      	movs	r3, #0
 800be62:	e7e4      	b.n	800be2e <__hi0bits+0xa>

0800be64 <__lo0bits>:
 800be64:	6803      	ldr	r3, [r0, #0]
 800be66:	f013 0207 	ands.w	r2, r3, #7
 800be6a:	4601      	mov	r1, r0
 800be6c:	d00b      	beq.n	800be86 <__lo0bits+0x22>
 800be6e:	07da      	lsls	r2, r3, #31
 800be70:	d423      	bmi.n	800beba <__lo0bits+0x56>
 800be72:	0798      	lsls	r0, r3, #30
 800be74:	bf49      	itett	mi
 800be76:	085b      	lsrmi	r3, r3, #1
 800be78:	089b      	lsrpl	r3, r3, #2
 800be7a:	2001      	movmi	r0, #1
 800be7c:	600b      	strmi	r3, [r1, #0]
 800be7e:	bf5c      	itt	pl
 800be80:	600b      	strpl	r3, [r1, #0]
 800be82:	2002      	movpl	r0, #2
 800be84:	4770      	bx	lr
 800be86:	b298      	uxth	r0, r3
 800be88:	b9a8      	cbnz	r0, 800beb6 <__lo0bits+0x52>
 800be8a:	0c1b      	lsrs	r3, r3, #16
 800be8c:	2010      	movs	r0, #16
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	b90a      	cbnz	r2, 800be96 <__lo0bits+0x32>
 800be92:	3008      	adds	r0, #8
 800be94:	0a1b      	lsrs	r3, r3, #8
 800be96:	071a      	lsls	r2, r3, #28
 800be98:	bf04      	itt	eq
 800be9a:	091b      	lsreq	r3, r3, #4
 800be9c:	3004      	addeq	r0, #4
 800be9e:	079a      	lsls	r2, r3, #30
 800bea0:	bf04      	itt	eq
 800bea2:	089b      	lsreq	r3, r3, #2
 800bea4:	3002      	addeq	r0, #2
 800bea6:	07da      	lsls	r2, r3, #31
 800bea8:	d403      	bmi.n	800beb2 <__lo0bits+0x4e>
 800beaa:	085b      	lsrs	r3, r3, #1
 800beac:	f100 0001 	add.w	r0, r0, #1
 800beb0:	d005      	beq.n	800bebe <__lo0bits+0x5a>
 800beb2:	600b      	str	r3, [r1, #0]
 800beb4:	4770      	bx	lr
 800beb6:	4610      	mov	r0, r2
 800beb8:	e7e9      	b.n	800be8e <__lo0bits+0x2a>
 800beba:	2000      	movs	r0, #0
 800bebc:	4770      	bx	lr
 800bebe:	2020      	movs	r0, #32
 800bec0:	4770      	bx	lr
	...

0800bec4 <__i2b>:
 800bec4:	b510      	push	{r4, lr}
 800bec6:	460c      	mov	r4, r1
 800bec8:	2101      	movs	r1, #1
 800beca:	f7ff feb9 	bl	800bc40 <_Balloc>
 800bece:	4602      	mov	r2, r0
 800bed0:	b928      	cbnz	r0, 800bede <__i2b+0x1a>
 800bed2:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <__i2b+0x24>)
 800bed4:	4805      	ldr	r0, [pc, #20]	; (800beec <__i2b+0x28>)
 800bed6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800beda:	f7fb ffdf 	bl	8007e9c <__assert_func>
 800bede:	2301      	movs	r3, #1
 800bee0:	6144      	str	r4, [r0, #20]
 800bee2:	6103      	str	r3, [r0, #16]
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	bf00      	nop
 800bee8:	0800f1cf 	.word	0x0800f1cf
 800beec:	0800f25c 	.word	0x0800f25c

0800bef0 <__multiply>:
 800bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	4691      	mov	r9, r2
 800bef6:	690a      	ldr	r2, [r1, #16]
 800bef8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800befc:	429a      	cmp	r2, r3
 800befe:	bfb8      	it	lt
 800bf00:	460b      	movlt	r3, r1
 800bf02:	460c      	mov	r4, r1
 800bf04:	bfbc      	itt	lt
 800bf06:	464c      	movlt	r4, r9
 800bf08:	4699      	movlt	r9, r3
 800bf0a:	6927      	ldr	r7, [r4, #16]
 800bf0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf10:	68a3      	ldr	r3, [r4, #8]
 800bf12:	6861      	ldr	r1, [r4, #4]
 800bf14:	eb07 060a 	add.w	r6, r7, sl
 800bf18:	42b3      	cmp	r3, r6
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	bfb8      	it	lt
 800bf1e:	3101      	addlt	r1, #1
 800bf20:	f7ff fe8e 	bl	800bc40 <_Balloc>
 800bf24:	b930      	cbnz	r0, 800bf34 <__multiply+0x44>
 800bf26:	4602      	mov	r2, r0
 800bf28:	4b44      	ldr	r3, [pc, #272]	; (800c03c <__multiply+0x14c>)
 800bf2a:	4845      	ldr	r0, [pc, #276]	; (800c040 <__multiply+0x150>)
 800bf2c:	f240 115d 	movw	r1, #349	; 0x15d
 800bf30:	f7fb ffb4 	bl	8007e9c <__assert_func>
 800bf34:	f100 0514 	add.w	r5, r0, #20
 800bf38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	2200      	movs	r2, #0
 800bf40:	4543      	cmp	r3, r8
 800bf42:	d321      	bcc.n	800bf88 <__multiply+0x98>
 800bf44:	f104 0314 	add.w	r3, r4, #20
 800bf48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf4c:	f109 0314 	add.w	r3, r9, #20
 800bf50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf54:	9202      	str	r2, [sp, #8]
 800bf56:	1b3a      	subs	r2, r7, r4
 800bf58:	3a15      	subs	r2, #21
 800bf5a:	f022 0203 	bic.w	r2, r2, #3
 800bf5e:	3204      	adds	r2, #4
 800bf60:	f104 0115 	add.w	r1, r4, #21
 800bf64:	428f      	cmp	r7, r1
 800bf66:	bf38      	it	cc
 800bf68:	2204      	movcc	r2, #4
 800bf6a:	9201      	str	r2, [sp, #4]
 800bf6c:	9a02      	ldr	r2, [sp, #8]
 800bf6e:	9303      	str	r3, [sp, #12]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d80c      	bhi.n	800bf8e <__multiply+0x9e>
 800bf74:	2e00      	cmp	r6, #0
 800bf76:	dd03      	ble.n	800bf80 <__multiply+0x90>
 800bf78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d05a      	beq.n	800c036 <__multiply+0x146>
 800bf80:	6106      	str	r6, [r0, #16]
 800bf82:	b005      	add	sp, #20
 800bf84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf88:	f843 2b04 	str.w	r2, [r3], #4
 800bf8c:	e7d8      	b.n	800bf40 <__multiply+0x50>
 800bf8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf92:	f1ba 0f00 	cmp.w	sl, #0
 800bf96:	d024      	beq.n	800bfe2 <__multiply+0xf2>
 800bf98:	f104 0e14 	add.w	lr, r4, #20
 800bf9c:	46a9      	mov	r9, r5
 800bf9e:	f04f 0c00 	mov.w	ip, #0
 800bfa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bfa6:	f8d9 1000 	ldr.w	r1, [r9]
 800bfaa:	fa1f fb82 	uxth.w	fp, r2
 800bfae:	b289      	uxth	r1, r1
 800bfb0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bfb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bfb8:	f8d9 2000 	ldr.w	r2, [r9]
 800bfbc:	4461      	add	r1, ip
 800bfbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfc2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bfc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bfca:	b289      	uxth	r1, r1
 800bfcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bfd0:	4577      	cmp	r7, lr
 800bfd2:	f849 1b04 	str.w	r1, [r9], #4
 800bfd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfda:	d8e2      	bhi.n	800bfa2 <__multiply+0xb2>
 800bfdc:	9a01      	ldr	r2, [sp, #4]
 800bfde:	f845 c002 	str.w	ip, [r5, r2]
 800bfe2:	9a03      	ldr	r2, [sp, #12]
 800bfe4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	f1b9 0f00 	cmp.w	r9, #0
 800bfee:	d020      	beq.n	800c032 <__multiply+0x142>
 800bff0:	6829      	ldr	r1, [r5, #0]
 800bff2:	f104 0c14 	add.w	ip, r4, #20
 800bff6:	46ae      	mov	lr, r5
 800bff8:	f04f 0a00 	mov.w	sl, #0
 800bffc:	f8bc b000 	ldrh.w	fp, [ip]
 800c000:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c004:	fb09 220b 	mla	r2, r9, fp, r2
 800c008:	4492      	add	sl, r2
 800c00a:	b289      	uxth	r1, r1
 800c00c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c010:	f84e 1b04 	str.w	r1, [lr], #4
 800c014:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c018:	f8be 1000 	ldrh.w	r1, [lr]
 800c01c:	0c12      	lsrs	r2, r2, #16
 800c01e:	fb09 1102 	mla	r1, r9, r2, r1
 800c022:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c026:	4567      	cmp	r7, ip
 800c028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c02c:	d8e6      	bhi.n	800bffc <__multiply+0x10c>
 800c02e:	9a01      	ldr	r2, [sp, #4]
 800c030:	50a9      	str	r1, [r5, r2]
 800c032:	3504      	adds	r5, #4
 800c034:	e79a      	b.n	800bf6c <__multiply+0x7c>
 800c036:	3e01      	subs	r6, #1
 800c038:	e79c      	b.n	800bf74 <__multiply+0x84>
 800c03a:	bf00      	nop
 800c03c:	0800f1cf 	.word	0x0800f1cf
 800c040:	0800f25c 	.word	0x0800f25c

0800c044 <__pow5mult>:
 800c044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c048:	4615      	mov	r5, r2
 800c04a:	f012 0203 	ands.w	r2, r2, #3
 800c04e:	4606      	mov	r6, r0
 800c050:	460f      	mov	r7, r1
 800c052:	d007      	beq.n	800c064 <__pow5mult+0x20>
 800c054:	4c25      	ldr	r4, [pc, #148]	; (800c0ec <__pow5mult+0xa8>)
 800c056:	3a01      	subs	r2, #1
 800c058:	2300      	movs	r3, #0
 800c05a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c05e:	f7ff fe51 	bl	800bd04 <__multadd>
 800c062:	4607      	mov	r7, r0
 800c064:	10ad      	asrs	r5, r5, #2
 800c066:	d03d      	beq.n	800c0e4 <__pow5mult+0xa0>
 800c068:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c06a:	b97c      	cbnz	r4, 800c08c <__pow5mult+0x48>
 800c06c:	2010      	movs	r0, #16
 800c06e:	f7fc f9f3 	bl	8008458 <malloc>
 800c072:	4602      	mov	r2, r0
 800c074:	6270      	str	r0, [r6, #36]	; 0x24
 800c076:	b928      	cbnz	r0, 800c084 <__pow5mult+0x40>
 800c078:	4b1d      	ldr	r3, [pc, #116]	; (800c0f0 <__pow5mult+0xac>)
 800c07a:	481e      	ldr	r0, [pc, #120]	; (800c0f4 <__pow5mult+0xb0>)
 800c07c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c080:	f7fb ff0c 	bl	8007e9c <__assert_func>
 800c084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c088:	6004      	str	r4, [r0, #0]
 800c08a:	60c4      	str	r4, [r0, #12]
 800c08c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c094:	b94c      	cbnz	r4, 800c0aa <__pow5mult+0x66>
 800c096:	f240 2171 	movw	r1, #625	; 0x271
 800c09a:	4630      	mov	r0, r6
 800c09c:	f7ff ff12 	bl	800bec4 <__i2b>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	f04f 0900 	mov.w	r9, #0
 800c0ae:	07eb      	lsls	r3, r5, #31
 800c0b0:	d50a      	bpl.n	800c0c8 <__pow5mult+0x84>
 800c0b2:	4639      	mov	r1, r7
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f7ff ff1a 	bl	800bef0 <__multiply>
 800c0bc:	4639      	mov	r1, r7
 800c0be:	4680      	mov	r8, r0
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f7ff fdfd 	bl	800bcc0 <_Bfree>
 800c0c6:	4647      	mov	r7, r8
 800c0c8:	106d      	asrs	r5, r5, #1
 800c0ca:	d00b      	beq.n	800c0e4 <__pow5mult+0xa0>
 800c0cc:	6820      	ldr	r0, [r4, #0]
 800c0ce:	b938      	cbnz	r0, 800c0e0 <__pow5mult+0x9c>
 800c0d0:	4622      	mov	r2, r4
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f7ff ff0b 	bl	800bef0 <__multiply>
 800c0da:	6020      	str	r0, [r4, #0]
 800c0dc:	f8c0 9000 	str.w	r9, [r0]
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	e7e4      	b.n	800c0ae <__pow5mult+0x6a>
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ea:	bf00      	nop
 800c0ec:	0800f3a8 	.word	0x0800f3a8
 800c0f0:	0800f15d 	.word	0x0800f15d
 800c0f4:	0800f25c 	.word	0x0800f25c

0800c0f8 <__lshift>:
 800c0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	6849      	ldr	r1, [r1, #4]
 800c100:	6923      	ldr	r3, [r4, #16]
 800c102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	4607      	mov	r7, r0
 800c10a:	4691      	mov	r9, r2
 800c10c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c110:	f108 0601 	add.w	r6, r8, #1
 800c114:	42b3      	cmp	r3, r6
 800c116:	db0b      	blt.n	800c130 <__lshift+0x38>
 800c118:	4638      	mov	r0, r7
 800c11a:	f7ff fd91 	bl	800bc40 <_Balloc>
 800c11e:	4605      	mov	r5, r0
 800c120:	b948      	cbnz	r0, 800c136 <__lshift+0x3e>
 800c122:	4602      	mov	r2, r0
 800c124:	4b2a      	ldr	r3, [pc, #168]	; (800c1d0 <__lshift+0xd8>)
 800c126:	482b      	ldr	r0, [pc, #172]	; (800c1d4 <__lshift+0xdc>)
 800c128:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c12c:	f7fb feb6 	bl	8007e9c <__assert_func>
 800c130:	3101      	adds	r1, #1
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	e7ee      	b.n	800c114 <__lshift+0x1c>
 800c136:	2300      	movs	r3, #0
 800c138:	f100 0114 	add.w	r1, r0, #20
 800c13c:	f100 0210 	add.w	r2, r0, #16
 800c140:	4618      	mov	r0, r3
 800c142:	4553      	cmp	r3, sl
 800c144:	db37      	blt.n	800c1b6 <__lshift+0xbe>
 800c146:	6920      	ldr	r0, [r4, #16]
 800c148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c14c:	f104 0314 	add.w	r3, r4, #20
 800c150:	f019 091f 	ands.w	r9, r9, #31
 800c154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c158:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c15c:	d02f      	beq.n	800c1be <__lshift+0xc6>
 800c15e:	f1c9 0e20 	rsb	lr, r9, #32
 800c162:	468a      	mov	sl, r1
 800c164:	f04f 0c00 	mov.w	ip, #0
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	fa02 f209 	lsl.w	r2, r2, r9
 800c16e:	ea42 020c 	orr.w	r2, r2, ip
 800c172:	f84a 2b04 	str.w	r2, [sl], #4
 800c176:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17a:	4298      	cmp	r0, r3
 800c17c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c180:	d8f2      	bhi.n	800c168 <__lshift+0x70>
 800c182:	1b03      	subs	r3, r0, r4
 800c184:	3b15      	subs	r3, #21
 800c186:	f023 0303 	bic.w	r3, r3, #3
 800c18a:	3304      	adds	r3, #4
 800c18c:	f104 0215 	add.w	r2, r4, #21
 800c190:	4290      	cmp	r0, r2
 800c192:	bf38      	it	cc
 800c194:	2304      	movcc	r3, #4
 800c196:	f841 c003 	str.w	ip, [r1, r3]
 800c19a:	f1bc 0f00 	cmp.w	ip, #0
 800c19e:	d001      	beq.n	800c1a4 <__lshift+0xac>
 800c1a0:	f108 0602 	add.w	r6, r8, #2
 800c1a4:	3e01      	subs	r6, #1
 800c1a6:	4638      	mov	r0, r7
 800c1a8:	612e      	str	r6, [r5, #16]
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	f7ff fd88 	bl	800bcc0 <_Bfree>
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	e7c1      	b.n	800c142 <__lshift+0x4a>
 800c1be:	3904      	subs	r1, #4
 800c1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1c8:	4298      	cmp	r0, r3
 800c1ca:	d8f9      	bhi.n	800c1c0 <__lshift+0xc8>
 800c1cc:	e7ea      	b.n	800c1a4 <__lshift+0xac>
 800c1ce:	bf00      	nop
 800c1d0:	0800f1cf 	.word	0x0800f1cf
 800c1d4:	0800f25c 	.word	0x0800f25c

0800c1d8 <__mcmp>:
 800c1d8:	b530      	push	{r4, r5, lr}
 800c1da:	6902      	ldr	r2, [r0, #16]
 800c1dc:	690c      	ldr	r4, [r1, #16]
 800c1de:	1b12      	subs	r2, r2, r4
 800c1e0:	d10e      	bne.n	800c200 <__mcmp+0x28>
 800c1e2:	f100 0314 	add.w	r3, r0, #20
 800c1e6:	3114      	adds	r1, #20
 800c1e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c1ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c1f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c1f8:	42a5      	cmp	r5, r4
 800c1fa:	d003      	beq.n	800c204 <__mcmp+0x2c>
 800c1fc:	d305      	bcc.n	800c20a <__mcmp+0x32>
 800c1fe:	2201      	movs	r2, #1
 800c200:	4610      	mov	r0, r2
 800c202:	bd30      	pop	{r4, r5, pc}
 800c204:	4283      	cmp	r3, r0
 800c206:	d3f3      	bcc.n	800c1f0 <__mcmp+0x18>
 800c208:	e7fa      	b.n	800c200 <__mcmp+0x28>
 800c20a:	f04f 32ff 	mov.w	r2, #4294967295
 800c20e:	e7f7      	b.n	800c200 <__mcmp+0x28>

0800c210 <__mdiff>:
 800c210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	460c      	mov	r4, r1
 800c216:	4606      	mov	r6, r0
 800c218:	4611      	mov	r1, r2
 800c21a:	4620      	mov	r0, r4
 800c21c:	4690      	mov	r8, r2
 800c21e:	f7ff ffdb 	bl	800c1d8 <__mcmp>
 800c222:	1e05      	subs	r5, r0, #0
 800c224:	d110      	bne.n	800c248 <__mdiff+0x38>
 800c226:	4629      	mov	r1, r5
 800c228:	4630      	mov	r0, r6
 800c22a:	f7ff fd09 	bl	800bc40 <_Balloc>
 800c22e:	b930      	cbnz	r0, 800c23e <__mdiff+0x2e>
 800c230:	4b3a      	ldr	r3, [pc, #232]	; (800c31c <__mdiff+0x10c>)
 800c232:	4602      	mov	r2, r0
 800c234:	f240 2132 	movw	r1, #562	; 0x232
 800c238:	4839      	ldr	r0, [pc, #228]	; (800c320 <__mdiff+0x110>)
 800c23a:	f7fb fe2f 	bl	8007e9c <__assert_func>
 800c23e:	2301      	movs	r3, #1
 800c240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c248:	bfa4      	itt	ge
 800c24a:	4643      	movge	r3, r8
 800c24c:	46a0      	movge	r8, r4
 800c24e:	4630      	mov	r0, r6
 800c250:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c254:	bfa6      	itte	ge
 800c256:	461c      	movge	r4, r3
 800c258:	2500      	movge	r5, #0
 800c25a:	2501      	movlt	r5, #1
 800c25c:	f7ff fcf0 	bl	800bc40 <_Balloc>
 800c260:	b920      	cbnz	r0, 800c26c <__mdiff+0x5c>
 800c262:	4b2e      	ldr	r3, [pc, #184]	; (800c31c <__mdiff+0x10c>)
 800c264:	4602      	mov	r2, r0
 800c266:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c26a:	e7e5      	b.n	800c238 <__mdiff+0x28>
 800c26c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c270:	6926      	ldr	r6, [r4, #16]
 800c272:	60c5      	str	r5, [r0, #12]
 800c274:	f104 0914 	add.w	r9, r4, #20
 800c278:	f108 0514 	add.w	r5, r8, #20
 800c27c:	f100 0e14 	add.w	lr, r0, #20
 800c280:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c284:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c288:	f108 0210 	add.w	r2, r8, #16
 800c28c:	46f2      	mov	sl, lr
 800c28e:	2100      	movs	r1, #0
 800c290:	f859 3b04 	ldr.w	r3, [r9], #4
 800c294:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c298:	fa1f f883 	uxth.w	r8, r3
 800c29c:	fa11 f18b 	uxtah	r1, r1, fp
 800c2a0:	0c1b      	lsrs	r3, r3, #16
 800c2a2:	eba1 0808 	sub.w	r8, r1, r8
 800c2a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c2ae:	fa1f f888 	uxth.w	r8, r8
 800c2b2:	1419      	asrs	r1, r3, #16
 800c2b4:	454e      	cmp	r6, r9
 800c2b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c2ba:	f84a 3b04 	str.w	r3, [sl], #4
 800c2be:	d8e7      	bhi.n	800c290 <__mdiff+0x80>
 800c2c0:	1b33      	subs	r3, r6, r4
 800c2c2:	3b15      	subs	r3, #21
 800c2c4:	f023 0303 	bic.w	r3, r3, #3
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	3415      	adds	r4, #21
 800c2cc:	42a6      	cmp	r6, r4
 800c2ce:	bf38      	it	cc
 800c2d0:	2304      	movcc	r3, #4
 800c2d2:	441d      	add	r5, r3
 800c2d4:	4473      	add	r3, lr
 800c2d6:	469e      	mov	lr, r3
 800c2d8:	462e      	mov	r6, r5
 800c2da:	4566      	cmp	r6, ip
 800c2dc:	d30e      	bcc.n	800c2fc <__mdiff+0xec>
 800c2de:	f10c 0203 	add.w	r2, ip, #3
 800c2e2:	1b52      	subs	r2, r2, r5
 800c2e4:	f022 0203 	bic.w	r2, r2, #3
 800c2e8:	3d03      	subs	r5, #3
 800c2ea:	45ac      	cmp	ip, r5
 800c2ec:	bf38      	it	cc
 800c2ee:	2200      	movcc	r2, #0
 800c2f0:	441a      	add	r2, r3
 800c2f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c2f6:	b17b      	cbz	r3, 800c318 <__mdiff+0x108>
 800c2f8:	6107      	str	r7, [r0, #16]
 800c2fa:	e7a3      	b.n	800c244 <__mdiff+0x34>
 800c2fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c300:	fa11 f288 	uxtah	r2, r1, r8
 800c304:	1414      	asrs	r4, r2, #16
 800c306:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c30a:	b292      	uxth	r2, r2
 800c30c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c310:	f84e 2b04 	str.w	r2, [lr], #4
 800c314:	1421      	asrs	r1, r4, #16
 800c316:	e7e0      	b.n	800c2da <__mdiff+0xca>
 800c318:	3f01      	subs	r7, #1
 800c31a:	e7ea      	b.n	800c2f2 <__mdiff+0xe2>
 800c31c:	0800f1cf 	.word	0x0800f1cf
 800c320:	0800f25c 	.word	0x0800f25c

0800c324 <__ulp>:
 800c324:	b082      	sub	sp, #8
 800c326:	ed8d 0b00 	vstr	d0, [sp]
 800c32a:	9b01      	ldr	r3, [sp, #4]
 800c32c:	4912      	ldr	r1, [pc, #72]	; (800c378 <__ulp+0x54>)
 800c32e:	4019      	ands	r1, r3
 800c330:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c334:	2900      	cmp	r1, #0
 800c336:	dd05      	ble.n	800c344 <__ulp+0x20>
 800c338:	2200      	movs	r2, #0
 800c33a:	460b      	mov	r3, r1
 800c33c:	ec43 2b10 	vmov	d0, r2, r3
 800c340:	b002      	add	sp, #8
 800c342:	4770      	bx	lr
 800c344:	4249      	negs	r1, r1
 800c346:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c34a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c34e:	f04f 0200 	mov.w	r2, #0
 800c352:	f04f 0300 	mov.w	r3, #0
 800c356:	da04      	bge.n	800c362 <__ulp+0x3e>
 800c358:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c35c:	fa41 f300 	asr.w	r3, r1, r0
 800c360:	e7ec      	b.n	800c33c <__ulp+0x18>
 800c362:	f1a0 0114 	sub.w	r1, r0, #20
 800c366:	291e      	cmp	r1, #30
 800c368:	bfda      	itte	le
 800c36a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c36e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c372:	2101      	movgt	r1, #1
 800c374:	460a      	mov	r2, r1
 800c376:	e7e1      	b.n	800c33c <__ulp+0x18>
 800c378:	7ff00000 	.word	0x7ff00000

0800c37c <__b2d>:
 800c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37e:	6905      	ldr	r5, [r0, #16]
 800c380:	f100 0714 	add.w	r7, r0, #20
 800c384:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c388:	1f2e      	subs	r6, r5, #4
 800c38a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c38e:	4620      	mov	r0, r4
 800c390:	f7ff fd48 	bl	800be24 <__hi0bits>
 800c394:	f1c0 0320 	rsb	r3, r0, #32
 800c398:	280a      	cmp	r0, #10
 800c39a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c418 <__b2d+0x9c>
 800c39e:	600b      	str	r3, [r1, #0]
 800c3a0:	dc14      	bgt.n	800c3cc <__b2d+0x50>
 800c3a2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c3a6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c3aa:	42b7      	cmp	r7, r6
 800c3ac:	ea41 030c 	orr.w	r3, r1, ip
 800c3b0:	bf34      	ite	cc
 800c3b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c3b6:	2100      	movcs	r1, #0
 800c3b8:	3015      	adds	r0, #21
 800c3ba:	fa04 f000 	lsl.w	r0, r4, r0
 800c3be:	fa21 f10e 	lsr.w	r1, r1, lr
 800c3c2:	ea40 0201 	orr.w	r2, r0, r1
 800c3c6:	ec43 2b10 	vmov	d0, r2, r3
 800c3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3cc:	42b7      	cmp	r7, r6
 800c3ce:	bf3a      	itte	cc
 800c3d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c3d4:	f1a5 0608 	subcc.w	r6, r5, #8
 800c3d8:	2100      	movcs	r1, #0
 800c3da:	380b      	subs	r0, #11
 800c3dc:	d017      	beq.n	800c40e <__b2d+0x92>
 800c3de:	f1c0 0c20 	rsb	ip, r0, #32
 800c3e2:	fa04 f500 	lsl.w	r5, r4, r0
 800c3e6:	42be      	cmp	r6, r7
 800c3e8:	fa21 f40c 	lsr.w	r4, r1, ip
 800c3ec:	ea45 0504 	orr.w	r5, r5, r4
 800c3f0:	bf8c      	ite	hi
 800c3f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c3f6:	2400      	movls	r4, #0
 800c3f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c3fc:	fa01 f000 	lsl.w	r0, r1, r0
 800c400:	fa24 f40c 	lsr.w	r4, r4, ip
 800c404:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c408:	ea40 0204 	orr.w	r2, r0, r4
 800c40c:	e7db      	b.n	800c3c6 <__b2d+0x4a>
 800c40e:	ea44 030c 	orr.w	r3, r4, ip
 800c412:	460a      	mov	r2, r1
 800c414:	e7d7      	b.n	800c3c6 <__b2d+0x4a>
 800c416:	bf00      	nop
 800c418:	3ff00000 	.word	0x3ff00000

0800c41c <__d2b>:
 800c41c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c420:	4689      	mov	r9, r1
 800c422:	2101      	movs	r1, #1
 800c424:	ec57 6b10 	vmov	r6, r7, d0
 800c428:	4690      	mov	r8, r2
 800c42a:	f7ff fc09 	bl	800bc40 <_Balloc>
 800c42e:	4604      	mov	r4, r0
 800c430:	b930      	cbnz	r0, 800c440 <__d2b+0x24>
 800c432:	4602      	mov	r2, r0
 800c434:	4b25      	ldr	r3, [pc, #148]	; (800c4cc <__d2b+0xb0>)
 800c436:	4826      	ldr	r0, [pc, #152]	; (800c4d0 <__d2b+0xb4>)
 800c438:	f240 310a 	movw	r1, #778	; 0x30a
 800c43c:	f7fb fd2e 	bl	8007e9c <__assert_func>
 800c440:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c448:	bb35      	cbnz	r5, 800c498 <__d2b+0x7c>
 800c44a:	2e00      	cmp	r6, #0
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	d028      	beq.n	800c4a2 <__d2b+0x86>
 800c450:	4668      	mov	r0, sp
 800c452:	9600      	str	r6, [sp, #0]
 800c454:	f7ff fd06 	bl	800be64 <__lo0bits>
 800c458:	9900      	ldr	r1, [sp, #0]
 800c45a:	b300      	cbz	r0, 800c49e <__d2b+0x82>
 800c45c:	9a01      	ldr	r2, [sp, #4]
 800c45e:	f1c0 0320 	rsb	r3, r0, #32
 800c462:	fa02 f303 	lsl.w	r3, r2, r3
 800c466:	430b      	orrs	r3, r1
 800c468:	40c2      	lsrs	r2, r0
 800c46a:	6163      	str	r3, [r4, #20]
 800c46c:	9201      	str	r2, [sp, #4]
 800c46e:	9b01      	ldr	r3, [sp, #4]
 800c470:	61a3      	str	r3, [r4, #24]
 800c472:	2b00      	cmp	r3, #0
 800c474:	bf14      	ite	ne
 800c476:	2202      	movne	r2, #2
 800c478:	2201      	moveq	r2, #1
 800c47a:	6122      	str	r2, [r4, #16]
 800c47c:	b1d5      	cbz	r5, 800c4b4 <__d2b+0x98>
 800c47e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c482:	4405      	add	r5, r0
 800c484:	f8c9 5000 	str.w	r5, [r9]
 800c488:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c48c:	f8c8 0000 	str.w	r0, [r8]
 800c490:	4620      	mov	r0, r4
 800c492:	b003      	add	sp, #12
 800c494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c49c:	e7d5      	b.n	800c44a <__d2b+0x2e>
 800c49e:	6161      	str	r1, [r4, #20]
 800c4a0:	e7e5      	b.n	800c46e <__d2b+0x52>
 800c4a2:	a801      	add	r0, sp, #4
 800c4a4:	f7ff fcde 	bl	800be64 <__lo0bits>
 800c4a8:	9b01      	ldr	r3, [sp, #4]
 800c4aa:	6163      	str	r3, [r4, #20]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	6122      	str	r2, [r4, #16]
 800c4b0:	3020      	adds	r0, #32
 800c4b2:	e7e3      	b.n	800c47c <__d2b+0x60>
 800c4b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4bc:	f8c9 0000 	str.w	r0, [r9]
 800c4c0:	6918      	ldr	r0, [r3, #16]
 800c4c2:	f7ff fcaf 	bl	800be24 <__hi0bits>
 800c4c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4ca:	e7df      	b.n	800c48c <__d2b+0x70>
 800c4cc:	0800f1cf 	.word	0x0800f1cf
 800c4d0:	0800f25c 	.word	0x0800f25c

0800c4d4 <__ratio>:
 800c4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d8:	4688      	mov	r8, r1
 800c4da:	4669      	mov	r1, sp
 800c4dc:	4681      	mov	r9, r0
 800c4de:	f7ff ff4d 	bl	800c37c <__b2d>
 800c4e2:	a901      	add	r1, sp, #4
 800c4e4:	4640      	mov	r0, r8
 800c4e6:	ec55 4b10 	vmov	r4, r5, d0
 800c4ea:	f7ff ff47 	bl	800c37c <__b2d>
 800c4ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c4f6:	eba3 0c02 	sub.w	ip, r3, r2
 800c4fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c4fe:	1a9b      	subs	r3, r3, r2
 800c500:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c504:	ec51 0b10 	vmov	r0, r1, d0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	bfd6      	itet	le
 800c50c:	460a      	movle	r2, r1
 800c50e:	462a      	movgt	r2, r5
 800c510:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c514:	468b      	mov	fp, r1
 800c516:	462f      	mov	r7, r5
 800c518:	bfd4      	ite	le
 800c51a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c51e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c522:	4620      	mov	r0, r4
 800c524:	ee10 2a10 	vmov	r2, s0
 800c528:	465b      	mov	r3, fp
 800c52a:	4639      	mov	r1, r7
 800c52c:	f7f4 f98e 	bl	800084c <__aeabi_ddiv>
 800c530:	ec41 0b10 	vmov	d0, r0, r1
 800c534:	b003      	add	sp, #12
 800c536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c53a <__copybits>:
 800c53a:	3901      	subs	r1, #1
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	1149      	asrs	r1, r1, #5
 800c540:	6914      	ldr	r4, [r2, #16]
 800c542:	3101      	adds	r1, #1
 800c544:	f102 0314 	add.w	r3, r2, #20
 800c548:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c54c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c550:	1f05      	subs	r5, r0, #4
 800c552:	42a3      	cmp	r3, r4
 800c554:	d30c      	bcc.n	800c570 <__copybits+0x36>
 800c556:	1aa3      	subs	r3, r4, r2
 800c558:	3b11      	subs	r3, #17
 800c55a:	f023 0303 	bic.w	r3, r3, #3
 800c55e:	3211      	adds	r2, #17
 800c560:	42a2      	cmp	r2, r4
 800c562:	bf88      	it	hi
 800c564:	2300      	movhi	r3, #0
 800c566:	4418      	add	r0, r3
 800c568:	2300      	movs	r3, #0
 800c56a:	4288      	cmp	r0, r1
 800c56c:	d305      	bcc.n	800c57a <__copybits+0x40>
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	f853 6b04 	ldr.w	r6, [r3], #4
 800c574:	f845 6f04 	str.w	r6, [r5, #4]!
 800c578:	e7eb      	b.n	800c552 <__copybits+0x18>
 800c57a:	f840 3b04 	str.w	r3, [r0], #4
 800c57e:	e7f4      	b.n	800c56a <__copybits+0x30>

0800c580 <__any_on>:
 800c580:	f100 0214 	add.w	r2, r0, #20
 800c584:	6900      	ldr	r0, [r0, #16]
 800c586:	114b      	asrs	r3, r1, #5
 800c588:	4298      	cmp	r0, r3
 800c58a:	b510      	push	{r4, lr}
 800c58c:	db11      	blt.n	800c5b2 <__any_on+0x32>
 800c58e:	dd0a      	ble.n	800c5a6 <__any_on+0x26>
 800c590:	f011 011f 	ands.w	r1, r1, #31
 800c594:	d007      	beq.n	800c5a6 <__any_on+0x26>
 800c596:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c59a:	fa24 f001 	lsr.w	r0, r4, r1
 800c59e:	fa00 f101 	lsl.w	r1, r0, r1
 800c5a2:	428c      	cmp	r4, r1
 800c5a4:	d10b      	bne.n	800c5be <__any_on+0x3e>
 800c5a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d803      	bhi.n	800c5b6 <__any_on+0x36>
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	bd10      	pop	{r4, pc}
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	e7f7      	b.n	800c5a6 <__any_on+0x26>
 800c5b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5ba:	2900      	cmp	r1, #0
 800c5bc:	d0f5      	beq.n	800c5aa <__any_on+0x2a>
 800c5be:	2001      	movs	r0, #1
 800c5c0:	e7f6      	b.n	800c5b0 <__any_on+0x30>

0800c5c2 <_realloc_r>:
 800c5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c6:	4680      	mov	r8, r0
 800c5c8:	4614      	mov	r4, r2
 800c5ca:	460e      	mov	r6, r1
 800c5cc:	b921      	cbnz	r1, 800c5d8 <_realloc_r+0x16>
 800c5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d2:	4611      	mov	r1, r2
 800c5d4:	f7fc b802 	b.w	80085dc <_malloc_r>
 800c5d8:	b92a      	cbnz	r2, 800c5e6 <_realloc_r+0x24>
 800c5da:	f7fb ff93 	bl	8008504 <_free_r>
 800c5de:	4625      	mov	r5, r4
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e6:	f000 fa1b 	bl	800ca20 <_malloc_usable_size_r>
 800c5ea:	4284      	cmp	r4, r0
 800c5ec:	4607      	mov	r7, r0
 800c5ee:	d802      	bhi.n	800c5f6 <_realloc_r+0x34>
 800c5f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5f4:	d812      	bhi.n	800c61c <_realloc_r+0x5a>
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	f7fb ffef 	bl	80085dc <_malloc_r>
 800c5fe:	4605      	mov	r5, r0
 800c600:	2800      	cmp	r0, #0
 800c602:	d0ed      	beq.n	800c5e0 <_realloc_r+0x1e>
 800c604:	42bc      	cmp	r4, r7
 800c606:	4622      	mov	r2, r4
 800c608:	4631      	mov	r1, r6
 800c60a:	bf28      	it	cs
 800c60c:	463a      	movcs	r2, r7
 800c60e:	f7fb ff33 	bl	8008478 <memcpy>
 800c612:	4631      	mov	r1, r6
 800c614:	4640      	mov	r0, r8
 800c616:	f7fb ff75 	bl	8008504 <_free_r>
 800c61a:	e7e1      	b.n	800c5e0 <_realloc_r+0x1e>
 800c61c:	4635      	mov	r5, r6
 800c61e:	e7df      	b.n	800c5e0 <_realloc_r+0x1e>

0800c620 <__ssputs_r>:
 800c620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c624:	688e      	ldr	r6, [r1, #8]
 800c626:	429e      	cmp	r6, r3
 800c628:	4682      	mov	sl, r0
 800c62a:	460c      	mov	r4, r1
 800c62c:	4690      	mov	r8, r2
 800c62e:	461f      	mov	r7, r3
 800c630:	d838      	bhi.n	800c6a4 <__ssputs_r+0x84>
 800c632:	898a      	ldrh	r2, [r1, #12]
 800c634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c638:	d032      	beq.n	800c6a0 <__ssputs_r+0x80>
 800c63a:	6825      	ldr	r5, [r4, #0]
 800c63c:	6909      	ldr	r1, [r1, #16]
 800c63e:	eba5 0901 	sub.w	r9, r5, r1
 800c642:	6965      	ldr	r5, [r4, #20]
 800c644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c64c:	3301      	adds	r3, #1
 800c64e:	444b      	add	r3, r9
 800c650:	106d      	asrs	r5, r5, #1
 800c652:	429d      	cmp	r5, r3
 800c654:	bf38      	it	cc
 800c656:	461d      	movcc	r5, r3
 800c658:	0553      	lsls	r3, r2, #21
 800c65a:	d531      	bpl.n	800c6c0 <__ssputs_r+0xa0>
 800c65c:	4629      	mov	r1, r5
 800c65e:	f7fb ffbd 	bl	80085dc <_malloc_r>
 800c662:	4606      	mov	r6, r0
 800c664:	b950      	cbnz	r0, 800c67c <__ssputs_r+0x5c>
 800c666:	230c      	movs	r3, #12
 800c668:	f8ca 3000 	str.w	r3, [sl]
 800c66c:	89a3      	ldrh	r3, [r4, #12]
 800c66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	f04f 30ff 	mov.w	r0, #4294967295
 800c678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67c:	6921      	ldr	r1, [r4, #16]
 800c67e:	464a      	mov	r2, r9
 800c680:	f7fb fefa 	bl	8008478 <memcpy>
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c68a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c68e:	81a3      	strh	r3, [r4, #12]
 800c690:	6126      	str	r6, [r4, #16]
 800c692:	6165      	str	r5, [r4, #20]
 800c694:	444e      	add	r6, r9
 800c696:	eba5 0509 	sub.w	r5, r5, r9
 800c69a:	6026      	str	r6, [r4, #0]
 800c69c:	60a5      	str	r5, [r4, #8]
 800c69e:	463e      	mov	r6, r7
 800c6a0:	42be      	cmp	r6, r7
 800c6a2:	d900      	bls.n	800c6a6 <__ssputs_r+0x86>
 800c6a4:	463e      	mov	r6, r7
 800c6a6:	6820      	ldr	r0, [r4, #0]
 800c6a8:	4632      	mov	r2, r6
 800c6aa:	4641      	mov	r1, r8
 800c6ac:	f7fb fef2 	bl	8008494 <memmove>
 800c6b0:	68a3      	ldr	r3, [r4, #8]
 800c6b2:	1b9b      	subs	r3, r3, r6
 800c6b4:	60a3      	str	r3, [r4, #8]
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	4433      	add	r3, r6
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	2000      	movs	r0, #0
 800c6be:	e7db      	b.n	800c678 <__ssputs_r+0x58>
 800c6c0:	462a      	mov	r2, r5
 800c6c2:	f7ff ff7e 	bl	800c5c2 <_realloc_r>
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d1e1      	bne.n	800c690 <__ssputs_r+0x70>
 800c6cc:	6921      	ldr	r1, [r4, #16]
 800c6ce:	4650      	mov	r0, sl
 800c6d0:	f7fb ff18 	bl	8008504 <_free_r>
 800c6d4:	e7c7      	b.n	800c666 <__ssputs_r+0x46>
	...

0800c6d8 <_svfiprintf_r>:
 800c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	4698      	mov	r8, r3
 800c6de:	898b      	ldrh	r3, [r1, #12]
 800c6e0:	061b      	lsls	r3, r3, #24
 800c6e2:	b09d      	sub	sp, #116	; 0x74
 800c6e4:	4607      	mov	r7, r0
 800c6e6:	460d      	mov	r5, r1
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	d50e      	bpl.n	800c70a <_svfiprintf_r+0x32>
 800c6ec:	690b      	ldr	r3, [r1, #16]
 800c6ee:	b963      	cbnz	r3, 800c70a <_svfiprintf_r+0x32>
 800c6f0:	2140      	movs	r1, #64	; 0x40
 800c6f2:	f7fb ff73 	bl	80085dc <_malloc_r>
 800c6f6:	6028      	str	r0, [r5, #0]
 800c6f8:	6128      	str	r0, [r5, #16]
 800c6fa:	b920      	cbnz	r0, 800c706 <_svfiprintf_r+0x2e>
 800c6fc:	230c      	movs	r3, #12
 800c6fe:	603b      	str	r3, [r7, #0]
 800c700:	f04f 30ff 	mov.w	r0, #4294967295
 800c704:	e0d1      	b.n	800c8aa <_svfiprintf_r+0x1d2>
 800c706:	2340      	movs	r3, #64	; 0x40
 800c708:	616b      	str	r3, [r5, #20]
 800c70a:	2300      	movs	r3, #0
 800c70c:	9309      	str	r3, [sp, #36]	; 0x24
 800c70e:	2320      	movs	r3, #32
 800c710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c714:	f8cd 800c 	str.w	r8, [sp, #12]
 800c718:	2330      	movs	r3, #48	; 0x30
 800c71a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8c4 <_svfiprintf_r+0x1ec>
 800c71e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c722:	f04f 0901 	mov.w	r9, #1
 800c726:	4623      	mov	r3, r4
 800c728:	469a      	mov	sl, r3
 800c72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c72e:	b10a      	cbz	r2, 800c734 <_svfiprintf_r+0x5c>
 800c730:	2a25      	cmp	r2, #37	; 0x25
 800c732:	d1f9      	bne.n	800c728 <_svfiprintf_r+0x50>
 800c734:	ebba 0b04 	subs.w	fp, sl, r4
 800c738:	d00b      	beq.n	800c752 <_svfiprintf_r+0x7a>
 800c73a:	465b      	mov	r3, fp
 800c73c:	4622      	mov	r2, r4
 800c73e:	4629      	mov	r1, r5
 800c740:	4638      	mov	r0, r7
 800c742:	f7ff ff6d 	bl	800c620 <__ssputs_r>
 800c746:	3001      	adds	r0, #1
 800c748:	f000 80aa 	beq.w	800c8a0 <_svfiprintf_r+0x1c8>
 800c74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c74e:	445a      	add	r2, fp
 800c750:	9209      	str	r2, [sp, #36]	; 0x24
 800c752:	f89a 3000 	ldrb.w	r3, [sl]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 80a2 	beq.w	800c8a0 <_svfiprintf_r+0x1c8>
 800c75c:	2300      	movs	r3, #0
 800c75e:	f04f 32ff 	mov.w	r2, #4294967295
 800c762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c766:	f10a 0a01 	add.w	sl, sl, #1
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	9307      	str	r3, [sp, #28]
 800c76e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c772:	931a      	str	r3, [sp, #104]	; 0x68
 800c774:	4654      	mov	r4, sl
 800c776:	2205      	movs	r2, #5
 800c778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77c:	4851      	ldr	r0, [pc, #324]	; (800c8c4 <_svfiprintf_r+0x1ec>)
 800c77e:	f7f3 fd2f 	bl	80001e0 <memchr>
 800c782:	9a04      	ldr	r2, [sp, #16]
 800c784:	b9d8      	cbnz	r0, 800c7be <_svfiprintf_r+0xe6>
 800c786:	06d0      	lsls	r0, r2, #27
 800c788:	bf44      	itt	mi
 800c78a:	2320      	movmi	r3, #32
 800c78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c790:	0711      	lsls	r1, r2, #28
 800c792:	bf44      	itt	mi
 800c794:	232b      	movmi	r3, #43	; 0x2b
 800c796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c79a:	f89a 3000 	ldrb.w	r3, [sl]
 800c79e:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a0:	d015      	beq.n	800c7ce <_svfiprintf_r+0xf6>
 800c7a2:	9a07      	ldr	r2, [sp, #28]
 800c7a4:	4654      	mov	r4, sl
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	f04f 0c0a 	mov.w	ip, #10
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b2:	3b30      	subs	r3, #48	; 0x30
 800c7b4:	2b09      	cmp	r3, #9
 800c7b6:	d94e      	bls.n	800c856 <_svfiprintf_r+0x17e>
 800c7b8:	b1b0      	cbz	r0, 800c7e8 <_svfiprintf_r+0x110>
 800c7ba:	9207      	str	r2, [sp, #28]
 800c7bc:	e014      	b.n	800c7e8 <_svfiprintf_r+0x110>
 800c7be:	eba0 0308 	sub.w	r3, r0, r8
 800c7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	9304      	str	r3, [sp, #16]
 800c7ca:	46a2      	mov	sl, r4
 800c7cc:	e7d2      	b.n	800c774 <_svfiprintf_r+0x9c>
 800c7ce:	9b03      	ldr	r3, [sp, #12]
 800c7d0:	1d19      	adds	r1, r3, #4
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	9103      	str	r1, [sp, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	bfbb      	ittet	lt
 800c7da:	425b      	neglt	r3, r3
 800c7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e0:	9307      	strge	r3, [sp, #28]
 800c7e2:	9307      	strlt	r3, [sp, #28]
 800c7e4:	bfb8      	it	lt
 800c7e6:	9204      	strlt	r2, [sp, #16]
 800c7e8:	7823      	ldrb	r3, [r4, #0]
 800c7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c7ec:	d10c      	bne.n	800c808 <_svfiprintf_r+0x130>
 800c7ee:	7863      	ldrb	r3, [r4, #1]
 800c7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f2:	d135      	bne.n	800c860 <_svfiprintf_r+0x188>
 800c7f4:	9b03      	ldr	r3, [sp, #12]
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	9203      	str	r2, [sp, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bfb8      	it	lt
 800c800:	f04f 33ff 	movlt.w	r3, #4294967295
 800c804:	3402      	adds	r4, #2
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8d4 <_svfiprintf_r+0x1fc>
 800c80c:	7821      	ldrb	r1, [r4, #0]
 800c80e:	2203      	movs	r2, #3
 800c810:	4650      	mov	r0, sl
 800c812:	f7f3 fce5 	bl	80001e0 <memchr>
 800c816:	b140      	cbz	r0, 800c82a <_svfiprintf_r+0x152>
 800c818:	2340      	movs	r3, #64	; 0x40
 800c81a:	eba0 000a 	sub.w	r0, r0, sl
 800c81e:	fa03 f000 	lsl.w	r0, r3, r0
 800c822:	9b04      	ldr	r3, [sp, #16]
 800c824:	4303      	orrs	r3, r0
 800c826:	3401      	adds	r4, #1
 800c828:	9304      	str	r3, [sp, #16]
 800c82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82e:	4826      	ldr	r0, [pc, #152]	; (800c8c8 <_svfiprintf_r+0x1f0>)
 800c830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c834:	2206      	movs	r2, #6
 800c836:	f7f3 fcd3 	bl	80001e0 <memchr>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d038      	beq.n	800c8b0 <_svfiprintf_r+0x1d8>
 800c83e:	4b23      	ldr	r3, [pc, #140]	; (800c8cc <_svfiprintf_r+0x1f4>)
 800c840:	bb1b      	cbnz	r3, 800c88a <_svfiprintf_r+0x1b2>
 800c842:	9b03      	ldr	r3, [sp, #12]
 800c844:	3307      	adds	r3, #7
 800c846:	f023 0307 	bic.w	r3, r3, #7
 800c84a:	3308      	adds	r3, #8
 800c84c:	9303      	str	r3, [sp, #12]
 800c84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c850:	4433      	add	r3, r6
 800c852:	9309      	str	r3, [sp, #36]	; 0x24
 800c854:	e767      	b.n	800c726 <_svfiprintf_r+0x4e>
 800c856:	fb0c 3202 	mla	r2, ip, r2, r3
 800c85a:	460c      	mov	r4, r1
 800c85c:	2001      	movs	r0, #1
 800c85e:	e7a5      	b.n	800c7ac <_svfiprintf_r+0xd4>
 800c860:	2300      	movs	r3, #0
 800c862:	3401      	adds	r4, #1
 800c864:	9305      	str	r3, [sp, #20]
 800c866:	4619      	mov	r1, r3
 800c868:	f04f 0c0a 	mov.w	ip, #10
 800c86c:	4620      	mov	r0, r4
 800c86e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c872:	3a30      	subs	r2, #48	; 0x30
 800c874:	2a09      	cmp	r2, #9
 800c876:	d903      	bls.n	800c880 <_svfiprintf_r+0x1a8>
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0c5      	beq.n	800c808 <_svfiprintf_r+0x130>
 800c87c:	9105      	str	r1, [sp, #20]
 800c87e:	e7c3      	b.n	800c808 <_svfiprintf_r+0x130>
 800c880:	fb0c 2101 	mla	r1, ip, r1, r2
 800c884:	4604      	mov	r4, r0
 800c886:	2301      	movs	r3, #1
 800c888:	e7f0      	b.n	800c86c <_svfiprintf_r+0x194>
 800c88a:	ab03      	add	r3, sp, #12
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	462a      	mov	r2, r5
 800c890:	4b0f      	ldr	r3, [pc, #60]	; (800c8d0 <_svfiprintf_r+0x1f8>)
 800c892:	a904      	add	r1, sp, #16
 800c894:	4638      	mov	r0, r7
 800c896:	f7fc f919 	bl	8008acc <_printf_float>
 800c89a:	1c42      	adds	r2, r0, #1
 800c89c:	4606      	mov	r6, r0
 800c89e:	d1d6      	bne.n	800c84e <_svfiprintf_r+0x176>
 800c8a0:	89ab      	ldrh	r3, [r5, #12]
 800c8a2:	065b      	lsls	r3, r3, #25
 800c8a4:	f53f af2c 	bmi.w	800c700 <_svfiprintf_r+0x28>
 800c8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8aa:	b01d      	add	sp, #116	; 0x74
 800c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	ab03      	add	r3, sp, #12
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	462a      	mov	r2, r5
 800c8b6:	4b06      	ldr	r3, [pc, #24]	; (800c8d0 <_svfiprintf_r+0x1f8>)
 800c8b8:	a904      	add	r1, sp, #16
 800c8ba:	4638      	mov	r0, r7
 800c8bc:	f7fc fbaa 	bl	8009014 <_printf_i>
 800c8c0:	e7eb      	b.n	800c89a <_svfiprintf_r+0x1c2>
 800c8c2:	bf00      	nop
 800c8c4:	0800f0b0 	.word	0x0800f0b0
 800c8c8:	0800f0ba 	.word	0x0800f0ba
 800c8cc:	08008acd 	.word	0x08008acd
 800c8d0:	0800c621 	.word	0x0800c621
 800c8d4:	0800f0b6 	.word	0x0800f0b6

0800c8d8 <_read_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d07      	ldr	r5, [pc, #28]	; (800c8f8 <_read_r+0x20>)
 800c8dc:	4604      	mov	r4, r0
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	602a      	str	r2, [r5, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	f7f4 fce8 	bl	80012bc <_read>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d102      	bne.n	800c8f6 <_read_r+0x1e>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	b103      	cbz	r3, 800c8f6 <_read_r+0x1e>
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	20000ee8 	.word	0x20000ee8
 800c8fc:	00000000 	.word	0x00000000

0800c900 <nan>:
 800c900:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c908 <nan+0x8>
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	00000000 	.word	0x00000000
 800c90c:	7ff80000 	.word	0x7ff80000

0800c910 <_raise_r>:
 800c910:	291f      	cmp	r1, #31
 800c912:	b538      	push	{r3, r4, r5, lr}
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	d904      	bls.n	800c924 <_raise_r+0x14>
 800c91a:	2316      	movs	r3, #22
 800c91c:	6003      	str	r3, [r0, #0]
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c926:	b112      	cbz	r2, 800c92e <_raise_r+0x1e>
 800c928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c92c:	b94b      	cbnz	r3, 800c942 <_raise_r+0x32>
 800c92e:	4620      	mov	r0, r4
 800c930:	f000 f830 	bl	800c994 <_getpid_r>
 800c934:	462a      	mov	r2, r5
 800c936:	4601      	mov	r1, r0
 800c938:	4620      	mov	r0, r4
 800c93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c93e:	f000 b817 	b.w	800c970 <_kill_r>
 800c942:	2b01      	cmp	r3, #1
 800c944:	d00a      	beq.n	800c95c <_raise_r+0x4c>
 800c946:	1c59      	adds	r1, r3, #1
 800c948:	d103      	bne.n	800c952 <_raise_r+0x42>
 800c94a:	2316      	movs	r3, #22
 800c94c:	6003      	str	r3, [r0, #0]
 800c94e:	2001      	movs	r0, #1
 800c950:	e7e7      	b.n	800c922 <_raise_r+0x12>
 800c952:	2400      	movs	r4, #0
 800c954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c958:	4628      	mov	r0, r5
 800c95a:	4798      	blx	r3
 800c95c:	2000      	movs	r0, #0
 800c95e:	e7e0      	b.n	800c922 <_raise_r+0x12>

0800c960 <raise>:
 800c960:	4b02      	ldr	r3, [pc, #8]	; (800c96c <raise+0xc>)
 800c962:	4601      	mov	r1, r0
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	f7ff bfd3 	b.w	800c910 <_raise_r>
 800c96a:	bf00      	nop
 800c96c:	2000000c 	.word	0x2000000c

0800c970 <_kill_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4d07      	ldr	r5, [pc, #28]	; (800c990 <_kill_r+0x20>)
 800c974:	2300      	movs	r3, #0
 800c976:	4604      	mov	r4, r0
 800c978:	4608      	mov	r0, r1
 800c97a:	4611      	mov	r1, r2
 800c97c:	602b      	str	r3, [r5, #0]
 800c97e:	f7f4 fc83 	bl	8001288 <_kill>
 800c982:	1c43      	adds	r3, r0, #1
 800c984:	d102      	bne.n	800c98c <_kill_r+0x1c>
 800c986:	682b      	ldr	r3, [r5, #0]
 800c988:	b103      	cbz	r3, 800c98c <_kill_r+0x1c>
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	bf00      	nop
 800c990:	20000ee8 	.word	0x20000ee8

0800c994 <_getpid_r>:
 800c994:	f7f4 bc70 	b.w	8001278 <_getpid>

0800c998 <strncmp>:
 800c998:	b510      	push	{r4, lr}
 800c99a:	b17a      	cbz	r2, 800c9bc <strncmp+0x24>
 800c99c:	4603      	mov	r3, r0
 800c99e:	3901      	subs	r1, #1
 800c9a0:	1884      	adds	r4, r0, r2
 800c9a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9aa:	4290      	cmp	r0, r2
 800c9ac:	d101      	bne.n	800c9b2 <strncmp+0x1a>
 800c9ae:	42a3      	cmp	r3, r4
 800c9b0:	d101      	bne.n	800c9b6 <strncmp+0x1e>
 800c9b2:	1a80      	subs	r0, r0, r2
 800c9b4:	bd10      	pop	{r4, pc}
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d1f3      	bne.n	800c9a2 <strncmp+0xa>
 800c9ba:	e7fa      	b.n	800c9b2 <strncmp+0x1a>
 800c9bc:	4610      	mov	r0, r2
 800c9be:	e7f9      	b.n	800c9b4 <strncmp+0x1c>

0800c9c0 <__ascii_wctomb>:
 800c9c0:	b149      	cbz	r1, 800c9d6 <__ascii_wctomb+0x16>
 800c9c2:	2aff      	cmp	r2, #255	; 0xff
 800c9c4:	bf85      	ittet	hi
 800c9c6:	238a      	movhi	r3, #138	; 0x8a
 800c9c8:	6003      	strhi	r3, [r0, #0]
 800c9ca:	700a      	strbls	r2, [r1, #0]
 800c9cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c9d0:	bf98      	it	ls
 800c9d2:	2001      	movls	r0, #1
 800c9d4:	4770      	bx	lr
 800c9d6:	4608      	mov	r0, r1
 800c9d8:	4770      	bx	lr
	...

0800c9dc <_fstat_r>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4d07      	ldr	r5, [pc, #28]	; (800c9fc <_fstat_r+0x20>)
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	4611      	mov	r1, r2
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	f7f4 fcac 	bl	8001346 <_fstat>
 800c9ee:	1c43      	adds	r3, r0, #1
 800c9f0:	d102      	bne.n	800c9f8 <_fstat_r+0x1c>
 800c9f2:	682b      	ldr	r3, [r5, #0]
 800c9f4:	b103      	cbz	r3, 800c9f8 <_fstat_r+0x1c>
 800c9f6:	6023      	str	r3, [r4, #0]
 800c9f8:	bd38      	pop	{r3, r4, r5, pc}
 800c9fa:	bf00      	nop
 800c9fc:	20000ee8 	.word	0x20000ee8

0800ca00 <_isatty_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	4d06      	ldr	r5, [pc, #24]	; (800ca1c <_isatty_r+0x1c>)
 800ca04:	2300      	movs	r3, #0
 800ca06:	4604      	mov	r4, r0
 800ca08:	4608      	mov	r0, r1
 800ca0a:	602b      	str	r3, [r5, #0]
 800ca0c:	f7f4 fcab 	bl	8001366 <_isatty>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_isatty_r+0x1a>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_isatty_r+0x1a>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	20000ee8 	.word	0x20000ee8

0800ca20 <_malloc_usable_size_r>:
 800ca20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca24:	1f18      	subs	r0, r3, #4
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	bfbc      	itt	lt
 800ca2a:	580b      	ldrlt	r3, [r1, r0]
 800ca2c:	18c0      	addlt	r0, r0, r3
 800ca2e:	4770      	bx	lr

0800ca30 <_init>:
 800ca30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca32:	bf00      	nop
 800ca34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca36:	bc08      	pop	{r3}
 800ca38:	469e      	mov	lr, r3
 800ca3a:	4770      	bx	lr

0800ca3c <_fini>:
 800ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3e:	bf00      	nop
 800ca40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca42:	bc08      	pop	{r3}
 800ca44:	469e      	mov	lr, r3
 800ca46:	4770      	bx	lr


f407ve_chaos_sdk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003504  0800df68  0800df68  0001df68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801146c  0801146c  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  0801146c  0801146c  0002146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011474  08011474  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011474  08011474  00021474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011478  08011478  00021478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0801147c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030254  2**0
                  CONTENTS
 10 .bss          000018c8  20000254  20000254  00030254  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001b1c  20001b1c  00030254  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017682  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042c5  00000000  00000000  00047906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  0004bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  0004cce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298b1  00000000  00000000  0004dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc88  00000000  00000000  00077579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2ba5  00000000  00000000  00093201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00175da6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a74  00000000  00000000  00175df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000254 	.word	0x20000254
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df50 	.word	0x0800df50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000258 	.word	0x20000258
 80001cc:	0800df50 	.word	0x0800df50

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MX_GPIO_Init+0x9c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <MX_GPIO_Init+0x9c>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_GPIO_Init+0x9c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_GPIO_Init+0x9c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <MX_GPIO_Init+0x9c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_GPIO_Init+0x9c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_GPIO_Init+0x9c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <MX_GPIO_Init+0x9c>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_GPIO_Init+0x9c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <MX_GPIO_Init+0xa0>)
 800108a:	f005 fd33 	bl	8006af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NP_dir_Pin;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NP_dir_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_GPIO_Init+0xa0>)
 80010a8:	f005 fb88 	bl	80067bc <HAL_GPIO_Init>

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c0:	f005 f966 	bl	8006390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c4:	f000 f818 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c8:	f7ff ffa6 	bl	8001018 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010cc:	f000 fa90 	bl	80015f0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010d0:	f000 f9ba 	bl	8001448 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010d4:	2108      	movs	r1, #8
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <main+0x34>)
 80010d8:	f006 fa8c 	bl	80075f4 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <main+0x38>)
 80010e4:	f005 fd06 	bl	8006af4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80010e8:	f000 fb26 	bl	8001738 <app_main>
  while (1)
 80010ec:	e7fe      	b.n	80010ec <main+0x30>
 80010ee:	bf00      	nop
 80010f0:	20000274 	.word	0x20000274
 80010f4:	40020400 	.word	0x40020400

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	; 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f008 fbe0 	bl	80098cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <SystemClock_Config+0xd0>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <SystemClock_Config+0xd0>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <SystemClock_Config+0xd0>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <SystemClock_Config+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a22      	ldr	r2, [pc, #136]	; (80011cc <SystemClock_Config+0xd4>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <SystemClock_Config+0xd4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001168:	2308      	movs	r3, #8
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800116c:	23a8      	movs	r3, #168	; 0xa8
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f005 fcd3 	bl	8006b28 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001188:	f000 f822 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001198:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2105      	movs	r1, #5
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 ff34 	bl	8007018 <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011b6:	f000 f80b 	bl	80011d0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80011ba:	f006 f813 	bl	80071e4 <HAL_RCC_EnableCSS>
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	; 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <HAL_MspInit+0x4c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_MspInit+0x4c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001230:	f006 f91c 	bl	800746c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x8>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f005 f8da 	bl	8006434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <USART1_IRQHandler+0x10>)
 800128a:	f007 f8a1 	bl	80083d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002bc 	.word	0x200002bc

08001298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_kill>:

int _kill(int pid, int sig)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012b2:	f008 f81b 	bl	80092ec <__errno>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2216      	movs	r2, #22
 80012ba:	601a      	str	r2, [r3, #0]
	return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_exit>:

void _exit (int status)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ffe7 	bl	80012a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012da:	e7fe      	b.n	80012da <_exit+0x12>

080012dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e00a      	b.n	8001304 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ee:	f3af 8000 	nop.w
 80012f2:	4601      	mov	r1, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	b2ca      	uxtb	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf0      	blt.n	80012ee <_read+0x12>
	}

return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e009      	b.n	800133c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f005 f81b 	bl	800636c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf1      	blt.n	8001328 <_write+0x12>
	}
	return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001376:	605a      	str	r2, [r3, #4]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f007 ff80 	bl	80092ec <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20020000 	.word	0x20020000
 8001418:	00000400 	.word	0x00000400
 800141c:	20000270 	.word	0x20000270
 8001420:	20001b20 	.word	0x20001b20

08001424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <MX_TIM4_Init+0xe8>)
 800147a:	4a2e      	ldr	r2, [pc, #184]	; (8001534 <MX_TIM4_Init+0xec>)
 800147c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <MX_TIM4_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <MX_TIM4_Init+0xe8>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <MX_TIM4_Init+0xe8>)
 800148c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001490:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <MX_TIM4_Init+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_TIM4_Init+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800149e:	4824      	ldr	r0, [pc, #144]	; (8001530 <MX_TIM4_Init+0xe8>)
 80014a0:	f005 ffff 	bl	80074a2 <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014aa:	f7ff fe91 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b8:	4619      	mov	r1, r3
 80014ba:	481d      	ldr	r0, [pc, #116]	; (8001530 <MX_TIM4_Init+0xe8>)
 80014bc:	f006 fa24 	bl	8007908 <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014c6:	f7ff fe83 	bl	80011d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014ca:	4819      	ldr	r0, [pc, #100]	; (8001530 <MX_TIM4_Init+0xe8>)
 80014cc:	f006 f838 	bl	8007540 <HAL_TIM_PWM_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014d6:	f7ff fe7b 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	4619      	mov	r1, r3
 80014e8:	4811      	ldr	r0, [pc, #68]	; (8001530 <MX_TIM4_Init+0xe8>)
 80014ea:	f006 fde5 	bl	80080b8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014f4:	f7ff fe6c 	bl	80011d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f8:	2360      	movs	r3, #96	; 0x60
 80014fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80014fc:	f241 0368 	movw	r3, #4200	; 0x1068
 8001500:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2208      	movs	r2, #8
 800150e:	4619      	mov	r1, r3
 8001510:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_TIM4_Init+0xe8>)
 8001512:	f006 f937 	bl	8007784 <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800151c:	f7ff fe58 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <MX_TIM4_Init+0xe8>)
 8001522:	f000 f82b 	bl	800157c <HAL_TIM_MspPostInit>

}
 8001526:	bf00      	nop
 8001528:	3738      	adds	r7, #56	; 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000274 	.word	0x20000274
 8001534:	40000800 	.word	0x40000800

08001538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <HAL_TIM_Base_MspInit+0x3c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10d      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40000800 	.word	0x40000800
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <HAL_TIM_MspPostInit+0x68>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d11e      	bne.n	80015dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_TIM_MspPostInit+0x6c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PP_step_Pin;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PP_step_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_TIM_MspPostInit+0x70>)
 80015d8:	f005 f8f0 	bl	80067bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40000800 	.word	0x40000800
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020400 	.word	0x40020400

080015f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_USART1_UART_Init+0x4c>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <MX_USART1_UART_Init+0x50>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_USART1_UART_Init+0x4c>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_USART1_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001628:	f006 fdc2 	bl	80081b0 <HAL_UART_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001632:	f7ff fdcd 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002bc 	.word	0x200002bc
 8001640:	40011000 	.word	0x40011000

08001644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_UART_MspInit+0x94>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d134      	bne.n	80016d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_UART_MspInit+0x98>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <HAL_UART_MspInit+0x98>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_UART_MspInit+0x98>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x98>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a14      	ldr	r2, [pc, #80]	; (80016dc <HAL_UART_MspInit+0x98>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_UART_MspInit+0x98>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800169e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b0:	2307      	movs	r3, #7
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4809      	ldr	r0, [pc, #36]	; (80016e0 <HAL_UART_MspInit+0x9c>)
 80016bc:	f005 f87e 	bl	80067bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2025      	movs	r0, #37	; 0x25
 80016c6:	f004 ffb0 	bl	800662a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ca:	2025      	movs	r0, #37	; 0x25
 80016cc:	f004 ffc9 	bl	8006662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	; (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800170e:	f7ff fe89 	bl	8001424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f008 f87b 	bl	800980c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff fcd1 	bl	80010bc <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8001728:	0801147c 	.word	0x0801147c
  ldr r2, =_sbss
 800172c:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8001730:	20001b1c 	.word	0x20001b1c

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>
	...

08001738 <app_main>:
#include "board_pkg.h"
#include "sha-256_test.h"


void app_main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af02      	add	r7, sp, #8
	int state = newEntities(5);
 800173e:	2005      	movs	r0, #5
 8001740:	f000 ff18 	bl	8002574 <newEntities>
 8001744:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "app_main: error entity allocation");
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10e      	bne.n	800176a <app_main+0x32>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf0c      	ite	eq
 8001752:	2301      	moveq	r3, #1
 8001754:	2300      	movne	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <app_main+0x54>)
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2310      	movs	r3, #16
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <app_main+0x58>)
 8001762:	480c      	ldr	r0, [pc, #48]	; (8001794 <app_main+0x5c>)
 8001764:	f004 fce0 	bl	8006128 <__M_Error>
 8001768:	e00c      	b.n	8001784 <app_main+0x4c>
	entityBoardInit();
 800176a:	f000 f815 	bl	8001798 <entityBoardInit>


	init_stm32_communicator();
 800176e:	f004 fd3d 	bl	80061ec <init_stm32_communicator>
//
//	if(a == 0) {
//		int b =0;
//	}

	checkEntities();
 8001772:	f000 fc11 	bl	8001f98 <checkEntities>

	/* Read MCU Id, 32-bit access */
	//u32 MCU_Id = DBGMCU->IDCODE;
	sha256_test();
 8001776:	f003 ff4b 	bl	8005610 <sha256_test>

	while(1) {
		proceedIncommingMessage();
 800177a:	f004 fd69 	bl	8006250 <proceedIncommingMessage>
		entityBoardProceed();
 800177e:	f000 f9e3 	bl	8001b48 <entityBoardProceed>
		proceedIncommingMessage();
 8001782:	e7fa      	b.n	800177a <app_main+0x42>
	}
}
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	0800df9c 	.word	0x0800df9c
 8001790:	0800df68 	.word	0x0800df68
 8001794:	0800df84 	.word	0x0800df84

08001798 <entityBoardInit>:
boards_t* board_entry = NULL;

extern TIM_HandleTypeDef htim4;

void entityBoardInit(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b090      	sub	sp, #64	; 0x40
 800179c:	af06      	add	r7, sp, #24
	reg board_entityNum = ENTITY_NUMBER_ERROR;
 800179e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a2:	607b      	str	r3, [r7, #4]
	reg fieldNumber = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]

	int state = initEntity(&board_entityNum, (17 + 10 + 2), sizeof(boards_t), "BID ", 0, 0, NULL);
 80017a8:	1d38      	adds	r0, r7, #4
 80017aa:	2300      	movs	r3, #0
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <entityBoardInit+0xd8>)
 80017b8:	2270      	movs	r2, #112	; 0x70
 80017ba:	211d      	movs	r1, #29
 80017bc:	f000 ff2c 	bl	8002618 <initEntity>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "entityBoardInit: initEntity Error");
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10e      	bne.n	80017e6 <entityBoardInit+0x4e>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf0c      	ite	eq
 80017ce:	2301      	moveq	r3, #1
 80017d0:	2300      	movne	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	4619      	mov	r1, r3
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <entityBoardInit+0xdc>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2310      	movs	r3, #16
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <entityBoardInit+0xe0>)
 80017de:	4827      	ldr	r0, [pc, #156]	; (800187c <entityBoardInit+0xe4>)
 80017e0:	f004 fca2 	bl	8006128 <__M_Error>
 80017e4:	e181      	b.n	8001aea <entityBoardInit+0x352>

	Entity* const entity = getEntityPointer(board_entityNum);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	61bb      	str	r3, [r7, #24]
 */

// getter entity pointer by entity number
STATIC_FORCEINLINE Entity * getEntityPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <entityBoardInit+0xe8>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d206      	bcs.n	8001802 <entityBoardInit+0x6a>
        return entityInfo.entities[entityNumber];
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <entityBoardInit+0xe8>)
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	e000      	b.n	8001804 <entityBoardInit+0x6c>
    }
    return NULLPTR(Entity*);
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
	M_Assert_BreakSaveCheck((entity == NULL), M_EMPTY, return, "entityBoardInit: entity is null");
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10e      	bne.n	800182a <entityBoardInit+0x92>
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <entityBoardInit+0xec>)
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2313      	movs	r3, #19
 8001820:	4a15      	ldr	r2, [pc, #84]	; (8001878 <entityBoardInit+0xe0>)
 8001822:	4819      	ldr	r0, [pc, #100]	; (8001888 <entityBoardInit+0xf0>)
 8001824:	f004 fc80 	bl	8006128 <__M_Error>
 8001828:	e15f      	b.n	8001aea <entityBoardInit+0x352>

	boards_t* entry = getVoidPointer(board_entityNum);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	617b      	str	r3, [r7, #20]
}

// getter data pointer by entity number
STATIC_FORCEINLINE void * getVoidPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <entityBoardInit+0xe8>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <entityBoardInit+0xb0>
        return entityInfo.entities[entityNumber]->pointer;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <entityBoardInit+0xe8>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	e000      	b.n	800184a <entityBoardInit+0xb2>
    }
    return NULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
	M_Assert_BreakSaveCheck((entry == NULL), M_EMPTY, return, "entityBoardInit: entry is null");
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d120      	bne.n	8001894 <entityBoardInit+0xfc>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <entityBoardInit+0xf4>)
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2316      	movs	r3, #22
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <entityBoardInit+0xe0>)
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <entityBoardInit+0xf8>)
 800186a:	f004 fc5d 	bl	8006128 <__M_Error>
 800186e:	e13c      	b.n	8001aea <entityBoardInit+0x352>
 8001870:	0800dfc0 	.word	0x0800dfc0
 8001874:	0800e000 	.word	0x0800e000
 8001878:	0800dfc8 	.word	0x0800dfc8
 800187c:	0800dfe8 	.word	0x0800dfe8
 8001880:	20000304 	.word	0x20000304
 8001884:	0800e038 	.word	0x0800e038
 8001888:	0800e024 	.word	0x0800e024
 800188c:	0800e068 	.word	0x0800e068
 8001890:	0800e058 	.word	0x0800e058

	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, boardId), 	UINT8_TYPE, 	"B   ", &entry->boardId);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	4639      	mov	r1, r7
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	4b95      	ldr	r3, [pc, #596]	; (8001af0 <entityBoardInit+0x358>)
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2301      	movs	r3, #1
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2300      	movs	r3, #0
 80018a4:	2201      	movs	r2, #1
 80018a6:	6a38      	ldr	r0, [r7, #32]
 80018a8:	f000 ffc8 	bl	800283c <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, major), 		UINT8_TYPE, 	"VerH", &entry->major);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4639      	mov	r1, r7
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	4b8f      	ldr	r3, [pc, #572]	; (8001af4 <entityBoardInit+0x35c>)
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	2301      	movs	r3, #1
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2301      	movs	r3, #1
 80018be:	2201      	movs	r2, #1
 80018c0:	6a38      	ldr	r0, [r7, #32]
 80018c2:	f000 ffbb 	bl	800283c <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, minor), 		UINT8_TYPE, 	"VerM", &entry->minor);
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3302      	adds	r3, #2
 80018ca:	4639      	mov	r1, r7
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <entityBoardInit+0x360>)
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2302      	movs	r3, #2
 80018d8:	2201      	movs	r2, #1
 80018da:	6a38      	ldr	r0, [r7, #32]
 80018dc:	f000 ffae 	bl	800283c <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, patch), 		UINT16_TYPE, 	"VerL", &entry->patch);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3304      	adds	r3, #4
 80018e4:	4639      	mov	r1, r7
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	4b84      	ldr	r3, [pc, #528]	; (8001afc <entityBoardInit+0x364>)
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2302      	movs	r3, #2
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2304      	movs	r3, #4
 80018f2:	2201      	movs	r2, #1
 80018f4:	6a38      	ldr	r0, [r7, #32]
 80018f6:	f000 ffa1 	bl	800283c <initField>

    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _1), UINT8_TYPE,                "F1", &entry->_1);
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3306      	adds	r3, #6
 80018fe:	4639      	mov	r1, r7
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	4b7f      	ldr	r3, [pc, #508]	; (8001b00 <entityBoardInit+0x368>)
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2301      	movs	r3, #1
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2306      	movs	r3, #6
 800190c:	2200      	movs	r2, #0
 800190e:	6a38      	ldr	r0, [r7, #32]
 8001910:	f000 ff94 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _2), UINT8_TYPE,                "F2", &entry->_2);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	3307      	adds	r3, #7
 8001918:	4639      	mov	r1, r7
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <entityBoardInit+0x36c>)
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	2301      	movs	r3, #1
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2307      	movs	r3, #7
 8001926:	2200      	movs	r2, #0
 8001928:	6a38      	ldr	r0, [r7, #32]
 800192a:	f000 ff87 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _3), UINT16_TYPE,               "F3", &entry->_3);
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3308      	adds	r3, #8
 8001932:	4639      	mov	r1, r7
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	4b74      	ldr	r3, [pc, #464]	; (8001b08 <entityBoardInit+0x370>)
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	2302      	movs	r3, #2
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2308      	movs	r3, #8
 8001940:	2200      	movs	r2, #0
 8001942:	6a38      	ldr	r0, [r7, #32]
 8001944:	f000 ff7a 	bl	800283c <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _4), UINT24_TYPE,               "F4", &entry->_4);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _5), UINT32_TYPE,               "F5", &entry->_5);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	3310      	adds	r3, #16
 800194c:	4639      	mov	r1, r7
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	4b6e      	ldr	r3, [pc, #440]	; (8001b0c <entityBoardInit+0x374>)
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2303      	movs	r3, #3
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2310      	movs	r3, #16
 800195a:	2200      	movs	r2, #0
 800195c:	6a38      	ldr	r0, [r7, #32]
 800195e:	f000 ff6d 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _6), UINT64_TYPE,               "F6", &entry->_6);
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3318      	adds	r3, #24
 8001966:	4639      	mov	r1, r7
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	4b69      	ldr	r3, [pc, #420]	; (8001b10 <entityBoardInit+0x378>)
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2304      	movs	r3, #4
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2318      	movs	r3, #24
 8001974:	2200      	movs	r2, #0
 8001976:	6a38      	ldr	r0, [r7, #32]
 8001978:	f000 ff60 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _7), CHAR_TYPE,                 "F7", &entry->_7);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	3320      	adds	r3, #32
 8001980:	4639      	mov	r1, r7
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <entityBoardInit+0x37c>)
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2305      	movs	r3, #5
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2320      	movs	r3, #32
 800198e:	2200      	movs	r2, #0
 8001990:	6a38      	ldr	r0, [r7, #32]
 8001992:	f000 ff53 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _8), INT8_TYPE,                 "F8", &entry->_8);
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3321      	adds	r3, #33	; 0x21
 800199a:	4639      	mov	r1, r7
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <entityBoardInit+0x380>)
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2306      	movs	r3, #6
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2321      	movs	r3, #33	; 0x21
 80019a8:	2200      	movs	r2, #0
 80019aa:	6a38      	ldr	r0, [r7, #32]
 80019ac:	f000 ff46 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _9), INT16_TYPE,                "F9", &entry->_9);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	3322      	adds	r3, #34	; 0x22
 80019b4:	4639      	mov	r1, r7
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <entityBoardInit+0x384>)
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2307      	movs	r3, #7
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2322      	movs	r3, #34	; 0x22
 80019c2:	2200      	movs	r2, #0
 80019c4:	6a38      	ldr	r0, [r7, #32]
 80019c6:	f000 ff39 	bl	800283c <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _10), INT24_TYPE,               "F10", &entry->_10);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _11), INT32_TYPE,               "F11", &entry->_11);
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3328      	adds	r3, #40	; 0x28
 80019ce:	4639      	mov	r1, r7
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <entityBoardInit+0x388>)
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	2308      	movs	r3, #8
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2328      	movs	r3, #40	; 0x28
 80019dc:	2200      	movs	r2, #0
 80019de:	6a38      	ldr	r0, [r7, #32]
 80019e0:	f000 ff2c 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _12), INT64_TYPE,               "F12", &entry->_12);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	3330      	adds	r3, #48	; 0x30
 80019e8:	4639      	mov	r1, r7
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <entityBoardInit+0x38c>)
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2309      	movs	r3, #9
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2330      	movs	r3, #48	; 0x30
 80019f6:	2200      	movs	r2, #0
 80019f8:	6a38      	ldr	r0, [r7, #32]
 80019fa:	f000 ff1f 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _13), FLOAT_TYPE,               "F13", &entry->_13);
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3338      	adds	r3, #56	; 0x38
 8001a02:	4639      	mov	r1, r7
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <entityBoardInit+0x390>)
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2338      	movs	r3, #56	; 0x38
 8001a10:	2200      	movs	r2, #0
 8001a12:	6a38      	ldr	r0, [r7, #32]
 8001a14:	f000 ff12 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _14), DOUBLE_TYPE,              "F14", &entry->_14);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	3340      	adds	r3, #64	; 0x40
 8001a1c:	4639      	mov	r1, r7
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <entityBoardInit+0x394>)
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	230b      	movs	r3, #11
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2340      	movs	r3, #64	; 0x40
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	6a38      	ldr	r0, [r7, #32]
 8001a2e:	f000 ff05 	bl	800283c <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _15), LONG_DOUBLE_TYPE,         "F15", &entry->_15);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _16), BOOL_TYPE,                "F16", &entry->_16);
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3350      	adds	r3, #80	; 0x50
 8001a36:	4639      	mov	r1, r7
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <entityBoardInit+0x398>)
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	230d      	movs	r3, #13
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2350      	movs	r3, #80	; 0x50
 8001a44:	2200      	movs	r2, #0
 8001a46:	6a38      	ldr	r0, [r7, #32]
 8001a48:	f000 fef8 	bl	800283c <initField>
    initField(entity, &fieldNumber, (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK /*| ENTITY_ATOMIC_MSK*/), offsetof(boards_t, _17), /*REG_TYPE*/UINT32_TYPE,                 "F17", &entry->_17);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	3354      	adds	r3, #84	; 0x54
 8001a50:	4639      	mov	r1, r7
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <entityBoardInit+0x39c>)
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2303      	movs	r3, #3
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2354      	movs	r3, #84	; 0x54
 8001a5e:	2218      	movs	r2, #24
 8001a60:	6a38      	ldr	r0, [r7, #32]
 8001a62:	f000 feeb 	bl	800283c <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _18), SREG_TYPE,                "F18", &entry->_18);

    initFieldArray(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, data), UINT8_TYPE, sizeof(entry->data), NULL, entry->data, 1);
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	335c      	adds	r3, #92	; 0x5c
 8001a6a:	4639      	mov	r1, r7
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	9204      	str	r2, [sp, #16]
 8001a70:	9303      	str	r3, [sp, #12]
 8001a72:	2300      	movs	r3, #0
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	230a      	movs	r3, #10
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	235c      	movs	r3, #92	; 0x5c
 8001a80:	2200      	movs	r2, #0
 8001a82:	6a38      	ldr	r0, [r7, #32]
 8001a84:	f000 ffb0 	bl	80029e8 <initFieldArray>
    initFieldPointer(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, ptr), UINT8_TYPE,                "REG", &entry->ptr);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3368      	adds	r3, #104	; 0x68
 8001a8c:	6a3a      	ldr	r2, [r7, #32]
 8001a8e:	613a      	str	r2, [r7, #16]
 8001a90:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <entityBoardInit+0x3a0>)
 8001a92:	60fa      	str	r2, [r7, #12]
 8001a94:	60bb      	str	r3, [r7, #8]

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr);
STATIC_FORCEINLINE int initFieldPointer(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], reg* const field_ptr)
{
	return initField(entityInst, fieldNumber, bitFlags | ENTITY_POINTER_MSK, shift, type, descr, field_ptr);
 8001a96:	2208      	movs	r2, #8
 8001a98:	4639      	mov	r1, r7
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2368      	movs	r3, #104	; 0x68
 8001aa8:	6938      	ldr	r0, [r7, #16]
 8001aaa:	f000 fec7 	bl	800283c <initField>

    entry->_17 = /*(reg)&entry->data[0]*/(reg)&htim4.Instance->ARR;
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <entityBoardInit+0x3a4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	332c      	adds	r3, #44	; 0x2c
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
    entry->ptr = (reg)&entry->data[1];
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	335d      	adds	r3, #93	; 0x5d
 8001abe:	461a      	mov	r2, r3
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	669a      	str	r2, [r3, #104]	; 0x68

	entry->boardId 	= INIT_BOARD_ID;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
	entry->major 	= BOARD_MAJOR;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	2201      	movs	r2, #1
 8001ace:	705a      	strb	r2, [r3, #1]
	entry->minor 	= BOARD_MINOR;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	709a      	strb	r2, [r3, #2]
	entry->patch	= BOARD_PATCHLEVEL;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	809a      	strh	r2, [r3, #4]
	board_entry 	= entry;
 8001adc:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <entityBoardInit+0x3a8>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	6013      	str	r3, [r2, #0]

	board_entry->_13 = 3.444;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <entityBoardInit+0x3a8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <entityBoardInit+0x3ac>)
 8001ae8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	0800e088 	.word	0x0800e088
 8001af4:	0800e090 	.word	0x0800e090
 8001af8:	0800e098 	.word	0x0800e098
 8001afc:	0800e0a0 	.word	0x0800e0a0
 8001b00:	0800e0a8 	.word	0x0800e0a8
 8001b04:	0800e0ac 	.word	0x0800e0ac
 8001b08:	0800e0b0 	.word	0x0800e0b0
 8001b0c:	0800e0b4 	.word	0x0800e0b4
 8001b10:	0800e0b8 	.word	0x0800e0b8
 8001b14:	0800e0bc 	.word	0x0800e0bc
 8001b18:	0800e0c0 	.word	0x0800e0c0
 8001b1c:	0800e0c4 	.word	0x0800e0c4
 8001b20:	0800e0c8 	.word	0x0800e0c8
 8001b24:	0800e0cc 	.word	0x0800e0cc
 8001b28:	0800e0d0 	.word	0x0800e0d0
 8001b2c:	0800e0d4 	.word	0x0800e0d4
 8001b30:	0800e0d8 	.word	0x0800e0d8
 8001b34:	0800e0dc 	.word	0x0800e0dc
 8001b38:	0800e0e0 	.word	0x0800e0e0
 8001b3c:	20000274 	.word	0x20000274
 8001b40:	20000300 	.word	0x20000300
 8001b44:	405c6a7f 	.word	0x405c6a7f

08001b48 <entityBoardProceed>:

void entityBoardProceed(void)
{
 8001b48:	b598      	push	{r3, r4, r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
//	if((HAL_GetTick() - lastTime) > 1000) {
//		board_entry->
//	}
//
//	lastTime = HAL_GetTick();
	board_entry->_5 = HAL_GetTick();
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <entityBoardProceed+0x14>)
 8001b4e:	681c      	ldr	r4, [r3, #0]
 8001b50:	f004 fc84 	bl	800645c <HAL_GetTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	6123      	str	r3, [r4, #16]
	//board_entry->_13 = 3.444;
}
 8001b58:	bf00      	nop
 8001b5a:	bd98      	pop	{r3, r4, r7, pc}
 8001b5c:	20000300 	.word	0x20000300

08001b60 <HAL_UART_RxCpltCallback>:



// uart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_UART_RxCpltCallback+0x54>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d11c      	bne.n	8001bac <HAL_UART_RxCpltCallback+0x4c>

		RawParser_dma_receiveByte(&comm.rawparser, comm.receiveByte);
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_UART_RxCpltCallback+0x58>)
 8001b74:	f893 3a34 	ldrb.w	r3, [r3, #2612]	; 0xa34
 8001b78:	75fb      	strb	r3, [r7, #23]

// receive functions-----------------------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_receiveByte(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == NULL), M_EMPTY, return, "RawParser_dma_receiveByte: No valid input");
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_UART_RxCpltCallback+0x5c>)
 8001b7c:	613b      	str	r3, [r7, #16]
    reg m_receivePos            = self->m_receivePos;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_UART_RxCpltCallback+0x58>)
 8001b80:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001b84:	60fb      	str	r3, [r7, #12]

    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	7dfa      	ldrb	r2, [r7, #23]
 8001b92:	701a      	strb	r2, [r3, #0]
    ++m_receivePos;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]

    self->m_receivePos = m_receivePos;
 8001b9a:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_UART_RxCpltCallback+0x58>)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
		HAL_UART_Receive_IT(huart, (uint8_t*) &comm.receiveByte, 1);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4906      	ldr	r1, [pc, #24]	; (8001bc0 <HAL_UART_RxCpltCallback+0x60>)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f006 fbe1 	bl	800836e <HAL_UART_Receive_IT>
	}
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	20000ed0 	.word	0x20000ed0
 8001bbc:	20000ed8 	.word	0x20000ed8
 8001bc0:	20001904 	.word	0x20001904

08001bc4 <CallbackManager_init>:
    CallbackManager_init(m_manager);
    return m_manager;
}

void CallbackManager_init(CallbackManager_t * const self)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_init: no valid input data", ENA, LIB);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d112      	bne.n	8001bf8 <CallbackManager_init+0x34>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <CallbackManager_init+0x60>)
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2301      	movs	r3, #1
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <CallbackManager_init+0x64>)
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2314      	movs	r3, #20
 8001bee:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <CallbackManager_init+0x68>)
 8001bf0:	480f      	ldr	r0, [pc, #60]	; (8001c30 <CallbackManager_init+0x6c>)
 8001bf2:	f004 fa99 	bl	8006128 <__M_Error>
 8001bf6:	e011      	b.n	8001c1c <CallbackManager_init+0x58>
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e007      	b.n	8001c0e <CallbackManager_init+0x4a>
        self->workers[i] = (CallbackWorker)NULL;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	2100      	movs	r1, #0
 8001c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2bff      	cmp	r3, #255	; 0xff
 8001c12:	d9f4      	bls.n	8001bfe <CallbackManager_init+0x3a>
        self->ctx[i] = NULL;
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
    }

#ifndef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx = NULL;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	0800e144 	.word	0x0800e144
 8001c28:	0800e1b0 	.word	0x0800e1b0
 8001c2c:	0800e0e4 	.word	0x0800e0e4
 8001c30:	0800e18c 	.word	0x0800e18c

08001c34 <CallbackManager_addWorker>:

    return 0;
}

void CallbackManager_addWorker(CallbackManager_t * const self, const CallBManIdType id, const CallbackWorker worker, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af04      	add	r7, sp, #16
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	460b      	mov	r3, r1
 8001c42:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d112      	bne.n	8001c70 <CallbackManager_addWorker+0x3c>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <CallbackManager_addWorker+0x54>)
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <CallbackManager_addWorker+0x58>)
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	232d      	movs	r3, #45	; 0x2d
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <CallbackManager_addWorker+0x5c>)
 8001c68:	480a      	ldr	r0, [pc, #40]	; (8001c94 <CallbackManager_addWorker+0x60>)
 8001c6a:	f004 fa5d 	bl	8006128 <__M_Error>
 8001c6e:	e008      	b.n	8001c82 <CallbackManager_addWorker+0x4e>

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    self->workers[id] = worker;
 8001c70:	7afa      	ldrb	r2, [r7, #11]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx[id] = PREPROCESSOR_CTX_TYPE_CAST(ctx);
#else
    self->ctx = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	0800e144 	.word	0x0800e144
 8001c8c:	0800e234 	.word	0x0800e234
 8001c90:	0800e0e4 	.word	0x0800e0e4
 8001c94:	0800e18c 	.word	0x0800e18c

08001c98 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
int CallbackManager_proceed(const CallbackManager_t* const self, const CallBManIdType id,
                            u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b08b      	sub	sp, #44	; 0x2c
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input data", ENA, LIB);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d113      	bne.n	8001cd6 <CallbackManager_proceed+0x3e>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <CallbackManager_proceed+0x84>)
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <CallbackManager_proceed+0x88>)
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2341      	movs	r3, #65	; 0x41
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <CallbackManager_proceed+0x8c>)
 8001ccc:	4816      	ldr	r0, [pc, #88]	; (8001d28 <CallbackManager_proceed+0x90>)
 8001cce:	f004 fa2b 	bl	8006128 <__M_Error>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e01e      	b.n	8001d14 <CallbackManager_proceed+0x7c>
#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    // move to cash
    const CallbackWorker worker = self->workers[id];
 8001cd6:	7afa      	ldrb	r2, [r7, #11]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cde:	617b      	str	r3, [r7, #20]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx[id];
#else
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001ce6:	613b      	str	r3, [r7, #16]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    // do logic
    M_Assert_SafeFunctionCall((worker != (CallbackWorker)NULL), {
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <CallbackManager_proceed+0x6a>
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	697c      	ldr	r4, [r7, #20]
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	47a0      	blx	r4
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e008      	b.n	8001d14 <CallbackManager_proceed+0x7c>
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <CallbackManager_proceed+0x94>)
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2351      	movs	r3, #81	; 0x51
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <CallbackManager_proceed+0x8c>)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4808      	ldr	r0, [pc, #32]	; (8001d30 <CallbackManager_proceed+0x98>)
 8001d0e:	f004 fa29 	bl	8006164 <__M_Warning>
                                  worker(inputData, outputData, size, maxOutBufferSize, ctx);
                                  return 1;
                              });
    return 0;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	0800e144 	.word	0x0800e144
 8001d20:	0800e268 	.word	0x0800e268
 8001d24:	0800e0e4 	.word	0x0800e0e4
 8001d28:	0800e18c 	.word	0x0800e18c
 8001d2c:	0800e2bc 	.word	0x0800e2bc
 8001d30:	0800e298 	.word	0x0800e298

08001d34 <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	71fb      	strb	r3, [r7, #7]
 8001d40:	4613      	mov	r3, r2
 8001d42:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 8001d44:	79fa      	ldrb	r2, [r7, #7]
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	4053      	eors	r3, r2
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <fast_crc8_maxim_byte+0x2c>)
 8001d50:	5c9b      	ldrb	r3, [r3, r2]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	08010d38 	.word	0x08010d38

08001d64 <check_predicate>:
#ifdef C_ENTITY_FRAMEWORK_LIB_ENA
#include "entity_manager.h"
#include "smart_assert.h"

int check_predicate(reg entityNumber, Entity* entity, reg fieldNumber, EntityField* field, void* val, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b092      	sub	sp, #72	; 0x48
 8001d68:	af08      	add	r7, sp, #32
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
	M_Assert_WarningSaveCheck(
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <check_predicate+0x20>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <check_predicate+0x20>
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d114      	bne.n	8001dae <check_predicate+0x4a>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <check_predicate+0x32>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <check_predicate+0x32>
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <check_predicate+0x36>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <check_predicate+0x38>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	b2d9      	uxtb	r1, r3
 8001d9e:	4b70      	ldr	r3, [pc, #448]	; (8001f60 <check_predicate+0x1fc>)
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2311      	movs	r3, #17
 8001da4:	4a6f      	ldr	r2, [pc, #444]	; (8001f64 <check_predicate+0x200>)
 8001da6:	4870      	ldr	r0, [pc, #448]	; (8001f68 <check_predicate+0x204>)
 8001da8:	f004 f9dc 	bl	8006164 <__M_Warning>
 8001dac:	e0b4      	b.n	8001f18 <check_predicate+0x1b4>
			(field == NULL) ||
			(val == NULL), M_EMPTY, {
					goto error;
	}, "check_predicate: no valid data");

	M_Assert_WarningSaveCheck((field->type == VOID_TYPE || field->type > (TYPE_ARRAY_LENGTH - 1)), M_EMPTY, {
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	7e1b      	ldrb	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <check_predicate+0x5a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	7e1b      	ldrb	r3, [r3, #24]
 8001dba:	2b11      	cmp	r3, #17
 8001dbc:	d913      	bls.n	8001de6 <check_predicate+0x82>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	7e1b      	ldrb	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <check_predicate+0x6a>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	7e1b      	ldrb	r3, [r3, #24]
 8001dca:	2b11      	cmp	r3, #17
 8001dcc:	d901      	bls.n	8001dd2 <check_predicate+0x6e>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <check_predicate+0x70>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	b2d9      	uxtb	r1, r3
 8001dd6:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <check_predicate+0x208>)
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2318      	movs	r3, #24
 8001ddc:	4a61      	ldr	r2, [pc, #388]	; (8001f64 <check_predicate+0x200>)
 8001dde:	4864      	ldr	r0, [pc, #400]	; (8001f70 <check_predicate+0x20c>)
 8001de0:	f004 f9c0 	bl	8006164 <__M_Warning>
 8001de4:	e098      	b.n	8001f18 <check_predicate+0x1b4>
			goto error;
	}, "check_predicate: undefined type!!!");

#ifdef USE_ENTITY_REGISTER
	M_Assert_WarningSaveCheck((field->bitFlags & ENTITY_REGISTER_MSK) && (field->type != REG_TYPE || field->type != SREG_TYPE), M_EMPTY, {
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d021      	beq.n	8001e36 <check_predicate+0xd2>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	7e1b      	ldrb	r3, [r3, #24]
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d103      	bne.n	8001e02 <check_predicate+0x9e>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	7e1b      	ldrb	r3, [r3, #24]
 8001dfe:	2b11      	cmp	r3, #17
 8001e00:	d019      	beq.n	8001e36 <check_predicate+0xd2>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <check_predicate+0xbe>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	7e1b      	ldrb	r3, [r3, #24]
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d103      	bne.n	8001e1e <check_predicate+0xba>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	7e1b      	ldrb	r3, [r3, #24]
 8001e1a:	2b11      	cmp	r3, #17
 8001e1c:	d001      	beq.n	8001e22 <check_predicate+0xbe>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <check_predicate+0xc0>
 8001e22:	2300      	movs	r3, #0
 8001e24:	b2d9      	uxtb	r1, r3
 8001e26:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <check_predicate+0x210>)
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	231d      	movs	r3, #29
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <check_predicate+0x200>)
 8001e2e:	4852      	ldr	r0, [pc, #328]	; (8001f78 <check_predicate+0x214>)
 8001e30:	f004 f998 	bl	8006164 <__M_Warning>
 8001e34:	e070      	b.n	8001f18 <check_predicate+0x1b4>
	}, "check_predicate: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
#endif /* USE_ENTITY_REGISTER */


#ifdef USE_ENTITY_POINTER
	const reg pointerLen = (field->bitFlags & ENTITY_POINTER_MSK) ? sizeof(reg) : getMYCTypeLen(field->type);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <check_predicate+0xf8>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7e1b      	ldrb	r3, [r3, #24]
 8001e46:	617b      	str	r3, [r7, #20]
}


STATIC_FORCEINLINE const reg getMYCTypeLen(const reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b11      	cmp	r3, #17
 8001e4c:	d804      	bhi.n	8001e58 <check_predicate+0xf4>
        return typeLengthMappingArray[type];
 8001e4e:	4a4b      	ldr	r2, [pc, #300]	; (8001f7c <check_predicate+0x218>)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	e002      	b.n	8001e5e <check_predicate+0xfa>
    }
    return 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e000      	b.n	8001e5e <check_predicate+0xfa>
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
#else
	const reg pointerLen = getMYCTypeLen(type);
#endif /* USE_ENTITY_POINTER */

	const reg dataLen = getMYCTypeLen(field->type);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	613b      	str	r3, [r7, #16]
    if(type < TYPE_ARRAY_LENGTH) {
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b11      	cmp	r3, #17
 8001e6a:	d804      	bhi.n	8001e76 <check_predicate+0x112>
        return typeLengthMappingArray[type];
 8001e6c:	4a43      	ldr	r2, [pc, #268]	; (8001f7c <check_predicate+0x218>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	e000      	b.n	8001e78 <check_predicate+0x114>
    return 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]

	M_Assert_WarningSaveCheck(
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d805      	bhi.n	8001e8c <check_predicate+0x128>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01e      	beq.n	8001eca <check_predicate+0x166>
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <check_predicate+0x166>
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d805      	bhi.n	8001ea8 <check_predicate+0x144>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <check_predicate+0x152>
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <check_predicate+0x152>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <check_predicate+0x154>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	b2d9      	uxtb	r1, r3
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <check_predicate+0x21c>)
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	232b      	movs	r3, #43	; 0x2b
 8001ec0:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <check_predicate+0x200>)
 8001ec2:	4830      	ldr	r0, [pc, #192]	; (8001f84 <check_predicate+0x220>)
 8001ec4:	f004 f94e 	bl	8006164 <__M_Warning>
 8001ec8:	e026      	b.n	8001f18 <check_predicate+0x1b4>
	}, "check_predicate: Pointer alignment error!!!");


#ifdef USE_ENTITY_POINTER

	if(field->bitFlags & ENTITY_POINTER_MSK) {
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01e      	beq.n	8001f14 <check_predicate+0x1b0>
		const void* reg_ptr = (const void*) (* REG_TYPE_DC(val));
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	61fb      	str	r3, [r7, #28]

		M_Assert_WarningSaveCheck(
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d918      	bls.n	8001f14 <check_predicate+0x1b0>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <check_predicate+0x1b0>
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d906      	bls.n	8001f00 <check_predicate+0x19c>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <check_predicate+0x19c>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <check_predicate+0x19e>
 8001f00:	2300      	movs	r3, #0
 8001f02:	b2d9      	uxtb	r1, r3
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <check_predicate+0x224>)
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2337      	movs	r3, #55	; 0x37
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <check_predicate+0x200>)
 8001f0c:	481f      	ldr	r0, [pc, #124]	; (8001f8c <check_predicate+0x228>)
 8001f0e:	f004 f929 	bl	8006164 <__M_Warning>
 8001f12:	e001      	b.n	8001f18 <check_predicate+0x1b4>

#endif /* USE_ENTITY_POINTER */


	UNUSED(ctx);
	return 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e01e      	b.n	8001f56 <check_predicate+0x1f2>

	error:
	{
		PREPROCESSOR_CTX_GET(ctx,
 8001f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
				int * const err);
		++(*err);
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]
		M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "error: E_num: %d, E_str: %.*s, F_num: %d, F_str: %.*s", entityNumber, ENTITY_DESCRIPTION_SIZE, entity->descr, fieldNumber, ENTITY_DESCRIPTION_SIZE, field->descr);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	3219      	adds	r2, #25
 8001f30:	9206      	str	r2, [sp, #24]
 8001f32:	2204      	movs	r2, #4
 8001f34:	9205      	str	r2, [sp, #20]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	9204      	str	r2, [sp, #16]
 8001f3a:	9303      	str	r3, [sp, #12]
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <check_predicate+0x22c>)
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2349      	movs	r3, #73	; 0x49
 8001f4a:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <check_predicate+0x200>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4811      	ldr	r0, [pc, #68]	; (8001f94 <check_predicate+0x230>)
 8001f50:	f004 f908 	bl	8006164 <__M_Warning>
		return 0;
 8001f54:	2300      	movs	r3, #0
	}
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3728      	adds	r7, #40	; 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	0800e344 	.word	0x0800e344
 8001f64:	0800e2d0 	.word	0x0800e2d0
 8001f68:	0800e30c 	.word	0x0800e30c
 8001f6c:	0800e3a8 	.word	0x0800e3a8
 8001f70:	0800e364 	.word	0x0800e364
 8001f74:	0800e430 	.word	0x0800e430
 8001f78:	0800e3cc 	.word	0x0800e3cc
 8001f7c:	08010f7c 	.word	0x08010f7c
 8001f80:	0800e4fc 	.word	0x0800e4fc
 8001f84:	0800e48c 	.word	0x0800e48c
 8001f88:	0800e56c 	.word	0x0800e56c
 8001f8c:	0800e528 	.word	0x0800e528
 8001f90:	0800e5a4 	.word	0x0800e5a4
 8001f94:	0800e598 	.word	0x0800e598

08001f98 <checkEntities>:

int checkEntities(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
	int err = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]

	if(foreachEntities(check_predicate, PREPROCESSOR_CTX_CAPTURE({&err})) == ENTITY_ERROR) {
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <checkEntities+0x30>)
 8001fac:	f000 fe60 	bl	8002c70 <foreachEntities>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <checkEntities+0x24>
		++err;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
	}

	return err;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08001d65 	.word	0x08001d65

08001fcc <entityCMD>:
#ifdef C_ENTITY_FRAMEWORK_LIB_ENA
#include "entity_packet.h"
#include "smart_assert.h"

void entityCMD(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b0b7      	sub	sp, #220	; 0xdc
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
	M_Assert_Break((inputData == NULL) || (outputData == NULL) || (size == NULL), M_EMPTY, return, "entityCMD: invalid input");
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <entityCMD+0x20>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <entityCMD+0x20>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d114      	bne.n	8002016 <entityCMD+0x4a>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <entityCMD+0x32>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <entityCMD+0x32>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <entityCMD+0x36>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <entityCMD+0x38>
 8002002:	2300      	movs	r3, #0
 8002004:	b2d9      	uxtb	r1, r3
 8002006:	4baa      	ldr	r3, [pc, #680]	; (80022b0 <entityCMD+0x2e4>)
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	230a      	movs	r3, #10
 800200c:	4aa9      	ldr	r2, [pc, #676]	; (80022b4 <entityCMD+0x2e8>)
 800200e:	48aa      	ldr	r0, [pc, #680]	; (80022b8 <entityCMD+0x2ec>)
 8002010:	f004 f88a 	bl	8006128 <__M_Error>
 8002014:	e20a      	b.n	800242c <entityCMD+0x460>

	const reg sizeInternal = (*size);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	M_Assert_Break((sizeInternal == 0) || (maxOutBufferSize == 0), M_EMPTY, return, "entityCMD: invalid input size");
 800201e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <entityCMD+0x60>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d112      	bne.n	8002052 <entityCMD+0x86>
 800202c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <entityCMD+0x6e>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <entityCMD+0x72>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <entityCMD+0x74>
 800203e:	2300      	movs	r3, #0
 8002040:	b2d9      	uxtb	r1, r3
 8002042:	4b9e      	ldr	r3, [pc, #632]	; (80022bc <entityCMD+0x2f0>)
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	230d      	movs	r3, #13
 8002048:	4a9a      	ldr	r2, [pc, #616]	; (80022b4 <entityCMD+0x2e8>)
 800204a:	489d      	ldr	r0, [pc, #628]	; (80022c0 <entityCMD+0x2f4>)
 800204c:	f004 f86c 	bl	8006128 <__M_Error>
 8002050:	e1ec      	b.n	800242c <entityCMD+0x460>

	reg Wpos = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	reg Rpos = 1;
 8002058:	2301      	movs	r3, #1
 800205a:	643b      	str	r3, [r7, #64]	; 0x40
	reg entitySize = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
	const u8 cmd = inputData[0];
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


	// write header------------------------------------------
	outputData[0] =   cmd;                     // CMD_ID
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 800206e:	701a      	strb	r2, [r3, #0]

	// do logic------------------------------------------
	switch(cmd) {
 8002070:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002074:	2b0b      	cmp	r3, #11
 8002076:	f200 81d3 	bhi.w	8002420 <entityCMD+0x454>
 800207a:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <entityCMD+0xb4>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	080020db 	.word	0x080020db
 8002084:	08002179 	.word	0x08002179
 8002088:	0800226b 	.word	0x0800226b
 800208c:	08002349 	.word	0x08002349
 8002090:	08002321 	.word	0x08002321
 8002094:	080023d9 	.word	0x080023d9
 8002098:	08002401 	.word	0x08002401
 800209c:	08002401 	.word	0x08002401
 80020a0:	08002421 	.word	0x08002421
 80020a4:	08002421 	.word	0x08002421
 80020a8:	080020bf 	.word	0x080020bf
 80020ac:	080020b1 	.word	0x080020b1

	/* **********************************************************************************************************************************
	 *  ENTITY PING
	 */
	case ENTITY_PING_CMD: {
		entitySize = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	63fb      	str	r3, [r7, #60]	; 0x3c

#ifdef USE_ENTITY_PING
		outputData[1] = entities_ping();
#else
		outputData[1] = 1;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	3301      	adds	r3, #1
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
#endif /* USE_ENTITY_PING */
		break;}
 80020bc:	e1b0      	b.n	8002420 <entityCMD+0x454>

	/* **********************************************************************************************************************************
	 *  READ MAIN TYPE DIMENSIONS
	 */
	case ENTITY_READ_DIMENSIONS: {
		readEntitiesSizes((outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020c4:	18d0      	adds	r0, r2, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020cc:	1ad2      	subs	r2, r2, r3
 80020ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020d2:	4619      	mov	r1, r3
 80020d4:	f000 fe2e 	bl	8002d34 <readEntitiesSizes>
		break;}
 80020d8:	e1a2      	b.n	8002420 <entityCMD+0x454>
	 */
	case READ_ENTITY_DESCRIPTIONS: {
		//ENTITY_DBG_ASSERT_BUF( (Rpos + (ENTITIES_SIZEOF << 1)) > sizeInternal, M_EMPTY, return, "entityCMD: read size more than buffer");

		// read entity start
		TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber = readEntityNumberFromBuf(&inputData[Rpos]);
 80020da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020e4:	2302      	movs	r3, #2
 80020e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    switch (n) {
 80020fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d013      	beq.n	800212a <entityCMD+0x15e>
 8002102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002106:	2b01      	cmp	r3, #1
 8002108:	d106      	bne.n	8002118 <entityCMD+0x14c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800210a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800210e:	781a      	ldrb	r2, [r3, #0]
 8002110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e009      	b.n	800212c <entityCMD+0x160>
    default: memcpy(to, from, n); break;
 8002118:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800211c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002120:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002124:	f007 fbaa 	bl	800987c <memcpy>
 8002128:	e000      	b.n	800212c <entityCMD+0x160>
    case 0: break;
 800212a:	bf00      	nop
}
 800212c:	bf00      	nop
#if (MAX_NUBER_OF_ENTITIES < 256U)
	entityNumber = *(inputData);
#else

    ENTITY_BYTE_CPY(ENTITIES_SIZEOF, inputData, &entityNumber);
    entityNumber &= 0x0000FFFFUL;
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	b29b      	uxth	r3, r3
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
#endif /* (MAX_NUBER_OF_ENTITIES < 256U) */
    //----------------- END --------------------------------------------------------------------------------

    return entityNumber;
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		Rpos += ENTITIES_SIZEOF;
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	3302      	adds	r3, #2
 800213e:	643b      	str	r3, [r7, #64]	; 0x40

		// read number of entity
		//        TYPEOF_STRUCT(EntityInfo, entities_count) len; //(WARNING!!!) do not supported on old version!!!!!!!
		//        readEntityNumberFromBuf(&len, &inputData[Rpos]);
		//        Rpos += ENTITIES_SIZEOF;
		const TYPEOF_STRUCT(EntityInfo, entities_count) len = inputData[Rpos++]; // support on old version (this is glitch!!!)
 8002140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	643a      	str	r2, [r7, #64]	; 0x40
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// read descriptions function
		readEntitiesDescriptions(startEntityNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002156:	18d1      	adds	r1, r2, r3
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	460a      	mov	r2, r1
 800216a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800216e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002172:	f000 fe7d 	bl	8002e70 <readEntitiesDescriptions>
		break;}
 8002176:	e153      	b.n	8002420 <entityCMD+0x454>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
}

// read entity & field number from input buffer by next position
STATIC_FORCEINLINE void readEntityFieldNumbersfromBuf(TYPEOF_STRUCT(EntityInfo, entities_count)* const entityNumber, TYPEOF_STRUCT(Entity, fields_count)* const fieldNumber, u8* const inputData, reg* const Rpos)
{
    reg Rpos_internal = (*Rpos);
 800217e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read entity number
     */
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002184:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218c:	4413      	add	r3, r2
 800218e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002192:	2302      	movs	r3, #2
 8002194:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800219c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 80021a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <entityCMD+0x20c>
 80021b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d106      	bne.n	80021c6 <entityCMD+0x1fa>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80021b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e009      	b.n	80021da <entityCMD+0x20e>
    default: memcpy(to, from, n); break;
 80021c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80021ce:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80021d2:	f007 fb53 	bl	800987c <memcpy>
 80021d6:	e000      	b.n	80021da <entityCMD+0x20e>
    case 0: break;
 80021d8:	bf00      	nop
}
 80021da:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	b29b      	uxth	r3, r3
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return entityNumber;
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
    Rpos_internal += ENTITIES_SIZEOF;
 80021e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ea:	3302      	adds	r3, #2
 80021ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read field number
     */
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80021f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80021f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f8:	4413      	add	r3, r2
 80021fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fieldNumber = *(inputData);
 80021fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    return fieldNumber;
 8002208:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800220c:	867b      	strh	r3, [r7, #50]	; 0x32
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800220e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002212:	3301      	adds	r3, #1
 8002214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    //----------------- END -----------------------------------------------
    (*Rpos) = Rpos_internal;
 8002218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800221c:	643b      	str	r3, [r7, #64]	; 0x40
}
 800221e:	bf00      	nop
		TYPEOF_STRUCT(Entity, fields_count)         startFieldNumber;
		TYPEOF_STRUCT(Entity, fields_count)         len;
		readEntityFieldNumbersfromBuf(&entityNumber, &startFieldNumber, inputData, &Rpos);

		//read number of fields
		len = readFieldNumberFromBuf(&inputData[Rpos]);
 8002220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	fieldNumber = *(inputData);
 800222a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    return fieldNumber;
 8002234:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002238:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		Rpos += ENTITY_FIELD_SIZEOF;
 800223c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223e:	3301      	adds	r3, #1
 8002240:	643b      	str	r3, [r7, #64]	; 0x40

		readEntityFields(entityNumber, startFieldNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002242:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002244:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800224c:	18d4      	adds	r4, r2, r3
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4623      	mov	r3, r4
 8002264:	f000 fec0 	bl	8002fe8 <readEntityFields>
		break;}
 8002268:	e0da      	b.n	8002420 <entityCMD+0x454>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    reg Rpos_internal = (*Rpos);
 8002270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002272:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002274:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800227a:	4413      	add	r3, r2
 800227c:	67bb      	str	r3, [r7, #120]	; 0x78
 800227e:	2302      	movs	r3, #2
 8002280:	677b      	str	r3, [r7, #116]	; 0x74
 8002282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002284:	673b      	str	r3, [r7, #112]	; 0x70
 8002286:	f107 0320 	add.w	r3, r7, #32
 800228a:	66fb      	str	r3, [r7, #108]	; 0x6c
    switch (n) {
 800228c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228e:	2b00      	cmp	r3, #0
 8002290:	d018      	beq.n	80022c4 <entityCMD+0x2f8>
 8002292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002294:	2b01      	cmp	r3, #1
 8002296:	d104      	bne.n	80022a2 <entityCMD+0x2d6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e011      	b.n	80022c6 <entityCMD+0x2fa>
    default: memcpy(to, from, n); break;
 80022a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80022a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80022a8:	f007 fae8 	bl	800987c <memcpy>
 80022ac:	e00b      	b.n	80022c6 <entityCMD+0x2fa>
 80022ae:	bf00      	nop
 80022b0:	0800e64c 	.word	0x0800e64c
 80022b4:	0800e5dc 	.word	0x0800e5dc
 80022b8:	0800e60c 	.word	0x0800e60c
 80022bc:	0800e698 	.word	0x0800e698
 80022c0:	0800e668 	.word	0x0800e668
    case 0: break;
 80022c4:	bf00      	nop
}
 80022c6:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	623b      	str	r3, [r7, #32]
    return entityNumber;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    Rpos_internal += ENTITIES_SIZEOF;
 80022d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d4:	3302      	adds	r3, #2
 80022d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80022d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80022dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022de:	4413      	add	r3, r2
 80022e0:	66bb      	str	r3, [r7, #104]	; 0x68
	fieldNumber = *(inputData);
 80022e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    return fieldNumber;
 80022ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80022ee:	84fb      	strh	r3, [r7, #38]	; 0x26
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80022f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f2:	3301      	adds	r3, #1
 80022f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*Rpos) = Rpos_internal;
 80022f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f8:	643b      	str	r3, [r7, #64]	; 0x40
}
 80022fa:	bf00      	nop

		TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
		TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
		readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

		readFieldValue(entityNumber, fieldNumber, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 80022fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022fe:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002306:	18d4      	adds	r4, r2, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	4622      	mov	r2, r4
 800231a:	f000 ff85 	bl	8003228 <readFieldValue>
		break;}
 800231e:	e07f      	b.n	8002420 <entityCMD+0x454>

	case READ_SEVERAL_VALUES: {
		entitySize = (sizeInternal - 1U);
 8002320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002324:	3b01      	subs	r3, #1
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
		readSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	18d0      	adds	r0, r2, r3
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002334:	18d1      	adds	r1, r2, r3
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002342:	f001 f8fd 	bl	8003540 <readSeveralFieldsValues>
		break;}
 8002346:	e06b      	b.n	8002420 <entityCMD+0x454>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	663b      	str	r3, [r7, #96]	; 0x60
    reg Rpos_internal = (*Rpos);
 800234c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234e:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002354:	4413      	add	r3, r2
 8002356:	65bb      	str	r3, [r7, #88]	; 0x58
 8002358:	2302      	movs	r3, #2
 800235a:	657b      	str	r3, [r7, #84]	; 0x54
 800235c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235e:	653b      	str	r3, [r7, #80]	; 0x50
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (n) {
 8002366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <entityCMD+0x3bc>
 800236c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236e:	2b01      	cmp	r3, #1
 8002370:	d104      	bne.n	800237c <entityCMD+0x3b0>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e006      	b.n	800238a <entityCMD+0x3be>
    default: memcpy(to, from, n); break;
 800237c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800237e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002380:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002382:	f007 fa7b 	bl	800987c <memcpy>
 8002386:	e000      	b.n	800238a <entityCMD+0x3be>
    case 0: break;
 8002388:	bf00      	nop
}
 800238a:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	b29b      	uxth	r3, r3
 8002390:	617b      	str	r3, [r7, #20]
    return entityNumber;
 8002392:	697b      	ldr	r3, [r7, #20]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002394:	61fb      	str	r3, [r7, #28]
    Rpos_internal += ENTITIES_SIZEOF;
 8002396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002398:	3302      	adds	r3, #2
 800239a:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800239c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800239e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a0:	4413      	add	r3, r2
 80023a2:	64bb      	str	r3, [r7, #72]	; 0x48
	fieldNumber = *(inputData);
 80023a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    return fieldNumber;
 80023ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80023b0:	837b      	strh	r3, [r7, #26]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80023b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b4:	3301      	adds	r3, #1
 80023b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*Rpos) = Rpos_internal;
 80023b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ba:	643b      	str	r3, [r7, #64]	; 0x40
}
 80023bc:	bf00      	nop

		TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
		TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
		readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

		setFieldValue(entityNumber, fieldNumber, (inputData + Rpos), (sizeInternal - Rpos));
 80023be:	69f8      	ldr	r0, [r7, #28]
 80023c0:	8b79      	ldrh	r1, [r7, #26]
 80023c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	18d4      	adds	r4, r2, r3
 80023c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	4622      	mov	r2, r4
 80023d2:	f001 fb11 	bl	80039f8 <setFieldValue>
		break;}
 80023d6:	e023      	b.n	8002420 <entityCMD+0x454>

	case WRITE_SEVERAL_VALUES: {
		entitySize = (sizeInternal - 1U);
 80023d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023dc:	3b01      	subs	r3, #1
 80023de:	63fb      	str	r3, [r7, #60]	; 0x3c
		setSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 80023e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	18d0      	adds	r0, r2, r3
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023ec:	18d1      	adds	r1, r2, r3
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80023fa:	f001 fc41 	bl	8003c80 <setSeveralFieldsValues>
		break;}
 80023fe:	e00f      	b.n	8002420 <entityCMD+0x454>
	/* **********************************************************************************************************************************
	 *  WRITE/READ Values
	 */
	case READ_SEVERAL_VALUES_GLUED :
	case WRITE_SEVERAL_VALUES_GLUED: {
		proceedGluedValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	18d0      	adds	r0, r2, r3
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800240c:	18d1      	adds	r1, r2, r3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800241a:	f001 fe79 	bl	8004110 <proceedGluedValues>
		break;}
 800241e:	bf00      	nop
	case ENTITY_BACKUP_OPERATION: {
		break;}

	}

	(*size) = (Wpos + entitySize);
 8002420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002426:	441a      	add	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	601a      	str	r2, [r3, #0]
	UNUSED(ctx);
}
 800242c:	37d4      	adds	r7, #212	; 0xd4
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	bf00      	nop

08002434 <deleteEntitityFieldsInternal>:
 * **********************************************************************************************************************************
 */

/// delete some entity for internal using
static void deleteEntitityFieldsInternal(const reg entityNumber)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((entityNumber > entityInfo.entities_count), M_EMPTY, return, "deleteEntitityFieldsInternal: No entity for delete!!!");
 800243c:	4b35      	ldr	r3, [pc, #212]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <deleteEntitityFieldsInternal+0x34>
 8002446:	4b33      	ldr	r3, [pc, #204]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	bf8c      	ite	hi
 8002450:	2301      	movhi	r3, #1
 8002452:	2300      	movls	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <deleteEntitityFieldsInternal+0xe4>)
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	231b      	movs	r3, #27
 800245e:	4a2f      	ldr	r2, [pc, #188]	; (800251c <deleteEntitityFieldsInternal+0xe8>)
 8002460:	482f      	ldr	r0, [pc, #188]	; (8002520 <deleteEntitityFieldsInternal+0xec>)
 8002462:	f003 fe61 	bl	8006128 <__M_Error>
 8002466:	e051      	b.n	800250c <deleteEntitityFieldsInternal+0xd8>
    M_Assert_BreakSaveCheck((entityInfo.entities[entityNumber] == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]))), M_EMPTY, return, "initEntity: entity number: %d is null", entityNumber);
 8002468:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d115      	bne.n	80024a4 <deleteEntitityFieldsInternal+0x70>
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4619      	mov	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	4b23      	ldr	r3, [pc, #140]	; (8002524 <deleteEntitityFieldsInternal+0xf0>)
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	231c      	movs	r3, #28
 800249a:	4a20      	ldr	r2, [pc, #128]	; (800251c <deleteEntitityFieldsInternal+0xe8>)
 800249c:	4822      	ldr	r0, [pc, #136]	; (8002528 <deleteEntitityFieldsInternal+0xf4>)
 800249e:	f003 fe43 	bl	8006128 <__M_Error>
 80024a2:	e033      	b.n	800250c <deleteEntitityFieldsInternal+0xd8>
    if(entityInfo.entities[entityNumber]->isHeap) {
        free(entityInfo.entities[entityNumber]->pointer);
        entityInfo.entities[entityNumber]->pointer = NULL;
    }
#else
    free(entityInfo.entities[entityNumber]->pointer);
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f007 f9da 	bl	800986c <free>
    entityInfo.entities[entityNumber]->pointer = NULL;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
#endif /* USE_ENTITY_USER_SPACE */

    free(entityInfo.entities[entityNumber]->fields);
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f007 f9c8 	bl	800986c <free>
    entityInfo.entities[entityNumber]->fields = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]->fields));
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]

    free(entityInfo.entities[entityNumber]);
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f007 f9b7 	bl	800986c <free>
    entityInfo.entities[entityNumber] = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]));
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <deleteEntitityFieldsInternal+0xe0>)
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000304 	.word	0x20000304
 8002518:	0800e718 	.word	0x0800e718
 800251c:	0800e6b8 	.word	0x0800e6b8
 8002520:	0800e6ec 	.word	0x0800e6ec
 8002524:	0800e7b4 	.word	0x0800e7b4
 8002528:	0800e750 	.word	0x0800e750

0800252c <deleteEntities>:
}


/// delete all entities and deallocation all memory
void deleteEntities(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <deleteEntities+0x44>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	603b      	str	r3, [r7, #0]

    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	e005      	b.n	800254a <deleteEntities+0x1e>
        deleteEntitityFieldsInternal(i);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff78 	bl	8002434 <deleteEntitityFieldsInternal>
    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d3f5      	bcc.n	800253e <deleteEntities+0x12>
    }

    free(entityInfo.entities);
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <deleteEntities+0x44>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4618      	mov	r0, r3
 8002558:	f007 f988 	bl	800986c <free>
    memset(&entityInfo, 0, sizeof(entityInfo));
 800255c:	220c      	movs	r2, #12
 800255e:	2100      	movs	r1, #0
 8002560:	4803      	ldr	r0, [pc, #12]	; (8002570 <deleteEntities+0x44>)
 8002562:	f007 f9b3 	bl	80098cc <memset>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000304 	.word	0x20000304

08002574 <newEntities>:



/// allocation new entities pointers
int newEntities(const reg numberOfEntities)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af04      	add	r7, sp, #16
 800257a:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((numberOfEntities > MAX_NUBER_OF_ENTITIES), M_EMPTY, return ENTITY_ERROR, "newEntities: No valid input number of entities, value: %d, max: %d", numberOfEntities, MAX_NUBER_OF_ENTITIES);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002582:	d915      	bls.n	80025b0 <newEntities+0x3c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800258a:	bf8c      	ite	hi
 800258c:	2301      	movhi	r3, #1
 800258e:	2300      	movls	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	4619      	mov	r1, r3
 8002594:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	4b18      	ldr	r3, [pc, #96]	; (8002600 <newEntities+0x8c>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2359      	movs	r3, #89	; 0x59
 80025a4:	4a17      	ldr	r2, [pc, #92]	; (8002604 <newEntities+0x90>)
 80025a6:	4818      	ldr	r0, [pc, #96]	; (8002608 <newEntities+0x94>)
 80025a8:	f003 fdbe 	bl	8006128 <__M_Error>
 80025ac:	2300      	movs	r3, #0
 80025ae:	e022      	b.n	80025f6 <newEntities+0x82>

    deleteEntities(); // delete all entities
 80025b0:	f7ff ffbc 	bl	800252c <deleteEntities>

    entityInfo.entities = (Entity**) calloc(numberOfEntities, sizeof(Entity*)); // allocation & initialization all entity pointers
 80025b4:	2104      	movs	r1, #4
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f006 fe90 	bl	80092dc <calloc>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <newEntities+0x98>)
 80025c2:	609a      	str	r2, [r3, #8]
    M_Assert_BreakSaveCheck((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities))), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entity pointers");
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <newEntities+0x98>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d110      	bne.n	80025ee <newEntities+0x7a>
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <newEntities+0x98>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	4619      	mov	r1, r3
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <newEntities+0x9c>)
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	235e      	movs	r3, #94	; 0x5e
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <newEntities+0x90>)
 80025e4:	480b      	ldr	r0, [pc, #44]	; (8002614 <newEntities+0xa0>)
 80025e6:	f003 fd9f 	bl	8006128 <__M_Error>
 80025ea:	2300      	movs	r3, #0
 80025ec:	e003      	b.n	80025f6 <newEntities+0x82>

    entityInfo.allocated_entity_pointers = numberOfEntities;
 80025ee:	4a07      	ldr	r2, [pc, #28]	; (800260c <newEntities+0x98>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6013      	str	r3, [r2, #0]
    return ENTITY_OK;
 80025f4:	2301      	movs	r3, #1
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	0800e834 	.word	0x0800e834
 8002604:	0800e6b8 	.word	0x0800e6b8
 8002608:	0800e808 	.word	0x0800e808
 800260c:	20000304 	.word	0x20000304
 8002610:	0800e8c0 	.word	0x0800e8c0
 8002614:	0800e878 	.word	0x0800e878

08002618 <initEntity>:


/// allocation entitites pointer & fields
int initEntity(reg* const entityNumber, const reg NumberOfFields, const reg pointerSize, const char descr[ENTITY_DESCRIPTION_SIZE], const b isCustomSpace, const b isHeap, void* arg)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b093      	sub	sp, #76	; 0x4c
 800261c:	af04      	add	r7, sp, #16
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((NumberOfFields > MAX_NUBER_OF_FIELDS), M_EMPTY, return ENTITY_ERROR, "initEntity: No valid input number of fields, value: %d, max: %d", NumberOfFields, MAX_NUBER_OF_FIELDS);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2bff      	cmp	r3, #255	; 0xff
 800262a:	d913      	bls.n	8002654 <initEntity+0x3c>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	bf8c      	ite	hi
 8002632:	2301      	movhi	r3, #1
 8002634:	2300      	movls	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	23ff      	movs	r3, #255	; 0xff
 800263c:	9302      	str	r3, [sp, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	4b71      	ldr	r3, [pc, #452]	; (8002808 <initEntity+0x1f0>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2368      	movs	r3, #104	; 0x68
 8002648:	4a70      	ldr	r2, [pc, #448]	; (800280c <initEntity+0x1f4>)
 800264a:	4871      	ldr	r0, [pc, #452]	; (8002810 <initEntity+0x1f8>)
 800264c:	f003 fd6c 	bl	8006128 <__M_Error>
 8002650:	2300      	movs	r3, #0
 8002652:	e0d4      	b.n	80027fe <initEntity+0x1e6>

    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <initEntity+0x1fc>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
    const TYPEOF_STRUCT(EntityInfo, allocated_entity_pointers) allocated_entity_pointers = entityInfo.allocated_entity_pointers;
 800265a:	4b6e      	ldr	r3, [pc, #440]	; (8002814 <initEntity+0x1fc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c

    M_Assert_BreakSaveCheck((entities_count >= allocated_entity_pointers), M_EMPTY, return ENTITY_ERROR, "initEntity: There is no free entity for initialization!!!, use /newEntities/ function before");
 8002660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	429a      	cmp	r2, r3
 8002666:	d310      	bcc.n	800268a <initEntity+0x72>
 8002668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	429a      	cmp	r2, r3
 800266e:	bf2c      	ite	cs
 8002670:	2301      	movcs	r3, #1
 8002672:	2300      	movcc	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	4619      	mov	r1, r3
 8002678:	4b67      	ldr	r3, [pc, #412]	; (8002818 <initEntity+0x200>)
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	236d      	movs	r3, #109	; 0x6d
 800267e:	4a63      	ldr	r2, [pc, #396]	; (800280c <initEntity+0x1f4>)
 8002680:	4866      	ldr	r0, [pc, #408]	; (800281c <initEntity+0x204>)
 8002682:	f003 fd51 	bl	8006128 <__M_Error>
 8002686:	2300      	movs	r3, #0
 8002688:	e0b9      	b.n	80027fe <initEntity+0x1e6>

    char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	f107 0318 	add.w	r3, r7, #24
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	721a      	strb	r2, [r3, #8]

    // allocation pointer to Entity--------------------------------------------------------------------------------------------------------------------------------------------------------------
    Entity* const new_entity = entityInfo.entities[entities_count] = (Entity*) calloc(1, sizeof(Entity));
 800269a:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <initEntity+0x1fc>)
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	18d4      	adds	r4, r2, r3
 80026a4:	2110      	movs	r1, #16
 80026a6:	2001      	movs	r0, #1
 80026a8:	f006 fe18 	bl	80092dc <calloc>
 80026ac:	4603      	mov	r3, r0
 80026ae:	6023      	str	r3, [r4, #0]
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
    M_Assert_BreakSaveCheck(new_entity == NULLPTR(Entity*), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entitity");
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <initEntity+0xc2>
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	4b55      	ldr	r3, [pc, #340]	; (8002820 <initEntity+0x208>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2373      	movs	r3, #115	; 0x73
 80026ce:	4a4f      	ldr	r2, [pc, #316]	; (800280c <initEntity+0x1f4>)
 80026d0:	4854      	ldr	r0, [pc, #336]	; (8002824 <initEntity+0x20c>)
 80026d2:	f003 fd29 	bl	8006128 <__M_Error>
 80026d6:	2300      	movs	r3, #0
 80026d8:	e091      	b.n	80027fe <initEntity+0x1e6>

    // copy entity description-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if(descr) {
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <initEntity+0xd4>
        memcpy(new_entity->descr, descr, ENTITY_DESCRIPTION_SIZE);
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	3304      	adds	r3, #4
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e00a      	b.n	8002702 <initEntity+0xea>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)descr, (u8 *)new_entity->descr);
    } else {
        sprintf(str, "E%d", entities_count);
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f2:	494d      	ldr	r1, [pc, #308]	; (8002828 <initEntity+0x210>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f008 fab1 	bl	800ac5c <siprintf>
        memcpy(new_entity->descr, str, ENTITY_DESCRIPTION_SIZE);
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	3304      	adds	r3, #4
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	601a      	str	r2, [r3, #0]
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, (isCustomSpace ? "newEntities: Invalid user input space" : "newEntities: No memory for allocation Entitity"));

#else

    new_entity->pointer = calloc(1, pointerSize);
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	2001      	movs	r0, #1
 8002706:	f006 fde9 	bl	80092dc <calloc>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	601a      	str	r2, [r3, #0]
    UNUSED(isCustomSpace);
    UNUSED(isHeap);
    UNUSED(arg);

    M_Assert_BreakSaveCheck((new_entity->pointer == NULL), {
 8002712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d113      	bne.n	8002742 <initEntity+0x12a>
 800271a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800271c:	f7ff fe8a 	bl	8002434 <deleteEntitityFieldsInternal>
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <initEntity+0x208>)
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2396      	movs	r3, #150	; 0x96
 8002736:	4a35      	ldr	r2, [pc, #212]	; (800280c <initEntity+0x1f4>)
 8002738:	483c      	ldr	r0, [pc, #240]	; (800282c <initEntity+0x214>)
 800273a:	f003 fcf5 	bl	8006128 <__M_Error>
 800273e:	2300      	movs	r3, #0
 8002740:	e05d      	b.n	80027fe <initEntity+0x1e6>

#endif /* USE_ENTITY_USER_SPACE */


    // allocation pointer to Fields------------------------------------------------------------------------------------------------------------------------------------------------------------
    new_entity->fields = (EntityField*) calloc(NumberOfFields, sizeof(EntityField));
 8002742:	2120      	movs	r1, #32
 8002744:	68b8      	ldr	r0, [r7, #8]
 8002746:	f006 fdc9 	bl	80092dc <calloc>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	60da      	str	r2, [r3, #12]
    M_Assert_BreakSaveCheck((new_entity->fields == NULLPTR(TYPEOF_STRUCT(Entity, fields))), {
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d113      	bne.n	8002782 <initEntity+0x16a>
 800275a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800275c:	f7ff fe6a 	bl	8002434 <deleteEntitityFieldsInternal>
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <initEntity+0x218>)
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	239f      	movs	r3, #159	; 0x9f
 8002776:	4a25      	ldr	r2, [pc, #148]	; (800280c <initEntity+0x1f4>)
 8002778:	482e      	ldr	r0, [pc, #184]	; (8002834 <initEntity+0x21c>)
 800277a:	f003 fcd5 	bl	8006128 <__M_Error>
 800277e:	2300      	movs	r3, #0
 8002780:	e03d      	b.n	80027fe <initEntity+0x1e6>
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, "newEntities: No memory for allocation EntityField");

    new_entity->fields_count = NumberOfFields;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	b29a      	uxth	r2, r3
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	811a      	strh	r2, [r3, #8]

    // initialization Fields-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    for(reg i = 0; i < NumberOfFields; ++i) {
 800278a:	2300      	movs	r3, #0
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
 800278e:	e028      	b.n	80027e2 <initEntity+0x1ca>
        EntityField* const    field = &new_entity->fields[i];
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	4413      	add	r3, r2
 800279a:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef USE_ENTITY_CALLBACKS

#   ifdef USE_ENTITY_READ_CALLBACK
        field->rdCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
        field->rdCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
#   endif /* USE_ENTITY_READ_CALLBACK */

#   ifdef USE_ENTITY_WRITE_CALLBACK
        field->wrCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
        field->wrCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	2200      	movs	r2, #0
 80027b2:	60da      	str	r2, [r3, #12]
#   endif /* USE_ENTITY_WRITE_CALLBACK */

#endif /* USE_ENTITY_CALLBACKS */

        field->bitFlags  = 0;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
        field->shift     = 0;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
        field->type      = VOID_TYPE;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2200      	movs	r2, #0
 80027c4:	761a      	strb	r2, [r3, #24]

        sprintf(str, "F%d", i);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027cc:	491a      	ldr	r1, [pc, #104]	; (8002838 <initEntity+0x220>)
 80027ce:	4618      	mov	r0, r3
 80027d0:	f008 fa44 	bl	800ac5c <siprintf>
        memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	3319      	adds	r3, #25
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
    for(reg i = 0; i < NumberOfFields; ++i) {
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	3301      	adds	r3, #1
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
 80027e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d3d2      	bcc.n	8002790 <initEntity+0x178>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);
    }

    (*entityNumber) = entities_count;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ee:	601a      	str	r2, [r3, #0]
    ++entities_count;
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	3301      	adds	r3, #1
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
    entityInfo.entities_count = entities_count;
 80027f6:	4a07      	ldr	r2, [pc, #28]	; (8002814 <initEntity+0x1fc>)
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	6053      	str	r3, [r2, #4]
    return ENTITY_OK;
 80027fc:	2301      	movs	r3, #1
}
 80027fe:	4618      	mov	r0, r3
 8002800:	373c      	adds	r7, #60	; 0x3c
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	bf00      	nop
 8002808:	0800e920 	.word	0x0800e920
 800280c:	0800e6b8 	.word	0x0800e6b8
 8002810:	0800e8f8 	.word	0x0800e8f8
 8002814:	20000304 	.word	0x20000304
 8002818:	0800e990 	.word	0x0800e990
 800281c:	0800e960 	.word	0x0800e960
 8002820:	0800ea10 	.word	0x0800ea10
 8002824:	0800e9f0 	.word	0x0800e9f0
 8002828:	0800ea40 	.word	0x0800ea40
 800282c:	0800ea44 	.word	0x0800ea44
 8002830:	0800eaa4 	.word	0x0800eaa4
 8002834:	0800ea64 	.word	0x0800ea64
 8002838:	0800ead8 	.word	0x0800ead8

0800283c <initField>:
 * **********************************************************************************************************************************
 */

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08e      	sub	sp, #56	; 0x38
 8002840:	af04      	add	r7, sp, #16
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL), M_EMPTY, return ENTITY_ERROR, "initField: No valid input");
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <initField+0x1a>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d112      	bne.n	800287c <initField+0x40>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <initField+0x26>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <initField+0x2a>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <initField+0x2c>
 8002866:	2300      	movs	r3, #0
 8002868:	b2d9      	uxtb	r1, r3
 800286a:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <initField+0x184>)
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	23cf      	movs	r3, #207	; 0xcf
 8002870:	4a54      	ldr	r2, [pc, #336]	; (80029c4 <initField+0x188>)
 8002872:	4855      	ldr	r0, [pc, #340]	; (80029c8 <initField+0x18c>)
 8002874:	f003 fc58 	bl	8006128 <__M_Error>
 8002878:	2300      	movs	r3, #0
 800287a:	e09d      	b.n	80029b8 <initField+0x17c>

//#ifdef USE_ENTITY_REGISTER
//    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && !(type == REG_TYPE || type == SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initField: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
//#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	891b      	ldrh	r3, [r3, #8]
 8002886:	847b      	strh	r3, [r7, #34]	; 0x22

#ifdef USE_ENTITY_POINTER
    const reg typeLen = (bitFlags & ENTITY_POINTER_MSK) ? sizeof(reg) : getMYCTypeLen(type);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <initField+0x70>
 8002892:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002896:	613b      	str	r3, [r7, #16]
    if(type < TYPE_ARRAY_LENGTH) {
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b11      	cmp	r3, #17
 800289c:	d804      	bhi.n	80028a8 <initField+0x6c>
        return typeLengthMappingArray[type];
 800289e:	4a4b      	ldr	r2, [pc, #300]	; (80029cc <initField+0x190>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	e002      	b.n	80028ae <initField+0x72>
    return 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <initField+0x72>
 80028ac:	2304      	movs	r3, #4
 80028ae:	61fb      	str	r3, [r7, #28]
#else
    const reg typeLen = getMYCTypeLen(type);
#endif /* USE_ENTITY_POINTER */

    M_Assert_BreakElseSaveCheck((fields_count > fieldNumber_readed), {
 80028b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d26b      	bcs.n	8002990 <initField+0x154>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	015b      	lsls	r3, r3, #5
 80028c0:	4413      	add	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <initField+0xae>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4619      	mov	r1, r3
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <initField+0x194>)
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	23e0      	movs	r3, #224	; 0xe0
 80028de:	4a39      	ldr	r2, [pc, #228]	; (80029c4 <initField+0x188>)
 80028e0:	483c      	ldr	r0, [pc, #240]	; (80029d4 <initField+0x198>)
 80028e2:	f003 fc21 	bl	8006128 <__M_Error>
 80028e6:	2300      	movs	r3, #0
 80028e8:	e066      	b.n	80029b8 <initField+0x17c>
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	611a      	str	r2, [r3, #16]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	615a      	str	r2, [r3, #20]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80028fc:	761a      	strb	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	4413      	add	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <initField+0xe2>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d925      	bls.n	8002960 <initField+0x124>
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <initField+0x124>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <initField+0xf8>
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b04      	cmp	r3, #4
 8002928:	d906      	bls.n	8002938 <initField+0xfc>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <initField+0xfc>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <initField+0xfe>
 8002938:	2300      	movs	r3, #0
 800293a:	b2d9      	uxtb	r1, r3
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <initField+0x19c>)
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	23e8      	movs	r3, #232	; 0xe8
 8002942:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <initField+0x188>)
 8002944:	4825      	ldr	r0, [pc, #148]	; (80029dc <initField+0x1a0>)
 8002946:	f003 fbef 	bl	8006128 <__M_Error>
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2200      	movs	r2, #0
 8002954:	615a      	str	r2, [r3, #20]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2200      	movs	r2, #0
 800295a:	761a      	strb	r2, [r3, #24]
 800295c:	2300      	movs	r3, #0
 800295e:	e02b      	b.n	80029b8 <initField+0x17c>
 8002960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <initField+0x134>
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	3319      	adds	r3, #25
 800296a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <initField+0x144>
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	2100      	movs	r1, #0
 800297a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800297c:	f006 ffa6 	bl	80098cc <memset>
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	3301      	adds	r3, #1
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	2301      	movs	r3, #1
 800298e:	e013      	b.n	80029b8 <initField+0x17c>
 8002990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	429a      	cmp	r2, r3
 8002996:	bf34      	ite	cc
 8002998:	2301      	movcc	r3, #1
 800299a:	2300      	movcs	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4619      	mov	r1, r3
 80029a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <initField+0x1a4>)
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	23de      	movs	r3, #222	; 0xde
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <initField+0x188>)
 80029b0:	480c      	ldr	r0, [pc, #48]	; (80029e4 <initField+0x1a8>)
 80029b2:	f003 fbb9 	bl	8006128 <__M_Error>
                                    ++fieldNumber_readed;
                                    (*fieldNumber) = fieldNumber_readed;
                                    return ENTITY_OK;
                                }, M_EMPTY, M_EMPTY, "initField: fieldNumber: &d,  is too long than allocated fields_count: %d", fieldNumber_readed, fields_count);

    return ENTITY_ERROR;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	0800eb18 	.word	0x0800eb18
 80029c4:	0800e6b8 	.word	0x0800e6b8
 80029c8:	0800eadc 	.word	0x0800eadc
 80029cc:	08010f7c 	.word	0x08010f7c
 80029d0:	0800eb58 	.word	0x0800eb58
 80029d4:	0800eb34 	.word	0x0800eb34
 80029d8:	0800ebc8 	.word	0x0800ebc8
 80029dc:	0800eb74 	.word	0x0800eb74
 80029e0:	0800ec4c 	.word	0x0800ec4c
 80029e4:	0800ec04 	.word	0x0800ec04

080029e8 <initFieldArray>:

/// init field-array
int initFieldArray(Entity* const entityInst, reg* const fieldNumber, TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const int arrayLen, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr, const int startNum)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b094      	sub	sp, #80	; 0x50
 80029ec:	af04      	add	r7, sp, #16
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL) || (arrayLen == 0), M_EMPTY, return ENTITY_ERROR, "initFieldArray: No valid input");
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <initFieldArray+0x20>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <initFieldArray+0x20>
 8002a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d116      	bne.n	8002a36 <initFieldArray+0x4e>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <initFieldArray+0x32>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <initFieldArray+0x32>
 8002a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <initFieldArray+0x36>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <initFieldArray+0x38>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	b2d9      	uxtb	r1, r3
 8002a22:	4b85      	ldr	r3, [pc, #532]	; (8002c38 <initFieldArray+0x250>)
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f240 1307 	movw	r3, #263	; 0x107
 8002a2a:	4a84      	ldr	r2, [pc, #528]	; (8002c3c <initFieldArray+0x254>)
 8002a2c:	4884      	ldr	r0, [pc, #528]	; (8002c40 <initFieldArray+0x258>)
 8002a2e:	f003 fb7b 	bl	8006128 <__M_Error>
 8002a32:	2300      	movs	r3, #0
 8002a34:	e0fc      	b.n	8002c30 <initFieldArray+0x248>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && (type != REG_TYPE || type != SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initFieldArray: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d022      	beq.n	8002a86 <initFieldArray+0x9e>
 8002a40:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d103      	bne.n	8002a50 <initFieldArray+0x68>
 8002a48:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a4c:	2b11      	cmp	r3, #17
 8002a4e:	d01a      	beq.n	8002a86 <initFieldArray+0x9e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <initFieldArray+0x86>
 8002a5a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d103      	bne.n	8002a6a <initFieldArray+0x82>
 8002a62:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a66:	2b11      	cmp	r3, #17
 8002a68:	d001      	beq.n	8002a6e <initFieldArray+0x86>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <initFieldArray+0x88>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	b2d9      	uxtb	r1, r3
 8002a72:	4b74      	ldr	r3, [pc, #464]	; (8002c44 <initFieldArray+0x25c>)
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002a7a:	4a70      	ldr	r2, [pc, #448]	; (8002c3c <initFieldArray+0x254>)
 8002a7c:	4872      	ldr	r0, [pc, #456]	; (8002c48 <initFieldArray+0x260>)
 8002a7e:	f003 fb53 	bl	8006128 <__M_Error>
 8002a82:	2300      	movs	r3, #0
 8002a84:	e0d4      	b.n	8002c30 <initFieldArray+0x248>
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	891b      	ldrh	r3, [r3, #8]
 8002a90:	86fb      	strh	r3, [r7, #54]	; 0x36

#ifdef USE_ENTITY_POINTER
	const reg typeLen = (bitFlags & ENTITY_POINTER_MSK) ? sizeof(reg) : getMYCTypeLen(type);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10c      	bne.n	8002ab6 <initFieldArray+0xce>
 8002a9c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002aa0:	623b      	str	r3, [r7, #32]
    if(type < TYPE_ARRAY_LENGTH) {
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	2b11      	cmp	r3, #17
 8002aa6:	d804      	bhi.n	8002ab2 <initFieldArray+0xca>
        return typeLengthMappingArray[type];
 8002aa8:	4a68      	ldr	r2, [pc, #416]	; (8002c4c <initFieldArray+0x264>)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	e002      	b.n	8002ab8 <initFieldArray+0xd0>
    return 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e000      	b.n	8002ab8 <initFieldArray+0xd0>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
#else
	const reg typeLen = getMYCTypeLen(type);
#endif /* USE_ENTITY_POINTER */

    const reg need_count = (fieldNumber_readed + arrayLen);
 8002aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002abe:	4413      	add	r3, r2
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    M_Assert_BreakSaveCheck(fields_count < need_count, M_EMPTY, return ENTITY_ERROR, "initFieldArray: need fields Number: &d,  is too long than allocated fields_count: %d", need_count, fields_count);
 8002ac2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d915      	bls.n	8002af6 <initFieldArray+0x10e>
 8002aca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	bf8c      	ite	hi
 8002ad2:	2301      	movhi	r3, #1
 8002ad4:	2300      	movls	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	4b5b      	ldr	r3, [pc, #364]	; (8002c50 <initFieldArray+0x268>)
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f240 1317 	movw	r3, #279	; 0x117
 8002aea:	4a54      	ldr	r2, [pc, #336]	; (8002c3c <initFieldArray+0x254>)
 8002aec:	4859      	ldr	r0, [pc, #356]	; (8002c54 <initFieldArray+0x26c>)
 8002aee:	f003 fb1b 	bl	8006128 <__M_Error>
 8002af2:	2300      	movs	r3, #0
 8002af4:	e09c      	b.n	8002c30 <initFieldArray+0x248>

	char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	721a      	strb	r2, [r3, #8]
	bitFlags |= ENTITY_ARRAY_MSK;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < arrayLen; ++i) {
 8002b0e:	2300      	movs	r3, #0
 8002b10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b12:	e079      	b.n	8002c08 <initFieldArray+0x220>
		EntityField* const    field = &entityInst->fields[fieldNumber_readed];
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	015b      	lsls	r3, r3, #5
 8002b1c:	4413      	add	r3, r2
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
		M_Assert_BreakSaveCheck((field == NULLPTR(EntityField *)), M_EMPTY, return ENTITY_ERROR, "initFieldArray: No valid field");
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d110      	bne.n	8002b48 <initFieldArray+0x160>
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <initFieldArray+0x270>)
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f240 131d 	movw	r3, #285	; 0x11d
 8002b3c:	4a3f      	ldr	r2, [pc, #252]	; (8002c3c <initFieldArray+0x254>)
 8002b3e:	4847      	ldr	r0, [pc, #284]	; (8002c5c <initFieldArray+0x274>)
 8002b40:	f003 faf2 	bl	8006128 <__M_Error>
 8002b44:	2300      	movs	r3, #0
 8002b46:	e073      	b.n	8002c30 <initFieldArray+0x248>

		field->bitFlags   = bitFlags;
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]
		field->shift      = shift;
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	615a      	str	r2, [r3, #20]
		field->type       = type;
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8002b5a:	761a      	strb	r2, [r3, #24]

		// check pointer
		const void* const ptr = entityInst->pointer + shift;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
		M_Assert_BreakSaveCheck(
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <initFieldArray+0x194>
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d926      	bls.n	8002bc0 <initFieldArray+0x1d8>
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d021      	beq.n	8002bc0 <initFieldArray+0x1d8>
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <initFieldArray+0x1aa>
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d906      	bls.n	8002b96 <initFieldArray+0x1ae>
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <initFieldArray+0x1ae>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <initFieldArray+0x1b0>
 8002b96:	2300      	movs	r3, #0
 8002b98:	b2d9      	uxtb	r1, r3
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <initFieldArray+0x278>)
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f240 1325 	movw	r3, #293	; 0x125
 8002ba2:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <initFieldArray+0x254>)
 8002ba4:	482f      	ldr	r0, [pc, #188]	; (8002c64 <initFieldArray+0x27c>)
 8002ba6:	f003 fabf 	bl	8006128 <__M_Error>
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	761a      	strb	r2, [r3, #24]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e037      	b.n	8002c30 <initFieldArray+0x248>
						return ENTITY_ERROR;
		}, "initFieldArray: Alignment error or no valid pointer!!!");


		// copy array descr
		if(descr) {
 8002bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <initFieldArray+0x1f2>
			sprintf(str, "%s%d", descr, (i + startNum));
 8002bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bca:	4413      	add	r3, r2
 8002bcc:	f107 0010 	add.w	r0, r7, #16
 8002bd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bd2:	4925      	ldr	r1, [pc, #148]	; (8002c68 <initFieldArray+0x280>)
 8002bd4:	f008 f842 	bl	800ac5c <siprintf>
 8002bd8:	e008      	b.n	8002bec <initFieldArray+0x204>
		} else {
			sprintf(str, ":[%d]", (i + startNum));
 8002bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bde:	441a      	add	r2, r3
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	4921      	ldr	r1, [pc, #132]	; (8002c6c <initFieldArray+0x284>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f008 f838 	bl	800ac5c <siprintf>
		}
		memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	3319      	adds	r3, #25
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	601a      	str	r2, [r3, #0]

		shift += typeLen;
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	4413      	add	r3, r2
 8002bfa:	603b      	str	r3, [r7, #0]
		++fieldNumber_readed;
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfe:	3301      	adds	r3, #1
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = 0; i < arrayLen; ++i) {
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	3301      	adds	r3, #1
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	db81      	blt.n	8002b14 <initFieldArray+0x12c>
	}

	if(field_ptr) {
 8002c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <initFieldArray+0x240>
		memset(field_ptr, 0, (arrayLen * typeLen));
 8002c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2100      	movs	r1, #0
 8002c22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002c24:	f006 fe52 	bl	80098cc <memset>
	}

	(*fieldNumber) = fieldNumber_readed;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c2c:	601a      	str	r2, [r3, #0]
	return ENTITY_OK;
 8002c2e:	2301      	movs	r3, #1
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3740      	adds	r7, #64	; 0x40
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	0800ece4 	.word	0x0800ece4
 8002c3c:	0800e6b8 	.word	0x0800e6b8
 8002c40:	0800ec98 	.word	0x0800ec98
 8002c44:	0800ed50 	.word	0x0800ed50
 8002c48:	0800ed04 	.word	0x0800ed04
 8002c4c:	08010f7c 	.word	0x08010f7c
 8002c50:	0800edc8 	.word	0x0800edc8
 8002c54:	0800edac 	.word	0x0800edac
 8002c58:	0800ee20 	.word	0x0800ee20
 8002c5c:	0800eb34 	.word	0x0800eb34
 8002c60:	0800ee40 	.word	0x0800ee40
 8002c64:	0800eb74 	.word	0x0800eb74
 8002c68:	0800ee78 	.word	0x0800ee78
 8002c6c:	0800ee80 	.word	0x0800ee80

08002c70 <foreachEntities>:
 *  foreach entities
 * **********************************************************************************************************************************
 */

int foreachEntities(int (* const predicate)(reg entityNumber, Entity* entity, reg fieldNumber, EntityField* field, void* val, PREPROCESSOR_CTX_TYPE(ctx)), PREPROCESSOR_CTX_TYPE(ctx))
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b08d      	sub	sp, #52	; 0x34
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
    M_Assert_BreakSaveCheck((predicate == NULLPTR(TYPEOF_DATA(predicate))), M_EMPTY, return ENTITY_ERROR, "foreachEntities: no valid function");
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d110      	bne.n	8002ca2 <foreachEntities+0x32>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <foreachEntities+0xb4>)
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8002c96:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <foreachEntities+0xb8>)
 8002c98:	4824      	ldr	r0, [pc, #144]	; (8002d2c <foreachEntities+0xbc>)
 8002c9a:	f003 fa45 	bl	8006128 <__M_Error>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e03c      	b.n	8002d1c <foreachEntities+0xac>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <foreachEntities+0xc0>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61fb      	str	r3, [r7, #28]

    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i != entities_count; ++i) {
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cac:	e031      	b.n	8002d12 <foreachEntities+0xa2>
        Entity* const entity = entityInfo.entities[i]; // move to cash
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <foreachEntities+0xc0>)
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	61bb      	str	r3, [r7, #24]
        const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	891b      	ldrh	r3, [r3, #8]
 8002cc0:	82fb      	strh	r3, [r7, #22]

        for(TYPEOF_STRUCT(Entity, fields_count) j = 0; j != fields_count; ++j) {
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	847b      	strh	r3, [r7, #34]	; 0x22
 8002cc6:	e01d      	b.n	8002d04 <foreachEntities+0x94>
            EntityField* const    field = &entity->fields[j];   // move to cash
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cce:	015b      	lsls	r3, r3, #5
 8002cd0:	4413      	add	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
            void* ptr = (entity->pointer + field->shift);       // move to cash
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4413      	add	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

            if(predicate(i, entity, j, field, ptr, ctx)) {
 8002ce0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	687c      	ldr	r4, [r7, #4]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	69b9      	ldr	r1, [r7, #24]
 8002cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cf2:	47a0      	blx	r4
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <foreachEntities+0x8e>
                return ENTITY_OK;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00e      	b.n	8002d1c <foreachEntities+0xac>
        for(TYPEOF_STRUCT(Entity, fields_count) j = 0; j != fields_count; ++j) {
 8002cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d00:	3301      	adds	r3, #1
 8002d02:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1dd      	bne.n	8002cc8 <foreachEntities+0x58>
    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i != entities_count; ++i) {
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	3301      	adds	r3, #1
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d1c9      	bne.n	8002cae <foreachEntities+0x3e>
            }

        }
    }
    return ENTITY_OK;
 8002d1a:	2301      	movs	r3, #1
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	372c      	adds	r7, #44	; 0x2c
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}
 8002d24:	0800f200 	.word	0x0800f200
 8002d28:	0800e6b8 	.word	0x0800e6b8
 8002d2c:	0800f1d0 	.word	0x0800f1d0
 8002d30:	20000304 	.word	0x20000304

08002d34 <readEntitiesSizes>:
}

#endif /* USE_ENTITY_PING */

int readEntitiesSizes(u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: No allocated entities or invalid input");
 8002d40:	4b44      	ldr	r3, [pc, #272]	; (8002e54 <readEntitiesSizes+0x120>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <readEntitiesSizes+0x20>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <readEntitiesSizes+0x20>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <readEntitiesSizes+0x4e>
 8002d54:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <readEntitiesSizes+0x120>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <readEntitiesSizes+0x34>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <readEntitiesSizes+0x34>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <readEntitiesSizes+0x38>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <readEntitiesSizes+0x3a>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	b2d9      	uxtb	r1, r3
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <readEntitiesSizes+0x124>)
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	231a      	movs	r3, #26
 8002d76:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <readEntitiesSizes+0x128>)
 8002d78:	4839      	ldr	r0, [pc, #228]	; (8002e60 <readEntitiesSizes+0x12c>)
 8002d7a:	f003 f9d5 	bl	8006128 <__M_Error>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e064      	b.n	8002e4c <readEntitiesSizes+0x118>
    ENTITY_DBG_ASSERT_BUF(maxOutBufferSize < (8 + TYPE_ARRAY_LENGTH), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: sizes read more than buffer");
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b19      	cmp	r3, #25
 8002d86:	d80f      	bhi.n	8002da8 <readEntitiesSizes+0x74>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b19      	cmp	r3, #25
 8002d8c:	bf94      	ite	ls
 8002d8e:	2301      	movls	r3, #1
 8002d90:	2300      	movhi	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	4619      	mov	r1, r3
 8002d96:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <readEntitiesSizes+0x130>)
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	231b      	movs	r3, #27
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <readEntitiesSizes+0x128>)
 8002d9e:	4832      	ldr	r0, [pc, #200]	; (8002e68 <readEntitiesSizes+0x134>)
 8002da0:	f003 f9c2 	bl	8006128 <__M_Error>
 8002da4:	2300      	movs	r3, #0
 8002da6:	e051      	b.n	8002e4c <readEntitiesSizes+0x118>

    reg pos = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

    // main sizes -----------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_OK;                              // OK byte
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	617a      	str	r2, [r7, #20]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	617a      	str	r2, [r7, #20]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	701a      	strb	r2, [r3, #0]

    // entities sizes -------------------------------------------------------------------------------------
    outputData[pos++] = ENTITIES_SIZEOF;                        // entities count sizeof
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	617a      	str	r2, [r7, #20]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	701a      	strb	r2, [r3, #0]

    // fields sizes --------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_FIELD_SIZEOF;                    // fields count sizeof
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	617a      	str	r2, [r7, #20]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]

    outputData[pos++] = SIZEOF_STRUCT(EntityField, bitFlags);   // fields bitFlags sizeof
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	617a      	str	r2, [r7, #20]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	2204      	movs	r2, #4
 8002df0:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = SIZEOF_STRUCT(EntityField, shift);      // fields shift sizeof
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	617a      	str	r2, [r7, #20]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = 1;                                      // fields type sizeof
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	617a      	str	r2, [r7, #20]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4413      	add	r3, r2
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]

    // system types sizes --------------------------------------------------------------------------------
    outputData[pos++] = TYPE_ARRAY_LENGTH;                      // size array types
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	617a      	str	r2, [r7, #20]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	2212      	movs	r2, #18
 8002e1a:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e00d      	b.n	8002e3e <readEntitiesSizes+0x10a>
        outputData[pos++] = typeLengthMappingArray[i];          // copy array types
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <readEntitiesSizes+0x138>)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	617a      	str	r2, [r7, #20]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	b2ca      	uxtb	r2, r1
 8002e36:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b11      	cmp	r3, #17
 8002e42:	d9ee      	bls.n	8002e22 <readEntitiesSizes+0xee>
    }

    (*size) = pos;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002e4a:	2301      	movs	r3, #1
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000304 	.word	0x20000304
 8002e58:	0800f2c8 	.word	0x0800f2c8
 8002e5c:	0800f224 	.word	0x0800f224
 8002e60:	0800f258 	.word	0x0800f258
 8002e64:	0800f330 	.word	0x0800f330
 8002e68:	0800f304 	.word	0x0800f304
 8002e6c:	08010f7c 	.word	0x08010f7c

08002e70 <readEntitiesDescriptions>:

int readEntitiesDescriptions(const TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber, TYPEOF_STRUCT(EntityInfo, entities_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[0].descr, ... entities[entities_count].descr}
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08e      	sub	sp, #56	; 0x38
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (2 + ENTITIES_SIZEOF)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesDescriptions: No allocated entities or invalid input");
 8002e7e:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <readEntitiesDescriptions+0x160>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <readEntitiesDescriptions+0x28>
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d905      	bls.n	8002e98 <readEntitiesDescriptions+0x28>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <readEntitiesDescriptions+0x28>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d119      	bne.n	8002ecc <readEntitiesDescriptions+0x5c>
 8002e98:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <readEntitiesDescriptions+0x160>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <readEntitiesDescriptions+0x42>
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d905      	bls.n	8002eb2 <readEntitiesDescriptions+0x42>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <readEntitiesDescriptions+0x42>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <readEntitiesDescriptions+0x46>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <readEntitiesDescriptions+0x48>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	b2d9      	uxtb	r1, r3
 8002eba:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <readEntitiesDescriptions+0x164>)
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	233b      	movs	r3, #59	; 0x3b
 8002ec0:	4a45      	ldr	r2, [pc, #276]	; (8002fd8 <readEntitiesDescriptions+0x168>)
 8002ec2:	4846      	ldr	r0, [pc, #280]	; (8002fdc <readEntitiesDescriptions+0x16c>)
 8002ec4:	f003 f930 	bl	8006128 <__M_Error>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e07d      	b.n	8002fc8 <readEntitiesDescriptions+0x158>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002ecc:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <readEntitiesDescriptions+0x160>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24

    if(startEntityNumber < entities_count) {
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d26e      	bcs.n	8002fb8 <readEntitiesDescriptions+0x148>
        reg pos = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c

        outputData[pos++] = ENTITY_OK;
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(EntityInfo, entities_count) tmp = (entities_count - startEntityNumber);
 8002efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	623b      	str	r3, [r7, #32]
        len = MIN(tmp, len);
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	4293      	cmp	r3, r2
 8002f08:	bf28      	it	cs
 8002f0a:	4613      	movcs	r3, r2
 8002f0c:	60bb      	str	r3, [r7, #8]
        //#else
        //        len &= 0xFFFFUL;
        //        ENTITY_BYTE_CPY(ENTITIES_SIZEOF, (u8*)&len, &outputData[pos]);
        //        pos += ENTITIES_SIZEOF;
        //#endif /* MAX_NUBER_OF_ENTITIES < 256 */
        outputData[pos++] = (u8)(len & 0xFFU); // support on old version (this is glitch!!!)
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
        //---------------------------================================----------------------------------==================================-----------------------------------================================---------------------------===========================---------------------------=========================------------------------
        len += startEntityNumber;
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]

        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2a:	e03c      	b.n	8002fa6 <readEntitiesDescriptions+0x136>

            ENTITY_DBG_ASSERT_BUF( (pos + ENTITY_DESCRIPTION_SIZE) > maxOutBufferSize, M_EMPTY, {
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	3304      	adds	r3, #4
 8002f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d210      	bcs.n	8002f58 <readEntitiesDescriptions+0xe8>
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	3304      	adds	r3, #4
 8002f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	bf34      	ite	cc
 8002f40:	2301      	movcc	r3, #1
 8002f42:	2300      	movcs	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <readEntitiesDescriptions+0x170>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2355      	movs	r3, #85	; 0x55
 8002f4e:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <readEntitiesDescriptions+0x168>)
 8002f50:	4824      	ldr	r0, [pc, #144]	; (8002fe4 <readEntitiesDescriptions+0x174>)
 8002f52:	f003 f8e9 	bl	8006128 <__M_Error>
 8002f56:	e030      	b.n	8002fba <readEntitiesDescriptions+0x14a>
                                       goto error;
                                   }, "readEntitiesDescriptions: description read size more than buffer");


            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)entityInfo.entities[i]->descr, &outputData[pos]);
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <readEntitiesDescriptions+0x160>)
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1d1a      	adds	r2, r3, #4
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	440b      	add	r3, r1
 8002f6c:	2104      	movs	r1, #4
 8002f6e:	61f9      	str	r1, [r7, #28]
 8002f70:	61ba      	str	r2, [r7, #24]
 8002f72:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <readEntitiesDescriptions+0x126>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d104      	bne.n	8002f8a <readEntitiesDescriptions+0x11a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e006      	b.n	8002f98 <readEntitiesDescriptions+0x128>
    default: memcpy(to, from, n); break;
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f006 fc74 	bl	800987c <memcpy>
 8002f94:	e000      	b.n	8002f98 <readEntitiesDescriptions+0x128>
    case 0: break;
 8002f96:	bf00      	nop
}
 8002f98:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d3be      	bcc.n	8002f2c <readEntitiesDescriptions+0xbc>
        }

        (*size) = pos;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb2:	601a      	str	r2, [r3, #0]
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e007      	b.n	8002fc8 <readEntitiesDescriptions+0x158>
        goto error;
 8002fb8:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3730      	adds	r7, #48	; 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000304 	.word	0x20000304
 8002fd4:	0800f400 	.word	0x0800f400
 8002fd8:	0800f224 	.word	0x0800f224
 8002fdc:	0800f360 	.word	0x0800f360
 8002fe0:	0800f478 	.word	0x0800f478
 8002fe4:	0800f444 	.word	0x0800f444

08002fe8 <readEntityFields>:

int readEntityFields(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) startFieldNumber, TYPEOF_STRUCT(Entity, fields_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[entityNum].fields[startFieldNum], ... entities[num].fields[entities[num].fields_count]}
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b096      	sub	sp, #88	; 0x58
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	817b      	strh	r3, [r7, #10]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	813b      	strh	r3, [r7, #8]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITY_FIELD_SIZEOF << 1))) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntityFields: No allocated entities or invalid input");
 8002ffa:	4b85      	ldr	r3, [pc, #532]	; (8003210 <readEntityFields+0x228>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <readEntityFields+0x2c>
 8003002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003004:	2b02      	cmp	r3, #2
 8003006:	d905      	bls.n	8003014 <readEntityFields+0x2c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <readEntityFields+0x2c>
 800300e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003010:	2b00      	cmp	r3, #0
 8003012:	d119      	bne.n	8003048 <readEntityFields+0x60>
 8003014:	4b7e      	ldr	r3, [pc, #504]	; (8003210 <readEntityFields+0x228>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <readEntityFields+0x46>
 800301c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301e:	2b02      	cmp	r3, #2
 8003020:	d905      	bls.n	800302e <readEntityFields+0x46>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <readEntityFields+0x46>
 8003028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <readEntityFields+0x4a>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <readEntityFields+0x4c>
 8003032:	2300      	movs	r3, #0
 8003034:	b2d9      	uxtb	r1, r3
 8003036:	4b77      	ldr	r3, [pc, #476]	; (8003214 <readEntityFields+0x22c>)
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2371      	movs	r3, #113	; 0x71
 800303c:	4a76      	ldr	r2, [pc, #472]	; (8003218 <readEntityFields+0x230>)
 800303e:	4877      	ldr	r0, [pc, #476]	; (800321c <readEntityFields+0x234>)
 8003040:	f003 f872 	bl	8006128 <__M_Error>
 8003044:	2300      	movs	r3, #0
 8003046:	e0df      	b.n	8003208 <readEntityFields+0x220>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003048:	4b71      	ldr	r3, [pc, #452]	; (8003210 <readEntityFields+0x228>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
    const Entity* const entity = entityInfo.entities[entityNumber];
 800304e:	4b70      	ldr	r3, [pc, #448]	; (8003210 <readEntityFields+0x228>)
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	643b      	str	r3, [r7, #64]	; 0x40
    const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 800305c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305e:	891b      	ldrh	r3, [r3, #8]
 8003060:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003066:	429a      	cmp	r2, r3
 8003068:	f080 80c6 	bcs.w	80031f8 <readEntityFields+0x210>
 800306c:	897a      	ldrh	r2, [r7, #10]
 800306e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003070:	429a      	cmp	r2, r3
 8003072:	f080 80c1 	bcs.w	80031f8 <readEntityFields+0x210>
        reg pos = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	64fb      	str	r3, [r7, #76]	; 0x4c

        outputData[pos++] = ENTITY_OK;
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]

#if (MAX_NUBER_OF_FIELDS < 256U)
        outputData[pos++] = (u8)(startFieldNumber & 0xFFU);                             /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	897a      	ldrh	r2, [r7, #10]
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(Entity, fields_count) tmp = (fields_count - startFieldNumber);
 8003098:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800309a:	897b      	ldrh	r3, [r7, #10]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	87bb      	strh	r3, [r7, #60]	; 0x3c
        len = MIN(tmp, len);
 80030a0:	893a      	ldrh	r2, [r7, #8]
 80030a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bf28      	it	cs
 80030a8:	4613      	movcs	r3, r2
 80030aa:	813b      	strh	r3, [r7, #8]
        outputData[pos++] = (u8)(len & 0xFFU);
 80030ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	893a      	ldrh	r2, [r7, #8]
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
        ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, (u8*)&len, &outputData[pos]);
        pos += ENTITY_FIELD_SIZEOF;

#endif /* MAX_NUBER_OF_FIELDS < 256 */

        len += startFieldNumber;
 80030bc:	893a      	ldrh	r2, [r7, #8]
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	4413      	add	r3, r2
 80030c2:	813b      	strh	r3, [r7, #8]

        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 80030c4:	897b      	ldrh	r3, [r7, #10]
 80030c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80030ca:	e089      	b.n	80031e0 <readEntityFields+0x1f8>
            const EntityField* const field = &entity->fields[i];
 80030cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80030d4:	015b      	lsls	r3, r3, #5
 80030d6:	4413      	add	r3, r2
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38

            ENTITY_DBG_ASSERT_BUF( ((pos + (sizeof(field->bitFlags) + sizeof(field->shift) + 1 + ENTITY_DESCRIPTION_SIZE)) > maxOutBufferSize), M_EMPTY, {
 80030da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030dc:	330d      	adds	r3, #13
 80030de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d210      	bcs.n	8003106 <readEntityFields+0x11e>
 80030e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e6:	330d      	adds	r3, #13
 80030e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030ea:	429a      	cmp	r2, r3
 80030ec:	bf34      	ite	cc
 80030ee:	2301      	movcc	r3, #1
 80030f0:	2300      	movcs	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4619      	mov	r1, r3
 80030f6:	4b4a      	ldr	r3, [pc, #296]	; (8003220 <readEntityFields+0x238>)
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2395      	movs	r3, #149	; 0x95
 80030fc:	4a46      	ldr	r2, [pc, #280]	; (8003218 <readEntityFields+0x230>)
 80030fe:	4849      	ldr	r0, [pc, #292]	; (8003224 <readEntityFields+0x23c>)
 8003100:	f003 f812 	bl	8006128 <__M_Error>
 8003104:	e079      	b.n	80031fa <readEntityFields+0x212>

            //            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
            //            pos += ENTITY_DESCRIPTION_SIZE;
            //-----------------=============================-----------------------------------===========================-----------------------------=================================-------------------------------===========================-------------------======================
            // this is glitch
            ENTITY_BYTE_CPY(1, (u8 *)&field->bitFlags, &outputData[pos]);
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	f103 0210 	add.w	r2, r3, #16
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	440b      	add	r3, r1
 8003112:	2101      	movs	r1, #1
 8003114:	61f9      	str	r1, [r7, #28]
 8003116:	61ba      	str	r2, [r7, #24]
 8003118:	617b      	str	r3, [r7, #20]
    switch (n) {
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <readEntityFields+0x154>
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d104      	bne.n	8003130 <readEntityFields+0x148>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e006      	b.n	800313e <readEntityFields+0x156>
    default: memcpy(to, from, n); break;
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	6978      	ldr	r0, [r7, #20]
 8003136:	f006 fba1 	bl	800987c <memcpy>
 800313a:	e000      	b.n	800313e <readEntityFields+0x156>
    case 0: break;
 800313c:	bf00      	nop
}
 800313e:	bf00      	nop
            pos += 1;
 8003140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003142:	3301      	adds	r3, #1
 8003144:	64fb      	str	r3, [r7, #76]	; 0x4c

            ENTITY_BYTE_CPY(2, (u8 *)&field->shift, &outputData[pos]);
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	f103 0214 	add.w	r2, r3, #20
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	440b      	add	r3, r1
 8003152:	2102      	movs	r1, #2
 8003154:	62b9      	str	r1, [r7, #40]	; 0x28
 8003156:	627a      	str	r2, [r7, #36]	; 0x24
 8003158:	623b      	str	r3, [r7, #32]
    switch (n) {
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <readEntityFields+0x194>
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	2b01      	cmp	r3, #1
 8003164:	d104      	bne.n	8003170 <readEntityFields+0x188>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e006      	b.n	800317e <readEntityFields+0x196>
    default: memcpy(to, from, n); break;
 8003170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003172:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003174:	6a38      	ldr	r0, [r7, #32]
 8003176:	f006 fb81 	bl	800987c <memcpy>
 800317a:	e000      	b.n	800317e <readEntityFields+0x196>
    case 0: break;
 800317c:	bf00      	nop
}
 800317e:	bf00      	nop
            pos += 2;
 8003180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003182:	3302      	adds	r3, #2
 8003184:	64fb      	str	r3, [r7, #76]	; 0x4c

            outputData[pos++] = (field->type & 0xFFU);
 8003186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003192:	7e12      	ldrb	r2, [r2, #24]
 8003194:	701a      	strb	r2, [r3, #0]

            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	f103 0219 	add.w	r2, r3, #25
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a0:	440b      	add	r3, r1
 80031a2:	2104      	movs	r1, #4
 80031a4:	6379      	str	r1, [r7, #52]	; 0x34
 80031a6:	633a      	str	r2, [r7, #48]	; 0x30
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <readEntityFields+0x1e4>
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d104      	bne.n	80031c0 <readEntityFields+0x1d8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	781a      	ldrb	r2, [r3, #0]
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e006      	b.n	80031ce <readEntityFields+0x1e6>
    default: memcpy(to, from, n); break;
 80031c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031c6:	f006 fb59 	bl	800987c <memcpy>
 80031ca:	e000      	b.n	80031ce <readEntityFields+0x1e6>
    case 0: break;
 80031cc:	bf00      	nop
}
 80031ce:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 80031d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d2:	3304      	adds	r3, #4
 80031d4:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 80031d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031da:	3301      	adds	r3, #1
 80031dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80031e0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	f4ff af70 	bcc.w	80030cc <readEntityFields+0xe4>
            //------------------------------=========================================--------------------------------------===================================--------------------------------------=============================---------------------------------========================

        }

        (*size) = pos;
 80031ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031f0:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 80031f2:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e007      	b.n	8003208 <readEntityFields+0x220>
        goto error;
 80031f8:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8003200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3750      	adds	r7, #80	; 0x50
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000304 	.word	0x20000304
 8003214:	0800f568 	.word	0x0800f568
 8003218:	0800f224 	.word	0x0800f224
 800321c:	0800f4bc 	.word	0x0800f4bc
 8003220:	0800f610 	.word	0x0800f610
 8003224:	0800f5a4 	.word	0x0800f5a4

08003228 <readFieldValue>:
/* ******************************************************************************************************************
 * READ one field value
 *
 */
int readFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{ //send {0x01 , prt + 0, ... , ptr + getTypeLen(entities[no].fields[fieldNo].type)}
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b0a5      	sub	sp, #148	; 0x94
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	460b      	mov	r3, r1
 8003236:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 2) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readFieldValue: No allocated entities or invalid input");
 8003238:	4b95      	ldr	r3, [pc, #596]	; (8003490 <readFieldValue+0x268>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <readFieldValue+0x2c>
 8003240:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003244:	2b01      	cmp	r3, #1
 8003246:	d905      	bls.n	8003254 <readFieldValue+0x2c>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <readFieldValue+0x2c>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11a      	bne.n	800328a <readFieldValue+0x62>
 8003254:	4b8e      	ldr	r3, [pc, #568]	; (8003490 <readFieldValue+0x268>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <readFieldValue+0x48>
 800325c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003260:	2b01      	cmp	r3, #1
 8003262:	d905      	bls.n	8003270 <readFieldValue+0x48>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <readFieldValue+0x48>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <readFieldValue+0x4c>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <readFieldValue+0x4e>
 8003274:	2300      	movs	r3, #0
 8003276:	b2d9      	uxtb	r1, r3
 8003278:	4b86      	ldr	r3, [pc, #536]	; (8003494 <readFieldValue+0x26c>)
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	23cb      	movs	r3, #203	; 0xcb
 800327e:	4a86      	ldr	r2, [pc, #536]	; (8003498 <readFieldValue+0x270>)
 8003280:	4886      	ldr	r0, [pc, #536]	; (800349c <readFieldValue+0x274>)
 8003282:	f002 ff51 	bl	8006128 <__M_Error>
 8003286:	2300      	movs	r3, #0
 8003288:	e156      	b.n	8003538 <readFieldValue+0x310>

    Entity*         const       entity  = entityInfo.entities[entityNumber];
 800328a:	4b81      	ldr	r3, [pc, #516]	; (8003490 <readFieldValue+0x268>)
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    EntityField*    const       field   = &entity->fields[fieldNumber];
 800329a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	897b      	ldrh	r3, [r7, #10]
 80032a2:	015b      	lsls	r3, r3, #5
 80032a4:	4413      	add	r3, r2
 80032a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 80032aa:	4b79      	ldr	r3, [pc, #484]	; (8003490 <readFieldValue+0x268>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80032b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b4:	891b      	ldrh	r3, [r3, #8]
 80032b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032be:	429a      	cmp	r2, r3
 80032c0:	f080 8132 	bcs.w	8003528 <readFieldValue+0x300>
 80032c4:	897a      	ldrh	r2, [r7, #10]
 80032c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80032ca:	429a      	cmp	r2, r3
 80032cc:	f080 812c 	bcs.w	8003528 <readFieldValue+0x300>
        const u8        type    = field->type;
 80032d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032d4:	7e1b      	ldrb	r3, [r3, #24]
 80032d6:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
        const reg       typeLen = getMYCTypeLen(type);
 80032da:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80032de:	667b      	str	r3, [r7, #100]	; 0x64
    if(type < TYPE_ARRAY_LENGTH) {
 80032e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e2:	2b11      	cmp	r3, #17
 80032e4:	d804      	bhi.n	80032f0 <readFieldValue+0xc8>
        return typeLengthMappingArray[type];
 80032e6:	4a6e      	ldr	r2, [pc, #440]	; (80034a0 <readFieldValue+0x278>)
 80032e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	e000      	b.n	80032f2 <readFieldValue+0xca>
    return 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	677b      	str	r3, [r7, #116]	; 0x74
        void*     ptr     = (entity->pointer + field->shift);
 80032f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	4413      	add	r3, r2
 8003302:	673b      	str	r3, [r7, #112]	; 0x70

        reg pos = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	66fb      	str	r3, [r7, #108]	; 0x6c

        outputData[pos++] = ENTITY_OK;
 8003308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = type;    /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8003324:	701a      	strb	r2, [r3, #0]

        ENTITY_DBG_ASSERT_BUF(((pos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8003326:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332a:	4413      	add	r3, r2
 800332c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003330:	429a      	cmp	r2, r3
 8003332:	d212      	bcs.n	800335a <readFieldValue+0x132>
 8003334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003338:	4413      	add	r3, r2
 800333a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800333e:	429a      	cmp	r2, r3
 8003340:	bf34      	ite	cc
 8003342:	2301      	movcc	r3, #1
 8003344:	2300      	movcs	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	4b56      	ldr	r3, [pc, #344]	; (80034a4 <readFieldValue+0x27c>)
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	23dd      	movs	r3, #221	; 0xdd
 8003350:	4a51      	ldr	r2, [pc, #324]	; (8003498 <readFieldValue+0x270>)
 8003352:	4855      	ldr	r0, [pc, #340]	; (80034a8 <readFieldValue+0x280>)
 8003354:	f002 fee8 	bl	8006128 <__M_Error>
 8003358:	e0e7      	b.n	800352a <readFieldValue+0x302>
                                  goto error;
                              }, "readFieldValue: field read size more than buffer");

        proceedReadEntity(field->bitFlags, ptr, &outputData[pos], typeLen);
 800335a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003364:	440b      	add	r3, r1
 8003366:	663a      	str	r2, [r7, #96]	; 0x60
 8003368:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800336a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800336c:	65bb      	str	r3, [r7, #88]	; 0x58
 800336e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003370:	657b      	str	r3, [r7, #84]	; 0x54
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d033      	beq.n	80033e4 <readFieldValue+0x1bc>
 800337c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02e      	beq.n	80033e4 <readFieldValue+0x1bc>
										const void* reg_ptr_from = ptr ? (const void*) (* REG_TYPE_DC(ptr)) : 0;
 8003386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <readFieldValue+0x16a>
 800338c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	e000      	b.n	8003394 <readFieldValue+0x16c>
 8003392:	2300      	movs	r3, #0
 8003394:	653b      	str	r3, [r7, #80]	; 0x50
										if(reg_ptr_from) {
 8003396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01d      	beq.n	80033d8 <readFieldValue+0x1b0>
											const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 800339c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	2304      	movs	r3, #4
 80033a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a6:	f107 0318 	add.w	r3, r7, #24
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ae:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 80033b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <readFieldValue+0x1aa>
 80033b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d104      	bne.n	80033c6 <readFieldValue+0x19e>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80033bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e006      	b.n	80033d4 <readFieldValue+0x1ac>
    default: memcpy(to, from, n); break;
 80033c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80033ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80033cc:	f006 fa56 	bl	800987c <memcpy>
 80033d0:	e000      	b.n	80033d4 <readFieldValue+0x1ac>
    case 0: break;
 80033d2:	bf00      	nop
}
 80033d4:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80033d6:	e08b      	b.n	80034f0 <readFieldValue+0x2c8>
											memset(outputData, 0, sizeof(reg));
 80033d8:	2204      	movs	r2, #4
 80033da:	2100      	movs	r1, #0
 80033dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80033de:	f006 fa75 	bl	80098cc <memset>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80033e2:	e085      	b.n	80034f0 <readFieldValue+0x2c8>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80033e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d021      	beq.n	8003432 <readFieldValue+0x20a>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 80033ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <readFieldValue+0x1d2>
 80033f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	e000      	b.n	80033fc <readFieldValue+0x1d4>
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	2304      	movs	r3, #4
 8003400:	643b      	str	r3, [r7, #64]	; 0x40
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 800340c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <readFieldValue+0x206>
 8003412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003414:	2b01      	cmp	r3, #1
 8003416:	d104      	bne.n	8003422 <readFieldValue+0x1fa>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e006      	b.n	8003430 <readFieldValue+0x208>
    default: memcpy(to, from, n); break;
 8003422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003426:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003428:	f006 fa28 	bl	800987c <memcpy>
 800342c:	e000      	b.n	8003430 <readFieldValue+0x208>
    case 0: break;
 800342e:	bf00      	nop
}
 8003430:	e05e      	b.n	80034f0 <readFieldValue+0x2c8>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d037      	beq.n	80034ac <readFieldValue+0x284>
										const void* reg_ptr_from = ptr ? (const void *)(* REG_TYPE_DC(ptr)) : 0;
 800343c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <readFieldValue+0x220>
 8003442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e000      	b.n	800344a <readFieldValue+0x222>
 8003448:	2300      	movs	r3, #0
 800344a:	637b      	str	r3, [r7, #52]	; 0x34
										if(reg_ptr_from) {
 800344c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <readFieldValue+0x25c>
 8003452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <readFieldValue+0x258>
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	2b01      	cmp	r3, #1
 8003468:	d104      	bne.n	8003474 <readFieldValue+0x24c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e006      	b.n	8003482 <readFieldValue+0x25a>
    default: memcpy(to, from, n); break;
 8003474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347a:	f006 f9ff 	bl	800987c <memcpy>
 800347e:	e000      	b.n	8003482 <readFieldValue+0x25a>
    case 0: break;
 8003480:	bf00      	nop
}
 8003482:	e035      	b.n	80034f0 <readFieldValue+0x2c8>
											memset(outputData, 0, typeLen);
 8003484:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003486:	2100      	movs	r1, #0
 8003488:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800348a:	f006 fa1f 	bl	80098cc <memset>
}
 800348e:	e02f      	b.n	80034f0 <readFieldValue+0x2c8>
 8003490:	20000304 	.word	0x20000304
 8003494:	0800f6d0 	.word	0x0800f6d0
 8003498:	0800f224 	.word	0x0800f224
 800349c:	0800f644 	.word	0x0800f644
 80034a0:	08010f7c 	.word	0x08010f7c
 80034a4:	0800f730 	.word	0x0800f730
 80034a8:	0800f708 	.word	0x0800f708
                                    	if(ptr) {
 80034ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <readFieldValue+0x2bc>
 80034b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b8:	623b      	str	r3, [r7, #32]
 80034ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034bc:	61fb      	str	r3, [r7, #28]
    switch (n) {
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <readFieldValue+0x2b8>
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d104      	bne.n	80034d4 <readFieldValue+0x2ac>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e006      	b.n	80034e2 <readFieldValue+0x2ba>
    default: memcpy(to, from, n); break;
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	6a39      	ldr	r1, [r7, #32]
 80034d8:	69f8      	ldr	r0, [r7, #28]
 80034da:	f006 f9cf 	bl	800987c <memcpy>
 80034de:	e000      	b.n	80034e2 <readFieldValue+0x2ba>
    case 0: break;
 80034e0:	bf00      	nop
}
 80034e2:	e005      	b.n	80034f0 <readFieldValue+0x2c8>
                                    		memset(outputData, 0, typeLen);
 80034e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034e6:	2100      	movs	r1, #0
 80034e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80034ea:	f006 f9ef 	bl	80098cc <memset>
}
 80034ee:	e7ff      	b.n	80034f0 <readFieldValue+0x2c8>
 80034f0:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 80034f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	66bb      	str	r3, [r7, #104]	; 0x68
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80034fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <readFieldValue+0x2ec>
            __entityCallback(entity, field, ptr, field->rdCallback.context);
 8003500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003508:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800350a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800350e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003512:	47a0      	blx	r4
        }
#endif /* USE_ENTITY_READ_CALLBACK */

        pos += typeLen;
 8003514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003518:	4413      	add	r3, r2
 800351a:	66fb      	str	r3, [r7, #108]	; 0x6c
        (*size) = pos;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003520:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003522:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <readFieldValue+0x310>
        goto error;
 8003528:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	378c      	adds	r7, #140	; 0x8c
 800353c:	46bd      	mov	sp, r7
 800353e:	bd90      	pop	{r4, r7, pc}

08003540 <readSeveralFieldsValues>:
 * READ several fields values
 *
 */

int readSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b0b7      	sub	sp, #220	; 0xdc
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readSeveralFieldsValues: No allocated entities or invalid input");
 800354e:	4ba7      	ldr	r3, [pc, #668]	; (80037ec <readSeveralFieldsValues+0x2ac>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <readSeveralFieldsValues+0x2e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d908      	bls.n	800356e <readSeveralFieldsValues+0x2e>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <readSeveralFieldsValues+0x2e>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <readSeveralFieldsValues+0x2e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11d      	bne.n	80035aa <readSeveralFieldsValues+0x6a>
 800356e:	4b9f      	ldr	r3, [pc, #636]	; (80037ec <readSeveralFieldsValues+0x2ac>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <readSeveralFieldsValues+0x4e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d908      	bls.n	800358e <readSeveralFieldsValues+0x4e>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <readSeveralFieldsValues+0x4e>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <readSeveralFieldsValues+0x4e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <readSeveralFieldsValues+0x52>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <readSeveralFieldsValues+0x54>
 8003592:	2300      	movs	r3, #0
 8003594:	b2d9      	uxtb	r1, r3
 8003596:	4b96      	ldr	r3, [pc, #600]	; (80037f0 <readSeveralFieldsValues+0x2b0>)
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	f240 1303 	movw	r3, #259	; 0x103
 800359e:	4a95      	ldr	r2, [pc, #596]	; (80037f4 <readSeveralFieldsValues+0x2b4>)
 80035a0:	4895      	ldr	r0, [pc, #596]	; (80037f8 <readSeveralFieldsValues+0x2b8>)
 80035a2:	f002 fdc1 	bl	8006128 <__M_Error>
 80035a6:	2300      	movs	r3, #0
 80035a8:	e221      	b.n	80039ee <readSeveralFieldsValues+0x4ae>

    const reg inputMsgSize = (*size);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Wpos = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Rpos = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80035bc:	4b8b      	ldr	r3, [pc, #556]	; (80037ec <readSeveralFieldsValues+0x2ac>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 80035c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4413      	add	r3, r2
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 80035d6:	e1a7      	b.n	8003928 <readSeveralFieldsValues+0x3e8>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    reg Rpos_internal = (*Rpos);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80035e4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035ec:	4413      	add	r3, r2
 80035ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035f2:	2302      	movs	r3, #2
 80035f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003600:	f107 0318 	add.w	r3, r7, #24
 8003604:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    switch (n) {
 8003608:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <readSeveralFieldsValues+0xf8>
 8003610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d106      	bne.n	8003626 <readSeveralFieldsValues+0xe6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e009      	b.n	800363a <readSeveralFieldsValues+0xfa>
    default: memcpy(to, from, n); break;
 8003626:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800362a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800362e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003632:	f006 f923 	bl	800987c <memcpy>
 8003636:	e000      	b.n	800363a <readSeveralFieldsValues+0xfa>
    case 0: break;
 8003638:	bf00      	nop
}
 800363a:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	b29b      	uxth	r3, r3
 8003640:	61bb      	str	r3, [r7, #24]
    return entityNumber;
 8003642:	69bb      	ldr	r3, [r7, #24]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003644:	623b      	str	r3, [r7, #32]
    Rpos_internal += ENTITIES_SIZEOF;
 8003646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800364a:	3302      	adds	r3, #2
 800364c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003650:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003658:	4413      	add	r3, r2
 800365a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	fieldNumber = *(inputData);
 800365e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    return fieldNumber;
 8003668:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800366c:	83fb      	strh	r3, [r7, #30]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800366e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003672:	3301      	adds	r3, #1
 8003674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*Rpos) = Rpos_internal;
 8003678:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800367e:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 8003680:	4b5a      	ldr	r3, [pc, #360]	; (80037ec <readSeveralFieldsValues+0x2ac>)
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 8003690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	8bfb      	ldrh	r3, [r7, #30]
 8003698:	015b      	lsls	r3, r3, #5
 800369a:	4413      	add	r3, r2
 800369c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 80036a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036a4:	891b      	ldrh	r3, [r3, #8]
 80036a6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f240 8146 	bls.w	8003942 <readSeveralFieldsValues+0x402>
 80036b6:	8bfb      	ldrh	r3, [r7, #30]
 80036b8:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80036bc:	429a      	cmp	r2, r3
 80036be:	f240 8140 	bls.w	8003942 <readSeveralFieldsValues+0x402>

            const reg typeLen = getMYCTypeLen(field->type);
 80036c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036c6:	7e1b      	ldrb	r3, [r3, #24]
 80036c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(type < TYPE_ARRAY_LENGTH) {
 80036cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036d0:	2b11      	cmp	r3, #17
 80036d2:	d805      	bhi.n	80036e0 <readSeveralFieldsValues+0x1a0>
        return typeLengthMappingArray[type];
 80036d4:	4a49      	ldr	r2, [pc, #292]	; (80037fc <readSeveralFieldsValues+0x2bc>)
 80036d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036de:	e000      	b.n	80036e2 <readSeveralFieldsValues+0x1a2>
    return 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, {
 80036e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80036ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036ee:	4413      	add	r3, r2
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d214      	bcs.n	8003720 <readSeveralFieldsValues+0x1e0>
 80036f6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80036fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036fe:	4413      	add	r3, r2
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	bf34      	ite	cc
 8003706:	2301      	movcc	r3, #1
 8003708:	2300      	movcs	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	4619      	mov	r1, r3
 800370e:	4b3c      	ldr	r3, [pc, #240]	; (8003800 <readSeveralFieldsValues+0x2c0>)
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8003716:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <readSeveralFieldsValues+0x2b4>)
 8003718:	483a      	ldr	r0, [pc, #232]	; (8003804 <readSeveralFieldsValues+0x2c4>)
 800371a:	f002 fd05 	bl	8006128 <__M_Error>
 800371e:	e111      	b.n	8003944 <readSeveralFieldsValues+0x404>
                                      goto error;
                                  }, "readSeveralFieldsValues: field size more than buffer");

            ptr = (entity->pointer + field->shift);
 8003720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	4413      	add	r3, r2
 800372e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 8003732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800373e:	440b      	add	r3, r1
 8003740:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003744:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003748:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800374c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800374e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003752:	67bb      	str	r3, [r7, #120]	; 0x78
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d036      	beq.n	80037ce <readSeveralFieldsValues+0x28e>
 8003760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d030      	beq.n	80037ce <readSeveralFieldsValues+0x28e>
										const void* reg_ptr_from = ptr ? (const void*) (* REG_TYPE_DC(ptr)) : 0;
 800376c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <readSeveralFieldsValues+0x23c>
 8003774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	e000      	b.n	800377e <readSeveralFieldsValues+0x23e>
 800377c:	2300      	movs	r3, #0
 800377e:	677b      	str	r3, [r7, #116]	; 0x74
										if(reg_ptr_from) {
 8003780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01d      	beq.n	80037c2 <readSeveralFieldsValues+0x282>
											const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 8003786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	2304      	movs	r3, #4
 800378e:	673b      	str	r3, [r7, #112]	; 0x70
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003798:	66bb      	str	r3, [r7, #104]	; 0x68
    switch (n) {
 800379a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00d      	beq.n	80037bc <readSeveralFieldsValues+0x27c>
 80037a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d104      	bne.n	80037b0 <readSeveralFieldsValues+0x270>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80037a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e006      	b.n	80037be <readSeveralFieldsValues+0x27e>
    default: memcpy(to, from, n); break;
 80037b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80037b2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80037b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80037b6:	f006 f861 	bl	800987c <memcpy>
 80037ba:	e000      	b.n	80037be <readSeveralFieldsValues+0x27e>
    case 0: break;
 80037bc:	bf00      	nop
}
 80037be:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80037c0:	e094      	b.n	80038ec <readSeveralFieldsValues+0x3ac>
											memset(outputData, 0, sizeof(reg));
 80037c2:	2204      	movs	r2, #4
 80037c4:	2100      	movs	r1, #0
 80037c6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80037c8:	f006 f880 	bl	80098cc <memset>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80037cc:	e08e      	b.n	80038ec <readSeveralFieldsValues+0x3ac>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80037ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d032      	beq.n	8003840 <readSeveralFieldsValues+0x300>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 80037da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d012      	beq.n	8003808 <readSeveralFieldsValues+0x2c8>
 80037e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	e00f      	b.n	800380a <readSeveralFieldsValues+0x2ca>
 80037ea:	bf00      	nop
 80037ec:	20000304 	.word	0x20000304
 80037f0:	0800f834 	.word	0x0800f834
 80037f4:	0800f224 	.word	0x0800f224
 80037f8:	0800f764 	.word	0x0800f764
 80037fc:	08010f7c 	.word	0x08010f7c
 8003800:	0800f89c 	.word	0x0800f89c
 8003804:	0800f874 	.word	0x0800f874
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	2304      	movs	r3, #4
 800380e:	667b      	str	r3, [r7, #100]	; 0x64
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	663b      	str	r3, [r7, #96]	; 0x60
 8003816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003818:	65fb      	str	r3, [r7, #92]	; 0x5c
    switch (n) {
 800381a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <readSeveralFieldsValues+0x2fc>
 8003820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003822:	2b01      	cmp	r3, #1
 8003824:	d104      	bne.n	8003830 <readSeveralFieldsValues+0x2f0>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e006      	b.n	800383e <readSeveralFieldsValues+0x2fe>
    default: memcpy(to, from, n); break;
 8003830:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003832:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003834:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003836:	f006 f821 	bl	800987c <memcpy>
 800383a:	e000      	b.n	800383e <readSeveralFieldsValues+0x2fe>
    case 0: break;
 800383c:	bf00      	nop
}
 800383e:	e055      	b.n	80038ec <readSeveralFieldsValues+0x3ac>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02b      	beq.n	80038a4 <readSeveralFieldsValues+0x364>
										const void* reg_ptr_from = ptr ? (const void *)(* REG_TYPE_DC(ptr)) : 0;
 800384c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <readSeveralFieldsValues+0x31c>
 8003854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	e000      	b.n	800385e <readSeveralFieldsValues+0x31e>
 800385c:	2300      	movs	r3, #0
 800385e:	65bb      	str	r3, [r7, #88]	; 0x58
										if(reg_ptr_from) {
 8003860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003862:	2b00      	cmp	r3, #0
 8003864:	d018      	beq.n	8003898 <readSeveralFieldsValues+0x358>
 8003866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003868:	657b      	str	r3, [r7, #84]	; 0x54
 800386a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800386c:	653b      	str	r3, [r7, #80]	; 0x50
 800386e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003870:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (n) {
 8003872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <readSeveralFieldsValues+0x354>
 8003878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387a:	2b01      	cmp	r3, #1
 800387c:	d104      	bne.n	8003888 <readSeveralFieldsValues+0x348>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800387e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	e006      	b.n	8003896 <readSeveralFieldsValues+0x356>
    default: memcpy(to, from, n); break;
 8003888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800388a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800388c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800388e:	f005 fff5 	bl	800987c <memcpy>
 8003892:	e000      	b.n	8003896 <readSeveralFieldsValues+0x356>
    case 0: break;
 8003894:	bf00      	nop
}
 8003896:	e029      	b.n	80038ec <readSeveralFieldsValues+0x3ac>
											memset(outputData, 0, typeLen);
 8003898:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800389a:	2100      	movs	r1, #0
 800389c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800389e:	f006 f815 	bl	80098cc <memset>
}
 80038a2:	e023      	b.n	80038ec <readSeveralFieldsValues+0x3ac>
                                    	if(ptr) {
 80038a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d019      	beq.n	80038e0 <readSeveralFieldsValues+0x3a0>
 80038ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80038b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038b4:	647b      	str	r3, [r7, #68]	; 0x44
 80038b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038b8:	643b      	str	r3, [r7, #64]	; 0x40
    switch (n) {
 80038ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <readSeveralFieldsValues+0x39c>
 80038c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d104      	bne.n	80038d0 <readSeveralFieldsValues+0x390>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80038c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e006      	b.n	80038de <readSeveralFieldsValues+0x39e>
    default: memcpy(to, from, n); break;
 80038d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038d6:	f005 ffd1 	bl	800987c <memcpy>
 80038da:	e000      	b.n	80038de <readSeveralFieldsValues+0x39e>
    case 0: break;
 80038dc:	bf00      	nop
}
 80038de:	e005      	b.n	80038ec <readSeveralFieldsValues+0x3ac>
                                    		memset(outputData, 0, typeLen);
 80038e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038e2:	2100      	movs	r1, #0
 80038e4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80038e6:	f005 fff1 	bl	80098cc <memset>
}
 80038ea:	e7ff      	b.n	80038ec <readSeveralFieldsValues+0x3ac>
 80038ec:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
            const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 80038ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80038f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <readSeveralFieldsValues+0x3d8>
                __entityCallback(entity, field, ptr, field->rdCallback.context);
 8003900:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800390a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800390e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003912:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003916:	47a0      	blx	r4
            }
#endif /* USE_ENTITY_READ_CALLBACK */

            Wpos += typeLen;
 8003918:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800391c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003920:	4413      	add	r3, r2
 8003922:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003926:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	3302      	adds	r3, #2
 800392c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003930:	429a      	cmp	r2, r3
 8003932:	f63f ae51 	bhi.w	80035d8 <readSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800393c:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 800393e:	2301      	movs	r3, #1
 8003940:	e055      	b.n	80039ee <readSeveralFieldsValues+0x4ae>
            goto error;
 8003942:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    outputData[Wpos++] = ENTITY_ERROR;
 800394a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4413      	add	r3, r2
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003962:	4413      	add	r3, r2
 8003964:	2202      	movs	r2, #2
 8003966:	633a      	str	r2, [r7, #48]	; 0x30
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396a:	f107 0320 	add.w	r3, r7, #32
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <readSeveralFieldsValues+0x452>
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2b01      	cmp	r3, #1
 800397a:	d104      	bne.n	8003986 <readSeveralFieldsValues+0x446>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	781a      	ldrb	r2, [r3, #0]
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e006      	b.n	8003994 <readSeveralFieldsValues+0x454>
    default: memcpy(to, from, n); break;
 8003986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800398a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800398c:	f005 ff76 	bl	800987c <memcpy>
 8003990:	e000      	b.n	8003994 <readSeveralFieldsValues+0x454>
    case 0: break;
 8003992:	bf00      	nop
}
 8003994:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 8003996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800399a:	3302      	adds	r3, #2
 800399c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039a6:	4413      	add	r3, r2
 80039a8:	2201      	movs	r2, #1
 80039aa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ae:	f107 031e 	add.w	r3, r7, #30
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
    switch (n) {
 80039b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <readSeveralFieldsValues+0x496>
 80039ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d104      	bne.n	80039ca <readSeveralFieldsValues+0x48a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e006      	b.n	80039d8 <readSeveralFieldsValues+0x498>
    default: memcpy(to, from, n); break;
 80039ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039d0:	f005 ff54 	bl	800987c <memcpy>
 80039d4:	e000      	b.n	80039d8 <readSeveralFieldsValues+0x498>
    case 0: break;
 80039d6:	bf00      	nop
}
 80039d8:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 80039da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039de:	3301      	adds	r3, #1
 80039e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    (*size) = Wpos;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80039ea:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	37d4      	adds	r7, #212	; 0xd4
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}
 80039f6:	bf00      	nop

080039f8 <setFieldValue>:
/* ******************************************************************************************************************
 * WRITE one field value
 *
 */
int setFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const inputData, const reg inputBufferSize)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b0a5      	sub	sp, #148	; 0x94
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	460b      	mov	r3, r1
 8003a06:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (inputData == NULL) || (inputBufferSize == 0)), M_EMPTY, return ENTITY_ERROR, "setFieldValue: No allocated entities or invalid input");
 8003a08:	4b96      	ldr	r3, [pc, #600]	; (8003c64 <setFieldValue+0x26c>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <setFieldValue+0x24>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <setFieldValue+0x24>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d117      	bne.n	8003a4c <setFieldValue+0x54>
 8003a1c:	4b91      	ldr	r3, [pc, #580]	; (8003c64 <setFieldValue+0x26c>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <setFieldValue+0x38>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <setFieldValue+0x38>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <setFieldValue+0x3c>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <setFieldValue+0x3e>
 8003a34:	2300      	movs	r3, #0
 8003a36:	b2d9      	uxtb	r1, r3
 8003a38:	4b8b      	ldr	r3, [pc, #556]	; (8003c68 <setFieldValue+0x270>)
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	f240 134d 	movw	r3, #333	; 0x14d
 8003a40:	4a8a      	ldr	r2, [pc, #552]	; (8003c6c <setFieldValue+0x274>)
 8003a42:	488b      	ldr	r0, [pc, #556]	; (8003c70 <setFieldValue+0x278>)
 8003a44:	f002 fb70 	bl	8006128 <__M_Error>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e107      	b.n	8003c5c <setFieldValue+0x264>

    Entity* const entity = entityInfo.entities[entityNumber];
 8003a4c:	4b85      	ldr	r3, [pc, #532]	; (8003c64 <setFieldValue+0x26c>)
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    EntityField* const field = &entity->fields[fieldNumber];
 8003a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	015b      	lsls	r3, r3, #5
 8003a66:	4413      	add	r3, r2
 8003a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8003a6c:	4b7d      	ldr	r3, [pc, #500]	; (8003c64 <setFieldValue+0x26c>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	67fb      	str	r3, [r7, #124]	; 0x7c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a76:	891b      	ldrh	r3, [r3, #8]
 8003a78:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	677b      	str	r3, [r7, #116]	; 0x74

    if((entityNumber < entities_count) && (fieldNumber < fields_count) && ((bitFlags & ENTITY_READ_ONLY_MSK) == 0)) {
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	f080 80e6 	bcs.w	8003c5a <setFieldValue+0x262>
 8003a8e:	897a      	ldrh	r2, [r7, #10]
 8003a90:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003a94:	429a      	cmp	r2, r3
 8003a96:	f080 80e0 	bcs.w	8003c5a <setFieldValue+0x262>
 8003a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f040 80da 	bne.w	8003c5a <setFieldValue+0x262>
        void* const ptr = (entity->pointer + field->shift);
 8003aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	673b      	str	r3, [r7, #112]	; 0x70
        const reg typeLen = getMYCTypeLen(field->type);
 8003ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aba:	7e1b      	ldrb	r3, [r3, #24]
 8003abc:	667b      	str	r3, [r7, #100]	; 0x64
    if(type < TYPE_ARRAY_LENGTH) {
 8003abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac0:	2b11      	cmp	r3, #17
 8003ac2:	d804      	bhi.n	8003ace <setFieldValue+0xd6>
        return typeLengthMappingArray[type];
 8003ac4:	4a6b      	ldr	r2, [pc, #428]	; (8003c74 <setFieldValue+0x27c>)
 8003ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003acc:	e000      	b.n	8003ad0 <setFieldValue+0xd8>
    return 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	66fb      	str	r3, [r7, #108]	; 0x6c

        ENTITY_DBG_ASSERT_BUF((typeLen > inputBufferSize), M_EMPTY, {
 8003ad2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d911      	bls.n	8003afe <setFieldValue+0x106>
 8003ada:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	bf8c      	ite	hi
 8003ae2:	2301      	movhi	r3, #1
 8003ae4:	2300      	movls	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <setFieldValue+0x280>)
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	f44f 73ad 	mov.w	r3, #346	; 0x15a
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <setFieldValue+0x274>)
 8003af4:	4861      	ldr	r0, [pc, #388]	; (8003c7c <setFieldValue+0x284>)
 8003af6:	f002 fb17 	bl	8006128 <__M_Error>
 8003afa:	2300      	movs	r3, #0
 8003afc:	e0ae      	b.n	8003c5c <setFieldValue+0x264>
 8003afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b00:	663b      	str	r3, [r7, #96]	; 0x60
 8003b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	657b      	str	r3, [r7, #84]	; 0x54
	if(!ptr) {
 8003b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 808e 	beq.w	8003c32 <setFieldValue+0x23a>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d028      	beq.n	8003b72 <setFieldValue+0x17a>
 8003b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d023      	beq.n	8003b72 <setFieldValue+0x17a>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 8003b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	653b      	str	r3, [r7, #80]	; 0x50
										if(reg_ptr_to) {
 8003b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d07f      	beq.n	8003c36 <setFieldValue+0x23e>
 8003b36:	2304      	movs	r3, #4
 8003b38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b3e:	f107 0318 	add.w	r3, r7, #24
 8003b42:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 8003b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <setFieldValue+0x16e>
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d104      	bne.n	8003b5a <setFieldValue+0x162>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e006      	b.n	8003b68 <setFieldValue+0x170>
    default: memcpy(to, from, n); break;
 8003b5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b5c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b60:	f005 fe8c 	bl	800987c <memcpy>
 8003b64:	e000      	b.n	8003b68 <setFieldValue+0x170>
    case 0: break;
 8003b66:	bf00      	nop
}
 8003b68:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6e:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003b70:	e061      	b.n	8003c36 <setFieldValue+0x23e>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01d      	beq.n	8003bb8 <setFieldValue+0x1c0>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 8003b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <setFieldValue+0x1b4>
 8003b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d104      	bne.n	8003ba0 <setFieldValue+0x1a8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e006      	b.n	8003bae <setFieldValue+0x1b6>
    default: memcpy(to, from, n); break;
 8003ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ba6:	f005 fe69 	bl	800987c <memcpy>
 8003baa:	e000      	b.n	8003bae <setFieldValue+0x1b6>
    case 0: break;
 8003bac:	bf00      	nop
}
 8003bae:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e03f      	b.n	8003c38 <setFieldValue+0x240>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01e      	beq.n	8003c00 <setFieldValue+0x208>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 8003bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
                                        if(reg_ptr_to) {
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d034      	beq.n	8003c38 <setFieldValue+0x240>
 8003bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <setFieldValue+0x204>
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d104      	bne.n	8003bf0 <setFieldValue+0x1f8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e006      	b.n	8003bfe <setFieldValue+0x206>
    default: memcpy(to, from, n); break;
 8003bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf6:	f005 fe41 	bl	800987c <memcpy>
 8003bfa:	e000      	b.n	8003bfe <setFieldValue+0x206>
    case 0: break;
 8003bfc:	bf00      	nop
}
 8003bfe:	e01b      	b.n	8003c38 <setFieldValue+0x240>
 8003c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
 8003c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0a:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00d      	beq.n	8003c2e <setFieldValue+0x236>
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d104      	bne.n	8003c22 <setFieldValue+0x22a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e006      	b.n	8003c30 <setFieldValue+0x238>
    default: memcpy(to, from, n); break;
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	6a39      	ldr	r1, [r7, #32]
 8003c26:	69f8      	ldr	r0, [r7, #28]
 8003c28:	f005 fe28 	bl	800987c <memcpy>
 8003c2c:	e000      	b.n	8003c30 <setFieldValue+0x238>
    case 0: break;
 8003c2e:	bf00      	nop
}
 8003c30:	e002      	b.n	8003c38 <setFieldValue+0x240>
		return;
 8003c32:	bf00      	nop
 8003c34:	e000      	b.n	8003c38 <setFieldValue+0x240>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003c36:	bf00      	nop

        proceedWriteEntity(bitFlags, ptr, inputData, typeLen);


#ifdef USE_ENTITY_WRITE_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	66bb      	str	r3, [r7, #104]	; 0x68
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <setFieldValue+0x262>
            __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003c4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c50:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003c54:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003c58:	47a0      	blx	r4
#endif /* USE_ENTITY_WRITE_CALLBACK */

    }

    UNUSED(inputBufferSize);
    return ENTITY_OK;
 8003c5a:	2301      	movs	r3, #1
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	378c      	adds	r7, #140	; 0x8c
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd90      	pop	{r4, r7, pc}
 8003c64:	20000304 	.word	0x20000304
 8003c68:	0800f94c 	.word	0x0800f94c
 8003c6c:	0800f224 	.word	0x0800f224
 8003c70:	0800f8d4 	.word	0x0800f8d4
 8003c74:	08010f7c 	.word	0x08010f7c
 8003c78:	0800f9a0 	.word	0x0800f9a0
 8003c7c:	0800f984 	.word	0x0800f984

08003c80 <setSeveralFieldsValues>:
/* ******************************************************************************************************************
 * WRITE several fields values
 *
 */
int setSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b0b9      	sub	sp, #228	; 0xe4
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "setSeveralFieldsValues: No allocated entities or invalid input");
 8003c8e:	4bb2      	ldr	r3, [pc, #712]	; (8003f58 <setSeveralFieldsValues+0x2d8>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <setSeveralFieldsValues+0x2e>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d908      	bls.n	8003cae <setSeveralFieldsValues+0x2e>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <setSeveralFieldsValues+0x2e>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <setSeveralFieldsValues+0x2e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11d      	bne.n	8003cea <setSeveralFieldsValues+0x6a>
 8003cae:	4baa      	ldr	r3, [pc, #680]	; (8003f58 <setSeveralFieldsValues+0x2d8>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <setSeveralFieldsValues+0x4e>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d908      	bls.n	8003cce <setSeveralFieldsValues+0x4e>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <setSeveralFieldsValues+0x4e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <setSeveralFieldsValues+0x4e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <setSeveralFieldsValues+0x52>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <setSeveralFieldsValues+0x54>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	b2d9      	uxtb	r1, r3
 8003cd6:	4ba1      	ldr	r3, [pc, #644]	; (8003f5c <setSeveralFieldsValues+0x2dc>)
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8003cde:	4aa0      	ldr	r2, [pc, #640]	; (8003f60 <setSeveralFieldsValues+0x2e0>)
 8003ce0:	48a0      	ldr	r0, [pc, #640]	; (8003f64 <setSeveralFieldsValues+0x2e4>)
 8003ce2:	f002 fa21 	bl	8006128 <__M_Error>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e20e      	b.n	8004108 <setSeveralFieldsValues+0x488>

    const reg inputMsgSize = (*size);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    reg Wpos = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    reg Rpos = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003cfc:	4b96      	ldr	r3, [pc, #600]	; (8003f58 <setSeveralFieldsValues+0x2d8>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8003d04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4413      	add	r3, r2
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8003d16:	e194      	b.n	8004042 <setSeveralFieldsValues+0x3c2>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    reg Rpos_internal = (*Rpos);
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003d24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d40:	f107 031c 	add.w	r3, r7, #28
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    switch (n) {
 8003d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <setSeveralFieldsValues+0xf8>
 8003d50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <setSeveralFieldsValues+0xe6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e009      	b.n	8003d7a <setSeveralFieldsValues+0xfa>
    default: memcpy(to, from, n); break;
 8003d66:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003d6a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003d6e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003d72:	f005 fd83 	bl	800987c <memcpy>
 8003d76:	e000      	b.n	8003d7a <setSeveralFieldsValues+0xfa>
    case 0: break;
 8003d78:	bf00      	nop
}
 8003d7a:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	61fb      	str	r3, [r7, #28]
    return entityNumber;
 8003d82:	69fb      	ldr	r3, [r7, #28]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
    Rpos_internal += ENTITIES_SIZEOF;
 8003d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003d90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d98:	4413      	add	r3, r2
 8003d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	fieldNumber = *(inputData);
 8003d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    return fieldNumber;
 8003da8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003dac:	847b      	strh	r3, [r7, #34]	; 0x22
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003db2:	3301      	adds	r3, #1
 8003db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*Rpos) = Rpos_internal;
 8003db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dbe:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 8003dc0:	4b65      	ldr	r3, [pc, #404]	; (8003f58 <setSeveralFieldsValues+0x2d8>)
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        EntityField* const field = &entity->fields[fieldNumber];
 8003dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dd8:	015b      	lsls	r3, r3, #5
 8003dda:	4413      	add	r3, r2
 8003ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003de0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003de4:	891b      	ldrh	r3, [r3, #8]
 8003de6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	f240 812e 	bls.w	800405c <setSeveralFieldsValues+0x3dc>
 8003e00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e02:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8003e06:	429a      	cmp	r2, r3
 8003e08:	f240 8128 	bls.w	800405c <setSeveralFieldsValues+0x3dc>
            const reg typeLen = getMYCTypeLen(field->type);
 8003e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e10:	7e1b      	ldrb	r3, [r3, #24]
 8003e12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(type < TYPE_ARRAY_LENGTH) {
 8003e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e1a:	2b11      	cmp	r3, #17
 8003e1c:	d805      	bhi.n	8003e2a <setSeveralFieldsValues+0x1aa>
        return typeLengthMappingArray[type];
 8003e1e:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <setSeveralFieldsValues+0x2e8>)
 8003e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e28:	e000      	b.n	8003e2c <setSeveralFieldsValues+0x1ac>
    return 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

            ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, {
 8003e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e36:	4413      	add	r3, r2
 8003e38:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d214      	bcs.n	8003e6a <setSeveralFieldsValues+0x1ea>
 8003e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e46:	4413      	add	r3, r2
 8003e48:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	bf34      	ite	cc
 8003e50:	2301      	movcc	r3, #1
 8003e52:	2300      	movcs	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	4b44      	ldr	r3, [pc, #272]	; (8003f6c <setSeveralFieldsValues+0x2ec>)
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	f240 138f 	movw	r3, #399	; 0x18f
 8003e60:	4a3f      	ldr	r2, [pc, #252]	; (8003f60 <setSeveralFieldsValues+0x2e0>)
 8003e62:	4843      	ldr	r0, [pc, #268]	; (8003f70 <setSeveralFieldsValues+0x2f0>)
 8003e64:	f002 f960 	bl	8006128 <__M_Error>
 8003e68:	e0f9      	b.n	800405e <setSeveralFieldsValues+0x3de>
                                      goto error;
                                  }, "setSeveralFieldsValues: field read size more than buffer");


            if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8003e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80df 	bne.w	8004036 <setSeveralFieldsValues+0x3b6>

                ptr = (entity->pointer + field->shift);
 8003e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	4413      	add	r3, r2
 8003e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e94:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
	if(!ptr) {
 8003eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80a9 	beq.w	8004006 <setSeveralFieldsValues+0x386>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02c      	beq.n	8003f1a <setSeveralFieldsValues+0x29a>
 8003ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d026      	beq.n	8003f1a <setSeveralFieldsValues+0x29a>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 8003ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	67bb      	str	r3, [r7, #120]	; 0x78
										if(reg_ptr_to) {
 8003ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8097 	beq.w	800400a <setSeveralFieldsValues+0x38a>
 8003edc:	2304      	movs	r3, #4
 8003ede:	677b      	str	r3, [r7, #116]	; 0x74
 8003ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ee6:	f107 0318 	add.w	r3, r7, #24
 8003eea:	66fb      	str	r3, [r7, #108]	; 0x6c
    switch (n) {
 8003eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <setSeveralFieldsValues+0x28e>
 8003ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d104      	bne.n	8003f02 <setSeveralFieldsValues+0x282>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e006      	b.n	8003f10 <setSeveralFieldsValues+0x290>
    default: memcpy(to, from, n); break;
 8003f02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f04:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003f06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f08:	f005 fcb8 	bl	800987c <memcpy>
 8003f0c:	e000      	b.n	8003f10 <setSeveralFieldsValues+0x290>
    case 0: break;
 8003f0e:	bf00      	nop
}
 8003f10:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f16:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003f18:	e077      	b.n	800400a <setSeveralFieldsValues+0x38a>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02d      	beq.n	8003f82 <setSeveralFieldsValues+0x302>
 8003f26:	2304      	movs	r3, #4
 8003f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f2e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	663b      	str	r3, [r7, #96]	; 0x60
    switch (n) {
 8003f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01b      	beq.n	8003f74 <setSeveralFieldsValues+0x2f4>
 8003f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d104      	bne.n	8003f4c <setSeveralFieldsValues+0x2cc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e014      	b.n	8003f76 <setSeveralFieldsValues+0x2f6>
    default: memcpy(to, from, n); break;
 8003f4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f4e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003f50:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003f52:	f005 fc93 	bl	800987c <memcpy>
 8003f56:	e00e      	b.n	8003f76 <setSeveralFieldsValues+0x2f6>
 8003f58:	20000304 	.word	0x20000304
 8003f5c:	0800f9cc 	.word	0x0800f9cc
 8003f60:	0800f224 	.word	0x0800f224
 8003f64:	0800f764 	.word	0x0800f764
 8003f68:	08010f7c 	.word	0x08010f7c
 8003f6c:	0800fa30 	.word	0x0800fa30
 8003f70:	0800fa0c 	.word	0x0800fa0c
    case 0: break;
 8003f74:	bf00      	nop
}
 8003f76:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e044      	b.n	800400c <setSeveralFieldsValues+0x38c>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003f82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d020      	beq.n	8003fd0 <setSeveralFieldsValues+0x350>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 8003f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
                                        if(reg_ptr_to) {
 8003f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d037      	beq.n	800400c <setSeveralFieldsValues+0x38c>
 8003f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa8:	653b      	str	r3, [r7, #80]	; 0x50
    switch (n) {
 8003faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <setSeveralFieldsValues+0x34c>
 8003fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d104      	bne.n	8003fc0 <setSeveralFieldsValues+0x340>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e006      	b.n	8003fce <setSeveralFieldsValues+0x34e>
    default: memcpy(to, from, n); break;
 8003fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003fc6:	f005 fc59 	bl	800987c <memcpy>
 8003fca:	e000      	b.n	8003fce <setSeveralFieldsValues+0x34e>
    case 0: break;
 8003fcc:	bf00      	nop
}
 8003fce:	e01d      	b.n	800400c <setSeveralFieldsValues+0x38c>
 8003fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fde:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 8003fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <setSeveralFieldsValues+0x382>
 8003fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d104      	bne.n	8003ff6 <setSeveralFieldsValues+0x376>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fee:	781a      	ldrb	r2, [r3, #0]
 8003ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e006      	b.n	8004004 <setSeveralFieldsValues+0x384>
    default: memcpy(to, from, n); break;
 8003ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ff8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003ffa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003ffc:	f005 fc3e 	bl	800987c <memcpy>
 8004000:	e000      	b.n	8004004 <setSeveralFieldsValues+0x384>
    case 0: break;
 8004002:	bf00      	nop
}
 8004004:	e002      	b.n	800400c <setSeveralFieldsValues+0x38c>
		return;
 8004006:	bf00      	nop
 8004008:	e000      	b.n	800400c <setSeveralFieldsValues+0x38c>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800400a:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 800400c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8004016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <setSeveralFieldsValues+0x3b6>
                    __entityCallback(entity, field, ptr, field->wrCallback.context);
 800401e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8004028:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800402c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8004030:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8004034:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_WRITE_CALLBACK */

            }

            Rpos += typeLen;
 8004036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800403c:	4413      	add	r3, r2
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8004040:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	3303      	adds	r3, #3
 8004046:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800404a:	429a      	cmp	r2, r3
 800404c:	f63f ae64 	bhi.w	8003d18 <setSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004056:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8004058:	2301      	movs	r3, #1
 800405a:	e055      	b.n	8004108 <setSeveralFieldsValues+0x488>
            goto error;
 800405c:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    outputData[Wpos++] = ENTITY_ERROR;
 8004064:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4413      	add	r3, r2
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800407c:	4413      	add	r3, r2
 800407e:	2202      	movs	r2, #2
 8004080:	637a      	str	r2, [r7, #52]	; 0x34
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
 8004084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <setSeveralFieldsValues+0x42c>
 8004090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004092:	2b01      	cmp	r3, #1
 8004094:	d104      	bne.n	80040a0 <setSeveralFieldsValues+0x420>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e006      	b.n	80040ae <setSeveralFieldsValues+0x42e>
    default: memcpy(to, from, n); break;
 80040a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040a6:	f005 fbe9 	bl	800987c <memcpy>
 80040aa:	e000      	b.n	80040ae <setSeveralFieldsValues+0x42e>
    case 0: break;
 80040ac:	bf00      	nop
}
 80040ae:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 80040b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040b4:	3302      	adds	r3, #2
 80040b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040c0:	4413      	add	r3, r2
 80040c2:	2201      	movs	r2, #1
 80040c4:	643a      	str	r2, [r7, #64]	; 0x40
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 80040ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <setSeveralFieldsValues+0x470>
 80040d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d104      	bne.n	80040e4 <setSeveralFieldsValues+0x464>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80040da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e006      	b.n	80040f2 <setSeveralFieldsValues+0x472>
    default: memcpy(to, from, n); break;
 80040e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040ea:	f005 fbc7 	bl	800987c <memcpy>
 80040ee:	e000      	b.n	80040f2 <setSeveralFieldsValues+0x472>
    case 0: break;
 80040f0:	bf00      	nop
}
 80040f2:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 80040f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040f8:	3301      	adds	r3, #1
 80040fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    (*size) = Wpos;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004104:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	37dc      	adds	r7, #220	; 0xdc
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}

08004110 <proceedGluedValues>:
/* ******************************************************************************************************************
 * GLUED functions fields values
 *
 */
int proceedGluedValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b0db      	sub	sp, #364	; 0x16c
 8004114:	af02      	add	r7, sp, #8
 8004116:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 800411a:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 800411e:	6020      	str	r0, [r4, #0]
 8004120:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004124:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8004128:	6001      	str	r1, [r0, #0]
 800412a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800412e:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 8004132:	600a      	str	r2, [r1, #0]
 8004134:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004138:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800413c:	6013      	str	r3, [r2, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 3) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: No allocated entities or invalid input");
 800413e:	4bb8      	ldr	r3, [pc, #736]	; (8004420 <proceedGluedValues+0x310>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01b      	beq.n	800417e <proceedGluedValues+0x6e>
 8004146:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800414a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d914      	bls.n	800417e <proceedGluedValues+0x6e>
 8004154:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004158:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <proceedGluedValues+0x6e>
 8004162:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004166:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d006      	beq.n	800417e <proceedGluedValues+0x6e>
 8004170:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004174:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d12e      	bne.n	80041dc <proceedGluedValues+0xcc>
 800417e:	4ba8      	ldr	r3, [pc, #672]	; (8004420 <proceedGluedValues+0x310>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01b      	beq.n	80041be <proceedGluedValues+0xae>
 8004186:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800418a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b02      	cmp	r3, #2
 8004192:	d914      	bls.n	80041be <proceedGluedValues+0xae>
 8004194:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004198:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <proceedGluedValues+0xae>
 80041a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <proceedGluedValues+0xae>
 80041b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <proceedGluedValues+0xb2>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <proceedGluedValues+0xb4>
 80041c2:	2300      	movs	r3, #0
 80041c4:	b2d9      	uxtb	r1, r3
 80041c6:	4b97      	ldr	r3, [pc, #604]	; (8004424 <proceedGluedValues+0x314>)
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 80041ce:	4a96      	ldr	r2, [pc, #600]	; (8004428 <proceedGluedValues+0x318>)
 80041d0:	4896      	ldr	r0, [pc, #600]	; (800442c <proceedGluedValues+0x31c>)
 80041d2:	f001 ffa9 	bl	8006128 <__M_Error>
 80041d6:	2300      	movs	r3, #0
 80041d8:	f000 bdf7 	b.w	8004dca <proceedGluedValues+0xcba>

    const reg inputMsgSize = (*size);
 80041dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041e0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    reg Wpos = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    reg Rpos = 0;
 80041f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80041f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80041fe:	4b88      	ldr	r3, [pc, #544]	; (8004420 <proceedGluedValues+0x310>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    u8 cmd = inputData[Rpos++];
 8004206:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800420a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	1c59      	adds	r1, r3, #1
 8004212:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004216:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800421a:	6011      	str	r1, [r2, #0]
 800421c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004220:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	4413      	add	r3, r2
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

    if(cmd == WRITE_SEVERAL_VALUES_GLUED) {
 800422e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004232:	2b07      	cmp	r3, #7
 8004234:	f040 82a4 	bne.w	8004780 <proceedGluedValues+0x670>
        const u8 writeRequestCnt = inputData[Rpos++];
 8004238:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800423c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	1c59      	adds	r1, r3, #1
 8004244:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004248:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800424c:	6011      	str	r1, [r2, #0]
 800424e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004252:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	4413      	add	r3, r2
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004266:	e23e      	b.n	80046e6 <proceedGluedValues+0x5d6>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize),
 8004268:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800426c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3303      	adds	r3, #3
 8004274:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004278:	429a      	cmp	r2, r3
 800427a:	d218      	bcs.n	80042ae <proceedGluedValues+0x19e>
 800427c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3303      	adds	r3, #3
 8004288:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800428c:	429a      	cmp	r2, r3
 800428e:	bf34      	ite	cc
 8004290:	2301      	movcc	r3, #1
 8004292:	2300      	movcs	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	4619      	mov	r1, r3
 8004298:	4b65      	ldr	r3, [pc, #404]	; (8004430 <proceedGluedValues+0x320>)
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 80042a0:	4a61      	ldr	r2, [pc, #388]	; (8004428 <proceedGluedValues+0x318>)
 80042a2:	4864      	ldr	r0, [pc, #400]	; (8004434 <proceedGluedValues+0x324>)
 80042a4:	f001 ff40 	bl	8006128 <__M_Error>
 80042a8:	2300      	movs	r3, #0
 80042aa:	f000 bd8e 	b.w	8004dca <proceedGluedValues+0xcba>
 80042ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    reg Rpos_internal = (*Rpos);
 80042bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80042ca:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80042ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042d2:	4413      	add	r3, r2
 80042d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042d8:	2302      	movs	r3, #2
 80042da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80042de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80042e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    switch (n) {
 80042ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d013      	beq.n	800431e <proceedGluedValues+0x20e>
 80042f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d106      	bne.n	800430c <proceedGluedValues+0x1fc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80042fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004302:	781a      	ldrb	r2, [r3, #0]
 8004304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	e009      	b.n	8004320 <proceedGluedValues+0x210>
    default: memcpy(to, from, n); break;
 800430c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004310:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8004314:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8004318:	f005 fab0 	bl	800987c <memcpy>
 800431c:	e000      	b.n	8004320 <proceedGluedValues+0x210>
    case 0: break;
 800431e:	bf00      	nop
}
 8004320:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8004322:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004326:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	b29a      	uxth	r2, r3
 800432e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004332:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004336:	601a      	str	r2, [r3, #0]
    return entityNumber;
 8004338:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800433c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004340:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8004342:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800434a:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 800434c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004350:	3302      	adds	r3, #2
 8004352:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8004356:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800435a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800435e:	4413      	add	r3, r2
 8004360:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	fieldNumber = *(inputData);
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    return fieldNumber;
 800436e:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8004372:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004376:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800437a:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800437c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004380:	3301      	adds	r3, #1
 8004382:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*Rpos) = Rpos_internal;
 8004386:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800438a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800438e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
                                  M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <proceedGluedValues+0x310>)
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800439e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            EntityField* const field = &entity->fields[fieldNumber];
 80043ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043b8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	015b      	lsls	r3, r3, #5
 80043c0:	4413      	add	r3, r2
 80043c2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80043c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80043ca:	891b      	ldrh	r3, [r3, #8]
 80043cc:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
            const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 80043d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80043da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80043e8:	429a      	cmp	r2, r3
 80043ea:	f240 8177 	bls.w	80046dc <proceedGluedValues+0x5cc>
 80043ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043f2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 80043fc:	429a      	cmp	r2, r3
 80043fe:	f240 816d 	bls.w	80046dc <proceedGluedValues+0x5cc>
                const reg typeLen = getMYCTypeLen(field->type);
 8004402:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004406:	7e1b      	ldrb	r3, [r3, #24]
 8004408:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if(type < TYPE_ARRAY_LENGTH) {
 800440c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004410:	2b11      	cmp	r3, #17
 8004412:	d813      	bhi.n	800443c <proceedGluedValues+0x32c>
        return typeLengthMappingArray[type];
 8004414:	4a08      	ldr	r2, [pc, #32]	; (8004438 <proceedGluedValues+0x328>)
 8004416:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800441a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441e:	e00e      	b.n	800443e <proceedGluedValues+0x32e>
 8004420:	20000304 	.word	0x20000304
 8004424:	0800fb10 	.word	0x0800fb10
 8004428:	0800f224 	.word	0x0800f224
 800442c:	0800fa6c 	.word	0x0800fa6c
 8004430:	0800fb90 	.word	0x0800fb90
 8004434:	0800fb4c 	.word	0x0800fb4c
 8004438:	08010f7c 	.word	0x08010f7c
    return 0;
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

                ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8004442:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004450:	4413      	add	r3, r2
 8004452:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004456:	429a      	cmp	r2, r3
 8004458:	d21a      	bcs.n	8004490 <proceedGluedValues+0x380>
 800445a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800445e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004468:	4413      	add	r3, r2
 800446a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800446e:	429a      	cmp	r2, r3
 8004470:	bf34      	ite	cc
 8004472:	2301      	movcc	r3, #1
 8004474:	2300      	movcs	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4619      	mov	r1, r3
 800447a:	4bbd      	ldr	r3, [pc, #756]	; (8004770 <proceedGluedValues+0x660>)
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	f240 13e1 	movw	r3, #481	; 0x1e1
 8004482:	4abc      	ldr	r2, [pc, #752]	; (8004774 <proceedGluedValues+0x664>)
 8004484:	48bc      	ldr	r0, [pc, #752]	; (8004778 <proceedGluedValues+0x668>)
 8004486:	f001 fe4f 	bl	8006128 <__M_Error>
 800448a:	2300      	movs	r3, #0
 800448c:	f000 bc9d 	b.w	8004dca <proceedGluedValues+0xcba>

                if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8004490:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8112 	bne.w	80046c2 <proceedGluedValues+0x5b2>

                    ptr = (entity->pointer + field->shift);
 800449e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	4413      	add	r3, r2
 80044ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 80044b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80044be:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	4413      	add	r3, r2
 80044c6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80044ca:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80044ce:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80044d2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80044d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if(!ptr) {
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80d3 	beq.w	8004692 <proceedGluedValues+0x582>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80044ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d03d      	beq.n	8004574 <proceedGluedValues+0x464>
 80044f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	d037      	beq.n	8004574 <proceedGluedValues+0x464>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 8004504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
										if(reg_ptr_to) {
 800450e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80bf 	beq.w	8004696 <proceedGluedValues+0x586>
 8004518:	2304      	movs	r3, #4
 800451a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800451e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004522:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    switch (n) {
 800452e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d013      	beq.n	800455e <proceedGluedValues+0x44e>
 8004536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800453a:	2b01      	cmp	r3, #1
 800453c:	d106      	bne.n	800454c <proceedGluedValues+0x43c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800453e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004542:	781a      	ldrb	r2, [r3, #0]
 8004544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e009      	b.n	8004560 <proceedGluedValues+0x450>
    default: memcpy(to, from, n); break;
 800454c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004550:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004554:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004558:	f005 f990 	bl	800987c <memcpy>
 800455c:	e000      	b.n	8004560 <proceedGluedValues+0x450>
    case 0: break;
 800455e:	bf00      	nop
}
 8004560:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 8004562:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004566:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004570:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004572:	e090      	b.n	8004696 <proceedGluedValues+0x586>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8004574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d02d      	beq.n	80045dc <proceedGluedValues+0x4cc>
 8004580:	2304      	movs	r3, #4
 8004582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800458e:	f107 0320 	add.w	r3, r7, #32
 8004592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    switch (n) {
 8004596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d013      	beq.n	80045c6 <proceedGluedValues+0x4b6>
 800459e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d106      	bne.n	80045b4 <proceedGluedValues+0x4a4>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80045a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e009      	b.n	80045c8 <proceedGluedValues+0x4b8>
    default: memcpy(to, from, n); break;
 80045b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045b8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80045bc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80045c0:	f005 f95c 	bl	800987c <memcpy>
 80045c4:	e000      	b.n	80045c8 <proceedGluedValues+0x4b8>
    case 0: break;
 80045c6:	bf00      	nop
}
 80045c8:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 80045ca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80045ce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e05d      	b.n	8004698 <proceedGluedValues+0x588>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80045dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d02e      	beq.n	8004646 <proceedGluedValues+0x536>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                                        if(reg_ptr_to) {
 80045f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d04e      	beq.n	8004698 <proceedGluedValues+0x588>
 80045fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800460a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800460e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    switch (n) {
 8004612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d013      	beq.n	8004642 <proceedGluedValues+0x532>
 800461a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800461e:	2b01      	cmp	r3, #1
 8004620:	d106      	bne.n	8004630 <proceedGluedValues+0x520>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	e009      	b.n	8004644 <proceedGluedValues+0x534>
    default: memcpy(to, from, n); break;
 8004630:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004634:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8004638:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800463c:	f005 f91e 	bl	800987c <memcpy>
 8004640:	e000      	b.n	8004644 <proceedGluedValues+0x534>
    case 0: break;
 8004642:	bf00      	nop
}
 8004644:	e028      	b.n	8004698 <proceedGluedValues+0x588>
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800464e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    switch (n) {
 800465e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004662:	2b00      	cmp	r3, #0
 8004664:	d013      	beq.n	800468e <proceedGluedValues+0x57e>
 8004666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800466a:	2b01      	cmp	r3, #1
 800466c:	d106      	bne.n	800467c <proceedGluedValues+0x56c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800466e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004672:	781a      	ldrb	r2, [r3, #0]
 8004674:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e009      	b.n	8004690 <proceedGluedValues+0x580>
    default: memcpy(to, from, n); break;
 800467c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004680:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004684:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004688:	f005 f8f8 	bl	800987c <memcpy>
 800468c:	e000      	b.n	8004690 <proceedGluedValues+0x580>
    case 0: break;
 800468e:	bf00      	nop
}
 8004690:	e002      	b.n	8004698 <proceedGluedValues+0x588>
		return;
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <proceedGluedValues+0x588>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004696:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                    const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8004698:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80046a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <proceedGluedValues+0x5b2>
                        __entityCallback(entity, field, ptr, field->wrCallback.context);
 80046aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80046b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80046b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80046bc:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80046c0:	47a0      	blx	r4
                    }
#endif /* USE_ENTITY_WRITE_CALLBACK */

                }

                Rpos += typeLen;
 80046c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046d0:	441a      	add	r2, r3
 80046d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046da:	601a      	str	r2, [r3, #0]
        for(reg i = 0; i < writeRequestCnt; ++i) {
 80046dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80046e0:	3301      	adds	r3, #1
 80046e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80046e6:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 80046ea:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80046ee:	429a      	cmp	r2, r3
 80046f0:	f4ff adba 	bcc.w	8004268 <proceedGluedValues+0x158>
            }
        }

        ENTITY_DBG_ASSERT_BUF(((Rpos + 1) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 80046f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004704:	429a      	cmp	r2, r3
 8004706:	d217      	bcs.n	8004738 <proceedGluedValues+0x628>
 8004708:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800470c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004718:	429a      	cmp	r2, r3
 800471a:	bf34      	ite	cc
 800471c:	2301      	movcc	r3, #1
 800471e:	2300      	movcs	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	4619      	mov	r1, r3
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <proceedGluedValues+0x660>)
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 800472c:	4a11      	ldr	r2, [pc, #68]	; (8004774 <proceedGluedValues+0x664>)
 800472e:	4813      	ldr	r0, [pc, #76]	; (800477c <proceedGluedValues+0x66c>)
 8004730:	f001 fcfa 	bl	8006128 <__M_Error>
 8004734:	2300      	movs	r3, #0
 8004736:	e348      	b.n	8004dca <proceedGluedValues+0xcba>
        cmd = inputData[Rpos];
 8004738:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800473c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004746:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	4413      	add	r3, r2
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        if(cmd == SEVERAL_VALUES_GLUED_END) {
 8004754:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004758:	2b09      	cmp	r3, #9
 800475a:	d111      	bne.n	8004780 <proceedGluedValues+0x670>
            (*size) = 0;
 800475c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004760:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
            return ENTITY_OK;
 800476a:	2301      	movs	r3, #1
 800476c:	e32d      	b.n	8004dca <proceedGluedValues+0xcba>
 800476e:	bf00      	nop
 8004770:	0800fbcc 	.word	0x0800fbcc
 8004774:	0800f224 	.word	0x0800f224
 8004778:	0800fa0c 	.word	0x0800fa0c
 800477c:	0800fc04 	.word	0x0800fc04
        }
    }

    if(cmd == READ_SEVERAL_VALUES_GLUED) {
 8004780:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004784:	2b06      	cmp	r3, #6
 8004786:	f040 8317 	bne.w	8004db8 <proceedGluedValues+0xca8>
        ENTITY_DBG_ASSERT_BUF(((Rpos + 2) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 800478a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800478e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3302      	adds	r3, #2
 8004796:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800479a:	429a      	cmp	r2, r3
 800479c:	d217      	bcs.n	80047ce <proceedGluedValues+0x6be>
 800479e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3302      	adds	r3, #2
 80047aa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	bf34      	ite	cc
 80047b2:	2301      	movcc	r3, #1
 80047b4:	2300      	movcs	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	4bc3      	ldr	r3, [pc, #780]	; (8004ac8 <proceedGluedValues+0x9b8>)
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047c2:	4ac2      	ldr	r2, [pc, #776]	; (8004acc <proceedGluedValues+0x9bc>)
 80047c4:	48c2      	ldr	r0, [pc, #776]	; (8004ad0 <proceedGluedValues+0x9c0>)
 80047c6:	f001 fcaf 	bl	8006128 <__M_Error>
 80047ca:	2300      	movs	r3, #0
 80047cc:	e2fd      	b.n	8004dca <proceedGluedValues+0xcba>

        const u8 readRequestCnt = inputData[Rpos++];
 80047ce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	1c59      	adds	r1, r3, #1
 80047da:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80047de:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80047e2:	6011      	str	r1, [r2, #0]
 80047e4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80047e8:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        outputData[Wpos++] = READ_SEVERAL_VALUES_GLUED;
 80047f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8004800:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004804:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	4413      	add	r3, r2
 800480c:	2206      	movs	r2, #6
 800480e:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = readRequestCnt;
 8004810:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800481a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800481e:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	4413      	add	r3, r2
 8004826:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 800482a:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = inputData[Rpos++];
 800482c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800483c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004846:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	441a      	add	r2, r3
 800484e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 8004858:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800485c:	f5a1 71ac 	sub.w	r1, r1, #344	; 0x158
 8004860:	6809      	ldr	r1, [r1, #0]
 8004862:	440b      	add	r3, r1
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	701a      	strb	r2, [r3, #0]

        for(reg i = 0; i < readRequestCnt; ++i) {
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800486e:	e29c      	b.n	8004daa <proceedGluedValues+0xc9a>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field request size more than buffer");
 8004870:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3303      	adds	r3, #3
 800487c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004880:	429a      	cmp	r2, r3
 8004882:	d217      	bcs.n	80048b4 <proceedGluedValues+0x7a4>
 8004884:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004888:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3303      	adds	r3, #3
 8004890:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004894:	429a      	cmp	r2, r3
 8004896:	bf34      	ite	cc
 8004898:	2301      	movcc	r3, #1
 800489a:	2300      	movcs	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	4619      	mov	r1, r3
 80048a0:	4b8c      	ldr	r3, [pc, #560]	; (8004ad4 <proceedGluedValues+0x9c4>)
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80048a8:	4a88      	ldr	r2, [pc, #544]	; (8004acc <proceedGluedValues+0x9bc>)
 80048aa:	488b      	ldr	r0, [pc, #556]	; (8004ad8 <proceedGluedValues+0x9c8>)
 80048ac:	f001 fc3c 	bl	8006128 <__M_Error>
 80048b0:	2300      	movs	r3, #0
 80048b2:	e28a      	b.n	8004dca <proceedGluedValues+0xcba>
 80048b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048b8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    reg Rpos_internal = (*Rpos);
 80048c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80048c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80048d0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80048d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048d8:	4413      	add	r3, r2
 80048da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048de:	2302      	movs	r3, #2
 80048e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048ec:	f107 031c 	add.w	r3, r7, #28
 80048f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 80048f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d013      	beq.n	8004924 <proceedGluedValues+0x814>
 80048fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004900:	2b01      	cmp	r3, #1
 8004902:	d106      	bne.n	8004912 <proceedGluedValues+0x802>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e009      	b.n	8004926 <proceedGluedValues+0x816>
    default: memcpy(to, from, n); break;
 8004912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004916:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800491a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800491e:	f004 ffad 	bl	800987c <memcpy>
 8004922:	e000      	b.n	8004926 <proceedGluedValues+0x816>
    case 0: break;
 8004924:	bf00      	nop
}
 8004926:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8004928:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800492c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	b29a      	uxth	r2, r3
 8004934:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004938:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800493c:	601a      	str	r2, [r3, #0]
    return entityNumber;
 800493e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004942:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004946:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8004948:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800494c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004950:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 8004952:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004956:	3302      	adds	r3, #2
 8004958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800495c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004964:	4413      	add	r3, r2
 8004966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fieldNumber = *(inputData);
 800496a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    return fieldNumber;
 8004974:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8004978:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800497c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004980:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8004982:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004986:	3301      	adds	r3, #1
 8004988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*Rpos) = Rpos_internal;
 800498c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004994:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 800499c:	4b4f      	ldr	r3, [pc, #316]	; (8004adc <proceedGluedValues+0x9cc>)
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            EntityField* const field = &entity->fields[fieldNumber];
 80049b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049be:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	015b      	lsls	r3, r3, #5
 80049c6:	4413      	add	r3, r2
 80049c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80049cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049d0:	891b      	ldrh	r3, [r3, #8]
 80049d2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80049d6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80049e4:	429a      	cmp	r2, r3
 80049e6:	f240 81d9 	bls.w	8004d9c <proceedGluedValues+0xc8c>
 80049ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049ee:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 80049f8:	429a      	cmp	r2, r3
 80049fa:	f240 81cf 	bls.w	8004d9c <proceedGluedValues+0xc8c>
                const reg typeLen = getMYCTypeLen(field->type);
 80049fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a02:	7e1b      	ldrb	r3, [r3, #24]
 8004a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if(type < TYPE_ARRAY_LENGTH) {
 8004a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a0c:	2b11      	cmp	r3, #17
 8004a0e:	d805      	bhi.n	8004a1c <proceedGluedValues+0x90c>
        return typeLengthMappingArray[type];
 8004a10:	4a33      	ldr	r2, [pc, #204]	; (8004ae0 <proceedGluedValues+0x9d0>)
 8004a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1a:	e000      	b.n	8004a1e <proceedGluedValues+0x90e>
    return 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

                ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");
 8004a22:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004a30:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d219      	bcs.n	8004a6e <proceedGluedValues+0x95e>
 8004a3a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a42:	4413      	add	r3, r2
 8004a44:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004a48:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	bf34      	ite	cc
 8004a52:	2301      	movcc	r3, #1
 8004a54:	2300      	movcs	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <proceedGluedValues+0x9d4>)
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	f240 2313 	movw	r3, #531	; 0x213
 8004a62:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <proceedGluedValues+0x9bc>)
 8004a64:	4820      	ldr	r0, [pc, #128]	; (8004ae8 <proceedGluedValues+0x9d8>)
 8004a66:	f001 fb5f 	bl	8006128 <__M_Error>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e1ad      	b.n	8004dca <proceedGluedValues+0xcba>

                ptr = (entity->pointer + field->shift);
 8004a6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 8004a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004a8a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a94:	440b      	add	r3, r1
 8004a96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a98:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004a9c:	67ba      	str	r2, [r7, #120]	; 0x78
 8004a9e:	677b      	str	r3, [r7, #116]	; 0x74
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa4:	673b      	str	r3, [r7, #112]	; 0x70
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d056      	beq.n	8004b5e <proceedGluedValues+0xa4e>
 8004ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d051      	beq.n	8004b5e <proceedGluedValues+0xa4e>
										const void* reg_ptr_from = ptr ? (const void*) (* REG_TYPE_DC(ptr)) : 0;
 8004aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <proceedGluedValues+0x9dc>
 8004ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	e013      	b.n	8004aee <proceedGluedValues+0x9de>
 8004ac6:	bf00      	nop
 8004ac8:	0800fbcc 	.word	0x0800fbcc
 8004acc:	0800f224 	.word	0x0800f224
 8004ad0:	0800fc20 	.word	0x0800fc20
 8004ad4:	0800fc3c 	.word	0x0800fc3c
 8004ad8:	0800fb4c 	.word	0x0800fb4c
 8004adc:	20000304 	.word	0x20000304
 8004ae0:	08010f7c 	.word	0x08010f7c
 8004ae4:	0800fb90 	.word	0x0800fb90
 8004ae8:	0800f874 	.word	0x0800f874
 8004aec:	2300      	movs	r3, #0
 8004aee:	66fb      	str	r3, [r7, #108]	; 0x6c
										if(reg_ptr_from) {
 8004af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d02d      	beq.n	8004b52 <proceedGluedValues+0xa42>
											const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 8004af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004afe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	2304      	movs	r3, #4
 8004b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b08:	f107 0318 	add.w	r3, r7, #24
 8004b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b0e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b18:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d015      	beq.n	8004b4c <proceedGluedValues+0xa3c>
 8004b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d108      	bne.n	8004b38 <proceedGluedValues+0xa28>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	e00a      	b.n	8004b4e <proceedGluedValues+0xa3e>
    default: memcpy(to, from, n); break;
 8004b38:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b42:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	f004 fe99 	bl	800987c <memcpy>
 8004b4a:	e000      	b.n	8004b4e <proceedGluedValues+0xa3e>
    case 0: break;
 8004b4c:	bf00      	nop
}
 8004b4e:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004b50:	e106      	b.n	8004d60 <proceedGluedValues+0xc50>
											memset(outputData, 0, sizeof(reg));
 8004b52:	2204      	movs	r2, #4
 8004b54:	2100      	movs	r1, #0
 8004b56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004b58:	f004 feb8 	bl	80098cc <memset>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004b5c:	e100      	b.n	8004d60 <proceedGluedValues+0xc50>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8004b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d04d      	beq.n	8004c04 <proceedGluedValues+0xaf4>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 8004b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <proceedGluedValues+0xa64>
 8004b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	e000      	b.n	8004b76 <proceedGluedValues+0xa66>
 8004b74:	2300      	movs	r3, #0
 8004b76:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004b7a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b88:	2204      	movs	r2, #4
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b94:	f107 0214 	add.w	r2, r7, #20
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004b9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ba2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ba4:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004ba6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d025      	beq.n	8004c00 <proceedGluedValues+0xaf0>
 8004bb4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d10c      	bne.n	8004bdc <proceedGluedValues+0xacc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004bc2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e012      	b.n	8004c02 <proceedGluedValues+0xaf2>
    default: memcpy(to, from, n); break;
 8004bdc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004be0:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8004be4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004be8:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8004bec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	6809      	ldr	r1, [r1, #0]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	f004 fe3f 	bl	800987c <memcpy>
 8004bfe:	e000      	b.n	8004c02 <proceedGluedValues+0xaf2>
    case 0: break;
 8004c00:	bf00      	nop
}
 8004c02:	e0ad      	b.n	8004d60 <proceedGluedValues+0xc50>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8004c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d05e      	beq.n	8004ccc <proceedGluedValues+0xbbc>
										const void* reg_ptr_from = ptr ? (const void *)(* REG_TYPE_DC(ptr)) : 0;
 8004c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <proceedGluedValues+0xb0c>
 8004c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	e000      	b.n	8004c1e <proceedGluedValues+0xb0e>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c26:	601a      	str	r2, [r3, #0]
										if(reg_ptr_from) {
 8004c28:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d044      	beq.n	8004cc0 <proceedGluedValues+0xbb0>
 8004c36:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c4a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004c4e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c60:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004c62:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d025      	beq.n	8004cbc <proceedGluedValues+0xbac>
 8004c70:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10c      	bne.n	8004c98 <proceedGluedValues+0xb88>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004c7e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e012      	b.n	8004cbe <proceedGluedValues+0xbae>
    default: memcpy(to, from, n); break;
 8004c98:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c9c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8004ca0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ca4:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 8004ca8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	6809      	ldr	r1, [r1, #0]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	f004 fde1 	bl	800987c <memcpy>
 8004cba:	e000      	b.n	8004cbe <proceedGluedValues+0xbae>
    case 0: break;
 8004cbc:	bf00      	nop
}
 8004cbe:	e04f      	b.n	8004d60 <proceedGluedValues+0xc50>
											memset(outputData, 0, typeLen);
 8004cc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004cc6:	f004 fe01 	bl	80098cc <memset>
}
 8004cca:	e049      	b.n	8004d60 <proceedGluedValues+0xc50>
                                    	if(ptr) {
 8004ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d040      	beq.n	8004d54 <proceedGluedValues+0xc44>
 8004cd2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004ce2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ce6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004cf4:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004cf6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cfa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d025      	beq.n	8004d50 <proceedGluedValues+0xc40>
 8004d04:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d10c      	bne.n	8004d2c <proceedGluedValues+0xc1c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004d12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d16:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e012      	b.n	8004d52 <proceedGluedValues+0xc42>
    default: memcpy(to, from, n); break;
 8004d2c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d30:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8004d34:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d38:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 8004d3c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004d40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	6809      	ldr	r1, [r1, #0]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	f004 fd97 	bl	800987c <memcpy>
 8004d4e:	e000      	b.n	8004d52 <proceedGluedValues+0xc42>
    case 0: break;
 8004d50:	bf00      	nop
}
 8004d52:	e005      	b.n	8004d60 <proceedGluedValues+0xc50>
                                    		memset(outputData, 0, typeLen);
 8004d54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d56:	2100      	movs	r1, #0
 8004d58:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004d5a:	f004 fdb7 	bl	80098cc <memset>
}
 8004d5e:	e7ff      	b.n	8004d60 <proceedGluedValues+0xc50>
 8004d60:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8004d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8004d6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00b      	beq.n	8004d8c <proceedGluedValues+0xc7c>
                    __entityCallback(entity, field, ptr, field->rdCallback.context);
 8004d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8004d7e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004d82:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004d86:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004d8a:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_READ_CALLBACK */

                Wpos += typeLen;
 8004d8c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d94:	4413      	add	r3, r2
 8004d96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8004d9a:	e001      	b.n	8004da0 <proceedGluedValues+0xc90>
            } else {
                return ENTITY_ERROR;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e014      	b.n	8004dca <proceedGluedValues+0xcba>
        for(reg i = 0; i < readRequestCnt; ++i) {
 8004da0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004da4:	3301      	adds	r3, #1
 8004da6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dae:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004db2:	429a      	cmp	r2, r3
 8004db4:	f4ff ad5c 	bcc.w	8004870 <proceedGluedValues+0x760>
            }
        }
    }

    (*size) = Wpos;
 8004db8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004dbc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004dc6:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    UNUSED(inputMsgSize);
    return ENTITY_OK;
 8004dc8:	2301      	movs	r3, #1
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd90      	pop	{r4, r7, pc}

08004dd4 <right_rot>:
 * @param value The value to be rotated.
 * @param count The number of bits to rotate by.
 * @return The rotated value.
 */
static inline u32 right_rot(u32 value, unsigned int count)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
	/*
	 * Defined behaviour in standard C for all count where 0 < count < 32, which is what we need here.
	 */
	return value >> count | value << (32 - count);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	fa62 f303 	ror.w	r3, r2, r3
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <consume_chunk>:
 * @param p Pointer to the chunk data, which has a standard length.
 *
 * @note This is the SHA-256 work horse.
 */
static inline void consume_chunk(u32 *h, const u8 *p)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b0a5      	sub	sp, #148	; 0x94
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
	unsigned i, j;
	u32 ah[8];

	/* Initialize working variables to current hash value: */
	for (i = 0; i < 8; i++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e04:	e011      	b.n	8004e2a <consume_chunk+0x36>
		ah[i] = h[i];
 8004e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	3390      	adds	r3, #144	; 0x90
 8004e1a:	443b      	add	r3, r7
 8004e1c:	f843 2c48 	str.w	r2, [r3, #-72]
	for (i = 0; i < 8; i++)
 8004e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e24:	3301      	adds	r3, #1
 8004e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e2e:	2b07      	cmp	r3, #7
 8004e30:	d9e9      	bls.n	8004e06 <consume_chunk+0x12>
	 * message schedule array
	 */
	u32 w[16];

	/* Compression function main loop: */
	for (i = 0; i < 4; i++) {
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e38:	e11a      	b.n	8005070 <consume_chunk+0x27c>
		for (j = 0; j < 16; j++) {
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e40:	e10c      	b.n	800505c <consume_chunk+0x268>
			if (i == 0) {
 8004e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11b      	bne.n	8004e82 <consume_chunk+0x8e>
				w[j] =
				    (u32)p[0] << 24 | (u32)p[1] << 16 | (u32)p[2] << 8 | (u32)p[3];
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	061a      	lsls	r2, r3, #24
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	4313      	orrs	r3, r2
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	3203      	adds	r2, #3
 8004e68:	7812      	ldrb	r2, [r2, #0]
 8004e6a:	431a      	orrs	r2, r3
				w[j] =
 8004e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	3390      	adds	r3, #144	; 0x90
 8004e74:	443b      	add	r3, r7
 8004e76:	f843 2c88 	str.w	r2, [r3, #-136]
				p += 4;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	e07a      	b.n	8004f78 <consume_chunk+0x184>
			} else {
				/* Extend the first 16 words into the remaining 48 words w[16..63] of the
				 * message schedule array: */
				const u32 s0 = right_rot(w[(j + 1) & 0xf], 7) ^ right_rot(w[(j + 1) & 0xf], 18) ^
 8004e82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e86:	3301      	adds	r3, #1
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	3390      	adds	r3, #144	; 0x90
 8004e90:	443b      	add	r3, r7
 8004e92:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004e96:	2107      	movs	r1, #7
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff ff9b 	bl	8004dd4 <right_rot>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	3390      	adds	r3, #144	; 0x90
 8004eae:	443b      	add	r3, r7
 8004eb0:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004eb4:	2112      	movs	r1, #18
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff8c 	bl	8004dd4 <right_rot>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	ea84 0203 	eor.w	r2, r4, r3
						    (w[(j + 1) & 0xf] >> 3);
 8004ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3390      	adds	r3, #144	; 0x90
 8004ed0:	443b      	add	r3, r7
 8004ed2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004ed6:	08db      	lsrs	r3, r3, #3
				const u32 s0 = right_rot(w[(j + 1) & 0xf], 7) ^ right_rot(w[(j + 1) & 0xf], 18) ^
 8004ed8:	4053      	eors	r3, r2
 8004eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				const u32 s1 = right_rot(w[(j + 14) & 0xf], 17) ^
 8004ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ee2:	330e      	adds	r3, #14
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	3390      	adds	r3, #144	; 0x90
 8004eec:	443b      	add	r3, r7
 8004eee:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004ef2:	2111      	movs	r1, #17
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ff6d 	bl	8004dd4 <right_rot>
 8004efa:	4604      	mov	r4, r0
						    right_rot(w[(j + 14) & 0xf], 19) ^ (w[(j + 14) & 0xf] >> 10);
 8004efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f00:	330e      	adds	r3, #14
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	3390      	adds	r3, #144	; 0x90
 8004f0a:	443b      	add	r3, r7
 8004f0c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004f10:	2113      	movs	r1, #19
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff ff5e 	bl	8004dd4 <right_rot>
 8004f18:	4603      	mov	r3, r0
				const u32 s1 = right_rot(w[(j + 14) & 0xf], 17) ^
 8004f1a:	ea84 0203 	eor.w	r2, r4, r3
						    right_rot(w[(j + 14) & 0xf], 19) ^ (w[(j + 14) & 0xf] >> 10);
 8004f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f22:	330e      	adds	r3, #14
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	3390      	adds	r3, #144	; 0x90
 8004f2c:	443b      	add	r3, r7
 8004f2e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004f32:	0a9b      	lsrs	r3, r3, #10
				const u32 s1 = right_rot(w[(j + 14) & 0xf], 17) ^
 8004f34:	4053      	eors	r3, r2
 8004f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				w[j] = w[j] + s0 + w[(j + 9) & 0xf] + s1;
 8004f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	3390      	adds	r3, #144	; 0x90
 8004f42:	443b      	add	r3, r7
 8004f44:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8004f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4c:	441a      	add	r2, r3
 8004f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f52:	3309      	adds	r3, #9
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	3390      	adds	r3, #144	; 0x90
 8004f5c:	443b      	add	r3, r7
 8004f5e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004f62:	441a      	add	r2, r3
 8004f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f68:	441a      	add	r2, r3
 8004f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	3390      	adds	r3, #144	; 0x90
 8004f72:	443b      	add	r3, r7
 8004f74:	f843 2c88 	str.w	r2, [r3, #-136]
			}
			const u32 s1 = right_rot(ah[4], 6) ^ right_rot(ah[4], 11) ^ right_rot(ah[4], 25);
 8004f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f7a:	2106      	movs	r1, #6
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ff29 	bl	8004dd4 <right_rot>
 8004f82:	4604      	mov	r4, r0
 8004f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f86:	210b      	movs	r1, #11
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ff23 	bl	8004dd4 <right_rot>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	405c      	eors	r4, r3
 8004f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f94:	2119      	movs	r1, #25
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ff1c 	bl	8004dd4 <right_rot>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4063      	eors	r3, r4
 8004fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
			const u32 ch = (ah[4] & ah[5]) ^ (~ah[4] & ah[6]);
 8004fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004faa:	43d9      	mvns	r1, r3
 8004fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fae:	400b      	ands	r3, r1
 8004fb0:	4053      	eors	r3, r2
 8004fb2:	67bb      	str	r3, [r7, #120]	; 0x78
			    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116,
			    0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
			    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7,
			    0xc67178f2};

			const u32 temp1 = ah[7] + s1 + ch + k[i << 4 | j] + w[j];
 8004fb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb8:	441a      	add	r2, r3
 8004fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fbc:	441a      	add	r2, r3
 8004fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc2:	0119      	lsls	r1, r3, #4
 8004fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	493f      	ldr	r1, [pc, #252]	; (80050c8 <consume_chunk+0x2d4>)
 8004fcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	3390      	adds	r3, #144	; 0x90
 8004fda:	443b      	add	r3, r7
 8004fdc:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	677b      	str	r3, [r7, #116]	; 0x74
			const u32 s0 = right_rot(ah[0], 2) ^ right_rot(ah[0], 13) ^ right_rot(ah[0], 22);
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fef3 	bl	8004dd4 <right_rot>
 8004fee:	4604      	mov	r4, r0
 8004ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff2:	210d      	movs	r1, #13
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff feed 	bl	8004dd4 <right_rot>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	405c      	eors	r4, r3
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005000:	2116      	movs	r1, #22
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fee6 	bl	8004dd4 <right_rot>
 8005008:	4603      	mov	r3, r0
 800500a:	4063      	eors	r3, r4
 800500c:	673b      	str	r3, [r7, #112]	; 0x70
			const u32 maj = (ah[0] & ah[1]) ^ (ah[0] & ah[2]) ^ (ah[1] & ah[2]);
 800500e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005010:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005014:	404b      	eors	r3, r1
 8005016:	401a      	ands	r2, r3
 8005018:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800501a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501c:	400b      	ands	r3, r1
 800501e:	4053      	eors	r3, r2
 8005020:	66fb      	str	r3, [r7, #108]	; 0x6c
			const u32 temp2 = s0 + maj;
 8005022:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005026:	4413      	add	r3, r2
 8005028:	66bb      	str	r3, [r7, #104]	; 0x68

			ah[7] = ah[6];
 800502a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800502c:	667b      	str	r3, [r7, #100]	; 0x64
			ah[6] = ah[5];
 800502e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005030:	663b      	str	r3, [r7, #96]	; 0x60
			ah[5] = ah[4];
 8005032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005034:	65fb      	str	r3, [r7, #92]	; 0x5c
			ah[4] = ah[3] + temp1;
 8005036:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503a:	4413      	add	r3, r2
 800503c:	65bb      	str	r3, [r7, #88]	; 0x58
			ah[3] = ah[2];
 800503e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005040:	657b      	str	r3, [r7, #84]	; 0x54
			ah[2] = ah[1];
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	653b      	str	r3, [r7, #80]	; 0x50
			ah[1] = ah[0];
 8005046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005048:	64fb      	str	r3, [r7, #76]	; 0x4c
			ah[0] = temp1 + temp2;
 800504a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800504c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800504e:	4413      	add	r3, r2
 8005050:	64bb      	str	r3, [r7, #72]	; 0x48
		for (j = 0; j < 16; j++) {
 8005052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005056:	3301      	adds	r3, #1
 8005058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800505c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005060:	2b0f      	cmp	r3, #15
 8005062:	f67f aeee 	bls.w	8004e42 <consume_chunk+0x4e>
	for (i = 0; i < 4; i++) {
 8005066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506a:	3301      	adds	r3, #1
 800506c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005074:	2b03      	cmp	r3, #3
 8005076:	f67f aee0 	bls.w	8004e3a <consume_chunk+0x46>
		}
	}

	/* Add the compressed chunk to the current hash value: */
	for (i = 0; i < 8; i++)
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005080:	e018      	b.n	80050b4 <consume_chunk+0x2c0>
		h[i] += ah[i];
 8005082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	6819      	ldr	r1, [r3, #0]
 800508e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	3390      	adds	r3, #144	; 0x90
 8005096:	443b      	add	r3, r7
 8005098:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800509c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4403      	add	r3, r0
 80050a6:	440a      	add	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 8; i++)
 80050aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050ae:	3301      	adds	r3, #1
 80050b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80050b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050b8:	2b07      	cmp	r3, #7
 80050ba:	d9e2      	bls.n	8005082 <consume_chunk+0x28e>
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	3794      	adds	r7, #148	; 0x94
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}
 80050c6:	bf00      	nop
 80050c8:	08010e38 	.word	0x08010e38

080050cc <sha_256_init>:
/*
 * Public functions. See header file for documentation.
 */

void sha_256_init(Sha_256 *sha_256, u8 hash[SIZE_OF_SHA_256_HASH])
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	sha_256->hash = hash;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	601a      	str	r2, [r3, #0]
	sha_256->chunk_pos = sha_256->chunk;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
	sha_256->space_left = SIZE_OF_SHA_256_CHUNK;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	649a      	str	r2, [r3, #72]	; 0x48
	sha_256->total_len = 0;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	64da      	str	r2, [r3, #76]	; 0x4c
	/*
	 * Initialize hash values (first 32 bits of the fractional parts of the square roots of the first 8 primes
	 * 2..19):
	 */
	sha_256->h[0] = 0x6a09e667;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0e      	ldr	r2, [pc, #56]	; (800512c <sha_256_init+0x60>)
 80050f4:	651a      	str	r2, [r3, #80]	; 0x50
	sha_256->h[1] = 0xbb67ae85;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <sha_256_init+0x64>)
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
	sha_256->h[2] = 0x3c6ef372;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a0d      	ldr	r2, [pc, #52]	; (8005134 <sha_256_init+0x68>)
 8005100:	659a      	str	r2, [r3, #88]	; 0x58
	sha_256->h[3] = 0xa54ff53a;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <sha_256_init+0x6c>)
 8005106:	65da      	str	r2, [r3, #92]	; 0x5c
	sha_256->h[4] = 0x510e527f;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <sha_256_init+0x70>)
 800510c:	661a      	str	r2, [r3, #96]	; 0x60
	sha_256->h[5] = 0x9b05688c;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <sha_256_init+0x74>)
 8005112:	665a      	str	r2, [r3, #100]	; 0x64
	sha_256->h[6] = 0x1f83d9ab;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0b      	ldr	r2, [pc, #44]	; (8005144 <sha_256_init+0x78>)
 8005118:	669a      	str	r2, [r3, #104]	; 0x68
	sha_256->h[7] = 0x5be0cd19;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <sha_256_init+0x7c>)
 800511e:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	6a09e667 	.word	0x6a09e667
 8005130:	bb67ae85 	.word	0xbb67ae85
 8005134:	3c6ef372 	.word	0x3c6ef372
 8005138:	a54ff53a 	.word	0xa54ff53a
 800513c:	510e527f 	.word	0x510e527f
 8005140:	9b05688c 	.word	0x9b05688c
 8005144:	1f83d9ab 	.word	0x1f83d9ab
 8005148:	5be0cd19 	.word	0x5be0cd19

0800514c <sha_256_write>:

void sha_256_write(Sha_256 *sha_256, const void *data, size_t len)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	sha_256->total_len += len;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	441a      	add	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	64da      	str	r2, [r3, #76]	; 0x4c

	const u8 *p = data;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	617b      	str	r3, [r7, #20]

	while (len > 0) {
 8005168:	e04a      	b.n	8005200 <sha_256_write+0xb4>
		/*
		 * If the input chunks have sizes that are multiples of the calculation chunk size, no copies are
		 * necessary. We operate directly on the input data instead.
		 */
		if (sha_256->space_left == SIZE_OF_SHA_256_CHUNK && len >= SIZE_OF_SHA_256_CHUNK) {
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d10f      	bne.n	8005192 <sha_256_write+0x46>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b3f      	cmp	r3, #63	; 0x3f
 8005176:	d90c      	bls.n	8005192 <sha_256_write+0x46>
			consume_chunk(sha_256->h, p);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3350      	adds	r3, #80	; 0x50
 800517c:	6979      	ldr	r1, [r7, #20]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fe38 	bl	8004df4 <consume_chunk>
			len -= SIZE_OF_SHA_256_CHUNK;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3b40      	subs	r3, #64	; 0x40
 8005188:	607b      	str	r3, [r7, #4]
			p += SIZE_OF_SHA_256_CHUNK;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	3340      	adds	r3, #64	; 0x40
 800518e:	617b      	str	r3, [r7, #20]
			continue;
 8005190:	e036      	b.n	8005200 <sha_256_write+0xb4>
		}
		/* General case, no particular optimization. */
		const size_t consumed_len = len < sha_256->space_left ? len : sha_256->space_left;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4293      	cmp	r3, r2
 800519a:	bf28      	it	cs
 800519c:	4613      	movcs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
		memcpy(sha_256->chunk_pos, p, consumed_len);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	6979      	ldr	r1, [r7, #20]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f004 fb67 	bl	800987c <memcpy>
		sha_256->space_left -= consumed_len;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad2      	subs	r2, r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	649a      	str	r2, [r3, #72]	; 0x48
		len -= consumed_len;
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	607b      	str	r3, [r7, #4]
		p += consumed_len;
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
		if (sha_256->space_left == 0) {
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d110      	bne.n	80051f4 <sha_256_write+0xa8>
			consume_chunk(sha_256->h, sha_256->chunk);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f7ff fe08 	bl	8004df4 <consume_chunk>
			sha_256->chunk_pos = sha_256->chunk;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1d1a      	adds	r2, r3, #4
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
			sha_256->space_left = SIZE_OF_SHA_256_CHUNK;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2240      	movs	r2, #64	; 0x40
 80051f0:	649a      	str	r2, [r3, #72]	; 0x48
 80051f2:	e005      	b.n	8005200 <sha_256_write+0xb4>
		} else {
			sha_256->chunk_pos += consumed_len;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	645a      	str	r2, [r3, #68]	; 0x44
	while (len > 0) {
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1b1      	bne.n	800516a <sha_256_write+0x1e>
		}
	}
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <sha_256_close>:

u8 *sha_256_close(Sha_256 *sha_256)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	; 0x28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	u8 *pos = sha_256->chunk_pos;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
	size_t space_left = sha_256->space_left;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005222:	623b      	str	r3, [r7, #32]
	u32 *const h = sha_256->h;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3350      	adds	r3, #80	; 0x50
 8005228:	613b      	str	r3, [r7, #16]

	/*
	 * The current chunk cannot be full. Otherwise, it would already have be consumed. I.e. there is space left for
	 * at least one byte. The next step in the calculation is to add a single one-bit to the data.
	 */
	*pos++ = 0x80;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	627a      	str	r2, [r7, #36]	; 0x24
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	701a      	strb	r2, [r3, #0]
	--space_left;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	3b01      	subs	r3, #1
 8005238:	623b      	str	r3, [r7, #32]
	/*
	 * Now, the last step is to add the total data length at the end of the last chunk, and zero padding before
	 * that. But we do not necessarily have enough space left. If not, we pad the current chunk with zeroes, and add
	 * an extra chunk at the end.
	 */
	if (space_left < TOTAL_LEN_LEN) {
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	2b07      	cmp	r3, #7
 800523e:	d80f      	bhi.n	8005260 <sha_256_close+0x50>
		memset(pos, 0x00, space_left);
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	2100      	movs	r1, #0
 8005244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005246:	f004 fb41 	bl	80098cc <memset>
		consume_chunk(h, sha_256->chunk);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	6938      	ldr	r0, [r7, #16]
 8005252:	f7ff fdcf 	bl	8004df4 <consume_chunk>
		pos = sha_256->chunk;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
		space_left = SIZE_OF_SHA_256_CHUNK;
 800525c:	2340      	movs	r3, #64	; 0x40
 800525e:	623b      	str	r3, [r7, #32]
	}
	const size_t left = space_left - TOTAL_LEN_LEN;
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	3b08      	subs	r3, #8
 8005264:	60fb      	str	r3, [r7, #12]
	memset(pos, 0x00, left);
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	2100      	movs	r1, #0
 800526a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800526c:	f004 fb2e 	bl	80098cc <memset>
	pos += left;
 8005270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
	size_t len = sha_256->total_len;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527c:	61fb      	str	r3, [r7, #28]
	pos[7] = (u8)(len << 3);
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	b2da      	uxtb	r2, r3
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	3307      	adds	r3, #7
 8005286:	00d2      	lsls	r2, r2, #3
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
	len >>= 5;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	61fb      	str	r3, [r7, #28]
	int i;
	for (i = 6; i >= 0; --i) {
 8005292:	2306      	movs	r3, #6
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e00b      	b.n	80052b0 <sha_256_close+0xa0>
		pos[i] = (u8)len;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529c:	4413      	add	r3, r2
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
		len >>= 8;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	61fb      	str	r3, [r7, #28]
	for (i = 6; i >= 0; --i) {
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	daf0      	bge.n	8005298 <sha_256_close+0x88>
	}
	consume_chunk(h, sha_256->chunk);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	6938      	ldr	r0, [r7, #16]
 80052be:	f7ff fd99 	bl	8004df4 <consume_chunk>
	/* Produce the final hash value (big-endian): */
	int j;
	u8 *const hash = sha_256->hash;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60bb      	str	r3, [r7, #8]
	for (i = 0, j = 0; i < 8; i++) {
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e039      	b.n	8005346 <sha_256_close+0x136>
		hash[j++] = (u8)(h[i] >> 24);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0e19      	lsrs	r1, r3, #24
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	617a      	str	r2, [r7, #20]
 80052e4:	461a      	mov	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4413      	add	r3, r2
 80052ea:	b2ca      	uxtb	r2, r1
 80052ec:	701a      	strb	r2, [r3, #0]
		hash[j++] = (u8)(h[i] >> 16);
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	0c19      	lsrs	r1, r3, #16
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	617a      	str	r2, [r7, #20]
 8005300:	461a      	mov	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4413      	add	r3, r2
 8005306:	b2ca      	uxtb	r2, r1
 8005308:	701a      	strb	r2, [r3, #0]
		hash[j++] = (u8)(h[i] >> 8);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4413      	add	r3, r2
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	0a19      	lsrs	r1, r3, #8
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	617a      	str	r2, [r7, #20]
 800531c:	461a      	mov	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4413      	add	r3, r2
 8005322:	b2ca      	uxtb	r2, r1
 8005324:	701a      	strb	r2, [r3, #0]
		hash[j++] = (u8)h[i];
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	617a      	str	r2, [r7, #20]
 8005336:	461a      	mov	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4413      	add	r3, r2
 800533c:	b2ca      	uxtb	r2, r1
 800533e:	701a      	strb	r2, [r3, #0]
	for (i = 0, j = 0; i < 8; i++) {
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	3301      	adds	r3, #1
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b07      	cmp	r3, #7
 800534a:	ddc2      	ble.n	80052d2 <sha_256_close+0xc2>
	}
	return sha_256->hash;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3728      	adds	r7, #40	; 0x28
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <calc_sha_256>:

void calc_sha_256(u8 hash[SIZE_OF_SHA_256_HASH], const void *input, size_t len)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b0a0      	sub	sp, #128	; 0x80
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
	Sha_256 sha_256;
	sha_256_init(&sha_256, hash);
 8005364:	f107 0310 	add.w	r3, r7, #16
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff feae 	bl	80050cc <sha_256_init>
	sha_256_write(&sha_256, input, len);
 8005370:	f107 0310 	add.w	r3, r7, #16
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fee7 	bl	800514c <sha_256_write>
	(void)sha_256_close(&sha_256);
 800537e:	f107 0310 	add.w	r3, r7, #16
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ff44 	bl	8005210 <sha_256_close>
}
 8005388:	bf00      	nop
 800538a:	3780      	adds	r7, #128	; 0x80
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <construct_binary_messages>:
    {NULL, SIZEOF_DATA13, "c23ce8a7895f4b21ec0daf37920ac0a262a220045a03eb2dfed48ef9b05aabea"}
#endif
};

static void construct_binary_messages(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
	memset(data7, 0x00, sizeof data7);
 8005394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005398:	2100      	movs	r1, #0
 800539a:	4808      	ldr	r0, [pc, #32]	; (80053bc <construct_binary_messages+0x2c>)
 800539c:	f004 fa96 	bl	80098cc <memset>
	memset(data8, 0x41, sizeof data8);
 80053a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053a4:	2141      	movs	r1, #65	; 0x41
 80053a6:	4806      	ldr	r0, [pc, #24]	; (80053c0 <construct_binary_messages+0x30>)
 80053a8:	f004 fa90 	bl	80098cc <memset>
	memset(data9, 0x55, sizeof data9);
 80053ac:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80053b0:	2155      	movs	r1, #85	; 0x55
 80053b2:	4804      	ldr	r0, [pc, #16]	; (80053c4 <construct_binary_messages+0x34>)
 80053b4:	f004 fa8a 	bl	80098cc <memset>
	vectors[9].input = data12;
	vectors[10].input = data11;
	vectors[11].input = data12;
	vectors[12].input = data13;
#endif
}
 80053b8:	bf00      	nop
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000310 	.word	0x20000310
 80053c0:	200006f8 	.word	0x200006f8
 80053c4:	20000ae0 	.word	0x20000ae0

080053c8 <destruct_binary_messages>:

static void destruct_binary_messages(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
#if LARGE_MESSAGES
	free(data11);
	free(data12);
	free(data13);
#endif
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <hash_to_string>:

static void hash_to_string(char string[65], const uint8_t hash[32])
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	size_t i;
	for (i = 0; i < 32; i++) {
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e010      	b.n	800540a <hash_to_string+0x32>
		string += sprintf(string, "%02x", hash[i]);
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	490a      	ldr	r1, [pc, #40]	; (800541c <hash_to_string+0x44>)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f005 fc31 	bl	800ac5c <siprintf>
 80053fa:	4603      	mov	r3, r0
 80053fc:	461a      	mov	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 32; i++) {
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b1f      	cmp	r3, #31
 800540e:	d9eb      	bls.n	80053e8 <hash_to_string+0x10>
	}
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	08010234 	.word	0x08010234

08005420 <string_test>:

static int string_test(const char input[], const char output[])
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b09c      	sub	sp, #112	; 0x70
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	uint8_t hash[32];
	char hash_string[65];
	calc_sha_256(hash, input, strlen(input));
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fa feda 	bl	80001e4 <strlen>
 8005430:	4602      	mov	r2, r0
 8005432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff ff8d 	bl	8005358 <calc_sha_256>
	hash_to_string(hash_string, hash);
 800543e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005442:	f107 030c 	add.w	r3, r7, #12
 8005446:	4611      	mov	r1, r2
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ffc5 	bl	80053d8 <hash_to_string>
	printf("input: %s\n", input);
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	480f      	ldr	r0, [pc, #60]	; (8005490 <string_test+0x70>)
 8005452:	f005 fb17 	bl	800aa84 <iprintf>
	printf("hash : %s\n", hash_string);
 8005456:	f107 030c 	add.w	r3, r7, #12
 800545a:	4619      	mov	r1, r3
 800545c:	480d      	ldr	r0, [pc, #52]	; (8005494 <string_test+0x74>)
 800545e:	f005 fb11 	bl	800aa84 <iprintf>
	if (strcmp(output, hash_string)) {
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	4619      	mov	r1, r3
 8005468:	6838      	ldr	r0, [r7, #0]
 800546a:	f7fa feb1 	bl	80001d0 <strcmp>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <string_test+0x5e>
		printf("FAILURE!\n\n");
 8005474:	4808      	ldr	r0, [pc, #32]	; (8005498 <string_test+0x78>)
 8005476:	f005 fbd3 	bl	800ac20 <puts>
		return 1;
 800547a:	2301      	movs	r3, #1
 800547c:	e003      	b.n	8005486 <string_test+0x66>
	} else {
		printf("SUCCESS!\n\n");
 800547e:	4807      	ldr	r0, [pc, #28]	; (800549c <string_test+0x7c>)
 8005480:	f005 fbce 	bl	800ac20 <puts>
		return 0;
 8005484:	2300      	movs	r3, #0
	}
}
 8005486:	4618      	mov	r0, r3
 8005488:	3770      	adds	r7, #112	; 0x70
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	0801023c 	.word	0x0801023c
 8005494:	08010248 	.word	0x08010248
 8005498:	08010254 	.word	0x08010254
 800549c:	08010260 	.word	0x08010260

080054a0 <calc_sha_256_in_chunks>:
 */
#define CALC_IN_CHUNKS 1

#if CALC_IN_CHUNKS
static void calc_sha_256_in_chunks(uint8_t hash[SIZE_OF_SHA_256_HASH], const void *input, size_t len, size_t num_chunks)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b0a4      	sub	sp, #144	; 0x90
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
	Sha_256 sha_256;
	sha_256_init(&sha_256, hash);
 80054ae:	f107 0314 	add.w	r3, r7, #20
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fe09 	bl	80050cc <sha_256_init>

	if (num_chunks > 0) {
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d031      	beq.n	8005524 <calc_sha_256_in_chunks+0x84>
		const size_t chunk_size = len / num_chunks;
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		const size_t last_chunk_size = len % num_chunks;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	fb01 f202 	mul.w	r2, r1, r2
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		const uint8_t *p = input;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (num_chunks-- > 0) {
 80054e6:	e00f      	b.n	8005508 <calc_sha_256_in_chunks+0x68>
			sha_256_write(&sha_256, p, chunk_size);
 80054e8:	f107 0314 	add.w	r3, r7, #20
 80054ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054f0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fe29 	bl	800514c <sha_256_write>
			p += chunk_size;
 80054fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80054fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005502:	4413      	add	r3, r2
 8005504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (num_chunks-- > 0) {
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	1e5a      	subs	r2, r3, #1
 800550c:	603a      	str	r2, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1ea      	bne.n	80054e8 <calc_sha_256_in_chunks+0x48>
		}
		sha_256_write(&sha_256, p, last_chunk_size);
 8005512:	f107 0314 	add.w	r3, r7, #20
 8005516:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800551a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fe14 	bl	800514c <sha_256_write>
	}

	(void)sha_256_close(&sha_256);
 8005524:	f107 0314 	add.w	r3, r7, #20
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fe71 	bl	8005210 <sha_256_close>
}
 800552e:	bf00      	nop
 8005530:	3790      	adds	r7, #144	; 0x90
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <test>:
#if CALC_IN_CHUNKS
static int test(const uint8_t *input, size_t input_len, const char output[], size_t num_chunks)
#else
static int test(const uint8_t *input, size_t input_len, const char output[])
#endif
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b09e      	sub	sp, #120	; 0x78
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
	uint8_t hash[32];
	char hash_string[65];
	calc_sha_256(hash, input, input_len);
 8005546:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff ff02 	bl	8005358 <calc_sha_256>
	hash_to_string(hash_string, hash);
 8005554:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005558:	f107 0314 	add.w	r3, r7, #20
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff ff3a 	bl	80053d8 <hash_to_string>
	printf("input starts with 0x%02x, length %lu\n", *input, (unsigned long)input_len);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	4619      	mov	r1, r3
 800556c:	4822      	ldr	r0, [pc, #136]	; (80055f8 <test+0xc0>)
 800556e:	f005 fa89 	bl	800aa84 <iprintf>
	printf("hash: %s\n", hash_string);
 8005572:	f107 0314 	add.w	r3, r7, #20
 8005576:	4619      	mov	r1, r3
 8005578:	4820      	ldr	r0, [pc, #128]	; (80055fc <test+0xc4>)
 800557a:	f005 fa83 	bl	800aa84 <iprintf>
	if (strcmp(output, hash_string)) {
 800557e:	f107 0314 	add.w	r3, r7, #20
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7fa fe23 	bl	80001d0 <strcmp>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <test+0x62>
		printf("FAILURE!\n\n");
 8005590:	481b      	ldr	r0, [pc, #108]	; (8005600 <test+0xc8>)
 8005592:	f005 fb45 	bl	800ac20 <puts>
		return 1;
 8005596:	2301      	movs	r3, #1
 8005598:	e029      	b.n	80055ee <test+0xb6>
#if CALC_IN_CHUNKS
	} else {
		printf("SUCCESS!\n");
 800559a:	481a      	ldr	r0, [pc, #104]	; (8005604 <test+0xcc>)
 800559c:	f005 fb40 	bl	800ac20 <puts>
	}
	calc_sha_256_in_chunks(hash, input, input_len, num_chunks);
 80055a0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	68f9      	ldr	r1, [r7, #12]
 80055aa:	f7ff ff79 	bl	80054a0 <calc_sha_256_in_chunks>
	hash_to_string(hash_string, hash);
 80055ae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80055b2:	f107 0314 	add.w	r3, r7, #20
 80055b6:	4611      	mov	r1, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff ff0d 	bl	80053d8 <hash_to_string>
	printf("hash in chunks: %s\n", hash_string);
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	4619      	mov	r1, r3
 80055c4:	4810      	ldr	r0, [pc, #64]	; (8005608 <test+0xd0>)
 80055c6:	f005 fa5d 	bl	800aa84 <iprintf>
	if (strcmp(output, hash_string)) {
 80055ca:	f107 0314 	add.w	r3, r7, #20
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7fa fdfd 	bl	80001d0 <strcmp>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <test+0xae>
		printf("FAILURE!\n\n");
 80055dc:	4808      	ldr	r0, [pc, #32]	; (8005600 <test+0xc8>)
 80055de:	f005 fb1f 	bl	800ac20 <puts>
		return 1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e003      	b.n	80055ee <test+0xb6>
#endif
	} else {
		printf("SUCCESS!\n\n");
 80055e6:	4809      	ldr	r0, [pc, #36]	; (800560c <test+0xd4>)
 80055e8:	f005 fb1a 	bl	800ac20 <puts>
		return 0;
 80055ec:	2300      	movs	r3, #0
	}
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3778      	adds	r7, #120	; 0x78
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	0801026c 	.word	0x0801026c
 80055fc:	08010294 	.word	0x08010294
 8005600:	08010254 	.word	0x08010254
 8005604:	080102a0 	.word	0x080102a0
 8005608:	080102ac 	.word	0x080102ac
 800560c:	08010260 	.word	0x08010260

08005610 <sha256_test>:

int sha256_test(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
	size_t i;
	for (i = 0; i < (sizeof STRING_VECTORS / sizeof(struct string_vector)); i++) {
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e014      	b.n	8005646 <sha256_test+0x36>
		const struct string_vector *vector = &STRING_VECTORS[i];
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <sha256_test+0xd0>)
 8005622:	4413      	add	r3, r2
 8005624:	607b      	str	r3, [r7, #4]
		if (string_test(vector->input, vector->output))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f7ff fef5 	bl	8005420 <string_test>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <sha256_test+0x30>
			return 1;
 800563c:	2301      	movs	r3, #1
 800563e:	e04b      	b.n	80056d8 <sha256_test+0xc8>
	for (i = 0; i < (sizeof STRING_VECTORS / sizeof(struct string_vector)); i++) {
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b06      	cmp	r3, #6
 800564a:	d9e7      	bls.n	800561c <sha256_test+0xc>
	}
	construct_binary_messages();
 800564c:	f7ff fea0 	bl	8005390 <construct_binary_messages>
	for (i = 0; i < (sizeof vectors / sizeof(struct vector)); i++) {
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e01a      	b.n	800568c <sha256_test+0x7c>
		const struct vector *vector = &vectors[i];
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4a20      	ldr	r2, [pc, #128]	; (80056e4 <sha256_test+0xd4>)
 8005662:	4413      	add	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]
#if CALC_IN_CHUNKS
		if (test(vector->input, vector->input_len, vector->output, 5)) {
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	2305      	movs	r3, #5
 8005674:	f7ff ff60 	bl	8005538 <test>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <sha256_test+0x76>
#else
		if (test(vector->input, vector->input_len, vector->output)) {
#endif
			destruct_binary_messages();
 800567e:	f7ff fea3 	bl	80053c8 <destruct_binary_messages>
			return 1;
 8005682:	2301      	movs	r3, #1
 8005684:	e028      	b.n	80056d8 <sha256_test+0xc8>
	for (i = 0; i < (sizeof vectors / sizeof(struct vector)); i++) {
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b08      	cmp	r3, #8
 8005690:	d9e1      	bls.n	8005656 <sha256_test+0x46>
		}
	}
	destruct_binary_messages();
 8005692:	f7ff fe99 	bl	80053c8 <destruct_binary_messages>
#if CALC_IN_CHUNKS
	/* Test some silly corner cases. Only empty chunks and no chunk at all. */
	assert(strlen(STRING_VECTORS[0].input) == 0);
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <sha256_test+0xd8>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <sha256_test+0x9a>
 800569e:	4b13      	ldr	r3, [pc, #76]	; (80056ec <sha256_test+0xdc>)
 80056a0:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <sha256_test+0xe0>)
 80056a2:	21d7      	movs	r1, #215	; 0xd7
 80056a4:	4813      	ldr	r0, [pc, #76]	; (80056f4 <sha256_test+0xe4>)
 80056a6:	f003 fdfb 	bl	80092a0 <__assert_func>
	if (test((const uint8_t *)STRING_VECTORS[0].input, strlen(STRING_VECTORS[0].input), STRING_VECTORS[0].output,
 80056aa:	480f      	ldr	r0, [pc, #60]	; (80056e8 <sha256_test+0xd8>)
 80056ac:	4a12      	ldr	r2, [pc, #72]	; (80056f8 <sha256_test+0xe8>)
 80056ae:	2305      	movs	r3, #5
 80056b0:	2100      	movs	r1, #0
 80056b2:	f7ff ff41 	bl	8005538 <test>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <sha256_test+0xb0>
		 5))
		return 1;
 80056bc:	2301      	movs	r3, #1
 80056be:	e00b      	b.n	80056d8 <sha256_test+0xc8>
	if (test((const uint8_t *)STRING_VECTORS[0].input, strlen(STRING_VECTORS[0].input), STRING_VECTORS[0].output,
 80056c0:	4809      	ldr	r0, [pc, #36]	; (80056e8 <sha256_test+0xd8>)
 80056c2:	4a0d      	ldr	r2, [pc, #52]	; (80056f8 <sha256_test+0xe8>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	f7ff ff36 	bl	8005538 <test>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <sha256_test+0xc6>
		 0))
		return 1;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <sha256_test+0xc8>
#endif
	return 0;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	08010f38 	.word	0x08010f38
 80056e4:	2000000c 	.word	0x2000000c
 80056e8:	0800fc74 	.word	0x0800fc74
 80056ec:	080102c0 	.word	0x080102c0
 80056f0:	08010f70 	.word	0x08010f70
 80056f4:	080102e8 	.word	0x080102e8
 80056f8:	0800fc78 	.word	0x0800fc78

080056fc <rawParser_dma_init>:
    }
    return self;
}

int rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af02      	add	r7, sp, #8
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: No input data valid ");
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10f      	bne.n	800572e <rawParser_dma_init+0x32>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	4619      	mov	r1, r3
 800571c:	4b23      	ldr	r3, [pc, #140]	; (80057ac <rawParser_dma_init+0xb0>)
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2348      	movs	r3, #72	; 0x48
 8005722:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <rawParser_dma_init+0xb4>)
 8005724:	4823      	ldr	r0, [pc, #140]	; (80057b4 <rawParser_dma_init+0xb8>)
 8005726:	f000 fcff 	bl	8006128 <__M_Error>
 800572a:	2300      	movs	r3, #0
 800572c:	e03a      	b.n	80057a4 <rawParser_dma_init+0xa8>

    self->m_startByte = packStart;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	701a      	strb	r2, [r3, #0]
    self->m_receivePackLen = 0;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
    self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	22ff      	movs	r2, #255	; 0xff
 800573e:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	22ff      	movs	r2, #255	; 0xff
 8005746:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

    self->m_triggerSB = 0;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
    self->m_receivePos = 0;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    self->m_receiveReadPos = 0;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    self->m_receiveHandlePos = 0;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    self->TX.data = self->m_sendBuffer;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#else
    self->TX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    self->TX.size = 0;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
    self->RX.data = self->m_receiveFrameBuffer;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f503 7202 	add.w	r2, r3, #520	; 0x208
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
#else
    self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

    self->RX.size = 0;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

    self->uniRXPosition = 0;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return D_RAW_P_OK;
 80057a2:	2301      	movs	r3, #1
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	0801039c 	.word	0x0801039c
 80057b0:	08010310 	.word	0x08010310
 80057b4:	0801034c 	.word	0x0801034c

080057b8 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af04      	add	r7, sp, #16
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
 80057c4:	4613      	mov	r3, r2
 80057c6:	70bb      	strb	r3, [r7, #2]
    if (newFrame) {
 80057c8:	78bb      	ldrb	r3, [r7, #2]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00b      	beq.n	80057e6 <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
    	//M_Assert_Warning(self->receiveState < RAW_P_DMA_RECEIVE_CRC_0 , M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: last packet error!!!");

    	self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	22ff      	movs	r2, #255	; 0xff
 80057d2:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

        self->m_receiveHandlePos = 0;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
    }

    switch(self->receiveState) {
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 80057ec:	2b0d      	cmp	r3, #13
 80057ee:	f200 80d1 	bhi.w	8005994 <RawParser_dma_proceedByte+0x1dc>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <RawParser_dma_proceedByte+0x40>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	08005831 	.word	0x08005831
 80057fc:	08005995 	.word	0x08005995
 8005800:	08005995 	.word	0x08005995
 8005804:	080058bf 	.word	0x080058bf
 8005808:	08005911 	.word	0x08005911
 800580c:	08005995 	.word	0x08005995
 8005810:	08005995 	.word	0x08005995
 8005814:	08005995 	.word	0x08005995
 8005818:	08005995 	.word	0x08005995
 800581c:	08005995 	.word	0x08005995
 8005820:	08005995 	.word	0x08005995
 8005824:	08005995 	.word	0x08005995
 8005828:	08005959 	.word	0x08005959
 800582c:	0800597d 	.word	0x0800597d

    case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	4611      	mov	r1, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f7fc fa7a 	bl	8001d34 <fast_crc8_maxim_byte>
 8005840:	4603      	mov	r3, r0
 8005842:	461a      	mov	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        if(RECEIVE_EXTENDED_LEN_CMD == ch) {
            self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
        } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

            const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	78fa      	ldrb	r2, [r7, #3]
 8005850:	429a      	cmp	r2, r3
 8005852:	d902      	bls.n	800585a <RawParser_dma_proceedByte+0xa2>
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	3b01      	subs	r3, #1
 8005858:	e000      	b.n	800585c <RawParser_dma_proceedByte+0xa4>
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6053      	str	r3, [r2, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	60bb      	str	r3, [r7, #8]
            self->m_receiveHandlePos = 0;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2203      	movs	r2, #3
 8005872:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

            M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800587c:	d803      	bhi.n	8005886 <RawParser_dma_proceedByte+0xce>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 8089 	bne.w	8005998 <RawParser_dma_proceedByte+0x1e0>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588c:	d802      	bhi.n	8005894 <RawParser_dma_proceedByte+0xdc>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <RawParser_dma_proceedByte+0xe0>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <RawParser_dma_proceedByte+0xe2>
 8005898:	2300      	movs	r3, #0
 800589a:	b2d9      	uxtb	r1, r3
 800589c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058a0:	9302      	str	r3, [sp, #8]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	4b3f      	ldr	r3, [pc, #252]	; (80059a4 <RawParser_dma_proceedByte+0x1ec>)
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	23cd      	movs	r3, #205	; 0xcd
 80058ac:	4a3e      	ldr	r2, [pc, #248]	; (80059a8 <RawParser_dma_proceedByte+0x1f0>)
 80058ae:	483f      	ldr	r0, [pc, #252]	; (80059ac <RawParser_dma_proceedByte+0x1f4>)
 80058b0:	f000 fc58 	bl	8006164 <__M_Warning>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	220c      	movs	r2, #12
 80058b8:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
        }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        break;}
 80058bc:	e06c      	b.n	8005998 <RawParser_dma_proceedByte+0x1e0>

        break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    case RAW_P_DMA_RECEIVE_DATA: {
        reg rx_pos = self->m_receiveHandlePos;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 80058c4:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80058cc:	78fa      	ldrb	r2, [r7, #3]
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fc fa2f 	bl	8001d34 <fast_crc8_maxim_byte>
 80058d6:	4603      	mov	r3, r0
 80058d8:	461a      	mov	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
#endif /* D_RAW_P_CRC_ENA */

        self->RX.data[rx_pos] = ch;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 2624 	ldr.w	r2, [r3, #1572]	; 0x624
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	701a      	strb	r2, [r3, #0]
        ++rx_pos;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]

        if (rx_pos == self->m_receivePackLen) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d103      	bne.n	8005906 <RawParser_dma_proceedByte+0x14e>

#ifdef D_RAW_P_CRC_ENA
            D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
            self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2204      	movs	r2, #4
 8005902:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
            self->RX.size = self->m_receivePackLen;
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
        }

        self->m_receiveHandlePos = rx_pos;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        break;}
 800590e:	e044      	b.n	800599a <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

        if(self->m_receiveCalcCRC == ch) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	429a      	cmp	r2, r3
 800591a:	d109      	bne.n	8005930 <RawParser_dma_proceedByte+0x178>
            self->RX.size = self->m_receivePackLen;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	220d      	movs	r2, #13
 800592a:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
        self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

        break;}
 800592e:	e034      	b.n	800599a <RawParser_dma_proceedByte+0x1e2>
            M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive CRC8 error, rx_crc: %d, calc_crc: %d", ch, self->m_receiveCalcCRC);
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	f892 2608 	ldrb.w	r2, [r2, #1544]	; 0x608
 8005938:	9202      	str	r2, [sp, #8]
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <RawParser_dma_proceedByte+0x1f8>)
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	f240 1323 	movw	r3, #291	; 0x123
 8005944:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <RawParser_dma_proceedByte+0x1f0>)
 8005946:	2101      	movs	r1, #1
 8005948:	481a      	ldr	r0, [pc, #104]	; (80059b4 <RawParser_dma_proceedByte+0x1fc>)
 800594a:	f000 fc0b 	bl	8006164 <__M_Warning>
            self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	220c      	movs	r2, #12
 8005952:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        break;}
 8005956:	e020      	b.n	800599a <RawParser_dma_proceedByte+0x1e2>

#endif /* D_RAW_P_CRC_ENA */


    case RAW_P_DMA_RECEIVE_ERR:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive error, byte: %d, rx_len: %d, max_rxlen: %d", ch, self->m_receivePackLen, D_RAW_P_RX_BUF_SIZE);
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6852      	ldr	r2, [r2, #4]
 800595e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005962:	9103      	str	r1, [sp, #12]
 8005964:	9202      	str	r2, [sp, #8]
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <RawParser_dma_proceedByte+0x200>)
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8005970:	4a0d      	ldr	r2, [pc, #52]	; (80059a8 <RawParser_dma_proceedByte+0x1f0>)
 8005972:	2101      	movs	r1, #1
 8005974:	480f      	ldr	r0, [pc, #60]	; (80059b4 <RawParser_dma_proceedByte+0x1fc>)
 8005976:	f000 fbf5 	bl	8006164 <__M_Warning>
        break;
 800597a:	e00e      	b.n	800599a <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_OK:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: LAST Received OK, byte: %d is not received because no SB", ch);
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <RawParser_dma_proceedByte+0x204>)
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005988:	4a07      	ldr	r2, [pc, #28]	; (80059a8 <RawParser_dma_proceedByte+0x1f0>)
 800598a:	2101      	movs	r1, #1
 800598c:	4809      	ldr	r0, [pc, #36]	; (80059b4 <RawParser_dma_proceedByte+0x1fc>)
 800598e:	f000 fbe9 	bl	8006164 <__M_Warning>
        break;
 8005992:	e002      	b.n	800599a <RawParser_dma_proceedByte+0x1e2>

    default:
        break;
 8005994:	bf00      	nop
 8005996:	e000      	b.n	800599a <RawParser_dma_proceedByte+0x1e2>
        break;}
 8005998:	bf00      	nop
    }
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	08010448 	.word	0x08010448
 80059a8:	08010310 	.word	0x08010310
 80059ac:	08010418 	.word	0x08010418
 80059b0:	080104a4 	.word	0x080104a4
 80059b4:	08010498 	.word	0x08010498
 80059b8:	080104ec 	.word	0x080104ec
 80059bc:	0801053c 	.word	0x0801053c

080059c0 <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid input");
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d110      	bne.n	80059f0 <RawParser_dma_proceed+0x30>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bf0c      	ite	eq
 80059d4:	2301      	moveq	r3, #1
 80059d6:	2300      	movne	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	4619      	mov	r1, r3
 80059dc:	4b33      	ldr	r3, [pc, #204]	; (8005aac <RawParser_dma_proceed+0xec>)
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 80059e4:	4a32      	ldr	r2, [pc, #200]	; (8005ab0 <RawParser_dma_proceed+0xf0>)
 80059e6:	4833      	ldr	r0, [pc, #204]	; (8005ab4 <RawParser_dma_proceed+0xf4>)
 80059e8:	f000 fb9e 	bl	8006128 <__M_Error>
 80059ec:	2300      	movs	r3, #0
 80059ee:	e059      	b.n	8005aa4 <RawParser_dma_proceed+0xe4>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	613b      	str	r3, [r7, #16]
            reg   receiveReadPos      = self->m_receiveReadPos    & (D_RAW_P_RX_BUF_SIZE - 1U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	617b      	str	r3, [r7, #20]
    self->RX.size = 0;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

//    if(receivePos_saved == receiveReadPos) { // may be needed
//        return &self->RX;
//    }

    while (receivePos_saved != receiveReadPos) {
 8005a10:	e03b      	b.n	8005a8a <RawParser_dma_proceed+0xca>

        const u8 ch = self->m_receiveBuffer[receiveReadPos];
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4413      	add	r3, r2
 8005a18:	3308      	adds	r3, #8
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	73fb      	strb	r3, [r7, #15]

        if (self->m_triggerSB) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 360a 	ldrb.w	r3, [r3, #1546]	; 0x60a
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d016      	beq.n	8005a56 <RawParser_dma_proceed+0x96>
            if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	7bfa      	ldrb	r2, [r7, #15]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d106      	bne.n	8005a40 <RawParser_dma_proceed+0x80>
                RawParser_dma_proceedByte(self, ch, 0);
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2200      	movs	r2, #0
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff febd 	bl	80057b8 <RawParser_dma_proceedByte>
 8005a3e:	e005      	b.n	8005a4c <RawParser_dma_proceed+0x8c>
            } else { //{SB}{!SB} -> {SB} and newframe
                RawParser_dma_proceedByte(self, ch, 1);
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2201      	movs	r2, #1
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff feb6 	bl	80057b8 <RawParser_dma_proceedByte>
            }
            self->m_triggerSB = 0;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8005a54:	e00f      	b.n	8005a76 <RawParser_dma_proceed+0xb6>
        } else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d104      	bne.n	8005a6a <RawParser_dma_proceed+0xaa>
            self->m_triggerSB = 1;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8005a68:	e005      	b.n	8005a76 <RawParser_dma_proceed+0xb6>
        } else { //{!SB}{!SB} -> {!SB}
            RawParser_dma_proceedByte(self, ch, 0);
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fea1 	bl	80057b8 <RawParser_dma_proceedByte>
        }

        receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7e:	617b      	str	r3, [r7, #20]

        if(self->RX.size != 0) {
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <RawParser_dma_proceed+0xd4>
    while (receivePos_saved != receiveReadPos) {
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d1bf      	bne.n	8005a12 <RawParser_dma_proceed+0x52>
 8005a92:	e000      	b.n	8005a96 <RawParser_dma_proceed+0xd6>
#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
            /* Now decode -- encoded codeword size must be passed */
            rscode_decode(&self->rs_ecc, self->RX.data, self->RX.size);
            self->RX.size -= RSCODE_NPAR;
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */
            break;
 8005a94:	bf00      	nop
        }
    }

    self->m_receiveReadPos = receiveReadPos;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    return &self->RX;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f203 6324 	addw	r3, r3, #1572	; 0x624
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	080105b4 	.word	0x080105b4
 8005ab0:	08010310 	.word	0x08010310
 8005ab4:	08010590 	.word	0x08010590

08005ab8 <RawParser_dma_shieldFrame>:

// slow shield functions (slow & more copy)-----------------------------------------------------------------------------------------
RawParser_Frame_t* RawParser_dma_shieldFrame(RawParser_dma_t* const self, const u8* data, reg len)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af04      	add	r7, sp, #16
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_shieldFrame: No valid input");
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d110      	bne.n	8005aec <RawParser_dma_shieldFrame+0x34>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4b57      	ldr	r3, [pc, #348]	; (8005c38 <RawParser_dma_shieldFrame+0x180>)
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 8005ae0:	4a56      	ldr	r2, [pc, #344]	; (8005c3c <RawParser_dma_shieldFrame+0x184>)
 8005ae2:	4857      	ldr	r0, [pc, #348]	; (8005c40 <RawParser_dma_shieldFrame+0x188>)
 8005ae4:	f000 fb20 	bl	8006128 <__M_Error>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e0a1      	b.n	8005c30 <RawParser_dma_shieldFrame+0x178>
    M_Assert_Break((data == (u8*)NULL) || len == 0, M_EMPTY, {
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <RawParser_dma_shieldFrame+0x40>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d119      	bne.n	8005b2c <RawParser_dma_shieldFrame+0x74>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <RawParser_dma_shieldFrame+0x4c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <RawParser_dma_shieldFrame+0x50>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <RawParser_dma_shieldFrame+0x52>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	b2d9      	uxtb	r1, r3
 8005b0c:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <RawParser_dma_shieldFrame+0x180>)
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	f240 13d3 	movw	r3, #467	; 0x1d3
 8005b14:	4a49      	ldr	r2, [pc, #292]	; (8005c3c <RawParser_dma_shieldFrame+0x184>)
 8005b16:	484b      	ldr	r0, [pc, #300]	; (8005c44 <RawParser_dma_shieldFrame+0x18c>)
 8005b18:	f000 fb06 	bl	8006128 <__M_Error>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8005b2a:	e081      	b.n	8005c30 <RawParser_dma_shieldFrame+0x178>

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    RawParser_dma_startTransmittPacket(self, (len + RSCODE_NPAR));
    rs_encode_data_onlyParity(&self->rs_ecc, data, len);
#else
    RawParser_dma_startTransmittPacket(self, len);
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f892 	bl	8005c58 <RawParser_dma_startTransmittPacket>

#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    while(len--) {
 8005b34:	e073      	b.n	8005c1e <RawParser_dma_shieldFrame+0x166>
        RawParser_dma_addTxByteCRC(self, *data++);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	60ba      	str	r2, [r7, #8]
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	4613      	mov	r3, r2
 8005b44:	76fb      	strb	r3, [r7, #27]

#ifdef D_RAW_P_CRC_ENA
// elementary byte adding functions with calc crc----------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_addTxByteCRC(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10e      	bne.n	8005b6a <RawParser_dma_shieldFrame+0xb2>
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bf0c      	ite	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	2300      	movne	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4b3b      	ldr	r3, [pc, #236]	; (8005c48 <RawParser_dma_shieldFrame+0x190>)
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	23a1      	movs	r3, #161	; 0xa1
 8005b60:	4a3a      	ldr	r2, [pc, #232]	; (8005c4c <RawParser_dma_shieldFrame+0x194>)
 8005b62:	4837      	ldr	r0, [pc, #220]	; (8005c40 <RawParser_dma_shieldFrame+0x188>)
 8005b64:	f000 fae0 	bl	8006128 <__M_Error>
 8005b68:	e059      	b.n	8005c1e <RawParser_dma_shieldFrame+0x166>
#   ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#   endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    // move to cash
    u8* const   TX_data   = self->TX.data;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8005b70:	617b      	str	r3, [r7, #20]
    reg         TX_size   = self->TX.size;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8005b78:	613b      	str	r3, [r7, #16]


#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2bfd      	cmp	r3, #253	; 0xfd
 8005b7e:	d113      	bne.n	8005ba8 <RawParser_dma_shieldFrame+0xf0>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2bfd      	cmp	r3, #253	; 0xfd
 8005b84:	bf0c      	ite	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	2300      	movne	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	22fd      	movs	r2, #253	; 0xfd
 8005b94:	9202      	str	r2, [sp, #8]
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	4b2d      	ldr	r3, [pc, #180]	; (8005c50 <RawParser_dma_shieldFrame+0x198>)
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	23b1      	movs	r3, #177	; 0xb1
 8005b9e:	4a2b      	ldr	r2, [pc, #172]	; (8005c4c <RawParser_dma_shieldFrame+0x194>)
 8005ba0:	482c      	ldr	r0, [pc, #176]	; (8005c54 <RawParser_dma_shieldFrame+0x19c>)
 8005ba2:	f000 fac1 	bl	8006128 <__M_Error>
 8005ba6:	e03a      	b.n	8005c1e <RawParser_dma_shieldFrame+0x166>
#   else
    M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */


    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8005bae:	7efa      	ldrb	r2, [r7, #27]
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fc f8be 	bl	8001d34 <fast_crc8_maxim_byte>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609

    TX_data[TX_size++] = byte;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	613a      	str	r2, [r7, #16]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4413      	add	r3, r2
 8005bcc:	7efa      	ldrb	r2, [r7, #27]
 8005bce:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	7efa      	ldrb	r2, [r7, #27]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d11d      	bne.n	8005c16 <RawParser_dma_shieldFrame+0x15e>

#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2bfd      	cmp	r3, #253	; 0xfd
 8005bde:	d113      	bne.n	8005c08 <RawParser_dma_shieldFrame+0x150>
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2bfd      	cmp	r3, #253	; 0xfd
 8005be4:	bf0c      	ite	eq
 8005be6:	2301      	moveq	r3, #1
 8005be8:	2300      	movne	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	4619      	mov	r1, r3
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	22fd      	movs	r2, #253	; 0xfd
 8005bf4:	9202      	str	r2, [sp, #8]
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <RawParser_dma_shieldFrame+0x198>)
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	23bd      	movs	r3, #189	; 0xbd
 8005bfe:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <RawParser_dma_shieldFrame+0x194>)
 8005c00:	4814      	ldr	r0, [pc, #80]	; (8005c54 <RawParser_dma_shieldFrame+0x19c>)
 8005c02:	f000 fa91 	bl	8006128 <__M_Error>
 8005c06:	e00a      	b.n	8005c1e <RawParser_dma_shieldFrame+0x166>
#   else
        M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */

        TX_data[TX_size++] = byte;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	613a      	str	r2, [r7, #16]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4413      	add	r3, r2
 8005c12:	7efa      	ldrb	r2, [r7, #27]
 8005c14:	701a      	strb	r2, [r3, #0]
    }

    self->TX.size = TX_size;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    while(len--) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	1e5a      	subs	r2, r3, #1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d186      	bne.n	8005b36 <RawParser_dma_shieldFrame+0x7e>
    for (unsigned i = 0; i < RSCODE_NPAR; ++i) {
        RawParser_dma_addTxByteCRC(self, pBytes[RSCODE_NPAR-1-i]);
    }
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return RawParser_dma_finishTransmittPacket(self);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f91f 	bl	8005e6c <RawParser_dma_finishTransmittPacket>
 8005c2e:	4603      	mov	r3, r0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	080105dc 	.word	0x080105dc
 8005c3c:	08010310 	.word	0x08010310
 8005c40:	08010590 	.word	0x08010590
 8005c44:	08010608 	.word	0x08010608
 8005c48:	08010664 	.word	0x08010664
 8005c4c:	08010628 	.word	0x08010628
 8005c50:	080106bc 	.word	0x080106bc
 8005c54:	08010690 	.word	0x08010690

08005c58 <RawParser_dma_startTransmittPacket>:

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
void RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen) /////////////////////////////////////////////////////
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08c      	sub	sp, #48	; 0x30
 8005c5c:	af04      	add	r7, sp, #16
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input");
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10f      	bne.n	8005c88 <RawParser_dma_startTransmittPacket+0x30>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	4619      	mov	r1, r3
 8005c76:	4b70      	ldr	r3, [pc, #448]	; (8005e38 <RawParser_dma_startTransmittPacket+0x1e0>)
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005c7e:	4a6f      	ldr	r2, [pc, #444]	; (8005e3c <RawParser_dma_startTransmittPacket+0x1e4>)
 8005c80:	486f      	ldr	r0, [pc, #444]	; (8005e40 <RawParser_dma_startTransmittPacket+0x1e8>)
 8005c82:	f000 fa51 	bl	8006128 <__M_Error>
 8005c86:	e0d3      	b.n	8005e30 <RawParser_dma_startTransmittPacket+0x1d8>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    M_Assert_Break((predictedLen == 0), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length");
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10f      	bne.n	8005cae <RawParser_dma_startTransmittPacket+0x56>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4b69      	ldr	r3, [pc, #420]	; (8005e44 <RawParser_dma_startTransmittPacket+0x1ec>)
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	f240 13fd 	movw	r3, #509	; 0x1fd
 8005ca4:	4a65      	ldr	r2, [pc, #404]	; (8005e3c <RawParser_dma_startTransmittPacket+0x1e4>)
 8005ca6:	4868      	ldr	r0, [pc, #416]	; (8005e48 <RawParser_dma_startTransmittPacket+0x1f0>)
 8005ca8:	f000 fa3e 	bl	8006128 <__M_Error>
 8005cac:	e0c0      	b.n	8005e30 <RawParser_dma_startTransmittPacket+0x1d8>

#if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE // control undefined behavior
    M_Assert_Break( ((predictedLen + 4) > (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_MAX_PROTOCOL_LEN);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	2bfd      	cmp	r3, #253	; 0xfd
 8005cb4:	d914      	bls.n	8005ce0 <RawParser_dma_startTransmittPacket+0x88>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	2bfd      	cmp	r3, #253	; 0xfd
 8005cbc:	bf8c      	ite	hi
 8005cbe:	2301      	movhi	r3, #1
 8005cc0:	2300      	movls	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	23fe      	movs	r3, #254	; 0xfe
 8005cc8:	9302      	str	r3, [sp, #8]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	4b5f      	ldr	r3, [pc, #380]	; (8005e4c <RawParser_dma_startTransmittPacket+0x1f4>)
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cd6:	4a59      	ldr	r2, [pc, #356]	; (8005e3c <RawParser_dma_startTransmittPacket+0x1e4>)
 8005cd8:	485d      	ldr	r0, [pc, #372]	; (8005e50 <RawParser_dma_startTransmittPacket+0x1f8>)
 8005cda:	f000 fa25 	bl	8006128 <__M_Error>
 8005cde:	e0a7      	b.n	8005e30 <RawParser_dma_startTransmittPacket+0x1d8>
    M_Assert_Warning((predictedLen > (D_RAW_P_MAX_PROTOCOL_LEN >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_MAX_PROTOCOL_LEN >> 1));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce4:	d912      	bls.n	8005d0c <RawParser_dma_startTransmittPacket+0xb4>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cea:	bf8c      	ite	hi
 8005cec:	2301      	movhi	r3, #1
 8005cee:	2300      	movls	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	237f      	movs	r3, #127	; 0x7f
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	4b55      	ldr	r3, [pc, #340]	; (8005e54 <RawParser_dma_startTransmittPacket+0x1fc>)
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	f240 2301 	movw	r3, #513	; 0x201
 8005d04:	4a4d      	ldr	r2, [pc, #308]	; (8005e3c <RawParser_dma_startTransmittPacket+0x1e4>)
 8005d06:	4854      	ldr	r0, [pc, #336]	; (8005e58 <RawParser_dma_startTransmittPacket+0x200>)
 8005d08:	f000 fa2c 	bl	8006164 <__M_Warning>
    M_Assert_Warning((predictedLen > (D_RAW_P_TX_BUF_SIZE >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - buffer size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_TX_BUF_SIZE >> 1));
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */


#ifdef D_RAW_P_CRC_ENA
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	22ff      	movs	r2, #255	; 0xff
 8005d10:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    D_RAW_P_CRC_START(self->m_transmittCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

    const u8 startByte = self->m_startByte;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	77fb      	strb	r3, [r7, #31]


    self->TX.size = 0;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    self->TX.data[self->TX.size++] = startByte;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8005d2e:	1c58      	adds	r0, r3, #1
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	f8c1 0620 	str.w	r0, [r1, #1568]	; 0x620
 8005d36:	4413      	add	r3, r2
 8005d38:	7ffa      	ldrb	r2, [r7, #31]
 8005d3a:	701a      	strb	r2, [r3, #0]
        RawParser_dma_addTxByteCRC(self, (u8)((predictedLen >> 8U) & 0x000000FFUL));

    } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        RawParser_dma_addTxByteCRC(self, (u8)(((predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen) & 0x000000FFUL));
 8005d3c:	7ffb      	ldrb	r3, [r7, #31]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d304      	bcc.n	8005d4e <RawParser_dma_startTransmittPacket+0xf6>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	3301      	adds	r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	e001      	b.n	8005d52 <RawParser_dma_startTransmittPacket+0xfa>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	61ba      	str	r2, [r7, #24]
 8005d56:	75fb      	strb	r3, [r7, #23]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10e      	bne.n	8005d7c <RawParser_dma_startTransmittPacket+0x124>
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4b3b      	ldr	r3, [pc, #236]	; (8005e5c <RawParser_dma_startTransmittPacket+0x204>)
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	23a1      	movs	r3, #161	; 0xa1
 8005d72:	4a3b      	ldr	r2, [pc, #236]	; (8005e60 <RawParser_dma_startTransmittPacket+0x208>)
 8005d74:	4832      	ldr	r0, [pc, #200]	; (8005e40 <RawParser_dma_startTransmittPacket+0x1e8>)
 8005d76:	f000 f9d7 	bl	8006128 <__M_Error>
 8005d7a:	e059      	b.n	8005e30 <RawParser_dma_startTransmittPacket+0x1d8>
    u8* const   TX_data   = self->TX.data;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8005d82:	613b      	str	r3, [r7, #16]
    reg         TX_size   = self->TX.size;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8005d8a:	60fb      	str	r3, [r7, #12]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2bfd      	cmp	r3, #253	; 0xfd
 8005d90:	d113      	bne.n	8005dba <RawParser_dma_startTransmittPacket+0x162>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2bfd      	cmp	r3, #253	; 0xfd
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	4619      	mov	r1, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	22fd      	movs	r2, #253	; 0xfd
 8005da6:	9202      	str	r2, [sp, #8]
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	4b2e      	ldr	r3, [pc, #184]	; (8005e64 <RawParser_dma_startTransmittPacket+0x20c>)
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	23b1      	movs	r3, #177	; 0xb1
 8005db0:	4a2b      	ldr	r2, [pc, #172]	; (8005e60 <RawParser_dma_startTransmittPacket+0x208>)
 8005db2:	482d      	ldr	r0, [pc, #180]	; (8005e68 <RawParser_dma_startTransmittPacket+0x210>)
 8005db4:	f000 f9b8 	bl	8006128 <__M_Error>
 8005db8:	e03a      	b.n	8005e30 <RawParser_dma_startTransmittPacket+0x1d8>
    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8005dc0:	7dfa      	ldrb	r2, [r7, #23]
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fb ffb5 	bl	8001d34 <fast_crc8_maxim_byte>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	461a      	mov	r2, r3
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    TX_data[TX_size++] = byte;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	60fa      	str	r2, [r7, #12]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	7dfa      	ldrb	r2, [r7, #23]
 8005de0:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	7dfa      	ldrb	r2, [r7, #23]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d11d      	bne.n	8005e28 <RawParser_dma_startTransmittPacket+0x1d0>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2bfd      	cmp	r3, #253	; 0xfd
 8005df0:	d113      	bne.n	8005e1a <RawParser_dma_startTransmittPacket+0x1c2>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2bfd      	cmp	r3, #253	; 0xfd
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	22fd      	movs	r2, #253	; 0xfd
 8005e06:	9202      	str	r2, [sp, #8]
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <RawParser_dma_startTransmittPacket+0x20c>)
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	23bd      	movs	r3, #189	; 0xbd
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <RawParser_dma_startTransmittPacket+0x208>)
 8005e12:	4815      	ldr	r0, [pc, #84]	; (8005e68 <RawParser_dma_startTransmittPacket+0x210>)
 8005e14:	f000 f988 	bl	8006128 <__M_Error>
 8005e18:	e00a      	b.n	8005e30 <RawParser_dma_startTransmittPacket+0x1d8>
        TX_data[TX_size++] = byte;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	60fa      	str	r2, [r7, #12]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	7dfa      	ldrb	r2, [r7, #23]
 8005e26:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */
}
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	0801070c 	.word	0x0801070c
 8005e3c:	08010310 	.word	0x08010310
 8005e40:	08010590 	.word	0x08010590
 8005e44:	08010754 	.word	0x08010754
 8005e48:	08010740 	.word	0x08010740
 8005e4c:	080107c8 	.word	0x080107c8
 8005e50:	08010790 	.word	0x08010790
 8005e54:	08010848 	.word	0x08010848
 8005e58:	08010814 	.word	0x08010814
 8005e5c:	08010664 	.word	0x08010664
 8005e60:	08010628 	.word	0x08010628
 8005e64:	080106bc 	.word	0x080106bc
 8005e68:	08010690 	.word	0x08010690

08005e6c <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af04      	add	r7, sp, #16
 8005e72:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_startTransmittPacket: No valid input");
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d110      	bne.n	8005e9c <RawParser_dma_finishTransmittPacket+0x30>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	4619      	mov	r1, r3
 8005e88:	4b3b      	ldr	r3, [pc, #236]	; (8005f78 <RawParser_dma_finishTransmittPacket+0x10c>)
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	f44f 730a 	mov.w	r3, #552	; 0x228
 8005e90:	4a3a      	ldr	r2, [pc, #232]	; (8005f7c <RawParser_dma_finishTransmittPacket+0x110>)
 8005e92:	483b      	ldr	r0, [pc, #236]	; (8005f80 <RawParser_dma_finishTransmittPacket+0x114>)
 8005e94:	f000 f948 	bl	8006128 <__M_Error>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e068      	b.n	8005f6e <RawParser_dma_finishTransmittPacket+0x102>
#ifdef D_RAW_P_CRC_ENA
    D_RAW_P_CRC_FINAL(self->m_transmittCalcCRC);

#   ifdef D_RAW_P_USE_CRC8

    RawParser_dma_addTxByte(self, self->m_transmittCalcCRC);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 2609 	ldrb.w	r2, [r3, #1545]	; 0x609
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	74fb      	strb	r3, [r7, #19]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid input");
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10e      	bne.n	8005ece <RawParser_dma_finishTransmittPacket+0x62>
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2301      	moveq	r3, #1
 8005eb8:	2300      	movne	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <RawParser_dma_finishTransmittPacket+0x118>)
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	2379      	movs	r3, #121	; 0x79
 8005ec4:	4a30      	ldr	r2, [pc, #192]	; (8005f88 <RawParser_dma_finishTransmittPacket+0x11c>)
 8005ec6:	482e      	ldr	r0, [pc, #184]	; (8005f80 <RawParser_dma_finishTransmittPacket+0x114>)
 8005ec8:	f000 f92e 	bl	8006128 <__M_Error>
 8005ecc:	e04c      	b.n	8005f68 <RawParser_dma_finishTransmittPacket+0xfc>
    u8* const   TX_data   = self->TX.data;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8005ed4:	60fb      	str	r3, [r7, #12]
    reg         TX_size   = self->TX.size;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8005edc:	60bb      	str	r3, [r7, #8]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2bfd      	cmp	r3, #253	; 0xfd
 8005ee2:	d113      	bne.n	8005f0c <RawParser_dma_finishTransmittPacket+0xa0>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2bfd      	cmp	r3, #253	; 0xfd
 8005ee8:	bf0c      	ite	eq
 8005eea:	2301      	moveq	r3, #1
 8005eec:	2300      	movne	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	22fd      	movs	r2, #253	; 0xfd
 8005ef8:	9202      	str	r2, [sp, #8]
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <RawParser_dma_finishTransmittPacket+0x120>)
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	2389      	movs	r3, #137	; 0x89
 8005f02:	4a21      	ldr	r2, [pc, #132]	; (8005f88 <RawParser_dma_finishTransmittPacket+0x11c>)
 8005f04:	4822      	ldr	r0, [pc, #136]	; (8005f90 <RawParser_dma_finishTransmittPacket+0x124>)
 8005f06:	f000 f90f 	bl	8006128 <__M_Error>
 8005f0a:	e02d      	b.n	8005f68 <RawParser_dma_finishTransmittPacket+0xfc>
    TX_data[TX_size++] = byte;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	60ba      	str	r2, [r7, #8]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	7cfa      	ldrb	r2, [r7, #19]
 8005f18:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	7cfa      	ldrb	r2, [r7, #19]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d11d      	bne.n	8005f60 <RawParser_dma_finishTransmittPacket+0xf4>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2bfd      	cmp	r3, #253	; 0xfd
 8005f28:	d113      	bne.n	8005f52 <RawParser_dma_finishTransmittPacket+0xe6>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2bfd      	cmp	r3, #253	; 0xfd
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	22fd      	movs	r2, #253	; 0xfd
 8005f3e:	9202      	str	r2, [sp, #8]
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <RawParser_dma_finishTransmittPacket+0x120>)
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	2392      	movs	r3, #146	; 0x92
 8005f48:	4a0f      	ldr	r2, [pc, #60]	; (8005f88 <RawParser_dma_finishTransmittPacket+0x11c>)
 8005f4a:	4811      	ldr	r0, [pc, #68]	; (8005f90 <RawParser_dma_finishTransmittPacket+0x124>)
 8005f4c:	f000 f8ec 	bl	8006128 <__M_Error>
 8005f50:	e00a      	b.n	8005f68 <RawParser_dma_finishTransmittPacket+0xfc>
        TX_data[TX_size++] = byte;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	60ba      	str	r2, [r7, #8]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	7cfa      	ldrb	r2, [r7, #19]
 8005f5e:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    RawParser_dma_addTxByte(self, (u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

    return &self->TX;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f203 631c 	addw	r3, r3, #1564	; 0x61c
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	0801070c 	.word	0x0801070c
 8005f7c:	08010310 	.word	0x08010310
 8005f80:	08010590 	.word	0x08010590
 8005f84:	080108ec 	.word	0x080108ec
 8005f88:	08010628 	.word	0x08010628
 8005f8c:	08010914 	.word	0x08010914
 8005f90:	08010690 	.word	0x08010690

08005f94 <__M_SEND_ASSERT_MSG>:

static inline void __M_SEND_ASSERT_MSG(const char* const header,
                                const char* const expr_str, const unsigned char expr,
                                const char* const file, const int line,
                                const char* const msg, va_list args)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	71fb      	strb	r3, [r7, #7]
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)

    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b5b      	cmp	r3, #91	; 0x5b
 8005faa:	d175      	bne.n	8006098 <__M_SEND_ASSERT_MSG+0x104>
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	3302      	adds	r3, #2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b5d      	cmp	r3, #93	; 0x5d
 8005fb4:	d170      	bne.n	8006098 <__M_SEND_ASSERT_MSG+0x104>

        int assertEna = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	617b      	str	r3, [r7, #20]
        char* descr = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]

        switch(__M_ASSERT_DATA(msg)) {
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b73      	cmp	r3, #115	; 0x73
 8005fc6:	d015      	beq.n	8005ff4 <__M_SEND_ASSERT_MSG+0x60>
 8005fc8:	2b73      	cmp	r3, #115	; 0x73
 8005fca:	dc23      	bgt.n	8006014 <__M_SEND_ASSERT_MSG+0x80>
 8005fcc:	2b65      	cmp	r3, #101	; 0x65
 8005fce:	d019      	beq.n	8006004 <__M_SEND_ASSERT_MSG+0x70>
 8005fd0:	2b65      	cmp	r3, #101	; 0x65
 8005fd2:	dc1f      	bgt.n	8006014 <__M_SEND_ASSERT_MSG+0x80>
 8005fd4:	2b30      	cmp	r3, #48	; 0x30
 8005fd6:	f000 8095 	beq.w	8006104 <__M_SEND_ASSERT_MSG+0x170>
 8005fda:	2b64      	cmp	r3, #100	; 0x64
 8005fdc:	d11a      	bne.n	8006014 <__M_SEND_ASSERT_MSG+0x80>

        case 'd':
            // get library info
            assertEna = va_arg(args, const int);
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	1d1a      	adds	r2, r3, #4
 8005fe2:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	613b      	str	r3, [r7, #16]
            break;
 8005ff2:	e00f      	b.n	8006014 <__M_SEND_ASSERT_MSG+0x80>

        case 's':
            // get library info
            assertEna = 1;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	1d1a      	adds	r2, r3, #4
 8005ffc:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	613b      	str	r3, [r7, #16]
            break;
 8006002:	e007      	b.n	8006014 <__M_SEND_ASSERT_MSG+0x80>

        case 'e':
            // get library info
            assertEna = va_arg(args, const int);
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	1d1a      	adds	r2, r3, #4
 8006008:	62ba      	str	r2, [r7, #40]	; 0x28
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	617b      	str	r3, [r7, #20]
            descr = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
            break;
 8006012:	bf00      	nop

        }

#   if !defined(M_MESSAGE_ALWAYS_ENABLE)
        // send message if enabled message
        if(assertEna) {
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d076      	beq.n	8006108 <__M_SEND_ASSERT_MSG+0x174>
#   endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) */
            fprintf(stderr, "\n%s\n", header);
 800601a:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	493c      	ldr	r1, [pc, #240]	; (8006114 <__M_SEND_ASSERT_MSG+0x180>)
 8006024:	4618      	mov	r0, r3
 8006026:	f003 fb11 	bl	800964c <fiprintf>
            fprintf(stderr, "Library Name: %s\n", descr);
 800602a:	4b39      	ldr	r3, [pc, #228]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4939      	ldr	r1, [pc, #228]	; (8006118 <__M_SEND_ASSERT_MSG+0x184>)
 8006034:	4618      	mov	r0, r3
 8006036:	f003 fb09 	bl	800964c <fiprintf>
            fprintf(stderr, "Assert failed:\t");
 800603a:	4b35      	ldr	r3, [pc, #212]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	220f      	movs	r2, #15
 8006042:	2101      	movs	r1, #1
 8006044:	4835      	ldr	r0, [pc, #212]	; (800611c <__M_SEND_ASSERT_MSG+0x188>)
 8006046:	f003 fbd3 	bl	80097f0 <fwrite>
            vfprintf(stderr, &msg[3], args);
 800604a:	4b31      	ldr	r3, [pc, #196]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68d8      	ldr	r0, [r3, #12]
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	3303      	adds	r3, #3
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	4619      	mov	r1, r3
 8006058:	f003 fe90 	bl	8009d7c <vfiprintf>
            fprintf(stderr, "\n");
 800605c:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	4619      	mov	r1, r3
 8006064:	200a      	movs	r0, #10
 8006066:	f003 fb3b 	bl	80096e0 <fputc>

#   if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 800606a:	4b29      	ldr	r3, [pc, #164]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68d8      	ldr	r0, [r3, #12]
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	492a      	ldr	r1, [pc, #168]	; (8006120 <__M_SEND_ASSERT_MSG+0x18c>)
 8006076:	f003 fae9 	bl	800964c <fiprintf>
#   endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#   if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 800607a:	4b25      	ldr	r3, [pc, #148]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68d8      	ldr	r0, [r3, #12]
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	4927      	ldr	r1, [pc, #156]	; (8006124 <__M_SEND_ASSERT_MSG+0x190>)
 8006086:	f003 fae1 	bl	800964c <fiprintf>
#   endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */
            fflush(stderr);
 800608a:	4b21      	ldr	r3, [pc, #132]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4618      	mov	r0, r3
 8006092:	f003 f9f3 	bl	800947c <fflush>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8006096:	e037      	b.n	8006108 <__M_SEND_ASSERT_MSG+0x174>
        (void)assertEna;
    } else {

#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

        fprintf(stderr, "\n%s\n", header);
 8006098:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	491c      	ldr	r1, [pc, #112]	; (8006114 <__M_SEND_ASSERT_MSG+0x180>)
 80060a2:	4618      	mov	r0, r3
 80060a4:	f003 fad2 	bl	800964c <fiprintf>
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
        fprintf(stderr, "Assert failed:\t");
 80060a8:	4b19      	ldr	r3, [pc, #100]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	220f      	movs	r2, #15
 80060b0:	2101      	movs	r1, #1
 80060b2:	481a      	ldr	r0, [pc, #104]	; (800611c <__M_SEND_ASSERT_MSG+0x188>)
 80060b4:	f003 fb9c 	bl	80097f0 <fwrite>
        vfprintf(stderr, msg, args);
 80060b8:	4b15      	ldr	r3, [pc, #84]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060c2:	4618      	mov	r0, r3
 80060c4:	f003 fe5a 	bl	8009d7c <vfiprintf>
        fprintf(stderr, "\n");
 80060c8:	4b11      	ldr	r3, [pc, #68]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	4619      	mov	r1, r3
 80060d0:	200a      	movs	r0, #10
 80060d2:	f003 fb05 	bl	80096e0 <fputc>
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

#if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 80060d6:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68d8      	ldr	r0, [r3, #12]
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	490f      	ldr	r1, [pc, #60]	; (8006120 <__M_SEND_ASSERT_MSG+0x18c>)
 80060e2:	f003 fab3 	bl	800964c <fiprintf>
#endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 80060e6:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68d8      	ldr	r0, [r3, #12]
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	490c      	ldr	r1, [pc, #48]	; (8006124 <__M_SEND_ASSERT_MSG+0x190>)
 80060f2:	f003 faab 	bl	800964c <fiprintf>
#endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */

        fflush(stderr);
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <__M_SEND_ASSERT_MSG+0x17c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f003 f9bd 	bl	800947c <fflush>
 8006102:	e002      	b.n	800610a <__M_SEND_ASSERT_MSG+0x176>
            return;
 8006104:	bf00      	nop
 8006106:	e000      	b.n	800610a <__M_SEND_ASSERT_MSG+0x176>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8006108:	bf00      	nop
    (void)expr;
    (void)file;
    (void)line;
    (void)msg;
    (void)args;
}
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000080 	.word	0x20000080
 8006114:	08010a64 	.word	0x08010a64
 8006118:	08010a6c 	.word	0x08010a6c
 800611c:	08010a80 	.word	0x08010a80
 8006120:	08010a90 	.word	0x08010a90
 8006124:	08010aac 	.word	0x08010aac

08006128 <__M_Error>:

void __M_Error(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af04      	add	r7, sp, #16
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	460b      	mov	r3, r1
 8006136:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8006138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800613c:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("PROGRAMM EXIT WITH ERROR!!!", expr_str, expr, file, line, msg, args);
 800613e:	7afa      	ldrb	r2, [r7, #11]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	9302      	str	r3, [sp, #8]
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68f9      	ldr	r1, [r7, #12]
 8006150:	4803      	ldr	r0, [pc, #12]	; (8006160 <__M_Error+0x38>)
 8006152:	f7ff ff1f 	bl	8005f94 <__M_SEND_ASSERT_MSG>
    va_end(args);
    //abort(); // exit programm
}
 8006156:	bf00      	nop
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	08010ac4 	.word	0x08010ac4

08006164 <__M_Warning>:

void __M_Warning(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af04      	add	r7, sp, #16
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	460b      	mov	r3, r1
 8006172:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8006174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006178:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("WARNING!!!", expr_str, expr, file, line, msg, args);
 800617a:	7afa      	ldrb	r2, [r7, #11]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	9302      	str	r3, [sp, #8]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	4803      	ldr	r0, [pc, #12]	; (800619c <__M_Warning+0x38>)
 800618e:	f7ff ff01 	bl	8005f94 <__M_SEND_ASSERT_MSG>
    va_end(args);
}
 8006192:	bf00      	nop
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	08010ae0 	.word	0x08010ae0

080061a0 <ping_worker>:
#include <string.h>



void ping_worker(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
	static u8 counte = 0;


	memcpy(outputData, inputData, (*size));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	68b8      	ldr	r0, [r7, #8]
 80061b8:	f003 fb60 	bl	800987c <memcpy>
	outputData[(*size)] = counte;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	4413      	add	r3, r2
 80061c4:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <ping_worker+0x48>)
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	701a      	strb	r2, [r3, #0]
	++(*size);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
	++counte;
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <ping_worker+0x48>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	3301      	adds	r3, #1
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	4b02      	ldr	r3, [pc, #8]	; (80061e8 <ping_worker+0x48>)
 80061de:	701a      	strb	r2, [r3, #0]
	UNUSED(maxOutBufferSize);
	UNUSED(ctx);
}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000ecd 	.word	0x20000ecd

080061ec <init_stm32_communicator>:

Communicator_t comm;
extern UART_HandleTypeDef huart1;

int init_stm32_communicator(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
	int state = rawParser_dma_init(&comm.rawparser, 0x1A);
 80061f2:	211a      	movs	r1, #26
 80061f4:	4810      	ldr	r0, [pc, #64]	; (8006238 <init_stm32_communicator+0x4c>)
 80061f6:	f7ff fa81 	bl	80056fc <rawParser_dma_init>
 80061fa:	6078      	str	r0, [r7, #4]
	if(state != D_RAW_P_OK) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d001      	beq.n	8006206 <init_stm32_communicator+0x1a>
		return D_RAW_P_ERROR;
 8006202:	2300      	movs	r3, #0
 8006204:	e014      	b.n	8006230 <init_stm32_communicator+0x44>
	}

	// init callback manager
	CallbackManager_init(&comm.manager);
 8006206:	480d      	ldr	r0, [pc, #52]	; (800623c <init_stm32_communicator+0x50>)
 8006208:	f7fb fcdc 	bl	8001bc4 <CallbackManager_init>
	CallbackManager_addWorker(&comm.manager, 0x00, ping_worker, NULL);
 800620c:	2300      	movs	r3, #0
 800620e:	4a0c      	ldr	r2, [pc, #48]	; (8006240 <init_stm32_communicator+0x54>)
 8006210:	2100      	movs	r1, #0
 8006212:	480a      	ldr	r0, [pc, #40]	; (800623c <init_stm32_communicator+0x50>)
 8006214:	f7fb fd0e 	bl	8001c34 <CallbackManager_addWorker>
	CallbackManager_addWorker(&comm.manager, 0xF0, entityCMD, NULL);
 8006218:	2300      	movs	r3, #0
 800621a:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <init_stm32_communicator+0x58>)
 800621c:	21f0      	movs	r1, #240	; 0xf0
 800621e:	4807      	ldr	r0, [pc, #28]	; (800623c <init_stm32_communicator+0x50>)
 8006220:	f7fb fd08 	bl	8001c34 <CallbackManager_addWorker>

	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8006224:	2201      	movs	r2, #1
 8006226:	4908      	ldr	r1, [pc, #32]	; (8006248 <init_stm32_communicator+0x5c>)
 8006228:	4808      	ldr	r0, [pc, #32]	; (800624c <init_stm32_communicator+0x60>)
 800622a:	f002 f8a0 	bl	800836e <HAL_UART_Receive_IT>
	return state;
 800622e:	687b      	ldr	r3, [r7, #4]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000ed0 	.word	0x20000ed0
 800623c:	20001500 	.word	0x20001500
 8006240:	080061a1 	.word	0x080061a1
 8006244:	08001fcd 	.word	0x08001fcd
 8006248:	20001904 	.word	0x20001904
 800624c:	200002bc 	.word	0x200002bc

08006250 <proceedIncommingMessage>:


void proceedIncommingMessage(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af02      	add	r7, sp, #8
	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8006256:	2201      	movs	r2, #1
 8006258:	493a      	ldr	r1, [pc, #232]	; (8006344 <proceedIncommingMessage+0xf4>)
 800625a:	483b      	ldr	r0, [pc, #236]	; (8006348 <proceedIncommingMessage+0xf8>)
 800625c:	f002 f887 	bl	800836e <HAL_UART_Receive_IT>

	// move to cash--------------------------------------------------------------
	const RawParser_Frame_t* const Rxframe = RawParser_dma_proceed(&comm.rawparser);
 8006260:	483a      	ldr	r0, [pc, #232]	; (800634c <proceedIncommingMessage+0xfc>)
 8006262:	f7ff fbad 	bl	80059c0 <RawParser_dma_proceed>
 8006266:	6178      	str	r0, [r7, #20]
	u8* const input_data 	= Rxframe->data;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	613b      	str	r3, [r7, #16]
	reg input_size 			= Rxframe->size;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	603b      	str	r3, [r7, #0]

//	if(input_size == 0) {
//		return;
//	}

	const boards_t* const board_entry_internal = board_entry;
 8006274:	4b36      	ldr	r3, [pc, #216]	; (8006350 <proceedIncommingMessage+0x100>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60fb      	str	r3, [r7, #12]

	const u8 bid 		= input_data[0];
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	72fb      	strb	r3, [r7, #11]
	const u8 cmd_id 	= input_data[1];
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	72bb      	strb	r3, [r7, #10]

	// do logic ------------------------------------------------------------------

	M_Assert_Break(((Rxframe == NULL) || (input_data == NULL) || (board_entry_internal == NULL)), M_EMPTY, return, "proceedIncommingMessage: No valid descriptors");
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <proceedIncommingMessage+0x48>
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <proceedIncommingMessage+0x48>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d114      	bne.n	80062c2 <proceedIncommingMessage+0x72>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <proceedIncommingMessage+0x5a>
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <proceedIncommingMessage+0x5a>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <proceedIncommingMessage+0x5e>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <proceedIncommingMessage+0x60>
 80062ae:	2300      	movs	r3, #0
 80062b0:	b2d9      	uxtb	r1, r3
 80062b2:	4b28      	ldr	r3, [pc, #160]	; (8006354 <proceedIncommingMessage+0x104>)
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	2335      	movs	r3, #53	; 0x35
 80062b8:	4a27      	ldr	r2, [pc, #156]	; (8006358 <proceedIncommingMessage+0x108>)
 80062ba:	4828      	ldr	r0, [pc, #160]	; (800635c <proceedIncommingMessage+0x10c>)
 80062bc:	f7ff ff34 	bl	8006128 <__M_Error>
 80062c0:	e03c      	b.n	800633c <proceedIncommingMessage+0xec>

//	// check input size and board id
	if((input_size < 2U) || (bid != board_entry_internal->boardId)) {
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d936      	bls.n	8006336 <proceedIncommingMessage+0xe6>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	7afa      	ldrb	r2, [r7, #11]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d131      	bne.n	8006336 <proceedIncommingMessage+0xe6>
		return;
	}

	// call worker
	input_size -= 2;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	3b02      	subs	r3, #2
 80062d6:	603b      	str	r3, [r7, #0]
	if(!CallbackManager_proceed(&comm.manager, cmd_id, &input_data[2], &comm.outputData[2], &input_size, (D_RAW_P_TX_BUF_SIZE - 2U))) {
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1c9a      	adds	r2, r3, #2
 80062dc:	7ab9      	ldrb	r1, [r7, #10]
 80062de:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	463b      	mov	r3, r7
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <proceedIncommingMessage+0x110>)
 80062ea:	481e      	ldr	r0, [pc, #120]	; (8006364 <proceedIncommingMessage+0x114>)
 80062ec:	f7fb fcd4 	bl	8001c98 <CallbackManager_proceed>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <proceedIncommingMessage+0xaa>
		input_size = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	603b      	str	r3, [r7, #0]
	}

//	// check if worker want to send packet
	if(input_size == 0) {
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01c      	beq.n	800633a <proceedIncommingMessage+0xea>
		return;
	}

	comm.outputData[0] = bid;
 8006300:	4a12      	ldr	r2, [pc, #72]	; (800634c <proceedIncommingMessage+0xfc>)
 8006302:	7afb      	ldrb	r3, [r7, #11]
 8006304:	f882 3a35 	strb.w	r3, [r2, #2613]	; 0xa35
	comm.outputData[1] = cmd_id;
 8006308:	4a10      	ldr	r2, [pc, #64]	; (800634c <proceedIncommingMessage+0xfc>)
 800630a:	7abb      	ldrb	r3, [r7, #10]
 800630c:	f882 3a36 	strb.w	r3, [r2, #2614]	; 0xa36

	const RawParser_Frame_t* const Txframe = RawParser_dma_shieldFrame(&comm.rawparser, comm.outputData, (input_size + 2));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	3302      	adds	r3, #2
 8006314:	461a      	mov	r2, r3
 8006316:	4914      	ldr	r1, [pc, #80]	; (8006368 <proceedIncommingMessage+0x118>)
 8006318:	480c      	ldr	r0, [pc, #48]	; (800634c <proceedIncommingMessage+0xfc>)
 800631a:	f7ff fbcd 	bl	8005ab8 <RawParser_dma_shieldFrame>
 800631e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, Txframe->data, Txframe->size, 1000);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6819      	ldr	r1, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	b29a      	uxth	r2, r3
 800632a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800632e:	4806      	ldr	r0, [pc, #24]	; (8006348 <proceedIncommingMessage+0xf8>)
 8006330:	f001 ff8b 	bl	800824a <HAL_UART_Transmit>
 8006334:	e002      	b.n	800633c <proceedIncommingMessage+0xec>
		return;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <proceedIncommingMessage+0xec>
		return;
 800633a:	bf00      	nop
}
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20001904 	.word	0x20001904
 8006348:	200002bc 	.word	0x200002bc
 800634c:	20000ed0 	.word	0x20000ed0
 8006350:	20000300 	.word	0x20000300
 8006354:	08010cf0 	.word	0x08010cf0
 8006358:	08010c78 	.word	0x08010c78
 800635c:	08010ca0 	.word	0x08010ca0
 8006360:	20001907 	.word	0x20001907
 8006364:	20001500 	.word	0x20001500
 8006368:	20001905 	.word	0x20001905

0800636c <__io_putchar>:
#include "main.h"
#include "stm32_printf.h"

extern UART_HandleTypeDef huart1;
PUTCHAR_PROTOTYPE
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006374:	1d39      	adds	r1, r7, #4
 8006376:	f04f 33ff 	mov.w	r3, #4294967295
 800637a:	2201      	movs	r2, #1
 800637c:	4803      	ldr	r0, [pc, #12]	; (800638c <__io_putchar+0x20>)
 800637e:	f001 ff64 	bl	800824a <HAL_UART_Transmit>
	return ch;
 8006382:	687b      	ldr	r3, [r7, #4]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	200002bc 	.word	0x200002bc

08006390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006394:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <HAL_Init+0x40>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a0d      	ldr	r2, [pc, #52]	; (80063d0 <HAL_Init+0x40>)
 800639a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800639e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <HAL_Init+0x40>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <HAL_Init+0x40>)
 80063a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063ac:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <HAL_Init+0x40>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a07      	ldr	r2, [pc, #28]	; (80063d0 <HAL_Init+0x40>)
 80063b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063b8:	2003      	movs	r0, #3
 80063ba:	f000 f92b 	bl	8006614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063be:	200f      	movs	r0, #15
 80063c0:	f000 f808 	bl	80063d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063c4:	f7fa ff0a 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40023c00 	.word	0x40023c00

080063d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <HAL_InitTick+0x54>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4b12      	ldr	r3, [pc, #72]	; (800642c <HAL_InitTick+0x58>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f943 	bl	800667e <HAL_SYSTICK_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e00e      	b.n	8006420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b0f      	cmp	r3, #15
 8006406:	d80a      	bhi.n	800641e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006408:	2200      	movs	r2, #0
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	f000 f90b 	bl	800662a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006414:	4a06      	ldr	r2, [pc, #24]	; (8006430 <HAL_InitTick+0x5c>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e000      	b.n	8006420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000000 	.word	0x20000000
 800642c:	2000007c 	.word	0x2000007c
 8006430:	20000078 	.word	0x20000078

08006434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <HAL_IncTick+0x20>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <HAL_IncTick+0x24>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4413      	add	r3, r2
 8006444:	4a04      	ldr	r2, [pc, #16]	; (8006458 <HAL_IncTick+0x24>)
 8006446:	6013      	str	r3, [r2, #0]
}
 8006448:	bf00      	nop
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	2000007c 	.word	0x2000007c
 8006458:	20001b08 	.word	0x20001b08

0800645c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  return uwTick;
 8006460:	4b03      	ldr	r3, [pc, #12]	; (8006470 <HAL_GetTick+0x14>)
 8006462:	681b      	ldr	r3, [r3, #0]
}
 8006464:	4618      	mov	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20001b08 	.word	0x20001b08

08006474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006490:	4013      	ands	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800649c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064a6:	4a04      	ldr	r2, [pc, #16]	; (80064b8 <__NVIC_SetPriorityGrouping+0x44>)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	60d3      	str	r3, [r2, #12]
}
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	e000ed00 	.word	0xe000ed00

080064bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064c0:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <__NVIC_GetPriorityGrouping+0x18>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	f003 0307 	and.w	r3, r3, #7
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	e000ed00 	.word	0xe000ed00

080064d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	db0b      	blt.n	8006502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	f003 021f 	and.w	r2, r3, #31
 80064f0:	4907      	ldr	r1, [pc, #28]	; (8006510 <__NVIC_EnableIRQ+0x38>)
 80064f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	2001      	movs	r0, #1
 80064fa:	fa00 f202 	lsl.w	r2, r0, r2
 80064fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	e000e100 	.word	0xe000e100

08006514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006524:	2b00      	cmp	r3, #0
 8006526:	db0a      	blt.n	800653e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	490c      	ldr	r1, [pc, #48]	; (8006560 <__NVIC_SetPriority+0x4c>)
 800652e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006532:	0112      	lsls	r2, r2, #4
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	440b      	add	r3, r1
 8006538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800653c:	e00a      	b.n	8006554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	4908      	ldr	r1, [pc, #32]	; (8006564 <__NVIC_SetPriority+0x50>)
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	3b04      	subs	r3, #4
 800654c:	0112      	lsls	r2, r2, #4
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	440b      	add	r3, r1
 8006552:	761a      	strb	r2, [r3, #24]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	e000e100 	.word	0xe000e100
 8006564:	e000ed00 	.word	0xe000ed00

08006568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	; 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f1c3 0307 	rsb	r3, r3, #7
 8006582:	2b04      	cmp	r3, #4
 8006584:	bf28      	it	cs
 8006586:	2304      	movcs	r3, #4
 8006588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3304      	adds	r3, #4
 800658e:	2b06      	cmp	r3, #6
 8006590:	d902      	bls.n	8006598 <NVIC_EncodePriority+0x30>
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	3b03      	subs	r3, #3
 8006596:	e000      	b.n	800659a <NVIC_EncodePriority+0x32>
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800659c:	f04f 32ff 	mov.w	r2, #4294967295
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43da      	mvns	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	401a      	ands	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065b0:	f04f 31ff 	mov.w	r1, #4294967295
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	43d9      	mvns	r1, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c0:	4313      	orrs	r3, r2
         );
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3724      	adds	r7, #36	; 0x24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3b01      	subs	r3, #1
 80065dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065e0:	d301      	bcc.n	80065e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065e2:	2301      	movs	r3, #1
 80065e4:	e00f      	b.n	8006606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065e6:	4a0a      	ldr	r2, [pc, #40]	; (8006610 <SysTick_Config+0x40>)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ee:	210f      	movs	r1, #15
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	f7ff ff8e 	bl	8006514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065f8:	4b05      	ldr	r3, [pc, #20]	; (8006610 <SysTick_Config+0x40>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065fe:	4b04      	ldr	r3, [pc, #16]	; (8006610 <SysTick_Config+0x40>)
 8006600:	2207      	movs	r2, #7
 8006602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	e000e010 	.word	0xe000e010

08006614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff29 	bl	8006474 <__NVIC_SetPriorityGrouping>
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	4603      	mov	r3, r0
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800663c:	f7ff ff3e 	bl	80064bc <__NVIC_GetPriorityGrouping>
 8006640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	6978      	ldr	r0, [r7, #20]
 8006648:	f7ff ff8e 	bl	8006568 <NVIC_EncodePriority>
 800664c:	4602      	mov	r2, r0
 800664e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff ff5d 	bl	8006514 <__NVIC_SetPriority>
}
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	4603      	mov	r3, r0
 800666a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800666c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff ff31 	bl	80064d8 <__NVIC_EnableIRQ>
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff ffa2 	bl	80065d0 <SysTick_Config>
 800668c:	4603      	mov	r3, r0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80066a4:	f7ff feda 	bl	800645c <HAL_GetTick>
 80066a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d008      	beq.n	80066c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2280      	movs	r2, #128	; 0x80
 80066ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e052      	b.n	800676e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0216 	bic.w	r2, r2, #22
 80066d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <HAL_DMA_Abort+0x62>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0208 	bic.w	r2, r2, #8
 8006706:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006718:	e013      	b.n	8006742 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800671a:	f7ff fe9f 	bl	800645c <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b05      	cmp	r3, #5
 8006726:	d90c      	bls.n	8006742 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2203      	movs	r2, #3
 8006732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e015      	b.n	800676e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e4      	bne.n	800671a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006754:	223f      	movs	r2, #63	; 0x3f
 8006756:	409a      	lsls	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d004      	beq.n	8006794 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2280      	movs	r2, #128	; 0x80
 800678e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e00c      	b.n	80067ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2205      	movs	r2, #5
 8006798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0201 	bic.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067bc:	b480      	push	{r7}
 80067be:	b089      	sub	sp, #36	; 0x24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
 80067d6:	e16b      	b.n	8006ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067d8:	2201      	movs	r2, #1
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4013      	ands	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	f040 815a 	bne.w	8006aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d005      	beq.n	800680e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800680a:	2b02      	cmp	r3, #2
 800680c:	d130      	bne.n	8006870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	2203      	movs	r2, #3
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	43db      	mvns	r3, r3
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	4013      	ands	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	4313      	orrs	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006844:	2201      	movs	r2, #1
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	43db      	mvns	r3, r3
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	4013      	ands	r3, r2
 8006852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 0201 	and.w	r2, r3, #1
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	4313      	orrs	r3, r2
 8006868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	2b03      	cmp	r3, #3
 800687a:	d017      	beq.n	80068ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	2203      	movs	r2, #3
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	43db      	mvns	r3, r3
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4013      	ands	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	fa02 f303 	lsl.w	r3, r2, r3
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d123      	bne.n	8006900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	08da      	lsrs	r2, r3, #3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3208      	adds	r2, #8
 80068c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	220f      	movs	r2, #15
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	43db      	mvns	r3, r3
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	4013      	ands	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	08da      	lsrs	r2, r3, #3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3208      	adds	r2, #8
 80068fa:	69b9      	ldr	r1, [r7, #24]
 80068fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	2203      	movs	r2, #3
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	43db      	mvns	r3, r3
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	4013      	ands	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 0203 	and.w	r2, r3, #3
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4313      	orrs	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80b4 	beq.w	8006aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	4b60      	ldr	r3, [pc, #384]	; (8006ac8 <HAL_GPIO_Init+0x30c>)
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	4a5f      	ldr	r2, [pc, #380]	; (8006ac8 <HAL_GPIO_Init+0x30c>)
 800694c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006950:	6453      	str	r3, [r2, #68]	; 0x44
 8006952:	4b5d      	ldr	r3, [pc, #372]	; (8006ac8 <HAL_GPIO_Init+0x30c>)
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800695e:	4a5b      	ldr	r2, [pc, #364]	; (8006acc <HAL_GPIO_Init+0x310>)
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	089b      	lsrs	r3, r3, #2
 8006964:	3302      	adds	r3, #2
 8006966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800696a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	220f      	movs	r2, #15
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	43db      	mvns	r3, r3
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	4013      	ands	r3, r2
 8006980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a52      	ldr	r2, [pc, #328]	; (8006ad0 <HAL_GPIO_Init+0x314>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d02b      	beq.n	80069e2 <HAL_GPIO_Init+0x226>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a51      	ldr	r2, [pc, #324]	; (8006ad4 <HAL_GPIO_Init+0x318>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d025      	beq.n	80069de <HAL_GPIO_Init+0x222>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a50      	ldr	r2, [pc, #320]	; (8006ad8 <HAL_GPIO_Init+0x31c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d01f      	beq.n	80069da <HAL_GPIO_Init+0x21e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a4f      	ldr	r2, [pc, #316]	; (8006adc <HAL_GPIO_Init+0x320>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d019      	beq.n	80069d6 <HAL_GPIO_Init+0x21a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a4e      	ldr	r2, [pc, #312]	; (8006ae0 <HAL_GPIO_Init+0x324>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <HAL_GPIO_Init+0x216>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a4d      	ldr	r2, [pc, #308]	; (8006ae4 <HAL_GPIO_Init+0x328>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00d      	beq.n	80069ce <HAL_GPIO_Init+0x212>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a4c      	ldr	r2, [pc, #304]	; (8006ae8 <HAL_GPIO_Init+0x32c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <HAL_GPIO_Init+0x20e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a4b      	ldr	r2, [pc, #300]	; (8006aec <HAL_GPIO_Init+0x330>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d101      	bne.n	80069c6 <HAL_GPIO_Init+0x20a>
 80069c2:	2307      	movs	r3, #7
 80069c4:	e00e      	b.n	80069e4 <HAL_GPIO_Init+0x228>
 80069c6:	2308      	movs	r3, #8
 80069c8:	e00c      	b.n	80069e4 <HAL_GPIO_Init+0x228>
 80069ca:	2306      	movs	r3, #6
 80069cc:	e00a      	b.n	80069e4 <HAL_GPIO_Init+0x228>
 80069ce:	2305      	movs	r3, #5
 80069d0:	e008      	b.n	80069e4 <HAL_GPIO_Init+0x228>
 80069d2:	2304      	movs	r3, #4
 80069d4:	e006      	b.n	80069e4 <HAL_GPIO_Init+0x228>
 80069d6:	2303      	movs	r3, #3
 80069d8:	e004      	b.n	80069e4 <HAL_GPIO_Init+0x228>
 80069da:	2302      	movs	r3, #2
 80069dc:	e002      	b.n	80069e4 <HAL_GPIO_Init+0x228>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <HAL_GPIO_Init+0x228>
 80069e2:	2300      	movs	r3, #0
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	f002 0203 	and.w	r2, r2, #3
 80069ea:	0092      	lsls	r2, r2, #2
 80069ec:	4093      	lsls	r3, r2
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069f4:	4935      	ldr	r1, [pc, #212]	; (8006acc <HAL_GPIO_Init+0x310>)
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	089b      	lsrs	r3, r3, #2
 80069fa:	3302      	adds	r3, #2
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a02:	4b3b      	ldr	r3, [pc, #236]	; (8006af0 <HAL_GPIO_Init+0x334>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a26:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <HAL_GPIO_Init+0x334>)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a2c:	4b30      	ldr	r3, [pc, #192]	; (8006af0 <HAL_GPIO_Init+0x334>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a50:	4a27      	ldr	r2, [pc, #156]	; (8006af0 <HAL_GPIO_Init+0x334>)
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006a56:	4b26      	ldr	r3, [pc, #152]	; (8006af0 <HAL_GPIO_Init+0x334>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	4013      	ands	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a7a:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <HAL_GPIO_Init+0x334>)
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a80:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <HAL_GPIO_Init+0x334>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006aa4:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <HAL_GPIO_Init+0x334>)
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	3301      	adds	r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b0f      	cmp	r3, #15
 8006ab4:	f67f ae90 	bls.w	80067d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	3724      	adds	r7, #36	; 0x24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	40013800 	.word	0x40013800
 8006ad0:	40020000 	.word	0x40020000
 8006ad4:	40020400 	.word	0x40020400
 8006ad8:	40020800 	.word	0x40020800
 8006adc:	40020c00 	.word	0x40020c00
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	40021400 	.word	0x40021400
 8006ae8:	40021800 	.word	0x40021800
 8006aec:	40021c00 	.word	0x40021c00
 8006af0:	40013c00 	.word	0x40013c00

08006af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	807b      	strh	r3, [r7, #2]
 8006b00:	4613      	mov	r3, r2
 8006b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b04:	787b      	ldrb	r3, [r7, #1]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b0a:	887a      	ldrh	r2, [r7, #2]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b10:	e003      	b.n	8006b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b12:	887b      	ldrh	r3, [r7, #2]
 8006b14:	041a      	lsls	r2, r3, #16
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	619a      	str	r2, [r3, #24]
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
	...

08006b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e267      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d075      	beq.n	8006c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b46:	4b88      	ldr	r3, [pc, #544]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d00c      	beq.n	8006b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b52:	4b85      	ldr	r3, [pc, #532]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d112      	bne.n	8006b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b5e:	4b82      	ldr	r3, [pc, #520]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b6a:	d10b      	bne.n	8006b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b6c:	4b7e      	ldr	r3, [pc, #504]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d05b      	beq.n	8006c30 <HAL_RCC_OscConfig+0x108>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d157      	bne.n	8006c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e242      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCC_OscConfig+0x74>
 8006b8e:	4b76      	ldr	r3, [pc, #472]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a75      	ldr	r2, [pc, #468]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e01d      	b.n	8006bd8 <HAL_RCC_OscConfig+0xb0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x98>
 8006ba6:	4b70      	ldr	r3, [pc, #448]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a6f      	ldr	r2, [pc, #444]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	4b6d      	ldr	r3, [pc, #436]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a6c      	ldr	r2, [pc, #432]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e00b      	b.n	8006bd8 <HAL_RCC_OscConfig+0xb0>
 8006bc0:	4b69      	ldr	r3, [pc, #420]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a68      	ldr	r2, [pc, #416]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	4b66      	ldr	r3, [pc, #408]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a65      	ldr	r2, [pc, #404]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d013      	beq.n	8006c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be0:	f7ff fc3c 	bl	800645c <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be8:	f7ff fc38 	bl	800645c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e207      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfa:	4b5b      	ldr	r3, [pc, #364]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0xc0>
 8006c06:	e014      	b.n	8006c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c08:	f7ff fc28 	bl	800645c <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c10:	f7ff fc24 	bl	800645c <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b64      	cmp	r3, #100	; 0x64
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e1f3      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c22:	4b51      	ldr	r3, [pc, #324]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0xe8>
 8006c2e:	e000      	b.n	8006c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d063      	beq.n	8006d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c3e:	4b4a      	ldr	r3, [pc, #296]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 030c 	and.w	r3, r3, #12
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c4a:	4b47      	ldr	r3, [pc, #284]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d11c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c56:	4b44      	ldr	r3, [pc, #272]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d116      	bne.n	8006c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c62:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_RCC_OscConfig+0x152>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d001      	beq.n	8006c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e1c7      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c7a:	4b3b      	ldr	r3, [pc, #236]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4937      	ldr	r1, [pc, #220]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c8e:	e03a      	b.n	8006d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d020      	beq.n	8006cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c98:	4b34      	ldr	r3, [pc, #208]	; (8006d6c <HAL_RCC_OscConfig+0x244>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9e:	f7ff fbdd 	bl	800645c <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ca6:	f7ff fbd9 	bl	800645c <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e1a8      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb8:	4b2b      	ldr	r3, [pc, #172]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc4:	4b28      	ldr	r3, [pc, #160]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4925      	ldr	r1, [pc, #148]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	600b      	str	r3, [r1, #0]
 8006cd8:	e015      	b.n	8006d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cda:	4b24      	ldr	r3, [pc, #144]	; (8006d6c <HAL_RCC_OscConfig+0x244>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7ff fbbc 	bl	800645c <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ce8:	f7ff fbb8 	bl	800645c <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e187      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cfa:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d036      	beq.n	8006d80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d016      	beq.n	8006d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d1a:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <HAL_RCC_OscConfig+0x248>)
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d20:	f7ff fb9c 	bl	800645c <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d28:	f7ff fb98 	bl	800645c <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e167      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <HAL_RCC_OscConfig+0x240>)
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCC_OscConfig+0x200>
 8006d46:	e01b      	b.n	8006d80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <HAL_RCC_OscConfig+0x248>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d4e:	f7ff fb85 	bl	800645c <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d54:	e00e      	b.n	8006d74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d56:	f7ff fb81 	bl	800645c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d907      	bls.n	8006d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e150      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	42470000 	.word	0x42470000
 8006d70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d74:	4b88      	ldr	r3, [pc, #544]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1ea      	bne.n	8006d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8097 	beq.w	8006ebc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d92:	4b81      	ldr	r3, [pc, #516]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10f      	bne.n	8006dbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60bb      	str	r3, [r7, #8]
 8006da2:	4b7d      	ldr	r3, [pc, #500]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	4a7c      	ldr	r2, [pc, #496]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dac:	6413      	str	r3, [r2, #64]	; 0x40
 8006dae:	4b7a      	ldr	r3, [pc, #488]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db6:	60bb      	str	r3, [r7, #8]
 8006db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dbe:	4b77      	ldr	r3, [pc, #476]	; (8006f9c <HAL_RCC_OscConfig+0x474>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d118      	bne.n	8006dfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dca:	4b74      	ldr	r3, [pc, #464]	; (8006f9c <HAL_RCC_OscConfig+0x474>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a73      	ldr	r2, [pc, #460]	; (8006f9c <HAL_RCC_OscConfig+0x474>)
 8006dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dd6:	f7ff fb41 	bl	800645c <HAL_GetTick>
 8006dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ddc:	e008      	b.n	8006df0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dde:	f7ff fb3d 	bl	800645c <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e10c      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df0:	4b6a      	ldr	r3, [pc, #424]	; (8006f9c <HAL_RCC_OscConfig+0x474>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0f0      	beq.n	8006dde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d106      	bne.n	8006e12 <HAL_RCC_OscConfig+0x2ea>
 8006e04:	4b64      	ldr	r3, [pc, #400]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e08:	4a63      	ldr	r2, [pc, #396]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e10:	e01c      	b.n	8006e4c <HAL_RCC_OscConfig+0x324>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	d10c      	bne.n	8006e34 <HAL_RCC_OscConfig+0x30c>
 8006e1a:	4b5f      	ldr	r3, [pc, #380]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	4a5e      	ldr	r2, [pc, #376]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e20:	f043 0304 	orr.w	r3, r3, #4
 8006e24:	6713      	str	r3, [r2, #112]	; 0x70
 8006e26:	4b5c      	ldr	r3, [pc, #368]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	4a5b      	ldr	r2, [pc, #364]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	6713      	str	r3, [r2, #112]	; 0x70
 8006e32:	e00b      	b.n	8006e4c <HAL_RCC_OscConfig+0x324>
 8006e34:	4b58      	ldr	r3, [pc, #352]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e38:	4a57      	ldr	r2, [pc, #348]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e40:	4b55      	ldr	r3, [pc, #340]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e44:	4a54      	ldr	r2, [pc, #336]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e46:	f023 0304 	bic.w	r3, r3, #4
 8006e4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d015      	beq.n	8006e80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e54:	f7ff fb02 	bl	800645c <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e5a:	e00a      	b.n	8006e72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e5c:	f7ff fafe 	bl	800645c <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e0cb      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e72:	4b49      	ldr	r3, [pc, #292]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0ee      	beq.n	8006e5c <HAL_RCC_OscConfig+0x334>
 8006e7e:	e014      	b.n	8006eaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e80:	f7ff faec 	bl	800645c <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e86:	e00a      	b.n	8006e9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e88:	f7ff fae8 	bl	800645c <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e0b5      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e9e:	4b3e      	ldr	r3, [pc, #248]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1ee      	bne.n	8006e88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d105      	bne.n	8006ebc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb0:	4b39      	ldr	r3, [pc, #228]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	4a38      	ldr	r2, [pc, #224]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80a1 	beq.w	8007008 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ec6:	4b34      	ldr	r3, [pc, #208]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 030c 	and.w	r3, r3, #12
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d05c      	beq.n	8006f8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d141      	bne.n	8006f5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eda:	4b31      	ldr	r3, [pc, #196]	; (8006fa0 <HAL_RCC_OscConfig+0x478>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee0:	f7ff fabc 	bl	800645c <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee8:	f7ff fab8 	bl	800645c <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e087      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efa:	4b27      	ldr	r3, [pc, #156]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	019b      	lsls	r3, r3, #6
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	061b      	lsls	r3, r3, #24
 8006f2a:	491b      	ldr	r1, [pc, #108]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f30:	4b1b      	ldr	r3, [pc, #108]	; (8006fa0 <HAL_RCC_OscConfig+0x478>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f36:	f7ff fa91 	bl	800645c <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f3e:	f7ff fa8d 	bl	800645c <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e05c      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f50:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x416>
 8006f5c:	e054      	b.n	8007008 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f5e:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <HAL_RCC_OscConfig+0x478>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f64:	f7ff fa7a 	bl	800645c <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f6c:	f7ff fa76 	bl	800645c <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e045      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7e:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <HAL_RCC_OscConfig+0x470>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f0      	bne.n	8006f6c <HAL_RCC_OscConfig+0x444>
 8006f8a:	e03d      	b.n	8007008 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d107      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e038      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	40007000 	.word	0x40007000
 8006fa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fa4:	4b1b      	ldr	r3, [pc, #108]	; (8007014 <HAL_RCC_OscConfig+0x4ec>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d028      	beq.n	8007004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d121      	bne.n	8007004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d11a      	bne.n	8007004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d111      	bne.n	8007004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	3b01      	subs	r3, #1
 8006fee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d107      	bne.n	8007004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	40023800 	.word	0x40023800

08007018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0cc      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800702c:	4b68      	ldr	r3, [pc, #416]	; (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d90c      	bls.n	8007054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703a:	4b65      	ldr	r3, [pc, #404]	; (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007042:	4b63      	ldr	r3, [pc, #396]	; (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d001      	beq.n	8007054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e0b8      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d020      	beq.n	80070a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800706c:	4b59      	ldr	r3, [pc, #356]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4a58      	ldr	r2, [pc, #352]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007084:	4b53      	ldr	r3, [pc, #332]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	4a52      	ldr	r2, [pc, #328]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800708a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800708e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007090:	4b50      	ldr	r3, [pc, #320]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	494d      	ldr	r1, [pc, #308]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d044      	beq.n	8007138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d107      	bne.n	80070c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b6:	4b47      	ldr	r3, [pc, #284]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d119      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e07f      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d003      	beq.n	80070d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d107      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d6:	4b3f      	ldr	r3, [pc, #252]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e06f      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e6:	4b3b      	ldr	r3, [pc, #236]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e067      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070f6:	4b37      	ldr	r3, [pc, #220]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f023 0203 	bic.w	r2, r3, #3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4934      	ldr	r1, [pc, #208]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	4313      	orrs	r3, r2
 8007106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007108:	f7ff f9a8 	bl	800645c <HAL_GetTick>
 800710c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710e:	e00a      	b.n	8007126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007110:	f7ff f9a4 	bl	800645c <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	f241 3288 	movw	r2, #5000	; 0x1388
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e04f      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007126:	4b2b      	ldr	r3, [pc, #172]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 020c 	and.w	r2, r3, #12
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	429a      	cmp	r2, r3
 8007136:	d1eb      	bne.n	8007110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007138:	4b25      	ldr	r3, [pc, #148]	; (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d20c      	bcs.n	8007160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007146:	4b22      	ldr	r3, [pc, #136]	; (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714e:	4b20      	ldr	r3, [pc, #128]	; (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d001      	beq.n	8007160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e032      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d008      	beq.n	800717e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800716c:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	4916      	ldr	r1, [pc, #88]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	4313      	orrs	r3, r2
 800717c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	490e      	ldr	r1, [pc, #56]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800719e:	f000 f82d 	bl	80071fc <HAL_RCC_GetSysClockFreq>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	091b      	lsrs	r3, r3, #4
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	490a      	ldr	r1, [pc, #40]	; (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 80071b0:	5ccb      	ldrb	r3, [r1, r3]
 80071b2:	fa22 f303 	lsr.w	r3, r2, r3
 80071b6:	4a09      	ldr	r2, [pc, #36]	; (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <HAL_RCC_ClockConfig+0x1c8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff f908 	bl	80063d4 <HAL_InitTick>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40023c00 	.word	0x40023c00
 80071d4:	40023800 	.word	0x40023800
 80071d8:	08010d20 	.word	0x08010d20
 80071dc:	20000000 	.word	0x20000000
 80071e0:	20000078 	.word	0x20000078

080071e4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80071e8:	4b03      	ldr	r3, [pc, #12]	; (80071f8 <HAL_RCC_EnableCSS+0x14>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
}
 80071ee:	bf00      	nop
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	4247004c 	.word	0x4247004c

080071fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007200:	b094      	sub	sp, #80	; 0x50
 8007202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	647b      	str	r3, [r7, #68]	; 0x44
 8007208:	2300      	movs	r3, #0
 800720a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800720c:	2300      	movs	r3, #0
 800720e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007214:	4b79      	ldr	r3, [pc, #484]	; (80073fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 030c 	and.w	r3, r3, #12
 800721c:	2b08      	cmp	r3, #8
 800721e:	d00d      	beq.n	800723c <HAL_RCC_GetSysClockFreq+0x40>
 8007220:	2b08      	cmp	r3, #8
 8007222:	f200 80e1 	bhi.w	80073e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_RCC_GetSysClockFreq+0x34>
 800722a:	2b04      	cmp	r3, #4
 800722c:	d003      	beq.n	8007236 <HAL_RCC_GetSysClockFreq+0x3a>
 800722e:	e0db      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007230:	4b73      	ldr	r3, [pc, #460]	; (8007400 <HAL_RCC_GetSysClockFreq+0x204>)
 8007232:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007234:	e0db      	b.n	80073ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007236:	4b72      	ldr	r3, [pc, #456]	; (8007400 <HAL_RCC_GetSysClockFreq+0x204>)
 8007238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800723a:	e0d8      	b.n	80073ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800723c:	4b6f      	ldr	r3, [pc, #444]	; (80073fc <HAL_RCC_GetSysClockFreq+0x200>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007244:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007246:	4b6d      	ldr	r3, [pc, #436]	; (80073fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d063      	beq.n	800731a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007252:	4b6a      	ldr	r3, [pc, #424]	; (80073fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	099b      	lsrs	r3, r3, #6
 8007258:	2200      	movs	r2, #0
 800725a:	63bb      	str	r3, [r7, #56]	; 0x38
 800725c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007264:	633b      	str	r3, [r7, #48]	; 0x30
 8007266:	2300      	movs	r3, #0
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
 800726a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800726e:	4622      	mov	r2, r4
 8007270:	462b      	mov	r3, r5
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f04f 0100 	mov.w	r1, #0
 800727a:	0159      	lsls	r1, r3, #5
 800727c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007280:	0150      	lsls	r0, r2, #5
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4621      	mov	r1, r4
 8007288:	1a51      	subs	r1, r2, r1
 800728a:	6139      	str	r1, [r7, #16]
 800728c:	4629      	mov	r1, r5
 800728e:	eb63 0301 	sbc.w	r3, r3, r1
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072a0:	4659      	mov	r1, fp
 80072a2:	018b      	lsls	r3, r1, #6
 80072a4:	4651      	mov	r1, sl
 80072a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072aa:	4651      	mov	r1, sl
 80072ac:	018a      	lsls	r2, r1, #6
 80072ae:	4651      	mov	r1, sl
 80072b0:	ebb2 0801 	subs.w	r8, r2, r1
 80072b4:	4659      	mov	r1, fp
 80072b6:	eb63 0901 	sbc.w	r9, r3, r1
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072ce:	4690      	mov	r8, r2
 80072d0:	4699      	mov	r9, r3
 80072d2:	4623      	mov	r3, r4
 80072d4:	eb18 0303 	adds.w	r3, r8, r3
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	462b      	mov	r3, r5
 80072dc:	eb49 0303 	adc.w	r3, r9, r3
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072ee:	4629      	mov	r1, r5
 80072f0:	028b      	lsls	r3, r1, #10
 80072f2:	4621      	mov	r1, r4
 80072f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072f8:	4621      	mov	r1, r4
 80072fa:	028a      	lsls	r2, r1, #10
 80072fc:	4610      	mov	r0, r2
 80072fe:	4619      	mov	r1, r3
 8007300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007302:	2200      	movs	r2, #0
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
 8007306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800730c:	f7f9 fccc 	bl	8000ca8 <__aeabi_uldivmod>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4613      	mov	r3, r2
 8007316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007318:	e058      	b.n	80073cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800731a:	4b38      	ldr	r3, [pc, #224]	; (80073fc <HAL_RCC_GetSysClockFreq+0x200>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	099b      	lsrs	r3, r3, #6
 8007320:	2200      	movs	r2, #0
 8007322:	4618      	mov	r0, r3
 8007324:	4611      	mov	r1, r2
 8007326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800732a:	623b      	str	r3, [r7, #32]
 800732c:	2300      	movs	r3, #0
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
 8007330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007334:	4642      	mov	r2, r8
 8007336:	464b      	mov	r3, r9
 8007338:	f04f 0000 	mov.w	r0, #0
 800733c:	f04f 0100 	mov.w	r1, #0
 8007340:	0159      	lsls	r1, r3, #5
 8007342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007346:	0150      	lsls	r0, r2, #5
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4641      	mov	r1, r8
 800734e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007352:	4649      	mov	r1, r9
 8007354:	eb63 0b01 	sbc.w	fp, r3, r1
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800736c:	ebb2 040a 	subs.w	r4, r2, sl
 8007370:	eb63 050b 	sbc.w	r5, r3, fp
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	00eb      	lsls	r3, r5, #3
 800737e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007382:	00e2      	lsls	r2, r4, #3
 8007384:	4614      	mov	r4, r2
 8007386:	461d      	mov	r5, r3
 8007388:	4643      	mov	r3, r8
 800738a:	18e3      	adds	r3, r4, r3
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	464b      	mov	r3, r9
 8007390:	eb45 0303 	adc.w	r3, r5, r3
 8007394:	607b      	str	r3, [r7, #4]
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073a2:	4629      	mov	r1, r5
 80073a4:	028b      	lsls	r3, r1, #10
 80073a6:	4621      	mov	r1, r4
 80073a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073ac:	4621      	mov	r1, r4
 80073ae:	028a      	lsls	r2, r1, #10
 80073b0:	4610      	mov	r0, r2
 80073b2:	4619      	mov	r1, r3
 80073b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b6:	2200      	movs	r2, #0
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	61fa      	str	r2, [r7, #28]
 80073bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073c0:	f7f9 fc72 	bl	8000ca8 <__aeabi_uldivmod>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4613      	mov	r3, r2
 80073ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <HAL_RCC_GetSysClockFreq+0x200>)
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	0c1b      	lsrs	r3, r3, #16
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	3301      	adds	r3, #1
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80073dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073e6:	e002      	b.n	80073ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <HAL_RCC_GetSysClockFreq+0x204>)
 80073ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3750      	adds	r7, #80	; 0x50
 80073f4:	46bd      	mov	sp, r7
 80073f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073fa:	bf00      	nop
 80073fc:	40023800 	.word	0x40023800
 8007400:	00f42400 	.word	0x00f42400

08007404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007408:	4b03      	ldr	r3, [pc, #12]	; (8007418 <HAL_RCC_GetHCLKFreq+0x14>)
 800740a:	681b      	ldr	r3, [r3, #0]
}
 800740c:	4618      	mov	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	20000000 	.word	0x20000000

0800741c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007420:	f7ff fff0 	bl	8007404 <HAL_RCC_GetHCLKFreq>
 8007424:	4602      	mov	r2, r0
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	0a9b      	lsrs	r3, r3, #10
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	4903      	ldr	r1, [pc, #12]	; (8007440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007432:	5ccb      	ldrb	r3, [r1, r3]
 8007434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007438:	4618      	mov	r0, r3
 800743a:	bd80      	pop	{r7, pc}
 800743c:	40023800 	.word	0x40023800
 8007440:	08010d30 	.word	0x08010d30

08007444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007448:	f7ff ffdc 	bl	8007404 <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	0b5b      	lsrs	r3, r3, #13
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4903      	ldr	r1, [pc, #12]	; (8007468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007460:	4618      	mov	r0, r3
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40023800 	.word	0x40023800
 8007468:	08010d30 	.word	0x08010d30

0800746c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007470:	4b06      	ldr	r3, [pc, #24]	; (800748c <HAL_RCC_NMI_IRQHandler+0x20>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007478:	2b80      	cmp	r3, #128	; 0x80
 800747a:	d104      	bne.n	8007486 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800747c:	f000 f80a 	bl	8007494 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007480:	4b03      	ldr	r3, [pc, #12]	; (8007490 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	701a      	strb	r2, [r3, #0]
  }
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	40023800 	.word	0x40023800
 8007490:	4002380e 	.word	0x4002380e

08007494 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e041      	b.n	8007538 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7fa f835 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3304      	adds	r3, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f000 fad9 	bl	8007a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e041      	b.n	80075d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f839 	bl	80075de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f000 fa8a 	bl	8007a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d109      	bne.n	8007618 <HAL_TIM_PWM_Start+0x24>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b01      	cmp	r3, #1
 800760e:	bf14      	ite	ne
 8007610:	2301      	movne	r3, #1
 8007612:	2300      	moveq	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	e022      	b.n	800765e <HAL_TIM_PWM_Start+0x6a>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b04      	cmp	r3, #4
 800761c:	d109      	bne.n	8007632 <HAL_TIM_PWM_Start+0x3e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b01      	cmp	r3, #1
 8007628:	bf14      	ite	ne
 800762a:	2301      	movne	r3, #1
 800762c:	2300      	moveq	r3, #0
 800762e:	b2db      	uxtb	r3, r3
 8007630:	e015      	b.n	800765e <HAL_TIM_PWM_Start+0x6a>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b08      	cmp	r3, #8
 8007636:	d109      	bne.n	800764c <HAL_TIM_PWM_Start+0x58>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b01      	cmp	r3, #1
 8007642:	bf14      	ite	ne
 8007644:	2301      	movne	r3, #1
 8007646:	2300      	moveq	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	e008      	b.n	800765e <HAL_TIM_PWM_Start+0x6a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e07c      	b.n	8007760 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d104      	bne.n	8007676 <HAL_TIM_PWM_Start+0x82>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007674:	e013      	b.n	800769e <HAL_TIM_PWM_Start+0xaa>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d104      	bne.n	8007686 <HAL_TIM_PWM_Start+0x92>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007684:	e00b      	b.n	800769e <HAL_TIM_PWM_Start+0xaa>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b08      	cmp	r3, #8
 800768a:	d104      	bne.n	8007696 <HAL_TIM_PWM_Start+0xa2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007694:	e003      	b.n	800769e <HAL_TIM_PWM_Start+0xaa>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2202      	movs	r2, #2
 800769a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2201      	movs	r2, #1
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fce0 	bl	800806c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <HAL_TIM_PWM_Start+0x174>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <HAL_TIM_PWM_Start+0xcc>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a2c      	ldr	r2, [pc, #176]	; (800776c <HAL_TIM_PWM_Start+0x178>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d101      	bne.n	80076c4 <HAL_TIM_PWM_Start+0xd0>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <HAL_TIM_PWM_Start+0xd2>
 80076c4:	2300      	movs	r3, #0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a22      	ldr	r2, [pc, #136]	; (8007768 <HAL_TIM_PWM_Start+0x174>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d022      	beq.n	800772a <HAL_TIM_PWM_Start+0x136>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ec:	d01d      	beq.n	800772a <HAL_TIM_PWM_Start+0x136>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <HAL_TIM_PWM_Start+0x17c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d018      	beq.n	800772a <HAL_TIM_PWM_Start+0x136>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_TIM_PWM_Start+0x180>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <HAL_TIM_PWM_Start+0x136>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <HAL_TIM_PWM_Start+0x184>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00e      	beq.n	800772a <HAL_TIM_PWM_Start+0x136>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a16      	ldr	r2, [pc, #88]	; (800776c <HAL_TIM_PWM_Start+0x178>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d009      	beq.n	800772a <HAL_TIM_PWM_Start+0x136>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a18      	ldr	r2, [pc, #96]	; (800777c <HAL_TIM_PWM_Start+0x188>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_TIM_PWM_Start+0x136>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a16      	ldr	r2, [pc, #88]	; (8007780 <HAL_TIM_PWM_Start+0x18c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d111      	bne.n	800774e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b06      	cmp	r3, #6
 800773a:	d010      	beq.n	800775e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0201 	orr.w	r2, r2, #1
 800774a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774c:	e007      	b.n	800775e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0201 	orr.w	r2, r2, #1
 800775c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40010000 	.word	0x40010000
 800776c:	40010400 	.word	0x40010400
 8007770:	40000400 	.word	0x40000400
 8007774:	40000800 	.word	0x40000800
 8007778:	40000c00 	.word	0x40000c00
 800777c:	40014000 	.word	0x40014000
 8007780:	40001800 	.word	0x40001800

08007784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800779e:	2302      	movs	r3, #2
 80077a0:	e0ae      	b.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b0c      	cmp	r3, #12
 80077ae:	f200 809f 	bhi.w	80078f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077b2:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077ed 	.word	0x080077ed
 80077bc:	080078f1 	.word	0x080078f1
 80077c0:	080078f1 	.word	0x080078f1
 80077c4:	080078f1 	.word	0x080078f1
 80077c8:	0800782d 	.word	0x0800782d
 80077cc:	080078f1 	.word	0x080078f1
 80077d0:	080078f1 	.word	0x080078f1
 80077d4:	080078f1 	.word	0x080078f1
 80077d8:	0800786f 	.word	0x0800786f
 80077dc:	080078f1 	.word	0x080078f1
 80077e0:	080078f1 	.word	0x080078f1
 80077e4:	080078f1 	.word	0x080078f1
 80077e8:	080078af 	.word	0x080078af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f9f0 	bl	8007bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0208 	orr.w	r2, r2, #8
 8007806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0204 	bic.w	r2, r2, #4
 8007816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6999      	ldr	r1, [r3, #24]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	691a      	ldr	r2, [r3, #16]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	619a      	str	r2, [r3, #24]
      break;
 800782a:	e064      	b.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fa40 	bl	8007cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6999      	ldr	r1, [r3, #24]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	021a      	lsls	r2, r3, #8
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	619a      	str	r2, [r3, #24]
      break;
 800786c:	e043      	b.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fa95 	bl	8007da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0208 	orr.w	r2, r2, #8
 8007888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0204 	bic.w	r2, r2, #4
 8007898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	61da      	str	r2, [r3, #28]
      break;
 80078ac:	e023      	b.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fae9 	bl	8007e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69d9      	ldr	r1, [r3, #28]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	021a      	lsls	r2, r3, #8
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	61da      	str	r2, [r3, #28]
      break;
 80078ee:	e002      	b.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	75fb      	strb	r3, [r7, #23]
      break;
 80078f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_TIM_ConfigClockSource+0x1c>
 8007920:	2302      	movs	r3, #2
 8007922:	e0b4      	b.n	8007a8e <HAL_TIM_ConfigClockSource+0x186>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800794a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800795c:	d03e      	beq.n	80079dc <HAL_TIM_ConfigClockSource+0xd4>
 800795e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007962:	f200 8087 	bhi.w	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796a:	f000 8086 	beq.w	8007a7a <HAL_TIM_ConfigClockSource+0x172>
 800796e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007972:	d87f      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 8007974:	2b70      	cmp	r3, #112	; 0x70
 8007976:	d01a      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0xa6>
 8007978:	2b70      	cmp	r3, #112	; 0x70
 800797a:	d87b      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 800797c:	2b60      	cmp	r3, #96	; 0x60
 800797e:	d050      	beq.n	8007a22 <HAL_TIM_ConfigClockSource+0x11a>
 8007980:	2b60      	cmp	r3, #96	; 0x60
 8007982:	d877      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 8007984:	2b50      	cmp	r3, #80	; 0x50
 8007986:	d03c      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0xfa>
 8007988:	2b50      	cmp	r3, #80	; 0x50
 800798a:	d873      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d058      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x13a>
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d86f      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 8007994:	2b30      	cmp	r3, #48	; 0x30
 8007996:	d064      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15a>
 8007998:	2b30      	cmp	r3, #48	; 0x30
 800799a:	d86b      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 800799c:	2b20      	cmp	r3, #32
 800799e:	d060      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15a>
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d867      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d05c      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15a>
 80079a8:	2b10      	cmp	r3, #16
 80079aa:	d05a      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15a>
 80079ac:	e062      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6899      	ldr	r1, [r3, #8]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f000 fb35 	bl	800802c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	609a      	str	r2, [r3, #8]
      break;
 80079da:	e04f      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	6899      	ldr	r1, [r3, #8]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f000 fb1e 	bl	800802c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079fe:	609a      	str	r2, [r3, #8]
      break;
 8007a00:	e03c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6859      	ldr	r1, [r3, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f000 fa92 	bl	8007f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2150      	movs	r1, #80	; 0x50
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 faeb 	bl	8007ff6 <TIM_ITRx_SetConfig>
      break;
 8007a20:	e02c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6859      	ldr	r1, [r3, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f000 fab1 	bl	8007f96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2160      	movs	r1, #96	; 0x60
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fadb 	bl	8007ff6 <TIM_ITRx_SetConfig>
      break;
 8007a40:	e01c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6859      	ldr	r1, [r3, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f000 fa72 	bl	8007f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2140      	movs	r1, #64	; 0x40
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 facb 	bl	8007ff6 <TIM_ITRx_SetConfig>
      break;
 8007a60:	e00c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f000 fac2 	bl	8007ff6 <TIM_ITRx_SetConfig>
      break;
 8007a72:	e003      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
      break;
 8007a78:	e000      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a40      	ldr	r2, [pc, #256]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d013      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab6:	d00f      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a3d      	ldr	r2, [pc, #244]	; (8007bb0 <TIM_Base_SetConfig+0x118>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a3c      	ldr	r2, [pc, #240]	; (8007bb4 <TIM_Base_SetConfig+0x11c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d007      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a3b      	ldr	r2, [pc, #236]	; (8007bb8 <TIM_Base_SetConfig+0x120>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a3a      	ldr	r2, [pc, #232]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d108      	bne.n	8007aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a2f      	ldr	r2, [pc, #188]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d02b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af8:	d027      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a2c      	ldr	r2, [pc, #176]	; (8007bb0 <TIM_Base_SetConfig+0x118>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d023      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a2b      	ldr	r2, [pc, #172]	; (8007bb4 <TIM_Base_SetConfig+0x11c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d01f      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <TIM_Base_SetConfig+0x120>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d01b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a29      	ldr	r2, [pc, #164]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d017      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a28      	ldr	r2, [pc, #160]	; (8007bc0 <TIM_Base_SetConfig+0x128>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d013      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a27      	ldr	r2, [pc, #156]	; (8007bc4 <TIM_Base_SetConfig+0x12c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00f      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a26      	ldr	r2, [pc, #152]	; (8007bc8 <TIM_Base_SetConfig+0x130>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a25      	ldr	r2, [pc, #148]	; (8007bcc <TIM_Base_SetConfig+0x134>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d007      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a24      	ldr	r2, [pc, #144]	; (8007bd0 <TIM_Base_SetConfig+0x138>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a23      	ldr	r2, [pc, #140]	; (8007bd4 <TIM_Base_SetConfig+0x13c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d108      	bne.n	8007b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d003      	beq.n	8007b90 <TIM_Base_SetConfig+0xf8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d103      	bne.n	8007b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	615a      	str	r2, [r3, #20]
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40000400 	.word	0x40000400
 8007bb4:	40000800 	.word	0x40000800
 8007bb8:	40000c00 	.word	0x40000c00
 8007bbc:	40010400 	.word	0x40010400
 8007bc0:	40014000 	.word	0x40014000
 8007bc4:	40014400 	.word	0x40014400
 8007bc8:	40014800 	.word	0x40014800
 8007bcc:	40001800 	.word	0x40001800
 8007bd0:	40001c00 	.word	0x40001c00
 8007bd4:	40002000 	.word	0x40002000

08007bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	f023 0201 	bic.w	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f023 0302 	bic.w	r3, r3, #2
 8007c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a20      	ldr	r2, [pc, #128]	; (8007cb0 <TIM_OC1_SetConfig+0xd8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC1_SetConfig+0x64>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <TIM_OC1_SetConfig+0xdc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d10c      	bne.n	8007c56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f023 0308 	bic.w	r3, r3, #8
 8007c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f023 0304 	bic.w	r3, r3, #4
 8007c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <TIM_OC1_SetConfig+0xd8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_OC1_SetConfig+0x8e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a14      	ldr	r2, [pc, #80]	; (8007cb4 <TIM_OC1_SetConfig+0xdc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d111      	bne.n	8007c8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	621a      	str	r2, [r3, #32]
}
 8007ca4:	bf00      	nop
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	40010000 	.word	0x40010000
 8007cb4:	40010400 	.word	0x40010400

08007cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	f023 0210 	bic.w	r2, r3, #16
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f023 0320 	bic.w	r3, r3, #32
 8007d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	011b      	lsls	r3, r3, #4
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a22      	ldr	r2, [pc, #136]	; (8007d9c <TIM_OC2_SetConfig+0xe4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_OC2_SetConfig+0x68>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a21      	ldr	r2, [pc, #132]	; (8007da0 <TIM_OC2_SetConfig+0xe8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d10d      	bne.n	8007d3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	011b      	lsls	r3, r3, #4
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <TIM_OC2_SetConfig+0xe4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_OC2_SetConfig+0x94>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <TIM_OC2_SetConfig+0xe8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d113      	bne.n	8007d74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	621a      	str	r2, [r3, #32]
}
 8007d8e:	bf00      	nop
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40010000 	.word	0x40010000
 8007da0:	40010400 	.word	0x40010400

08007da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a21      	ldr	r2, [pc, #132]	; (8007e84 <TIM_OC3_SetConfig+0xe0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_OC3_SetConfig+0x66>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a20      	ldr	r2, [pc, #128]	; (8007e88 <TIM_OC3_SetConfig+0xe4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10d      	bne.n	8007e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a16      	ldr	r2, [pc, #88]	; (8007e84 <TIM_OC3_SetConfig+0xe0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d003      	beq.n	8007e36 <TIM_OC3_SetConfig+0x92>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <TIM_OC3_SetConfig+0xe4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d113      	bne.n	8007e5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	621a      	str	r2, [r3, #32]
}
 8007e78:	bf00      	nop
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40010400 	.word	0x40010400

08007e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	031b      	lsls	r3, r3, #12
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a12      	ldr	r2, [pc, #72]	; (8007f30 <TIM_OC4_SetConfig+0xa4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_OC4_SetConfig+0x68>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a11      	ldr	r2, [pc, #68]	; (8007f34 <TIM_OC4_SetConfig+0xa8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d109      	bne.n	8007f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	019b      	lsls	r3, r3, #6
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	621a      	str	r2, [r3, #32]
}
 8007f22:	bf00      	nop
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40010000 	.word	0x40010000
 8007f34:	40010400 	.word	0x40010400

08007f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	f023 0201 	bic.w	r2, r3, #1
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f023 030a 	bic.w	r3, r3, #10
 8007f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	621a      	str	r2, [r3, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b087      	sub	sp, #28
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f023 0210 	bic.w	r2, r3, #16
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	031b      	lsls	r3, r3, #12
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	621a      	str	r2, [r3, #32]
}
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4313      	orrs	r3, r2
 8008014:	f043 0307 	orr.w	r3, r3, #7
 8008018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	609a      	str	r2, [r3, #8]
}
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	021a      	lsls	r2, r3, #8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	431a      	orrs	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4313      	orrs	r3, r2
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	609a      	str	r2, [r3, #8]
}
 8008060:	bf00      	nop
 8008062:	371c      	adds	r7, #28
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	2201      	movs	r2, #1
 8008080:	fa02 f303 	lsl.w	r3, r2, r3
 8008084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	43db      	mvns	r3, r3
 800808e:	401a      	ands	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1a      	ldr	r2, [r3, #32]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	fa01 f303 	lsl.w	r3, r1, r3
 80080a4:	431a      	orrs	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	621a      	str	r2, [r3, #32]
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e05a      	b.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a21      	ldr	r2, [pc, #132]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d022      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811c:	d01d      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a1d      	ldr	r2, [pc, #116]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d018      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a1b      	ldr	r2, [pc, #108]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d013      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a1a      	ldr	r2, [pc, #104]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d00e      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a18      	ldr	r2, [pc, #96]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d009      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d004      	beq.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a15      	ldr	r2, [pc, #84]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d10c      	bne.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	4313      	orrs	r3, r2
 800816a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40010000 	.word	0x40010000
 8008198:	40000400 	.word	0x40000400
 800819c:	40000800 	.word	0x40000800
 80081a0:	40000c00 	.word	0x40000c00
 80081a4:	40010400 	.word	0x40010400
 80081a8:	40014000 	.word	0x40014000
 80081ac:	40001800 	.word	0x40001800

080081b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e03f      	b.n	8008242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7f9 fa34 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2224      	movs	r2, #36	; 0x24
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fddf 	bl	8008db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691a      	ldr	r2, [r3, #16]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	695a      	ldr	r2, [r3, #20]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2220      	movs	r2, #32
 800823c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b08a      	sub	sp, #40	; 0x28
 800824e:	af02      	add	r7, sp, #8
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b20      	cmp	r3, #32
 8008268:	d17c      	bne.n	8008364 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <HAL_UART_Transmit+0x2c>
 8008270:	88fb      	ldrh	r3, [r7, #6]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e075      	b.n	8008366 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_UART_Transmit+0x3e>
 8008284:	2302      	movs	r3, #2
 8008286:	e06e      	b.n	8008366 <HAL_UART_Transmit+0x11c>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2221      	movs	r2, #33	; 0x21
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800829e:	f7fe f8dd 	bl	800645c <HAL_GetTick>
 80082a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	88fa      	ldrh	r2, [r7, #6]
 80082a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082b8:	d108      	bne.n	80082cc <HAL_UART_Transmit+0x82>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d104      	bne.n	80082cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	e003      	b.n	80082d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082dc:	e02a      	b.n	8008334 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2200      	movs	r2, #0
 80082e6:	2180      	movs	r1, #128	; 0x80
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fb1f 	bl	800892c <UART_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e036      	b.n	8008366 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800830c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	3302      	adds	r3, #2
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	e007      	b.n	8008326 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	3301      	adds	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1cf      	bne.n	80082de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2200      	movs	r2, #0
 8008346:	2140      	movs	r1, #64	; 0x40
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 faef 	bl	800892c <UART_WaitOnFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e006      	b.n	8008366 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	e000      	b.n	8008366 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008364:	2302      	movs	r3, #2
  }
}
 8008366:	4618      	mov	r0, r3
 8008368:	3720      	adds	r7, #32
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	4613      	mov	r3, r2
 800837a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b20      	cmp	r3, #32
 8008386:	d11d      	bne.n	80083c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <HAL_UART_Receive_IT+0x26>
 800838e:	88fb      	ldrh	r3, [r7, #6]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e016      	b.n	80083c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d101      	bne.n	80083a6 <HAL_UART_Receive_IT+0x38>
 80083a2:	2302      	movs	r3, #2
 80083a4:	e00f      	b.n	80083c6 <HAL_UART_Receive_IT+0x58>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	461a      	mov	r2, r3
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 fb24 	bl	8008a08 <UART_Start_Receive_IT>
 80083c0:	4603      	mov	r3, r0
 80083c2:	e000      	b.n	80083c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80083c4:	2302      	movs	r3, #2
  }
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b0ba      	sub	sp, #232	; 0xe8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800840e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10f      	bne.n	8008436 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <HAL_UART_IRQHandler+0x66>
 8008422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fc07 	bl	8008c42 <UART_Receive_IT>
      return;
 8008434:	e256      	b.n	80088e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80de 	beq.w	80085fc <HAL_UART_IRQHandler+0x22c>
 8008440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800844c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008450:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 80d1 	beq.w	80085fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00b      	beq.n	800847e <HAL_UART_IRQHandler+0xae>
 8008466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800846a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846e:	2b00      	cmp	r3, #0
 8008470:	d005      	beq.n	800847e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	f043 0201 	orr.w	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800847e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008482:	f003 0304 	and.w	r3, r3, #4
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <HAL_UART_IRQHandler+0xd2>
 800848a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	f043 0202 	orr.w	r2, r3, #2
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <HAL_UART_IRQHandler+0xf6>
 80084ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	f043 0204 	orr.w	r2, r3, #4
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d011      	beq.n	80084f6 <HAL_UART_IRQHandler+0x126>
 80084d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d105      	bne.n	80084ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	f043 0208 	orr.w	r2, r3, #8
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 81ed 	beq.w	80088da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	d008      	beq.n	800851e <HAL_UART_IRQHandler+0x14e>
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fb92 	bl	8008c42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008528:	2b40      	cmp	r3, #64	; 0x40
 800852a:	bf0c      	ite	eq
 800852c:	2301      	moveq	r3, #1
 800852e:	2300      	movne	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f003 0308 	and.w	r3, r3, #8
 800853e:	2b00      	cmp	r3, #0
 8008540:	d103      	bne.n	800854a <HAL_UART_IRQHandler+0x17a>
 8008542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008546:	2b00      	cmp	r3, #0
 8008548:	d04f      	beq.n	80085ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa9a 	bl	8008a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d141      	bne.n	80085e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3314      	adds	r3, #20
 8008564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3314      	adds	r3, #20
 8008586:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800858a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800858e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1d9      	bne.n	800855e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d013      	beq.n	80085da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	4a7d      	ldr	r2, [pc, #500]	; (80087ac <HAL_UART_IRQHandler+0x3dc>)
 80085b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe f8d9 	bl	8006776 <HAL_DMA_Abort_IT>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d016      	beq.n	80085f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d8:	e00e      	b.n	80085f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f990 	bl	8008900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e0:	e00a      	b.n	80085f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f98c 	bl	8008900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e8:	e006      	b.n	80085f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f988 	bl	8008900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80085f6:	e170      	b.n	80088da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f8:	bf00      	nop
    return;
 80085fa:	e16e      	b.n	80088da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008600:	2b01      	cmp	r3, #1
 8008602:	f040 814a 	bne.w	800889a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8143 	beq.w	800889a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 813c 	beq.w	800889a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008622:	2300      	movs	r3, #0
 8008624:	60bb      	str	r3, [r7, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60bb      	str	r3, [r7, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	60bb      	str	r3, [r7, #8]
 8008636:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b40      	cmp	r3, #64	; 0x40
 8008644:	f040 80b4 	bne.w	80087b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008654:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 8140 	beq.w	80088de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008666:	429a      	cmp	r2, r3
 8008668:	f080 8139 	bcs.w	80088de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008672:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867e:	f000 8088 	beq.w	8008792 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800869c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	330c      	adds	r3, #12
 80086aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1d9      	bne.n	8008682 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3314      	adds	r3, #20
 80086d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086e0:	f023 0301 	bic.w	r3, r3, #1
 80086e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3314      	adds	r3, #20
 80086ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e1      	bne.n	80086ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3314      	adds	r3, #20
 8008710:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800871a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800871c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3314      	adds	r3, #20
 800872a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800872e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008730:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008734:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800873c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e3      	bne.n	800870a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2220      	movs	r2, #32
 8008746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008762:	f023 0310 	bic.w	r3, r3, #16
 8008766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	330c      	adds	r3, #12
 8008770:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008774:	65ba      	str	r2, [r7, #88]	; 0x58
 8008776:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800877a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e3      	bne.n	8008750 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	4618      	mov	r0, r3
 800878e:	f7fd ff82 	bl	8006696 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800879a:	b29b      	uxth	r3, r3
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	b29b      	uxth	r3, r3
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f8b6 	bl	8008914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087a8:	e099      	b.n	80088de <HAL_UART_IRQHandler+0x50e>
 80087aa:	bf00      	nop
 80087ac:	08008b4b 	.word	0x08008b4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 808b 	beq.w	80088e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80087cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 8086 	beq.w	80088e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	330c      	adds	r3, #12
 80087dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	330c      	adds	r3, #12
 80087f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80087fa:	647a      	str	r2, [r7, #68]	; 0x44
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e3      	bne.n	80087d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3314      	adds	r3, #20
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	623b      	str	r3, [r7, #32]
   return(result);
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	f023 0301 	bic.w	r3, r3, #1
 8008824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3314      	adds	r3, #20
 800882e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008832:	633a      	str	r2, [r7, #48]	; 0x30
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e3      	bne.n	800880e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	330c      	adds	r3, #12
 800885a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	60fb      	str	r3, [r7, #12]
   return(result);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0310 	bic.w	r3, r3, #16
 800886a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	330c      	adds	r3, #12
 8008874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008878:	61fa      	str	r2, [r7, #28]
 800887a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	69b9      	ldr	r1, [r7, #24]
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	617b      	str	r3, [r7, #20]
   return(result);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e3      	bne.n	8008854 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800888c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f83e 	bl	8008914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008898:	e023      	b.n	80088e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800889a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d009      	beq.n	80088ba <HAL_UART_IRQHandler+0x4ea>
 80088a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f95d 	bl	8008b72 <UART_Transmit_IT>
    return;
 80088b8:	e014      	b.n	80088e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00e      	beq.n	80088e4 <HAL_UART_IRQHandler+0x514>
 80088c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d008      	beq.n	80088e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f99d 	bl	8008c12 <UART_EndTransmit_IT>
    return;
 80088d8:	e004      	b.n	80088e4 <HAL_UART_IRQHandler+0x514>
    return;
 80088da:	bf00      	nop
 80088dc:	e002      	b.n	80088e4 <HAL_UART_IRQHandler+0x514>
      return;
 80088de:	bf00      	nop
 80088e0:	e000      	b.n	80088e4 <HAL_UART_IRQHandler+0x514>
      return;
 80088e2:	bf00      	nop
  }
}
 80088e4:	37e8      	adds	r7, #232	; 0xe8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop

080088ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b090      	sub	sp, #64	; 0x40
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	4613      	mov	r3, r2
 800893a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800893c:	e050      	b.n	80089e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d04c      	beq.n	80089e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008948:	2b00      	cmp	r3, #0
 800894a:	d007      	beq.n	800895c <UART_WaitOnFlagUntilTimeout+0x30>
 800894c:	f7fd fd86 	bl	800645c <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008958:	429a      	cmp	r2, r3
 800895a:	d241      	bcs.n	80089e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	330c      	adds	r3, #12
 8008962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	330c      	adds	r3, #12
 800897a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800897c:	637a      	str	r2, [r7, #52]	; 0x34
 800897e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e5      	bne.n	800895c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3314      	adds	r3, #20
 8008996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	613b      	str	r3, [r7, #16]
   return(result);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f023 0301 	bic.w	r3, r3, #1
 80089a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3314      	adds	r3, #20
 80089ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089b0:	623a      	str	r2, [r7, #32]
 80089b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	6a3a      	ldr	r2, [r7, #32]
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e5      	bne.n	8008990 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e00f      	b.n	8008a00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	4013      	ands	r3, r2
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	bf0c      	ite	eq
 80089f0:	2301      	moveq	r3, #1
 80089f2:	2300      	movne	r3, #0
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	461a      	mov	r2, r3
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d09f      	beq.n	800893e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3740      	adds	r7, #64	; 0x40
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	88fa      	ldrh	r2, [r7, #6]
 8008a20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	88fa      	ldrh	r2, [r7, #6]
 8008a26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2222      	movs	r2, #34	; 0x22
 8008a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a54:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695a      	ldr	r2, [r3, #20]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f042 0201 	orr.w	r2, r2, #1
 8008a64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0220 	orr.w	r2, r2, #32
 8008a74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b095      	sub	sp, #84	; 0x54
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	330c      	adds	r3, #12
 8008a92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a96:	e853 3f00 	ldrex	r3, [r3]
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008aac:	643a      	str	r2, [r7, #64]	; 0x40
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e5      	bne.n	8008a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3314      	adds	r3, #20
 8008ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3314      	adds	r3, #20
 8008ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e5      	bne.n	8008ac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d119      	bne.n	8008b30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	330c      	adds	r3, #12
 8008b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	e853 3f00 	ldrex	r3, [r3]
 8008b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f023 0310 	bic.w	r3, r3, #16
 8008b12:	647b      	str	r3, [r7, #68]	; 0x44
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b1c:	61ba      	str	r2, [r7, #24]
 8008b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6979      	ldr	r1, [r7, #20]
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e5      	bne.n	8008afc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b3e:	bf00      	nop
 8008b40:	3754      	adds	r7, #84	; 0x54
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff fecb 	bl	8008900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b21      	cmp	r3, #33	; 0x21
 8008b84:	d13e      	bne.n	8008c04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8e:	d114      	bne.n	8008bba <UART_Transmit_IT+0x48>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d110      	bne.n	8008bba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	1c9a      	adds	r2, r3, #2
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	621a      	str	r2, [r3, #32]
 8008bb8:	e008      	b.n	8008bcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	1c59      	adds	r1, r3, #1
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6211      	str	r1, [r2, #32]
 8008bc4:	781a      	ldrb	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10f      	bne.n	8008c00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	e000      	b.n	8008c06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c04:	2302      	movs	r3, #2
  }
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff fe5a 	bl	80088ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b08c      	sub	sp, #48	; 0x30
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b22      	cmp	r3, #34	; 0x22
 8008c54:	f040 80ab 	bne.w	8008dae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c60:	d117      	bne.n	8008c92 <UART_Receive_IT+0x50>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d113      	bne.n	8008c92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8a:	1c9a      	adds	r2, r3, #2
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8008c90:	e026      	b.n	8008ce0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca4:	d007      	beq.n	8008cb6 <UART_Receive_IT+0x74>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <UART_Receive_IT+0x82>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	e008      	b.n	8008cd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	4619      	mov	r1, r3
 8008cee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d15a      	bne.n	8008daa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0220 	bic.w	r2, r2, #32
 8008d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695a      	ldr	r2, [r3, #20]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0201 	bic.w	r2, r2, #1
 8008d22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d135      	bne.n	8008da0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	330c      	adds	r3, #12
 8008d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f023 0310 	bic.w	r3, r3, #16
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5a:	623a      	str	r2, [r7, #32]
 8008d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	69f9      	ldr	r1, [r7, #28]
 8008d60:	6a3a      	ldr	r2, [r7, #32]
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e5      	bne.n	8008d3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0310 	and.w	r3, r3, #16
 8008d78:	2b10      	cmp	r3, #16
 8008d7a:	d10a      	bne.n	8008d92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff fdbb 	bl	8008914 <HAL_UARTEx_RxEventCallback>
 8008d9e:	e002      	b.n	8008da6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7f8 fedd 	bl	8001b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e002      	b.n	8008db0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e000      	b.n	8008db0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008dae:	2302      	movs	r3, #2
  }
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3730      	adds	r7, #48	; 0x30
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dbc:	b0c0      	sub	sp, #256	; 0x100
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd4:	68d9      	ldr	r1, [r3, #12]
 8008dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	ea40 0301 	orr.w	r3, r0, r1
 8008de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	431a      	orrs	r2, r3
 8008df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e10:	f021 010c 	bic.w	r1, r1, #12
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e1e:	430b      	orrs	r3, r1
 8008e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e32:	6999      	ldr	r1, [r3, #24]
 8008e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	ea40 0301 	orr.w	r3, r0, r1
 8008e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4b8f      	ldr	r3, [pc, #572]	; (8009084 <UART_SetConfig+0x2cc>)
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d005      	beq.n	8008e58 <UART_SetConfig+0xa0>
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b8d      	ldr	r3, [pc, #564]	; (8009088 <UART_SetConfig+0x2d0>)
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d104      	bne.n	8008e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e58:	f7fe faf4 	bl	8007444 <HAL_RCC_GetPCLK2Freq>
 8008e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e60:	e003      	b.n	8008e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e62:	f7fe fadb 	bl	800741c <HAL_RCC_GetPCLK1Freq>
 8008e66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e74:	f040 810c 	bne.w	8009090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	1891      	adds	r1, r2, r2
 8008e90:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e92:	415b      	adcs	r3, r3
 8008e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	eb12 0801 	adds.w	r8, r2, r1
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	eb43 0901 	adc.w	r9, r3, r1
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008eba:	4690      	mov	r8, r2
 8008ebc:	4699      	mov	r9, r3
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	eb18 0303 	adds.w	r3, r8, r3
 8008ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ec8:	462b      	mov	r3, r5
 8008eca:	eb49 0303 	adc.w	r3, r9, r3
 8008ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ede:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	18db      	adds	r3, r3, r3
 8008eea:	653b      	str	r3, [r7, #80]	; 0x50
 8008eec:	4613      	mov	r3, r2
 8008eee:	eb42 0303 	adc.w	r3, r2, r3
 8008ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008efc:	f7f7 fed4 	bl	8000ca8 <__aeabi_uldivmod>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4b61      	ldr	r3, [pc, #388]	; (800908c <UART_SetConfig+0x2d4>)
 8008f06:	fba3 2302 	umull	r2, r3, r3, r2
 8008f0a:	095b      	lsrs	r3, r3, #5
 8008f0c:	011c      	lsls	r4, r3, #4
 8008f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f20:	4642      	mov	r2, r8
 8008f22:	464b      	mov	r3, r9
 8008f24:	1891      	adds	r1, r2, r2
 8008f26:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f28:	415b      	adcs	r3, r3
 8008f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f30:	4641      	mov	r1, r8
 8008f32:	eb12 0a01 	adds.w	sl, r2, r1
 8008f36:	4649      	mov	r1, r9
 8008f38:	eb43 0b01 	adc.w	fp, r3, r1
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	f04f 0300 	mov.w	r3, #0
 8008f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f50:	4692      	mov	sl, r2
 8008f52:	469b      	mov	fp, r3
 8008f54:	4643      	mov	r3, r8
 8008f56:	eb1a 0303 	adds.w	r3, sl, r3
 8008f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	eb4b 0303 	adc.w	r3, fp, r3
 8008f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	18db      	adds	r3, r3, r3
 8008f80:	643b      	str	r3, [r7, #64]	; 0x40
 8008f82:	4613      	mov	r3, r2
 8008f84:	eb42 0303 	adc.w	r3, r2, r3
 8008f88:	647b      	str	r3, [r7, #68]	; 0x44
 8008f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f92:	f7f7 fe89 	bl	8000ca8 <__aeabi_uldivmod>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	4b3b      	ldr	r3, [pc, #236]	; (800908c <UART_SetConfig+0x2d4>)
 8008f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	2264      	movs	r2, #100	; 0x64
 8008fa6:	fb02 f303 	mul.w	r3, r2, r3
 8008faa:	1acb      	subs	r3, r1, r3
 8008fac:	00db      	lsls	r3, r3, #3
 8008fae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008fb2:	4b36      	ldr	r3, [pc, #216]	; (800908c <UART_SetConfig+0x2d4>)
 8008fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fc0:	441c      	add	r4, r3
 8008fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	1891      	adds	r1, r2, r2
 8008fda:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fdc:	415b      	adcs	r3, r3
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	1851      	adds	r1, r2, r1
 8008fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8008fea:	4649      	mov	r1, r9
 8008fec:	414b      	adcs	r3, r1
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	f04f 0300 	mov.w	r3, #0
 8008ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ffc:	4659      	mov	r1, fp
 8008ffe:	00cb      	lsls	r3, r1, #3
 8009000:	4651      	mov	r1, sl
 8009002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009006:	4651      	mov	r1, sl
 8009008:	00ca      	lsls	r2, r1, #3
 800900a:	4610      	mov	r0, r2
 800900c:	4619      	mov	r1, r3
 800900e:	4603      	mov	r3, r0
 8009010:	4642      	mov	r2, r8
 8009012:	189b      	adds	r3, r3, r2
 8009014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009018:	464b      	mov	r3, r9
 800901a:	460a      	mov	r2, r1
 800901c:	eb42 0303 	adc.w	r3, r2, r3
 8009020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009030:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009038:	460b      	mov	r3, r1
 800903a:	18db      	adds	r3, r3, r3
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
 800903e:	4613      	mov	r3, r2
 8009040:	eb42 0303 	adc.w	r3, r2, r3
 8009044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800904a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800904e:	f7f7 fe2b 	bl	8000ca8 <__aeabi_uldivmod>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	4b0d      	ldr	r3, [pc, #52]	; (800908c <UART_SetConfig+0x2d4>)
 8009058:	fba3 1302 	umull	r1, r3, r3, r2
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	2164      	movs	r1, #100	; 0x64
 8009060:	fb01 f303 	mul.w	r3, r1, r3
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	3332      	adds	r3, #50	; 0x32
 800906a:	4a08      	ldr	r2, [pc, #32]	; (800908c <UART_SetConfig+0x2d4>)
 800906c:	fba2 2303 	umull	r2, r3, r2, r3
 8009070:	095b      	lsrs	r3, r3, #5
 8009072:	f003 0207 	and.w	r2, r3, #7
 8009076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4422      	add	r2, r4
 800907e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009080:	e105      	b.n	800928e <UART_SetConfig+0x4d6>
 8009082:	bf00      	nop
 8009084:	40011000 	.word	0x40011000
 8009088:	40011400 	.word	0x40011400
 800908c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009094:	2200      	movs	r2, #0
 8009096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800909a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800909e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80090a2:	4642      	mov	r2, r8
 80090a4:	464b      	mov	r3, r9
 80090a6:	1891      	adds	r1, r2, r2
 80090a8:	6239      	str	r1, [r7, #32]
 80090aa:	415b      	adcs	r3, r3
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
 80090ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090b2:	4641      	mov	r1, r8
 80090b4:	1854      	adds	r4, r2, r1
 80090b6:	4649      	mov	r1, r9
 80090b8:	eb43 0501 	adc.w	r5, r3, r1
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	f04f 0300 	mov.w	r3, #0
 80090c4:	00eb      	lsls	r3, r5, #3
 80090c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090ca:	00e2      	lsls	r2, r4, #3
 80090cc:	4614      	mov	r4, r2
 80090ce:	461d      	mov	r5, r3
 80090d0:	4643      	mov	r3, r8
 80090d2:	18e3      	adds	r3, r4, r3
 80090d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090d8:	464b      	mov	r3, r9
 80090da:	eb45 0303 	adc.w	r3, r5, r3
 80090de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	f04f 0300 	mov.w	r3, #0
 80090fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090fe:	4629      	mov	r1, r5
 8009100:	008b      	lsls	r3, r1, #2
 8009102:	4621      	mov	r1, r4
 8009104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009108:	4621      	mov	r1, r4
 800910a:	008a      	lsls	r2, r1, #2
 800910c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009110:	f7f7 fdca 	bl	8000ca8 <__aeabi_uldivmod>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4b60      	ldr	r3, [pc, #384]	; (800929c <UART_SetConfig+0x4e4>)
 800911a:	fba3 2302 	umull	r2, r3, r3, r2
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	011c      	lsls	r4, r3, #4
 8009122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009126:	2200      	movs	r2, #0
 8009128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800912c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009134:	4642      	mov	r2, r8
 8009136:	464b      	mov	r3, r9
 8009138:	1891      	adds	r1, r2, r2
 800913a:	61b9      	str	r1, [r7, #24]
 800913c:	415b      	adcs	r3, r3
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009144:	4641      	mov	r1, r8
 8009146:	1851      	adds	r1, r2, r1
 8009148:	6139      	str	r1, [r7, #16]
 800914a:	4649      	mov	r1, r9
 800914c:	414b      	adcs	r3, r1
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	f04f 0200 	mov.w	r2, #0
 8009154:	f04f 0300 	mov.w	r3, #0
 8009158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800915c:	4659      	mov	r1, fp
 800915e:	00cb      	lsls	r3, r1, #3
 8009160:	4651      	mov	r1, sl
 8009162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009166:	4651      	mov	r1, sl
 8009168:	00ca      	lsls	r2, r1, #3
 800916a:	4610      	mov	r0, r2
 800916c:	4619      	mov	r1, r3
 800916e:	4603      	mov	r3, r0
 8009170:	4642      	mov	r2, r8
 8009172:	189b      	adds	r3, r3, r2
 8009174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009178:	464b      	mov	r3, r9
 800917a:	460a      	mov	r2, r1
 800917c:	eb42 0303 	adc.w	r3, r2, r3
 8009180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	67bb      	str	r3, [r7, #120]	; 0x78
 800918e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	f04f 0300 	mov.w	r3, #0
 8009198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800919c:	4649      	mov	r1, r9
 800919e:	008b      	lsls	r3, r1, #2
 80091a0:	4641      	mov	r1, r8
 80091a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091a6:	4641      	mov	r1, r8
 80091a8:	008a      	lsls	r2, r1, #2
 80091aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091ae:	f7f7 fd7b 	bl	8000ca8 <__aeabi_uldivmod>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4b39      	ldr	r3, [pc, #228]	; (800929c <UART_SetConfig+0x4e4>)
 80091b8:	fba3 1302 	umull	r1, r3, r3, r2
 80091bc:	095b      	lsrs	r3, r3, #5
 80091be:	2164      	movs	r1, #100	; 0x64
 80091c0:	fb01 f303 	mul.w	r3, r1, r3
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	011b      	lsls	r3, r3, #4
 80091c8:	3332      	adds	r3, #50	; 0x32
 80091ca:	4a34      	ldr	r2, [pc, #208]	; (800929c <UART_SetConfig+0x4e4>)
 80091cc:	fba2 2303 	umull	r2, r3, r2, r3
 80091d0:	095b      	lsrs	r3, r3, #5
 80091d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091d6:	441c      	add	r4, r3
 80091d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091dc:	2200      	movs	r2, #0
 80091de:	673b      	str	r3, [r7, #112]	; 0x70
 80091e0:	677a      	str	r2, [r7, #116]	; 0x74
 80091e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091e6:	4642      	mov	r2, r8
 80091e8:	464b      	mov	r3, r9
 80091ea:	1891      	adds	r1, r2, r2
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	415b      	adcs	r3, r3
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091f6:	4641      	mov	r1, r8
 80091f8:	1851      	adds	r1, r2, r1
 80091fa:	6039      	str	r1, [r7, #0]
 80091fc:	4649      	mov	r1, r9
 80091fe:	414b      	adcs	r3, r1
 8009200:	607b      	str	r3, [r7, #4]
 8009202:	f04f 0200 	mov.w	r2, #0
 8009206:	f04f 0300 	mov.w	r3, #0
 800920a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800920e:	4659      	mov	r1, fp
 8009210:	00cb      	lsls	r3, r1, #3
 8009212:	4651      	mov	r1, sl
 8009214:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009218:	4651      	mov	r1, sl
 800921a:	00ca      	lsls	r2, r1, #3
 800921c:	4610      	mov	r0, r2
 800921e:	4619      	mov	r1, r3
 8009220:	4603      	mov	r3, r0
 8009222:	4642      	mov	r2, r8
 8009224:	189b      	adds	r3, r3, r2
 8009226:	66bb      	str	r3, [r7, #104]	; 0x68
 8009228:	464b      	mov	r3, r9
 800922a:	460a      	mov	r2, r1
 800922c:	eb42 0303 	adc.w	r3, r2, r3
 8009230:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	663b      	str	r3, [r7, #96]	; 0x60
 800923c:	667a      	str	r2, [r7, #100]	; 0x64
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800924a:	4649      	mov	r1, r9
 800924c:	008b      	lsls	r3, r1, #2
 800924e:	4641      	mov	r1, r8
 8009250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009254:	4641      	mov	r1, r8
 8009256:	008a      	lsls	r2, r1, #2
 8009258:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800925c:	f7f7 fd24 	bl	8000ca8 <__aeabi_uldivmod>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <UART_SetConfig+0x4e4>)
 8009266:	fba3 1302 	umull	r1, r3, r3, r2
 800926a:	095b      	lsrs	r3, r3, #5
 800926c:	2164      	movs	r1, #100	; 0x64
 800926e:	fb01 f303 	mul.w	r3, r1, r3
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	3332      	adds	r3, #50	; 0x32
 8009278:	4a08      	ldr	r2, [pc, #32]	; (800929c <UART_SetConfig+0x4e4>)
 800927a:	fba2 2303 	umull	r2, r3, r2, r3
 800927e:	095b      	lsrs	r3, r3, #5
 8009280:	f003 020f 	and.w	r2, r3, #15
 8009284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4422      	add	r2, r4
 800928c:	609a      	str	r2, [r3, #8]
}
 800928e:	bf00      	nop
 8009290:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009294:	46bd      	mov	sp, r7
 8009296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800929a:	bf00      	nop
 800929c:	51eb851f 	.word	0x51eb851f

080092a0 <__assert_func>:
 80092a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092a2:	4614      	mov	r4, r2
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <__assert_func+0x2c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4605      	mov	r5, r0
 80092ac:	68d8      	ldr	r0, [r3, #12]
 80092ae:	b14c      	cbz	r4, 80092c4 <__assert_func+0x24>
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <__assert_func+0x30>)
 80092b2:	9100      	str	r1, [sp, #0]
 80092b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092b8:	4906      	ldr	r1, [pc, #24]	; (80092d4 <__assert_func+0x34>)
 80092ba:	462b      	mov	r3, r5
 80092bc:	f000 f9c6 	bl	800964c <fiprintf>
 80092c0:	f002 fcb0 	bl	800bc24 <abort>
 80092c4:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <__assert_func+0x38>)
 80092c6:	461c      	mov	r4, r3
 80092c8:	e7f3      	b.n	80092b2 <__assert_func+0x12>
 80092ca:	bf00      	nop
 80092cc:	20000080 	.word	0x20000080
 80092d0:	08010fc4 	.word	0x08010fc4
 80092d4:	08010fd1 	.word	0x08010fd1
 80092d8:	08010fff 	.word	0x08010fff

080092dc <calloc>:
 80092dc:	4b02      	ldr	r3, [pc, #8]	; (80092e8 <calloc+0xc>)
 80092de:	460a      	mov	r2, r1
 80092e0:	4601      	mov	r1, r0
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	f000 bafa 	b.w	80098dc <_calloc_r>
 80092e8:	20000080 	.word	0x20000080

080092ec <__errno>:
 80092ec:	4b01      	ldr	r3, [pc, #4]	; (80092f4 <__errno+0x8>)
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20000080 	.word	0x20000080

080092f8 <__sflush_r>:
 80092f8:	898a      	ldrh	r2, [r1, #12]
 80092fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fe:	4605      	mov	r5, r0
 8009300:	0710      	lsls	r0, r2, #28
 8009302:	460c      	mov	r4, r1
 8009304:	d458      	bmi.n	80093b8 <__sflush_r+0xc0>
 8009306:	684b      	ldr	r3, [r1, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	dc05      	bgt.n	8009318 <__sflush_r+0x20>
 800930c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	dc02      	bgt.n	8009318 <__sflush_r+0x20>
 8009312:	2000      	movs	r0, #0
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800931a:	2e00      	cmp	r6, #0
 800931c:	d0f9      	beq.n	8009312 <__sflush_r+0x1a>
 800931e:	2300      	movs	r3, #0
 8009320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009324:	682f      	ldr	r7, [r5, #0]
 8009326:	602b      	str	r3, [r5, #0]
 8009328:	d032      	beq.n	8009390 <__sflush_r+0x98>
 800932a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	075a      	lsls	r2, r3, #29
 8009330:	d505      	bpl.n	800933e <__sflush_r+0x46>
 8009332:	6863      	ldr	r3, [r4, #4]
 8009334:	1ac0      	subs	r0, r0, r3
 8009336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009338:	b10b      	cbz	r3, 800933e <__sflush_r+0x46>
 800933a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800933c:	1ac0      	subs	r0, r0, r3
 800933e:	2300      	movs	r3, #0
 8009340:	4602      	mov	r2, r0
 8009342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009344:	6a21      	ldr	r1, [r4, #32]
 8009346:	4628      	mov	r0, r5
 8009348:	47b0      	blx	r6
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	d106      	bne.n	800935e <__sflush_r+0x66>
 8009350:	6829      	ldr	r1, [r5, #0]
 8009352:	291d      	cmp	r1, #29
 8009354:	d82c      	bhi.n	80093b0 <__sflush_r+0xb8>
 8009356:	4a2a      	ldr	r2, [pc, #168]	; (8009400 <__sflush_r+0x108>)
 8009358:	40ca      	lsrs	r2, r1
 800935a:	07d6      	lsls	r6, r2, #31
 800935c:	d528      	bpl.n	80093b0 <__sflush_r+0xb8>
 800935e:	2200      	movs	r2, #0
 8009360:	6062      	str	r2, [r4, #4]
 8009362:	04d9      	lsls	r1, r3, #19
 8009364:	6922      	ldr	r2, [r4, #16]
 8009366:	6022      	str	r2, [r4, #0]
 8009368:	d504      	bpl.n	8009374 <__sflush_r+0x7c>
 800936a:	1c42      	adds	r2, r0, #1
 800936c:	d101      	bne.n	8009372 <__sflush_r+0x7a>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b903      	cbnz	r3, 8009374 <__sflush_r+0x7c>
 8009372:	6560      	str	r0, [r4, #84]	; 0x54
 8009374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009376:	602f      	str	r7, [r5, #0]
 8009378:	2900      	cmp	r1, #0
 800937a:	d0ca      	beq.n	8009312 <__sflush_r+0x1a>
 800937c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009380:	4299      	cmp	r1, r3
 8009382:	d002      	beq.n	800938a <__sflush_r+0x92>
 8009384:	4628      	mov	r0, r5
 8009386:	f000 fabf 	bl	8009908 <_free_r>
 800938a:	2000      	movs	r0, #0
 800938c:	6360      	str	r0, [r4, #52]	; 0x34
 800938e:	e7c1      	b.n	8009314 <__sflush_r+0x1c>
 8009390:	6a21      	ldr	r1, [r4, #32]
 8009392:	2301      	movs	r3, #1
 8009394:	4628      	mov	r0, r5
 8009396:	47b0      	blx	r6
 8009398:	1c41      	adds	r1, r0, #1
 800939a:	d1c7      	bne.n	800932c <__sflush_r+0x34>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0c4      	beq.n	800932c <__sflush_r+0x34>
 80093a2:	2b1d      	cmp	r3, #29
 80093a4:	d001      	beq.n	80093aa <__sflush_r+0xb2>
 80093a6:	2b16      	cmp	r3, #22
 80093a8:	d101      	bne.n	80093ae <__sflush_r+0xb6>
 80093aa:	602f      	str	r7, [r5, #0]
 80093ac:	e7b1      	b.n	8009312 <__sflush_r+0x1a>
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	e7ad      	b.n	8009314 <__sflush_r+0x1c>
 80093b8:	690f      	ldr	r7, [r1, #16]
 80093ba:	2f00      	cmp	r7, #0
 80093bc:	d0a9      	beq.n	8009312 <__sflush_r+0x1a>
 80093be:	0793      	lsls	r3, r2, #30
 80093c0:	680e      	ldr	r6, [r1, #0]
 80093c2:	bf08      	it	eq
 80093c4:	694b      	ldreq	r3, [r1, #20]
 80093c6:	600f      	str	r7, [r1, #0]
 80093c8:	bf18      	it	ne
 80093ca:	2300      	movne	r3, #0
 80093cc:	eba6 0807 	sub.w	r8, r6, r7
 80093d0:	608b      	str	r3, [r1, #8]
 80093d2:	f1b8 0f00 	cmp.w	r8, #0
 80093d6:	dd9c      	ble.n	8009312 <__sflush_r+0x1a>
 80093d8:	6a21      	ldr	r1, [r4, #32]
 80093da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093dc:	4643      	mov	r3, r8
 80093de:	463a      	mov	r2, r7
 80093e0:	4628      	mov	r0, r5
 80093e2:	47b0      	blx	r6
 80093e4:	2800      	cmp	r0, #0
 80093e6:	dc06      	bgt.n	80093f6 <__sflush_r+0xfe>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	e78e      	b.n	8009314 <__sflush_r+0x1c>
 80093f6:	4407      	add	r7, r0
 80093f8:	eba8 0800 	sub.w	r8, r8, r0
 80093fc:	e7e9      	b.n	80093d2 <__sflush_r+0xda>
 80093fe:	bf00      	nop
 8009400:	20400001 	.word	0x20400001

08009404 <_fflush_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	690b      	ldr	r3, [r1, #16]
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b913      	cbnz	r3, 8009414 <_fflush_r+0x10>
 800940e:	2500      	movs	r5, #0
 8009410:	4628      	mov	r0, r5
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	b118      	cbz	r0, 800941e <_fflush_r+0x1a>
 8009416:	6983      	ldr	r3, [r0, #24]
 8009418:	b90b      	cbnz	r3, 800941e <_fflush_r+0x1a>
 800941a:	f000 f899 	bl	8009550 <__sinit>
 800941e:	4b14      	ldr	r3, [pc, #80]	; (8009470 <_fflush_r+0x6c>)
 8009420:	429c      	cmp	r4, r3
 8009422:	d11b      	bne.n	800945c <_fflush_r+0x58>
 8009424:	686c      	ldr	r4, [r5, #4]
 8009426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0ef      	beq.n	800940e <_fflush_r+0xa>
 800942e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009430:	07d0      	lsls	r0, r2, #31
 8009432:	d404      	bmi.n	800943e <_fflush_r+0x3a>
 8009434:	0599      	lsls	r1, r3, #22
 8009436:	d402      	bmi.n	800943e <_fflush_r+0x3a>
 8009438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800943a:	f000 fa0c 	bl	8009856 <__retarget_lock_acquire_recursive>
 800943e:	4628      	mov	r0, r5
 8009440:	4621      	mov	r1, r4
 8009442:	f7ff ff59 	bl	80092f8 <__sflush_r>
 8009446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009448:	07da      	lsls	r2, r3, #31
 800944a:	4605      	mov	r5, r0
 800944c:	d4e0      	bmi.n	8009410 <_fflush_r+0xc>
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	059b      	lsls	r3, r3, #22
 8009452:	d4dd      	bmi.n	8009410 <_fflush_r+0xc>
 8009454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009456:	f000 f9ff 	bl	8009858 <__retarget_lock_release_recursive>
 800945a:	e7d9      	b.n	8009410 <_fflush_r+0xc>
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <_fflush_r+0x70>)
 800945e:	429c      	cmp	r4, r3
 8009460:	d101      	bne.n	8009466 <_fflush_r+0x62>
 8009462:	68ac      	ldr	r4, [r5, #8]
 8009464:	e7df      	b.n	8009426 <_fflush_r+0x22>
 8009466:	4b04      	ldr	r3, [pc, #16]	; (8009478 <_fflush_r+0x74>)
 8009468:	429c      	cmp	r4, r3
 800946a:	bf08      	it	eq
 800946c:	68ec      	ldreq	r4, [r5, #12]
 800946e:	e7da      	b.n	8009426 <_fflush_r+0x22>
 8009470:	08011124 	.word	0x08011124
 8009474:	08011144 	.word	0x08011144
 8009478:	08011104 	.word	0x08011104

0800947c <fflush>:
 800947c:	4601      	mov	r1, r0
 800947e:	b920      	cbnz	r0, 800948a <fflush+0xe>
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <fflush+0x18>)
 8009482:	4905      	ldr	r1, [pc, #20]	; (8009498 <fflush+0x1c>)
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	f000 b933 	b.w	80096f0 <_fwalk_reent>
 800948a:	4b04      	ldr	r3, [pc, #16]	; (800949c <fflush+0x20>)
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f7ff bfb9 	b.w	8009404 <_fflush_r>
 8009492:	bf00      	nop
 8009494:	08011164 	.word	0x08011164
 8009498:	08009405 	.word	0x08009405
 800949c:	20000080 	.word	0x20000080

080094a0 <std>:
 80094a0:	2300      	movs	r3, #0
 80094a2:	b510      	push	{r4, lr}
 80094a4:	4604      	mov	r4, r0
 80094a6:	e9c0 3300 	strd	r3, r3, [r0]
 80094aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ae:	6083      	str	r3, [r0, #8]
 80094b0:	8181      	strh	r1, [r0, #12]
 80094b2:	6643      	str	r3, [r0, #100]	; 0x64
 80094b4:	81c2      	strh	r2, [r0, #14]
 80094b6:	6183      	str	r3, [r0, #24]
 80094b8:	4619      	mov	r1, r3
 80094ba:	2208      	movs	r2, #8
 80094bc:	305c      	adds	r0, #92	; 0x5c
 80094be:	f000 fa05 	bl	80098cc <memset>
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <std+0x38>)
 80094c4:	6263      	str	r3, [r4, #36]	; 0x24
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <std+0x3c>)
 80094c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80094ca:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <std+0x40>)
 80094cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094ce:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <std+0x44>)
 80094d0:	6224      	str	r4, [r4, #32]
 80094d2:	6323      	str	r3, [r4, #48]	; 0x30
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	0800ac9d 	.word	0x0800ac9d
 80094dc:	0800acbf 	.word	0x0800acbf
 80094e0:	0800acf7 	.word	0x0800acf7
 80094e4:	0800ad1b 	.word	0x0800ad1b

080094e8 <_cleanup_r>:
 80094e8:	4901      	ldr	r1, [pc, #4]	; (80094f0 <_cleanup_r+0x8>)
 80094ea:	f000 b901 	b.w	80096f0 <_fwalk_reent>
 80094ee:	bf00      	nop
 80094f0:	08009405 	.word	0x08009405

080094f4 <__sfmoreglue>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	2268      	movs	r2, #104	; 0x68
 80094f8:	1e4d      	subs	r5, r1, #1
 80094fa:	4355      	muls	r5, r2
 80094fc:	460e      	mov	r6, r1
 80094fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009502:	f000 fa6d 	bl	80099e0 <_malloc_r>
 8009506:	4604      	mov	r4, r0
 8009508:	b140      	cbz	r0, 800951c <__sfmoreglue+0x28>
 800950a:	2100      	movs	r1, #0
 800950c:	e9c0 1600 	strd	r1, r6, [r0]
 8009510:	300c      	adds	r0, #12
 8009512:	60a0      	str	r0, [r4, #8]
 8009514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009518:	f000 f9d8 	bl	80098cc <memset>
 800951c:	4620      	mov	r0, r4
 800951e:	bd70      	pop	{r4, r5, r6, pc}

08009520 <__sfp_lock_acquire>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__sfp_lock_acquire+0x8>)
 8009522:	f000 b998 	b.w	8009856 <__retarget_lock_acquire_recursive>
 8009526:	bf00      	nop
 8009528:	20001b0d 	.word	0x20001b0d

0800952c <__sfp_lock_release>:
 800952c:	4801      	ldr	r0, [pc, #4]	; (8009534 <__sfp_lock_release+0x8>)
 800952e:	f000 b993 	b.w	8009858 <__retarget_lock_release_recursive>
 8009532:	bf00      	nop
 8009534:	20001b0d 	.word	0x20001b0d

08009538 <__sinit_lock_acquire>:
 8009538:	4801      	ldr	r0, [pc, #4]	; (8009540 <__sinit_lock_acquire+0x8>)
 800953a:	f000 b98c 	b.w	8009856 <__retarget_lock_acquire_recursive>
 800953e:	bf00      	nop
 8009540:	20001b0e 	.word	0x20001b0e

08009544 <__sinit_lock_release>:
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <__sinit_lock_release+0x8>)
 8009546:	f000 b987 	b.w	8009858 <__retarget_lock_release_recursive>
 800954a:	bf00      	nop
 800954c:	20001b0e 	.word	0x20001b0e

08009550 <__sinit>:
 8009550:	b510      	push	{r4, lr}
 8009552:	4604      	mov	r4, r0
 8009554:	f7ff fff0 	bl	8009538 <__sinit_lock_acquire>
 8009558:	69a3      	ldr	r3, [r4, #24]
 800955a:	b11b      	cbz	r3, 8009564 <__sinit+0x14>
 800955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009560:	f7ff bff0 	b.w	8009544 <__sinit_lock_release>
 8009564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009568:	6523      	str	r3, [r4, #80]	; 0x50
 800956a:	4b13      	ldr	r3, [pc, #76]	; (80095b8 <__sinit+0x68>)
 800956c:	4a13      	ldr	r2, [pc, #76]	; (80095bc <__sinit+0x6c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	62a2      	str	r2, [r4, #40]	; 0x28
 8009572:	42a3      	cmp	r3, r4
 8009574:	bf04      	itt	eq
 8009576:	2301      	moveq	r3, #1
 8009578:	61a3      	streq	r3, [r4, #24]
 800957a:	4620      	mov	r0, r4
 800957c:	f000 f820 	bl	80095c0 <__sfp>
 8009580:	6060      	str	r0, [r4, #4]
 8009582:	4620      	mov	r0, r4
 8009584:	f000 f81c 	bl	80095c0 <__sfp>
 8009588:	60a0      	str	r0, [r4, #8]
 800958a:	4620      	mov	r0, r4
 800958c:	f000 f818 	bl	80095c0 <__sfp>
 8009590:	2200      	movs	r2, #0
 8009592:	60e0      	str	r0, [r4, #12]
 8009594:	2104      	movs	r1, #4
 8009596:	6860      	ldr	r0, [r4, #4]
 8009598:	f7ff ff82 	bl	80094a0 <std>
 800959c:	68a0      	ldr	r0, [r4, #8]
 800959e:	2201      	movs	r2, #1
 80095a0:	2109      	movs	r1, #9
 80095a2:	f7ff ff7d 	bl	80094a0 <std>
 80095a6:	68e0      	ldr	r0, [r4, #12]
 80095a8:	2202      	movs	r2, #2
 80095aa:	2112      	movs	r1, #18
 80095ac:	f7ff ff78 	bl	80094a0 <std>
 80095b0:	2301      	movs	r3, #1
 80095b2:	61a3      	str	r3, [r4, #24]
 80095b4:	e7d2      	b.n	800955c <__sinit+0xc>
 80095b6:	bf00      	nop
 80095b8:	08011164 	.word	0x08011164
 80095bc:	080094e9 	.word	0x080094e9

080095c0 <__sfp>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	4607      	mov	r7, r0
 80095c4:	f7ff ffac 	bl	8009520 <__sfp_lock_acquire>
 80095c8:	4b1e      	ldr	r3, [pc, #120]	; (8009644 <__sfp+0x84>)
 80095ca:	681e      	ldr	r6, [r3, #0]
 80095cc:	69b3      	ldr	r3, [r6, #24]
 80095ce:	b913      	cbnz	r3, 80095d6 <__sfp+0x16>
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7ff ffbd 	bl	8009550 <__sinit>
 80095d6:	3648      	adds	r6, #72	; 0x48
 80095d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095dc:	3b01      	subs	r3, #1
 80095de:	d503      	bpl.n	80095e8 <__sfp+0x28>
 80095e0:	6833      	ldr	r3, [r6, #0]
 80095e2:	b30b      	cbz	r3, 8009628 <__sfp+0x68>
 80095e4:	6836      	ldr	r6, [r6, #0]
 80095e6:	e7f7      	b.n	80095d8 <__sfp+0x18>
 80095e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095ec:	b9d5      	cbnz	r5, 8009624 <__sfp+0x64>
 80095ee:	4b16      	ldr	r3, [pc, #88]	; (8009648 <__sfp+0x88>)
 80095f0:	60e3      	str	r3, [r4, #12]
 80095f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095f6:	6665      	str	r5, [r4, #100]	; 0x64
 80095f8:	f000 f92c 	bl	8009854 <__retarget_lock_init_recursive>
 80095fc:	f7ff ff96 	bl	800952c <__sfp_lock_release>
 8009600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009608:	6025      	str	r5, [r4, #0]
 800960a:	61a5      	str	r5, [r4, #24]
 800960c:	2208      	movs	r2, #8
 800960e:	4629      	mov	r1, r5
 8009610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009614:	f000 f95a 	bl	80098cc <memset>
 8009618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800961c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009620:	4620      	mov	r0, r4
 8009622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009624:	3468      	adds	r4, #104	; 0x68
 8009626:	e7d9      	b.n	80095dc <__sfp+0x1c>
 8009628:	2104      	movs	r1, #4
 800962a:	4638      	mov	r0, r7
 800962c:	f7ff ff62 	bl	80094f4 <__sfmoreglue>
 8009630:	4604      	mov	r4, r0
 8009632:	6030      	str	r0, [r6, #0]
 8009634:	2800      	cmp	r0, #0
 8009636:	d1d5      	bne.n	80095e4 <__sfp+0x24>
 8009638:	f7ff ff78 	bl	800952c <__sfp_lock_release>
 800963c:	230c      	movs	r3, #12
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	e7ee      	b.n	8009620 <__sfp+0x60>
 8009642:	bf00      	nop
 8009644:	08011164 	.word	0x08011164
 8009648:	ffff0001 	.word	0xffff0001

0800964c <fiprintf>:
 800964c:	b40e      	push	{r1, r2, r3}
 800964e:	b503      	push	{r0, r1, lr}
 8009650:	4601      	mov	r1, r0
 8009652:	ab03      	add	r3, sp, #12
 8009654:	4805      	ldr	r0, [pc, #20]	; (800966c <fiprintf+0x20>)
 8009656:	f853 2b04 	ldr.w	r2, [r3], #4
 800965a:	6800      	ldr	r0, [r0, #0]
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	f000 fa5d 	bl	8009b1c <_vfiprintf_r>
 8009662:	b002      	add	sp, #8
 8009664:	f85d eb04 	ldr.w	lr, [sp], #4
 8009668:	b003      	add	sp, #12
 800966a:	4770      	bx	lr
 800966c:	20000080 	.word	0x20000080

08009670 <_fputc_r>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	460e      	mov	r6, r1
 8009674:	4614      	mov	r4, r2
 8009676:	4605      	mov	r5, r0
 8009678:	b118      	cbz	r0, 8009682 <_fputc_r+0x12>
 800967a:	6983      	ldr	r3, [r0, #24]
 800967c:	b90b      	cbnz	r3, 8009682 <_fputc_r+0x12>
 800967e:	f7ff ff67 	bl	8009550 <__sinit>
 8009682:	4b14      	ldr	r3, [pc, #80]	; (80096d4 <_fputc_r+0x64>)
 8009684:	429c      	cmp	r4, r3
 8009686:	d11a      	bne.n	80096be <_fputc_r+0x4e>
 8009688:	686c      	ldr	r4, [r5, #4]
 800968a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800968c:	07d8      	lsls	r0, r3, #31
 800968e:	d405      	bmi.n	800969c <_fputc_r+0x2c>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	0599      	lsls	r1, r3, #22
 8009694:	d402      	bmi.n	800969c <_fputc_r+0x2c>
 8009696:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009698:	f000 f8dd 	bl	8009856 <__retarget_lock_acquire_recursive>
 800969c:	4622      	mov	r2, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	4631      	mov	r1, r6
 80096a2:	f001 fa07 	bl	800aab4 <_putc_r>
 80096a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096a8:	07da      	lsls	r2, r3, #31
 80096aa:	4605      	mov	r5, r0
 80096ac:	d405      	bmi.n	80096ba <_fputc_r+0x4a>
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	059b      	lsls	r3, r3, #22
 80096b2:	d402      	bmi.n	80096ba <_fputc_r+0x4a>
 80096b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096b6:	f000 f8cf 	bl	8009858 <__retarget_lock_release_recursive>
 80096ba:	4628      	mov	r0, r5
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
 80096be:	4b06      	ldr	r3, [pc, #24]	; (80096d8 <_fputc_r+0x68>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	d101      	bne.n	80096c8 <_fputc_r+0x58>
 80096c4:	68ac      	ldr	r4, [r5, #8]
 80096c6:	e7e0      	b.n	800968a <_fputc_r+0x1a>
 80096c8:	4b04      	ldr	r3, [pc, #16]	; (80096dc <_fputc_r+0x6c>)
 80096ca:	429c      	cmp	r4, r3
 80096cc:	bf08      	it	eq
 80096ce:	68ec      	ldreq	r4, [r5, #12]
 80096d0:	e7db      	b.n	800968a <_fputc_r+0x1a>
 80096d2:	bf00      	nop
 80096d4:	08011124 	.word	0x08011124
 80096d8:	08011144 	.word	0x08011144
 80096dc:	08011104 	.word	0x08011104

080096e0 <fputc>:
 80096e0:	4b02      	ldr	r3, [pc, #8]	; (80096ec <fputc+0xc>)
 80096e2:	460a      	mov	r2, r1
 80096e4:	4601      	mov	r1, r0
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	f7ff bfc2 	b.w	8009670 <_fputc_r>
 80096ec:	20000080 	.word	0x20000080

080096f0 <_fwalk_reent>:
 80096f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f4:	4606      	mov	r6, r0
 80096f6:	4688      	mov	r8, r1
 80096f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096fc:	2700      	movs	r7, #0
 80096fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009702:	f1b9 0901 	subs.w	r9, r9, #1
 8009706:	d505      	bpl.n	8009714 <_fwalk_reent+0x24>
 8009708:	6824      	ldr	r4, [r4, #0]
 800970a:	2c00      	cmp	r4, #0
 800970c:	d1f7      	bne.n	80096fe <_fwalk_reent+0xe>
 800970e:	4638      	mov	r0, r7
 8009710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009714:	89ab      	ldrh	r3, [r5, #12]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d907      	bls.n	800972a <_fwalk_reent+0x3a>
 800971a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800971e:	3301      	adds	r3, #1
 8009720:	d003      	beq.n	800972a <_fwalk_reent+0x3a>
 8009722:	4629      	mov	r1, r5
 8009724:	4630      	mov	r0, r6
 8009726:	47c0      	blx	r8
 8009728:	4307      	orrs	r7, r0
 800972a:	3568      	adds	r5, #104	; 0x68
 800972c:	e7e9      	b.n	8009702 <_fwalk_reent+0x12>
	...

08009730 <_fwrite_r>:
 8009730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009734:	9c08      	ldr	r4, [sp, #32]
 8009736:	468a      	mov	sl, r1
 8009738:	4690      	mov	r8, r2
 800973a:	fb02 f903 	mul.w	r9, r2, r3
 800973e:	4605      	mov	r5, r0
 8009740:	b118      	cbz	r0, 800974a <_fwrite_r+0x1a>
 8009742:	6983      	ldr	r3, [r0, #24]
 8009744:	b90b      	cbnz	r3, 800974a <_fwrite_r+0x1a>
 8009746:	f7ff ff03 	bl	8009550 <__sinit>
 800974a:	4b26      	ldr	r3, [pc, #152]	; (80097e4 <_fwrite_r+0xb4>)
 800974c:	429c      	cmp	r4, r3
 800974e:	d123      	bne.n	8009798 <_fwrite_r+0x68>
 8009750:	686c      	ldr	r4, [r5, #4]
 8009752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009754:	07de      	lsls	r6, r3, #31
 8009756:	d405      	bmi.n	8009764 <_fwrite_r+0x34>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	0598      	lsls	r0, r3, #22
 800975c:	d402      	bmi.n	8009764 <_fwrite_r+0x34>
 800975e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009760:	f000 f879 	bl	8009856 <__retarget_lock_acquire_recursive>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	0719      	lsls	r1, r3, #28
 8009768:	d520      	bpl.n	80097ac <_fwrite_r+0x7c>
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	b1f3      	cbz	r3, 80097ac <_fwrite_r+0x7c>
 800976e:	2600      	movs	r6, #0
 8009770:	454e      	cmp	r6, r9
 8009772:	d029      	beq.n	80097c8 <_fwrite_r+0x98>
 8009774:	68a7      	ldr	r7, [r4, #8]
 8009776:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800977a:	3f01      	subs	r7, #1
 800977c:	2f00      	cmp	r7, #0
 800977e:	60a7      	str	r7, [r4, #8]
 8009780:	da04      	bge.n	800978c <_fwrite_r+0x5c>
 8009782:	69a3      	ldr	r3, [r4, #24]
 8009784:	429f      	cmp	r7, r3
 8009786:	db19      	blt.n	80097bc <_fwrite_r+0x8c>
 8009788:	290a      	cmp	r1, #10
 800978a:	d017      	beq.n	80097bc <_fwrite_r+0x8c>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	6022      	str	r2, [r4, #0]
 8009792:	7019      	strb	r1, [r3, #0]
 8009794:	3601      	adds	r6, #1
 8009796:	e7eb      	b.n	8009770 <_fwrite_r+0x40>
 8009798:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <_fwrite_r+0xb8>)
 800979a:	429c      	cmp	r4, r3
 800979c:	d101      	bne.n	80097a2 <_fwrite_r+0x72>
 800979e:	68ac      	ldr	r4, [r5, #8]
 80097a0:	e7d7      	b.n	8009752 <_fwrite_r+0x22>
 80097a2:	4b12      	ldr	r3, [pc, #72]	; (80097ec <_fwrite_r+0xbc>)
 80097a4:	429c      	cmp	r4, r3
 80097a6:	bf08      	it	eq
 80097a8:	68ec      	ldreq	r4, [r5, #12]
 80097aa:	e7d2      	b.n	8009752 <_fwrite_r+0x22>
 80097ac:	4621      	mov	r1, r4
 80097ae:	4628      	mov	r0, r5
 80097b0:	f002 f9ca 	bl	800bb48 <__swsetup_r>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d0da      	beq.n	800976e <_fwrite_r+0x3e>
 80097b8:	2600      	movs	r6, #0
 80097ba:	e005      	b.n	80097c8 <_fwrite_r+0x98>
 80097bc:	4622      	mov	r2, r4
 80097be:	4628      	mov	r0, r5
 80097c0:	f002 f95e 	bl	800ba80 <__swbuf_r>
 80097c4:	3001      	adds	r0, #1
 80097c6:	d1e5      	bne.n	8009794 <_fwrite_r+0x64>
 80097c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ca:	07da      	lsls	r2, r3, #31
 80097cc:	d405      	bmi.n	80097da <_fwrite_r+0xaa>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	059b      	lsls	r3, r3, #22
 80097d2:	d402      	bmi.n	80097da <_fwrite_r+0xaa>
 80097d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097d6:	f000 f83f 	bl	8009858 <__retarget_lock_release_recursive>
 80097da:	fbb6 f0f8 	udiv	r0, r6, r8
 80097de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e2:	bf00      	nop
 80097e4:	08011124 	.word	0x08011124
 80097e8:	08011144 	.word	0x08011144
 80097ec:	08011104 	.word	0x08011104

080097f0 <fwrite>:
 80097f0:	b507      	push	{r0, r1, r2, lr}
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	4613      	mov	r3, r2
 80097f6:	460a      	mov	r2, r1
 80097f8:	4601      	mov	r1, r0
 80097fa:	4803      	ldr	r0, [pc, #12]	; (8009808 <fwrite+0x18>)
 80097fc:	6800      	ldr	r0, [r0, #0]
 80097fe:	f7ff ff97 	bl	8009730 <_fwrite_r>
 8009802:	b003      	add	sp, #12
 8009804:	f85d fb04 	ldr.w	pc, [sp], #4
 8009808:	20000080 	.word	0x20000080

0800980c <__libc_init_array>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4d0d      	ldr	r5, [pc, #52]	; (8009844 <__libc_init_array+0x38>)
 8009810:	4c0d      	ldr	r4, [pc, #52]	; (8009848 <__libc_init_array+0x3c>)
 8009812:	1b64      	subs	r4, r4, r5
 8009814:	10a4      	asrs	r4, r4, #2
 8009816:	2600      	movs	r6, #0
 8009818:	42a6      	cmp	r6, r4
 800981a:	d109      	bne.n	8009830 <__libc_init_array+0x24>
 800981c:	4d0b      	ldr	r5, [pc, #44]	; (800984c <__libc_init_array+0x40>)
 800981e:	4c0c      	ldr	r4, [pc, #48]	; (8009850 <__libc_init_array+0x44>)
 8009820:	f004 fb96 	bl	800df50 <_init>
 8009824:	1b64      	subs	r4, r4, r5
 8009826:	10a4      	asrs	r4, r4, #2
 8009828:	2600      	movs	r6, #0
 800982a:	42a6      	cmp	r6, r4
 800982c:	d105      	bne.n	800983a <__libc_init_array+0x2e>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	f855 3b04 	ldr.w	r3, [r5], #4
 8009834:	4798      	blx	r3
 8009836:	3601      	adds	r6, #1
 8009838:	e7ee      	b.n	8009818 <__libc_init_array+0xc>
 800983a:	f855 3b04 	ldr.w	r3, [r5], #4
 800983e:	4798      	blx	r3
 8009840:	3601      	adds	r6, #1
 8009842:	e7f2      	b.n	800982a <__libc_init_array+0x1e>
 8009844:	08011474 	.word	0x08011474
 8009848:	08011474 	.word	0x08011474
 800984c:	08011474 	.word	0x08011474
 8009850:	08011478 	.word	0x08011478

08009854 <__retarget_lock_init_recursive>:
 8009854:	4770      	bx	lr

08009856 <__retarget_lock_acquire_recursive>:
 8009856:	4770      	bx	lr

08009858 <__retarget_lock_release_recursive>:
 8009858:	4770      	bx	lr
	...

0800985c <malloc>:
 800985c:	4b02      	ldr	r3, [pc, #8]	; (8009868 <malloc+0xc>)
 800985e:	4601      	mov	r1, r0
 8009860:	6818      	ldr	r0, [r3, #0]
 8009862:	f000 b8bd 	b.w	80099e0 <_malloc_r>
 8009866:	bf00      	nop
 8009868:	20000080 	.word	0x20000080

0800986c <free>:
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <free+0xc>)
 800986e:	4601      	mov	r1, r0
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	f000 b849 	b.w	8009908 <_free_r>
 8009876:	bf00      	nop
 8009878:	20000080 	.word	0x20000080

0800987c <memcpy>:
 800987c:	440a      	add	r2, r1
 800987e:	4291      	cmp	r1, r2
 8009880:	f100 33ff 	add.w	r3, r0, #4294967295
 8009884:	d100      	bne.n	8009888 <memcpy+0xc>
 8009886:	4770      	bx	lr
 8009888:	b510      	push	{r4, lr}
 800988a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800988e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009892:	4291      	cmp	r1, r2
 8009894:	d1f9      	bne.n	800988a <memcpy+0xe>
 8009896:	bd10      	pop	{r4, pc}

08009898 <memmove>:
 8009898:	4288      	cmp	r0, r1
 800989a:	b510      	push	{r4, lr}
 800989c:	eb01 0402 	add.w	r4, r1, r2
 80098a0:	d902      	bls.n	80098a8 <memmove+0x10>
 80098a2:	4284      	cmp	r4, r0
 80098a4:	4623      	mov	r3, r4
 80098a6:	d807      	bhi.n	80098b8 <memmove+0x20>
 80098a8:	1e43      	subs	r3, r0, #1
 80098aa:	42a1      	cmp	r1, r4
 80098ac:	d008      	beq.n	80098c0 <memmove+0x28>
 80098ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098b6:	e7f8      	b.n	80098aa <memmove+0x12>
 80098b8:	4402      	add	r2, r0
 80098ba:	4601      	mov	r1, r0
 80098bc:	428a      	cmp	r2, r1
 80098be:	d100      	bne.n	80098c2 <memmove+0x2a>
 80098c0:	bd10      	pop	{r4, pc}
 80098c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ca:	e7f7      	b.n	80098bc <memmove+0x24>

080098cc <memset>:
 80098cc:	4402      	add	r2, r0
 80098ce:	4603      	mov	r3, r0
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d100      	bne.n	80098d6 <memset+0xa>
 80098d4:	4770      	bx	lr
 80098d6:	f803 1b01 	strb.w	r1, [r3], #1
 80098da:	e7f9      	b.n	80098d0 <memset+0x4>

080098dc <_calloc_r>:
 80098dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098de:	fba1 2402 	umull	r2, r4, r1, r2
 80098e2:	b94c      	cbnz	r4, 80098f8 <_calloc_r+0x1c>
 80098e4:	4611      	mov	r1, r2
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	f000 f87a 	bl	80099e0 <_malloc_r>
 80098ec:	9a01      	ldr	r2, [sp, #4]
 80098ee:	4605      	mov	r5, r0
 80098f0:	b930      	cbnz	r0, 8009900 <_calloc_r+0x24>
 80098f2:	4628      	mov	r0, r5
 80098f4:	b003      	add	sp, #12
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	220c      	movs	r2, #12
 80098fa:	6002      	str	r2, [r0, #0]
 80098fc:	2500      	movs	r5, #0
 80098fe:	e7f8      	b.n	80098f2 <_calloc_r+0x16>
 8009900:	4621      	mov	r1, r4
 8009902:	f7ff ffe3 	bl	80098cc <memset>
 8009906:	e7f4      	b.n	80098f2 <_calloc_r+0x16>

08009908 <_free_r>:
 8009908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800990a:	2900      	cmp	r1, #0
 800990c:	d044      	beq.n	8009998 <_free_r+0x90>
 800990e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009912:	9001      	str	r0, [sp, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f1a1 0404 	sub.w	r4, r1, #4
 800991a:	bfb8      	it	lt
 800991c:	18e4      	addlt	r4, r4, r3
 800991e:	f003 fc13 	bl	800d148 <__malloc_lock>
 8009922:	4a1e      	ldr	r2, [pc, #120]	; (800999c <_free_r+0x94>)
 8009924:	9801      	ldr	r0, [sp, #4]
 8009926:	6813      	ldr	r3, [r2, #0]
 8009928:	b933      	cbnz	r3, 8009938 <_free_r+0x30>
 800992a:	6063      	str	r3, [r4, #4]
 800992c:	6014      	str	r4, [r2, #0]
 800992e:	b003      	add	sp, #12
 8009930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009934:	f003 bc0e 	b.w	800d154 <__malloc_unlock>
 8009938:	42a3      	cmp	r3, r4
 800993a:	d908      	bls.n	800994e <_free_r+0x46>
 800993c:	6825      	ldr	r5, [r4, #0]
 800993e:	1961      	adds	r1, r4, r5
 8009940:	428b      	cmp	r3, r1
 8009942:	bf01      	itttt	eq
 8009944:	6819      	ldreq	r1, [r3, #0]
 8009946:	685b      	ldreq	r3, [r3, #4]
 8009948:	1949      	addeq	r1, r1, r5
 800994a:	6021      	streq	r1, [r4, #0]
 800994c:	e7ed      	b.n	800992a <_free_r+0x22>
 800994e:	461a      	mov	r2, r3
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	b10b      	cbz	r3, 8009958 <_free_r+0x50>
 8009954:	42a3      	cmp	r3, r4
 8009956:	d9fa      	bls.n	800994e <_free_r+0x46>
 8009958:	6811      	ldr	r1, [r2, #0]
 800995a:	1855      	adds	r5, r2, r1
 800995c:	42a5      	cmp	r5, r4
 800995e:	d10b      	bne.n	8009978 <_free_r+0x70>
 8009960:	6824      	ldr	r4, [r4, #0]
 8009962:	4421      	add	r1, r4
 8009964:	1854      	adds	r4, r2, r1
 8009966:	42a3      	cmp	r3, r4
 8009968:	6011      	str	r1, [r2, #0]
 800996a:	d1e0      	bne.n	800992e <_free_r+0x26>
 800996c:	681c      	ldr	r4, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	6053      	str	r3, [r2, #4]
 8009972:	4421      	add	r1, r4
 8009974:	6011      	str	r1, [r2, #0]
 8009976:	e7da      	b.n	800992e <_free_r+0x26>
 8009978:	d902      	bls.n	8009980 <_free_r+0x78>
 800997a:	230c      	movs	r3, #12
 800997c:	6003      	str	r3, [r0, #0]
 800997e:	e7d6      	b.n	800992e <_free_r+0x26>
 8009980:	6825      	ldr	r5, [r4, #0]
 8009982:	1961      	adds	r1, r4, r5
 8009984:	428b      	cmp	r3, r1
 8009986:	bf04      	itt	eq
 8009988:	6819      	ldreq	r1, [r3, #0]
 800998a:	685b      	ldreq	r3, [r3, #4]
 800998c:	6063      	str	r3, [r4, #4]
 800998e:	bf04      	itt	eq
 8009990:	1949      	addeq	r1, r1, r5
 8009992:	6021      	streq	r1, [r4, #0]
 8009994:	6054      	str	r4, [r2, #4]
 8009996:	e7ca      	b.n	800992e <_free_r+0x26>
 8009998:	b003      	add	sp, #12
 800999a:	bd30      	pop	{r4, r5, pc}
 800999c:	20001b10 	.word	0x20001b10

080099a0 <sbrk_aligned>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	4e0e      	ldr	r6, [pc, #56]	; (80099dc <sbrk_aligned+0x3c>)
 80099a4:	460c      	mov	r4, r1
 80099a6:	6831      	ldr	r1, [r6, #0]
 80099a8:	4605      	mov	r5, r0
 80099aa:	b911      	cbnz	r1, 80099b2 <sbrk_aligned+0x12>
 80099ac:	f001 f940 	bl	800ac30 <_sbrk_r>
 80099b0:	6030      	str	r0, [r6, #0]
 80099b2:	4621      	mov	r1, r4
 80099b4:	4628      	mov	r0, r5
 80099b6:	f001 f93b 	bl	800ac30 <_sbrk_r>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d00a      	beq.n	80099d4 <sbrk_aligned+0x34>
 80099be:	1cc4      	adds	r4, r0, #3
 80099c0:	f024 0403 	bic.w	r4, r4, #3
 80099c4:	42a0      	cmp	r0, r4
 80099c6:	d007      	beq.n	80099d8 <sbrk_aligned+0x38>
 80099c8:	1a21      	subs	r1, r4, r0
 80099ca:	4628      	mov	r0, r5
 80099cc:	f001 f930 	bl	800ac30 <_sbrk_r>
 80099d0:	3001      	adds	r0, #1
 80099d2:	d101      	bne.n	80099d8 <sbrk_aligned+0x38>
 80099d4:	f04f 34ff 	mov.w	r4, #4294967295
 80099d8:	4620      	mov	r0, r4
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	20001b14 	.word	0x20001b14

080099e0 <_malloc_r>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	1ccd      	adds	r5, r1, #3
 80099e6:	f025 0503 	bic.w	r5, r5, #3
 80099ea:	3508      	adds	r5, #8
 80099ec:	2d0c      	cmp	r5, #12
 80099ee:	bf38      	it	cc
 80099f0:	250c      	movcc	r5, #12
 80099f2:	2d00      	cmp	r5, #0
 80099f4:	4607      	mov	r7, r0
 80099f6:	db01      	blt.n	80099fc <_malloc_r+0x1c>
 80099f8:	42a9      	cmp	r1, r5
 80099fa:	d905      	bls.n	8009a08 <_malloc_r+0x28>
 80099fc:	230c      	movs	r3, #12
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	2600      	movs	r6, #0
 8009a02:	4630      	mov	r0, r6
 8009a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a08:	4e2e      	ldr	r6, [pc, #184]	; (8009ac4 <_malloc_r+0xe4>)
 8009a0a:	f003 fb9d 	bl	800d148 <__malloc_lock>
 8009a0e:	6833      	ldr	r3, [r6, #0]
 8009a10:	461c      	mov	r4, r3
 8009a12:	bb34      	cbnz	r4, 8009a62 <_malloc_r+0x82>
 8009a14:	4629      	mov	r1, r5
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7ff ffc2 	bl	80099a0 <sbrk_aligned>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	4604      	mov	r4, r0
 8009a20:	d14d      	bne.n	8009abe <_malloc_r+0xde>
 8009a22:	6834      	ldr	r4, [r6, #0]
 8009a24:	4626      	mov	r6, r4
 8009a26:	2e00      	cmp	r6, #0
 8009a28:	d140      	bne.n	8009aac <_malloc_r+0xcc>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4638      	mov	r0, r7
 8009a30:	eb04 0803 	add.w	r8, r4, r3
 8009a34:	f001 f8fc 	bl	800ac30 <_sbrk_r>
 8009a38:	4580      	cmp	r8, r0
 8009a3a:	d13a      	bne.n	8009ab2 <_malloc_r+0xd2>
 8009a3c:	6821      	ldr	r1, [r4, #0]
 8009a3e:	3503      	adds	r5, #3
 8009a40:	1a6d      	subs	r5, r5, r1
 8009a42:	f025 0503 	bic.w	r5, r5, #3
 8009a46:	3508      	adds	r5, #8
 8009a48:	2d0c      	cmp	r5, #12
 8009a4a:	bf38      	it	cc
 8009a4c:	250c      	movcc	r5, #12
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ffa5 	bl	80099a0 <sbrk_aligned>
 8009a56:	3001      	adds	r0, #1
 8009a58:	d02b      	beq.n	8009ab2 <_malloc_r+0xd2>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	442b      	add	r3, r5
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	e00e      	b.n	8009a80 <_malloc_r+0xa0>
 8009a62:	6822      	ldr	r2, [r4, #0]
 8009a64:	1b52      	subs	r2, r2, r5
 8009a66:	d41e      	bmi.n	8009aa6 <_malloc_r+0xc6>
 8009a68:	2a0b      	cmp	r2, #11
 8009a6a:	d916      	bls.n	8009a9a <_malloc_r+0xba>
 8009a6c:	1961      	adds	r1, r4, r5
 8009a6e:	42a3      	cmp	r3, r4
 8009a70:	6025      	str	r5, [r4, #0]
 8009a72:	bf18      	it	ne
 8009a74:	6059      	strne	r1, [r3, #4]
 8009a76:	6863      	ldr	r3, [r4, #4]
 8009a78:	bf08      	it	eq
 8009a7a:	6031      	streq	r1, [r6, #0]
 8009a7c:	5162      	str	r2, [r4, r5]
 8009a7e:	604b      	str	r3, [r1, #4]
 8009a80:	4638      	mov	r0, r7
 8009a82:	f104 060b 	add.w	r6, r4, #11
 8009a86:	f003 fb65 	bl	800d154 <__malloc_unlock>
 8009a8a:	f026 0607 	bic.w	r6, r6, #7
 8009a8e:	1d23      	adds	r3, r4, #4
 8009a90:	1af2      	subs	r2, r6, r3
 8009a92:	d0b6      	beq.n	8009a02 <_malloc_r+0x22>
 8009a94:	1b9b      	subs	r3, r3, r6
 8009a96:	50a3      	str	r3, [r4, r2]
 8009a98:	e7b3      	b.n	8009a02 <_malloc_r+0x22>
 8009a9a:	6862      	ldr	r2, [r4, #4]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	bf0c      	ite	eq
 8009aa0:	6032      	streq	r2, [r6, #0]
 8009aa2:	605a      	strne	r2, [r3, #4]
 8009aa4:	e7ec      	b.n	8009a80 <_malloc_r+0xa0>
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	6864      	ldr	r4, [r4, #4]
 8009aaa:	e7b2      	b.n	8009a12 <_malloc_r+0x32>
 8009aac:	4634      	mov	r4, r6
 8009aae:	6876      	ldr	r6, [r6, #4]
 8009ab0:	e7b9      	b.n	8009a26 <_malloc_r+0x46>
 8009ab2:	230c      	movs	r3, #12
 8009ab4:	603b      	str	r3, [r7, #0]
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	f003 fb4c 	bl	800d154 <__malloc_unlock>
 8009abc:	e7a1      	b.n	8009a02 <_malloc_r+0x22>
 8009abe:	6025      	str	r5, [r4, #0]
 8009ac0:	e7de      	b.n	8009a80 <_malloc_r+0xa0>
 8009ac2:	bf00      	nop
 8009ac4:	20001b10 	.word	0x20001b10

08009ac8 <__sfputc_r>:
 8009ac8:	6893      	ldr	r3, [r2, #8]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	b410      	push	{r4}
 8009ad0:	6093      	str	r3, [r2, #8]
 8009ad2:	da08      	bge.n	8009ae6 <__sfputc_r+0x1e>
 8009ad4:	6994      	ldr	r4, [r2, #24]
 8009ad6:	42a3      	cmp	r3, r4
 8009ad8:	db01      	blt.n	8009ade <__sfputc_r+0x16>
 8009ada:	290a      	cmp	r1, #10
 8009adc:	d103      	bne.n	8009ae6 <__sfputc_r+0x1e>
 8009ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae2:	f001 bfcd 	b.w	800ba80 <__swbuf_r>
 8009ae6:	6813      	ldr	r3, [r2, #0]
 8009ae8:	1c58      	adds	r0, r3, #1
 8009aea:	6010      	str	r0, [r2, #0]
 8009aec:	7019      	strb	r1, [r3, #0]
 8009aee:	4608      	mov	r0, r1
 8009af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <__sfputs_r>:
 8009af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af8:	4606      	mov	r6, r0
 8009afa:	460f      	mov	r7, r1
 8009afc:	4614      	mov	r4, r2
 8009afe:	18d5      	adds	r5, r2, r3
 8009b00:	42ac      	cmp	r4, r5
 8009b02:	d101      	bne.n	8009b08 <__sfputs_r+0x12>
 8009b04:	2000      	movs	r0, #0
 8009b06:	e007      	b.n	8009b18 <__sfputs_r+0x22>
 8009b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0c:	463a      	mov	r2, r7
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7ff ffda 	bl	8009ac8 <__sfputc_r>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d1f3      	bne.n	8009b00 <__sfputs_r+0xa>
 8009b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b1c <_vfiprintf_r>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	460d      	mov	r5, r1
 8009b22:	b09d      	sub	sp, #116	; 0x74
 8009b24:	4614      	mov	r4, r2
 8009b26:	4698      	mov	r8, r3
 8009b28:	4606      	mov	r6, r0
 8009b2a:	b118      	cbz	r0, 8009b34 <_vfiprintf_r+0x18>
 8009b2c:	6983      	ldr	r3, [r0, #24]
 8009b2e:	b90b      	cbnz	r3, 8009b34 <_vfiprintf_r+0x18>
 8009b30:	f7ff fd0e 	bl	8009550 <__sinit>
 8009b34:	4b89      	ldr	r3, [pc, #548]	; (8009d5c <_vfiprintf_r+0x240>)
 8009b36:	429d      	cmp	r5, r3
 8009b38:	d11b      	bne.n	8009b72 <_vfiprintf_r+0x56>
 8009b3a:	6875      	ldr	r5, [r6, #4]
 8009b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b3e:	07d9      	lsls	r1, r3, #31
 8009b40:	d405      	bmi.n	8009b4e <_vfiprintf_r+0x32>
 8009b42:	89ab      	ldrh	r3, [r5, #12]
 8009b44:	059a      	lsls	r2, r3, #22
 8009b46:	d402      	bmi.n	8009b4e <_vfiprintf_r+0x32>
 8009b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b4a:	f7ff fe84 	bl	8009856 <__retarget_lock_acquire_recursive>
 8009b4e:	89ab      	ldrh	r3, [r5, #12]
 8009b50:	071b      	lsls	r3, r3, #28
 8009b52:	d501      	bpl.n	8009b58 <_vfiprintf_r+0x3c>
 8009b54:	692b      	ldr	r3, [r5, #16]
 8009b56:	b9eb      	cbnz	r3, 8009b94 <_vfiprintf_r+0x78>
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f001 fff4 	bl	800bb48 <__swsetup_r>
 8009b60:	b1c0      	cbz	r0, 8009b94 <_vfiprintf_r+0x78>
 8009b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b64:	07dc      	lsls	r4, r3, #31
 8009b66:	d50e      	bpl.n	8009b86 <_vfiprintf_r+0x6a>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	b01d      	add	sp, #116	; 0x74
 8009b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b72:	4b7b      	ldr	r3, [pc, #492]	; (8009d60 <_vfiprintf_r+0x244>)
 8009b74:	429d      	cmp	r5, r3
 8009b76:	d101      	bne.n	8009b7c <_vfiprintf_r+0x60>
 8009b78:	68b5      	ldr	r5, [r6, #8]
 8009b7a:	e7df      	b.n	8009b3c <_vfiprintf_r+0x20>
 8009b7c:	4b79      	ldr	r3, [pc, #484]	; (8009d64 <_vfiprintf_r+0x248>)
 8009b7e:	429d      	cmp	r5, r3
 8009b80:	bf08      	it	eq
 8009b82:	68f5      	ldreq	r5, [r6, #12]
 8009b84:	e7da      	b.n	8009b3c <_vfiprintf_r+0x20>
 8009b86:	89ab      	ldrh	r3, [r5, #12]
 8009b88:	0598      	lsls	r0, r3, #22
 8009b8a:	d4ed      	bmi.n	8009b68 <_vfiprintf_r+0x4c>
 8009b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b8e:	f7ff fe63 	bl	8009858 <__retarget_lock_release_recursive>
 8009b92:	e7e9      	b.n	8009b68 <_vfiprintf_r+0x4c>
 8009b94:	2300      	movs	r3, #0
 8009b96:	9309      	str	r3, [sp, #36]	; 0x24
 8009b98:	2320      	movs	r3, #32
 8009b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba2:	2330      	movs	r3, #48	; 0x30
 8009ba4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d68 <_vfiprintf_r+0x24c>
 8009ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bac:	f04f 0901 	mov.w	r9, #1
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	469a      	mov	sl, r3
 8009bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb8:	b10a      	cbz	r2, 8009bbe <_vfiprintf_r+0xa2>
 8009bba:	2a25      	cmp	r2, #37	; 0x25
 8009bbc:	d1f9      	bne.n	8009bb2 <_vfiprintf_r+0x96>
 8009bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc2:	d00b      	beq.n	8009bdc <_vfiprintf_r+0xc0>
 8009bc4:	465b      	mov	r3, fp
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7ff ff93 	bl	8009af6 <__sfputs_r>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	f000 80aa 	beq.w	8009d2a <_vfiprintf_r+0x20e>
 8009bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd8:	445a      	add	r2, fp
 8009bda:	9209      	str	r2, [sp, #36]	; 0x24
 8009bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 80a2 	beq.w	8009d2a <_vfiprintf_r+0x20e>
 8009be6:	2300      	movs	r3, #0
 8009be8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf0:	f10a 0a01 	add.w	sl, sl, #1
 8009bf4:	9304      	str	r3, [sp, #16]
 8009bf6:	9307      	str	r3, [sp, #28]
 8009bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8009bfe:	4654      	mov	r4, sl
 8009c00:	2205      	movs	r2, #5
 8009c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c06:	4858      	ldr	r0, [pc, #352]	; (8009d68 <_vfiprintf_r+0x24c>)
 8009c08:	f7f6 fafa 	bl	8000200 <memchr>
 8009c0c:	9a04      	ldr	r2, [sp, #16]
 8009c0e:	b9d8      	cbnz	r0, 8009c48 <_vfiprintf_r+0x12c>
 8009c10:	06d1      	lsls	r1, r2, #27
 8009c12:	bf44      	itt	mi
 8009c14:	2320      	movmi	r3, #32
 8009c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c1a:	0713      	lsls	r3, r2, #28
 8009c1c:	bf44      	itt	mi
 8009c1e:	232b      	movmi	r3, #43	; 0x2b
 8009c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c24:	f89a 3000 	ldrb.w	r3, [sl]
 8009c28:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2a:	d015      	beq.n	8009c58 <_vfiprintf_r+0x13c>
 8009c2c:	9a07      	ldr	r2, [sp, #28]
 8009c2e:	4654      	mov	r4, sl
 8009c30:	2000      	movs	r0, #0
 8009c32:	f04f 0c0a 	mov.w	ip, #10
 8009c36:	4621      	mov	r1, r4
 8009c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c3c:	3b30      	subs	r3, #48	; 0x30
 8009c3e:	2b09      	cmp	r3, #9
 8009c40:	d94e      	bls.n	8009ce0 <_vfiprintf_r+0x1c4>
 8009c42:	b1b0      	cbz	r0, 8009c72 <_vfiprintf_r+0x156>
 8009c44:	9207      	str	r2, [sp, #28]
 8009c46:	e014      	b.n	8009c72 <_vfiprintf_r+0x156>
 8009c48:	eba0 0308 	sub.w	r3, r0, r8
 8009c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c50:	4313      	orrs	r3, r2
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	46a2      	mov	sl, r4
 8009c56:	e7d2      	b.n	8009bfe <_vfiprintf_r+0xe2>
 8009c58:	9b03      	ldr	r3, [sp, #12]
 8009c5a:	1d19      	adds	r1, r3, #4
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	9103      	str	r1, [sp, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfbb      	ittet	lt
 8009c64:	425b      	neglt	r3, r3
 8009c66:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6a:	9307      	strge	r3, [sp, #28]
 8009c6c:	9307      	strlt	r3, [sp, #28]
 8009c6e:	bfb8      	it	lt
 8009c70:	9204      	strlt	r2, [sp, #16]
 8009c72:	7823      	ldrb	r3, [r4, #0]
 8009c74:	2b2e      	cmp	r3, #46	; 0x2e
 8009c76:	d10c      	bne.n	8009c92 <_vfiprintf_r+0x176>
 8009c78:	7863      	ldrb	r3, [r4, #1]
 8009c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7c:	d135      	bne.n	8009cea <_vfiprintf_r+0x1ce>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	1d1a      	adds	r2, r3, #4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	9203      	str	r2, [sp, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bfb8      	it	lt
 8009c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c8e:	3402      	adds	r4, #2
 8009c90:	9305      	str	r3, [sp, #20]
 8009c92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d78 <_vfiprintf_r+0x25c>
 8009c96:	7821      	ldrb	r1, [r4, #0]
 8009c98:	2203      	movs	r2, #3
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f7f6 fab0 	bl	8000200 <memchr>
 8009ca0:	b140      	cbz	r0, 8009cb4 <_vfiprintf_r+0x198>
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	eba0 000a 	sub.w	r0, r0, sl
 8009ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8009cac:	9b04      	ldr	r3, [sp, #16]
 8009cae:	4303      	orrs	r3, r0
 8009cb0:	3401      	adds	r4, #1
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	482c      	ldr	r0, [pc, #176]	; (8009d6c <_vfiprintf_r+0x250>)
 8009cba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cbe:	2206      	movs	r2, #6
 8009cc0:	f7f6 fa9e 	bl	8000200 <memchr>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d03f      	beq.n	8009d48 <_vfiprintf_r+0x22c>
 8009cc8:	4b29      	ldr	r3, [pc, #164]	; (8009d70 <_vfiprintf_r+0x254>)
 8009cca:	bb1b      	cbnz	r3, 8009d14 <_vfiprintf_r+0x1f8>
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	3307      	adds	r3, #7
 8009cd0:	f023 0307 	bic.w	r3, r3, #7
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	443b      	add	r3, r7
 8009cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cde:	e767      	b.n	8009bb0 <_vfiprintf_r+0x94>
 8009ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7a5      	b.n	8009c36 <_vfiprintf_r+0x11a>
 8009cea:	2300      	movs	r3, #0
 8009cec:	3401      	adds	r4, #1
 8009cee:	9305      	str	r3, [sp, #20]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f04f 0c0a 	mov.w	ip, #10
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfc:	3a30      	subs	r2, #48	; 0x30
 8009cfe:	2a09      	cmp	r2, #9
 8009d00:	d903      	bls.n	8009d0a <_vfiprintf_r+0x1ee>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0c5      	beq.n	8009c92 <_vfiprintf_r+0x176>
 8009d06:	9105      	str	r1, [sp, #20]
 8009d08:	e7c3      	b.n	8009c92 <_vfiprintf_r+0x176>
 8009d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0e:	4604      	mov	r4, r0
 8009d10:	2301      	movs	r3, #1
 8009d12:	e7f0      	b.n	8009cf6 <_vfiprintf_r+0x1da>
 8009d14:	ab03      	add	r3, sp, #12
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	462a      	mov	r2, r5
 8009d1a:	4b16      	ldr	r3, [pc, #88]	; (8009d74 <_vfiprintf_r+0x258>)
 8009d1c:	a904      	add	r1, sp, #16
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f000 f8d6 	bl	8009ed0 <_printf_float>
 8009d24:	4607      	mov	r7, r0
 8009d26:	1c78      	adds	r0, r7, #1
 8009d28:	d1d6      	bne.n	8009cd8 <_vfiprintf_r+0x1bc>
 8009d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d2c:	07d9      	lsls	r1, r3, #31
 8009d2e:	d405      	bmi.n	8009d3c <_vfiprintf_r+0x220>
 8009d30:	89ab      	ldrh	r3, [r5, #12]
 8009d32:	059a      	lsls	r2, r3, #22
 8009d34:	d402      	bmi.n	8009d3c <_vfiprintf_r+0x220>
 8009d36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d38:	f7ff fd8e 	bl	8009858 <__retarget_lock_release_recursive>
 8009d3c:	89ab      	ldrh	r3, [r5, #12]
 8009d3e:	065b      	lsls	r3, r3, #25
 8009d40:	f53f af12 	bmi.w	8009b68 <_vfiprintf_r+0x4c>
 8009d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d46:	e711      	b.n	8009b6c <_vfiprintf_r+0x50>
 8009d48:	ab03      	add	r3, sp, #12
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <_vfiprintf_r+0x258>)
 8009d50:	a904      	add	r1, sp, #16
 8009d52:	4630      	mov	r0, r6
 8009d54:	f000 fb60 	bl	800a418 <_printf_i>
 8009d58:	e7e4      	b.n	8009d24 <_vfiprintf_r+0x208>
 8009d5a:	bf00      	nop
 8009d5c:	08011124 	.word	0x08011124
 8009d60:	08011144 	.word	0x08011144
 8009d64:	08011104 	.word	0x08011104
 8009d68:	08011168 	.word	0x08011168
 8009d6c:	08011172 	.word	0x08011172
 8009d70:	08009ed1 	.word	0x08009ed1
 8009d74:	08009af7 	.word	0x08009af7
 8009d78:	0801116e 	.word	0x0801116e

08009d7c <vfiprintf>:
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	460a      	mov	r2, r1
 8009d80:	4601      	mov	r1, r0
 8009d82:	4802      	ldr	r0, [pc, #8]	; (8009d8c <vfiprintf+0x10>)
 8009d84:	6800      	ldr	r0, [r0, #0]
 8009d86:	f7ff bec9 	b.w	8009b1c <_vfiprintf_r>
 8009d8a:	bf00      	nop
 8009d8c:	20000080 	.word	0x20000080

08009d90 <__cvt>:
 8009d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	ec55 4b10 	vmov	r4, r5, d0
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	460e      	mov	r6, r1
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	462b      	mov	r3, r5
 8009da0:	bfbb      	ittet	lt
 8009da2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009da6:	461d      	movlt	r5, r3
 8009da8:	2300      	movge	r3, #0
 8009daa:	232d      	movlt	r3, #45	; 0x2d
 8009dac:	700b      	strb	r3, [r1, #0]
 8009dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009db0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009db4:	4691      	mov	r9, r2
 8009db6:	f023 0820 	bic.w	r8, r3, #32
 8009dba:	bfbc      	itt	lt
 8009dbc:	4622      	movlt	r2, r4
 8009dbe:	4614      	movlt	r4, r2
 8009dc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dc4:	d005      	beq.n	8009dd2 <__cvt+0x42>
 8009dc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009dca:	d100      	bne.n	8009dce <__cvt+0x3e>
 8009dcc:	3601      	adds	r6, #1
 8009dce:	2102      	movs	r1, #2
 8009dd0:	e000      	b.n	8009dd4 <__cvt+0x44>
 8009dd2:	2103      	movs	r1, #3
 8009dd4:	ab03      	add	r3, sp, #12
 8009dd6:	9301      	str	r3, [sp, #4]
 8009dd8:	ab02      	add	r3, sp, #8
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	ec45 4b10 	vmov	d0, r4, r5
 8009de0:	4653      	mov	r3, sl
 8009de2:	4632      	mov	r2, r6
 8009de4:	f001 ffc4 	bl	800bd70 <_dtoa_r>
 8009de8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009dec:	4607      	mov	r7, r0
 8009dee:	d102      	bne.n	8009df6 <__cvt+0x66>
 8009df0:	f019 0f01 	tst.w	r9, #1
 8009df4:	d022      	beq.n	8009e3c <__cvt+0xac>
 8009df6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dfa:	eb07 0906 	add.w	r9, r7, r6
 8009dfe:	d110      	bne.n	8009e22 <__cvt+0x92>
 8009e00:	783b      	ldrb	r3, [r7, #0]
 8009e02:	2b30      	cmp	r3, #48	; 0x30
 8009e04:	d10a      	bne.n	8009e1c <__cvt+0x8c>
 8009e06:	2200      	movs	r2, #0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fe6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e12:	b918      	cbnz	r0, 8009e1c <__cvt+0x8c>
 8009e14:	f1c6 0601 	rsb	r6, r6, #1
 8009e18:	f8ca 6000 	str.w	r6, [sl]
 8009e1c:	f8da 3000 	ldr.w	r3, [sl]
 8009e20:	4499      	add	r9, r3
 8009e22:	2200      	movs	r2, #0
 8009e24:	2300      	movs	r3, #0
 8009e26:	4620      	mov	r0, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	f7f6 fe5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e2e:	b108      	cbz	r0, 8009e34 <__cvt+0xa4>
 8009e30:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e34:	2230      	movs	r2, #48	; 0x30
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	454b      	cmp	r3, r9
 8009e3a:	d307      	bcc.n	8009e4c <__cvt+0xbc>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e40:	1bdb      	subs	r3, r3, r7
 8009e42:	4638      	mov	r0, r7
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	b004      	add	sp, #16
 8009e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4c:	1c59      	adds	r1, r3, #1
 8009e4e:	9103      	str	r1, [sp, #12]
 8009e50:	701a      	strb	r2, [r3, #0]
 8009e52:	e7f0      	b.n	8009e36 <__cvt+0xa6>

08009e54 <__exponent>:
 8009e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e56:	4603      	mov	r3, r0
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	bfb8      	it	lt
 8009e5c:	4249      	neglt	r1, r1
 8009e5e:	f803 2b02 	strb.w	r2, [r3], #2
 8009e62:	bfb4      	ite	lt
 8009e64:	222d      	movlt	r2, #45	; 0x2d
 8009e66:	222b      	movge	r2, #43	; 0x2b
 8009e68:	2909      	cmp	r1, #9
 8009e6a:	7042      	strb	r2, [r0, #1]
 8009e6c:	dd2a      	ble.n	8009ec4 <__exponent+0x70>
 8009e6e:	f10d 0407 	add.w	r4, sp, #7
 8009e72:	46a4      	mov	ip, r4
 8009e74:	270a      	movs	r7, #10
 8009e76:	46a6      	mov	lr, r4
 8009e78:	460a      	mov	r2, r1
 8009e7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e7e:	fb07 1516 	mls	r5, r7, r6, r1
 8009e82:	3530      	adds	r5, #48	; 0x30
 8009e84:	2a63      	cmp	r2, #99	; 0x63
 8009e86:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e8e:	4631      	mov	r1, r6
 8009e90:	dcf1      	bgt.n	8009e76 <__exponent+0x22>
 8009e92:	3130      	adds	r1, #48	; 0x30
 8009e94:	f1ae 0502 	sub.w	r5, lr, #2
 8009e98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e9c:	1c44      	adds	r4, r0, #1
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4561      	cmp	r1, ip
 8009ea2:	d30a      	bcc.n	8009eba <__exponent+0x66>
 8009ea4:	f10d 0209 	add.w	r2, sp, #9
 8009ea8:	eba2 020e 	sub.w	r2, r2, lr
 8009eac:	4565      	cmp	r5, ip
 8009eae:	bf88      	it	hi
 8009eb0:	2200      	movhi	r2, #0
 8009eb2:	4413      	add	r3, r2
 8009eb4:	1a18      	subs	r0, r3, r0
 8009eb6:	b003      	add	sp, #12
 8009eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ebe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ec2:	e7ed      	b.n	8009ea0 <__exponent+0x4c>
 8009ec4:	2330      	movs	r3, #48	; 0x30
 8009ec6:	3130      	adds	r1, #48	; 0x30
 8009ec8:	7083      	strb	r3, [r0, #2]
 8009eca:	70c1      	strb	r1, [r0, #3]
 8009ecc:	1d03      	adds	r3, r0, #4
 8009ece:	e7f1      	b.n	8009eb4 <__exponent+0x60>

08009ed0 <_printf_float>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	ed2d 8b02 	vpush	{d8}
 8009ed8:	b08d      	sub	sp, #52	; 0x34
 8009eda:	460c      	mov	r4, r1
 8009edc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ee0:	4616      	mov	r6, r2
 8009ee2:	461f      	mov	r7, r3
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	f003 f8a1 	bl	800d02c <_localeconv_r>
 8009eea:	f8d0 a000 	ldr.w	sl, [r0]
 8009eee:	4650      	mov	r0, sl
 8009ef0:	f7f6 f978 	bl	80001e4 <strlen>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	9305      	str	r3, [sp, #20]
 8009efc:	f8d8 3000 	ldr.w	r3, [r8]
 8009f00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f04:	3307      	adds	r3, #7
 8009f06:	f023 0307 	bic.w	r3, r3, #7
 8009f0a:	f103 0208 	add.w	r2, r3, #8
 8009f0e:	f8c8 2000 	str.w	r2, [r8]
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f22:	9307      	str	r3, [sp, #28]
 8009f24:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f28:	ee08 0a10 	vmov	s16, r0
 8009f2c:	4b9f      	ldr	r3, [pc, #636]	; (800a1ac <_printf_float+0x2dc>)
 8009f2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f32:	f04f 32ff 	mov.w	r2, #4294967295
 8009f36:	f7f6 fe09 	bl	8000b4c <__aeabi_dcmpun>
 8009f3a:	bb88      	cbnz	r0, 8009fa0 <_printf_float+0xd0>
 8009f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f40:	4b9a      	ldr	r3, [pc, #616]	; (800a1ac <_printf_float+0x2dc>)
 8009f42:	f04f 32ff 	mov.w	r2, #4294967295
 8009f46:	f7f6 fde3 	bl	8000b10 <__aeabi_dcmple>
 8009f4a:	bb48      	cbnz	r0, 8009fa0 <_printf_float+0xd0>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4640      	mov	r0, r8
 8009f52:	4649      	mov	r1, r9
 8009f54:	f7f6 fdd2 	bl	8000afc <__aeabi_dcmplt>
 8009f58:	b110      	cbz	r0, 8009f60 <_printf_float+0x90>
 8009f5a:	232d      	movs	r3, #45	; 0x2d
 8009f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f60:	4b93      	ldr	r3, [pc, #588]	; (800a1b0 <_printf_float+0x2e0>)
 8009f62:	4894      	ldr	r0, [pc, #592]	; (800a1b4 <_printf_float+0x2e4>)
 8009f64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f68:	bf94      	ite	ls
 8009f6a:	4698      	movls	r8, r3
 8009f6c:	4680      	movhi	r8, r0
 8009f6e:	2303      	movs	r3, #3
 8009f70:	6123      	str	r3, [r4, #16]
 8009f72:	9b05      	ldr	r3, [sp, #20]
 8009f74:	f023 0204 	bic.w	r2, r3, #4
 8009f78:	6022      	str	r2, [r4, #0]
 8009f7a:	f04f 0900 	mov.w	r9, #0
 8009f7e:	9700      	str	r7, [sp, #0]
 8009f80:	4633      	mov	r3, r6
 8009f82:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f84:	4621      	mov	r1, r4
 8009f86:	4628      	mov	r0, r5
 8009f88:	f000 f9d8 	bl	800a33c <_printf_common>
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f040 8090 	bne.w	800a0b2 <_printf_float+0x1e2>
 8009f92:	f04f 30ff 	mov.w	r0, #4294967295
 8009f96:	b00d      	add	sp, #52	; 0x34
 8009f98:	ecbd 8b02 	vpop	{d8}
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	464b      	mov	r3, r9
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	f7f6 fdd0 	bl	8000b4c <__aeabi_dcmpun>
 8009fac:	b140      	cbz	r0, 8009fc0 <_printf_float+0xf0>
 8009fae:	464b      	mov	r3, r9
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	bfbc      	itt	lt
 8009fb4:	232d      	movlt	r3, #45	; 0x2d
 8009fb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fba:	487f      	ldr	r0, [pc, #508]	; (800a1b8 <_printf_float+0x2e8>)
 8009fbc:	4b7f      	ldr	r3, [pc, #508]	; (800a1bc <_printf_float+0x2ec>)
 8009fbe:	e7d1      	b.n	8009f64 <_printf_float+0x94>
 8009fc0:	6863      	ldr	r3, [r4, #4]
 8009fc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009fc6:	9206      	str	r2, [sp, #24]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	d13f      	bne.n	800a04c <_printf_float+0x17c>
 8009fcc:	2306      	movs	r3, #6
 8009fce:	6063      	str	r3, [r4, #4]
 8009fd0:	9b05      	ldr	r3, [sp, #20]
 8009fd2:	6861      	ldr	r1, [r4, #4]
 8009fd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9303      	str	r3, [sp, #12]
 8009fdc:	ab0a      	add	r3, sp, #40	; 0x28
 8009fde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009fe2:	ab09      	add	r3, sp, #36	; 0x24
 8009fe4:	ec49 8b10 	vmov	d0, r8, r9
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	6022      	str	r2, [r4, #0]
 8009fec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f7ff fecd 	bl	8009d90 <__cvt>
 8009ff6:	9b06      	ldr	r3, [sp, #24]
 8009ff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ffa:	2b47      	cmp	r3, #71	; 0x47
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	d108      	bne.n	800a012 <_printf_float+0x142>
 800a000:	1cc8      	adds	r0, r1, #3
 800a002:	db02      	blt.n	800a00a <_printf_float+0x13a>
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	4299      	cmp	r1, r3
 800a008:	dd41      	ble.n	800a08e <_printf_float+0x1be>
 800a00a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a00e:	fa5f fb8b 	uxtb.w	fp, fp
 800a012:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a016:	d820      	bhi.n	800a05a <_printf_float+0x18a>
 800a018:	3901      	subs	r1, #1
 800a01a:	465a      	mov	r2, fp
 800a01c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a020:	9109      	str	r1, [sp, #36]	; 0x24
 800a022:	f7ff ff17 	bl	8009e54 <__exponent>
 800a026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a028:	1813      	adds	r3, r2, r0
 800a02a:	2a01      	cmp	r2, #1
 800a02c:	4681      	mov	r9, r0
 800a02e:	6123      	str	r3, [r4, #16]
 800a030:	dc02      	bgt.n	800a038 <_printf_float+0x168>
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	07d2      	lsls	r2, r2, #31
 800a036:	d501      	bpl.n	800a03c <_printf_float+0x16c>
 800a038:	3301      	adds	r3, #1
 800a03a:	6123      	str	r3, [r4, #16]
 800a03c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a040:	2b00      	cmp	r3, #0
 800a042:	d09c      	beq.n	8009f7e <_printf_float+0xae>
 800a044:	232d      	movs	r3, #45	; 0x2d
 800a046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a04a:	e798      	b.n	8009f7e <_printf_float+0xae>
 800a04c:	9a06      	ldr	r2, [sp, #24]
 800a04e:	2a47      	cmp	r2, #71	; 0x47
 800a050:	d1be      	bne.n	8009fd0 <_printf_float+0x100>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1bc      	bne.n	8009fd0 <_printf_float+0x100>
 800a056:	2301      	movs	r3, #1
 800a058:	e7b9      	b.n	8009fce <_printf_float+0xfe>
 800a05a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a05e:	d118      	bne.n	800a092 <_printf_float+0x1c2>
 800a060:	2900      	cmp	r1, #0
 800a062:	6863      	ldr	r3, [r4, #4]
 800a064:	dd0b      	ble.n	800a07e <_printf_float+0x1ae>
 800a066:	6121      	str	r1, [r4, #16]
 800a068:	b913      	cbnz	r3, 800a070 <_printf_float+0x1a0>
 800a06a:	6822      	ldr	r2, [r4, #0]
 800a06c:	07d0      	lsls	r0, r2, #31
 800a06e:	d502      	bpl.n	800a076 <_printf_float+0x1a6>
 800a070:	3301      	adds	r3, #1
 800a072:	440b      	add	r3, r1
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	65a1      	str	r1, [r4, #88]	; 0x58
 800a078:	f04f 0900 	mov.w	r9, #0
 800a07c:	e7de      	b.n	800a03c <_printf_float+0x16c>
 800a07e:	b913      	cbnz	r3, 800a086 <_printf_float+0x1b6>
 800a080:	6822      	ldr	r2, [r4, #0]
 800a082:	07d2      	lsls	r2, r2, #31
 800a084:	d501      	bpl.n	800a08a <_printf_float+0x1ba>
 800a086:	3302      	adds	r3, #2
 800a088:	e7f4      	b.n	800a074 <_printf_float+0x1a4>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e7f2      	b.n	800a074 <_printf_float+0x1a4>
 800a08e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a094:	4299      	cmp	r1, r3
 800a096:	db05      	blt.n	800a0a4 <_printf_float+0x1d4>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	6121      	str	r1, [r4, #16]
 800a09c:	07d8      	lsls	r0, r3, #31
 800a09e:	d5ea      	bpl.n	800a076 <_printf_float+0x1a6>
 800a0a0:	1c4b      	adds	r3, r1, #1
 800a0a2:	e7e7      	b.n	800a074 <_printf_float+0x1a4>
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	bfd4      	ite	le
 800a0a8:	f1c1 0202 	rsble	r2, r1, #2
 800a0ac:	2201      	movgt	r2, #1
 800a0ae:	4413      	add	r3, r2
 800a0b0:	e7e0      	b.n	800a074 <_printf_float+0x1a4>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	055a      	lsls	r2, r3, #21
 800a0b6:	d407      	bmi.n	800a0c8 <_printf_float+0x1f8>
 800a0b8:	6923      	ldr	r3, [r4, #16]
 800a0ba:	4642      	mov	r2, r8
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d12c      	bne.n	800a120 <_printf_float+0x250>
 800a0c6:	e764      	b.n	8009f92 <_printf_float+0xc2>
 800a0c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0cc:	f240 80e0 	bls.w	800a290 <_printf_float+0x3c0>
 800a0d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f7f6 fd06 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d034      	beq.n	800a14a <_printf_float+0x27a>
 800a0e0:	4a37      	ldr	r2, [pc, #220]	; (800a1c0 <_printf_float+0x2f0>)
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	47b8      	blx	r7
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	f43f af51 	beq.w	8009f92 <_printf_float+0xc2>
 800a0f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	db02      	blt.n	800a0fe <_printf_float+0x22e>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	07d8      	lsls	r0, r3, #31
 800a0fc:	d510      	bpl.n	800a120 <_printf_float+0x250>
 800a0fe:	ee18 3a10 	vmov	r3, s16
 800a102:	4652      	mov	r2, sl
 800a104:	4631      	mov	r1, r6
 800a106:	4628      	mov	r0, r5
 800a108:	47b8      	blx	r7
 800a10a:	3001      	adds	r0, #1
 800a10c:	f43f af41 	beq.w	8009f92 <_printf_float+0xc2>
 800a110:	f04f 0800 	mov.w	r8, #0
 800a114:	f104 091a 	add.w	r9, r4, #26
 800a118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11a:	3b01      	subs	r3, #1
 800a11c:	4543      	cmp	r3, r8
 800a11e:	dc09      	bgt.n	800a134 <_printf_float+0x264>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	079b      	lsls	r3, r3, #30
 800a124:	f100 8105 	bmi.w	800a332 <_printf_float+0x462>
 800a128:	68e0      	ldr	r0, [r4, #12]
 800a12a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a12c:	4298      	cmp	r0, r3
 800a12e:	bfb8      	it	lt
 800a130:	4618      	movlt	r0, r3
 800a132:	e730      	b.n	8009f96 <_printf_float+0xc6>
 800a134:	2301      	movs	r3, #1
 800a136:	464a      	mov	r2, r9
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	47b8      	blx	r7
 800a13e:	3001      	adds	r0, #1
 800a140:	f43f af27 	beq.w	8009f92 <_printf_float+0xc2>
 800a144:	f108 0801 	add.w	r8, r8, #1
 800a148:	e7e6      	b.n	800a118 <_printf_float+0x248>
 800a14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dc39      	bgt.n	800a1c4 <_printf_float+0x2f4>
 800a150:	4a1b      	ldr	r2, [pc, #108]	; (800a1c0 <_printf_float+0x2f0>)
 800a152:	2301      	movs	r3, #1
 800a154:	4631      	mov	r1, r6
 800a156:	4628      	mov	r0, r5
 800a158:	47b8      	blx	r7
 800a15a:	3001      	adds	r0, #1
 800a15c:	f43f af19 	beq.w	8009f92 <_printf_float+0xc2>
 800a160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a164:	4313      	orrs	r3, r2
 800a166:	d102      	bne.n	800a16e <_printf_float+0x29e>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	07d9      	lsls	r1, r3, #31
 800a16c:	d5d8      	bpl.n	800a120 <_printf_float+0x250>
 800a16e:	ee18 3a10 	vmov	r3, s16
 800a172:	4652      	mov	r2, sl
 800a174:	4631      	mov	r1, r6
 800a176:	4628      	mov	r0, r5
 800a178:	47b8      	blx	r7
 800a17a:	3001      	adds	r0, #1
 800a17c:	f43f af09 	beq.w	8009f92 <_printf_float+0xc2>
 800a180:	f04f 0900 	mov.w	r9, #0
 800a184:	f104 0a1a 	add.w	sl, r4, #26
 800a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18a:	425b      	negs	r3, r3
 800a18c:	454b      	cmp	r3, r9
 800a18e:	dc01      	bgt.n	800a194 <_printf_float+0x2c4>
 800a190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a192:	e792      	b.n	800a0ba <_printf_float+0x1ea>
 800a194:	2301      	movs	r3, #1
 800a196:	4652      	mov	r2, sl
 800a198:	4631      	mov	r1, r6
 800a19a:	4628      	mov	r0, r5
 800a19c:	47b8      	blx	r7
 800a19e:	3001      	adds	r0, #1
 800a1a0:	f43f aef7 	beq.w	8009f92 <_printf_float+0xc2>
 800a1a4:	f109 0901 	add.w	r9, r9, #1
 800a1a8:	e7ee      	b.n	800a188 <_printf_float+0x2b8>
 800a1aa:	bf00      	nop
 800a1ac:	7fefffff 	.word	0x7fefffff
 800a1b0:	08011179 	.word	0x08011179
 800a1b4:	0801117d 	.word	0x0801117d
 800a1b8:	08011185 	.word	0x08011185
 800a1bc:	08011181 	.word	0x08011181
 800a1c0:	08011189 	.word	0x08011189
 800a1c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	bfa8      	it	ge
 800a1cc:	461a      	movge	r2, r3
 800a1ce:	2a00      	cmp	r2, #0
 800a1d0:	4691      	mov	r9, r2
 800a1d2:	dc37      	bgt.n	800a244 <_printf_float+0x374>
 800a1d4:	f04f 0b00 	mov.w	fp, #0
 800a1d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1dc:	f104 021a 	add.w	r2, r4, #26
 800a1e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1e2:	9305      	str	r3, [sp, #20]
 800a1e4:	eba3 0309 	sub.w	r3, r3, r9
 800a1e8:	455b      	cmp	r3, fp
 800a1ea:	dc33      	bgt.n	800a254 <_printf_float+0x384>
 800a1ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	db3b      	blt.n	800a26c <_printf_float+0x39c>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	07da      	lsls	r2, r3, #31
 800a1f8:	d438      	bmi.n	800a26c <_printf_float+0x39c>
 800a1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fc:	9a05      	ldr	r2, [sp, #20]
 800a1fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a200:	1a9a      	subs	r2, r3, r2
 800a202:	eba3 0901 	sub.w	r9, r3, r1
 800a206:	4591      	cmp	r9, r2
 800a208:	bfa8      	it	ge
 800a20a:	4691      	movge	r9, r2
 800a20c:	f1b9 0f00 	cmp.w	r9, #0
 800a210:	dc35      	bgt.n	800a27e <_printf_float+0x3ae>
 800a212:	f04f 0800 	mov.w	r8, #0
 800a216:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a21a:	f104 0a1a 	add.w	sl, r4, #26
 800a21e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a222:	1a9b      	subs	r3, r3, r2
 800a224:	eba3 0309 	sub.w	r3, r3, r9
 800a228:	4543      	cmp	r3, r8
 800a22a:	f77f af79 	ble.w	800a120 <_printf_float+0x250>
 800a22e:	2301      	movs	r3, #1
 800a230:	4652      	mov	r2, sl
 800a232:	4631      	mov	r1, r6
 800a234:	4628      	mov	r0, r5
 800a236:	47b8      	blx	r7
 800a238:	3001      	adds	r0, #1
 800a23a:	f43f aeaa 	beq.w	8009f92 <_printf_float+0xc2>
 800a23e:	f108 0801 	add.w	r8, r8, #1
 800a242:	e7ec      	b.n	800a21e <_printf_float+0x34e>
 800a244:	4613      	mov	r3, r2
 800a246:	4631      	mov	r1, r6
 800a248:	4642      	mov	r2, r8
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b8      	blx	r7
 800a24e:	3001      	adds	r0, #1
 800a250:	d1c0      	bne.n	800a1d4 <_printf_float+0x304>
 800a252:	e69e      	b.n	8009f92 <_printf_float+0xc2>
 800a254:	2301      	movs	r3, #1
 800a256:	4631      	mov	r1, r6
 800a258:	4628      	mov	r0, r5
 800a25a:	9205      	str	r2, [sp, #20]
 800a25c:	47b8      	blx	r7
 800a25e:	3001      	adds	r0, #1
 800a260:	f43f ae97 	beq.w	8009f92 <_printf_float+0xc2>
 800a264:	9a05      	ldr	r2, [sp, #20]
 800a266:	f10b 0b01 	add.w	fp, fp, #1
 800a26a:	e7b9      	b.n	800a1e0 <_printf_float+0x310>
 800a26c:	ee18 3a10 	vmov	r3, s16
 800a270:	4652      	mov	r2, sl
 800a272:	4631      	mov	r1, r6
 800a274:	4628      	mov	r0, r5
 800a276:	47b8      	blx	r7
 800a278:	3001      	adds	r0, #1
 800a27a:	d1be      	bne.n	800a1fa <_printf_float+0x32a>
 800a27c:	e689      	b.n	8009f92 <_printf_float+0xc2>
 800a27e:	9a05      	ldr	r2, [sp, #20]
 800a280:	464b      	mov	r3, r9
 800a282:	4442      	add	r2, r8
 800a284:	4631      	mov	r1, r6
 800a286:	4628      	mov	r0, r5
 800a288:	47b8      	blx	r7
 800a28a:	3001      	adds	r0, #1
 800a28c:	d1c1      	bne.n	800a212 <_printf_float+0x342>
 800a28e:	e680      	b.n	8009f92 <_printf_float+0xc2>
 800a290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a292:	2a01      	cmp	r2, #1
 800a294:	dc01      	bgt.n	800a29a <_printf_float+0x3ca>
 800a296:	07db      	lsls	r3, r3, #31
 800a298:	d538      	bpl.n	800a30c <_printf_float+0x43c>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4642      	mov	r2, r8
 800a29e:	4631      	mov	r1, r6
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	47b8      	blx	r7
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	f43f ae74 	beq.w	8009f92 <_printf_float+0xc2>
 800a2aa:	ee18 3a10 	vmov	r3, s16
 800a2ae:	4652      	mov	r2, sl
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b8      	blx	r7
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f43f ae6b 	beq.w	8009f92 <_printf_float+0xc2>
 800a2bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f7f6 fc10 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2c8:	b9d8      	cbnz	r0, 800a302 <_printf_float+0x432>
 800a2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2cc:	f108 0201 	add.w	r2, r8, #1
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b8      	blx	r7
 800a2d8:	3001      	adds	r0, #1
 800a2da:	d10e      	bne.n	800a2fa <_printf_float+0x42a>
 800a2dc:	e659      	b.n	8009f92 <_printf_float+0xc2>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	4652      	mov	r2, sl
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b8      	blx	r7
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	f43f ae52 	beq.w	8009f92 <_printf_float+0xc2>
 800a2ee:	f108 0801 	add.w	r8, r8, #1
 800a2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	4543      	cmp	r3, r8
 800a2f8:	dcf1      	bgt.n	800a2de <_printf_float+0x40e>
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a300:	e6dc      	b.n	800a0bc <_printf_float+0x1ec>
 800a302:	f04f 0800 	mov.w	r8, #0
 800a306:	f104 0a1a 	add.w	sl, r4, #26
 800a30a:	e7f2      	b.n	800a2f2 <_printf_float+0x422>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4642      	mov	r2, r8
 800a310:	e7df      	b.n	800a2d2 <_printf_float+0x402>
 800a312:	2301      	movs	r3, #1
 800a314:	464a      	mov	r2, r9
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	47b8      	blx	r7
 800a31c:	3001      	adds	r0, #1
 800a31e:	f43f ae38 	beq.w	8009f92 <_printf_float+0xc2>
 800a322:	f108 0801 	add.w	r8, r8, #1
 800a326:	68e3      	ldr	r3, [r4, #12]
 800a328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a32a:	1a5b      	subs	r3, r3, r1
 800a32c:	4543      	cmp	r3, r8
 800a32e:	dcf0      	bgt.n	800a312 <_printf_float+0x442>
 800a330:	e6fa      	b.n	800a128 <_printf_float+0x258>
 800a332:	f04f 0800 	mov.w	r8, #0
 800a336:	f104 0919 	add.w	r9, r4, #25
 800a33a:	e7f4      	b.n	800a326 <_printf_float+0x456>

0800a33c <_printf_common>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	4616      	mov	r6, r2
 800a342:	4699      	mov	r9, r3
 800a344:	688a      	ldr	r2, [r1, #8]
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a34c:	4293      	cmp	r3, r2
 800a34e:	bfb8      	it	lt
 800a350:	4613      	movlt	r3, r2
 800a352:	6033      	str	r3, [r6, #0]
 800a354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a358:	4607      	mov	r7, r0
 800a35a:	460c      	mov	r4, r1
 800a35c:	b10a      	cbz	r2, 800a362 <_printf_common+0x26>
 800a35e:	3301      	adds	r3, #1
 800a360:	6033      	str	r3, [r6, #0]
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	0699      	lsls	r1, r3, #26
 800a366:	bf42      	ittt	mi
 800a368:	6833      	ldrmi	r3, [r6, #0]
 800a36a:	3302      	addmi	r3, #2
 800a36c:	6033      	strmi	r3, [r6, #0]
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	f015 0506 	ands.w	r5, r5, #6
 800a374:	d106      	bne.n	800a384 <_printf_common+0x48>
 800a376:	f104 0a19 	add.w	sl, r4, #25
 800a37a:	68e3      	ldr	r3, [r4, #12]
 800a37c:	6832      	ldr	r2, [r6, #0]
 800a37e:	1a9b      	subs	r3, r3, r2
 800a380:	42ab      	cmp	r3, r5
 800a382:	dc26      	bgt.n	800a3d2 <_printf_common+0x96>
 800a384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a388:	1e13      	subs	r3, r2, #0
 800a38a:	6822      	ldr	r2, [r4, #0]
 800a38c:	bf18      	it	ne
 800a38e:	2301      	movne	r3, #1
 800a390:	0692      	lsls	r2, r2, #26
 800a392:	d42b      	bmi.n	800a3ec <_printf_common+0xb0>
 800a394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a398:	4649      	mov	r1, r9
 800a39a:	4638      	mov	r0, r7
 800a39c:	47c0      	blx	r8
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d01e      	beq.n	800a3e0 <_printf_common+0xa4>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	68e5      	ldr	r5, [r4, #12]
 800a3a6:	6832      	ldr	r2, [r6, #0]
 800a3a8:	f003 0306 	and.w	r3, r3, #6
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	bf08      	it	eq
 800a3b0:	1aad      	subeq	r5, r5, r2
 800a3b2:	68a3      	ldr	r3, [r4, #8]
 800a3b4:	6922      	ldr	r2, [r4, #16]
 800a3b6:	bf0c      	ite	eq
 800a3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3bc:	2500      	movne	r5, #0
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	bfc4      	itt	gt
 800a3c2:	1a9b      	subgt	r3, r3, r2
 800a3c4:	18ed      	addgt	r5, r5, r3
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	341a      	adds	r4, #26
 800a3ca:	42b5      	cmp	r5, r6
 800a3cc:	d11a      	bne.n	800a404 <_printf_common+0xc8>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	e008      	b.n	800a3e4 <_printf_common+0xa8>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4652      	mov	r2, sl
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	4638      	mov	r0, r7
 800a3da:	47c0      	blx	r8
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d103      	bne.n	800a3e8 <_printf_common+0xac>
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e8:	3501      	adds	r5, #1
 800a3ea:	e7c6      	b.n	800a37a <_printf_common+0x3e>
 800a3ec:	18e1      	adds	r1, r4, r3
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	2030      	movs	r0, #48	; 0x30
 800a3f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3f6:	4422      	add	r2, r4
 800a3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a400:	3302      	adds	r3, #2
 800a402:	e7c7      	b.n	800a394 <_printf_common+0x58>
 800a404:	2301      	movs	r3, #1
 800a406:	4622      	mov	r2, r4
 800a408:	4649      	mov	r1, r9
 800a40a:	4638      	mov	r0, r7
 800a40c:	47c0      	blx	r8
 800a40e:	3001      	adds	r0, #1
 800a410:	d0e6      	beq.n	800a3e0 <_printf_common+0xa4>
 800a412:	3601      	adds	r6, #1
 800a414:	e7d9      	b.n	800a3ca <_printf_common+0x8e>
	...

0800a418 <_printf_i>:
 800a418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	7e0f      	ldrb	r7, [r1, #24]
 800a41e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a420:	2f78      	cmp	r7, #120	; 0x78
 800a422:	4691      	mov	r9, r2
 800a424:	4680      	mov	r8, r0
 800a426:	460c      	mov	r4, r1
 800a428:	469a      	mov	sl, r3
 800a42a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a42e:	d807      	bhi.n	800a440 <_printf_i+0x28>
 800a430:	2f62      	cmp	r7, #98	; 0x62
 800a432:	d80a      	bhi.n	800a44a <_printf_i+0x32>
 800a434:	2f00      	cmp	r7, #0
 800a436:	f000 80d8 	beq.w	800a5ea <_printf_i+0x1d2>
 800a43a:	2f58      	cmp	r7, #88	; 0x58
 800a43c:	f000 80a3 	beq.w	800a586 <_printf_i+0x16e>
 800a440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a448:	e03a      	b.n	800a4c0 <_printf_i+0xa8>
 800a44a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a44e:	2b15      	cmp	r3, #21
 800a450:	d8f6      	bhi.n	800a440 <_printf_i+0x28>
 800a452:	a101      	add	r1, pc, #4	; (adr r1, 800a458 <_printf_i+0x40>)
 800a454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a458:	0800a4b1 	.word	0x0800a4b1
 800a45c:	0800a4c5 	.word	0x0800a4c5
 800a460:	0800a441 	.word	0x0800a441
 800a464:	0800a441 	.word	0x0800a441
 800a468:	0800a441 	.word	0x0800a441
 800a46c:	0800a441 	.word	0x0800a441
 800a470:	0800a4c5 	.word	0x0800a4c5
 800a474:	0800a441 	.word	0x0800a441
 800a478:	0800a441 	.word	0x0800a441
 800a47c:	0800a441 	.word	0x0800a441
 800a480:	0800a441 	.word	0x0800a441
 800a484:	0800a5d1 	.word	0x0800a5d1
 800a488:	0800a4f5 	.word	0x0800a4f5
 800a48c:	0800a5b3 	.word	0x0800a5b3
 800a490:	0800a441 	.word	0x0800a441
 800a494:	0800a441 	.word	0x0800a441
 800a498:	0800a5f3 	.word	0x0800a5f3
 800a49c:	0800a441 	.word	0x0800a441
 800a4a0:	0800a4f5 	.word	0x0800a4f5
 800a4a4:	0800a441 	.word	0x0800a441
 800a4a8:	0800a441 	.word	0x0800a441
 800a4ac:	0800a5bb 	.word	0x0800a5bb
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	602a      	str	r2, [r5, #0]
 800a4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e0a3      	b.n	800a60c <_printf_i+0x1f4>
 800a4c4:	6820      	ldr	r0, [r4, #0]
 800a4c6:	6829      	ldr	r1, [r5, #0]
 800a4c8:	0606      	lsls	r6, r0, #24
 800a4ca:	f101 0304 	add.w	r3, r1, #4
 800a4ce:	d50a      	bpl.n	800a4e6 <_printf_i+0xce>
 800a4d0:	680e      	ldr	r6, [r1, #0]
 800a4d2:	602b      	str	r3, [r5, #0]
 800a4d4:	2e00      	cmp	r6, #0
 800a4d6:	da03      	bge.n	800a4e0 <_printf_i+0xc8>
 800a4d8:	232d      	movs	r3, #45	; 0x2d
 800a4da:	4276      	negs	r6, r6
 800a4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e0:	485e      	ldr	r0, [pc, #376]	; (800a65c <_printf_i+0x244>)
 800a4e2:	230a      	movs	r3, #10
 800a4e4:	e019      	b.n	800a51a <_printf_i+0x102>
 800a4e6:	680e      	ldr	r6, [r1, #0]
 800a4e8:	602b      	str	r3, [r5, #0]
 800a4ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4ee:	bf18      	it	ne
 800a4f0:	b236      	sxthne	r6, r6
 800a4f2:	e7ef      	b.n	800a4d4 <_printf_i+0xbc>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	6820      	ldr	r0, [r4, #0]
 800a4f8:	1d19      	adds	r1, r3, #4
 800a4fa:	6029      	str	r1, [r5, #0]
 800a4fc:	0601      	lsls	r1, r0, #24
 800a4fe:	d501      	bpl.n	800a504 <_printf_i+0xec>
 800a500:	681e      	ldr	r6, [r3, #0]
 800a502:	e002      	b.n	800a50a <_printf_i+0xf2>
 800a504:	0646      	lsls	r6, r0, #25
 800a506:	d5fb      	bpl.n	800a500 <_printf_i+0xe8>
 800a508:	881e      	ldrh	r6, [r3, #0]
 800a50a:	4854      	ldr	r0, [pc, #336]	; (800a65c <_printf_i+0x244>)
 800a50c:	2f6f      	cmp	r7, #111	; 0x6f
 800a50e:	bf0c      	ite	eq
 800a510:	2308      	moveq	r3, #8
 800a512:	230a      	movne	r3, #10
 800a514:	2100      	movs	r1, #0
 800a516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a51a:	6865      	ldr	r5, [r4, #4]
 800a51c:	60a5      	str	r5, [r4, #8]
 800a51e:	2d00      	cmp	r5, #0
 800a520:	bfa2      	ittt	ge
 800a522:	6821      	ldrge	r1, [r4, #0]
 800a524:	f021 0104 	bicge.w	r1, r1, #4
 800a528:	6021      	strge	r1, [r4, #0]
 800a52a:	b90e      	cbnz	r6, 800a530 <_printf_i+0x118>
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	d04d      	beq.n	800a5cc <_printf_i+0x1b4>
 800a530:	4615      	mov	r5, r2
 800a532:	fbb6 f1f3 	udiv	r1, r6, r3
 800a536:	fb03 6711 	mls	r7, r3, r1, r6
 800a53a:	5dc7      	ldrb	r7, [r0, r7]
 800a53c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a540:	4637      	mov	r7, r6
 800a542:	42bb      	cmp	r3, r7
 800a544:	460e      	mov	r6, r1
 800a546:	d9f4      	bls.n	800a532 <_printf_i+0x11a>
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d10b      	bne.n	800a564 <_printf_i+0x14c>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	07de      	lsls	r6, r3, #31
 800a550:	d508      	bpl.n	800a564 <_printf_i+0x14c>
 800a552:	6923      	ldr	r3, [r4, #16]
 800a554:	6861      	ldr	r1, [r4, #4]
 800a556:	4299      	cmp	r1, r3
 800a558:	bfde      	ittt	le
 800a55a:	2330      	movle	r3, #48	; 0x30
 800a55c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a560:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a564:	1b52      	subs	r2, r2, r5
 800a566:	6122      	str	r2, [r4, #16]
 800a568:	f8cd a000 	str.w	sl, [sp]
 800a56c:	464b      	mov	r3, r9
 800a56e:	aa03      	add	r2, sp, #12
 800a570:	4621      	mov	r1, r4
 800a572:	4640      	mov	r0, r8
 800a574:	f7ff fee2 	bl	800a33c <_printf_common>
 800a578:	3001      	adds	r0, #1
 800a57a:	d14c      	bne.n	800a616 <_printf_i+0x1fe>
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295
 800a580:	b004      	add	sp, #16
 800a582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a586:	4835      	ldr	r0, [pc, #212]	; (800a65c <_printf_i+0x244>)
 800a588:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a58c:	6829      	ldr	r1, [r5, #0]
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	f851 6b04 	ldr.w	r6, [r1], #4
 800a594:	6029      	str	r1, [r5, #0]
 800a596:	061d      	lsls	r5, r3, #24
 800a598:	d514      	bpl.n	800a5c4 <_printf_i+0x1ac>
 800a59a:	07df      	lsls	r7, r3, #31
 800a59c:	bf44      	itt	mi
 800a59e:	f043 0320 	orrmi.w	r3, r3, #32
 800a5a2:	6023      	strmi	r3, [r4, #0]
 800a5a4:	b91e      	cbnz	r6, 800a5ae <_printf_i+0x196>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	f023 0320 	bic.w	r3, r3, #32
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	2310      	movs	r3, #16
 800a5b0:	e7b0      	b.n	800a514 <_printf_i+0xfc>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	f043 0320 	orr.w	r3, r3, #32
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	2378      	movs	r3, #120	; 0x78
 800a5bc:	4828      	ldr	r0, [pc, #160]	; (800a660 <_printf_i+0x248>)
 800a5be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5c2:	e7e3      	b.n	800a58c <_printf_i+0x174>
 800a5c4:	0659      	lsls	r1, r3, #25
 800a5c6:	bf48      	it	mi
 800a5c8:	b2b6      	uxthmi	r6, r6
 800a5ca:	e7e6      	b.n	800a59a <_printf_i+0x182>
 800a5cc:	4615      	mov	r5, r2
 800a5ce:	e7bb      	b.n	800a548 <_printf_i+0x130>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	6826      	ldr	r6, [r4, #0]
 800a5d4:	6961      	ldr	r1, [r4, #20]
 800a5d6:	1d18      	adds	r0, r3, #4
 800a5d8:	6028      	str	r0, [r5, #0]
 800a5da:	0635      	lsls	r5, r6, #24
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	d501      	bpl.n	800a5e4 <_printf_i+0x1cc>
 800a5e0:	6019      	str	r1, [r3, #0]
 800a5e2:	e002      	b.n	800a5ea <_printf_i+0x1d2>
 800a5e4:	0670      	lsls	r0, r6, #25
 800a5e6:	d5fb      	bpl.n	800a5e0 <_printf_i+0x1c8>
 800a5e8:	8019      	strh	r1, [r3, #0]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	6123      	str	r3, [r4, #16]
 800a5ee:	4615      	mov	r5, r2
 800a5f0:	e7ba      	b.n	800a568 <_printf_i+0x150>
 800a5f2:	682b      	ldr	r3, [r5, #0]
 800a5f4:	1d1a      	adds	r2, r3, #4
 800a5f6:	602a      	str	r2, [r5, #0]
 800a5f8:	681d      	ldr	r5, [r3, #0]
 800a5fa:	6862      	ldr	r2, [r4, #4]
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	4628      	mov	r0, r5
 800a600:	f7f5 fdfe 	bl	8000200 <memchr>
 800a604:	b108      	cbz	r0, 800a60a <_printf_i+0x1f2>
 800a606:	1b40      	subs	r0, r0, r5
 800a608:	6060      	str	r0, [r4, #4]
 800a60a:	6863      	ldr	r3, [r4, #4]
 800a60c:	6123      	str	r3, [r4, #16]
 800a60e:	2300      	movs	r3, #0
 800a610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a614:	e7a8      	b.n	800a568 <_printf_i+0x150>
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	462a      	mov	r2, r5
 800a61a:	4649      	mov	r1, r9
 800a61c:	4640      	mov	r0, r8
 800a61e:	47d0      	blx	sl
 800a620:	3001      	adds	r0, #1
 800a622:	d0ab      	beq.n	800a57c <_printf_i+0x164>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	079b      	lsls	r3, r3, #30
 800a628:	d413      	bmi.n	800a652 <_printf_i+0x23a>
 800a62a:	68e0      	ldr	r0, [r4, #12]
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	4298      	cmp	r0, r3
 800a630:	bfb8      	it	lt
 800a632:	4618      	movlt	r0, r3
 800a634:	e7a4      	b.n	800a580 <_printf_i+0x168>
 800a636:	2301      	movs	r3, #1
 800a638:	4632      	mov	r2, r6
 800a63a:	4649      	mov	r1, r9
 800a63c:	4640      	mov	r0, r8
 800a63e:	47d0      	blx	sl
 800a640:	3001      	adds	r0, #1
 800a642:	d09b      	beq.n	800a57c <_printf_i+0x164>
 800a644:	3501      	adds	r5, #1
 800a646:	68e3      	ldr	r3, [r4, #12]
 800a648:	9903      	ldr	r1, [sp, #12]
 800a64a:	1a5b      	subs	r3, r3, r1
 800a64c:	42ab      	cmp	r3, r5
 800a64e:	dcf2      	bgt.n	800a636 <_printf_i+0x21e>
 800a650:	e7eb      	b.n	800a62a <_printf_i+0x212>
 800a652:	2500      	movs	r5, #0
 800a654:	f104 0619 	add.w	r6, r4, #25
 800a658:	e7f5      	b.n	800a646 <_printf_i+0x22e>
 800a65a:	bf00      	nop
 800a65c:	0801118b 	.word	0x0801118b
 800a660:	0801119c 	.word	0x0801119c

0800a664 <_scanf_float>:
 800a664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a668:	b087      	sub	sp, #28
 800a66a:	4617      	mov	r7, r2
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	688b      	ldr	r3, [r1, #8]
 800a670:	1e5a      	subs	r2, r3, #1
 800a672:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a676:	bf83      	ittte	hi
 800a678:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a67c:	195b      	addhi	r3, r3, r5
 800a67e:	9302      	strhi	r3, [sp, #8]
 800a680:	2300      	movls	r3, #0
 800a682:	bf86      	itte	hi
 800a684:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a688:	608b      	strhi	r3, [r1, #8]
 800a68a:	9302      	strls	r3, [sp, #8]
 800a68c:	680b      	ldr	r3, [r1, #0]
 800a68e:	468b      	mov	fp, r1
 800a690:	2500      	movs	r5, #0
 800a692:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a696:	f84b 3b1c 	str.w	r3, [fp], #28
 800a69a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a69e:	4680      	mov	r8, r0
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	465e      	mov	r6, fp
 800a6a4:	46aa      	mov	sl, r5
 800a6a6:	46a9      	mov	r9, r5
 800a6a8:	9501      	str	r5, [sp, #4]
 800a6aa:	68a2      	ldr	r2, [r4, #8]
 800a6ac:	b152      	cbz	r2, 800a6c4 <_scanf_float+0x60>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b4e      	cmp	r3, #78	; 0x4e
 800a6b4:	d864      	bhi.n	800a780 <_scanf_float+0x11c>
 800a6b6:	2b40      	cmp	r3, #64	; 0x40
 800a6b8:	d83c      	bhi.n	800a734 <_scanf_float+0xd0>
 800a6ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a6be:	b2c8      	uxtb	r0, r1
 800a6c0:	280e      	cmp	r0, #14
 800a6c2:	d93a      	bls.n	800a73a <_scanf_float+0xd6>
 800a6c4:	f1b9 0f00 	cmp.w	r9, #0
 800a6c8:	d003      	beq.n	800a6d2 <_scanf_float+0x6e>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6d6:	f1ba 0f01 	cmp.w	sl, #1
 800a6da:	f200 8113 	bhi.w	800a904 <_scanf_float+0x2a0>
 800a6de:	455e      	cmp	r6, fp
 800a6e0:	f200 8105 	bhi.w	800a8ee <_scanf_float+0x28a>
 800a6e4:	2501      	movs	r5, #1
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	b007      	add	sp, #28
 800a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a6f2:	2a0d      	cmp	r2, #13
 800a6f4:	d8e6      	bhi.n	800a6c4 <_scanf_float+0x60>
 800a6f6:	a101      	add	r1, pc, #4	; (adr r1, 800a6fc <_scanf_float+0x98>)
 800a6f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6fc:	0800a83b 	.word	0x0800a83b
 800a700:	0800a6c5 	.word	0x0800a6c5
 800a704:	0800a6c5 	.word	0x0800a6c5
 800a708:	0800a6c5 	.word	0x0800a6c5
 800a70c:	0800a89b 	.word	0x0800a89b
 800a710:	0800a873 	.word	0x0800a873
 800a714:	0800a6c5 	.word	0x0800a6c5
 800a718:	0800a6c5 	.word	0x0800a6c5
 800a71c:	0800a849 	.word	0x0800a849
 800a720:	0800a6c5 	.word	0x0800a6c5
 800a724:	0800a6c5 	.word	0x0800a6c5
 800a728:	0800a6c5 	.word	0x0800a6c5
 800a72c:	0800a6c5 	.word	0x0800a6c5
 800a730:	0800a801 	.word	0x0800a801
 800a734:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a738:	e7db      	b.n	800a6f2 <_scanf_float+0x8e>
 800a73a:	290e      	cmp	r1, #14
 800a73c:	d8c2      	bhi.n	800a6c4 <_scanf_float+0x60>
 800a73e:	a001      	add	r0, pc, #4	; (adr r0, 800a744 <_scanf_float+0xe0>)
 800a740:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a744:	0800a7f3 	.word	0x0800a7f3
 800a748:	0800a6c5 	.word	0x0800a6c5
 800a74c:	0800a7f3 	.word	0x0800a7f3
 800a750:	0800a887 	.word	0x0800a887
 800a754:	0800a6c5 	.word	0x0800a6c5
 800a758:	0800a7a1 	.word	0x0800a7a1
 800a75c:	0800a7dd 	.word	0x0800a7dd
 800a760:	0800a7dd 	.word	0x0800a7dd
 800a764:	0800a7dd 	.word	0x0800a7dd
 800a768:	0800a7dd 	.word	0x0800a7dd
 800a76c:	0800a7dd 	.word	0x0800a7dd
 800a770:	0800a7dd 	.word	0x0800a7dd
 800a774:	0800a7dd 	.word	0x0800a7dd
 800a778:	0800a7dd 	.word	0x0800a7dd
 800a77c:	0800a7dd 	.word	0x0800a7dd
 800a780:	2b6e      	cmp	r3, #110	; 0x6e
 800a782:	d809      	bhi.n	800a798 <_scanf_float+0x134>
 800a784:	2b60      	cmp	r3, #96	; 0x60
 800a786:	d8b2      	bhi.n	800a6ee <_scanf_float+0x8a>
 800a788:	2b54      	cmp	r3, #84	; 0x54
 800a78a:	d077      	beq.n	800a87c <_scanf_float+0x218>
 800a78c:	2b59      	cmp	r3, #89	; 0x59
 800a78e:	d199      	bne.n	800a6c4 <_scanf_float+0x60>
 800a790:	2d07      	cmp	r5, #7
 800a792:	d197      	bne.n	800a6c4 <_scanf_float+0x60>
 800a794:	2508      	movs	r5, #8
 800a796:	e029      	b.n	800a7ec <_scanf_float+0x188>
 800a798:	2b74      	cmp	r3, #116	; 0x74
 800a79a:	d06f      	beq.n	800a87c <_scanf_float+0x218>
 800a79c:	2b79      	cmp	r3, #121	; 0x79
 800a79e:	e7f6      	b.n	800a78e <_scanf_float+0x12a>
 800a7a0:	6821      	ldr	r1, [r4, #0]
 800a7a2:	05c8      	lsls	r0, r1, #23
 800a7a4:	d51a      	bpl.n	800a7dc <_scanf_float+0x178>
 800a7a6:	9b02      	ldr	r3, [sp, #8]
 800a7a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a7ac:	6021      	str	r1, [r4, #0]
 800a7ae:	f109 0901 	add.w	r9, r9, #1
 800a7b2:	b11b      	cbz	r3, 800a7bc <_scanf_float+0x158>
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	9302      	str	r3, [sp, #8]
 800a7ba:	60a2      	str	r2, [r4, #8]
 800a7bc:	68a3      	ldr	r3, [r4, #8]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	60a3      	str	r3, [r4, #8]
 800a7c2:	6923      	ldr	r3, [r4, #16]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	6123      	str	r3, [r4, #16]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	607b      	str	r3, [r7, #4]
 800a7d0:	f340 8084 	ble.w	800a8dc <_scanf_float+0x278>
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	603b      	str	r3, [r7, #0]
 800a7da:	e766      	b.n	800a6aa <_scanf_float+0x46>
 800a7dc:	eb1a 0f05 	cmn.w	sl, r5
 800a7e0:	f47f af70 	bne.w	800a6c4 <_scanf_float+0x60>
 800a7e4:	6822      	ldr	r2, [r4, #0]
 800a7e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a7ea:	6022      	str	r2, [r4, #0]
 800a7ec:	f806 3b01 	strb.w	r3, [r6], #1
 800a7f0:	e7e4      	b.n	800a7bc <_scanf_float+0x158>
 800a7f2:	6822      	ldr	r2, [r4, #0]
 800a7f4:	0610      	lsls	r0, r2, #24
 800a7f6:	f57f af65 	bpl.w	800a6c4 <_scanf_float+0x60>
 800a7fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7fe:	e7f4      	b.n	800a7ea <_scanf_float+0x186>
 800a800:	f1ba 0f00 	cmp.w	sl, #0
 800a804:	d10e      	bne.n	800a824 <_scanf_float+0x1c0>
 800a806:	f1b9 0f00 	cmp.w	r9, #0
 800a80a:	d10e      	bne.n	800a82a <_scanf_float+0x1c6>
 800a80c:	6822      	ldr	r2, [r4, #0]
 800a80e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a812:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a816:	d108      	bne.n	800a82a <_scanf_float+0x1c6>
 800a818:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a81c:	6022      	str	r2, [r4, #0]
 800a81e:	f04f 0a01 	mov.w	sl, #1
 800a822:	e7e3      	b.n	800a7ec <_scanf_float+0x188>
 800a824:	f1ba 0f02 	cmp.w	sl, #2
 800a828:	d055      	beq.n	800a8d6 <_scanf_float+0x272>
 800a82a:	2d01      	cmp	r5, #1
 800a82c:	d002      	beq.n	800a834 <_scanf_float+0x1d0>
 800a82e:	2d04      	cmp	r5, #4
 800a830:	f47f af48 	bne.w	800a6c4 <_scanf_float+0x60>
 800a834:	3501      	adds	r5, #1
 800a836:	b2ed      	uxtb	r5, r5
 800a838:	e7d8      	b.n	800a7ec <_scanf_float+0x188>
 800a83a:	f1ba 0f01 	cmp.w	sl, #1
 800a83e:	f47f af41 	bne.w	800a6c4 <_scanf_float+0x60>
 800a842:	f04f 0a02 	mov.w	sl, #2
 800a846:	e7d1      	b.n	800a7ec <_scanf_float+0x188>
 800a848:	b97d      	cbnz	r5, 800a86a <_scanf_float+0x206>
 800a84a:	f1b9 0f00 	cmp.w	r9, #0
 800a84e:	f47f af3c 	bne.w	800a6ca <_scanf_float+0x66>
 800a852:	6822      	ldr	r2, [r4, #0]
 800a854:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a858:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a85c:	f47f af39 	bne.w	800a6d2 <_scanf_float+0x6e>
 800a860:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a864:	6022      	str	r2, [r4, #0]
 800a866:	2501      	movs	r5, #1
 800a868:	e7c0      	b.n	800a7ec <_scanf_float+0x188>
 800a86a:	2d03      	cmp	r5, #3
 800a86c:	d0e2      	beq.n	800a834 <_scanf_float+0x1d0>
 800a86e:	2d05      	cmp	r5, #5
 800a870:	e7de      	b.n	800a830 <_scanf_float+0x1cc>
 800a872:	2d02      	cmp	r5, #2
 800a874:	f47f af26 	bne.w	800a6c4 <_scanf_float+0x60>
 800a878:	2503      	movs	r5, #3
 800a87a:	e7b7      	b.n	800a7ec <_scanf_float+0x188>
 800a87c:	2d06      	cmp	r5, #6
 800a87e:	f47f af21 	bne.w	800a6c4 <_scanf_float+0x60>
 800a882:	2507      	movs	r5, #7
 800a884:	e7b2      	b.n	800a7ec <_scanf_float+0x188>
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	0591      	lsls	r1, r2, #22
 800a88a:	f57f af1b 	bpl.w	800a6c4 <_scanf_float+0x60>
 800a88e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a892:	6022      	str	r2, [r4, #0]
 800a894:	f8cd 9004 	str.w	r9, [sp, #4]
 800a898:	e7a8      	b.n	800a7ec <_scanf_float+0x188>
 800a89a:	6822      	ldr	r2, [r4, #0]
 800a89c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a8a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a8a4:	d006      	beq.n	800a8b4 <_scanf_float+0x250>
 800a8a6:	0550      	lsls	r0, r2, #21
 800a8a8:	f57f af0c 	bpl.w	800a6c4 <_scanf_float+0x60>
 800a8ac:	f1b9 0f00 	cmp.w	r9, #0
 800a8b0:	f43f af0f 	beq.w	800a6d2 <_scanf_float+0x6e>
 800a8b4:	0591      	lsls	r1, r2, #22
 800a8b6:	bf58      	it	pl
 800a8b8:	9901      	ldrpl	r1, [sp, #4]
 800a8ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8be:	bf58      	it	pl
 800a8c0:	eba9 0101 	subpl.w	r1, r9, r1
 800a8c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a8c8:	bf58      	it	pl
 800a8ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a8ce:	6022      	str	r2, [r4, #0]
 800a8d0:	f04f 0900 	mov.w	r9, #0
 800a8d4:	e78a      	b.n	800a7ec <_scanf_float+0x188>
 800a8d6:	f04f 0a03 	mov.w	sl, #3
 800a8da:	e787      	b.n	800a7ec <_scanf_float+0x188>
 800a8dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4798      	blx	r3
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f43f aedf 	beq.w	800a6aa <_scanf_float+0x46>
 800a8ec:	e6ea      	b.n	800a6c4 <_scanf_float+0x60>
 800a8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8f6:	463a      	mov	r2, r7
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4798      	blx	r3
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	e6ec      	b.n	800a6de <_scanf_float+0x7a>
 800a904:	1e6b      	subs	r3, r5, #1
 800a906:	2b06      	cmp	r3, #6
 800a908:	d825      	bhi.n	800a956 <_scanf_float+0x2f2>
 800a90a:	2d02      	cmp	r5, #2
 800a90c:	d836      	bhi.n	800a97c <_scanf_float+0x318>
 800a90e:	455e      	cmp	r6, fp
 800a910:	f67f aee8 	bls.w	800a6e4 <_scanf_float+0x80>
 800a914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a918:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a91c:	463a      	mov	r2, r7
 800a91e:	4640      	mov	r0, r8
 800a920:	4798      	blx	r3
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	3b01      	subs	r3, #1
 800a926:	6123      	str	r3, [r4, #16]
 800a928:	e7f1      	b.n	800a90e <_scanf_float+0x2aa>
 800a92a:	9802      	ldr	r0, [sp, #8]
 800a92c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a930:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a934:	9002      	str	r0, [sp, #8]
 800a936:	463a      	mov	r2, r7
 800a938:	4640      	mov	r0, r8
 800a93a:	4798      	blx	r3
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	3b01      	subs	r3, #1
 800a940:	6123      	str	r3, [r4, #16]
 800a942:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a946:	fa5f fa8a 	uxtb.w	sl, sl
 800a94a:	f1ba 0f02 	cmp.w	sl, #2
 800a94e:	d1ec      	bne.n	800a92a <_scanf_float+0x2c6>
 800a950:	3d03      	subs	r5, #3
 800a952:	b2ed      	uxtb	r5, r5
 800a954:	1b76      	subs	r6, r6, r5
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	05da      	lsls	r2, r3, #23
 800a95a:	d52f      	bpl.n	800a9bc <_scanf_float+0x358>
 800a95c:	055b      	lsls	r3, r3, #21
 800a95e:	d510      	bpl.n	800a982 <_scanf_float+0x31e>
 800a960:	455e      	cmp	r6, fp
 800a962:	f67f aebf 	bls.w	800a6e4 <_scanf_float+0x80>
 800a966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a96a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a96e:	463a      	mov	r2, r7
 800a970:	4640      	mov	r0, r8
 800a972:	4798      	blx	r3
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	3b01      	subs	r3, #1
 800a978:	6123      	str	r3, [r4, #16]
 800a97a:	e7f1      	b.n	800a960 <_scanf_float+0x2fc>
 800a97c:	46aa      	mov	sl, r5
 800a97e:	9602      	str	r6, [sp, #8]
 800a980:	e7df      	b.n	800a942 <_scanf_float+0x2de>
 800a982:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	2965      	cmp	r1, #101	; 0x65
 800a98a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a98e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a992:	6123      	str	r3, [r4, #16]
 800a994:	d00c      	beq.n	800a9b0 <_scanf_float+0x34c>
 800a996:	2945      	cmp	r1, #69	; 0x45
 800a998:	d00a      	beq.n	800a9b0 <_scanf_float+0x34c>
 800a99a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a99e:	463a      	mov	r2, r7
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	4798      	blx	r3
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	1eb5      	subs	r5, r6, #2
 800a9ae:	6123      	str	r3, [r4, #16]
 800a9b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9b4:	463a      	mov	r2, r7
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4798      	blx	r3
 800a9ba:	462e      	mov	r6, r5
 800a9bc:	6825      	ldr	r5, [r4, #0]
 800a9be:	f015 0510 	ands.w	r5, r5, #16
 800a9c2:	d159      	bne.n	800aa78 <_scanf_float+0x414>
 800a9c4:	7035      	strb	r5, [r6, #0]
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a9cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d0:	d11b      	bne.n	800aa0a <_scanf_float+0x3a6>
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	454b      	cmp	r3, r9
 800a9d6:	eba3 0209 	sub.w	r2, r3, r9
 800a9da:	d123      	bne.n	800aa24 <_scanf_float+0x3c0>
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4659      	mov	r1, fp
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	f000 ffc3 	bl	800b96c <_strtod_r>
 800a9e6:	6822      	ldr	r2, [r4, #0]
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	f012 0f02 	tst.w	r2, #2
 800a9ee:	ec57 6b10 	vmov	r6, r7, d0
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	d021      	beq.n	800aa3a <_scanf_float+0x3d6>
 800a9f6:	9903      	ldr	r1, [sp, #12]
 800a9f8:	1d1a      	adds	r2, r3, #4
 800a9fa:	600a      	str	r2, [r1, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	e9c3 6700 	strd	r6, r7, [r3]
 800aa02:	68e3      	ldr	r3, [r4, #12]
 800aa04:	3301      	adds	r3, #1
 800aa06:	60e3      	str	r3, [r4, #12]
 800aa08:	e66d      	b.n	800a6e6 <_scanf_float+0x82>
 800aa0a:	9b04      	ldr	r3, [sp, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0e5      	beq.n	800a9dc <_scanf_float+0x378>
 800aa10:	9905      	ldr	r1, [sp, #20]
 800aa12:	230a      	movs	r3, #10
 800aa14:	462a      	mov	r2, r5
 800aa16:	3101      	adds	r1, #1
 800aa18:	4640      	mov	r0, r8
 800aa1a:	f001 f82f 	bl	800ba7c <_strtol_r>
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	9e05      	ldr	r6, [sp, #20]
 800aa22:	1ac2      	subs	r2, r0, r3
 800aa24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aa28:	429e      	cmp	r6, r3
 800aa2a:	bf28      	it	cs
 800aa2c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aa30:	4912      	ldr	r1, [pc, #72]	; (800aa7c <_scanf_float+0x418>)
 800aa32:	4630      	mov	r0, r6
 800aa34:	f000 f912 	bl	800ac5c <siprintf>
 800aa38:	e7d0      	b.n	800a9dc <_scanf_float+0x378>
 800aa3a:	9903      	ldr	r1, [sp, #12]
 800aa3c:	f012 0f04 	tst.w	r2, #4
 800aa40:	f103 0204 	add.w	r2, r3, #4
 800aa44:	600a      	str	r2, [r1, #0]
 800aa46:	d1d9      	bne.n	800a9fc <_scanf_float+0x398>
 800aa48:	f8d3 8000 	ldr.w	r8, [r3]
 800aa4c:	ee10 2a10 	vmov	r2, s0
 800aa50:	ee10 0a10 	vmov	r0, s0
 800aa54:	463b      	mov	r3, r7
 800aa56:	4639      	mov	r1, r7
 800aa58:	f7f6 f878 	bl	8000b4c <__aeabi_dcmpun>
 800aa5c:	b128      	cbz	r0, 800aa6a <_scanf_float+0x406>
 800aa5e:	4808      	ldr	r0, [pc, #32]	; (800aa80 <_scanf_float+0x41c>)
 800aa60:	f000 f8f6 	bl	800ac50 <nanf>
 800aa64:	ed88 0a00 	vstr	s0, [r8]
 800aa68:	e7cb      	b.n	800aa02 <_scanf_float+0x39e>
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	f7f6 f8cb 	bl	8000c08 <__aeabi_d2f>
 800aa72:	f8c8 0000 	str.w	r0, [r8]
 800aa76:	e7c4      	b.n	800aa02 <_scanf_float+0x39e>
 800aa78:	2500      	movs	r5, #0
 800aa7a:	e634      	b.n	800a6e6 <_scanf_float+0x82>
 800aa7c:	080111ad 	.word	0x080111ad
 800aa80:	08010fff 	.word	0x08010fff

0800aa84 <iprintf>:
 800aa84:	b40f      	push	{r0, r1, r2, r3}
 800aa86:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <iprintf+0x2c>)
 800aa88:	b513      	push	{r0, r1, r4, lr}
 800aa8a:	681c      	ldr	r4, [r3, #0]
 800aa8c:	b124      	cbz	r4, 800aa98 <iprintf+0x14>
 800aa8e:	69a3      	ldr	r3, [r4, #24]
 800aa90:	b913      	cbnz	r3, 800aa98 <iprintf+0x14>
 800aa92:	4620      	mov	r0, r4
 800aa94:	f7fe fd5c 	bl	8009550 <__sinit>
 800aa98:	ab05      	add	r3, sp, #20
 800aa9a:	9a04      	ldr	r2, [sp, #16]
 800aa9c:	68a1      	ldr	r1, [r4, #8]
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f7ff f83b 	bl	8009b1c <_vfiprintf_r>
 800aaa6:	b002      	add	sp, #8
 800aaa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaac:	b004      	add	sp, #16
 800aaae:	4770      	bx	lr
 800aab0:	20000080 	.word	0x20000080

0800aab4 <_putc_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	460d      	mov	r5, r1
 800aab8:	4614      	mov	r4, r2
 800aaba:	4606      	mov	r6, r0
 800aabc:	b118      	cbz	r0, 800aac6 <_putc_r+0x12>
 800aabe:	6983      	ldr	r3, [r0, #24]
 800aac0:	b90b      	cbnz	r3, 800aac6 <_putc_r+0x12>
 800aac2:	f7fe fd45 	bl	8009550 <__sinit>
 800aac6:	4b1c      	ldr	r3, [pc, #112]	; (800ab38 <_putc_r+0x84>)
 800aac8:	429c      	cmp	r4, r3
 800aaca:	d124      	bne.n	800ab16 <_putc_r+0x62>
 800aacc:	6874      	ldr	r4, [r6, #4]
 800aace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aad0:	07d8      	lsls	r0, r3, #31
 800aad2:	d405      	bmi.n	800aae0 <_putc_r+0x2c>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	0599      	lsls	r1, r3, #22
 800aad8:	d402      	bmi.n	800aae0 <_putc_r+0x2c>
 800aada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aadc:	f7fe febb 	bl	8009856 <__retarget_lock_acquire_recursive>
 800aae0:	68a3      	ldr	r3, [r4, #8]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	60a3      	str	r3, [r4, #8]
 800aae8:	da05      	bge.n	800aaf6 <_putc_r+0x42>
 800aaea:	69a2      	ldr	r2, [r4, #24]
 800aaec:	4293      	cmp	r3, r2
 800aaee:	db1c      	blt.n	800ab2a <_putc_r+0x76>
 800aaf0:	b2eb      	uxtb	r3, r5
 800aaf2:	2b0a      	cmp	r3, #10
 800aaf4:	d019      	beq.n	800ab2a <_putc_r+0x76>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	6022      	str	r2, [r4, #0]
 800aafc:	701d      	strb	r5, [r3, #0]
 800aafe:	b2ed      	uxtb	r5, r5
 800ab00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab02:	07da      	lsls	r2, r3, #31
 800ab04:	d405      	bmi.n	800ab12 <_putc_r+0x5e>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	059b      	lsls	r3, r3, #22
 800ab0a:	d402      	bmi.n	800ab12 <_putc_r+0x5e>
 800ab0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab0e:	f7fe fea3 	bl	8009858 <__retarget_lock_release_recursive>
 800ab12:	4628      	mov	r0, r5
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
 800ab16:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <_putc_r+0x88>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	d101      	bne.n	800ab20 <_putc_r+0x6c>
 800ab1c:	68b4      	ldr	r4, [r6, #8]
 800ab1e:	e7d6      	b.n	800aace <_putc_r+0x1a>
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <_putc_r+0x8c>)
 800ab22:	429c      	cmp	r4, r3
 800ab24:	bf08      	it	eq
 800ab26:	68f4      	ldreq	r4, [r6, #12]
 800ab28:	e7d1      	b.n	800aace <_putc_r+0x1a>
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f000 ffa6 	bl	800ba80 <__swbuf_r>
 800ab34:	4605      	mov	r5, r0
 800ab36:	e7e3      	b.n	800ab00 <_putc_r+0x4c>
 800ab38:	08011124 	.word	0x08011124
 800ab3c:	08011144 	.word	0x08011144
 800ab40:	08011104 	.word	0x08011104

0800ab44 <_puts_r>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	460e      	mov	r6, r1
 800ab48:	4605      	mov	r5, r0
 800ab4a:	b118      	cbz	r0, 800ab54 <_puts_r+0x10>
 800ab4c:	6983      	ldr	r3, [r0, #24]
 800ab4e:	b90b      	cbnz	r3, 800ab54 <_puts_r+0x10>
 800ab50:	f7fe fcfe 	bl	8009550 <__sinit>
 800ab54:	69ab      	ldr	r3, [r5, #24]
 800ab56:	68ac      	ldr	r4, [r5, #8]
 800ab58:	b913      	cbnz	r3, 800ab60 <_puts_r+0x1c>
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f7fe fcf8 	bl	8009550 <__sinit>
 800ab60:	4b2c      	ldr	r3, [pc, #176]	; (800ac14 <_puts_r+0xd0>)
 800ab62:	429c      	cmp	r4, r3
 800ab64:	d120      	bne.n	800aba8 <_puts_r+0x64>
 800ab66:	686c      	ldr	r4, [r5, #4]
 800ab68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab6a:	07db      	lsls	r3, r3, #31
 800ab6c:	d405      	bmi.n	800ab7a <_puts_r+0x36>
 800ab6e:	89a3      	ldrh	r3, [r4, #12]
 800ab70:	0598      	lsls	r0, r3, #22
 800ab72:	d402      	bmi.n	800ab7a <_puts_r+0x36>
 800ab74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab76:	f7fe fe6e 	bl	8009856 <__retarget_lock_acquire_recursive>
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	0719      	lsls	r1, r3, #28
 800ab7e:	d51d      	bpl.n	800abbc <_puts_r+0x78>
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	b1db      	cbz	r3, 800abbc <_puts_r+0x78>
 800ab84:	3e01      	subs	r6, #1
 800ab86:	68a3      	ldr	r3, [r4, #8]
 800ab88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	60a3      	str	r3, [r4, #8]
 800ab90:	bb39      	cbnz	r1, 800abe2 <_puts_r+0x9e>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	da38      	bge.n	800ac08 <_puts_r+0xc4>
 800ab96:	4622      	mov	r2, r4
 800ab98:	210a      	movs	r1, #10
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 ff70 	bl	800ba80 <__swbuf_r>
 800aba0:	3001      	adds	r0, #1
 800aba2:	d011      	beq.n	800abc8 <_puts_r+0x84>
 800aba4:	250a      	movs	r5, #10
 800aba6:	e011      	b.n	800abcc <_puts_r+0x88>
 800aba8:	4b1b      	ldr	r3, [pc, #108]	; (800ac18 <_puts_r+0xd4>)
 800abaa:	429c      	cmp	r4, r3
 800abac:	d101      	bne.n	800abb2 <_puts_r+0x6e>
 800abae:	68ac      	ldr	r4, [r5, #8]
 800abb0:	e7da      	b.n	800ab68 <_puts_r+0x24>
 800abb2:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <_puts_r+0xd8>)
 800abb4:	429c      	cmp	r4, r3
 800abb6:	bf08      	it	eq
 800abb8:	68ec      	ldreq	r4, [r5, #12]
 800abba:	e7d5      	b.n	800ab68 <_puts_r+0x24>
 800abbc:	4621      	mov	r1, r4
 800abbe:	4628      	mov	r0, r5
 800abc0:	f000 ffc2 	bl	800bb48 <__swsetup_r>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d0dd      	beq.n	800ab84 <_puts_r+0x40>
 800abc8:	f04f 35ff 	mov.w	r5, #4294967295
 800abcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abce:	07da      	lsls	r2, r3, #31
 800abd0:	d405      	bmi.n	800abde <_puts_r+0x9a>
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	059b      	lsls	r3, r3, #22
 800abd6:	d402      	bmi.n	800abde <_puts_r+0x9a>
 800abd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abda:	f7fe fe3d 	bl	8009858 <__retarget_lock_release_recursive>
 800abde:	4628      	mov	r0, r5
 800abe0:	bd70      	pop	{r4, r5, r6, pc}
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	da04      	bge.n	800abf0 <_puts_r+0xac>
 800abe6:	69a2      	ldr	r2, [r4, #24]
 800abe8:	429a      	cmp	r2, r3
 800abea:	dc06      	bgt.n	800abfa <_puts_r+0xb6>
 800abec:	290a      	cmp	r1, #10
 800abee:	d004      	beq.n	800abfa <_puts_r+0xb6>
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	1c5a      	adds	r2, r3, #1
 800abf4:	6022      	str	r2, [r4, #0]
 800abf6:	7019      	strb	r1, [r3, #0]
 800abf8:	e7c5      	b.n	800ab86 <_puts_r+0x42>
 800abfa:	4622      	mov	r2, r4
 800abfc:	4628      	mov	r0, r5
 800abfe:	f000 ff3f 	bl	800ba80 <__swbuf_r>
 800ac02:	3001      	adds	r0, #1
 800ac04:	d1bf      	bne.n	800ab86 <_puts_r+0x42>
 800ac06:	e7df      	b.n	800abc8 <_puts_r+0x84>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	250a      	movs	r5, #10
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	6022      	str	r2, [r4, #0]
 800ac10:	701d      	strb	r5, [r3, #0]
 800ac12:	e7db      	b.n	800abcc <_puts_r+0x88>
 800ac14:	08011124 	.word	0x08011124
 800ac18:	08011144 	.word	0x08011144
 800ac1c:	08011104 	.word	0x08011104

0800ac20 <puts>:
 800ac20:	4b02      	ldr	r3, [pc, #8]	; (800ac2c <puts+0xc>)
 800ac22:	4601      	mov	r1, r0
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	f7ff bf8d 	b.w	800ab44 <_puts_r>
 800ac2a:	bf00      	nop
 800ac2c:	20000080 	.word	0x20000080

0800ac30 <_sbrk_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d06      	ldr	r5, [pc, #24]	; (800ac4c <_sbrk_r+0x1c>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	f7f6 fbbc 	bl	80013b8 <_sbrk>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d102      	bne.n	800ac4a <_sbrk_r+0x1a>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	b103      	cbz	r3, 800ac4a <_sbrk_r+0x1a>
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	bd38      	pop	{r3, r4, r5, pc}
 800ac4c:	20001b18 	.word	0x20001b18

0800ac50 <nanf>:
 800ac50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac58 <nanf+0x8>
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	7fc00000 	.word	0x7fc00000

0800ac5c <siprintf>:
 800ac5c:	b40e      	push	{r1, r2, r3}
 800ac5e:	b500      	push	{lr}
 800ac60:	b09c      	sub	sp, #112	; 0x70
 800ac62:	ab1d      	add	r3, sp, #116	; 0x74
 800ac64:	9002      	str	r0, [sp, #8]
 800ac66:	9006      	str	r0, [sp, #24]
 800ac68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac6c:	4809      	ldr	r0, [pc, #36]	; (800ac94 <siprintf+0x38>)
 800ac6e:	9107      	str	r1, [sp, #28]
 800ac70:	9104      	str	r1, [sp, #16]
 800ac72:	4909      	ldr	r1, [pc, #36]	; (800ac98 <siprintf+0x3c>)
 800ac74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac78:	9105      	str	r1, [sp, #20]
 800ac7a:	6800      	ldr	r0, [r0, #0]
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	a902      	add	r1, sp, #8
 800ac80:	f002 ffba 	bl	800dbf8 <_svfiprintf_r>
 800ac84:	9b02      	ldr	r3, [sp, #8]
 800ac86:	2200      	movs	r2, #0
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	b01c      	add	sp, #112	; 0x70
 800ac8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac90:	b003      	add	sp, #12
 800ac92:	4770      	bx	lr
 800ac94:	20000080 	.word	0x20000080
 800ac98:	ffff0208 	.word	0xffff0208

0800ac9c <__sread>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	460c      	mov	r4, r1
 800aca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca4:	f003 f8a8 	bl	800ddf8 <_read_r>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	bfab      	itete	ge
 800acac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acae:	89a3      	ldrhlt	r3, [r4, #12]
 800acb0:	181b      	addge	r3, r3, r0
 800acb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acb6:	bfac      	ite	ge
 800acb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acba:	81a3      	strhlt	r3, [r4, #12]
 800acbc:	bd10      	pop	{r4, pc}

0800acbe <__swrite>:
 800acbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc2:	461f      	mov	r7, r3
 800acc4:	898b      	ldrh	r3, [r1, #12]
 800acc6:	05db      	lsls	r3, r3, #23
 800acc8:	4605      	mov	r5, r0
 800acca:	460c      	mov	r4, r1
 800accc:	4616      	mov	r6, r2
 800acce:	d505      	bpl.n	800acdc <__swrite+0x1e>
 800acd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd4:	2302      	movs	r3, #2
 800acd6:	2200      	movs	r2, #0
 800acd8:	f002 f9ac 	bl	800d034 <_lseek_r>
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ace6:	81a3      	strh	r3, [r4, #12]
 800ace8:	4632      	mov	r2, r6
 800acea:	463b      	mov	r3, r7
 800acec:	4628      	mov	r0, r5
 800acee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf2:	f000 bf17 	b.w	800bb24 <_write_r>

0800acf6 <__sseek>:
 800acf6:	b510      	push	{r4, lr}
 800acf8:	460c      	mov	r4, r1
 800acfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfe:	f002 f999 	bl	800d034 <_lseek_r>
 800ad02:	1c43      	adds	r3, r0, #1
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	bf15      	itete	ne
 800ad08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad12:	81a3      	strheq	r3, [r4, #12]
 800ad14:	bf18      	it	ne
 800ad16:	81a3      	strhne	r3, [r4, #12]
 800ad18:	bd10      	pop	{r4, pc}

0800ad1a <__sclose>:
 800ad1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1e:	f000 bf89 	b.w	800bc34 <_close_r>

0800ad22 <sulp>:
 800ad22:	b570      	push	{r4, r5, r6, lr}
 800ad24:	4604      	mov	r4, r0
 800ad26:	460d      	mov	r5, r1
 800ad28:	ec45 4b10 	vmov	d0, r4, r5
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	f002 fd89 	bl	800d844 <__ulp>
 800ad32:	ec51 0b10 	vmov	r0, r1, d0
 800ad36:	b17e      	cbz	r6, 800ad58 <sulp+0x36>
 800ad38:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dd09      	ble.n	800ad58 <sulp+0x36>
 800ad44:	051b      	lsls	r3, r3, #20
 800ad46:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad4a:	2400      	movs	r4, #0
 800ad4c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad50:	4622      	mov	r2, r4
 800ad52:	462b      	mov	r3, r5
 800ad54:	f7f5 fc60 	bl	8000618 <__aeabi_dmul>
 800ad58:	bd70      	pop	{r4, r5, r6, pc}
 800ad5a:	0000      	movs	r0, r0
 800ad5c:	0000      	movs	r0, r0
	...

0800ad60 <_strtod_l>:
 800ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	ed2d 8b02 	vpush	{d8}
 800ad68:	b09d      	sub	sp, #116	; 0x74
 800ad6a:	461f      	mov	r7, r3
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	9318      	str	r3, [sp, #96]	; 0x60
 800ad70:	4ba2      	ldr	r3, [pc, #648]	; (800affc <_strtod_l+0x29c>)
 800ad72:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	9305      	str	r3, [sp, #20]
 800ad78:	4604      	mov	r4, r0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	4688      	mov	r8, r1
 800ad7e:	f7f5 fa31 	bl	80001e4 <strlen>
 800ad82:	f04f 0a00 	mov.w	sl, #0
 800ad86:	4605      	mov	r5, r0
 800ad88:	f04f 0b00 	mov.w	fp, #0
 800ad8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	2a2b      	cmp	r2, #43	; 0x2b
 800ad96:	d04e      	beq.n	800ae36 <_strtod_l+0xd6>
 800ad98:	d83b      	bhi.n	800ae12 <_strtod_l+0xb2>
 800ad9a:	2a0d      	cmp	r2, #13
 800ad9c:	d834      	bhi.n	800ae08 <_strtod_l+0xa8>
 800ad9e:	2a08      	cmp	r2, #8
 800ada0:	d834      	bhi.n	800ae0c <_strtod_l+0xac>
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d03e      	beq.n	800ae24 <_strtod_l+0xc4>
 800ada6:	2300      	movs	r3, #0
 800ada8:	930a      	str	r3, [sp, #40]	; 0x28
 800adaa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800adac:	7833      	ldrb	r3, [r6, #0]
 800adae:	2b30      	cmp	r3, #48	; 0x30
 800adb0:	f040 80b0 	bne.w	800af14 <_strtod_l+0x1b4>
 800adb4:	7873      	ldrb	r3, [r6, #1]
 800adb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800adba:	2b58      	cmp	r3, #88	; 0x58
 800adbc:	d168      	bne.n	800ae90 <_strtod_l+0x130>
 800adbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	ab18      	add	r3, sp, #96	; 0x60
 800adc4:	9702      	str	r7, [sp, #8]
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	4a8d      	ldr	r2, [pc, #564]	; (800b000 <_strtod_l+0x2a0>)
 800adca:	ab19      	add	r3, sp, #100	; 0x64
 800adcc:	a917      	add	r1, sp, #92	; 0x5c
 800adce:	4620      	mov	r0, r4
 800add0:	f001 fe24 	bl	800ca1c <__gethex>
 800add4:	f010 0707 	ands.w	r7, r0, #7
 800add8:	4605      	mov	r5, r0
 800adda:	d005      	beq.n	800ade8 <_strtod_l+0x88>
 800addc:	2f06      	cmp	r7, #6
 800adde:	d12c      	bne.n	800ae3a <_strtod_l+0xda>
 800ade0:	3601      	adds	r6, #1
 800ade2:	2300      	movs	r3, #0
 800ade4:	9617      	str	r6, [sp, #92]	; 0x5c
 800ade6:	930a      	str	r3, [sp, #40]	; 0x28
 800ade8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 8590 	bne.w	800b910 <_strtod_l+0xbb0>
 800adf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf2:	b1eb      	cbz	r3, 800ae30 <_strtod_l+0xd0>
 800adf4:	4652      	mov	r2, sl
 800adf6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800adfa:	ec43 2b10 	vmov	d0, r2, r3
 800adfe:	b01d      	add	sp, #116	; 0x74
 800ae00:	ecbd 8b02 	vpop	{d8}
 800ae04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae08:	2a20      	cmp	r2, #32
 800ae0a:	d1cc      	bne.n	800ada6 <_strtod_l+0x46>
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae10:	e7be      	b.n	800ad90 <_strtod_l+0x30>
 800ae12:	2a2d      	cmp	r2, #45	; 0x2d
 800ae14:	d1c7      	bne.n	800ada6 <_strtod_l+0x46>
 800ae16:	2201      	movs	r2, #1
 800ae18:	920a      	str	r2, [sp, #40]	; 0x28
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae1e:	785b      	ldrb	r3, [r3, #1]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1c2      	bne.n	800adaa <_strtod_l+0x4a>
 800ae24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f040 856e 	bne.w	800b90c <_strtod_l+0xbac>
 800ae30:	4652      	mov	r2, sl
 800ae32:	465b      	mov	r3, fp
 800ae34:	e7e1      	b.n	800adfa <_strtod_l+0x9a>
 800ae36:	2200      	movs	r2, #0
 800ae38:	e7ee      	b.n	800ae18 <_strtod_l+0xb8>
 800ae3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae3c:	b13a      	cbz	r2, 800ae4e <_strtod_l+0xee>
 800ae3e:	2135      	movs	r1, #53	; 0x35
 800ae40:	a81a      	add	r0, sp, #104	; 0x68
 800ae42:	f002 fe0a 	bl	800da5a <__copybits>
 800ae46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f002 f9c9 	bl	800d1e0 <_Bfree>
 800ae4e:	3f01      	subs	r7, #1
 800ae50:	2f04      	cmp	r7, #4
 800ae52:	d806      	bhi.n	800ae62 <_strtod_l+0x102>
 800ae54:	e8df f007 	tbb	[pc, r7]
 800ae58:	1714030a 	.word	0x1714030a
 800ae5c:	0a          	.byte	0x0a
 800ae5d:	00          	.byte	0x00
 800ae5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ae62:	0728      	lsls	r0, r5, #28
 800ae64:	d5c0      	bpl.n	800ade8 <_strtod_l+0x88>
 800ae66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ae6a:	e7bd      	b.n	800ade8 <_strtod_l+0x88>
 800ae6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ae70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae7e:	e7f0      	b.n	800ae62 <_strtod_l+0x102>
 800ae80:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b004 <_strtod_l+0x2a4>
 800ae84:	e7ed      	b.n	800ae62 <_strtod_l+0x102>
 800ae86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ae8a:	f04f 3aff 	mov.w	sl, #4294967295
 800ae8e:	e7e8      	b.n	800ae62 <_strtod_l+0x102>
 800ae90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae96:	785b      	ldrb	r3, [r3, #1]
 800ae98:	2b30      	cmp	r3, #48	; 0x30
 800ae9a:	d0f9      	beq.n	800ae90 <_strtod_l+0x130>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d0a3      	beq.n	800ade8 <_strtod_l+0x88>
 800aea0:	2301      	movs	r3, #1
 800aea2:	f04f 0900 	mov.w	r9, #0
 800aea6:	9304      	str	r3, [sp, #16]
 800aea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aeaa:	9308      	str	r3, [sp, #32]
 800aeac:	f8cd 901c 	str.w	r9, [sp, #28]
 800aeb0:	464f      	mov	r7, r9
 800aeb2:	220a      	movs	r2, #10
 800aeb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aeb6:	7806      	ldrb	r6, [r0, #0]
 800aeb8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aebc:	b2d9      	uxtb	r1, r3
 800aebe:	2909      	cmp	r1, #9
 800aec0:	d92a      	bls.n	800af18 <_strtod_l+0x1b8>
 800aec2:	9905      	ldr	r1, [sp, #20]
 800aec4:	462a      	mov	r2, r5
 800aec6:	f002 fff7 	bl	800deb8 <strncmp>
 800aeca:	b398      	cbz	r0, 800af34 <_strtod_l+0x1d4>
 800aecc:	2000      	movs	r0, #0
 800aece:	4632      	mov	r2, r6
 800aed0:	463d      	mov	r5, r7
 800aed2:	9005      	str	r0, [sp, #20]
 800aed4:	4603      	mov	r3, r0
 800aed6:	2a65      	cmp	r2, #101	; 0x65
 800aed8:	d001      	beq.n	800aede <_strtod_l+0x17e>
 800aeda:	2a45      	cmp	r2, #69	; 0x45
 800aedc:	d118      	bne.n	800af10 <_strtod_l+0x1b0>
 800aede:	b91d      	cbnz	r5, 800aee8 <_strtod_l+0x188>
 800aee0:	9a04      	ldr	r2, [sp, #16]
 800aee2:	4302      	orrs	r2, r0
 800aee4:	d09e      	beq.n	800ae24 <_strtod_l+0xc4>
 800aee6:	2500      	movs	r5, #0
 800aee8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aeec:	f108 0201 	add.w	r2, r8, #1
 800aef0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aef2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aef6:	2a2b      	cmp	r2, #43	; 0x2b
 800aef8:	d075      	beq.n	800afe6 <_strtod_l+0x286>
 800aefa:	2a2d      	cmp	r2, #45	; 0x2d
 800aefc:	d07b      	beq.n	800aff6 <_strtod_l+0x296>
 800aefe:	f04f 0c00 	mov.w	ip, #0
 800af02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800af06:	2909      	cmp	r1, #9
 800af08:	f240 8082 	bls.w	800b010 <_strtod_l+0x2b0>
 800af0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af10:	2600      	movs	r6, #0
 800af12:	e09d      	b.n	800b050 <_strtod_l+0x2f0>
 800af14:	2300      	movs	r3, #0
 800af16:	e7c4      	b.n	800aea2 <_strtod_l+0x142>
 800af18:	2f08      	cmp	r7, #8
 800af1a:	bfd8      	it	le
 800af1c:	9907      	ldrle	r1, [sp, #28]
 800af1e:	f100 0001 	add.w	r0, r0, #1
 800af22:	bfda      	itte	le
 800af24:	fb02 3301 	mlale	r3, r2, r1, r3
 800af28:	9307      	strle	r3, [sp, #28]
 800af2a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800af2e:	3701      	adds	r7, #1
 800af30:	9017      	str	r0, [sp, #92]	; 0x5c
 800af32:	e7bf      	b.n	800aeb4 <_strtod_l+0x154>
 800af34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af36:	195a      	adds	r2, r3, r5
 800af38:	9217      	str	r2, [sp, #92]	; 0x5c
 800af3a:	5d5a      	ldrb	r2, [r3, r5]
 800af3c:	2f00      	cmp	r7, #0
 800af3e:	d037      	beq.n	800afb0 <_strtod_l+0x250>
 800af40:	9005      	str	r0, [sp, #20]
 800af42:	463d      	mov	r5, r7
 800af44:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800af48:	2b09      	cmp	r3, #9
 800af4a:	d912      	bls.n	800af72 <_strtod_l+0x212>
 800af4c:	2301      	movs	r3, #1
 800af4e:	e7c2      	b.n	800aed6 <_strtod_l+0x176>
 800af50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	9217      	str	r2, [sp, #92]	; 0x5c
 800af56:	785a      	ldrb	r2, [r3, #1]
 800af58:	3001      	adds	r0, #1
 800af5a:	2a30      	cmp	r2, #48	; 0x30
 800af5c:	d0f8      	beq.n	800af50 <_strtod_l+0x1f0>
 800af5e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af62:	2b08      	cmp	r3, #8
 800af64:	f200 84d9 	bhi.w	800b91a <_strtod_l+0xbba>
 800af68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af6a:	9005      	str	r0, [sp, #20]
 800af6c:	2000      	movs	r0, #0
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	4605      	mov	r5, r0
 800af72:	3a30      	subs	r2, #48	; 0x30
 800af74:	f100 0301 	add.w	r3, r0, #1
 800af78:	d014      	beq.n	800afa4 <_strtod_l+0x244>
 800af7a:	9905      	ldr	r1, [sp, #20]
 800af7c:	4419      	add	r1, r3
 800af7e:	9105      	str	r1, [sp, #20]
 800af80:	462b      	mov	r3, r5
 800af82:	eb00 0e05 	add.w	lr, r0, r5
 800af86:	210a      	movs	r1, #10
 800af88:	4573      	cmp	r3, lr
 800af8a:	d113      	bne.n	800afb4 <_strtod_l+0x254>
 800af8c:	182b      	adds	r3, r5, r0
 800af8e:	2b08      	cmp	r3, #8
 800af90:	f105 0501 	add.w	r5, r5, #1
 800af94:	4405      	add	r5, r0
 800af96:	dc1c      	bgt.n	800afd2 <_strtod_l+0x272>
 800af98:	9907      	ldr	r1, [sp, #28]
 800af9a:	230a      	movs	r3, #10
 800af9c:	fb03 2301 	mla	r3, r3, r1, r2
 800afa0:	9307      	str	r3, [sp, #28]
 800afa2:	2300      	movs	r3, #0
 800afa4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afa6:	1c51      	adds	r1, r2, #1
 800afa8:	9117      	str	r1, [sp, #92]	; 0x5c
 800afaa:	7852      	ldrb	r2, [r2, #1]
 800afac:	4618      	mov	r0, r3
 800afae:	e7c9      	b.n	800af44 <_strtod_l+0x1e4>
 800afb0:	4638      	mov	r0, r7
 800afb2:	e7d2      	b.n	800af5a <_strtod_l+0x1fa>
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	dc04      	bgt.n	800afc2 <_strtod_l+0x262>
 800afb8:	9e07      	ldr	r6, [sp, #28]
 800afba:	434e      	muls	r6, r1
 800afbc:	9607      	str	r6, [sp, #28]
 800afbe:	3301      	adds	r3, #1
 800afc0:	e7e2      	b.n	800af88 <_strtod_l+0x228>
 800afc2:	f103 0c01 	add.w	ip, r3, #1
 800afc6:	f1bc 0f10 	cmp.w	ip, #16
 800afca:	bfd8      	it	le
 800afcc:	fb01 f909 	mulle.w	r9, r1, r9
 800afd0:	e7f5      	b.n	800afbe <_strtod_l+0x25e>
 800afd2:	2d10      	cmp	r5, #16
 800afd4:	bfdc      	itt	le
 800afd6:	230a      	movle	r3, #10
 800afd8:	fb03 2909 	mlale	r9, r3, r9, r2
 800afdc:	e7e1      	b.n	800afa2 <_strtod_l+0x242>
 800afde:	2300      	movs	r3, #0
 800afe0:	9305      	str	r3, [sp, #20]
 800afe2:	2301      	movs	r3, #1
 800afe4:	e77c      	b.n	800aee0 <_strtod_l+0x180>
 800afe6:	f04f 0c00 	mov.w	ip, #0
 800afea:	f108 0202 	add.w	r2, r8, #2
 800afee:	9217      	str	r2, [sp, #92]	; 0x5c
 800aff0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aff4:	e785      	b.n	800af02 <_strtod_l+0x1a2>
 800aff6:	f04f 0c01 	mov.w	ip, #1
 800affa:	e7f6      	b.n	800afea <_strtod_l+0x28a>
 800affc:	08011300 	.word	0x08011300
 800b000:	080111b4 	.word	0x080111b4
 800b004:	7ff00000 	.word	0x7ff00000
 800b008:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b00a:	1c51      	adds	r1, r2, #1
 800b00c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b00e:	7852      	ldrb	r2, [r2, #1]
 800b010:	2a30      	cmp	r2, #48	; 0x30
 800b012:	d0f9      	beq.n	800b008 <_strtod_l+0x2a8>
 800b014:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b018:	2908      	cmp	r1, #8
 800b01a:	f63f af79 	bhi.w	800af10 <_strtod_l+0x1b0>
 800b01e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b022:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b024:	9206      	str	r2, [sp, #24]
 800b026:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b028:	1c51      	adds	r1, r2, #1
 800b02a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b02c:	7852      	ldrb	r2, [r2, #1]
 800b02e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b032:	2e09      	cmp	r6, #9
 800b034:	d937      	bls.n	800b0a6 <_strtod_l+0x346>
 800b036:	9e06      	ldr	r6, [sp, #24]
 800b038:	1b89      	subs	r1, r1, r6
 800b03a:	2908      	cmp	r1, #8
 800b03c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b040:	dc02      	bgt.n	800b048 <_strtod_l+0x2e8>
 800b042:	4576      	cmp	r6, lr
 800b044:	bfa8      	it	ge
 800b046:	4676      	movge	r6, lr
 800b048:	f1bc 0f00 	cmp.w	ip, #0
 800b04c:	d000      	beq.n	800b050 <_strtod_l+0x2f0>
 800b04e:	4276      	negs	r6, r6
 800b050:	2d00      	cmp	r5, #0
 800b052:	d14d      	bne.n	800b0f0 <_strtod_l+0x390>
 800b054:	9904      	ldr	r1, [sp, #16]
 800b056:	4301      	orrs	r1, r0
 800b058:	f47f aec6 	bne.w	800ade8 <_strtod_l+0x88>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f47f aee1 	bne.w	800ae24 <_strtod_l+0xc4>
 800b062:	2a69      	cmp	r2, #105	; 0x69
 800b064:	d027      	beq.n	800b0b6 <_strtod_l+0x356>
 800b066:	dc24      	bgt.n	800b0b2 <_strtod_l+0x352>
 800b068:	2a49      	cmp	r2, #73	; 0x49
 800b06a:	d024      	beq.n	800b0b6 <_strtod_l+0x356>
 800b06c:	2a4e      	cmp	r2, #78	; 0x4e
 800b06e:	f47f aed9 	bne.w	800ae24 <_strtod_l+0xc4>
 800b072:	499f      	ldr	r1, [pc, #636]	; (800b2f0 <_strtod_l+0x590>)
 800b074:	a817      	add	r0, sp, #92	; 0x5c
 800b076:	f001 ff29 	bl	800cecc <__match>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f43f aed2 	beq.w	800ae24 <_strtod_l+0xc4>
 800b080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b28      	cmp	r3, #40	; 0x28
 800b086:	d12d      	bne.n	800b0e4 <_strtod_l+0x384>
 800b088:	499a      	ldr	r1, [pc, #616]	; (800b2f4 <_strtod_l+0x594>)
 800b08a:	aa1a      	add	r2, sp, #104	; 0x68
 800b08c:	a817      	add	r0, sp, #92	; 0x5c
 800b08e:	f001 ff31 	bl	800cef4 <__hexnan>
 800b092:	2805      	cmp	r0, #5
 800b094:	d126      	bne.n	800b0e4 <_strtod_l+0x384>
 800b096:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b098:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b09c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b0a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b0a4:	e6a0      	b.n	800ade8 <_strtod_l+0x88>
 800b0a6:	210a      	movs	r1, #10
 800b0a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b0ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b0b0:	e7b9      	b.n	800b026 <_strtod_l+0x2c6>
 800b0b2:	2a6e      	cmp	r2, #110	; 0x6e
 800b0b4:	e7db      	b.n	800b06e <_strtod_l+0x30e>
 800b0b6:	4990      	ldr	r1, [pc, #576]	; (800b2f8 <_strtod_l+0x598>)
 800b0b8:	a817      	add	r0, sp, #92	; 0x5c
 800b0ba:	f001 ff07 	bl	800cecc <__match>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f43f aeb0 	beq.w	800ae24 <_strtod_l+0xc4>
 800b0c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0c6:	498d      	ldr	r1, [pc, #564]	; (800b2fc <_strtod_l+0x59c>)
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	a817      	add	r0, sp, #92	; 0x5c
 800b0cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0ce:	f001 fefd 	bl	800cecc <__match>
 800b0d2:	b910      	cbnz	r0, 800b0da <_strtod_l+0x37a>
 800b0d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b30c <_strtod_l+0x5ac>
 800b0de:	f04f 0a00 	mov.w	sl, #0
 800b0e2:	e681      	b.n	800ade8 <_strtod_l+0x88>
 800b0e4:	4886      	ldr	r0, [pc, #536]	; (800b300 <_strtod_l+0x5a0>)
 800b0e6:	f002 fe9b 	bl	800de20 <nan>
 800b0ea:	ec5b ab10 	vmov	sl, fp, d0
 800b0ee:	e67b      	b.n	800ade8 <_strtod_l+0x88>
 800b0f0:	9b05      	ldr	r3, [sp, #20]
 800b0f2:	9807      	ldr	r0, [sp, #28]
 800b0f4:	1af3      	subs	r3, r6, r3
 800b0f6:	2f00      	cmp	r7, #0
 800b0f8:	bf08      	it	eq
 800b0fa:	462f      	moveq	r7, r5
 800b0fc:	2d10      	cmp	r5, #16
 800b0fe:	9306      	str	r3, [sp, #24]
 800b100:	46a8      	mov	r8, r5
 800b102:	bfa8      	it	ge
 800b104:	f04f 0810 	movge.w	r8, #16
 800b108:	f7f5 fa0c 	bl	8000524 <__aeabi_ui2d>
 800b10c:	2d09      	cmp	r5, #9
 800b10e:	4682      	mov	sl, r0
 800b110:	468b      	mov	fp, r1
 800b112:	dd13      	ble.n	800b13c <_strtod_l+0x3dc>
 800b114:	4b7b      	ldr	r3, [pc, #492]	; (800b304 <_strtod_l+0x5a4>)
 800b116:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b11a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b11e:	f7f5 fa7b 	bl	8000618 <__aeabi_dmul>
 800b122:	4682      	mov	sl, r0
 800b124:	4648      	mov	r0, r9
 800b126:	468b      	mov	fp, r1
 800b128:	f7f5 f9fc 	bl	8000524 <__aeabi_ui2d>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4650      	mov	r0, sl
 800b132:	4659      	mov	r1, fp
 800b134:	f7f5 f8ba 	bl	80002ac <__adddf3>
 800b138:	4682      	mov	sl, r0
 800b13a:	468b      	mov	fp, r1
 800b13c:	2d0f      	cmp	r5, #15
 800b13e:	dc38      	bgt.n	800b1b2 <_strtod_l+0x452>
 800b140:	9b06      	ldr	r3, [sp, #24]
 800b142:	2b00      	cmp	r3, #0
 800b144:	f43f ae50 	beq.w	800ade8 <_strtod_l+0x88>
 800b148:	dd24      	ble.n	800b194 <_strtod_l+0x434>
 800b14a:	2b16      	cmp	r3, #22
 800b14c:	dc0b      	bgt.n	800b166 <_strtod_l+0x406>
 800b14e:	496d      	ldr	r1, [pc, #436]	; (800b304 <_strtod_l+0x5a4>)
 800b150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b158:	4652      	mov	r2, sl
 800b15a:	465b      	mov	r3, fp
 800b15c:	f7f5 fa5c 	bl	8000618 <__aeabi_dmul>
 800b160:	4682      	mov	sl, r0
 800b162:	468b      	mov	fp, r1
 800b164:	e640      	b.n	800ade8 <_strtod_l+0x88>
 800b166:	9a06      	ldr	r2, [sp, #24]
 800b168:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b16c:	4293      	cmp	r3, r2
 800b16e:	db20      	blt.n	800b1b2 <_strtod_l+0x452>
 800b170:	4c64      	ldr	r4, [pc, #400]	; (800b304 <_strtod_l+0x5a4>)
 800b172:	f1c5 050f 	rsb	r5, r5, #15
 800b176:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b17a:	4652      	mov	r2, sl
 800b17c:	465b      	mov	r3, fp
 800b17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b182:	f7f5 fa49 	bl	8000618 <__aeabi_dmul>
 800b186:	9b06      	ldr	r3, [sp, #24]
 800b188:	1b5d      	subs	r5, r3, r5
 800b18a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b18e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b192:	e7e3      	b.n	800b15c <_strtod_l+0x3fc>
 800b194:	9b06      	ldr	r3, [sp, #24]
 800b196:	3316      	adds	r3, #22
 800b198:	db0b      	blt.n	800b1b2 <_strtod_l+0x452>
 800b19a:	9b05      	ldr	r3, [sp, #20]
 800b19c:	1b9e      	subs	r6, r3, r6
 800b19e:	4b59      	ldr	r3, [pc, #356]	; (800b304 <_strtod_l+0x5a4>)
 800b1a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b1a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	4659      	mov	r1, fp
 800b1ac:	f7f5 fb5e 	bl	800086c <__aeabi_ddiv>
 800b1b0:	e7d6      	b.n	800b160 <_strtod_l+0x400>
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	eba5 0808 	sub.w	r8, r5, r8
 800b1b8:	4498      	add	r8, r3
 800b1ba:	f1b8 0f00 	cmp.w	r8, #0
 800b1be:	dd74      	ble.n	800b2aa <_strtod_l+0x54a>
 800b1c0:	f018 030f 	ands.w	r3, r8, #15
 800b1c4:	d00a      	beq.n	800b1dc <_strtod_l+0x47c>
 800b1c6:	494f      	ldr	r1, [pc, #316]	; (800b304 <_strtod_l+0x5a4>)
 800b1c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1cc:	4652      	mov	r2, sl
 800b1ce:	465b      	mov	r3, fp
 800b1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1d4:	f7f5 fa20 	bl	8000618 <__aeabi_dmul>
 800b1d8:	4682      	mov	sl, r0
 800b1da:	468b      	mov	fp, r1
 800b1dc:	f038 080f 	bics.w	r8, r8, #15
 800b1e0:	d04f      	beq.n	800b282 <_strtod_l+0x522>
 800b1e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b1e6:	dd22      	ble.n	800b22e <_strtod_l+0x4ce>
 800b1e8:	2500      	movs	r5, #0
 800b1ea:	462e      	mov	r6, r5
 800b1ec:	9507      	str	r5, [sp, #28]
 800b1ee:	9505      	str	r5, [sp, #20]
 800b1f0:	2322      	movs	r3, #34	; 0x22
 800b1f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b30c <_strtod_l+0x5ac>
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	f04f 0a00 	mov.w	sl, #0
 800b1fc:	9b07      	ldr	r3, [sp, #28]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f43f adf2 	beq.w	800ade8 <_strtod_l+0x88>
 800b204:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b206:	4620      	mov	r0, r4
 800b208:	f001 ffea 	bl	800d1e0 <_Bfree>
 800b20c:	9905      	ldr	r1, [sp, #20]
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 ffe6 	bl	800d1e0 <_Bfree>
 800b214:	4631      	mov	r1, r6
 800b216:	4620      	mov	r0, r4
 800b218:	f001 ffe2 	bl	800d1e0 <_Bfree>
 800b21c:	9907      	ldr	r1, [sp, #28]
 800b21e:	4620      	mov	r0, r4
 800b220:	f001 ffde 	bl	800d1e0 <_Bfree>
 800b224:	4629      	mov	r1, r5
 800b226:	4620      	mov	r0, r4
 800b228:	f001 ffda 	bl	800d1e0 <_Bfree>
 800b22c:	e5dc      	b.n	800ade8 <_strtod_l+0x88>
 800b22e:	4b36      	ldr	r3, [pc, #216]	; (800b308 <_strtod_l+0x5a8>)
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	2300      	movs	r3, #0
 800b234:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b238:	4650      	mov	r0, sl
 800b23a:	4659      	mov	r1, fp
 800b23c:	4699      	mov	r9, r3
 800b23e:	f1b8 0f01 	cmp.w	r8, #1
 800b242:	dc21      	bgt.n	800b288 <_strtod_l+0x528>
 800b244:	b10b      	cbz	r3, 800b24a <_strtod_l+0x4ea>
 800b246:	4682      	mov	sl, r0
 800b248:	468b      	mov	fp, r1
 800b24a:	4b2f      	ldr	r3, [pc, #188]	; (800b308 <_strtod_l+0x5a8>)
 800b24c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b250:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b254:	4652      	mov	r2, sl
 800b256:	465b      	mov	r3, fp
 800b258:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b25c:	f7f5 f9dc 	bl	8000618 <__aeabi_dmul>
 800b260:	4b2a      	ldr	r3, [pc, #168]	; (800b30c <_strtod_l+0x5ac>)
 800b262:	460a      	mov	r2, r1
 800b264:	400b      	ands	r3, r1
 800b266:	492a      	ldr	r1, [pc, #168]	; (800b310 <_strtod_l+0x5b0>)
 800b268:	428b      	cmp	r3, r1
 800b26a:	4682      	mov	sl, r0
 800b26c:	d8bc      	bhi.n	800b1e8 <_strtod_l+0x488>
 800b26e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b272:	428b      	cmp	r3, r1
 800b274:	bf86      	itte	hi
 800b276:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b314 <_strtod_l+0x5b4>
 800b27a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b27e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b282:	2300      	movs	r3, #0
 800b284:	9304      	str	r3, [sp, #16]
 800b286:	e084      	b.n	800b392 <_strtod_l+0x632>
 800b288:	f018 0f01 	tst.w	r8, #1
 800b28c:	d005      	beq.n	800b29a <_strtod_l+0x53a>
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f5 f9c0 	bl	8000618 <__aeabi_dmul>
 800b298:	2301      	movs	r3, #1
 800b29a:	9a04      	ldr	r2, [sp, #16]
 800b29c:	3208      	adds	r2, #8
 800b29e:	f109 0901 	add.w	r9, r9, #1
 800b2a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b2a6:	9204      	str	r2, [sp, #16]
 800b2a8:	e7c9      	b.n	800b23e <_strtod_l+0x4de>
 800b2aa:	d0ea      	beq.n	800b282 <_strtod_l+0x522>
 800b2ac:	f1c8 0800 	rsb	r8, r8, #0
 800b2b0:	f018 020f 	ands.w	r2, r8, #15
 800b2b4:	d00a      	beq.n	800b2cc <_strtod_l+0x56c>
 800b2b6:	4b13      	ldr	r3, [pc, #76]	; (800b304 <_strtod_l+0x5a4>)
 800b2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2bc:	4650      	mov	r0, sl
 800b2be:	4659      	mov	r1, fp
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f7f5 fad2 	bl	800086c <__aeabi_ddiv>
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	468b      	mov	fp, r1
 800b2cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b2d0:	d0d7      	beq.n	800b282 <_strtod_l+0x522>
 800b2d2:	f1b8 0f1f 	cmp.w	r8, #31
 800b2d6:	dd1f      	ble.n	800b318 <_strtod_l+0x5b8>
 800b2d8:	2500      	movs	r5, #0
 800b2da:	462e      	mov	r6, r5
 800b2dc:	9507      	str	r5, [sp, #28]
 800b2de:	9505      	str	r5, [sp, #20]
 800b2e0:	2322      	movs	r3, #34	; 0x22
 800b2e2:	f04f 0a00 	mov.w	sl, #0
 800b2e6:	f04f 0b00 	mov.w	fp, #0
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	e786      	b.n	800b1fc <_strtod_l+0x49c>
 800b2ee:	bf00      	nop
 800b2f0:	08011186 	.word	0x08011186
 800b2f4:	080111c8 	.word	0x080111c8
 800b2f8:	0801117e 	.word	0x0801117e
 800b2fc:	0801120b 	.word	0x0801120b
 800b300:	08010fff 	.word	0x08010fff
 800b304:	08011398 	.word	0x08011398
 800b308:	08011370 	.word	0x08011370
 800b30c:	7ff00000 	.word	0x7ff00000
 800b310:	7ca00000 	.word	0x7ca00000
 800b314:	7fefffff 	.word	0x7fefffff
 800b318:	f018 0310 	ands.w	r3, r8, #16
 800b31c:	bf18      	it	ne
 800b31e:	236a      	movne	r3, #106	; 0x6a
 800b320:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b6d0 <_strtod_l+0x970>
 800b324:	9304      	str	r3, [sp, #16]
 800b326:	4650      	mov	r0, sl
 800b328:	4659      	mov	r1, fp
 800b32a:	2300      	movs	r3, #0
 800b32c:	f018 0f01 	tst.w	r8, #1
 800b330:	d004      	beq.n	800b33c <_strtod_l+0x5dc>
 800b332:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b336:	f7f5 f96f 	bl	8000618 <__aeabi_dmul>
 800b33a:	2301      	movs	r3, #1
 800b33c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b340:	f109 0908 	add.w	r9, r9, #8
 800b344:	d1f2      	bne.n	800b32c <_strtod_l+0x5cc>
 800b346:	b10b      	cbz	r3, 800b34c <_strtod_l+0x5ec>
 800b348:	4682      	mov	sl, r0
 800b34a:	468b      	mov	fp, r1
 800b34c:	9b04      	ldr	r3, [sp, #16]
 800b34e:	b1c3      	cbz	r3, 800b382 <_strtod_l+0x622>
 800b350:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b354:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b358:	2b00      	cmp	r3, #0
 800b35a:	4659      	mov	r1, fp
 800b35c:	dd11      	ble.n	800b382 <_strtod_l+0x622>
 800b35e:	2b1f      	cmp	r3, #31
 800b360:	f340 8124 	ble.w	800b5ac <_strtod_l+0x84c>
 800b364:	2b34      	cmp	r3, #52	; 0x34
 800b366:	bfde      	ittt	le
 800b368:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b36c:	f04f 33ff 	movle.w	r3, #4294967295
 800b370:	fa03 f202 	lslle.w	r2, r3, r2
 800b374:	f04f 0a00 	mov.w	sl, #0
 800b378:	bfcc      	ite	gt
 800b37a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b37e:	ea02 0b01 	andle.w	fp, r2, r1
 800b382:	2200      	movs	r2, #0
 800b384:	2300      	movs	r3, #0
 800b386:	4650      	mov	r0, sl
 800b388:	4659      	mov	r1, fp
 800b38a:	f7f5 fbad 	bl	8000ae8 <__aeabi_dcmpeq>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d1a2      	bne.n	800b2d8 <_strtod_l+0x578>
 800b392:	9b07      	ldr	r3, [sp, #28]
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	9908      	ldr	r1, [sp, #32]
 800b398:	462b      	mov	r3, r5
 800b39a:	463a      	mov	r2, r7
 800b39c:	4620      	mov	r0, r4
 800b39e:	f001 ff87 	bl	800d2b0 <__s2b>
 800b3a2:	9007      	str	r0, [sp, #28]
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	f43f af1f 	beq.w	800b1e8 <_strtod_l+0x488>
 800b3aa:	9b05      	ldr	r3, [sp, #20]
 800b3ac:	1b9e      	subs	r6, r3, r6
 800b3ae:	9b06      	ldr	r3, [sp, #24]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	bfb4      	ite	lt
 800b3b4:	4633      	movlt	r3, r6
 800b3b6:	2300      	movge	r3, #0
 800b3b8:	930c      	str	r3, [sp, #48]	; 0x30
 800b3ba:	9b06      	ldr	r3, [sp, #24]
 800b3bc:	2500      	movs	r5, #0
 800b3be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3c2:	9312      	str	r3, [sp, #72]	; 0x48
 800b3c4:	462e      	mov	r6, r5
 800b3c6:	9b07      	ldr	r3, [sp, #28]
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	6859      	ldr	r1, [r3, #4]
 800b3cc:	f001 fec8 	bl	800d160 <_Balloc>
 800b3d0:	9005      	str	r0, [sp, #20]
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	f43f af0c 	beq.w	800b1f0 <_strtod_l+0x490>
 800b3d8:	9b07      	ldr	r3, [sp, #28]
 800b3da:	691a      	ldr	r2, [r3, #16]
 800b3dc:	3202      	adds	r2, #2
 800b3de:	f103 010c 	add.w	r1, r3, #12
 800b3e2:	0092      	lsls	r2, r2, #2
 800b3e4:	300c      	adds	r0, #12
 800b3e6:	f7fe fa49 	bl	800987c <memcpy>
 800b3ea:	ec4b ab10 	vmov	d0, sl, fp
 800b3ee:	aa1a      	add	r2, sp, #104	; 0x68
 800b3f0:	a919      	add	r1, sp, #100	; 0x64
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f002 faa2 	bl	800d93c <__d2b>
 800b3f8:	ec4b ab18 	vmov	d8, sl, fp
 800b3fc:	9018      	str	r0, [sp, #96]	; 0x60
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f43f aef6 	beq.w	800b1f0 <_strtod_l+0x490>
 800b404:	2101      	movs	r1, #1
 800b406:	4620      	mov	r0, r4
 800b408:	f001 ffec 	bl	800d3e4 <__i2b>
 800b40c:	4606      	mov	r6, r0
 800b40e:	2800      	cmp	r0, #0
 800b410:	f43f aeee 	beq.w	800b1f0 <_strtod_l+0x490>
 800b414:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b416:	9904      	ldr	r1, [sp, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	bfab      	itete	ge
 800b41c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b41e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b420:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b422:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b426:	bfac      	ite	ge
 800b428:	eb03 0902 	addge.w	r9, r3, r2
 800b42c:	1ad7      	sublt	r7, r2, r3
 800b42e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b430:	eba3 0801 	sub.w	r8, r3, r1
 800b434:	4490      	add	r8, r2
 800b436:	4ba1      	ldr	r3, [pc, #644]	; (800b6bc <_strtod_l+0x95c>)
 800b438:	f108 38ff 	add.w	r8, r8, #4294967295
 800b43c:	4598      	cmp	r8, r3
 800b43e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b442:	f280 80c7 	bge.w	800b5d4 <_strtod_l+0x874>
 800b446:	eba3 0308 	sub.w	r3, r3, r8
 800b44a:	2b1f      	cmp	r3, #31
 800b44c:	eba2 0203 	sub.w	r2, r2, r3
 800b450:	f04f 0101 	mov.w	r1, #1
 800b454:	f300 80b1 	bgt.w	800b5ba <_strtod_l+0x85a>
 800b458:	fa01 f303 	lsl.w	r3, r1, r3
 800b45c:	930d      	str	r3, [sp, #52]	; 0x34
 800b45e:	2300      	movs	r3, #0
 800b460:	9308      	str	r3, [sp, #32]
 800b462:	eb09 0802 	add.w	r8, r9, r2
 800b466:	9b04      	ldr	r3, [sp, #16]
 800b468:	45c1      	cmp	r9, r8
 800b46a:	4417      	add	r7, r2
 800b46c:	441f      	add	r7, r3
 800b46e:	464b      	mov	r3, r9
 800b470:	bfa8      	it	ge
 800b472:	4643      	movge	r3, r8
 800b474:	42bb      	cmp	r3, r7
 800b476:	bfa8      	it	ge
 800b478:	463b      	movge	r3, r7
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	bfc2      	ittt	gt
 800b47e:	eba8 0803 	subgt.w	r8, r8, r3
 800b482:	1aff      	subgt	r7, r7, r3
 800b484:	eba9 0903 	subgt.w	r9, r9, r3
 800b488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	dd17      	ble.n	800b4be <_strtod_l+0x75e>
 800b48e:	4631      	mov	r1, r6
 800b490:	461a      	mov	r2, r3
 800b492:	4620      	mov	r0, r4
 800b494:	f002 f866 	bl	800d564 <__pow5mult>
 800b498:	4606      	mov	r6, r0
 800b49a:	2800      	cmp	r0, #0
 800b49c:	f43f aea8 	beq.w	800b1f0 <_strtod_l+0x490>
 800b4a0:	4601      	mov	r1, r0
 800b4a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f001 ffb3 	bl	800d410 <__multiply>
 800b4aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f43f ae9f 	beq.w	800b1f0 <_strtod_l+0x490>
 800b4b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f001 fe93 	bl	800d1e0 <_Bfree>
 800b4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4bc:	9318      	str	r3, [sp, #96]	; 0x60
 800b4be:	f1b8 0f00 	cmp.w	r8, #0
 800b4c2:	f300 808c 	bgt.w	800b5de <_strtod_l+0x87e>
 800b4c6:	9b06      	ldr	r3, [sp, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dd08      	ble.n	800b4de <_strtod_l+0x77e>
 800b4cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4ce:	9905      	ldr	r1, [sp, #20]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f002 f847 	bl	800d564 <__pow5mult>
 800b4d6:	9005      	str	r0, [sp, #20]
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	f43f ae89 	beq.w	800b1f0 <_strtod_l+0x490>
 800b4de:	2f00      	cmp	r7, #0
 800b4e0:	dd08      	ble.n	800b4f4 <_strtod_l+0x794>
 800b4e2:	9905      	ldr	r1, [sp, #20]
 800b4e4:	463a      	mov	r2, r7
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f002 f896 	bl	800d618 <__lshift>
 800b4ec:	9005      	str	r0, [sp, #20]
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f43f ae7e 	beq.w	800b1f0 <_strtod_l+0x490>
 800b4f4:	f1b9 0f00 	cmp.w	r9, #0
 800b4f8:	dd08      	ble.n	800b50c <_strtod_l+0x7ac>
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	464a      	mov	r2, r9
 800b4fe:	4620      	mov	r0, r4
 800b500:	f002 f88a 	bl	800d618 <__lshift>
 800b504:	4606      	mov	r6, r0
 800b506:	2800      	cmp	r0, #0
 800b508:	f43f ae72 	beq.w	800b1f0 <_strtod_l+0x490>
 800b50c:	9a05      	ldr	r2, [sp, #20]
 800b50e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b510:	4620      	mov	r0, r4
 800b512:	f002 f90d 	bl	800d730 <__mdiff>
 800b516:	4605      	mov	r5, r0
 800b518:	2800      	cmp	r0, #0
 800b51a:	f43f ae69 	beq.w	800b1f0 <_strtod_l+0x490>
 800b51e:	68c3      	ldr	r3, [r0, #12]
 800b520:	930b      	str	r3, [sp, #44]	; 0x2c
 800b522:	2300      	movs	r3, #0
 800b524:	60c3      	str	r3, [r0, #12]
 800b526:	4631      	mov	r1, r6
 800b528:	f002 f8e6 	bl	800d6f8 <__mcmp>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	da60      	bge.n	800b5f2 <_strtod_l+0x892>
 800b530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b532:	ea53 030a 	orrs.w	r3, r3, sl
 800b536:	f040 8082 	bne.w	800b63e <_strtod_l+0x8de>
 800b53a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d17d      	bne.n	800b63e <_strtod_l+0x8de>
 800b542:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b546:	0d1b      	lsrs	r3, r3, #20
 800b548:	051b      	lsls	r3, r3, #20
 800b54a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b54e:	d976      	bls.n	800b63e <_strtod_l+0x8de>
 800b550:	696b      	ldr	r3, [r5, #20]
 800b552:	b913      	cbnz	r3, 800b55a <_strtod_l+0x7fa>
 800b554:	692b      	ldr	r3, [r5, #16]
 800b556:	2b01      	cmp	r3, #1
 800b558:	dd71      	ble.n	800b63e <_strtod_l+0x8de>
 800b55a:	4629      	mov	r1, r5
 800b55c:	2201      	movs	r2, #1
 800b55e:	4620      	mov	r0, r4
 800b560:	f002 f85a 	bl	800d618 <__lshift>
 800b564:	4631      	mov	r1, r6
 800b566:	4605      	mov	r5, r0
 800b568:	f002 f8c6 	bl	800d6f8 <__mcmp>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	dd66      	ble.n	800b63e <_strtod_l+0x8de>
 800b570:	9904      	ldr	r1, [sp, #16]
 800b572:	4a53      	ldr	r2, [pc, #332]	; (800b6c0 <_strtod_l+0x960>)
 800b574:	465b      	mov	r3, fp
 800b576:	2900      	cmp	r1, #0
 800b578:	f000 8081 	beq.w	800b67e <_strtod_l+0x91e>
 800b57c:	ea02 010b 	and.w	r1, r2, fp
 800b580:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b584:	dc7b      	bgt.n	800b67e <_strtod_l+0x91e>
 800b586:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b58a:	f77f aea9 	ble.w	800b2e0 <_strtod_l+0x580>
 800b58e:	4b4d      	ldr	r3, [pc, #308]	; (800b6c4 <_strtod_l+0x964>)
 800b590:	4650      	mov	r0, sl
 800b592:	4659      	mov	r1, fp
 800b594:	2200      	movs	r2, #0
 800b596:	f7f5 f83f 	bl	8000618 <__aeabi_dmul>
 800b59a:	460b      	mov	r3, r1
 800b59c:	4303      	orrs	r3, r0
 800b59e:	bf08      	it	eq
 800b5a0:	2322      	moveq	r3, #34	; 0x22
 800b5a2:	4682      	mov	sl, r0
 800b5a4:	468b      	mov	fp, r1
 800b5a6:	bf08      	it	eq
 800b5a8:	6023      	streq	r3, [r4, #0]
 800b5aa:	e62b      	b.n	800b204 <_strtod_l+0x4a4>
 800b5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b4:	ea03 0a0a 	and.w	sl, r3, sl
 800b5b8:	e6e3      	b.n	800b382 <_strtod_l+0x622>
 800b5ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b5be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b5c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b5c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b5ca:	fa01 f308 	lsl.w	r3, r1, r8
 800b5ce:	9308      	str	r3, [sp, #32]
 800b5d0:	910d      	str	r1, [sp, #52]	; 0x34
 800b5d2:	e746      	b.n	800b462 <_strtod_l+0x702>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9308      	str	r3, [sp, #32]
 800b5d8:	2301      	movs	r3, #1
 800b5da:	930d      	str	r3, [sp, #52]	; 0x34
 800b5dc:	e741      	b.n	800b462 <_strtod_l+0x702>
 800b5de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5e0:	4642      	mov	r2, r8
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f002 f818 	bl	800d618 <__lshift>
 800b5e8:	9018      	str	r0, [sp, #96]	; 0x60
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	f47f af6b 	bne.w	800b4c6 <_strtod_l+0x766>
 800b5f0:	e5fe      	b.n	800b1f0 <_strtod_l+0x490>
 800b5f2:	465f      	mov	r7, fp
 800b5f4:	d16e      	bne.n	800b6d4 <_strtod_l+0x974>
 800b5f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5fc:	b342      	cbz	r2, 800b650 <_strtod_l+0x8f0>
 800b5fe:	4a32      	ldr	r2, [pc, #200]	; (800b6c8 <_strtod_l+0x968>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d128      	bne.n	800b656 <_strtod_l+0x8f6>
 800b604:	9b04      	ldr	r3, [sp, #16]
 800b606:	4651      	mov	r1, sl
 800b608:	b1eb      	cbz	r3, 800b646 <_strtod_l+0x8e6>
 800b60a:	4b2d      	ldr	r3, [pc, #180]	; (800b6c0 <_strtod_l+0x960>)
 800b60c:	403b      	ands	r3, r7
 800b60e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b612:	f04f 32ff 	mov.w	r2, #4294967295
 800b616:	d819      	bhi.n	800b64c <_strtod_l+0x8ec>
 800b618:	0d1b      	lsrs	r3, r3, #20
 800b61a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b61e:	fa02 f303 	lsl.w	r3, r2, r3
 800b622:	4299      	cmp	r1, r3
 800b624:	d117      	bne.n	800b656 <_strtod_l+0x8f6>
 800b626:	4b29      	ldr	r3, [pc, #164]	; (800b6cc <_strtod_l+0x96c>)
 800b628:	429f      	cmp	r7, r3
 800b62a:	d102      	bne.n	800b632 <_strtod_l+0x8d2>
 800b62c:	3101      	adds	r1, #1
 800b62e:	f43f addf 	beq.w	800b1f0 <_strtod_l+0x490>
 800b632:	4b23      	ldr	r3, [pc, #140]	; (800b6c0 <_strtod_l+0x960>)
 800b634:	403b      	ands	r3, r7
 800b636:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b63a:	f04f 0a00 	mov.w	sl, #0
 800b63e:	9b04      	ldr	r3, [sp, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1a4      	bne.n	800b58e <_strtod_l+0x82e>
 800b644:	e5de      	b.n	800b204 <_strtod_l+0x4a4>
 800b646:	f04f 33ff 	mov.w	r3, #4294967295
 800b64a:	e7ea      	b.n	800b622 <_strtod_l+0x8c2>
 800b64c:	4613      	mov	r3, r2
 800b64e:	e7e8      	b.n	800b622 <_strtod_l+0x8c2>
 800b650:	ea53 030a 	orrs.w	r3, r3, sl
 800b654:	d08c      	beq.n	800b570 <_strtod_l+0x810>
 800b656:	9b08      	ldr	r3, [sp, #32]
 800b658:	b1db      	cbz	r3, 800b692 <_strtod_l+0x932>
 800b65a:	423b      	tst	r3, r7
 800b65c:	d0ef      	beq.n	800b63e <_strtod_l+0x8de>
 800b65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b660:	9a04      	ldr	r2, [sp, #16]
 800b662:	4650      	mov	r0, sl
 800b664:	4659      	mov	r1, fp
 800b666:	b1c3      	cbz	r3, 800b69a <_strtod_l+0x93a>
 800b668:	f7ff fb5b 	bl	800ad22 <sulp>
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	ec51 0b18 	vmov	r0, r1, d8
 800b674:	f7f4 fe1a 	bl	80002ac <__adddf3>
 800b678:	4682      	mov	sl, r0
 800b67a:	468b      	mov	fp, r1
 800b67c:	e7df      	b.n	800b63e <_strtod_l+0x8de>
 800b67e:	4013      	ands	r3, r2
 800b680:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b684:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b688:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b68c:	f04f 3aff 	mov.w	sl, #4294967295
 800b690:	e7d5      	b.n	800b63e <_strtod_l+0x8de>
 800b692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b694:	ea13 0f0a 	tst.w	r3, sl
 800b698:	e7e0      	b.n	800b65c <_strtod_l+0x8fc>
 800b69a:	f7ff fb42 	bl	800ad22 <sulp>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	ec51 0b18 	vmov	r0, r1, d8
 800b6a6:	f7f4 fdff 	bl	80002a8 <__aeabi_dsub>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4682      	mov	sl, r0
 800b6b0:	468b      	mov	fp, r1
 800b6b2:	f7f5 fa19 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d0c1      	beq.n	800b63e <_strtod_l+0x8de>
 800b6ba:	e611      	b.n	800b2e0 <_strtod_l+0x580>
 800b6bc:	fffffc02 	.word	0xfffffc02
 800b6c0:	7ff00000 	.word	0x7ff00000
 800b6c4:	39500000 	.word	0x39500000
 800b6c8:	000fffff 	.word	0x000fffff
 800b6cc:	7fefffff 	.word	0x7fefffff
 800b6d0:	080111e0 	.word	0x080111e0
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f002 f98c 	bl	800d9f4 <__ratio>
 800b6dc:	ec59 8b10 	vmov	r8, r9, d0
 800b6e0:	ee10 0a10 	vmov	r0, s0
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	f7f5 fa10 	bl	8000b10 <__aeabi_dcmple>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d07a      	beq.n	800b7ea <_strtod_l+0xa8a>
 800b6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d04a      	beq.n	800b790 <_strtod_l+0xa30>
 800b6fa:	4b95      	ldr	r3, [pc, #596]	; (800b950 <_strtod_l+0xbf0>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b702:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b950 <_strtod_l+0xbf0>
 800b706:	f04f 0800 	mov.w	r8, #0
 800b70a:	4b92      	ldr	r3, [pc, #584]	; (800b954 <_strtod_l+0xbf4>)
 800b70c:	403b      	ands	r3, r7
 800b70e:	930d      	str	r3, [sp, #52]	; 0x34
 800b710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b712:	4b91      	ldr	r3, [pc, #580]	; (800b958 <_strtod_l+0xbf8>)
 800b714:	429a      	cmp	r2, r3
 800b716:	f040 80b0 	bne.w	800b87a <_strtod_l+0xb1a>
 800b71a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b71e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b722:	ec4b ab10 	vmov	d0, sl, fp
 800b726:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b72a:	f002 f88b 	bl	800d844 <__ulp>
 800b72e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b732:	ec53 2b10 	vmov	r2, r3, d0
 800b736:	f7f4 ff6f 	bl	8000618 <__aeabi_dmul>
 800b73a:	4652      	mov	r2, sl
 800b73c:	465b      	mov	r3, fp
 800b73e:	f7f4 fdb5 	bl	80002ac <__adddf3>
 800b742:	460b      	mov	r3, r1
 800b744:	4983      	ldr	r1, [pc, #524]	; (800b954 <_strtod_l+0xbf4>)
 800b746:	4a85      	ldr	r2, [pc, #532]	; (800b95c <_strtod_l+0xbfc>)
 800b748:	4019      	ands	r1, r3
 800b74a:	4291      	cmp	r1, r2
 800b74c:	4682      	mov	sl, r0
 800b74e:	d960      	bls.n	800b812 <_strtod_l+0xab2>
 800b750:	ee18 3a90 	vmov	r3, s17
 800b754:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b758:	4293      	cmp	r3, r2
 800b75a:	d104      	bne.n	800b766 <_strtod_l+0xa06>
 800b75c:	ee18 3a10 	vmov	r3, s16
 800b760:	3301      	adds	r3, #1
 800b762:	f43f ad45 	beq.w	800b1f0 <_strtod_l+0x490>
 800b766:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b968 <_strtod_l+0xc08>
 800b76a:	f04f 3aff 	mov.w	sl, #4294967295
 800b76e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b770:	4620      	mov	r0, r4
 800b772:	f001 fd35 	bl	800d1e0 <_Bfree>
 800b776:	9905      	ldr	r1, [sp, #20]
 800b778:	4620      	mov	r0, r4
 800b77a:	f001 fd31 	bl	800d1e0 <_Bfree>
 800b77e:	4631      	mov	r1, r6
 800b780:	4620      	mov	r0, r4
 800b782:	f001 fd2d 	bl	800d1e0 <_Bfree>
 800b786:	4629      	mov	r1, r5
 800b788:	4620      	mov	r0, r4
 800b78a:	f001 fd29 	bl	800d1e0 <_Bfree>
 800b78e:	e61a      	b.n	800b3c6 <_strtod_l+0x666>
 800b790:	f1ba 0f00 	cmp.w	sl, #0
 800b794:	d11b      	bne.n	800b7ce <_strtod_l+0xa6e>
 800b796:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b79a:	b9f3      	cbnz	r3, 800b7da <_strtod_l+0xa7a>
 800b79c:	4b6c      	ldr	r3, [pc, #432]	; (800b950 <_strtod_l+0xbf0>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	4640      	mov	r0, r8
 800b7a2:	4649      	mov	r1, r9
 800b7a4:	f7f5 f9aa 	bl	8000afc <__aeabi_dcmplt>
 800b7a8:	b9d0      	cbnz	r0, 800b7e0 <_strtod_l+0xa80>
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	4b6c      	ldr	r3, [pc, #432]	; (800b960 <_strtod_l+0xc00>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f7f4 ff31 	bl	8000618 <__aeabi_dmul>
 800b7b6:	4680      	mov	r8, r0
 800b7b8:	4689      	mov	r9, r1
 800b7ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b7be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b7c2:	9315      	str	r3, [sp, #84]	; 0x54
 800b7c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b7c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7cc:	e79d      	b.n	800b70a <_strtod_l+0x9aa>
 800b7ce:	f1ba 0f01 	cmp.w	sl, #1
 800b7d2:	d102      	bne.n	800b7da <_strtod_l+0xa7a>
 800b7d4:	2f00      	cmp	r7, #0
 800b7d6:	f43f ad83 	beq.w	800b2e0 <_strtod_l+0x580>
 800b7da:	4b62      	ldr	r3, [pc, #392]	; (800b964 <_strtod_l+0xc04>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	e78e      	b.n	800b6fe <_strtod_l+0x99e>
 800b7e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b960 <_strtod_l+0xc00>
 800b7e4:	f04f 0800 	mov.w	r8, #0
 800b7e8:	e7e7      	b.n	800b7ba <_strtod_l+0xa5a>
 800b7ea:	4b5d      	ldr	r3, [pc, #372]	; (800b960 <_strtod_l+0xc00>)
 800b7ec:	4640      	mov	r0, r8
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f7f4 ff11 	bl	8000618 <__aeabi_dmul>
 800b7f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	4689      	mov	r9, r1
 800b7fc:	b933      	cbnz	r3, 800b80c <_strtod_l+0xaac>
 800b7fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b802:	900e      	str	r0, [sp, #56]	; 0x38
 800b804:	930f      	str	r3, [sp, #60]	; 0x3c
 800b806:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b80a:	e7dd      	b.n	800b7c8 <_strtod_l+0xa68>
 800b80c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b810:	e7f9      	b.n	800b806 <_strtod_l+0xaa6>
 800b812:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b816:	9b04      	ldr	r3, [sp, #16]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1a8      	bne.n	800b76e <_strtod_l+0xa0e>
 800b81c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b822:	0d1b      	lsrs	r3, r3, #20
 800b824:	051b      	lsls	r3, r3, #20
 800b826:	429a      	cmp	r2, r3
 800b828:	d1a1      	bne.n	800b76e <_strtod_l+0xa0e>
 800b82a:	4640      	mov	r0, r8
 800b82c:	4649      	mov	r1, r9
 800b82e:	f7f5 fa53 	bl	8000cd8 <__aeabi_d2lz>
 800b832:	f7f4 fec3 	bl	80005bc <__aeabi_l2d>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	4640      	mov	r0, r8
 800b83c:	4649      	mov	r1, r9
 800b83e:	f7f4 fd33 	bl	80002a8 <__aeabi_dsub>
 800b842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b844:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b848:	ea43 030a 	orr.w	r3, r3, sl
 800b84c:	4313      	orrs	r3, r2
 800b84e:	4680      	mov	r8, r0
 800b850:	4689      	mov	r9, r1
 800b852:	d055      	beq.n	800b900 <_strtod_l+0xba0>
 800b854:	a336      	add	r3, pc, #216	; (adr r3, 800b930 <_strtod_l+0xbd0>)
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f7f5 f94f 	bl	8000afc <__aeabi_dcmplt>
 800b85e:	2800      	cmp	r0, #0
 800b860:	f47f acd0 	bne.w	800b204 <_strtod_l+0x4a4>
 800b864:	a334      	add	r3, pc, #208	; (adr r3, 800b938 <_strtod_l+0xbd8>)
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	4640      	mov	r0, r8
 800b86c:	4649      	mov	r1, r9
 800b86e:	f7f5 f963 	bl	8000b38 <__aeabi_dcmpgt>
 800b872:	2800      	cmp	r0, #0
 800b874:	f43f af7b 	beq.w	800b76e <_strtod_l+0xa0e>
 800b878:	e4c4      	b.n	800b204 <_strtod_l+0x4a4>
 800b87a:	9b04      	ldr	r3, [sp, #16]
 800b87c:	b333      	cbz	r3, 800b8cc <_strtod_l+0xb6c>
 800b87e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b880:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b884:	d822      	bhi.n	800b8cc <_strtod_l+0xb6c>
 800b886:	a32e      	add	r3, pc, #184	; (adr r3, 800b940 <_strtod_l+0xbe0>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	4640      	mov	r0, r8
 800b88e:	4649      	mov	r1, r9
 800b890:	f7f5 f93e 	bl	8000b10 <__aeabi_dcmple>
 800b894:	b1a0      	cbz	r0, 800b8c0 <_strtod_l+0xb60>
 800b896:	4649      	mov	r1, r9
 800b898:	4640      	mov	r0, r8
 800b89a:	f7f5 f995 	bl	8000bc8 <__aeabi_d2uiz>
 800b89e:	2801      	cmp	r0, #1
 800b8a0:	bf38      	it	cc
 800b8a2:	2001      	movcc	r0, #1
 800b8a4:	f7f4 fe3e 	bl	8000524 <__aeabi_ui2d>
 800b8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	4689      	mov	r9, r1
 800b8ae:	bb23      	cbnz	r3, 800b8fa <_strtod_l+0xb9a>
 800b8b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8b4:	9010      	str	r0, [sp, #64]	; 0x40
 800b8b6:	9311      	str	r3, [sp, #68]	; 0x44
 800b8b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b8c8:	1a9b      	subs	r3, r3, r2
 800b8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b8cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8d0:	eeb0 0a48 	vmov.f32	s0, s16
 800b8d4:	eef0 0a68 	vmov.f32	s1, s17
 800b8d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b8dc:	f001 ffb2 	bl	800d844 <__ulp>
 800b8e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8e4:	ec53 2b10 	vmov	r2, r3, d0
 800b8e8:	f7f4 fe96 	bl	8000618 <__aeabi_dmul>
 800b8ec:	ec53 2b18 	vmov	r2, r3, d8
 800b8f0:	f7f4 fcdc 	bl	80002ac <__adddf3>
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	468b      	mov	fp, r1
 800b8f8:	e78d      	b.n	800b816 <_strtod_l+0xab6>
 800b8fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b8fe:	e7db      	b.n	800b8b8 <_strtod_l+0xb58>
 800b900:	a311      	add	r3, pc, #68	; (adr r3, 800b948 <_strtod_l+0xbe8>)
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f7f5 f8f9 	bl	8000afc <__aeabi_dcmplt>
 800b90a:	e7b2      	b.n	800b872 <_strtod_l+0xb12>
 800b90c:	2300      	movs	r3, #0
 800b90e:	930a      	str	r3, [sp, #40]	; 0x28
 800b910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b912:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b914:	6013      	str	r3, [r2, #0]
 800b916:	f7ff ba6b 	b.w	800adf0 <_strtod_l+0x90>
 800b91a:	2a65      	cmp	r2, #101	; 0x65
 800b91c:	f43f ab5f 	beq.w	800afde <_strtod_l+0x27e>
 800b920:	2a45      	cmp	r2, #69	; 0x45
 800b922:	f43f ab5c 	beq.w	800afde <_strtod_l+0x27e>
 800b926:	2301      	movs	r3, #1
 800b928:	f7ff bb94 	b.w	800b054 <_strtod_l+0x2f4>
 800b92c:	f3af 8000 	nop.w
 800b930:	94a03595 	.word	0x94a03595
 800b934:	3fdfffff 	.word	0x3fdfffff
 800b938:	35afe535 	.word	0x35afe535
 800b93c:	3fe00000 	.word	0x3fe00000
 800b940:	ffc00000 	.word	0xffc00000
 800b944:	41dfffff 	.word	0x41dfffff
 800b948:	94a03595 	.word	0x94a03595
 800b94c:	3fcfffff 	.word	0x3fcfffff
 800b950:	3ff00000 	.word	0x3ff00000
 800b954:	7ff00000 	.word	0x7ff00000
 800b958:	7fe00000 	.word	0x7fe00000
 800b95c:	7c9fffff 	.word	0x7c9fffff
 800b960:	3fe00000 	.word	0x3fe00000
 800b964:	bff00000 	.word	0xbff00000
 800b968:	7fefffff 	.word	0x7fefffff

0800b96c <_strtod_r>:
 800b96c:	4b01      	ldr	r3, [pc, #4]	; (800b974 <_strtod_r+0x8>)
 800b96e:	f7ff b9f7 	b.w	800ad60 <_strtod_l>
 800b972:	bf00      	nop
 800b974:	200000e8 	.word	0x200000e8

0800b978 <_strtol_l.constprop.0>:
 800b978:	2b01      	cmp	r3, #1
 800b97a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b97e:	d001      	beq.n	800b984 <_strtol_l.constprop.0+0xc>
 800b980:	2b24      	cmp	r3, #36	; 0x24
 800b982:	d906      	bls.n	800b992 <_strtol_l.constprop.0+0x1a>
 800b984:	f7fd fcb2 	bl	80092ec <__errno>
 800b988:	2316      	movs	r3, #22
 800b98a:	6003      	str	r3, [r0, #0]
 800b98c:	2000      	movs	r0, #0
 800b98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b992:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ba78 <_strtol_l.constprop.0+0x100>
 800b996:	460d      	mov	r5, r1
 800b998:	462e      	mov	r6, r5
 800b99a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b99e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b9a2:	f017 0708 	ands.w	r7, r7, #8
 800b9a6:	d1f7      	bne.n	800b998 <_strtol_l.constprop.0+0x20>
 800b9a8:	2c2d      	cmp	r4, #45	; 0x2d
 800b9aa:	d132      	bne.n	800ba12 <_strtol_l.constprop.0+0x9a>
 800b9ac:	782c      	ldrb	r4, [r5, #0]
 800b9ae:	2701      	movs	r7, #1
 800b9b0:	1cb5      	adds	r5, r6, #2
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d05b      	beq.n	800ba6e <_strtol_l.constprop.0+0xf6>
 800b9b6:	2b10      	cmp	r3, #16
 800b9b8:	d109      	bne.n	800b9ce <_strtol_l.constprop.0+0x56>
 800b9ba:	2c30      	cmp	r4, #48	; 0x30
 800b9bc:	d107      	bne.n	800b9ce <_strtol_l.constprop.0+0x56>
 800b9be:	782c      	ldrb	r4, [r5, #0]
 800b9c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b9c4:	2c58      	cmp	r4, #88	; 0x58
 800b9c6:	d14d      	bne.n	800ba64 <_strtol_l.constprop.0+0xec>
 800b9c8:	786c      	ldrb	r4, [r5, #1]
 800b9ca:	2310      	movs	r3, #16
 800b9cc:	3502      	adds	r5, #2
 800b9ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b9d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9d6:	f04f 0c00 	mov.w	ip, #0
 800b9da:	fbb8 f9f3 	udiv	r9, r8, r3
 800b9de:	4666      	mov	r6, ip
 800b9e0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b9e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b9e8:	f1be 0f09 	cmp.w	lr, #9
 800b9ec:	d816      	bhi.n	800ba1c <_strtol_l.constprop.0+0xa4>
 800b9ee:	4674      	mov	r4, lr
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	dd24      	ble.n	800ba3e <_strtol_l.constprop.0+0xc6>
 800b9f4:	f1bc 0f00 	cmp.w	ip, #0
 800b9f8:	db1e      	blt.n	800ba38 <_strtol_l.constprop.0+0xc0>
 800b9fa:	45b1      	cmp	r9, r6
 800b9fc:	d31c      	bcc.n	800ba38 <_strtol_l.constprop.0+0xc0>
 800b9fe:	d101      	bne.n	800ba04 <_strtol_l.constprop.0+0x8c>
 800ba00:	45a2      	cmp	sl, r4
 800ba02:	db19      	blt.n	800ba38 <_strtol_l.constprop.0+0xc0>
 800ba04:	fb06 4603 	mla	r6, r6, r3, r4
 800ba08:	f04f 0c01 	mov.w	ip, #1
 800ba0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba10:	e7e8      	b.n	800b9e4 <_strtol_l.constprop.0+0x6c>
 800ba12:	2c2b      	cmp	r4, #43	; 0x2b
 800ba14:	bf04      	itt	eq
 800ba16:	782c      	ldrbeq	r4, [r5, #0]
 800ba18:	1cb5      	addeq	r5, r6, #2
 800ba1a:	e7ca      	b.n	800b9b2 <_strtol_l.constprop.0+0x3a>
 800ba1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ba20:	f1be 0f19 	cmp.w	lr, #25
 800ba24:	d801      	bhi.n	800ba2a <_strtol_l.constprop.0+0xb2>
 800ba26:	3c37      	subs	r4, #55	; 0x37
 800ba28:	e7e2      	b.n	800b9f0 <_strtol_l.constprop.0+0x78>
 800ba2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ba2e:	f1be 0f19 	cmp.w	lr, #25
 800ba32:	d804      	bhi.n	800ba3e <_strtol_l.constprop.0+0xc6>
 800ba34:	3c57      	subs	r4, #87	; 0x57
 800ba36:	e7db      	b.n	800b9f0 <_strtol_l.constprop.0+0x78>
 800ba38:	f04f 3cff 	mov.w	ip, #4294967295
 800ba3c:	e7e6      	b.n	800ba0c <_strtol_l.constprop.0+0x94>
 800ba3e:	f1bc 0f00 	cmp.w	ip, #0
 800ba42:	da05      	bge.n	800ba50 <_strtol_l.constprop.0+0xd8>
 800ba44:	2322      	movs	r3, #34	; 0x22
 800ba46:	6003      	str	r3, [r0, #0]
 800ba48:	4646      	mov	r6, r8
 800ba4a:	b942      	cbnz	r2, 800ba5e <_strtol_l.constprop.0+0xe6>
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	e79e      	b.n	800b98e <_strtol_l.constprop.0+0x16>
 800ba50:	b107      	cbz	r7, 800ba54 <_strtol_l.constprop.0+0xdc>
 800ba52:	4276      	negs	r6, r6
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	d0f9      	beq.n	800ba4c <_strtol_l.constprop.0+0xd4>
 800ba58:	f1bc 0f00 	cmp.w	ip, #0
 800ba5c:	d000      	beq.n	800ba60 <_strtol_l.constprop.0+0xe8>
 800ba5e:	1e69      	subs	r1, r5, #1
 800ba60:	6011      	str	r1, [r2, #0]
 800ba62:	e7f3      	b.n	800ba4c <_strtol_l.constprop.0+0xd4>
 800ba64:	2430      	movs	r4, #48	; 0x30
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1b1      	bne.n	800b9ce <_strtol_l.constprop.0+0x56>
 800ba6a:	2308      	movs	r3, #8
 800ba6c:	e7af      	b.n	800b9ce <_strtol_l.constprop.0+0x56>
 800ba6e:	2c30      	cmp	r4, #48	; 0x30
 800ba70:	d0a5      	beq.n	800b9be <_strtol_l.constprop.0+0x46>
 800ba72:	230a      	movs	r3, #10
 800ba74:	e7ab      	b.n	800b9ce <_strtol_l.constprop.0+0x56>
 800ba76:	bf00      	nop
 800ba78:	08011001 	.word	0x08011001

0800ba7c <_strtol_r>:
 800ba7c:	f7ff bf7c 	b.w	800b978 <_strtol_l.constprop.0>

0800ba80 <__swbuf_r>:
 800ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba82:	460e      	mov	r6, r1
 800ba84:	4614      	mov	r4, r2
 800ba86:	4605      	mov	r5, r0
 800ba88:	b118      	cbz	r0, 800ba92 <__swbuf_r+0x12>
 800ba8a:	6983      	ldr	r3, [r0, #24]
 800ba8c:	b90b      	cbnz	r3, 800ba92 <__swbuf_r+0x12>
 800ba8e:	f7fd fd5f 	bl	8009550 <__sinit>
 800ba92:	4b21      	ldr	r3, [pc, #132]	; (800bb18 <__swbuf_r+0x98>)
 800ba94:	429c      	cmp	r4, r3
 800ba96:	d12b      	bne.n	800baf0 <__swbuf_r+0x70>
 800ba98:	686c      	ldr	r4, [r5, #4]
 800ba9a:	69a3      	ldr	r3, [r4, #24]
 800ba9c:	60a3      	str	r3, [r4, #8]
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	071a      	lsls	r2, r3, #28
 800baa2:	d52f      	bpl.n	800bb04 <__swbuf_r+0x84>
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	b36b      	cbz	r3, 800bb04 <__swbuf_r+0x84>
 800baa8:	6923      	ldr	r3, [r4, #16]
 800baaa:	6820      	ldr	r0, [r4, #0]
 800baac:	1ac0      	subs	r0, r0, r3
 800baae:	6963      	ldr	r3, [r4, #20]
 800bab0:	b2f6      	uxtb	r6, r6
 800bab2:	4283      	cmp	r3, r0
 800bab4:	4637      	mov	r7, r6
 800bab6:	dc04      	bgt.n	800bac2 <__swbuf_r+0x42>
 800bab8:	4621      	mov	r1, r4
 800baba:	4628      	mov	r0, r5
 800babc:	f7fd fca2 	bl	8009404 <_fflush_r>
 800bac0:	bb30      	cbnz	r0, 800bb10 <__swbuf_r+0x90>
 800bac2:	68a3      	ldr	r3, [r4, #8]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	60a3      	str	r3, [r4, #8]
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	6022      	str	r2, [r4, #0]
 800bace:	701e      	strb	r6, [r3, #0]
 800bad0:	6963      	ldr	r3, [r4, #20]
 800bad2:	3001      	adds	r0, #1
 800bad4:	4283      	cmp	r3, r0
 800bad6:	d004      	beq.n	800bae2 <__swbuf_r+0x62>
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	07db      	lsls	r3, r3, #31
 800badc:	d506      	bpl.n	800baec <__swbuf_r+0x6c>
 800bade:	2e0a      	cmp	r6, #10
 800bae0:	d104      	bne.n	800baec <__swbuf_r+0x6c>
 800bae2:	4621      	mov	r1, r4
 800bae4:	4628      	mov	r0, r5
 800bae6:	f7fd fc8d 	bl	8009404 <_fflush_r>
 800baea:	b988      	cbnz	r0, 800bb10 <__swbuf_r+0x90>
 800baec:	4638      	mov	r0, r7
 800baee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baf0:	4b0a      	ldr	r3, [pc, #40]	; (800bb1c <__swbuf_r+0x9c>)
 800baf2:	429c      	cmp	r4, r3
 800baf4:	d101      	bne.n	800bafa <__swbuf_r+0x7a>
 800baf6:	68ac      	ldr	r4, [r5, #8]
 800baf8:	e7cf      	b.n	800ba9a <__swbuf_r+0x1a>
 800bafa:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <__swbuf_r+0xa0>)
 800bafc:	429c      	cmp	r4, r3
 800bafe:	bf08      	it	eq
 800bb00:	68ec      	ldreq	r4, [r5, #12]
 800bb02:	e7ca      	b.n	800ba9a <__swbuf_r+0x1a>
 800bb04:	4621      	mov	r1, r4
 800bb06:	4628      	mov	r0, r5
 800bb08:	f000 f81e 	bl	800bb48 <__swsetup_r>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d0cb      	beq.n	800baa8 <__swbuf_r+0x28>
 800bb10:	f04f 37ff 	mov.w	r7, #4294967295
 800bb14:	e7ea      	b.n	800baec <__swbuf_r+0x6c>
 800bb16:	bf00      	nop
 800bb18:	08011124 	.word	0x08011124
 800bb1c:	08011144 	.word	0x08011144
 800bb20:	08011104 	.word	0x08011104

0800bb24 <_write_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4d07      	ldr	r5, [pc, #28]	; (800bb44 <_write_r+0x20>)
 800bb28:	4604      	mov	r4, r0
 800bb2a:	4608      	mov	r0, r1
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	2200      	movs	r2, #0
 800bb30:	602a      	str	r2, [r5, #0]
 800bb32:	461a      	mov	r2, r3
 800bb34:	f7f5 fbef 	bl	8001316 <_write>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_write_r+0x1e>
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_write_r+0x1e>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	20001b18 	.word	0x20001b18

0800bb48 <__swsetup_r>:
 800bb48:	4b32      	ldr	r3, [pc, #200]	; (800bc14 <__swsetup_r+0xcc>)
 800bb4a:	b570      	push	{r4, r5, r6, lr}
 800bb4c:	681d      	ldr	r5, [r3, #0]
 800bb4e:	4606      	mov	r6, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	b125      	cbz	r5, 800bb5e <__swsetup_r+0x16>
 800bb54:	69ab      	ldr	r3, [r5, #24]
 800bb56:	b913      	cbnz	r3, 800bb5e <__swsetup_r+0x16>
 800bb58:	4628      	mov	r0, r5
 800bb5a:	f7fd fcf9 	bl	8009550 <__sinit>
 800bb5e:	4b2e      	ldr	r3, [pc, #184]	; (800bc18 <__swsetup_r+0xd0>)
 800bb60:	429c      	cmp	r4, r3
 800bb62:	d10f      	bne.n	800bb84 <__swsetup_r+0x3c>
 800bb64:	686c      	ldr	r4, [r5, #4]
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb6c:	0719      	lsls	r1, r3, #28
 800bb6e:	d42c      	bmi.n	800bbca <__swsetup_r+0x82>
 800bb70:	06dd      	lsls	r5, r3, #27
 800bb72:	d411      	bmi.n	800bb98 <__swsetup_r+0x50>
 800bb74:	2309      	movs	r3, #9
 800bb76:	6033      	str	r3, [r6, #0]
 800bb78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb82:	e03e      	b.n	800bc02 <__swsetup_r+0xba>
 800bb84:	4b25      	ldr	r3, [pc, #148]	; (800bc1c <__swsetup_r+0xd4>)
 800bb86:	429c      	cmp	r4, r3
 800bb88:	d101      	bne.n	800bb8e <__swsetup_r+0x46>
 800bb8a:	68ac      	ldr	r4, [r5, #8]
 800bb8c:	e7eb      	b.n	800bb66 <__swsetup_r+0x1e>
 800bb8e:	4b24      	ldr	r3, [pc, #144]	; (800bc20 <__swsetup_r+0xd8>)
 800bb90:	429c      	cmp	r4, r3
 800bb92:	bf08      	it	eq
 800bb94:	68ec      	ldreq	r4, [r5, #12]
 800bb96:	e7e6      	b.n	800bb66 <__swsetup_r+0x1e>
 800bb98:	0758      	lsls	r0, r3, #29
 800bb9a:	d512      	bpl.n	800bbc2 <__swsetup_r+0x7a>
 800bb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9e:	b141      	cbz	r1, 800bbb2 <__swsetup_r+0x6a>
 800bba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bba4:	4299      	cmp	r1, r3
 800bba6:	d002      	beq.n	800bbae <__swsetup_r+0x66>
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f7fd fead 	bl	8009908 <_free_r>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	6363      	str	r3, [r4, #52]	; 0x34
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	6063      	str	r3, [r4, #4]
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f043 0308 	orr.w	r3, r3, #8
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	6923      	ldr	r3, [r4, #16]
 800bbcc:	b94b      	cbnz	r3, 800bbe2 <__swsetup_r+0x9a>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbd8:	d003      	beq.n	800bbe2 <__swsetup_r+0x9a>
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f001 fa61 	bl	800d0a4 <__smakebuf_r>
 800bbe2:	89a0      	ldrh	r0, [r4, #12]
 800bbe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbe8:	f010 0301 	ands.w	r3, r0, #1
 800bbec:	d00a      	beq.n	800bc04 <__swsetup_r+0xbc>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60a3      	str	r3, [r4, #8]
 800bbf2:	6963      	ldr	r3, [r4, #20]
 800bbf4:	425b      	negs	r3, r3
 800bbf6:	61a3      	str	r3, [r4, #24]
 800bbf8:	6923      	ldr	r3, [r4, #16]
 800bbfa:	b943      	cbnz	r3, 800bc0e <__swsetup_r+0xc6>
 800bbfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc00:	d1ba      	bne.n	800bb78 <__swsetup_r+0x30>
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	0781      	lsls	r1, r0, #30
 800bc06:	bf58      	it	pl
 800bc08:	6963      	ldrpl	r3, [r4, #20]
 800bc0a:	60a3      	str	r3, [r4, #8]
 800bc0c:	e7f4      	b.n	800bbf8 <__swsetup_r+0xb0>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e7f7      	b.n	800bc02 <__swsetup_r+0xba>
 800bc12:	bf00      	nop
 800bc14:	20000080 	.word	0x20000080
 800bc18:	08011124 	.word	0x08011124
 800bc1c:	08011144 	.word	0x08011144
 800bc20:	08011104 	.word	0x08011104

0800bc24 <abort>:
 800bc24:	b508      	push	{r3, lr}
 800bc26:	2006      	movs	r0, #6
 800bc28:	f002 f92a 	bl	800de80 <raise>
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	f7f5 fb4b 	bl	80012c8 <_exit>
	...

0800bc34 <_close_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4d06      	ldr	r5, [pc, #24]	; (800bc50 <_close_r+0x1c>)
 800bc38:	2300      	movs	r3, #0
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	602b      	str	r3, [r5, #0]
 800bc40:	f7f5 fb85 	bl	800134e <_close>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d102      	bne.n	800bc4e <_close_r+0x1a>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	b103      	cbz	r3, 800bc4e <_close_r+0x1a>
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	20001b18 	.word	0x20001b18

0800bc54 <quorem>:
 800bc54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	6903      	ldr	r3, [r0, #16]
 800bc5a:	690c      	ldr	r4, [r1, #16]
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	4607      	mov	r7, r0
 800bc60:	f2c0 8081 	blt.w	800bd66 <quorem+0x112>
 800bc64:	3c01      	subs	r4, #1
 800bc66:	f101 0814 	add.w	r8, r1, #20
 800bc6a:	f100 0514 	add.w	r5, r0, #20
 800bc6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc72:	9301      	str	r3, [sp, #4]
 800bc74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc88:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc8c:	d331      	bcc.n	800bcf2 <quorem+0x9e>
 800bc8e:	f04f 0e00 	mov.w	lr, #0
 800bc92:	4640      	mov	r0, r8
 800bc94:	46ac      	mov	ip, r5
 800bc96:	46f2      	mov	sl, lr
 800bc98:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc9c:	b293      	uxth	r3, r2
 800bc9e:	fb06 e303 	mla	r3, r6, r3, lr
 800bca2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	ebaa 0303 	sub.w	r3, sl, r3
 800bcac:	f8dc a000 	ldr.w	sl, [ip]
 800bcb0:	0c12      	lsrs	r2, r2, #16
 800bcb2:	fa13 f38a 	uxtah	r3, r3, sl
 800bcb6:	fb06 e202 	mla	r2, r6, r2, lr
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	9b00      	ldr	r3, [sp, #0]
 800bcbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bcc2:	b292      	uxth	r2, r2
 800bcc4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bcc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bccc:	f8bd 3000 	ldrh.w	r3, [sp]
 800bcd0:	4581      	cmp	r9, r0
 800bcd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd6:	f84c 3b04 	str.w	r3, [ip], #4
 800bcda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcde:	d2db      	bcs.n	800bc98 <quorem+0x44>
 800bce0:	f855 300b 	ldr.w	r3, [r5, fp]
 800bce4:	b92b      	cbnz	r3, 800bcf2 <quorem+0x9e>
 800bce6:	9b01      	ldr	r3, [sp, #4]
 800bce8:	3b04      	subs	r3, #4
 800bcea:	429d      	cmp	r5, r3
 800bcec:	461a      	mov	r2, r3
 800bcee:	d32e      	bcc.n	800bd4e <quorem+0xfa>
 800bcf0:	613c      	str	r4, [r7, #16]
 800bcf2:	4638      	mov	r0, r7
 800bcf4:	f001 fd00 	bl	800d6f8 <__mcmp>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	db24      	blt.n	800bd46 <quorem+0xf2>
 800bcfc:	3601      	adds	r6, #1
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f04f 0c00 	mov.w	ip, #0
 800bd04:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd08:	f8d0 e000 	ldr.w	lr, [r0]
 800bd0c:	b293      	uxth	r3, r2
 800bd0e:	ebac 0303 	sub.w	r3, ip, r3
 800bd12:	0c12      	lsrs	r2, r2, #16
 800bd14:	fa13 f38e 	uxtah	r3, r3, lr
 800bd18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd26:	45c1      	cmp	r9, r8
 800bd28:	f840 3b04 	str.w	r3, [r0], #4
 800bd2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd30:	d2e8      	bcs.n	800bd04 <quorem+0xb0>
 800bd32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd3a:	b922      	cbnz	r2, 800bd46 <quorem+0xf2>
 800bd3c:	3b04      	subs	r3, #4
 800bd3e:	429d      	cmp	r5, r3
 800bd40:	461a      	mov	r2, r3
 800bd42:	d30a      	bcc.n	800bd5a <quorem+0x106>
 800bd44:	613c      	str	r4, [r7, #16]
 800bd46:	4630      	mov	r0, r6
 800bd48:	b003      	add	sp, #12
 800bd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4e:	6812      	ldr	r2, [r2, #0]
 800bd50:	3b04      	subs	r3, #4
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	d1cc      	bne.n	800bcf0 <quorem+0x9c>
 800bd56:	3c01      	subs	r4, #1
 800bd58:	e7c7      	b.n	800bcea <quorem+0x96>
 800bd5a:	6812      	ldr	r2, [r2, #0]
 800bd5c:	3b04      	subs	r3, #4
 800bd5e:	2a00      	cmp	r2, #0
 800bd60:	d1f0      	bne.n	800bd44 <quorem+0xf0>
 800bd62:	3c01      	subs	r4, #1
 800bd64:	e7eb      	b.n	800bd3e <quorem+0xea>
 800bd66:	2000      	movs	r0, #0
 800bd68:	e7ee      	b.n	800bd48 <quorem+0xf4>
 800bd6a:	0000      	movs	r0, r0
 800bd6c:	0000      	movs	r0, r0
	...

0800bd70 <_dtoa_r>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	ed2d 8b04 	vpush	{d8-d9}
 800bd78:	ec57 6b10 	vmov	r6, r7, d0
 800bd7c:	b093      	sub	sp, #76	; 0x4c
 800bd7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd84:	9106      	str	r1, [sp, #24]
 800bd86:	ee10 aa10 	vmov	sl, s0
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd8e:	930c      	str	r3, [sp, #48]	; 0x30
 800bd90:	46bb      	mov	fp, r7
 800bd92:	b975      	cbnz	r5, 800bdb2 <_dtoa_r+0x42>
 800bd94:	2010      	movs	r0, #16
 800bd96:	f7fd fd61 	bl	800985c <malloc>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	6260      	str	r0, [r4, #36]	; 0x24
 800bd9e:	b920      	cbnz	r0, 800bdaa <_dtoa_r+0x3a>
 800bda0:	4ba7      	ldr	r3, [pc, #668]	; (800c040 <_dtoa_r+0x2d0>)
 800bda2:	21ea      	movs	r1, #234	; 0xea
 800bda4:	48a7      	ldr	r0, [pc, #668]	; (800c044 <_dtoa_r+0x2d4>)
 800bda6:	f7fd fa7b 	bl	80092a0 <__assert_func>
 800bdaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bdae:	6005      	str	r5, [r0, #0]
 800bdb0:	60c5      	str	r5, [r0, #12]
 800bdb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdb4:	6819      	ldr	r1, [r3, #0]
 800bdb6:	b151      	cbz	r1, 800bdce <_dtoa_r+0x5e>
 800bdb8:	685a      	ldr	r2, [r3, #4]
 800bdba:	604a      	str	r2, [r1, #4]
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	4093      	lsls	r3, r2
 800bdc0:	608b      	str	r3, [r1, #8]
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f001 fa0c 	bl	800d1e0 <_Bfree>
 800bdc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	1e3b      	subs	r3, r7, #0
 800bdd0:	bfaa      	itet	ge
 800bdd2:	2300      	movge	r3, #0
 800bdd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bdd8:	f8c8 3000 	strge.w	r3, [r8]
 800bddc:	4b9a      	ldr	r3, [pc, #616]	; (800c048 <_dtoa_r+0x2d8>)
 800bdde:	bfbc      	itt	lt
 800bde0:	2201      	movlt	r2, #1
 800bde2:	f8c8 2000 	strlt.w	r2, [r8]
 800bde6:	ea33 030b 	bics.w	r3, r3, fp
 800bdea:	d11b      	bne.n	800be24 <_dtoa_r+0xb4>
 800bdec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdee:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdf8:	4333      	orrs	r3, r6
 800bdfa:	f000 8592 	beq.w	800c922 <_dtoa_r+0xbb2>
 800bdfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be00:	b963      	cbnz	r3, 800be1c <_dtoa_r+0xac>
 800be02:	4b92      	ldr	r3, [pc, #584]	; (800c04c <_dtoa_r+0x2dc>)
 800be04:	e022      	b.n	800be4c <_dtoa_r+0xdc>
 800be06:	4b92      	ldr	r3, [pc, #584]	; (800c050 <_dtoa_r+0x2e0>)
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	3308      	adds	r3, #8
 800be0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	9801      	ldr	r0, [sp, #4]
 800be12:	b013      	add	sp, #76	; 0x4c
 800be14:	ecbd 8b04 	vpop	{d8-d9}
 800be18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1c:	4b8b      	ldr	r3, [pc, #556]	; (800c04c <_dtoa_r+0x2dc>)
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	3303      	adds	r3, #3
 800be22:	e7f3      	b.n	800be0c <_dtoa_r+0x9c>
 800be24:	2200      	movs	r2, #0
 800be26:	2300      	movs	r3, #0
 800be28:	4650      	mov	r0, sl
 800be2a:	4659      	mov	r1, fp
 800be2c:	f7f4 fe5c 	bl	8000ae8 <__aeabi_dcmpeq>
 800be30:	ec4b ab19 	vmov	d9, sl, fp
 800be34:	4680      	mov	r8, r0
 800be36:	b158      	cbz	r0, 800be50 <_dtoa_r+0xe0>
 800be38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be3a:	2301      	movs	r3, #1
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 856b 	beq.w	800c91c <_dtoa_r+0xbac>
 800be46:	4883      	ldr	r0, [pc, #524]	; (800c054 <_dtoa_r+0x2e4>)
 800be48:	6018      	str	r0, [r3, #0]
 800be4a:	1e43      	subs	r3, r0, #1
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	e7df      	b.n	800be10 <_dtoa_r+0xa0>
 800be50:	ec4b ab10 	vmov	d0, sl, fp
 800be54:	aa10      	add	r2, sp, #64	; 0x40
 800be56:	a911      	add	r1, sp, #68	; 0x44
 800be58:	4620      	mov	r0, r4
 800be5a:	f001 fd6f 	bl	800d93c <__d2b>
 800be5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800be62:	ee08 0a10 	vmov	s16, r0
 800be66:	2d00      	cmp	r5, #0
 800be68:	f000 8084 	beq.w	800bf74 <_dtoa_r+0x204>
 800be6c:	ee19 3a90 	vmov	r3, s19
 800be70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be78:	4656      	mov	r6, sl
 800be7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be86:	4b74      	ldr	r3, [pc, #464]	; (800c058 <_dtoa_r+0x2e8>)
 800be88:	2200      	movs	r2, #0
 800be8a:	4630      	mov	r0, r6
 800be8c:	4639      	mov	r1, r7
 800be8e:	f7f4 fa0b 	bl	80002a8 <__aeabi_dsub>
 800be92:	a365      	add	r3, pc, #404	; (adr r3, 800c028 <_dtoa_r+0x2b8>)
 800be94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be98:	f7f4 fbbe 	bl	8000618 <__aeabi_dmul>
 800be9c:	a364      	add	r3, pc, #400	; (adr r3, 800c030 <_dtoa_r+0x2c0>)
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	f7f4 fa03 	bl	80002ac <__adddf3>
 800bea6:	4606      	mov	r6, r0
 800bea8:	4628      	mov	r0, r5
 800beaa:	460f      	mov	r7, r1
 800beac:	f7f4 fb4a 	bl	8000544 <__aeabi_i2d>
 800beb0:	a361      	add	r3, pc, #388	; (adr r3, 800c038 <_dtoa_r+0x2c8>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 fbaf 	bl	8000618 <__aeabi_dmul>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4630      	mov	r0, r6
 800bec0:	4639      	mov	r1, r7
 800bec2:	f7f4 f9f3 	bl	80002ac <__adddf3>
 800bec6:	4606      	mov	r6, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	f7f4 fe55 	bl	8000b78 <__aeabi_d2iz>
 800bece:	2200      	movs	r2, #0
 800bed0:	9000      	str	r0, [sp, #0]
 800bed2:	2300      	movs	r3, #0
 800bed4:	4630      	mov	r0, r6
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 fe10 	bl	8000afc <__aeabi_dcmplt>
 800bedc:	b150      	cbz	r0, 800bef4 <_dtoa_r+0x184>
 800bede:	9800      	ldr	r0, [sp, #0]
 800bee0:	f7f4 fb30 	bl	8000544 <__aeabi_i2d>
 800bee4:	4632      	mov	r2, r6
 800bee6:	463b      	mov	r3, r7
 800bee8:	f7f4 fdfe 	bl	8000ae8 <__aeabi_dcmpeq>
 800beec:	b910      	cbnz	r0, 800bef4 <_dtoa_r+0x184>
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	9b00      	ldr	r3, [sp, #0]
 800bef6:	2b16      	cmp	r3, #22
 800bef8:	d85a      	bhi.n	800bfb0 <_dtoa_r+0x240>
 800befa:	9a00      	ldr	r2, [sp, #0]
 800befc:	4b57      	ldr	r3, [pc, #348]	; (800c05c <_dtoa_r+0x2ec>)
 800befe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	ec51 0b19 	vmov	r0, r1, d9
 800bf0a:	f7f4 fdf7 	bl	8000afc <__aeabi_dcmplt>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d050      	beq.n	800bfb4 <_dtoa_r+0x244>
 800bf12:	9b00      	ldr	r3, [sp, #0]
 800bf14:	3b01      	subs	r3, #1
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf1e:	1b5d      	subs	r5, r3, r5
 800bf20:	1e6b      	subs	r3, r5, #1
 800bf22:	9305      	str	r3, [sp, #20]
 800bf24:	bf45      	ittet	mi
 800bf26:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf2a:	9304      	strmi	r3, [sp, #16]
 800bf2c:	2300      	movpl	r3, #0
 800bf2e:	2300      	movmi	r3, #0
 800bf30:	bf4c      	ite	mi
 800bf32:	9305      	strmi	r3, [sp, #20]
 800bf34:	9304      	strpl	r3, [sp, #16]
 800bf36:	9b00      	ldr	r3, [sp, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	db3d      	blt.n	800bfb8 <_dtoa_r+0x248>
 800bf3c:	9b05      	ldr	r3, [sp, #20]
 800bf3e:	9a00      	ldr	r2, [sp, #0]
 800bf40:	920a      	str	r2, [sp, #40]	; 0x28
 800bf42:	4413      	add	r3, r2
 800bf44:	9305      	str	r3, [sp, #20]
 800bf46:	2300      	movs	r3, #0
 800bf48:	9307      	str	r3, [sp, #28]
 800bf4a:	9b06      	ldr	r3, [sp, #24]
 800bf4c:	2b09      	cmp	r3, #9
 800bf4e:	f200 8089 	bhi.w	800c064 <_dtoa_r+0x2f4>
 800bf52:	2b05      	cmp	r3, #5
 800bf54:	bfc4      	itt	gt
 800bf56:	3b04      	subgt	r3, #4
 800bf58:	9306      	strgt	r3, [sp, #24]
 800bf5a:	9b06      	ldr	r3, [sp, #24]
 800bf5c:	f1a3 0302 	sub.w	r3, r3, #2
 800bf60:	bfcc      	ite	gt
 800bf62:	2500      	movgt	r5, #0
 800bf64:	2501      	movle	r5, #1
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	f200 8087 	bhi.w	800c07a <_dtoa_r+0x30a>
 800bf6c:	e8df f003 	tbb	[pc, r3]
 800bf70:	59383a2d 	.word	0x59383a2d
 800bf74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf78:	441d      	add	r5, r3
 800bf7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf7e:	2b20      	cmp	r3, #32
 800bf80:	bfc1      	itttt	gt
 800bf82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf8a:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf92:	bfda      	itte	le
 800bf94:	f1c3 0320 	rsble	r3, r3, #32
 800bf98:	fa06 f003 	lslle.w	r0, r6, r3
 800bf9c:	4318      	orrgt	r0, r3
 800bf9e:	f7f4 fac1 	bl	8000524 <__aeabi_ui2d>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bfaa:	3d01      	subs	r5, #1
 800bfac:	930e      	str	r3, [sp, #56]	; 0x38
 800bfae:	e76a      	b.n	800be86 <_dtoa_r+0x116>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e7b2      	b.n	800bf1a <_dtoa_r+0x1aa>
 800bfb4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bfb6:	e7b1      	b.n	800bf1c <_dtoa_r+0x1ac>
 800bfb8:	9b04      	ldr	r3, [sp, #16]
 800bfba:	9a00      	ldr	r2, [sp, #0]
 800bfbc:	1a9b      	subs	r3, r3, r2
 800bfbe:	9304      	str	r3, [sp, #16]
 800bfc0:	4253      	negs	r3, r2
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfc8:	e7bf      	b.n	800bf4a <_dtoa_r+0x1da>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9308      	str	r3, [sp, #32]
 800bfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dc55      	bgt.n	800c080 <_dtoa_r+0x310>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	9209      	str	r2, [sp, #36]	; 0x24
 800bfde:	e00c      	b.n	800bffa <_dtoa_r+0x28a>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e7f3      	b.n	800bfcc <_dtoa_r+0x25c>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfe8:	9308      	str	r3, [sp, #32]
 800bfea:	9b00      	ldr	r3, [sp, #0]
 800bfec:	4413      	add	r3, r2
 800bfee:	9302      	str	r3, [sp, #8]
 800bff0:	3301      	adds	r3, #1
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	bfb8      	it	lt
 800bff8:	2301      	movlt	r3, #1
 800bffa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bffc:	2200      	movs	r2, #0
 800bffe:	6042      	str	r2, [r0, #4]
 800c000:	2204      	movs	r2, #4
 800c002:	f102 0614 	add.w	r6, r2, #20
 800c006:	429e      	cmp	r6, r3
 800c008:	6841      	ldr	r1, [r0, #4]
 800c00a:	d93d      	bls.n	800c088 <_dtoa_r+0x318>
 800c00c:	4620      	mov	r0, r4
 800c00e:	f001 f8a7 	bl	800d160 <_Balloc>
 800c012:	9001      	str	r0, [sp, #4]
 800c014:	2800      	cmp	r0, #0
 800c016:	d13b      	bne.n	800c090 <_dtoa_r+0x320>
 800c018:	4b11      	ldr	r3, [pc, #68]	; (800c060 <_dtoa_r+0x2f0>)
 800c01a:	4602      	mov	r2, r0
 800c01c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c020:	e6c0      	b.n	800bda4 <_dtoa_r+0x34>
 800c022:	2301      	movs	r3, #1
 800c024:	e7df      	b.n	800bfe6 <_dtoa_r+0x276>
 800c026:	bf00      	nop
 800c028:	636f4361 	.word	0x636f4361
 800c02c:	3fd287a7 	.word	0x3fd287a7
 800c030:	8b60c8b3 	.word	0x8b60c8b3
 800c034:	3fc68a28 	.word	0x3fc68a28
 800c038:	509f79fb 	.word	0x509f79fb
 800c03c:	3fd34413 	.word	0x3fd34413
 800c040:	08011215 	.word	0x08011215
 800c044:	0801122c 	.word	0x0801122c
 800c048:	7ff00000 	.word	0x7ff00000
 800c04c:	08011211 	.word	0x08011211
 800c050:	08011208 	.word	0x08011208
 800c054:	0801118a 	.word	0x0801118a
 800c058:	3ff80000 	.word	0x3ff80000
 800c05c:	08011398 	.word	0x08011398
 800c060:	08011287 	.word	0x08011287
 800c064:	2501      	movs	r5, #1
 800c066:	2300      	movs	r3, #0
 800c068:	9306      	str	r3, [sp, #24]
 800c06a:	9508      	str	r5, [sp, #32]
 800c06c:	f04f 33ff 	mov.w	r3, #4294967295
 800c070:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c074:	2200      	movs	r2, #0
 800c076:	2312      	movs	r3, #18
 800c078:	e7b0      	b.n	800bfdc <_dtoa_r+0x26c>
 800c07a:	2301      	movs	r3, #1
 800c07c:	9308      	str	r3, [sp, #32]
 800c07e:	e7f5      	b.n	800c06c <_dtoa_r+0x2fc>
 800c080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c082:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c086:	e7b8      	b.n	800bffa <_dtoa_r+0x28a>
 800c088:	3101      	adds	r1, #1
 800c08a:	6041      	str	r1, [r0, #4]
 800c08c:	0052      	lsls	r2, r2, #1
 800c08e:	e7b8      	b.n	800c002 <_dtoa_r+0x292>
 800c090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c092:	9a01      	ldr	r2, [sp, #4]
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	9b03      	ldr	r3, [sp, #12]
 800c098:	2b0e      	cmp	r3, #14
 800c09a:	f200 809d 	bhi.w	800c1d8 <_dtoa_r+0x468>
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	f000 809a 	beq.w	800c1d8 <_dtoa_r+0x468>
 800c0a4:	9b00      	ldr	r3, [sp, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	dd32      	ble.n	800c110 <_dtoa_r+0x3a0>
 800c0aa:	4ab7      	ldr	r2, [pc, #732]	; (800c388 <_dtoa_r+0x618>)
 800c0ac:	f003 030f 	and.w	r3, r3, #15
 800c0b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0b8:	9b00      	ldr	r3, [sp, #0]
 800c0ba:	05d8      	lsls	r0, r3, #23
 800c0bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c0c0:	d516      	bpl.n	800c0f0 <_dtoa_r+0x380>
 800c0c2:	4bb2      	ldr	r3, [pc, #712]	; (800c38c <_dtoa_r+0x61c>)
 800c0c4:	ec51 0b19 	vmov	r0, r1, d9
 800c0c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0cc:	f7f4 fbce 	bl	800086c <__aeabi_ddiv>
 800c0d0:	f007 070f 	and.w	r7, r7, #15
 800c0d4:	4682      	mov	sl, r0
 800c0d6:	468b      	mov	fp, r1
 800c0d8:	2503      	movs	r5, #3
 800c0da:	4eac      	ldr	r6, [pc, #688]	; (800c38c <_dtoa_r+0x61c>)
 800c0dc:	b957      	cbnz	r7, 800c0f4 <_dtoa_r+0x384>
 800c0de:	4642      	mov	r2, r8
 800c0e0:	464b      	mov	r3, r9
 800c0e2:	4650      	mov	r0, sl
 800c0e4:	4659      	mov	r1, fp
 800c0e6:	f7f4 fbc1 	bl	800086c <__aeabi_ddiv>
 800c0ea:	4682      	mov	sl, r0
 800c0ec:	468b      	mov	fp, r1
 800c0ee:	e028      	b.n	800c142 <_dtoa_r+0x3d2>
 800c0f0:	2502      	movs	r5, #2
 800c0f2:	e7f2      	b.n	800c0da <_dtoa_r+0x36a>
 800c0f4:	07f9      	lsls	r1, r7, #31
 800c0f6:	d508      	bpl.n	800c10a <_dtoa_r+0x39a>
 800c0f8:	4640      	mov	r0, r8
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c100:	f7f4 fa8a 	bl	8000618 <__aeabi_dmul>
 800c104:	3501      	adds	r5, #1
 800c106:	4680      	mov	r8, r0
 800c108:	4689      	mov	r9, r1
 800c10a:	107f      	asrs	r7, r7, #1
 800c10c:	3608      	adds	r6, #8
 800c10e:	e7e5      	b.n	800c0dc <_dtoa_r+0x36c>
 800c110:	f000 809b 	beq.w	800c24a <_dtoa_r+0x4da>
 800c114:	9b00      	ldr	r3, [sp, #0]
 800c116:	4f9d      	ldr	r7, [pc, #628]	; (800c38c <_dtoa_r+0x61c>)
 800c118:	425e      	negs	r6, r3
 800c11a:	4b9b      	ldr	r3, [pc, #620]	; (800c388 <_dtoa_r+0x618>)
 800c11c:	f006 020f 	and.w	r2, r6, #15
 800c120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	ec51 0b19 	vmov	r0, r1, d9
 800c12c:	f7f4 fa74 	bl	8000618 <__aeabi_dmul>
 800c130:	1136      	asrs	r6, r6, #4
 800c132:	4682      	mov	sl, r0
 800c134:	468b      	mov	fp, r1
 800c136:	2300      	movs	r3, #0
 800c138:	2502      	movs	r5, #2
 800c13a:	2e00      	cmp	r6, #0
 800c13c:	d17a      	bne.n	800c234 <_dtoa_r+0x4c4>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1d3      	bne.n	800c0ea <_dtoa_r+0x37a>
 800c142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c144:	2b00      	cmp	r3, #0
 800c146:	f000 8082 	beq.w	800c24e <_dtoa_r+0x4de>
 800c14a:	4b91      	ldr	r3, [pc, #580]	; (800c390 <_dtoa_r+0x620>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	4650      	mov	r0, sl
 800c150:	4659      	mov	r1, fp
 800c152:	f7f4 fcd3 	bl	8000afc <__aeabi_dcmplt>
 800c156:	2800      	cmp	r0, #0
 800c158:	d079      	beq.n	800c24e <_dtoa_r+0x4de>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d076      	beq.n	800c24e <_dtoa_r+0x4de>
 800c160:	9b02      	ldr	r3, [sp, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	dd36      	ble.n	800c1d4 <_dtoa_r+0x464>
 800c166:	9b00      	ldr	r3, [sp, #0]
 800c168:	4650      	mov	r0, sl
 800c16a:	4659      	mov	r1, fp
 800c16c:	1e5f      	subs	r7, r3, #1
 800c16e:	2200      	movs	r2, #0
 800c170:	4b88      	ldr	r3, [pc, #544]	; (800c394 <_dtoa_r+0x624>)
 800c172:	f7f4 fa51 	bl	8000618 <__aeabi_dmul>
 800c176:	9e02      	ldr	r6, [sp, #8]
 800c178:	4682      	mov	sl, r0
 800c17a:	468b      	mov	fp, r1
 800c17c:	3501      	adds	r5, #1
 800c17e:	4628      	mov	r0, r5
 800c180:	f7f4 f9e0 	bl	8000544 <__aeabi_i2d>
 800c184:	4652      	mov	r2, sl
 800c186:	465b      	mov	r3, fp
 800c188:	f7f4 fa46 	bl	8000618 <__aeabi_dmul>
 800c18c:	4b82      	ldr	r3, [pc, #520]	; (800c398 <_dtoa_r+0x628>)
 800c18e:	2200      	movs	r2, #0
 800c190:	f7f4 f88c 	bl	80002ac <__adddf3>
 800c194:	46d0      	mov	r8, sl
 800c196:	46d9      	mov	r9, fp
 800c198:	4682      	mov	sl, r0
 800c19a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	d158      	bne.n	800c254 <_dtoa_r+0x4e4>
 800c1a2:	4b7e      	ldr	r3, [pc, #504]	; (800c39c <_dtoa_r+0x62c>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	f7f4 f87d 	bl	80002a8 <__aeabi_dsub>
 800c1ae:	4652      	mov	r2, sl
 800c1b0:	465b      	mov	r3, fp
 800c1b2:	4680      	mov	r8, r0
 800c1b4:	4689      	mov	r9, r1
 800c1b6:	f7f4 fcbf 	bl	8000b38 <__aeabi_dcmpgt>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	f040 8295 	bne.w	800c6ea <_dtoa_r+0x97a>
 800c1c0:	4652      	mov	r2, sl
 800c1c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	f7f4 fc97 	bl	8000afc <__aeabi_dcmplt>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f040 8289 	bne.w	800c6e6 <_dtoa_r+0x976>
 800c1d4:	ec5b ab19 	vmov	sl, fp, d9
 800c1d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f2c0 8148 	blt.w	800c470 <_dtoa_r+0x700>
 800c1e0:	9a00      	ldr	r2, [sp, #0]
 800c1e2:	2a0e      	cmp	r2, #14
 800c1e4:	f300 8144 	bgt.w	800c470 <_dtoa_r+0x700>
 800c1e8:	4b67      	ldr	r3, [pc, #412]	; (800c388 <_dtoa_r+0x618>)
 800c1ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f280 80d5 	bge.w	800c3a4 <_dtoa_r+0x634>
 800c1fa:	9b03      	ldr	r3, [sp, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f300 80d1 	bgt.w	800c3a4 <_dtoa_r+0x634>
 800c202:	f040 826f 	bne.w	800c6e4 <_dtoa_r+0x974>
 800c206:	4b65      	ldr	r3, [pc, #404]	; (800c39c <_dtoa_r+0x62c>)
 800c208:	2200      	movs	r2, #0
 800c20a:	4640      	mov	r0, r8
 800c20c:	4649      	mov	r1, r9
 800c20e:	f7f4 fa03 	bl	8000618 <__aeabi_dmul>
 800c212:	4652      	mov	r2, sl
 800c214:	465b      	mov	r3, fp
 800c216:	f7f4 fc85 	bl	8000b24 <__aeabi_dcmpge>
 800c21a:	9e03      	ldr	r6, [sp, #12]
 800c21c:	4637      	mov	r7, r6
 800c21e:	2800      	cmp	r0, #0
 800c220:	f040 8245 	bne.w	800c6ae <_dtoa_r+0x93e>
 800c224:	9d01      	ldr	r5, [sp, #4]
 800c226:	2331      	movs	r3, #49	; 0x31
 800c228:	f805 3b01 	strb.w	r3, [r5], #1
 800c22c:	9b00      	ldr	r3, [sp, #0]
 800c22e:	3301      	adds	r3, #1
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	e240      	b.n	800c6b6 <_dtoa_r+0x946>
 800c234:	07f2      	lsls	r2, r6, #31
 800c236:	d505      	bpl.n	800c244 <_dtoa_r+0x4d4>
 800c238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c23c:	f7f4 f9ec 	bl	8000618 <__aeabi_dmul>
 800c240:	3501      	adds	r5, #1
 800c242:	2301      	movs	r3, #1
 800c244:	1076      	asrs	r6, r6, #1
 800c246:	3708      	adds	r7, #8
 800c248:	e777      	b.n	800c13a <_dtoa_r+0x3ca>
 800c24a:	2502      	movs	r5, #2
 800c24c:	e779      	b.n	800c142 <_dtoa_r+0x3d2>
 800c24e:	9f00      	ldr	r7, [sp, #0]
 800c250:	9e03      	ldr	r6, [sp, #12]
 800c252:	e794      	b.n	800c17e <_dtoa_r+0x40e>
 800c254:	9901      	ldr	r1, [sp, #4]
 800c256:	4b4c      	ldr	r3, [pc, #304]	; (800c388 <_dtoa_r+0x618>)
 800c258:	4431      	add	r1, r6
 800c25a:	910d      	str	r1, [sp, #52]	; 0x34
 800c25c:	9908      	ldr	r1, [sp, #32]
 800c25e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c262:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c266:	2900      	cmp	r1, #0
 800c268:	d043      	beq.n	800c2f2 <_dtoa_r+0x582>
 800c26a:	494d      	ldr	r1, [pc, #308]	; (800c3a0 <_dtoa_r+0x630>)
 800c26c:	2000      	movs	r0, #0
 800c26e:	f7f4 fafd 	bl	800086c <__aeabi_ddiv>
 800c272:	4652      	mov	r2, sl
 800c274:	465b      	mov	r3, fp
 800c276:	f7f4 f817 	bl	80002a8 <__aeabi_dsub>
 800c27a:	9d01      	ldr	r5, [sp, #4]
 800c27c:	4682      	mov	sl, r0
 800c27e:	468b      	mov	fp, r1
 800c280:	4649      	mov	r1, r9
 800c282:	4640      	mov	r0, r8
 800c284:	f7f4 fc78 	bl	8000b78 <__aeabi_d2iz>
 800c288:	4606      	mov	r6, r0
 800c28a:	f7f4 f95b 	bl	8000544 <__aeabi_i2d>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	4640      	mov	r0, r8
 800c294:	4649      	mov	r1, r9
 800c296:	f7f4 f807 	bl	80002a8 <__aeabi_dsub>
 800c29a:	3630      	adds	r6, #48	; 0x30
 800c29c:	f805 6b01 	strb.w	r6, [r5], #1
 800c2a0:	4652      	mov	r2, sl
 800c2a2:	465b      	mov	r3, fp
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	f7f4 fc28 	bl	8000afc <__aeabi_dcmplt>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d163      	bne.n	800c378 <_dtoa_r+0x608>
 800c2b0:	4642      	mov	r2, r8
 800c2b2:	464b      	mov	r3, r9
 800c2b4:	4936      	ldr	r1, [pc, #216]	; (800c390 <_dtoa_r+0x620>)
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	f7f3 fff6 	bl	80002a8 <__aeabi_dsub>
 800c2bc:	4652      	mov	r2, sl
 800c2be:	465b      	mov	r3, fp
 800c2c0:	f7f4 fc1c 	bl	8000afc <__aeabi_dcmplt>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	f040 80b5 	bne.w	800c434 <_dtoa_r+0x6c4>
 800c2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2cc:	429d      	cmp	r5, r3
 800c2ce:	d081      	beq.n	800c1d4 <_dtoa_r+0x464>
 800c2d0:	4b30      	ldr	r3, [pc, #192]	; (800c394 <_dtoa_r+0x624>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	4650      	mov	r0, sl
 800c2d6:	4659      	mov	r1, fp
 800c2d8:	f7f4 f99e 	bl	8000618 <__aeabi_dmul>
 800c2dc:	4b2d      	ldr	r3, [pc, #180]	; (800c394 <_dtoa_r+0x624>)
 800c2de:	4682      	mov	sl, r0
 800c2e0:	468b      	mov	fp, r1
 800c2e2:	4640      	mov	r0, r8
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f7f4 f996 	bl	8000618 <__aeabi_dmul>
 800c2ec:	4680      	mov	r8, r0
 800c2ee:	4689      	mov	r9, r1
 800c2f0:	e7c6      	b.n	800c280 <_dtoa_r+0x510>
 800c2f2:	4650      	mov	r0, sl
 800c2f4:	4659      	mov	r1, fp
 800c2f6:	f7f4 f98f 	bl	8000618 <__aeabi_dmul>
 800c2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2fc:	9d01      	ldr	r5, [sp, #4]
 800c2fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c300:	4682      	mov	sl, r0
 800c302:	468b      	mov	fp, r1
 800c304:	4649      	mov	r1, r9
 800c306:	4640      	mov	r0, r8
 800c308:	f7f4 fc36 	bl	8000b78 <__aeabi_d2iz>
 800c30c:	4606      	mov	r6, r0
 800c30e:	f7f4 f919 	bl	8000544 <__aeabi_i2d>
 800c312:	3630      	adds	r6, #48	; 0x30
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	4640      	mov	r0, r8
 800c31a:	4649      	mov	r1, r9
 800c31c:	f7f3 ffc4 	bl	80002a8 <__aeabi_dsub>
 800c320:	f805 6b01 	strb.w	r6, [r5], #1
 800c324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c326:	429d      	cmp	r5, r3
 800c328:	4680      	mov	r8, r0
 800c32a:	4689      	mov	r9, r1
 800c32c:	f04f 0200 	mov.w	r2, #0
 800c330:	d124      	bne.n	800c37c <_dtoa_r+0x60c>
 800c332:	4b1b      	ldr	r3, [pc, #108]	; (800c3a0 <_dtoa_r+0x630>)
 800c334:	4650      	mov	r0, sl
 800c336:	4659      	mov	r1, fp
 800c338:	f7f3 ffb8 	bl	80002ac <__adddf3>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4640      	mov	r0, r8
 800c342:	4649      	mov	r1, r9
 800c344:	f7f4 fbf8 	bl	8000b38 <__aeabi_dcmpgt>
 800c348:	2800      	cmp	r0, #0
 800c34a:	d173      	bne.n	800c434 <_dtoa_r+0x6c4>
 800c34c:	4652      	mov	r2, sl
 800c34e:	465b      	mov	r3, fp
 800c350:	4913      	ldr	r1, [pc, #76]	; (800c3a0 <_dtoa_r+0x630>)
 800c352:	2000      	movs	r0, #0
 800c354:	f7f3 ffa8 	bl	80002a8 <__aeabi_dsub>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	4640      	mov	r0, r8
 800c35e:	4649      	mov	r1, r9
 800c360:	f7f4 fbcc 	bl	8000afc <__aeabi_dcmplt>
 800c364:	2800      	cmp	r0, #0
 800c366:	f43f af35 	beq.w	800c1d4 <_dtoa_r+0x464>
 800c36a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c36c:	1e6b      	subs	r3, r5, #1
 800c36e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c370:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c374:	2b30      	cmp	r3, #48	; 0x30
 800c376:	d0f8      	beq.n	800c36a <_dtoa_r+0x5fa>
 800c378:	9700      	str	r7, [sp, #0]
 800c37a:	e049      	b.n	800c410 <_dtoa_r+0x6a0>
 800c37c:	4b05      	ldr	r3, [pc, #20]	; (800c394 <_dtoa_r+0x624>)
 800c37e:	f7f4 f94b 	bl	8000618 <__aeabi_dmul>
 800c382:	4680      	mov	r8, r0
 800c384:	4689      	mov	r9, r1
 800c386:	e7bd      	b.n	800c304 <_dtoa_r+0x594>
 800c388:	08011398 	.word	0x08011398
 800c38c:	08011370 	.word	0x08011370
 800c390:	3ff00000 	.word	0x3ff00000
 800c394:	40240000 	.word	0x40240000
 800c398:	401c0000 	.word	0x401c0000
 800c39c:	40140000 	.word	0x40140000
 800c3a0:	3fe00000 	.word	0x3fe00000
 800c3a4:	9d01      	ldr	r5, [sp, #4]
 800c3a6:	4656      	mov	r6, sl
 800c3a8:	465f      	mov	r7, fp
 800c3aa:	4642      	mov	r2, r8
 800c3ac:	464b      	mov	r3, r9
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	4639      	mov	r1, r7
 800c3b2:	f7f4 fa5b 	bl	800086c <__aeabi_ddiv>
 800c3b6:	f7f4 fbdf 	bl	8000b78 <__aeabi_d2iz>
 800c3ba:	4682      	mov	sl, r0
 800c3bc:	f7f4 f8c2 	bl	8000544 <__aeabi_i2d>
 800c3c0:	4642      	mov	r2, r8
 800c3c2:	464b      	mov	r3, r9
 800c3c4:	f7f4 f928 	bl	8000618 <__aeabi_dmul>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c3d4:	f7f3 ff68 	bl	80002a8 <__aeabi_dsub>
 800c3d8:	f805 6b01 	strb.w	r6, [r5], #1
 800c3dc:	9e01      	ldr	r6, [sp, #4]
 800c3de:	9f03      	ldr	r7, [sp, #12]
 800c3e0:	1bae      	subs	r6, r5, r6
 800c3e2:	42b7      	cmp	r7, r6
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	d135      	bne.n	800c456 <_dtoa_r+0x6e6>
 800c3ea:	f7f3 ff5f 	bl	80002ac <__adddf3>
 800c3ee:	4642      	mov	r2, r8
 800c3f0:	464b      	mov	r3, r9
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460f      	mov	r7, r1
 800c3f6:	f7f4 fb9f 	bl	8000b38 <__aeabi_dcmpgt>
 800c3fa:	b9d0      	cbnz	r0, 800c432 <_dtoa_r+0x6c2>
 800c3fc:	4642      	mov	r2, r8
 800c3fe:	464b      	mov	r3, r9
 800c400:	4630      	mov	r0, r6
 800c402:	4639      	mov	r1, r7
 800c404:	f7f4 fb70 	bl	8000ae8 <__aeabi_dcmpeq>
 800c408:	b110      	cbz	r0, 800c410 <_dtoa_r+0x6a0>
 800c40a:	f01a 0f01 	tst.w	sl, #1
 800c40e:	d110      	bne.n	800c432 <_dtoa_r+0x6c2>
 800c410:	4620      	mov	r0, r4
 800c412:	ee18 1a10 	vmov	r1, s16
 800c416:	f000 fee3 	bl	800d1e0 <_Bfree>
 800c41a:	2300      	movs	r3, #0
 800c41c:	9800      	ldr	r0, [sp, #0]
 800c41e:	702b      	strb	r3, [r5, #0]
 800c420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c422:	3001      	adds	r0, #1
 800c424:	6018      	str	r0, [r3, #0]
 800c426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f43f acf1 	beq.w	800be10 <_dtoa_r+0xa0>
 800c42e:	601d      	str	r5, [r3, #0]
 800c430:	e4ee      	b.n	800be10 <_dtoa_r+0xa0>
 800c432:	9f00      	ldr	r7, [sp, #0]
 800c434:	462b      	mov	r3, r5
 800c436:	461d      	mov	r5, r3
 800c438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c43c:	2a39      	cmp	r2, #57	; 0x39
 800c43e:	d106      	bne.n	800c44e <_dtoa_r+0x6de>
 800c440:	9a01      	ldr	r2, [sp, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	d1f7      	bne.n	800c436 <_dtoa_r+0x6c6>
 800c446:	9901      	ldr	r1, [sp, #4]
 800c448:	2230      	movs	r2, #48	; 0x30
 800c44a:	3701      	adds	r7, #1
 800c44c:	700a      	strb	r2, [r1, #0]
 800c44e:	781a      	ldrb	r2, [r3, #0]
 800c450:	3201      	adds	r2, #1
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	e790      	b.n	800c378 <_dtoa_r+0x608>
 800c456:	4ba6      	ldr	r3, [pc, #664]	; (800c6f0 <_dtoa_r+0x980>)
 800c458:	2200      	movs	r2, #0
 800c45a:	f7f4 f8dd 	bl	8000618 <__aeabi_dmul>
 800c45e:	2200      	movs	r2, #0
 800c460:	2300      	movs	r3, #0
 800c462:	4606      	mov	r6, r0
 800c464:	460f      	mov	r7, r1
 800c466:	f7f4 fb3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d09d      	beq.n	800c3aa <_dtoa_r+0x63a>
 800c46e:	e7cf      	b.n	800c410 <_dtoa_r+0x6a0>
 800c470:	9a08      	ldr	r2, [sp, #32]
 800c472:	2a00      	cmp	r2, #0
 800c474:	f000 80d7 	beq.w	800c626 <_dtoa_r+0x8b6>
 800c478:	9a06      	ldr	r2, [sp, #24]
 800c47a:	2a01      	cmp	r2, #1
 800c47c:	f300 80ba 	bgt.w	800c5f4 <_dtoa_r+0x884>
 800c480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c482:	2a00      	cmp	r2, #0
 800c484:	f000 80b2 	beq.w	800c5ec <_dtoa_r+0x87c>
 800c488:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c48c:	9e07      	ldr	r6, [sp, #28]
 800c48e:	9d04      	ldr	r5, [sp, #16]
 800c490:	9a04      	ldr	r2, [sp, #16]
 800c492:	441a      	add	r2, r3
 800c494:	9204      	str	r2, [sp, #16]
 800c496:	9a05      	ldr	r2, [sp, #20]
 800c498:	2101      	movs	r1, #1
 800c49a:	441a      	add	r2, r3
 800c49c:	4620      	mov	r0, r4
 800c49e:	9205      	str	r2, [sp, #20]
 800c4a0:	f000 ffa0 	bl	800d3e4 <__i2b>
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	2d00      	cmp	r5, #0
 800c4a8:	dd0c      	ble.n	800c4c4 <_dtoa_r+0x754>
 800c4aa:	9b05      	ldr	r3, [sp, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dd09      	ble.n	800c4c4 <_dtoa_r+0x754>
 800c4b0:	42ab      	cmp	r3, r5
 800c4b2:	9a04      	ldr	r2, [sp, #16]
 800c4b4:	bfa8      	it	ge
 800c4b6:	462b      	movge	r3, r5
 800c4b8:	1ad2      	subs	r2, r2, r3
 800c4ba:	9204      	str	r2, [sp, #16]
 800c4bc:	9a05      	ldr	r2, [sp, #20]
 800c4be:	1aed      	subs	r5, r5, r3
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	9305      	str	r3, [sp, #20]
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	b31b      	cbz	r3, 800c510 <_dtoa_r+0x7a0>
 800c4c8:	9b08      	ldr	r3, [sp, #32]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 80af 	beq.w	800c62e <_dtoa_r+0x8be>
 800c4d0:	2e00      	cmp	r6, #0
 800c4d2:	dd13      	ble.n	800c4fc <_dtoa_r+0x78c>
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	4632      	mov	r2, r6
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f001 f843 	bl	800d564 <__pow5mult>
 800c4de:	ee18 2a10 	vmov	r2, s16
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	4607      	mov	r7, r0
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f000 ff92 	bl	800d410 <__multiply>
 800c4ec:	ee18 1a10 	vmov	r1, s16
 800c4f0:	4680      	mov	r8, r0
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 fe74 	bl	800d1e0 <_Bfree>
 800c4f8:	ee08 8a10 	vmov	s16, r8
 800c4fc:	9b07      	ldr	r3, [sp, #28]
 800c4fe:	1b9a      	subs	r2, r3, r6
 800c500:	d006      	beq.n	800c510 <_dtoa_r+0x7a0>
 800c502:	ee18 1a10 	vmov	r1, s16
 800c506:	4620      	mov	r0, r4
 800c508:	f001 f82c 	bl	800d564 <__pow5mult>
 800c50c:	ee08 0a10 	vmov	s16, r0
 800c510:	2101      	movs	r1, #1
 800c512:	4620      	mov	r0, r4
 800c514:	f000 ff66 	bl	800d3e4 <__i2b>
 800c518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	4606      	mov	r6, r0
 800c51e:	f340 8088 	ble.w	800c632 <_dtoa_r+0x8c2>
 800c522:	461a      	mov	r2, r3
 800c524:	4601      	mov	r1, r0
 800c526:	4620      	mov	r0, r4
 800c528:	f001 f81c 	bl	800d564 <__pow5mult>
 800c52c:	9b06      	ldr	r3, [sp, #24]
 800c52e:	2b01      	cmp	r3, #1
 800c530:	4606      	mov	r6, r0
 800c532:	f340 8081 	ble.w	800c638 <_dtoa_r+0x8c8>
 800c536:	f04f 0800 	mov.w	r8, #0
 800c53a:	6933      	ldr	r3, [r6, #16]
 800c53c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c540:	6918      	ldr	r0, [r3, #16]
 800c542:	f000 feff 	bl	800d344 <__hi0bits>
 800c546:	f1c0 0020 	rsb	r0, r0, #32
 800c54a:	9b05      	ldr	r3, [sp, #20]
 800c54c:	4418      	add	r0, r3
 800c54e:	f010 001f 	ands.w	r0, r0, #31
 800c552:	f000 8092 	beq.w	800c67a <_dtoa_r+0x90a>
 800c556:	f1c0 0320 	rsb	r3, r0, #32
 800c55a:	2b04      	cmp	r3, #4
 800c55c:	f340 808a 	ble.w	800c674 <_dtoa_r+0x904>
 800c560:	f1c0 001c 	rsb	r0, r0, #28
 800c564:	9b04      	ldr	r3, [sp, #16]
 800c566:	4403      	add	r3, r0
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	9b05      	ldr	r3, [sp, #20]
 800c56c:	4403      	add	r3, r0
 800c56e:	4405      	add	r5, r0
 800c570:	9305      	str	r3, [sp, #20]
 800c572:	9b04      	ldr	r3, [sp, #16]
 800c574:	2b00      	cmp	r3, #0
 800c576:	dd07      	ble.n	800c588 <_dtoa_r+0x818>
 800c578:	ee18 1a10 	vmov	r1, s16
 800c57c:	461a      	mov	r2, r3
 800c57e:	4620      	mov	r0, r4
 800c580:	f001 f84a 	bl	800d618 <__lshift>
 800c584:	ee08 0a10 	vmov	s16, r0
 800c588:	9b05      	ldr	r3, [sp, #20]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	dd05      	ble.n	800c59a <_dtoa_r+0x82a>
 800c58e:	4631      	mov	r1, r6
 800c590:	461a      	mov	r2, r3
 800c592:	4620      	mov	r0, r4
 800c594:	f001 f840 	bl	800d618 <__lshift>
 800c598:	4606      	mov	r6, r0
 800c59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d06e      	beq.n	800c67e <_dtoa_r+0x90e>
 800c5a0:	ee18 0a10 	vmov	r0, s16
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	f001 f8a7 	bl	800d6f8 <__mcmp>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	da67      	bge.n	800c67e <_dtoa_r+0x90e>
 800c5ae:	9b00      	ldr	r3, [sp, #0]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	ee18 1a10 	vmov	r1, s16
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	220a      	movs	r2, #10
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 fe31 	bl	800d224 <__multadd>
 800c5c2:	9b08      	ldr	r3, [sp, #32]
 800c5c4:	ee08 0a10 	vmov	s16, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 81b1 	beq.w	800c930 <_dtoa_r+0xbc0>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	220a      	movs	r2, #10
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 fe25 	bl	800d224 <__multadd>
 800c5da:	9b02      	ldr	r3, [sp, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	4607      	mov	r7, r0
 800c5e0:	f300 808e 	bgt.w	800c700 <_dtoa_r+0x990>
 800c5e4:	9b06      	ldr	r3, [sp, #24]
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	dc51      	bgt.n	800c68e <_dtoa_r+0x91e>
 800c5ea:	e089      	b.n	800c700 <_dtoa_r+0x990>
 800c5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5f2:	e74b      	b.n	800c48c <_dtoa_r+0x71c>
 800c5f4:	9b03      	ldr	r3, [sp, #12]
 800c5f6:	1e5e      	subs	r6, r3, #1
 800c5f8:	9b07      	ldr	r3, [sp, #28]
 800c5fa:	42b3      	cmp	r3, r6
 800c5fc:	bfbf      	itttt	lt
 800c5fe:	9b07      	ldrlt	r3, [sp, #28]
 800c600:	9607      	strlt	r6, [sp, #28]
 800c602:	1af2      	sublt	r2, r6, r3
 800c604:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c606:	bfb6      	itet	lt
 800c608:	189b      	addlt	r3, r3, r2
 800c60a:	1b9e      	subge	r6, r3, r6
 800c60c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	bfb8      	it	lt
 800c612:	2600      	movlt	r6, #0
 800c614:	2b00      	cmp	r3, #0
 800c616:	bfb7      	itett	lt
 800c618:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c61c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c620:	1a9d      	sublt	r5, r3, r2
 800c622:	2300      	movlt	r3, #0
 800c624:	e734      	b.n	800c490 <_dtoa_r+0x720>
 800c626:	9e07      	ldr	r6, [sp, #28]
 800c628:	9d04      	ldr	r5, [sp, #16]
 800c62a:	9f08      	ldr	r7, [sp, #32]
 800c62c:	e73b      	b.n	800c4a6 <_dtoa_r+0x736>
 800c62e:	9a07      	ldr	r2, [sp, #28]
 800c630:	e767      	b.n	800c502 <_dtoa_r+0x792>
 800c632:	9b06      	ldr	r3, [sp, #24]
 800c634:	2b01      	cmp	r3, #1
 800c636:	dc18      	bgt.n	800c66a <_dtoa_r+0x8fa>
 800c638:	f1ba 0f00 	cmp.w	sl, #0
 800c63c:	d115      	bne.n	800c66a <_dtoa_r+0x8fa>
 800c63e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c642:	b993      	cbnz	r3, 800c66a <_dtoa_r+0x8fa>
 800c644:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c648:	0d1b      	lsrs	r3, r3, #20
 800c64a:	051b      	lsls	r3, r3, #20
 800c64c:	b183      	cbz	r3, 800c670 <_dtoa_r+0x900>
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	3301      	adds	r3, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	9b05      	ldr	r3, [sp, #20]
 800c656:	3301      	adds	r3, #1
 800c658:	9305      	str	r3, [sp, #20]
 800c65a:	f04f 0801 	mov.w	r8, #1
 800c65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c660:	2b00      	cmp	r3, #0
 800c662:	f47f af6a 	bne.w	800c53a <_dtoa_r+0x7ca>
 800c666:	2001      	movs	r0, #1
 800c668:	e76f      	b.n	800c54a <_dtoa_r+0x7da>
 800c66a:	f04f 0800 	mov.w	r8, #0
 800c66e:	e7f6      	b.n	800c65e <_dtoa_r+0x8ee>
 800c670:	4698      	mov	r8, r3
 800c672:	e7f4      	b.n	800c65e <_dtoa_r+0x8ee>
 800c674:	f43f af7d 	beq.w	800c572 <_dtoa_r+0x802>
 800c678:	4618      	mov	r0, r3
 800c67a:	301c      	adds	r0, #28
 800c67c:	e772      	b.n	800c564 <_dtoa_r+0x7f4>
 800c67e:	9b03      	ldr	r3, [sp, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	dc37      	bgt.n	800c6f4 <_dtoa_r+0x984>
 800c684:	9b06      	ldr	r3, [sp, #24]
 800c686:	2b02      	cmp	r3, #2
 800c688:	dd34      	ble.n	800c6f4 <_dtoa_r+0x984>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	9302      	str	r3, [sp, #8]
 800c68e:	9b02      	ldr	r3, [sp, #8]
 800c690:	b96b      	cbnz	r3, 800c6ae <_dtoa_r+0x93e>
 800c692:	4631      	mov	r1, r6
 800c694:	2205      	movs	r2, #5
 800c696:	4620      	mov	r0, r4
 800c698:	f000 fdc4 	bl	800d224 <__multadd>
 800c69c:	4601      	mov	r1, r0
 800c69e:	4606      	mov	r6, r0
 800c6a0:	ee18 0a10 	vmov	r0, s16
 800c6a4:	f001 f828 	bl	800d6f8 <__mcmp>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	f73f adbb 	bgt.w	800c224 <_dtoa_r+0x4b4>
 800c6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b0:	9d01      	ldr	r5, [sp, #4]
 800c6b2:	43db      	mvns	r3, r3
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	f04f 0800 	mov.w	r8, #0
 800c6ba:	4631      	mov	r1, r6
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 fd8f 	bl	800d1e0 <_Bfree>
 800c6c2:	2f00      	cmp	r7, #0
 800c6c4:	f43f aea4 	beq.w	800c410 <_dtoa_r+0x6a0>
 800c6c8:	f1b8 0f00 	cmp.w	r8, #0
 800c6cc:	d005      	beq.n	800c6da <_dtoa_r+0x96a>
 800c6ce:	45b8      	cmp	r8, r7
 800c6d0:	d003      	beq.n	800c6da <_dtoa_r+0x96a>
 800c6d2:	4641      	mov	r1, r8
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 fd83 	bl	800d1e0 <_Bfree>
 800c6da:	4639      	mov	r1, r7
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f000 fd7f 	bl	800d1e0 <_Bfree>
 800c6e2:	e695      	b.n	800c410 <_dtoa_r+0x6a0>
 800c6e4:	2600      	movs	r6, #0
 800c6e6:	4637      	mov	r7, r6
 800c6e8:	e7e1      	b.n	800c6ae <_dtoa_r+0x93e>
 800c6ea:	9700      	str	r7, [sp, #0]
 800c6ec:	4637      	mov	r7, r6
 800c6ee:	e599      	b.n	800c224 <_dtoa_r+0x4b4>
 800c6f0:	40240000 	.word	0x40240000
 800c6f4:	9b08      	ldr	r3, [sp, #32]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 80ca 	beq.w	800c890 <_dtoa_r+0xb20>
 800c6fc:	9b03      	ldr	r3, [sp, #12]
 800c6fe:	9302      	str	r3, [sp, #8]
 800c700:	2d00      	cmp	r5, #0
 800c702:	dd05      	ble.n	800c710 <_dtoa_r+0x9a0>
 800c704:	4639      	mov	r1, r7
 800c706:	462a      	mov	r2, r5
 800c708:	4620      	mov	r0, r4
 800c70a:	f000 ff85 	bl	800d618 <__lshift>
 800c70e:	4607      	mov	r7, r0
 800c710:	f1b8 0f00 	cmp.w	r8, #0
 800c714:	d05b      	beq.n	800c7ce <_dtoa_r+0xa5e>
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	4620      	mov	r0, r4
 800c71a:	f000 fd21 	bl	800d160 <_Balloc>
 800c71e:	4605      	mov	r5, r0
 800c720:	b928      	cbnz	r0, 800c72e <_dtoa_r+0x9be>
 800c722:	4b87      	ldr	r3, [pc, #540]	; (800c940 <_dtoa_r+0xbd0>)
 800c724:	4602      	mov	r2, r0
 800c726:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c72a:	f7ff bb3b 	b.w	800bda4 <_dtoa_r+0x34>
 800c72e:	693a      	ldr	r2, [r7, #16]
 800c730:	3202      	adds	r2, #2
 800c732:	0092      	lsls	r2, r2, #2
 800c734:	f107 010c 	add.w	r1, r7, #12
 800c738:	300c      	adds	r0, #12
 800c73a:	f7fd f89f 	bl	800987c <memcpy>
 800c73e:	2201      	movs	r2, #1
 800c740:	4629      	mov	r1, r5
 800c742:	4620      	mov	r0, r4
 800c744:	f000 ff68 	bl	800d618 <__lshift>
 800c748:	9b01      	ldr	r3, [sp, #4]
 800c74a:	f103 0901 	add.w	r9, r3, #1
 800c74e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c752:	4413      	add	r3, r2
 800c754:	9305      	str	r3, [sp, #20]
 800c756:	f00a 0301 	and.w	r3, sl, #1
 800c75a:	46b8      	mov	r8, r7
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	4607      	mov	r7, r0
 800c760:	4631      	mov	r1, r6
 800c762:	ee18 0a10 	vmov	r0, s16
 800c766:	f7ff fa75 	bl	800bc54 <quorem>
 800c76a:	4641      	mov	r1, r8
 800c76c:	9002      	str	r0, [sp, #8]
 800c76e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c772:	ee18 0a10 	vmov	r0, s16
 800c776:	f000 ffbf 	bl	800d6f8 <__mcmp>
 800c77a:	463a      	mov	r2, r7
 800c77c:	9003      	str	r0, [sp, #12]
 800c77e:	4631      	mov	r1, r6
 800c780:	4620      	mov	r0, r4
 800c782:	f000 ffd5 	bl	800d730 <__mdiff>
 800c786:	68c2      	ldr	r2, [r0, #12]
 800c788:	f109 3bff 	add.w	fp, r9, #4294967295
 800c78c:	4605      	mov	r5, r0
 800c78e:	bb02      	cbnz	r2, 800c7d2 <_dtoa_r+0xa62>
 800c790:	4601      	mov	r1, r0
 800c792:	ee18 0a10 	vmov	r0, s16
 800c796:	f000 ffaf 	bl	800d6f8 <__mcmp>
 800c79a:	4602      	mov	r2, r0
 800c79c:	4629      	mov	r1, r5
 800c79e:	4620      	mov	r0, r4
 800c7a0:	9207      	str	r2, [sp, #28]
 800c7a2:	f000 fd1d 	bl	800d1e0 <_Bfree>
 800c7a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c7aa:	ea43 0102 	orr.w	r1, r3, r2
 800c7ae:	9b04      	ldr	r3, [sp, #16]
 800c7b0:	430b      	orrs	r3, r1
 800c7b2:	464d      	mov	r5, r9
 800c7b4:	d10f      	bne.n	800c7d6 <_dtoa_r+0xa66>
 800c7b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7ba:	d02a      	beq.n	800c812 <_dtoa_r+0xaa2>
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	dd02      	ble.n	800c7c8 <_dtoa_r+0xa58>
 800c7c2:	9b02      	ldr	r3, [sp, #8]
 800c7c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c7c8:	f88b a000 	strb.w	sl, [fp]
 800c7cc:	e775      	b.n	800c6ba <_dtoa_r+0x94a>
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	e7ba      	b.n	800c748 <_dtoa_r+0x9d8>
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	e7e2      	b.n	800c79c <_dtoa_r+0xa2c>
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	db04      	blt.n	800c7e6 <_dtoa_r+0xa76>
 800c7dc:	9906      	ldr	r1, [sp, #24]
 800c7de:	430b      	orrs	r3, r1
 800c7e0:	9904      	ldr	r1, [sp, #16]
 800c7e2:	430b      	orrs	r3, r1
 800c7e4:	d122      	bne.n	800c82c <_dtoa_r+0xabc>
 800c7e6:	2a00      	cmp	r2, #0
 800c7e8:	ddee      	ble.n	800c7c8 <_dtoa_r+0xa58>
 800c7ea:	ee18 1a10 	vmov	r1, s16
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 ff11 	bl	800d618 <__lshift>
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	ee08 0a10 	vmov	s16, r0
 800c7fc:	f000 ff7c 	bl	800d6f8 <__mcmp>
 800c800:	2800      	cmp	r0, #0
 800c802:	dc03      	bgt.n	800c80c <_dtoa_r+0xa9c>
 800c804:	d1e0      	bne.n	800c7c8 <_dtoa_r+0xa58>
 800c806:	f01a 0f01 	tst.w	sl, #1
 800c80a:	d0dd      	beq.n	800c7c8 <_dtoa_r+0xa58>
 800c80c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c810:	d1d7      	bne.n	800c7c2 <_dtoa_r+0xa52>
 800c812:	2339      	movs	r3, #57	; 0x39
 800c814:	f88b 3000 	strb.w	r3, [fp]
 800c818:	462b      	mov	r3, r5
 800c81a:	461d      	mov	r5, r3
 800c81c:	3b01      	subs	r3, #1
 800c81e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c822:	2a39      	cmp	r2, #57	; 0x39
 800c824:	d071      	beq.n	800c90a <_dtoa_r+0xb9a>
 800c826:	3201      	adds	r2, #1
 800c828:	701a      	strb	r2, [r3, #0]
 800c82a:	e746      	b.n	800c6ba <_dtoa_r+0x94a>
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	dd07      	ble.n	800c840 <_dtoa_r+0xad0>
 800c830:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c834:	d0ed      	beq.n	800c812 <_dtoa_r+0xaa2>
 800c836:	f10a 0301 	add.w	r3, sl, #1
 800c83a:	f88b 3000 	strb.w	r3, [fp]
 800c83e:	e73c      	b.n	800c6ba <_dtoa_r+0x94a>
 800c840:	9b05      	ldr	r3, [sp, #20]
 800c842:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c846:	4599      	cmp	r9, r3
 800c848:	d047      	beq.n	800c8da <_dtoa_r+0xb6a>
 800c84a:	ee18 1a10 	vmov	r1, s16
 800c84e:	2300      	movs	r3, #0
 800c850:	220a      	movs	r2, #10
 800c852:	4620      	mov	r0, r4
 800c854:	f000 fce6 	bl	800d224 <__multadd>
 800c858:	45b8      	cmp	r8, r7
 800c85a:	ee08 0a10 	vmov	s16, r0
 800c85e:	f04f 0300 	mov.w	r3, #0
 800c862:	f04f 020a 	mov.w	r2, #10
 800c866:	4641      	mov	r1, r8
 800c868:	4620      	mov	r0, r4
 800c86a:	d106      	bne.n	800c87a <_dtoa_r+0xb0a>
 800c86c:	f000 fcda 	bl	800d224 <__multadd>
 800c870:	4680      	mov	r8, r0
 800c872:	4607      	mov	r7, r0
 800c874:	f109 0901 	add.w	r9, r9, #1
 800c878:	e772      	b.n	800c760 <_dtoa_r+0x9f0>
 800c87a:	f000 fcd3 	bl	800d224 <__multadd>
 800c87e:	4639      	mov	r1, r7
 800c880:	4680      	mov	r8, r0
 800c882:	2300      	movs	r3, #0
 800c884:	220a      	movs	r2, #10
 800c886:	4620      	mov	r0, r4
 800c888:	f000 fccc 	bl	800d224 <__multadd>
 800c88c:	4607      	mov	r7, r0
 800c88e:	e7f1      	b.n	800c874 <_dtoa_r+0xb04>
 800c890:	9b03      	ldr	r3, [sp, #12]
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	9d01      	ldr	r5, [sp, #4]
 800c896:	ee18 0a10 	vmov	r0, s16
 800c89a:	4631      	mov	r1, r6
 800c89c:	f7ff f9da 	bl	800bc54 <quorem>
 800c8a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c8a4:	9b01      	ldr	r3, [sp, #4]
 800c8a6:	f805 ab01 	strb.w	sl, [r5], #1
 800c8aa:	1aea      	subs	r2, r5, r3
 800c8ac:	9b02      	ldr	r3, [sp, #8]
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	dd09      	ble.n	800c8c6 <_dtoa_r+0xb56>
 800c8b2:	ee18 1a10 	vmov	r1, s16
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	220a      	movs	r2, #10
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f000 fcb2 	bl	800d224 <__multadd>
 800c8c0:	ee08 0a10 	vmov	s16, r0
 800c8c4:	e7e7      	b.n	800c896 <_dtoa_r+0xb26>
 800c8c6:	9b02      	ldr	r3, [sp, #8]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	bfc8      	it	gt
 800c8cc:	461d      	movgt	r5, r3
 800c8ce:	9b01      	ldr	r3, [sp, #4]
 800c8d0:	bfd8      	it	le
 800c8d2:	2501      	movle	r5, #1
 800c8d4:	441d      	add	r5, r3
 800c8d6:	f04f 0800 	mov.w	r8, #0
 800c8da:	ee18 1a10 	vmov	r1, s16
 800c8de:	2201      	movs	r2, #1
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fe99 	bl	800d618 <__lshift>
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	ee08 0a10 	vmov	s16, r0
 800c8ec:	f000 ff04 	bl	800d6f8 <__mcmp>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	dc91      	bgt.n	800c818 <_dtoa_r+0xaa8>
 800c8f4:	d102      	bne.n	800c8fc <_dtoa_r+0xb8c>
 800c8f6:	f01a 0f01 	tst.w	sl, #1
 800c8fa:	d18d      	bne.n	800c818 <_dtoa_r+0xaa8>
 800c8fc:	462b      	mov	r3, r5
 800c8fe:	461d      	mov	r5, r3
 800c900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c904:	2a30      	cmp	r2, #48	; 0x30
 800c906:	d0fa      	beq.n	800c8fe <_dtoa_r+0xb8e>
 800c908:	e6d7      	b.n	800c6ba <_dtoa_r+0x94a>
 800c90a:	9a01      	ldr	r2, [sp, #4]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d184      	bne.n	800c81a <_dtoa_r+0xaaa>
 800c910:	9b00      	ldr	r3, [sp, #0]
 800c912:	3301      	adds	r3, #1
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	2331      	movs	r3, #49	; 0x31
 800c918:	7013      	strb	r3, [r2, #0]
 800c91a:	e6ce      	b.n	800c6ba <_dtoa_r+0x94a>
 800c91c:	4b09      	ldr	r3, [pc, #36]	; (800c944 <_dtoa_r+0xbd4>)
 800c91e:	f7ff ba95 	b.w	800be4c <_dtoa_r+0xdc>
 800c922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c924:	2b00      	cmp	r3, #0
 800c926:	f47f aa6e 	bne.w	800be06 <_dtoa_r+0x96>
 800c92a:	4b07      	ldr	r3, [pc, #28]	; (800c948 <_dtoa_r+0xbd8>)
 800c92c:	f7ff ba8e 	b.w	800be4c <_dtoa_r+0xdc>
 800c930:	9b02      	ldr	r3, [sp, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	dcae      	bgt.n	800c894 <_dtoa_r+0xb24>
 800c936:	9b06      	ldr	r3, [sp, #24]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	f73f aea8 	bgt.w	800c68e <_dtoa_r+0x91e>
 800c93e:	e7a9      	b.n	800c894 <_dtoa_r+0xb24>
 800c940:	08011287 	.word	0x08011287
 800c944:	08011189 	.word	0x08011189
 800c948:	08011208 	.word	0x08011208

0800c94c <rshift>:
 800c94c:	6903      	ldr	r3, [r0, #16]
 800c94e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c952:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c956:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c95a:	f100 0414 	add.w	r4, r0, #20
 800c95e:	dd45      	ble.n	800c9ec <rshift+0xa0>
 800c960:	f011 011f 	ands.w	r1, r1, #31
 800c964:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c968:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c96c:	d10c      	bne.n	800c988 <rshift+0x3c>
 800c96e:	f100 0710 	add.w	r7, r0, #16
 800c972:	4629      	mov	r1, r5
 800c974:	42b1      	cmp	r1, r6
 800c976:	d334      	bcc.n	800c9e2 <rshift+0x96>
 800c978:	1a9b      	subs	r3, r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	1eea      	subs	r2, r5, #3
 800c97e:	4296      	cmp	r6, r2
 800c980:	bf38      	it	cc
 800c982:	2300      	movcc	r3, #0
 800c984:	4423      	add	r3, r4
 800c986:	e015      	b.n	800c9b4 <rshift+0x68>
 800c988:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c98c:	f1c1 0820 	rsb	r8, r1, #32
 800c990:	40cf      	lsrs	r7, r1
 800c992:	f105 0e04 	add.w	lr, r5, #4
 800c996:	46a1      	mov	r9, r4
 800c998:	4576      	cmp	r6, lr
 800c99a:	46f4      	mov	ip, lr
 800c99c:	d815      	bhi.n	800c9ca <rshift+0x7e>
 800c99e:	1a9a      	subs	r2, r3, r2
 800c9a0:	0092      	lsls	r2, r2, #2
 800c9a2:	3a04      	subs	r2, #4
 800c9a4:	3501      	adds	r5, #1
 800c9a6:	42ae      	cmp	r6, r5
 800c9a8:	bf38      	it	cc
 800c9aa:	2200      	movcc	r2, #0
 800c9ac:	18a3      	adds	r3, r4, r2
 800c9ae:	50a7      	str	r7, [r4, r2]
 800c9b0:	b107      	cbz	r7, 800c9b4 <rshift+0x68>
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	1b1a      	subs	r2, r3, r4
 800c9b6:	42a3      	cmp	r3, r4
 800c9b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c9bc:	bf08      	it	eq
 800c9be:	2300      	moveq	r3, #0
 800c9c0:	6102      	str	r2, [r0, #16]
 800c9c2:	bf08      	it	eq
 800c9c4:	6143      	streq	r3, [r0, #20]
 800c9c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9ca:	f8dc c000 	ldr.w	ip, [ip]
 800c9ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800c9d2:	ea4c 0707 	orr.w	r7, ip, r7
 800c9d6:	f849 7b04 	str.w	r7, [r9], #4
 800c9da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9de:	40cf      	lsrs	r7, r1
 800c9e0:	e7da      	b.n	800c998 <rshift+0x4c>
 800c9e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c9e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9ea:	e7c3      	b.n	800c974 <rshift+0x28>
 800c9ec:	4623      	mov	r3, r4
 800c9ee:	e7e1      	b.n	800c9b4 <rshift+0x68>

0800c9f0 <__hexdig_fun>:
 800c9f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c9f4:	2b09      	cmp	r3, #9
 800c9f6:	d802      	bhi.n	800c9fe <__hexdig_fun+0xe>
 800c9f8:	3820      	subs	r0, #32
 800c9fa:	b2c0      	uxtb	r0, r0
 800c9fc:	4770      	bx	lr
 800c9fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca02:	2b05      	cmp	r3, #5
 800ca04:	d801      	bhi.n	800ca0a <__hexdig_fun+0x1a>
 800ca06:	3847      	subs	r0, #71	; 0x47
 800ca08:	e7f7      	b.n	800c9fa <__hexdig_fun+0xa>
 800ca0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ca0e:	2b05      	cmp	r3, #5
 800ca10:	d801      	bhi.n	800ca16 <__hexdig_fun+0x26>
 800ca12:	3827      	subs	r0, #39	; 0x27
 800ca14:	e7f1      	b.n	800c9fa <__hexdig_fun+0xa>
 800ca16:	2000      	movs	r0, #0
 800ca18:	4770      	bx	lr
	...

0800ca1c <__gethex>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	ed2d 8b02 	vpush	{d8}
 800ca24:	b089      	sub	sp, #36	; 0x24
 800ca26:	ee08 0a10 	vmov	s16, r0
 800ca2a:	9304      	str	r3, [sp, #16]
 800ca2c:	4bb4      	ldr	r3, [pc, #720]	; (800cd00 <__gethex+0x2e4>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	9301      	str	r3, [sp, #4]
 800ca32:	4618      	mov	r0, r3
 800ca34:	468b      	mov	fp, r1
 800ca36:	4690      	mov	r8, r2
 800ca38:	f7f3 fbd4 	bl	80001e4 <strlen>
 800ca3c:	9b01      	ldr	r3, [sp, #4]
 800ca3e:	f8db 2000 	ldr.w	r2, [fp]
 800ca42:	4403      	add	r3, r0
 800ca44:	4682      	mov	sl, r0
 800ca46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ca4a:	9305      	str	r3, [sp, #20]
 800ca4c:	1c93      	adds	r3, r2, #2
 800ca4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ca52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca56:	32fe      	adds	r2, #254	; 0xfe
 800ca58:	18d1      	adds	r1, r2, r3
 800ca5a:	461f      	mov	r7, r3
 800ca5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca60:	9100      	str	r1, [sp, #0]
 800ca62:	2830      	cmp	r0, #48	; 0x30
 800ca64:	d0f8      	beq.n	800ca58 <__gethex+0x3c>
 800ca66:	f7ff ffc3 	bl	800c9f0 <__hexdig_fun>
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d13a      	bne.n	800cae6 <__gethex+0xca>
 800ca70:	9901      	ldr	r1, [sp, #4]
 800ca72:	4652      	mov	r2, sl
 800ca74:	4638      	mov	r0, r7
 800ca76:	f001 fa1f 	bl	800deb8 <strncmp>
 800ca7a:	4605      	mov	r5, r0
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d168      	bne.n	800cb52 <__gethex+0x136>
 800ca80:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ca84:	eb07 060a 	add.w	r6, r7, sl
 800ca88:	f7ff ffb2 	bl	800c9f0 <__hexdig_fun>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d062      	beq.n	800cb56 <__gethex+0x13a>
 800ca90:	4633      	mov	r3, r6
 800ca92:	7818      	ldrb	r0, [r3, #0]
 800ca94:	2830      	cmp	r0, #48	; 0x30
 800ca96:	461f      	mov	r7, r3
 800ca98:	f103 0301 	add.w	r3, r3, #1
 800ca9c:	d0f9      	beq.n	800ca92 <__gethex+0x76>
 800ca9e:	f7ff ffa7 	bl	800c9f0 <__hexdig_fun>
 800caa2:	2301      	movs	r3, #1
 800caa4:	fab0 f480 	clz	r4, r0
 800caa8:	0964      	lsrs	r4, r4, #5
 800caaa:	4635      	mov	r5, r6
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	463a      	mov	r2, r7
 800cab0:	4616      	mov	r6, r2
 800cab2:	3201      	adds	r2, #1
 800cab4:	7830      	ldrb	r0, [r6, #0]
 800cab6:	f7ff ff9b 	bl	800c9f0 <__hexdig_fun>
 800caba:	2800      	cmp	r0, #0
 800cabc:	d1f8      	bne.n	800cab0 <__gethex+0x94>
 800cabe:	9901      	ldr	r1, [sp, #4]
 800cac0:	4652      	mov	r2, sl
 800cac2:	4630      	mov	r0, r6
 800cac4:	f001 f9f8 	bl	800deb8 <strncmp>
 800cac8:	b980      	cbnz	r0, 800caec <__gethex+0xd0>
 800caca:	b94d      	cbnz	r5, 800cae0 <__gethex+0xc4>
 800cacc:	eb06 050a 	add.w	r5, r6, sl
 800cad0:	462a      	mov	r2, r5
 800cad2:	4616      	mov	r6, r2
 800cad4:	3201      	adds	r2, #1
 800cad6:	7830      	ldrb	r0, [r6, #0]
 800cad8:	f7ff ff8a 	bl	800c9f0 <__hexdig_fun>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d1f8      	bne.n	800cad2 <__gethex+0xb6>
 800cae0:	1bad      	subs	r5, r5, r6
 800cae2:	00ad      	lsls	r5, r5, #2
 800cae4:	e004      	b.n	800caf0 <__gethex+0xd4>
 800cae6:	2400      	movs	r4, #0
 800cae8:	4625      	mov	r5, r4
 800caea:	e7e0      	b.n	800caae <__gethex+0x92>
 800caec:	2d00      	cmp	r5, #0
 800caee:	d1f7      	bne.n	800cae0 <__gethex+0xc4>
 800caf0:	7833      	ldrb	r3, [r6, #0]
 800caf2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800caf6:	2b50      	cmp	r3, #80	; 0x50
 800caf8:	d13b      	bne.n	800cb72 <__gethex+0x156>
 800cafa:	7873      	ldrb	r3, [r6, #1]
 800cafc:	2b2b      	cmp	r3, #43	; 0x2b
 800cafe:	d02c      	beq.n	800cb5a <__gethex+0x13e>
 800cb00:	2b2d      	cmp	r3, #45	; 0x2d
 800cb02:	d02e      	beq.n	800cb62 <__gethex+0x146>
 800cb04:	1c71      	adds	r1, r6, #1
 800cb06:	f04f 0900 	mov.w	r9, #0
 800cb0a:	7808      	ldrb	r0, [r1, #0]
 800cb0c:	f7ff ff70 	bl	800c9f0 <__hexdig_fun>
 800cb10:	1e43      	subs	r3, r0, #1
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	2b18      	cmp	r3, #24
 800cb16:	d82c      	bhi.n	800cb72 <__gethex+0x156>
 800cb18:	f1a0 0210 	sub.w	r2, r0, #16
 800cb1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb20:	f7ff ff66 	bl	800c9f0 <__hexdig_fun>
 800cb24:	1e43      	subs	r3, r0, #1
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	2b18      	cmp	r3, #24
 800cb2a:	d91d      	bls.n	800cb68 <__gethex+0x14c>
 800cb2c:	f1b9 0f00 	cmp.w	r9, #0
 800cb30:	d000      	beq.n	800cb34 <__gethex+0x118>
 800cb32:	4252      	negs	r2, r2
 800cb34:	4415      	add	r5, r2
 800cb36:	f8cb 1000 	str.w	r1, [fp]
 800cb3a:	b1e4      	cbz	r4, 800cb76 <__gethex+0x15a>
 800cb3c:	9b00      	ldr	r3, [sp, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	bf14      	ite	ne
 800cb42:	2700      	movne	r7, #0
 800cb44:	2706      	moveq	r7, #6
 800cb46:	4638      	mov	r0, r7
 800cb48:	b009      	add	sp, #36	; 0x24
 800cb4a:	ecbd 8b02 	vpop	{d8}
 800cb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb52:	463e      	mov	r6, r7
 800cb54:	4625      	mov	r5, r4
 800cb56:	2401      	movs	r4, #1
 800cb58:	e7ca      	b.n	800caf0 <__gethex+0xd4>
 800cb5a:	f04f 0900 	mov.w	r9, #0
 800cb5e:	1cb1      	adds	r1, r6, #2
 800cb60:	e7d3      	b.n	800cb0a <__gethex+0xee>
 800cb62:	f04f 0901 	mov.w	r9, #1
 800cb66:	e7fa      	b.n	800cb5e <__gethex+0x142>
 800cb68:	230a      	movs	r3, #10
 800cb6a:	fb03 0202 	mla	r2, r3, r2, r0
 800cb6e:	3a10      	subs	r2, #16
 800cb70:	e7d4      	b.n	800cb1c <__gethex+0x100>
 800cb72:	4631      	mov	r1, r6
 800cb74:	e7df      	b.n	800cb36 <__gethex+0x11a>
 800cb76:	1bf3      	subs	r3, r6, r7
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	2b07      	cmp	r3, #7
 800cb7e:	dc0b      	bgt.n	800cb98 <__gethex+0x17c>
 800cb80:	ee18 0a10 	vmov	r0, s16
 800cb84:	f000 faec 	bl	800d160 <_Balloc>
 800cb88:	4604      	mov	r4, r0
 800cb8a:	b940      	cbnz	r0, 800cb9e <__gethex+0x182>
 800cb8c:	4b5d      	ldr	r3, [pc, #372]	; (800cd04 <__gethex+0x2e8>)
 800cb8e:	4602      	mov	r2, r0
 800cb90:	21de      	movs	r1, #222	; 0xde
 800cb92:	485d      	ldr	r0, [pc, #372]	; (800cd08 <__gethex+0x2ec>)
 800cb94:	f7fc fb84 	bl	80092a0 <__assert_func>
 800cb98:	3101      	adds	r1, #1
 800cb9a:	105b      	asrs	r3, r3, #1
 800cb9c:	e7ee      	b.n	800cb7c <__gethex+0x160>
 800cb9e:	f100 0914 	add.w	r9, r0, #20
 800cba2:	f04f 0b00 	mov.w	fp, #0
 800cba6:	f1ca 0301 	rsb	r3, sl, #1
 800cbaa:	f8cd 9008 	str.w	r9, [sp, #8]
 800cbae:	f8cd b000 	str.w	fp, [sp]
 800cbb2:	9306      	str	r3, [sp, #24]
 800cbb4:	42b7      	cmp	r7, r6
 800cbb6:	d340      	bcc.n	800cc3a <__gethex+0x21e>
 800cbb8:	9802      	ldr	r0, [sp, #8]
 800cbba:	9b00      	ldr	r3, [sp, #0]
 800cbbc:	f840 3b04 	str.w	r3, [r0], #4
 800cbc0:	eba0 0009 	sub.w	r0, r0, r9
 800cbc4:	1080      	asrs	r0, r0, #2
 800cbc6:	0146      	lsls	r6, r0, #5
 800cbc8:	6120      	str	r0, [r4, #16]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 fbba 	bl	800d344 <__hi0bits>
 800cbd0:	1a30      	subs	r0, r6, r0
 800cbd2:	f8d8 6000 	ldr.w	r6, [r8]
 800cbd6:	42b0      	cmp	r0, r6
 800cbd8:	dd63      	ble.n	800cca2 <__gethex+0x286>
 800cbda:	1b87      	subs	r7, r0, r6
 800cbdc:	4639      	mov	r1, r7
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 ff5e 	bl	800daa0 <__any_on>
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	b1a8      	cbz	r0, 800cc14 <__gethex+0x1f8>
 800cbe8:	1e7b      	subs	r3, r7, #1
 800cbea:	1159      	asrs	r1, r3, #5
 800cbec:	f003 021f 	and.w	r2, r3, #31
 800cbf0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cbf4:	f04f 0a01 	mov.w	sl, #1
 800cbf8:	fa0a f202 	lsl.w	r2, sl, r2
 800cbfc:	420a      	tst	r2, r1
 800cbfe:	d009      	beq.n	800cc14 <__gethex+0x1f8>
 800cc00:	4553      	cmp	r3, sl
 800cc02:	dd05      	ble.n	800cc10 <__gethex+0x1f4>
 800cc04:	1eb9      	subs	r1, r7, #2
 800cc06:	4620      	mov	r0, r4
 800cc08:	f000 ff4a 	bl	800daa0 <__any_on>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d145      	bne.n	800cc9c <__gethex+0x280>
 800cc10:	f04f 0a02 	mov.w	sl, #2
 800cc14:	4639      	mov	r1, r7
 800cc16:	4620      	mov	r0, r4
 800cc18:	f7ff fe98 	bl	800c94c <rshift>
 800cc1c:	443d      	add	r5, r7
 800cc1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc22:	42ab      	cmp	r3, r5
 800cc24:	da4c      	bge.n	800ccc0 <__gethex+0x2a4>
 800cc26:	ee18 0a10 	vmov	r0, s16
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	f000 fad8 	bl	800d1e0 <_Bfree>
 800cc30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc32:	2300      	movs	r3, #0
 800cc34:	6013      	str	r3, [r2, #0]
 800cc36:	27a3      	movs	r7, #163	; 0xa3
 800cc38:	e785      	b.n	800cb46 <__gethex+0x12a>
 800cc3a:	1e73      	subs	r3, r6, #1
 800cc3c:	9a05      	ldr	r2, [sp, #20]
 800cc3e:	9303      	str	r3, [sp, #12]
 800cc40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d019      	beq.n	800cc7c <__gethex+0x260>
 800cc48:	f1bb 0f20 	cmp.w	fp, #32
 800cc4c:	d107      	bne.n	800cc5e <__gethex+0x242>
 800cc4e:	9b02      	ldr	r3, [sp, #8]
 800cc50:	9a00      	ldr	r2, [sp, #0]
 800cc52:	f843 2b04 	str.w	r2, [r3], #4
 800cc56:	9302      	str	r3, [sp, #8]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	469b      	mov	fp, r3
 800cc5e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cc62:	f7ff fec5 	bl	800c9f0 <__hexdig_fun>
 800cc66:	9b00      	ldr	r3, [sp, #0]
 800cc68:	f000 000f 	and.w	r0, r0, #15
 800cc6c:	fa00 f00b 	lsl.w	r0, r0, fp
 800cc70:	4303      	orrs	r3, r0
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	f10b 0b04 	add.w	fp, fp, #4
 800cc78:	9b03      	ldr	r3, [sp, #12]
 800cc7a:	e00d      	b.n	800cc98 <__gethex+0x27c>
 800cc7c:	9b03      	ldr	r3, [sp, #12]
 800cc7e:	9a06      	ldr	r2, [sp, #24]
 800cc80:	4413      	add	r3, r2
 800cc82:	42bb      	cmp	r3, r7
 800cc84:	d3e0      	bcc.n	800cc48 <__gethex+0x22c>
 800cc86:	4618      	mov	r0, r3
 800cc88:	9901      	ldr	r1, [sp, #4]
 800cc8a:	9307      	str	r3, [sp, #28]
 800cc8c:	4652      	mov	r2, sl
 800cc8e:	f001 f913 	bl	800deb8 <strncmp>
 800cc92:	9b07      	ldr	r3, [sp, #28]
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d1d7      	bne.n	800cc48 <__gethex+0x22c>
 800cc98:	461e      	mov	r6, r3
 800cc9a:	e78b      	b.n	800cbb4 <__gethex+0x198>
 800cc9c:	f04f 0a03 	mov.w	sl, #3
 800cca0:	e7b8      	b.n	800cc14 <__gethex+0x1f8>
 800cca2:	da0a      	bge.n	800ccba <__gethex+0x29e>
 800cca4:	1a37      	subs	r7, r6, r0
 800cca6:	4621      	mov	r1, r4
 800cca8:	ee18 0a10 	vmov	r0, s16
 800ccac:	463a      	mov	r2, r7
 800ccae:	f000 fcb3 	bl	800d618 <__lshift>
 800ccb2:	1bed      	subs	r5, r5, r7
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	f100 0914 	add.w	r9, r0, #20
 800ccba:	f04f 0a00 	mov.w	sl, #0
 800ccbe:	e7ae      	b.n	800cc1e <__gethex+0x202>
 800ccc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ccc4:	42a8      	cmp	r0, r5
 800ccc6:	dd72      	ble.n	800cdae <__gethex+0x392>
 800ccc8:	1b45      	subs	r5, r0, r5
 800ccca:	42ae      	cmp	r6, r5
 800cccc:	dc36      	bgt.n	800cd3c <__gethex+0x320>
 800ccce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d02a      	beq.n	800cd2c <__gethex+0x310>
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d02c      	beq.n	800cd34 <__gethex+0x318>
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d11c      	bne.n	800cd18 <__gethex+0x2fc>
 800ccde:	42ae      	cmp	r6, r5
 800cce0:	d11a      	bne.n	800cd18 <__gethex+0x2fc>
 800cce2:	2e01      	cmp	r6, #1
 800cce4:	d112      	bne.n	800cd0c <__gethex+0x2f0>
 800cce6:	9a04      	ldr	r2, [sp, #16]
 800cce8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ccec:	6013      	str	r3, [r2, #0]
 800ccee:	2301      	movs	r3, #1
 800ccf0:	6123      	str	r3, [r4, #16]
 800ccf2:	f8c9 3000 	str.w	r3, [r9]
 800ccf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccf8:	2762      	movs	r7, #98	; 0x62
 800ccfa:	601c      	str	r4, [r3, #0]
 800ccfc:	e723      	b.n	800cb46 <__gethex+0x12a>
 800ccfe:	bf00      	nop
 800cd00:	08011300 	.word	0x08011300
 800cd04:	08011287 	.word	0x08011287
 800cd08:	08011298 	.word	0x08011298
 800cd0c:	1e71      	subs	r1, r6, #1
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f000 fec6 	bl	800daa0 <__any_on>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d1e6      	bne.n	800cce6 <__gethex+0x2ca>
 800cd18:	ee18 0a10 	vmov	r0, s16
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	f000 fa5f 	bl	800d1e0 <_Bfree>
 800cd22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd24:	2300      	movs	r3, #0
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	2750      	movs	r7, #80	; 0x50
 800cd2a:	e70c      	b.n	800cb46 <__gethex+0x12a>
 800cd2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1f2      	bne.n	800cd18 <__gethex+0x2fc>
 800cd32:	e7d8      	b.n	800cce6 <__gethex+0x2ca>
 800cd34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1d5      	bne.n	800cce6 <__gethex+0x2ca>
 800cd3a:	e7ed      	b.n	800cd18 <__gethex+0x2fc>
 800cd3c:	1e6f      	subs	r7, r5, #1
 800cd3e:	f1ba 0f00 	cmp.w	sl, #0
 800cd42:	d131      	bne.n	800cda8 <__gethex+0x38c>
 800cd44:	b127      	cbz	r7, 800cd50 <__gethex+0x334>
 800cd46:	4639      	mov	r1, r7
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f000 fea9 	bl	800daa0 <__any_on>
 800cd4e:	4682      	mov	sl, r0
 800cd50:	117b      	asrs	r3, r7, #5
 800cd52:	2101      	movs	r1, #1
 800cd54:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cd58:	f007 071f 	and.w	r7, r7, #31
 800cd5c:	fa01 f707 	lsl.w	r7, r1, r7
 800cd60:	421f      	tst	r7, r3
 800cd62:	4629      	mov	r1, r5
 800cd64:	4620      	mov	r0, r4
 800cd66:	bf18      	it	ne
 800cd68:	f04a 0a02 	orrne.w	sl, sl, #2
 800cd6c:	1b76      	subs	r6, r6, r5
 800cd6e:	f7ff fded 	bl	800c94c <rshift>
 800cd72:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd76:	2702      	movs	r7, #2
 800cd78:	f1ba 0f00 	cmp.w	sl, #0
 800cd7c:	d048      	beq.n	800ce10 <__gethex+0x3f4>
 800cd7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d015      	beq.n	800cdb2 <__gethex+0x396>
 800cd86:	2b03      	cmp	r3, #3
 800cd88:	d017      	beq.n	800cdba <__gethex+0x39e>
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d109      	bne.n	800cda2 <__gethex+0x386>
 800cd8e:	f01a 0f02 	tst.w	sl, #2
 800cd92:	d006      	beq.n	800cda2 <__gethex+0x386>
 800cd94:	f8d9 0000 	ldr.w	r0, [r9]
 800cd98:	ea4a 0a00 	orr.w	sl, sl, r0
 800cd9c:	f01a 0f01 	tst.w	sl, #1
 800cda0:	d10e      	bne.n	800cdc0 <__gethex+0x3a4>
 800cda2:	f047 0710 	orr.w	r7, r7, #16
 800cda6:	e033      	b.n	800ce10 <__gethex+0x3f4>
 800cda8:	f04f 0a01 	mov.w	sl, #1
 800cdac:	e7d0      	b.n	800cd50 <__gethex+0x334>
 800cdae:	2701      	movs	r7, #1
 800cdb0:	e7e2      	b.n	800cd78 <__gethex+0x35c>
 800cdb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdb4:	f1c3 0301 	rsb	r3, r3, #1
 800cdb8:	9315      	str	r3, [sp, #84]	; 0x54
 800cdba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d0f0      	beq.n	800cda2 <__gethex+0x386>
 800cdc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cdc4:	f104 0314 	add.w	r3, r4, #20
 800cdc8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cdcc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cdd0:	f04f 0c00 	mov.w	ip, #0
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdda:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cdde:	d01c      	beq.n	800ce1a <__gethex+0x3fe>
 800cde0:	3201      	adds	r2, #1
 800cde2:	6002      	str	r2, [r0, #0]
 800cde4:	2f02      	cmp	r7, #2
 800cde6:	f104 0314 	add.w	r3, r4, #20
 800cdea:	d13f      	bne.n	800ce6c <__gethex+0x450>
 800cdec:	f8d8 2000 	ldr.w	r2, [r8]
 800cdf0:	3a01      	subs	r2, #1
 800cdf2:	42b2      	cmp	r2, r6
 800cdf4:	d10a      	bne.n	800ce0c <__gethex+0x3f0>
 800cdf6:	1171      	asrs	r1, r6, #5
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdfe:	f006 061f 	and.w	r6, r6, #31
 800ce02:	fa02 f606 	lsl.w	r6, r2, r6
 800ce06:	421e      	tst	r6, r3
 800ce08:	bf18      	it	ne
 800ce0a:	4617      	movne	r7, r2
 800ce0c:	f047 0720 	orr.w	r7, r7, #32
 800ce10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce12:	601c      	str	r4, [r3, #0]
 800ce14:	9b04      	ldr	r3, [sp, #16]
 800ce16:	601d      	str	r5, [r3, #0]
 800ce18:	e695      	b.n	800cb46 <__gethex+0x12a>
 800ce1a:	4299      	cmp	r1, r3
 800ce1c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce20:	d8d8      	bhi.n	800cdd4 <__gethex+0x3b8>
 800ce22:	68a3      	ldr	r3, [r4, #8]
 800ce24:	459b      	cmp	fp, r3
 800ce26:	db19      	blt.n	800ce5c <__gethex+0x440>
 800ce28:	6861      	ldr	r1, [r4, #4]
 800ce2a:	ee18 0a10 	vmov	r0, s16
 800ce2e:	3101      	adds	r1, #1
 800ce30:	f000 f996 	bl	800d160 <_Balloc>
 800ce34:	4681      	mov	r9, r0
 800ce36:	b918      	cbnz	r0, 800ce40 <__gethex+0x424>
 800ce38:	4b1a      	ldr	r3, [pc, #104]	; (800cea4 <__gethex+0x488>)
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	2184      	movs	r1, #132	; 0x84
 800ce3e:	e6a8      	b.n	800cb92 <__gethex+0x176>
 800ce40:	6922      	ldr	r2, [r4, #16]
 800ce42:	3202      	adds	r2, #2
 800ce44:	f104 010c 	add.w	r1, r4, #12
 800ce48:	0092      	lsls	r2, r2, #2
 800ce4a:	300c      	adds	r0, #12
 800ce4c:	f7fc fd16 	bl	800987c <memcpy>
 800ce50:	4621      	mov	r1, r4
 800ce52:	ee18 0a10 	vmov	r0, s16
 800ce56:	f000 f9c3 	bl	800d1e0 <_Bfree>
 800ce5a:	464c      	mov	r4, r9
 800ce5c:	6923      	ldr	r3, [r4, #16]
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce64:	6122      	str	r2, [r4, #16]
 800ce66:	2201      	movs	r2, #1
 800ce68:	615a      	str	r2, [r3, #20]
 800ce6a:	e7bb      	b.n	800cde4 <__gethex+0x3c8>
 800ce6c:	6922      	ldr	r2, [r4, #16]
 800ce6e:	455a      	cmp	r2, fp
 800ce70:	dd0b      	ble.n	800ce8a <__gethex+0x46e>
 800ce72:	2101      	movs	r1, #1
 800ce74:	4620      	mov	r0, r4
 800ce76:	f7ff fd69 	bl	800c94c <rshift>
 800ce7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce7e:	3501      	adds	r5, #1
 800ce80:	42ab      	cmp	r3, r5
 800ce82:	f6ff aed0 	blt.w	800cc26 <__gethex+0x20a>
 800ce86:	2701      	movs	r7, #1
 800ce88:	e7c0      	b.n	800ce0c <__gethex+0x3f0>
 800ce8a:	f016 061f 	ands.w	r6, r6, #31
 800ce8e:	d0fa      	beq.n	800ce86 <__gethex+0x46a>
 800ce90:	4453      	add	r3, sl
 800ce92:	f1c6 0620 	rsb	r6, r6, #32
 800ce96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce9a:	f000 fa53 	bl	800d344 <__hi0bits>
 800ce9e:	42b0      	cmp	r0, r6
 800cea0:	dbe7      	blt.n	800ce72 <__gethex+0x456>
 800cea2:	e7f0      	b.n	800ce86 <__gethex+0x46a>
 800cea4:	08011287 	.word	0x08011287

0800cea8 <L_shift>:
 800cea8:	f1c2 0208 	rsb	r2, r2, #8
 800ceac:	0092      	lsls	r2, r2, #2
 800ceae:	b570      	push	{r4, r5, r6, lr}
 800ceb0:	f1c2 0620 	rsb	r6, r2, #32
 800ceb4:	6843      	ldr	r3, [r0, #4]
 800ceb6:	6804      	ldr	r4, [r0, #0]
 800ceb8:	fa03 f506 	lsl.w	r5, r3, r6
 800cebc:	432c      	orrs	r4, r5
 800cebe:	40d3      	lsrs	r3, r2
 800cec0:	6004      	str	r4, [r0, #0]
 800cec2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cec6:	4288      	cmp	r0, r1
 800cec8:	d3f4      	bcc.n	800ceb4 <L_shift+0xc>
 800ceca:	bd70      	pop	{r4, r5, r6, pc}

0800cecc <__match>:
 800cecc:	b530      	push	{r4, r5, lr}
 800cece:	6803      	ldr	r3, [r0, #0]
 800ced0:	3301      	adds	r3, #1
 800ced2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ced6:	b914      	cbnz	r4, 800cede <__match+0x12>
 800ced8:	6003      	str	r3, [r0, #0]
 800ceda:	2001      	movs	r0, #1
 800cedc:	bd30      	pop	{r4, r5, pc}
 800cede:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cee2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cee6:	2d19      	cmp	r5, #25
 800cee8:	bf98      	it	ls
 800ceea:	3220      	addls	r2, #32
 800ceec:	42a2      	cmp	r2, r4
 800ceee:	d0f0      	beq.n	800ced2 <__match+0x6>
 800cef0:	2000      	movs	r0, #0
 800cef2:	e7f3      	b.n	800cedc <__match+0x10>

0800cef4 <__hexnan>:
 800cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef8:	680b      	ldr	r3, [r1, #0]
 800cefa:	115e      	asrs	r6, r3, #5
 800cefc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf00:	f013 031f 	ands.w	r3, r3, #31
 800cf04:	b087      	sub	sp, #28
 800cf06:	bf18      	it	ne
 800cf08:	3604      	addne	r6, #4
 800cf0a:	2500      	movs	r5, #0
 800cf0c:	1f37      	subs	r7, r6, #4
 800cf0e:	4690      	mov	r8, r2
 800cf10:	6802      	ldr	r2, [r0, #0]
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	4682      	mov	sl, r0
 800cf16:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf1a:	46b9      	mov	r9, r7
 800cf1c:	463c      	mov	r4, r7
 800cf1e:	9502      	str	r5, [sp, #8]
 800cf20:	46ab      	mov	fp, r5
 800cf22:	7851      	ldrb	r1, [r2, #1]
 800cf24:	1c53      	adds	r3, r2, #1
 800cf26:	9303      	str	r3, [sp, #12]
 800cf28:	b341      	cbz	r1, 800cf7c <__hexnan+0x88>
 800cf2a:	4608      	mov	r0, r1
 800cf2c:	9205      	str	r2, [sp, #20]
 800cf2e:	9104      	str	r1, [sp, #16]
 800cf30:	f7ff fd5e 	bl	800c9f0 <__hexdig_fun>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d14f      	bne.n	800cfd8 <__hexnan+0xe4>
 800cf38:	9904      	ldr	r1, [sp, #16]
 800cf3a:	9a05      	ldr	r2, [sp, #20]
 800cf3c:	2920      	cmp	r1, #32
 800cf3e:	d818      	bhi.n	800cf72 <__hexnan+0x7e>
 800cf40:	9b02      	ldr	r3, [sp, #8]
 800cf42:	459b      	cmp	fp, r3
 800cf44:	dd13      	ble.n	800cf6e <__hexnan+0x7a>
 800cf46:	454c      	cmp	r4, r9
 800cf48:	d206      	bcs.n	800cf58 <__hexnan+0x64>
 800cf4a:	2d07      	cmp	r5, #7
 800cf4c:	dc04      	bgt.n	800cf58 <__hexnan+0x64>
 800cf4e:	462a      	mov	r2, r5
 800cf50:	4649      	mov	r1, r9
 800cf52:	4620      	mov	r0, r4
 800cf54:	f7ff ffa8 	bl	800cea8 <L_shift>
 800cf58:	4544      	cmp	r4, r8
 800cf5a:	d950      	bls.n	800cffe <__hexnan+0x10a>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f1a4 0904 	sub.w	r9, r4, #4
 800cf62:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf66:	f8cd b008 	str.w	fp, [sp, #8]
 800cf6a:	464c      	mov	r4, r9
 800cf6c:	461d      	mov	r5, r3
 800cf6e:	9a03      	ldr	r2, [sp, #12]
 800cf70:	e7d7      	b.n	800cf22 <__hexnan+0x2e>
 800cf72:	2929      	cmp	r1, #41	; 0x29
 800cf74:	d156      	bne.n	800d024 <__hexnan+0x130>
 800cf76:	3202      	adds	r2, #2
 800cf78:	f8ca 2000 	str.w	r2, [sl]
 800cf7c:	f1bb 0f00 	cmp.w	fp, #0
 800cf80:	d050      	beq.n	800d024 <__hexnan+0x130>
 800cf82:	454c      	cmp	r4, r9
 800cf84:	d206      	bcs.n	800cf94 <__hexnan+0xa0>
 800cf86:	2d07      	cmp	r5, #7
 800cf88:	dc04      	bgt.n	800cf94 <__hexnan+0xa0>
 800cf8a:	462a      	mov	r2, r5
 800cf8c:	4649      	mov	r1, r9
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7ff ff8a 	bl	800cea8 <L_shift>
 800cf94:	4544      	cmp	r4, r8
 800cf96:	d934      	bls.n	800d002 <__hexnan+0x10e>
 800cf98:	f1a8 0204 	sub.w	r2, r8, #4
 800cf9c:	4623      	mov	r3, r4
 800cf9e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cfa2:	f842 1f04 	str.w	r1, [r2, #4]!
 800cfa6:	429f      	cmp	r7, r3
 800cfa8:	d2f9      	bcs.n	800cf9e <__hexnan+0xaa>
 800cfaa:	1b3b      	subs	r3, r7, r4
 800cfac:	f023 0303 	bic.w	r3, r3, #3
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	3401      	adds	r4, #1
 800cfb4:	3e03      	subs	r6, #3
 800cfb6:	42b4      	cmp	r4, r6
 800cfb8:	bf88      	it	hi
 800cfba:	2304      	movhi	r3, #4
 800cfbc:	4443      	add	r3, r8
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f843 2b04 	str.w	r2, [r3], #4
 800cfc4:	429f      	cmp	r7, r3
 800cfc6:	d2fb      	bcs.n	800cfc0 <__hexnan+0xcc>
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	b91b      	cbnz	r3, 800cfd4 <__hexnan+0xe0>
 800cfcc:	4547      	cmp	r7, r8
 800cfce:	d127      	bne.n	800d020 <__hexnan+0x12c>
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	603b      	str	r3, [r7, #0]
 800cfd4:	2005      	movs	r0, #5
 800cfd6:	e026      	b.n	800d026 <__hexnan+0x132>
 800cfd8:	3501      	adds	r5, #1
 800cfda:	2d08      	cmp	r5, #8
 800cfdc:	f10b 0b01 	add.w	fp, fp, #1
 800cfe0:	dd06      	ble.n	800cff0 <__hexnan+0xfc>
 800cfe2:	4544      	cmp	r4, r8
 800cfe4:	d9c3      	bls.n	800cf6e <__hexnan+0x7a>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfec:	2501      	movs	r5, #1
 800cfee:	3c04      	subs	r4, #4
 800cff0:	6822      	ldr	r2, [r4, #0]
 800cff2:	f000 000f 	and.w	r0, r0, #15
 800cff6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cffa:	6022      	str	r2, [r4, #0]
 800cffc:	e7b7      	b.n	800cf6e <__hexnan+0x7a>
 800cffe:	2508      	movs	r5, #8
 800d000:	e7b5      	b.n	800cf6e <__hexnan+0x7a>
 800d002:	9b01      	ldr	r3, [sp, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d0df      	beq.n	800cfc8 <__hexnan+0xd4>
 800d008:	f04f 32ff 	mov.w	r2, #4294967295
 800d00c:	f1c3 0320 	rsb	r3, r3, #32
 800d010:	fa22 f303 	lsr.w	r3, r2, r3
 800d014:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d018:	401a      	ands	r2, r3
 800d01a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d01e:	e7d3      	b.n	800cfc8 <__hexnan+0xd4>
 800d020:	3f04      	subs	r7, #4
 800d022:	e7d1      	b.n	800cfc8 <__hexnan+0xd4>
 800d024:	2004      	movs	r0, #4
 800d026:	b007      	add	sp, #28
 800d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d02c <_localeconv_r>:
 800d02c:	4800      	ldr	r0, [pc, #0]	; (800d030 <_localeconv_r+0x4>)
 800d02e:	4770      	bx	lr
 800d030:	200001d8 	.word	0x200001d8

0800d034 <_lseek_r>:
 800d034:	b538      	push	{r3, r4, r5, lr}
 800d036:	4d07      	ldr	r5, [pc, #28]	; (800d054 <_lseek_r+0x20>)
 800d038:	4604      	mov	r4, r0
 800d03a:	4608      	mov	r0, r1
 800d03c:	4611      	mov	r1, r2
 800d03e:	2200      	movs	r2, #0
 800d040:	602a      	str	r2, [r5, #0]
 800d042:	461a      	mov	r2, r3
 800d044:	f7f4 f9aa 	bl	800139c <_lseek>
 800d048:	1c43      	adds	r3, r0, #1
 800d04a:	d102      	bne.n	800d052 <_lseek_r+0x1e>
 800d04c:	682b      	ldr	r3, [r5, #0]
 800d04e:	b103      	cbz	r3, 800d052 <_lseek_r+0x1e>
 800d050:	6023      	str	r3, [r4, #0]
 800d052:	bd38      	pop	{r3, r4, r5, pc}
 800d054:	20001b18 	.word	0x20001b18

0800d058 <__swhatbuf_r>:
 800d058:	b570      	push	{r4, r5, r6, lr}
 800d05a:	460e      	mov	r6, r1
 800d05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d060:	2900      	cmp	r1, #0
 800d062:	b096      	sub	sp, #88	; 0x58
 800d064:	4614      	mov	r4, r2
 800d066:	461d      	mov	r5, r3
 800d068:	da08      	bge.n	800d07c <__swhatbuf_r+0x24>
 800d06a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	602a      	str	r2, [r5, #0]
 800d072:	061a      	lsls	r2, r3, #24
 800d074:	d410      	bmi.n	800d098 <__swhatbuf_r+0x40>
 800d076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d07a:	e00e      	b.n	800d09a <__swhatbuf_r+0x42>
 800d07c:	466a      	mov	r2, sp
 800d07e:	f000 ff3d 	bl	800defc <_fstat_r>
 800d082:	2800      	cmp	r0, #0
 800d084:	dbf1      	blt.n	800d06a <__swhatbuf_r+0x12>
 800d086:	9a01      	ldr	r2, [sp, #4]
 800d088:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d08c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d090:	425a      	negs	r2, r3
 800d092:	415a      	adcs	r2, r3
 800d094:	602a      	str	r2, [r5, #0]
 800d096:	e7ee      	b.n	800d076 <__swhatbuf_r+0x1e>
 800d098:	2340      	movs	r3, #64	; 0x40
 800d09a:	2000      	movs	r0, #0
 800d09c:	6023      	str	r3, [r4, #0]
 800d09e:	b016      	add	sp, #88	; 0x58
 800d0a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d0a4 <__smakebuf_r>:
 800d0a4:	898b      	ldrh	r3, [r1, #12]
 800d0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0a8:	079d      	lsls	r5, r3, #30
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	d507      	bpl.n	800d0c0 <__smakebuf_r+0x1c>
 800d0b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	6123      	str	r3, [r4, #16]
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	6163      	str	r3, [r4, #20]
 800d0bc:	b002      	add	sp, #8
 800d0be:	bd70      	pop	{r4, r5, r6, pc}
 800d0c0:	ab01      	add	r3, sp, #4
 800d0c2:	466a      	mov	r2, sp
 800d0c4:	f7ff ffc8 	bl	800d058 <__swhatbuf_r>
 800d0c8:	9900      	ldr	r1, [sp, #0]
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f7fc fc87 	bl	80099e0 <_malloc_r>
 800d0d2:	b948      	cbnz	r0, 800d0e8 <__smakebuf_r+0x44>
 800d0d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d8:	059a      	lsls	r2, r3, #22
 800d0da:	d4ef      	bmi.n	800d0bc <__smakebuf_r+0x18>
 800d0dc:	f023 0303 	bic.w	r3, r3, #3
 800d0e0:	f043 0302 	orr.w	r3, r3, #2
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	e7e3      	b.n	800d0b0 <__smakebuf_r+0xc>
 800d0e8:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <__smakebuf_r+0x7c>)
 800d0ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0ec:	89a3      	ldrh	r3, [r4, #12]
 800d0ee:	6020      	str	r0, [r4, #0]
 800d0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0f4:	81a3      	strh	r3, [r4, #12]
 800d0f6:	9b00      	ldr	r3, [sp, #0]
 800d0f8:	6163      	str	r3, [r4, #20]
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	6120      	str	r0, [r4, #16]
 800d0fe:	b15b      	cbz	r3, 800d118 <__smakebuf_r+0x74>
 800d100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d104:	4630      	mov	r0, r6
 800d106:	f000 ff0b 	bl	800df20 <_isatty_r>
 800d10a:	b128      	cbz	r0, 800d118 <__smakebuf_r+0x74>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f023 0303 	bic.w	r3, r3, #3
 800d112:	f043 0301 	orr.w	r3, r3, #1
 800d116:	81a3      	strh	r3, [r4, #12]
 800d118:	89a0      	ldrh	r0, [r4, #12]
 800d11a:	4305      	orrs	r5, r0
 800d11c:	81a5      	strh	r5, [r4, #12]
 800d11e:	e7cd      	b.n	800d0bc <__smakebuf_r+0x18>
 800d120:	080094e9 	.word	0x080094e9

0800d124 <__ascii_mbtowc>:
 800d124:	b082      	sub	sp, #8
 800d126:	b901      	cbnz	r1, 800d12a <__ascii_mbtowc+0x6>
 800d128:	a901      	add	r1, sp, #4
 800d12a:	b142      	cbz	r2, 800d13e <__ascii_mbtowc+0x1a>
 800d12c:	b14b      	cbz	r3, 800d142 <__ascii_mbtowc+0x1e>
 800d12e:	7813      	ldrb	r3, [r2, #0]
 800d130:	600b      	str	r3, [r1, #0]
 800d132:	7812      	ldrb	r2, [r2, #0]
 800d134:	1e10      	subs	r0, r2, #0
 800d136:	bf18      	it	ne
 800d138:	2001      	movne	r0, #1
 800d13a:	b002      	add	sp, #8
 800d13c:	4770      	bx	lr
 800d13e:	4610      	mov	r0, r2
 800d140:	e7fb      	b.n	800d13a <__ascii_mbtowc+0x16>
 800d142:	f06f 0001 	mvn.w	r0, #1
 800d146:	e7f8      	b.n	800d13a <__ascii_mbtowc+0x16>

0800d148 <__malloc_lock>:
 800d148:	4801      	ldr	r0, [pc, #4]	; (800d150 <__malloc_lock+0x8>)
 800d14a:	f7fc bb84 	b.w	8009856 <__retarget_lock_acquire_recursive>
 800d14e:	bf00      	nop
 800d150:	20001b0c 	.word	0x20001b0c

0800d154 <__malloc_unlock>:
 800d154:	4801      	ldr	r0, [pc, #4]	; (800d15c <__malloc_unlock+0x8>)
 800d156:	f7fc bb7f 	b.w	8009858 <__retarget_lock_release_recursive>
 800d15a:	bf00      	nop
 800d15c:	20001b0c 	.word	0x20001b0c

0800d160 <_Balloc>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d164:	4604      	mov	r4, r0
 800d166:	460d      	mov	r5, r1
 800d168:	b976      	cbnz	r6, 800d188 <_Balloc+0x28>
 800d16a:	2010      	movs	r0, #16
 800d16c:	f7fc fb76 	bl	800985c <malloc>
 800d170:	4602      	mov	r2, r0
 800d172:	6260      	str	r0, [r4, #36]	; 0x24
 800d174:	b920      	cbnz	r0, 800d180 <_Balloc+0x20>
 800d176:	4b18      	ldr	r3, [pc, #96]	; (800d1d8 <_Balloc+0x78>)
 800d178:	4818      	ldr	r0, [pc, #96]	; (800d1dc <_Balloc+0x7c>)
 800d17a:	2166      	movs	r1, #102	; 0x66
 800d17c:	f7fc f890 	bl	80092a0 <__assert_func>
 800d180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d184:	6006      	str	r6, [r0, #0]
 800d186:	60c6      	str	r6, [r0, #12]
 800d188:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d18a:	68f3      	ldr	r3, [r6, #12]
 800d18c:	b183      	cbz	r3, 800d1b0 <_Balloc+0x50>
 800d18e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d196:	b9b8      	cbnz	r0, 800d1c8 <_Balloc+0x68>
 800d198:	2101      	movs	r1, #1
 800d19a:	fa01 f605 	lsl.w	r6, r1, r5
 800d19e:	1d72      	adds	r2, r6, #5
 800d1a0:	0092      	lsls	r2, r2, #2
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f7fc fb9a 	bl	80098dc <_calloc_r>
 800d1a8:	b160      	cbz	r0, 800d1c4 <_Balloc+0x64>
 800d1aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1ae:	e00e      	b.n	800d1ce <_Balloc+0x6e>
 800d1b0:	2221      	movs	r2, #33	; 0x21
 800d1b2:	2104      	movs	r1, #4
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f7fc fb91 	bl	80098dc <_calloc_r>
 800d1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1bc:	60f0      	str	r0, [r6, #12]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1e4      	bne.n	800d18e <_Balloc+0x2e>
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}
 800d1c8:	6802      	ldr	r2, [r0, #0]
 800d1ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1d4:	e7f7      	b.n	800d1c6 <_Balloc+0x66>
 800d1d6:	bf00      	nop
 800d1d8:	08011215 	.word	0x08011215
 800d1dc:	08011314 	.word	0x08011314

0800d1e0 <_Bfree>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	b976      	cbnz	r6, 800d208 <_Bfree+0x28>
 800d1ea:	2010      	movs	r0, #16
 800d1ec:	f7fc fb36 	bl	800985c <malloc>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	6268      	str	r0, [r5, #36]	; 0x24
 800d1f4:	b920      	cbnz	r0, 800d200 <_Bfree+0x20>
 800d1f6:	4b09      	ldr	r3, [pc, #36]	; (800d21c <_Bfree+0x3c>)
 800d1f8:	4809      	ldr	r0, [pc, #36]	; (800d220 <_Bfree+0x40>)
 800d1fa:	218a      	movs	r1, #138	; 0x8a
 800d1fc:	f7fc f850 	bl	80092a0 <__assert_func>
 800d200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d204:	6006      	str	r6, [r0, #0]
 800d206:	60c6      	str	r6, [r0, #12]
 800d208:	b13c      	cbz	r4, 800d21a <_Bfree+0x3a>
 800d20a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d20c:	6862      	ldr	r2, [r4, #4]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d214:	6021      	str	r1, [r4, #0]
 800d216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d21a:	bd70      	pop	{r4, r5, r6, pc}
 800d21c:	08011215 	.word	0x08011215
 800d220:	08011314 	.word	0x08011314

0800d224 <__multadd>:
 800d224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d228:	690d      	ldr	r5, [r1, #16]
 800d22a:	4607      	mov	r7, r0
 800d22c:	460c      	mov	r4, r1
 800d22e:	461e      	mov	r6, r3
 800d230:	f101 0c14 	add.w	ip, r1, #20
 800d234:	2000      	movs	r0, #0
 800d236:	f8dc 3000 	ldr.w	r3, [ip]
 800d23a:	b299      	uxth	r1, r3
 800d23c:	fb02 6101 	mla	r1, r2, r1, r6
 800d240:	0c1e      	lsrs	r6, r3, #16
 800d242:	0c0b      	lsrs	r3, r1, #16
 800d244:	fb02 3306 	mla	r3, r2, r6, r3
 800d248:	b289      	uxth	r1, r1
 800d24a:	3001      	adds	r0, #1
 800d24c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d250:	4285      	cmp	r5, r0
 800d252:	f84c 1b04 	str.w	r1, [ip], #4
 800d256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d25a:	dcec      	bgt.n	800d236 <__multadd+0x12>
 800d25c:	b30e      	cbz	r6, 800d2a2 <__multadd+0x7e>
 800d25e:	68a3      	ldr	r3, [r4, #8]
 800d260:	42ab      	cmp	r3, r5
 800d262:	dc19      	bgt.n	800d298 <__multadd+0x74>
 800d264:	6861      	ldr	r1, [r4, #4]
 800d266:	4638      	mov	r0, r7
 800d268:	3101      	adds	r1, #1
 800d26a:	f7ff ff79 	bl	800d160 <_Balloc>
 800d26e:	4680      	mov	r8, r0
 800d270:	b928      	cbnz	r0, 800d27e <__multadd+0x5a>
 800d272:	4602      	mov	r2, r0
 800d274:	4b0c      	ldr	r3, [pc, #48]	; (800d2a8 <__multadd+0x84>)
 800d276:	480d      	ldr	r0, [pc, #52]	; (800d2ac <__multadd+0x88>)
 800d278:	21b5      	movs	r1, #181	; 0xb5
 800d27a:	f7fc f811 	bl	80092a0 <__assert_func>
 800d27e:	6922      	ldr	r2, [r4, #16]
 800d280:	3202      	adds	r2, #2
 800d282:	f104 010c 	add.w	r1, r4, #12
 800d286:	0092      	lsls	r2, r2, #2
 800d288:	300c      	adds	r0, #12
 800d28a:	f7fc faf7 	bl	800987c <memcpy>
 800d28e:	4621      	mov	r1, r4
 800d290:	4638      	mov	r0, r7
 800d292:	f7ff ffa5 	bl	800d1e0 <_Bfree>
 800d296:	4644      	mov	r4, r8
 800d298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d29c:	3501      	adds	r5, #1
 800d29e:	615e      	str	r6, [r3, #20]
 800d2a0:	6125      	str	r5, [r4, #16]
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a8:	08011287 	.word	0x08011287
 800d2ac:	08011314 	.word	0x08011314

0800d2b0 <__s2b>:
 800d2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	4615      	mov	r5, r2
 800d2b8:	461f      	mov	r7, r3
 800d2ba:	2209      	movs	r2, #9
 800d2bc:	3308      	adds	r3, #8
 800d2be:	4606      	mov	r6, r0
 800d2c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2c4:	2100      	movs	r1, #0
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	db09      	blt.n	800d2e0 <__s2b+0x30>
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	f7ff ff47 	bl	800d160 <_Balloc>
 800d2d2:	b940      	cbnz	r0, 800d2e6 <__s2b+0x36>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	4b19      	ldr	r3, [pc, #100]	; (800d33c <__s2b+0x8c>)
 800d2d8:	4819      	ldr	r0, [pc, #100]	; (800d340 <__s2b+0x90>)
 800d2da:	21ce      	movs	r1, #206	; 0xce
 800d2dc:	f7fb ffe0 	bl	80092a0 <__assert_func>
 800d2e0:	0052      	lsls	r2, r2, #1
 800d2e2:	3101      	adds	r1, #1
 800d2e4:	e7f0      	b.n	800d2c8 <__s2b+0x18>
 800d2e6:	9b08      	ldr	r3, [sp, #32]
 800d2e8:	6143      	str	r3, [r0, #20]
 800d2ea:	2d09      	cmp	r5, #9
 800d2ec:	f04f 0301 	mov.w	r3, #1
 800d2f0:	6103      	str	r3, [r0, #16]
 800d2f2:	dd16      	ble.n	800d322 <__s2b+0x72>
 800d2f4:	f104 0909 	add.w	r9, r4, #9
 800d2f8:	46c8      	mov	r8, r9
 800d2fa:	442c      	add	r4, r5
 800d2fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d300:	4601      	mov	r1, r0
 800d302:	3b30      	subs	r3, #48	; 0x30
 800d304:	220a      	movs	r2, #10
 800d306:	4630      	mov	r0, r6
 800d308:	f7ff ff8c 	bl	800d224 <__multadd>
 800d30c:	45a0      	cmp	r8, r4
 800d30e:	d1f5      	bne.n	800d2fc <__s2b+0x4c>
 800d310:	f1a5 0408 	sub.w	r4, r5, #8
 800d314:	444c      	add	r4, r9
 800d316:	1b2d      	subs	r5, r5, r4
 800d318:	1963      	adds	r3, r4, r5
 800d31a:	42bb      	cmp	r3, r7
 800d31c:	db04      	blt.n	800d328 <__s2b+0x78>
 800d31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d322:	340a      	adds	r4, #10
 800d324:	2509      	movs	r5, #9
 800d326:	e7f6      	b.n	800d316 <__s2b+0x66>
 800d328:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d32c:	4601      	mov	r1, r0
 800d32e:	3b30      	subs	r3, #48	; 0x30
 800d330:	220a      	movs	r2, #10
 800d332:	4630      	mov	r0, r6
 800d334:	f7ff ff76 	bl	800d224 <__multadd>
 800d338:	e7ee      	b.n	800d318 <__s2b+0x68>
 800d33a:	bf00      	nop
 800d33c:	08011287 	.word	0x08011287
 800d340:	08011314 	.word	0x08011314

0800d344 <__hi0bits>:
 800d344:	0c03      	lsrs	r3, r0, #16
 800d346:	041b      	lsls	r3, r3, #16
 800d348:	b9d3      	cbnz	r3, 800d380 <__hi0bits+0x3c>
 800d34a:	0400      	lsls	r0, r0, #16
 800d34c:	2310      	movs	r3, #16
 800d34e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d352:	bf04      	itt	eq
 800d354:	0200      	lsleq	r0, r0, #8
 800d356:	3308      	addeq	r3, #8
 800d358:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d35c:	bf04      	itt	eq
 800d35e:	0100      	lsleq	r0, r0, #4
 800d360:	3304      	addeq	r3, #4
 800d362:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d366:	bf04      	itt	eq
 800d368:	0080      	lsleq	r0, r0, #2
 800d36a:	3302      	addeq	r3, #2
 800d36c:	2800      	cmp	r0, #0
 800d36e:	db05      	blt.n	800d37c <__hi0bits+0x38>
 800d370:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d374:	f103 0301 	add.w	r3, r3, #1
 800d378:	bf08      	it	eq
 800d37a:	2320      	moveq	r3, #32
 800d37c:	4618      	mov	r0, r3
 800d37e:	4770      	bx	lr
 800d380:	2300      	movs	r3, #0
 800d382:	e7e4      	b.n	800d34e <__hi0bits+0xa>

0800d384 <__lo0bits>:
 800d384:	6803      	ldr	r3, [r0, #0]
 800d386:	f013 0207 	ands.w	r2, r3, #7
 800d38a:	4601      	mov	r1, r0
 800d38c:	d00b      	beq.n	800d3a6 <__lo0bits+0x22>
 800d38e:	07da      	lsls	r2, r3, #31
 800d390:	d423      	bmi.n	800d3da <__lo0bits+0x56>
 800d392:	0798      	lsls	r0, r3, #30
 800d394:	bf49      	itett	mi
 800d396:	085b      	lsrmi	r3, r3, #1
 800d398:	089b      	lsrpl	r3, r3, #2
 800d39a:	2001      	movmi	r0, #1
 800d39c:	600b      	strmi	r3, [r1, #0]
 800d39e:	bf5c      	itt	pl
 800d3a0:	600b      	strpl	r3, [r1, #0]
 800d3a2:	2002      	movpl	r0, #2
 800d3a4:	4770      	bx	lr
 800d3a6:	b298      	uxth	r0, r3
 800d3a8:	b9a8      	cbnz	r0, 800d3d6 <__lo0bits+0x52>
 800d3aa:	0c1b      	lsrs	r3, r3, #16
 800d3ac:	2010      	movs	r0, #16
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	b90a      	cbnz	r2, 800d3b6 <__lo0bits+0x32>
 800d3b2:	3008      	adds	r0, #8
 800d3b4:	0a1b      	lsrs	r3, r3, #8
 800d3b6:	071a      	lsls	r2, r3, #28
 800d3b8:	bf04      	itt	eq
 800d3ba:	091b      	lsreq	r3, r3, #4
 800d3bc:	3004      	addeq	r0, #4
 800d3be:	079a      	lsls	r2, r3, #30
 800d3c0:	bf04      	itt	eq
 800d3c2:	089b      	lsreq	r3, r3, #2
 800d3c4:	3002      	addeq	r0, #2
 800d3c6:	07da      	lsls	r2, r3, #31
 800d3c8:	d403      	bmi.n	800d3d2 <__lo0bits+0x4e>
 800d3ca:	085b      	lsrs	r3, r3, #1
 800d3cc:	f100 0001 	add.w	r0, r0, #1
 800d3d0:	d005      	beq.n	800d3de <__lo0bits+0x5a>
 800d3d2:	600b      	str	r3, [r1, #0]
 800d3d4:	4770      	bx	lr
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	e7e9      	b.n	800d3ae <__lo0bits+0x2a>
 800d3da:	2000      	movs	r0, #0
 800d3dc:	4770      	bx	lr
 800d3de:	2020      	movs	r0, #32
 800d3e0:	4770      	bx	lr
	...

0800d3e4 <__i2b>:
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	460c      	mov	r4, r1
 800d3e8:	2101      	movs	r1, #1
 800d3ea:	f7ff feb9 	bl	800d160 <_Balloc>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	b928      	cbnz	r0, 800d3fe <__i2b+0x1a>
 800d3f2:	4b05      	ldr	r3, [pc, #20]	; (800d408 <__i2b+0x24>)
 800d3f4:	4805      	ldr	r0, [pc, #20]	; (800d40c <__i2b+0x28>)
 800d3f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d3fa:	f7fb ff51 	bl	80092a0 <__assert_func>
 800d3fe:	2301      	movs	r3, #1
 800d400:	6144      	str	r4, [r0, #20]
 800d402:	6103      	str	r3, [r0, #16]
 800d404:	bd10      	pop	{r4, pc}
 800d406:	bf00      	nop
 800d408:	08011287 	.word	0x08011287
 800d40c:	08011314 	.word	0x08011314

0800d410 <__multiply>:
 800d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	4691      	mov	r9, r2
 800d416:	690a      	ldr	r2, [r1, #16]
 800d418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	bfb8      	it	lt
 800d420:	460b      	movlt	r3, r1
 800d422:	460c      	mov	r4, r1
 800d424:	bfbc      	itt	lt
 800d426:	464c      	movlt	r4, r9
 800d428:	4699      	movlt	r9, r3
 800d42a:	6927      	ldr	r7, [r4, #16]
 800d42c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d430:	68a3      	ldr	r3, [r4, #8]
 800d432:	6861      	ldr	r1, [r4, #4]
 800d434:	eb07 060a 	add.w	r6, r7, sl
 800d438:	42b3      	cmp	r3, r6
 800d43a:	b085      	sub	sp, #20
 800d43c:	bfb8      	it	lt
 800d43e:	3101      	addlt	r1, #1
 800d440:	f7ff fe8e 	bl	800d160 <_Balloc>
 800d444:	b930      	cbnz	r0, 800d454 <__multiply+0x44>
 800d446:	4602      	mov	r2, r0
 800d448:	4b44      	ldr	r3, [pc, #272]	; (800d55c <__multiply+0x14c>)
 800d44a:	4845      	ldr	r0, [pc, #276]	; (800d560 <__multiply+0x150>)
 800d44c:	f240 115d 	movw	r1, #349	; 0x15d
 800d450:	f7fb ff26 	bl	80092a0 <__assert_func>
 800d454:	f100 0514 	add.w	r5, r0, #20
 800d458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d45c:	462b      	mov	r3, r5
 800d45e:	2200      	movs	r2, #0
 800d460:	4543      	cmp	r3, r8
 800d462:	d321      	bcc.n	800d4a8 <__multiply+0x98>
 800d464:	f104 0314 	add.w	r3, r4, #20
 800d468:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d46c:	f109 0314 	add.w	r3, r9, #20
 800d470:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d474:	9202      	str	r2, [sp, #8]
 800d476:	1b3a      	subs	r2, r7, r4
 800d478:	3a15      	subs	r2, #21
 800d47a:	f022 0203 	bic.w	r2, r2, #3
 800d47e:	3204      	adds	r2, #4
 800d480:	f104 0115 	add.w	r1, r4, #21
 800d484:	428f      	cmp	r7, r1
 800d486:	bf38      	it	cc
 800d488:	2204      	movcc	r2, #4
 800d48a:	9201      	str	r2, [sp, #4]
 800d48c:	9a02      	ldr	r2, [sp, #8]
 800d48e:	9303      	str	r3, [sp, #12]
 800d490:	429a      	cmp	r2, r3
 800d492:	d80c      	bhi.n	800d4ae <__multiply+0x9e>
 800d494:	2e00      	cmp	r6, #0
 800d496:	dd03      	ble.n	800d4a0 <__multiply+0x90>
 800d498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d05a      	beq.n	800d556 <__multiply+0x146>
 800d4a0:	6106      	str	r6, [r0, #16]
 800d4a2:	b005      	add	sp, #20
 800d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a8:	f843 2b04 	str.w	r2, [r3], #4
 800d4ac:	e7d8      	b.n	800d460 <__multiply+0x50>
 800d4ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800d4b2:	f1ba 0f00 	cmp.w	sl, #0
 800d4b6:	d024      	beq.n	800d502 <__multiply+0xf2>
 800d4b8:	f104 0e14 	add.w	lr, r4, #20
 800d4bc:	46a9      	mov	r9, r5
 800d4be:	f04f 0c00 	mov.w	ip, #0
 800d4c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d4c6:	f8d9 1000 	ldr.w	r1, [r9]
 800d4ca:	fa1f fb82 	uxth.w	fp, r2
 800d4ce:	b289      	uxth	r1, r1
 800d4d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d4d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d4d8:	f8d9 2000 	ldr.w	r2, [r9]
 800d4dc:	4461      	add	r1, ip
 800d4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d4e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4ea:	b289      	uxth	r1, r1
 800d4ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4f0:	4577      	cmp	r7, lr
 800d4f2:	f849 1b04 	str.w	r1, [r9], #4
 800d4f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4fa:	d8e2      	bhi.n	800d4c2 <__multiply+0xb2>
 800d4fc:	9a01      	ldr	r2, [sp, #4]
 800d4fe:	f845 c002 	str.w	ip, [r5, r2]
 800d502:	9a03      	ldr	r2, [sp, #12]
 800d504:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d508:	3304      	adds	r3, #4
 800d50a:	f1b9 0f00 	cmp.w	r9, #0
 800d50e:	d020      	beq.n	800d552 <__multiply+0x142>
 800d510:	6829      	ldr	r1, [r5, #0]
 800d512:	f104 0c14 	add.w	ip, r4, #20
 800d516:	46ae      	mov	lr, r5
 800d518:	f04f 0a00 	mov.w	sl, #0
 800d51c:	f8bc b000 	ldrh.w	fp, [ip]
 800d520:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d524:	fb09 220b 	mla	r2, r9, fp, r2
 800d528:	4492      	add	sl, r2
 800d52a:	b289      	uxth	r1, r1
 800d52c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d530:	f84e 1b04 	str.w	r1, [lr], #4
 800d534:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d538:	f8be 1000 	ldrh.w	r1, [lr]
 800d53c:	0c12      	lsrs	r2, r2, #16
 800d53e:	fb09 1102 	mla	r1, r9, r2, r1
 800d542:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d546:	4567      	cmp	r7, ip
 800d548:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d54c:	d8e6      	bhi.n	800d51c <__multiply+0x10c>
 800d54e:	9a01      	ldr	r2, [sp, #4]
 800d550:	50a9      	str	r1, [r5, r2]
 800d552:	3504      	adds	r5, #4
 800d554:	e79a      	b.n	800d48c <__multiply+0x7c>
 800d556:	3e01      	subs	r6, #1
 800d558:	e79c      	b.n	800d494 <__multiply+0x84>
 800d55a:	bf00      	nop
 800d55c:	08011287 	.word	0x08011287
 800d560:	08011314 	.word	0x08011314

0800d564 <__pow5mult>:
 800d564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d568:	4615      	mov	r5, r2
 800d56a:	f012 0203 	ands.w	r2, r2, #3
 800d56e:	4606      	mov	r6, r0
 800d570:	460f      	mov	r7, r1
 800d572:	d007      	beq.n	800d584 <__pow5mult+0x20>
 800d574:	4c25      	ldr	r4, [pc, #148]	; (800d60c <__pow5mult+0xa8>)
 800d576:	3a01      	subs	r2, #1
 800d578:	2300      	movs	r3, #0
 800d57a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d57e:	f7ff fe51 	bl	800d224 <__multadd>
 800d582:	4607      	mov	r7, r0
 800d584:	10ad      	asrs	r5, r5, #2
 800d586:	d03d      	beq.n	800d604 <__pow5mult+0xa0>
 800d588:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d58a:	b97c      	cbnz	r4, 800d5ac <__pow5mult+0x48>
 800d58c:	2010      	movs	r0, #16
 800d58e:	f7fc f965 	bl	800985c <malloc>
 800d592:	4602      	mov	r2, r0
 800d594:	6270      	str	r0, [r6, #36]	; 0x24
 800d596:	b928      	cbnz	r0, 800d5a4 <__pow5mult+0x40>
 800d598:	4b1d      	ldr	r3, [pc, #116]	; (800d610 <__pow5mult+0xac>)
 800d59a:	481e      	ldr	r0, [pc, #120]	; (800d614 <__pow5mult+0xb0>)
 800d59c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d5a0:	f7fb fe7e 	bl	80092a0 <__assert_func>
 800d5a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5a8:	6004      	str	r4, [r0, #0]
 800d5aa:	60c4      	str	r4, [r0, #12]
 800d5ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d5b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5b4:	b94c      	cbnz	r4, 800d5ca <__pow5mult+0x66>
 800d5b6:	f240 2171 	movw	r1, #625	; 0x271
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f7ff ff12 	bl	800d3e4 <__i2b>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	6003      	str	r3, [r0, #0]
 800d5ca:	f04f 0900 	mov.w	r9, #0
 800d5ce:	07eb      	lsls	r3, r5, #31
 800d5d0:	d50a      	bpl.n	800d5e8 <__pow5mult+0x84>
 800d5d2:	4639      	mov	r1, r7
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	f7ff ff1a 	bl	800d410 <__multiply>
 800d5dc:	4639      	mov	r1, r7
 800d5de:	4680      	mov	r8, r0
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff fdfd 	bl	800d1e0 <_Bfree>
 800d5e6:	4647      	mov	r7, r8
 800d5e8:	106d      	asrs	r5, r5, #1
 800d5ea:	d00b      	beq.n	800d604 <__pow5mult+0xa0>
 800d5ec:	6820      	ldr	r0, [r4, #0]
 800d5ee:	b938      	cbnz	r0, 800d600 <__pow5mult+0x9c>
 800d5f0:	4622      	mov	r2, r4
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7ff ff0b 	bl	800d410 <__multiply>
 800d5fa:	6020      	str	r0, [r4, #0]
 800d5fc:	f8c0 9000 	str.w	r9, [r0]
 800d600:	4604      	mov	r4, r0
 800d602:	e7e4      	b.n	800d5ce <__pow5mult+0x6a>
 800d604:	4638      	mov	r0, r7
 800d606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d60a:	bf00      	nop
 800d60c:	08011460 	.word	0x08011460
 800d610:	08011215 	.word	0x08011215
 800d614:	08011314 	.word	0x08011314

0800d618 <__lshift>:
 800d618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d61c:	460c      	mov	r4, r1
 800d61e:	6849      	ldr	r1, [r1, #4]
 800d620:	6923      	ldr	r3, [r4, #16]
 800d622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d626:	68a3      	ldr	r3, [r4, #8]
 800d628:	4607      	mov	r7, r0
 800d62a:	4691      	mov	r9, r2
 800d62c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d630:	f108 0601 	add.w	r6, r8, #1
 800d634:	42b3      	cmp	r3, r6
 800d636:	db0b      	blt.n	800d650 <__lshift+0x38>
 800d638:	4638      	mov	r0, r7
 800d63a:	f7ff fd91 	bl	800d160 <_Balloc>
 800d63e:	4605      	mov	r5, r0
 800d640:	b948      	cbnz	r0, 800d656 <__lshift+0x3e>
 800d642:	4602      	mov	r2, r0
 800d644:	4b2a      	ldr	r3, [pc, #168]	; (800d6f0 <__lshift+0xd8>)
 800d646:	482b      	ldr	r0, [pc, #172]	; (800d6f4 <__lshift+0xdc>)
 800d648:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d64c:	f7fb fe28 	bl	80092a0 <__assert_func>
 800d650:	3101      	adds	r1, #1
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	e7ee      	b.n	800d634 <__lshift+0x1c>
 800d656:	2300      	movs	r3, #0
 800d658:	f100 0114 	add.w	r1, r0, #20
 800d65c:	f100 0210 	add.w	r2, r0, #16
 800d660:	4618      	mov	r0, r3
 800d662:	4553      	cmp	r3, sl
 800d664:	db37      	blt.n	800d6d6 <__lshift+0xbe>
 800d666:	6920      	ldr	r0, [r4, #16]
 800d668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d66c:	f104 0314 	add.w	r3, r4, #20
 800d670:	f019 091f 	ands.w	r9, r9, #31
 800d674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d67c:	d02f      	beq.n	800d6de <__lshift+0xc6>
 800d67e:	f1c9 0e20 	rsb	lr, r9, #32
 800d682:	468a      	mov	sl, r1
 800d684:	f04f 0c00 	mov.w	ip, #0
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	fa02 f209 	lsl.w	r2, r2, r9
 800d68e:	ea42 020c 	orr.w	r2, r2, ip
 800d692:	f84a 2b04 	str.w	r2, [sl], #4
 800d696:	f853 2b04 	ldr.w	r2, [r3], #4
 800d69a:	4298      	cmp	r0, r3
 800d69c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d6a0:	d8f2      	bhi.n	800d688 <__lshift+0x70>
 800d6a2:	1b03      	subs	r3, r0, r4
 800d6a4:	3b15      	subs	r3, #21
 800d6a6:	f023 0303 	bic.w	r3, r3, #3
 800d6aa:	3304      	adds	r3, #4
 800d6ac:	f104 0215 	add.w	r2, r4, #21
 800d6b0:	4290      	cmp	r0, r2
 800d6b2:	bf38      	it	cc
 800d6b4:	2304      	movcc	r3, #4
 800d6b6:	f841 c003 	str.w	ip, [r1, r3]
 800d6ba:	f1bc 0f00 	cmp.w	ip, #0
 800d6be:	d001      	beq.n	800d6c4 <__lshift+0xac>
 800d6c0:	f108 0602 	add.w	r6, r8, #2
 800d6c4:	3e01      	subs	r6, #1
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	612e      	str	r6, [r5, #16]
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	f7ff fd88 	bl	800d1e0 <_Bfree>
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6da:	3301      	adds	r3, #1
 800d6dc:	e7c1      	b.n	800d662 <__lshift+0x4a>
 800d6de:	3904      	subs	r1, #4
 800d6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6e8:	4298      	cmp	r0, r3
 800d6ea:	d8f9      	bhi.n	800d6e0 <__lshift+0xc8>
 800d6ec:	e7ea      	b.n	800d6c4 <__lshift+0xac>
 800d6ee:	bf00      	nop
 800d6f0:	08011287 	.word	0x08011287
 800d6f4:	08011314 	.word	0x08011314

0800d6f8 <__mcmp>:
 800d6f8:	b530      	push	{r4, r5, lr}
 800d6fa:	6902      	ldr	r2, [r0, #16]
 800d6fc:	690c      	ldr	r4, [r1, #16]
 800d6fe:	1b12      	subs	r2, r2, r4
 800d700:	d10e      	bne.n	800d720 <__mcmp+0x28>
 800d702:	f100 0314 	add.w	r3, r0, #20
 800d706:	3114      	adds	r1, #20
 800d708:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d70c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d710:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d714:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d718:	42a5      	cmp	r5, r4
 800d71a:	d003      	beq.n	800d724 <__mcmp+0x2c>
 800d71c:	d305      	bcc.n	800d72a <__mcmp+0x32>
 800d71e:	2201      	movs	r2, #1
 800d720:	4610      	mov	r0, r2
 800d722:	bd30      	pop	{r4, r5, pc}
 800d724:	4283      	cmp	r3, r0
 800d726:	d3f3      	bcc.n	800d710 <__mcmp+0x18>
 800d728:	e7fa      	b.n	800d720 <__mcmp+0x28>
 800d72a:	f04f 32ff 	mov.w	r2, #4294967295
 800d72e:	e7f7      	b.n	800d720 <__mcmp+0x28>

0800d730 <__mdiff>:
 800d730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	460c      	mov	r4, r1
 800d736:	4606      	mov	r6, r0
 800d738:	4611      	mov	r1, r2
 800d73a:	4620      	mov	r0, r4
 800d73c:	4690      	mov	r8, r2
 800d73e:	f7ff ffdb 	bl	800d6f8 <__mcmp>
 800d742:	1e05      	subs	r5, r0, #0
 800d744:	d110      	bne.n	800d768 <__mdiff+0x38>
 800d746:	4629      	mov	r1, r5
 800d748:	4630      	mov	r0, r6
 800d74a:	f7ff fd09 	bl	800d160 <_Balloc>
 800d74e:	b930      	cbnz	r0, 800d75e <__mdiff+0x2e>
 800d750:	4b3a      	ldr	r3, [pc, #232]	; (800d83c <__mdiff+0x10c>)
 800d752:	4602      	mov	r2, r0
 800d754:	f240 2132 	movw	r1, #562	; 0x232
 800d758:	4839      	ldr	r0, [pc, #228]	; (800d840 <__mdiff+0x110>)
 800d75a:	f7fb fda1 	bl	80092a0 <__assert_func>
 800d75e:	2301      	movs	r3, #1
 800d760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d768:	bfa4      	itt	ge
 800d76a:	4643      	movge	r3, r8
 800d76c:	46a0      	movge	r8, r4
 800d76e:	4630      	mov	r0, r6
 800d770:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d774:	bfa6      	itte	ge
 800d776:	461c      	movge	r4, r3
 800d778:	2500      	movge	r5, #0
 800d77a:	2501      	movlt	r5, #1
 800d77c:	f7ff fcf0 	bl	800d160 <_Balloc>
 800d780:	b920      	cbnz	r0, 800d78c <__mdiff+0x5c>
 800d782:	4b2e      	ldr	r3, [pc, #184]	; (800d83c <__mdiff+0x10c>)
 800d784:	4602      	mov	r2, r0
 800d786:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d78a:	e7e5      	b.n	800d758 <__mdiff+0x28>
 800d78c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d790:	6926      	ldr	r6, [r4, #16]
 800d792:	60c5      	str	r5, [r0, #12]
 800d794:	f104 0914 	add.w	r9, r4, #20
 800d798:	f108 0514 	add.w	r5, r8, #20
 800d79c:	f100 0e14 	add.w	lr, r0, #20
 800d7a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d7a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d7a8:	f108 0210 	add.w	r2, r8, #16
 800d7ac:	46f2      	mov	sl, lr
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d7b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d7b8:	fa1f f883 	uxth.w	r8, r3
 800d7bc:	fa11 f18b 	uxtah	r1, r1, fp
 800d7c0:	0c1b      	lsrs	r3, r3, #16
 800d7c2:	eba1 0808 	sub.w	r8, r1, r8
 800d7c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d7ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d7ce:	fa1f f888 	uxth.w	r8, r8
 800d7d2:	1419      	asrs	r1, r3, #16
 800d7d4:	454e      	cmp	r6, r9
 800d7d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d7da:	f84a 3b04 	str.w	r3, [sl], #4
 800d7de:	d8e7      	bhi.n	800d7b0 <__mdiff+0x80>
 800d7e0:	1b33      	subs	r3, r6, r4
 800d7e2:	3b15      	subs	r3, #21
 800d7e4:	f023 0303 	bic.w	r3, r3, #3
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	3415      	adds	r4, #21
 800d7ec:	42a6      	cmp	r6, r4
 800d7ee:	bf38      	it	cc
 800d7f0:	2304      	movcc	r3, #4
 800d7f2:	441d      	add	r5, r3
 800d7f4:	4473      	add	r3, lr
 800d7f6:	469e      	mov	lr, r3
 800d7f8:	462e      	mov	r6, r5
 800d7fa:	4566      	cmp	r6, ip
 800d7fc:	d30e      	bcc.n	800d81c <__mdiff+0xec>
 800d7fe:	f10c 0203 	add.w	r2, ip, #3
 800d802:	1b52      	subs	r2, r2, r5
 800d804:	f022 0203 	bic.w	r2, r2, #3
 800d808:	3d03      	subs	r5, #3
 800d80a:	45ac      	cmp	ip, r5
 800d80c:	bf38      	it	cc
 800d80e:	2200      	movcc	r2, #0
 800d810:	441a      	add	r2, r3
 800d812:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d816:	b17b      	cbz	r3, 800d838 <__mdiff+0x108>
 800d818:	6107      	str	r7, [r0, #16]
 800d81a:	e7a3      	b.n	800d764 <__mdiff+0x34>
 800d81c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d820:	fa11 f288 	uxtah	r2, r1, r8
 800d824:	1414      	asrs	r4, r2, #16
 800d826:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d82a:	b292      	uxth	r2, r2
 800d82c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d830:	f84e 2b04 	str.w	r2, [lr], #4
 800d834:	1421      	asrs	r1, r4, #16
 800d836:	e7e0      	b.n	800d7fa <__mdiff+0xca>
 800d838:	3f01      	subs	r7, #1
 800d83a:	e7ea      	b.n	800d812 <__mdiff+0xe2>
 800d83c:	08011287 	.word	0x08011287
 800d840:	08011314 	.word	0x08011314

0800d844 <__ulp>:
 800d844:	b082      	sub	sp, #8
 800d846:	ed8d 0b00 	vstr	d0, [sp]
 800d84a:	9b01      	ldr	r3, [sp, #4]
 800d84c:	4912      	ldr	r1, [pc, #72]	; (800d898 <__ulp+0x54>)
 800d84e:	4019      	ands	r1, r3
 800d850:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d854:	2900      	cmp	r1, #0
 800d856:	dd05      	ble.n	800d864 <__ulp+0x20>
 800d858:	2200      	movs	r2, #0
 800d85a:	460b      	mov	r3, r1
 800d85c:	ec43 2b10 	vmov	d0, r2, r3
 800d860:	b002      	add	sp, #8
 800d862:	4770      	bx	lr
 800d864:	4249      	negs	r1, r1
 800d866:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d86a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d86e:	f04f 0200 	mov.w	r2, #0
 800d872:	f04f 0300 	mov.w	r3, #0
 800d876:	da04      	bge.n	800d882 <__ulp+0x3e>
 800d878:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d87c:	fa41 f300 	asr.w	r3, r1, r0
 800d880:	e7ec      	b.n	800d85c <__ulp+0x18>
 800d882:	f1a0 0114 	sub.w	r1, r0, #20
 800d886:	291e      	cmp	r1, #30
 800d888:	bfda      	itte	le
 800d88a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d88e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d892:	2101      	movgt	r1, #1
 800d894:	460a      	mov	r2, r1
 800d896:	e7e1      	b.n	800d85c <__ulp+0x18>
 800d898:	7ff00000 	.word	0x7ff00000

0800d89c <__b2d>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	6905      	ldr	r5, [r0, #16]
 800d8a0:	f100 0714 	add.w	r7, r0, #20
 800d8a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d8a8:	1f2e      	subs	r6, r5, #4
 800d8aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f7ff fd48 	bl	800d344 <__hi0bits>
 800d8b4:	f1c0 0320 	rsb	r3, r0, #32
 800d8b8:	280a      	cmp	r0, #10
 800d8ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d938 <__b2d+0x9c>
 800d8be:	600b      	str	r3, [r1, #0]
 800d8c0:	dc14      	bgt.n	800d8ec <__b2d+0x50>
 800d8c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d8c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d8ca:	42b7      	cmp	r7, r6
 800d8cc:	ea41 030c 	orr.w	r3, r1, ip
 800d8d0:	bf34      	ite	cc
 800d8d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d8d6:	2100      	movcs	r1, #0
 800d8d8:	3015      	adds	r0, #21
 800d8da:	fa04 f000 	lsl.w	r0, r4, r0
 800d8de:	fa21 f10e 	lsr.w	r1, r1, lr
 800d8e2:	ea40 0201 	orr.w	r2, r0, r1
 800d8e6:	ec43 2b10 	vmov	d0, r2, r3
 800d8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ec:	42b7      	cmp	r7, r6
 800d8ee:	bf3a      	itte	cc
 800d8f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d8f4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d8f8:	2100      	movcs	r1, #0
 800d8fa:	380b      	subs	r0, #11
 800d8fc:	d017      	beq.n	800d92e <__b2d+0x92>
 800d8fe:	f1c0 0c20 	rsb	ip, r0, #32
 800d902:	fa04 f500 	lsl.w	r5, r4, r0
 800d906:	42be      	cmp	r6, r7
 800d908:	fa21 f40c 	lsr.w	r4, r1, ip
 800d90c:	ea45 0504 	orr.w	r5, r5, r4
 800d910:	bf8c      	ite	hi
 800d912:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d916:	2400      	movls	r4, #0
 800d918:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d91c:	fa01 f000 	lsl.w	r0, r1, r0
 800d920:	fa24 f40c 	lsr.w	r4, r4, ip
 800d924:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d928:	ea40 0204 	orr.w	r2, r0, r4
 800d92c:	e7db      	b.n	800d8e6 <__b2d+0x4a>
 800d92e:	ea44 030c 	orr.w	r3, r4, ip
 800d932:	460a      	mov	r2, r1
 800d934:	e7d7      	b.n	800d8e6 <__b2d+0x4a>
 800d936:	bf00      	nop
 800d938:	3ff00000 	.word	0x3ff00000

0800d93c <__d2b>:
 800d93c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d940:	4689      	mov	r9, r1
 800d942:	2101      	movs	r1, #1
 800d944:	ec57 6b10 	vmov	r6, r7, d0
 800d948:	4690      	mov	r8, r2
 800d94a:	f7ff fc09 	bl	800d160 <_Balloc>
 800d94e:	4604      	mov	r4, r0
 800d950:	b930      	cbnz	r0, 800d960 <__d2b+0x24>
 800d952:	4602      	mov	r2, r0
 800d954:	4b25      	ldr	r3, [pc, #148]	; (800d9ec <__d2b+0xb0>)
 800d956:	4826      	ldr	r0, [pc, #152]	; (800d9f0 <__d2b+0xb4>)
 800d958:	f240 310a 	movw	r1, #778	; 0x30a
 800d95c:	f7fb fca0 	bl	80092a0 <__assert_func>
 800d960:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d964:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d968:	bb35      	cbnz	r5, 800d9b8 <__d2b+0x7c>
 800d96a:	2e00      	cmp	r6, #0
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	d028      	beq.n	800d9c2 <__d2b+0x86>
 800d970:	4668      	mov	r0, sp
 800d972:	9600      	str	r6, [sp, #0]
 800d974:	f7ff fd06 	bl	800d384 <__lo0bits>
 800d978:	9900      	ldr	r1, [sp, #0]
 800d97a:	b300      	cbz	r0, 800d9be <__d2b+0x82>
 800d97c:	9a01      	ldr	r2, [sp, #4]
 800d97e:	f1c0 0320 	rsb	r3, r0, #32
 800d982:	fa02 f303 	lsl.w	r3, r2, r3
 800d986:	430b      	orrs	r3, r1
 800d988:	40c2      	lsrs	r2, r0
 800d98a:	6163      	str	r3, [r4, #20]
 800d98c:	9201      	str	r2, [sp, #4]
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	61a3      	str	r3, [r4, #24]
 800d992:	2b00      	cmp	r3, #0
 800d994:	bf14      	ite	ne
 800d996:	2202      	movne	r2, #2
 800d998:	2201      	moveq	r2, #1
 800d99a:	6122      	str	r2, [r4, #16]
 800d99c:	b1d5      	cbz	r5, 800d9d4 <__d2b+0x98>
 800d99e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9a2:	4405      	add	r5, r0
 800d9a4:	f8c9 5000 	str.w	r5, [r9]
 800d9a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9ac:	f8c8 0000 	str.w	r0, [r8]
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	b003      	add	sp, #12
 800d9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9bc:	e7d5      	b.n	800d96a <__d2b+0x2e>
 800d9be:	6161      	str	r1, [r4, #20]
 800d9c0:	e7e5      	b.n	800d98e <__d2b+0x52>
 800d9c2:	a801      	add	r0, sp, #4
 800d9c4:	f7ff fcde 	bl	800d384 <__lo0bits>
 800d9c8:	9b01      	ldr	r3, [sp, #4]
 800d9ca:	6163      	str	r3, [r4, #20]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	6122      	str	r2, [r4, #16]
 800d9d0:	3020      	adds	r0, #32
 800d9d2:	e7e3      	b.n	800d99c <__d2b+0x60>
 800d9d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9dc:	f8c9 0000 	str.w	r0, [r9]
 800d9e0:	6918      	ldr	r0, [r3, #16]
 800d9e2:	f7ff fcaf 	bl	800d344 <__hi0bits>
 800d9e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9ea:	e7df      	b.n	800d9ac <__d2b+0x70>
 800d9ec:	08011287 	.word	0x08011287
 800d9f0:	08011314 	.word	0x08011314

0800d9f4 <__ratio>:
 800d9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	4688      	mov	r8, r1
 800d9fa:	4669      	mov	r1, sp
 800d9fc:	4681      	mov	r9, r0
 800d9fe:	f7ff ff4d 	bl	800d89c <__b2d>
 800da02:	a901      	add	r1, sp, #4
 800da04:	4640      	mov	r0, r8
 800da06:	ec55 4b10 	vmov	r4, r5, d0
 800da0a:	f7ff ff47 	bl	800d89c <__b2d>
 800da0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da16:	eba3 0c02 	sub.w	ip, r3, r2
 800da1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da1e:	1a9b      	subs	r3, r3, r2
 800da20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800da24:	ec51 0b10 	vmov	r0, r1, d0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	bfd6      	itet	le
 800da2c:	460a      	movle	r2, r1
 800da2e:	462a      	movgt	r2, r5
 800da30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800da34:	468b      	mov	fp, r1
 800da36:	462f      	mov	r7, r5
 800da38:	bfd4      	ite	le
 800da3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800da3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da42:	4620      	mov	r0, r4
 800da44:	ee10 2a10 	vmov	r2, s0
 800da48:	465b      	mov	r3, fp
 800da4a:	4639      	mov	r1, r7
 800da4c:	f7f2 ff0e 	bl	800086c <__aeabi_ddiv>
 800da50:	ec41 0b10 	vmov	d0, r0, r1
 800da54:	b003      	add	sp, #12
 800da56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da5a <__copybits>:
 800da5a:	3901      	subs	r1, #1
 800da5c:	b570      	push	{r4, r5, r6, lr}
 800da5e:	1149      	asrs	r1, r1, #5
 800da60:	6914      	ldr	r4, [r2, #16]
 800da62:	3101      	adds	r1, #1
 800da64:	f102 0314 	add.w	r3, r2, #20
 800da68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da70:	1f05      	subs	r5, r0, #4
 800da72:	42a3      	cmp	r3, r4
 800da74:	d30c      	bcc.n	800da90 <__copybits+0x36>
 800da76:	1aa3      	subs	r3, r4, r2
 800da78:	3b11      	subs	r3, #17
 800da7a:	f023 0303 	bic.w	r3, r3, #3
 800da7e:	3211      	adds	r2, #17
 800da80:	42a2      	cmp	r2, r4
 800da82:	bf88      	it	hi
 800da84:	2300      	movhi	r3, #0
 800da86:	4418      	add	r0, r3
 800da88:	2300      	movs	r3, #0
 800da8a:	4288      	cmp	r0, r1
 800da8c:	d305      	bcc.n	800da9a <__copybits+0x40>
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
 800da90:	f853 6b04 	ldr.w	r6, [r3], #4
 800da94:	f845 6f04 	str.w	r6, [r5, #4]!
 800da98:	e7eb      	b.n	800da72 <__copybits+0x18>
 800da9a:	f840 3b04 	str.w	r3, [r0], #4
 800da9e:	e7f4      	b.n	800da8a <__copybits+0x30>

0800daa0 <__any_on>:
 800daa0:	f100 0214 	add.w	r2, r0, #20
 800daa4:	6900      	ldr	r0, [r0, #16]
 800daa6:	114b      	asrs	r3, r1, #5
 800daa8:	4298      	cmp	r0, r3
 800daaa:	b510      	push	{r4, lr}
 800daac:	db11      	blt.n	800dad2 <__any_on+0x32>
 800daae:	dd0a      	ble.n	800dac6 <__any_on+0x26>
 800dab0:	f011 011f 	ands.w	r1, r1, #31
 800dab4:	d007      	beq.n	800dac6 <__any_on+0x26>
 800dab6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800daba:	fa24 f001 	lsr.w	r0, r4, r1
 800dabe:	fa00 f101 	lsl.w	r1, r0, r1
 800dac2:	428c      	cmp	r4, r1
 800dac4:	d10b      	bne.n	800dade <__any_on+0x3e>
 800dac6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800daca:	4293      	cmp	r3, r2
 800dacc:	d803      	bhi.n	800dad6 <__any_on+0x36>
 800dace:	2000      	movs	r0, #0
 800dad0:	bd10      	pop	{r4, pc}
 800dad2:	4603      	mov	r3, r0
 800dad4:	e7f7      	b.n	800dac6 <__any_on+0x26>
 800dad6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dada:	2900      	cmp	r1, #0
 800dadc:	d0f5      	beq.n	800daca <__any_on+0x2a>
 800dade:	2001      	movs	r0, #1
 800dae0:	e7f6      	b.n	800dad0 <__any_on+0x30>

0800dae2 <_realloc_r>:
 800dae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae6:	4680      	mov	r8, r0
 800dae8:	4614      	mov	r4, r2
 800daea:	460e      	mov	r6, r1
 800daec:	b921      	cbnz	r1, 800daf8 <_realloc_r+0x16>
 800daee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daf2:	4611      	mov	r1, r2
 800daf4:	f7fb bf74 	b.w	80099e0 <_malloc_r>
 800daf8:	b92a      	cbnz	r2, 800db06 <_realloc_r+0x24>
 800dafa:	f7fb ff05 	bl	8009908 <_free_r>
 800dafe:	4625      	mov	r5, r4
 800db00:	4628      	mov	r0, r5
 800db02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db06:	f000 fa1b 	bl	800df40 <_malloc_usable_size_r>
 800db0a:	4284      	cmp	r4, r0
 800db0c:	4607      	mov	r7, r0
 800db0e:	d802      	bhi.n	800db16 <_realloc_r+0x34>
 800db10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db14:	d812      	bhi.n	800db3c <_realloc_r+0x5a>
 800db16:	4621      	mov	r1, r4
 800db18:	4640      	mov	r0, r8
 800db1a:	f7fb ff61 	bl	80099e0 <_malloc_r>
 800db1e:	4605      	mov	r5, r0
 800db20:	2800      	cmp	r0, #0
 800db22:	d0ed      	beq.n	800db00 <_realloc_r+0x1e>
 800db24:	42bc      	cmp	r4, r7
 800db26:	4622      	mov	r2, r4
 800db28:	4631      	mov	r1, r6
 800db2a:	bf28      	it	cs
 800db2c:	463a      	movcs	r2, r7
 800db2e:	f7fb fea5 	bl	800987c <memcpy>
 800db32:	4631      	mov	r1, r6
 800db34:	4640      	mov	r0, r8
 800db36:	f7fb fee7 	bl	8009908 <_free_r>
 800db3a:	e7e1      	b.n	800db00 <_realloc_r+0x1e>
 800db3c:	4635      	mov	r5, r6
 800db3e:	e7df      	b.n	800db00 <_realloc_r+0x1e>

0800db40 <__ssputs_r>:
 800db40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db44:	688e      	ldr	r6, [r1, #8]
 800db46:	429e      	cmp	r6, r3
 800db48:	4682      	mov	sl, r0
 800db4a:	460c      	mov	r4, r1
 800db4c:	4690      	mov	r8, r2
 800db4e:	461f      	mov	r7, r3
 800db50:	d838      	bhi.n	800dbc4 <__ssputs_r+0x84>
 800db52:	898a      	ldrh	r2, [r1, #12]
 800db54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db58:	d032      	beq.n	800dbc0 <__ssputs_r+0x80>
 800db5a:	6825      	ldr	r5, [r4, #0]
 800db5c:	6909      	ldr	r1, [r1, #16]
 800db5e:	eba5 0901 	sub.w	r9, r5, r1
 800db62:	6965      	ldr	r5, [r4, #20]
 800db64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db6c:	3301      	adds	r3, #1
 800db6e:	444b      	add	r3, r9
 800db70:	106d      	asrs	r5, r5, #1
 800db72:	429d      	cmp	r5, r3
 800db74:	bf38      	it	cc
 800db76:	461d      	movcc	r5, r3
 800db78:	0553      	lsls	r3, r2, #21
 800db7a:	d531      	bpl.n	800dbe0 <__ssputs_r+0xa0>
 800db7c:	4629      	mov	r1, r5
 800db7e:	f7fb ff2f 	bl	80099e0 <_malloc_r>
 800db82:	4606      	mov	r6, r0
 800db84:	b950      	cbnz	r0, 800db9c <__ssputs_r+0x5c>
 800db86:	230c      	movs	r3, #12
 800db88:	f8ca 3000 	str.w	r3, [sl]
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db92:	81a3      	strh	r3, [r4, #12]
 800db94:	f04f 30ff 	mov.w	r0, #4294967295
 800db98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db9c:	6921      	ldr	r1, [r4, #16]
 800db9e:	464a      	mov	r2, r9
 800dba0:	f7fb fe6c 	bl	800987c <memcpy>
 800dba4:	89a3      	ldrh	r3, [r4, #12]
 800dba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbae:	81a3      	strh	r3, [r4, #12]
 800dbb0:	6126      	str	r6, [r4, #16]
 800dbb2:	6165      	str	r5, [r4, #20]
 800dbb4:	444e      	add	r6, r9
 800dbb6:	eba5 0509 	sub.w	r5, r5, r9
 800dbba:	6026      	str	r6, [r4, #0]
 800dbbc:	60a5      	str	r5, [r4, #8]
 800dbbe:	463e      	mov	r6, r7
 800dbc0:	42be      	cmp	r6, r7
 800dbc2:	d900      	bls.n	800dbc6 <__ssputs_r+0x86>
 800dbc4:	463e      	mov	r6, r7
 800dbc6:	6820      	ldr	r0, [r4, #0]
 800dbc8:	4632      	mov	r2, r6
 800dbca:	4641      	mov	r1, r8
 800dbcc:	f7fb fe64 	bl	8009898 <memmove>
 800dbd0:	68a3      	ldr	r3, [r4, #8]
 800dbd2:	1b9b      	subs	r3, r3, r6
 800dbd4:	60a3      	str	r3, [r4, #8]
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	4433      	add	r3, r6
 800dbda:	6023      	str	r3, [r4, #0]
 800dbdc:	2000      	movs	r0, #0
 800dbde:	e7db      	b.n	800db98 <__ssputs_r+0x58>
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	f7ff ff7e 	bl	800dae2 <_realloc_r>
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d1e1      	bne.n	800dbb0 <__ssputs_r+0x70>
 800dbec:	6921      	ldr	r1, [r4, #16]
 800dbee:	4650      	mov	r0, sl
 800dbf0:	f7fb fe8a 	bl	8009908 <_free_r>
 800dbf4:	e7c7      	b.n	800db86 <__ssputs_r+0x46>
	...

0800dbf8 <_svfiprintf_r>:
 800dbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	4698      	mov	r8, r3
 800dbfe:	898b      	ldrh	r3, [r1, #12]
 800dc00:	061b      	lsls	r3, r3, #24
 800dc02:	b09d      	sub	sp, #116	; 0x74
 800dc04:	4607      	mov	r7, r0
 800dc06:	460d      	mov	r5, r1
 800dc08:	4614      	mov	r4, r2
 800dc0a:	d50e      	bpl.n	800dc2a <_svfiprintf_r+0x32>
 800dc0c:	690b      	ldr	r3, [r1, #16]
 800dc0e:	b963      	cbnz	r3, 800dc2a <_svfiprintf_r+0x32>
 800dc10:	2140      	movs	r1, #64	; 0x40
 800dc12:	f7fb fee5 	bl	80099e0 <_malloc_r>
 800dc16:	6028      	str	r0, [r5, #0]
 800dc18:	6128      	str	r0, [r5, #16]
 800dc1a:	b920      	cbnz	r0, 800dc26 <_svfiprintf_r+0x2e>
 800dc1c:	230c      	movs	r3, #12
 800dc1e:	603b      	str	r3, [r7, #0]
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	e0d1      	b.n	800ddca <_svfiprintf_r+0x1d2>
 800dc26:	2340      	movs	r3, #64	; 0x40
 800dc28:	616b      	str	r3, [r5, #20]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc2e:	2320      	movs	r3, #32
 800dc30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc34:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc38:	2330      	movs	r3, #48	; 0x30
 800dc3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dde4 <_svfiprintf_r+0x1ec>
 800dc3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc42:	f04f 0901 	mov.w	r9, #1
 800dc46:	4623      	mov	r3, r4
 800dc48:	469a      	mov	sl, r3
 800dc4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc4e:	b10a      	cbz	r2, 800dc54 <_svfiprintf_r+0x5c>
 800dc50:	2a25      	cmp	r2, #37	; 0x25
 800dc52:	d1f9      	bne.n	800dc48 <_svfiprintf_r+0x50>
 800dc54:	ebba 0b04 	subs.w	fp, sl, r4
 800dc58:	d00b      	beq.n	800dc72 <_svfiprintf_r+0x7a>
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	4622      	mov	r2, r4
 800dc5e:	4629      	mov	r1, r5
 800dc60:	4638      	mov	r0, r7
 800dc62:	f7ff ff6d 	bl	800db40 <__ssputs_r>
 800dc66:	3001      	adds	r0, #1
 800dc68:	f000 80aa 	beq.w	800ddc0 <_svfiprintf_r+0x1c8>
 800dc6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc6e:	445a      	add	r2, fp
 800dc70:	9209      	str	r2, [sp, #36]	; 0x24
 800dc72:	f89a 3000 	ldrb.w	r3, [sl]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 80a2 	beq.w	800ddc0 <_svfiprintf_r+0x1c8>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc86:	f10a 0a01 	add.w	sl, sl, #1
 800dc8a:	9304      	str	r3, [sp, #16]
 800dc8c:	9307      	str	r3, [sp, #28]
 800dc8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc92:	931a      	str	r3, [sp, #104]	; 0x68
 800dc94:	4654      	mov	r4, sl
 800dc96:	2205      	movs	r2, #5
 800dc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc9c:	4851      	ldr	r0, [pc, #324]	; (800dde4 <_svfiprintf_r+0x1ec>)
 800dc9e:	f7f2 faaf 	bl	8000200 <memchr>
 800dca2:	9a04      	ldr	r2, [sp, #16]
 800dca4:	b9d8      	cbnz	r0, 800dcde <_svfiprintf_r+0xe6>
 800dca6:	06d0      	lsls	r0, r2, #27
 800dca8:	bf44      	itt	mi
 800dcaa:	2320      	movmi	r3, #32
 800dcac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcb0:	0711      	lsls	r1, r2, #28
 800dcb2:	bf44      	itt	mi
 800dcb4:	232b      	movmi	r3, #43	; 0x2b
 800dcb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcba:	f89a 3000 	ldrb.w	r3, [sl]
 800dcbe:	2b2a      	cmp	r3, #42	; 0x2a
 800dcc0:	d015      	beq.n	800dcee <_svfiprintf_r+0xf6>
 800dcc2:	9a07      	ldr	r2, [sp, #28]
 800dcc4:	4654      	mov	r4, sl
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	f04f 0c0a 	mov.w	ip, #10
 800dccc:	4621      	mov	r1, r4
 800dcce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcd2:	3b30      	subs	r3, #48	; 0x30
 800dcd4:	2b09      	cmp	r3, #9
 800dcd6:	d94e      	bls.n	800dd76 <_svfiprintf_r+0x17e>
 800dcd8:	b1b0      	cbz	r0, 800dd08 <_svfiprintf_r+0x110>
 800dcda:	9207      	str	r2, [sp, #28]
 800dcdc:	e014      	b.n	800dd08 <_svfiprintf_r+0x110>
 800dcde:	eba0 0308 	sub.w	r3, r0, r8
 800dce2:	fa09 f303 	lsl.w	r3, r9, r3
 800dce6:	4313      	orrs	r3, r2
 800dce8:	9304      	str	r3, [sp, #16]
 800dcea:	46a2      	mov	sl, r4
 800dcec:	e7d2      	b.n	800dc94 <_svfiprintf_r+0x9c>
 800dcee:	9b03      	ldr	r3, [sp, #12]
 800dcf0:	1d19      	adds	r1, r3, #4
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	9103      	str	r1, [sp, #12]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	bfbb      	ittet	lt
 800dcfa:	425b      	neglt	r3, r3
 800dcfc:	f042 0202 	orrlt.w	r2, r2, #2
 800dd00:	9307      	strge	r3, [sp, #28]
 800dd02:	9307      	strlt	r3, [sp, #28]
 800dd04:	bfb8      	it	lt
 800dd06:	9204      	strlt	r2, [sp, #16]
 800dd08:	7823      	ldrb	r3, [r4, #0]
 800dd0a:	2b2e      	cmp	r3, #46	; 0x2e
 800dd0c:	d10c      	bne.n	800dd28 <_svfiprintf_r+0x130>
 800dd0e:	7863      	ldrb	r3, [r4, #1]
 800dd10:	2b2a      	cmp	r3, #42	; 0x2a
 800dd12:	d135      	bne.n	800dd80 <_svfiprintf_r+0x188>
 800dd14:	9b03      	ldr	r3, [sp, #12]
 800dd16:	1d1a      	adds	r2, r3, #4
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	9203      	str	r2, [sp, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	bfb8      	it	lt
 800dd20:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd24:	3402      	adds	r4, #2
 800dd26:	9305      	str	r3, [sp, #20]
 800dd28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ddf4 <_svfiprintf_r+0x1fc>
 800dd2c:	7821      	ldrb	r1, [r4, #0]
 800dd2e:	2203      	movs	r2, #3
 800dd30:	4650      	mov	r0, sl
 800dd32:	f7f2 fa65 	bl	8000200 <memchr>
 800dd36:	b140      	cbz	r0, 800dd4a <_svfiprintf_r+0x152>
 800dd38:	2340      	movs	r3, #64	; 0x40
 800dd3a:	eba0 000a 	sub.w	r0, r0, sl
 800dd3e:	fa03 f000 	lsl.w	r0, r3, r0
 800dd42:	9b04      	ldr	r3, [sp, #16]
 800dd44:	4303      	orrs	r3, r0
 800dd46:	3401      	adds	r4, #1
 800dd48:	9304      	str	r3, [sp, #16]
 800dd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd4e:	4826      	ldr	r0, [pc, #152]	; (800dde8 <_svfiprintf_r+0x1f0>)
 800dd50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd54:	2206      	movs	r2, #6
 800dd56:	f7f2 fa53 	bl	8000200 <memchr>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d038      	beq.n	800ddd0 <_svfiprintf_r+0x1d8>
 800dd5e:	4b23      	ldr	r3, [pc, #140]	; (800ddec <_svfiprintf_r+0x1f4>)
 800dd60:	bb1b      	cbnz	r3, 800ddaa <_svfiprintf_r+0x1b2>
 800dd62:	9b03      	ldr	r3, [sp, #12]
 800dd64:	3307      	adds	r3, #7
 800dd66:	f023 0307 	bic.w	r3, r3, #7
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	9303      	str	r3, [sp, #12]
 800dd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd70:	4433      	add	r3, r6
 800dd72:	9309      	str	r3, [sp, #36]	; 0x24
 800dd74:	e767      	b.n	800dc46 <_svfiprintf_r+0x4e>
 800dd76:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd7a:	460c      	mov	r4, r1
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	e7a5      	b.n	800dccc <_svfiprintf_r+0xd4>
 800dd80:	2300      	movs	r3, #0
 800dd82:	3401      	adds	r4, #1
 800dd84:	9305      	str	r3, [sp, #20]
 800dd86:	4619      	mov	r1, r3
 800dd88:	f04f 0c0a 	mov.w	ip, #10
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd92:	3a30      	subs	r2, #48	; 0x30
 800dd94:	2a09      	cmp	r2, #9
 800dd96:	d903      	bls.n	800dda0 <_svfiprintf_r+0x1a8>
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d0c5      	beq.n	800dd28 <_svfiprintf_r+0x130>
 800dd9c:	9105      	str	r1, [sp, #20]
 800dd9e:	e7c3      	b.n	800dd28 <_svfiprintf_r+0x130>
 800dda0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dda4:	4604      	mov	r4, r0
 800dda6:	2301      	movs	r3, #1
 800dda8:	e7f0      	b.n	800dd8c <_svfiprintf_r+0x194>
 800ddaa:	ab03      	add	r3, sp, #12
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	462a      	mov	r2, r5
 800ddb0:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <_svfiprintf_r+0x1f8>)
 800ddb2:	a904      	add	r1, sp, #16
 800ddb4:	4638      	mov	r0, r7
 800ddb6:	f7fc f88b 	bl	8009ed0 <_printf_float>
 800ddba:	1c42      	adds	r2, r0, #1
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	d1d6      	bne.n	800dd6e <_svfiprintf_r+0x176>
 800ddc0:	89ab      	ldrh	r3, [r5, #12]
 800ddc2:	065b      	lsls	r3, r3, #25
 800ddc4:	f53f af2c 	bmi.w	800dc20 <_svfiprintf_r+0x28>
 800ddc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddca:	b01d      	add	sp, #116	; 0x74
 800ddcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd0:	ab03      	add	r3, sp, #12
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	462a      	mov	r2, r5
 800ddd6:	4b06      	ldr	r3, [pc, #24]	; (800ddf0 <_svfiprintf_r+0x1f8>)
 800ddd8:	a904      	add	r1, sp, #16
 800ddda:	4638      	mov	r0, r7
 800dddc:	f7fc fb1c 	bl	800a418 <_printf_i>
 800dde0:	e7eb      	b.n	800ddba <_svfiprintf_r+0x1c2>
 800dde2:	bf00      	nop
 800dde4:	08011168 	.word	0x08011168
 800dde8:	08011172 	.word	0x08011172
 800ddec:	08009ed1 	.word	0x08009ed1
 800ddf0:	0800db41 	.word	0x0800db41
 800ddf4:	0801116e 	.word	0x0801116e

0800ddf8 <_read_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4d07      	ldr	r5, [pc, #28]	; (800de18 <_read_r+0x20>)
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	4608      	mov	r0, r1
 800de00:	4611      	mov	r1, r2
 800de02:	2200      	movs	r2, #0
 800de04:	602a      	str	r2, [r5, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	f7f3 fa68 	bl	80012dc <_read>
 800de0c:	1c43      	adds	r3, r0, #1
 800de0e:	d102      	bne.n	800de16 <_read_r+0x1e>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	b103      	cbz	r3, 800de16 <_read_r+0x1e>
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	20001b18 	.word	0x20001b18
 800de1c:	00000000 	.word	0x00000000

0800de20 <nan>:
 800de20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de28 <nan+0x8>
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	00000000 	.word	0x00000000
 800de2c:	7ff80000 	.word	0x7ff80000

0800de30 <_raise_r>:
 800de30:	291f      	cmp	r1, #31
 800de32:	b538      	push	{r3, r4, r5, lr}
 800de34:	4604      	mov	r4, r0
 800de36:	460d      	mov	r5, r1
 800de38:	d904      	bls.n	800de44 <_raise_r+0x14>
 800de3a:	2316      	movs	r3, #22
 800de3c:	6003      	str	r3, [r0, #0]
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de46:	b112      	cbz	r2, 800de4e <_raise_r+0x1e>
 800de48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de4c:	b94b      	cbnz	r3, 800de62 <_raise_r+0x32>
 800de4e:	4620      	mov	r0, r4
 800de50:	f000 f830 	bl	800deb4 <_getpid_r>
 800de54:	462a      	mov	r2, r5
 800de56:	4601      	mov	r1, r0
 800de58:	4620      	mov	r0, r4
 800de5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de5e:	f000 b817 	b.w	800de90 <_kill_r>
 800de62:	2b01      	cmp	r3, #1
 800de64:	d00a      	beq.n	800de7c <_raise_r+0x4c>
 800de66:	1c59      	adds	r1, r3, #1
 800de68:	d103      	bne.n	800de72 <_raise_r+0x42>
 800de6a:	2316      	movs	r3, #22
 800de6c:	6003      	str	r3, [r0, #0]
 800de6e:	2001      	movs	r0, #1
 800de70:	e7e7      	b.n	800de42 <_raise_r+0x12>
 800de72:	2400      	movs	r4, #0
 800de74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de78:	4628      	mov	r0, r5
 800de7a:	4798      	blx	r3
 800de7c:	2000      	movs	r0, #0
 800de7e:	e7e0      	b.n	800de42 <_raise_r+0x12>

0800de80 <raise>:
 800de80:	4b02      	ldr	r3, [pc, #8]	; (800de8c <raise+0xc>)
 800de82:	4601      	mov	r1, r0
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	f7ff bfd3 	b.w	800de30 <_raise_r>
 800de8a:	bf00      	nop
 800de8c:	20000080 	.word	0x20000080

0800de90 <_kill_r>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	4d07      	ldr	r5, [pc, #28]	; (800deb0 <_kill_r+0x20>)
 800de94:	2300      	movs	r3, #0
 800de96:	4604      	mov	r4, r0
 800de98:	4608      	mov	r0, r1
 800de9a:	4611      	mov	r1, r2
 800de9c:	602b      	str	r3, [r5, #0]
 800de9e:	f7f3 fa03 	bl	80012a8 <_kill>
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	d102      	bne.n	800deac <_kill_r+0x1c>
 800dea6:	682b      	ldr	r3, [r5, #0]
 800dea8:	b103      	cbz	r3, 800deac <_kill_r+0x1c>
 800deaa:	6023      	str	r3, [r4, #0]
 800deac:	bd38      	pop	{r3, r4, r5, pc}
 800deae:	bf00      	nop
 800deb0:	20001b18 	.word	0x20001b18

0800deb4 <_getpid_r>:
 800deb4:	f7f3 b9f0 	b.w	8001298 <_getpid>

0800deb8 <strncmp>:
 800deb8:	b510      	push	{r4, lr}
 800deba:	b17a      	cbz	r2, 800dedc <strncmp+0x24>
 800debc:	4603      	mov	r3, r0
 800debe:	3901      	subs	r1, #1
 800dec0:	1884      	adds	r4, r0, r2
 800dec2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dec6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800deca:	4290      	cmp	r0, r2
 800decc:	d101      	bne.n	800ded2 <strncmp+0x1a>
 800dece:	42a3      	cmp	r3, r4
 800ded0:	d101      	bne.n	800ded6 <strncmp+0x1e>
 800ded2:	1a80      	subs	r0, r0, r2
 800ded4:	bd10      	pop	{r4, pc}
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d1f3      	bne.n	800dec2 <strncmp+0xa>
 800deda:	e7fa      	b.n	800ded2 <strncmp+0x1a>
 800dedc:	4610      	mov	r0, r2
 800dede:	e7f9      	b.n	800ded4 <strncmp+0x1c>

0800dee0 <__ascii_wctomb>:
 800dee0:	b149      	cbz	r1, 800def6 <__ascii_wctomb+0x16>
 800dee2:	2aff      	cmp	r2, #255	; 0xff
 800dee4:	bf85      	ittet	hi
 800dee6:	238a      	movhi	r3, #138	; 0x8a
 800dee8:	6003      	strhi	r3, [r0, #0]
 800deea:	700a      	strbls	r2, [r1, #0]
 800deec:	f04f 30ff 	movhi.w	r0, #4294967295
 800def0:	bf98      	it	ls
 800def2:	2001      	movls	r0, #1
 800def4:	4770      	bx	lr
 800def6:	4608      	mov	r0, r1
 800def8:	4770      	bx	lr
	...

0800defc <_fstat_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	4d07      	ldr	r5, [pc, #28]	; (800df1c <_fstat_r+0x20>)
 800df00:	2300      	movs	r3, #0
 800df02:	4604      	mov	r4, r0
 800df04:	4608      	mov	r0, r1
 800df06:	4611      	mov	r1, r2
 800df08:	602b      	str	r3, [r5, #0]
 800df0a:	f7f3 fa2c 	bl	8001366 <_fstat>
 800df0e:	1c43      	adds	r3, r0, #1
 800df10:	d102      	bne.n	800df18 <_fstat_r+0x1c>
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	b103      	cbz	r3, 800df18 <_fstat_r+0x1c>
 800df16:	6023      	str	r3, [r4, #0]
 800df18:	bd38      	pop	{r3, r4, r5, pc}
 800df1a:	bf00      	nop
 800df1c:	20001b18 	.word	0x20001b18

0800df20 <_isatty_r>:
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	4d06      	ldr	r5, [pc, #24]	; (800df3c <_isatty_r+0x1c>)
 800df24:	2300      	movs	r3, #0
 800df26:	4604      	mov	r4, r0
 800df28:	4608      	mov	r0, r1
 800df2a:	602b      	str	r3, [r5, #0]
 800df2c:	f7f3 fa2b 	bl	8001386 <_isatty>
 800df30:	1c43      	adds	r3, r0, #1
 800df32:	d102      	bne.n	800df3a <_isatty_r+0x1a>
 800df34:	682b      	ldr	r3, [r5, #0]
 800df36:	b103      	cbz	r3, 800df3a <_isatty_r+0x1a>
 800df38:	6023      	str	r3, [r4, #0]
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	20001b18 	.word	0x20001b18

0800df40 <_malloc_usable_size_r>:
 800df40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df44:	1f18      	subs	r0, r3, #4
 800df46:	2b00      	cmp	r3, #0
 800df48:	bfbc      	itt	lt
 800df4a:	580b      	ldrlt	r3, [r1, r0]
 800df4c:	18c0      	addlt	r0, r0, r3
 800df4e:	4770      	bx	lr

0800df50 <_init>:
 800df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df52:	bf00      	nop
 800df54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df56:	bc08      	pop	{r3}
 800df58:	469e      	mov	lr, r3
 800df5a:	4770      	bx	lr

0800df5c <_fini>:
 800df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5e:	bf00      	nop
 800df60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df62:	bc08      	pop	{r3}
 800df64:	469e      	mov	lr, r3
 800df66:	4770      	bx	lr

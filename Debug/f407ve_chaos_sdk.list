
f407ve_chaos_sdk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029f4  0800ccf8  0800ccf8  0001ccf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6ec  0800f6ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6ec  0800f6ec  0001f6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6f4  0800f6f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6f4  0800f6f4  0001f6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6f8  0800f6f8  0001f6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f6fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000d0c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000eec  20000eec  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001608e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c75  00000000  00000000  0003629e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00039f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f18  00000000  00000000  0003af80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028fb5  00000000  00000000  0003be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a2d  00000000  00000000  00064e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e280f  00000000  00000000  0007e87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161089  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057a4  00000000  00000000  001610dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cce0 	.word	0x0800cce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cce0 	.word	0x0800cce0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_GPIO_Init+0x9c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xa0>)
 800106a:	f004 fc99 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NP_dir_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NP_dir_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xa0>)
 8001088:	f004 faee 	bl	8005668 <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f004 f8cc 	bl	800523c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f818 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff ffa6 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ac:	f000 fa90 	bl	80015d0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010b0:	f000 f9ba 	bl	8001428 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010b4:	2108      	movs	r1, #8
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <main+0x34>)
 80010b8:	f005 f9f2 	bl	80064a0 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <main+0x38>)
 80010c4:	f004 fc6c 	bl	80059a0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80010c8:	f000 fb26 	bl	8001718 <app_main>
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x30>
 80010ce:	bf00      	nop
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40020400 	.word	0x40020400

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fb46 	bl	8008778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemClock_Config+0xd0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemClock_Config+0xd0>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a22      	ldr	r2, [pc, #136]	; (80011ac <SystemClock_Config+0xd4>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800114c:	23a8      	movs	r3, #168	; 0xa8
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fc39 	bl	80059d4 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 f822 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2105      	movs	r1, #5
 800118a:	4618      	mov	r0, r3
 800118c:	f004 fe9a 	bl	8005ec4 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f80b 	bl	80011b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800119a:	f004 ff79 	bl	8006090 <HAL_RCC_EnableCSS>
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001210:	f005 f882 	bl	8006318 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x8>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f004 f840 	bl	80052e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART1_IRQHandler+0x10>)
 800126a:	f006 f807 	bl	800727c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000248 	.word	0x20000248

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f006 ff81 	bl	8008198 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f003 ff81 	bl	8005218 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f006 fee6 	bl	8008198 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	20000ef0 	.word	0x20000ef0

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_TIM4_Init+0xe8>)
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <MX_TIM4_Init+0xec>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM4_Init+0xe8>)
 800146c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM4_Init+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001480:	f004 ff65 	bl	800634e <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800148a:	f7ff fe91 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	4619      	mov	r1, r3
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <MX_TIM4_Init+0xe8>)
 800149c:	f005 f98a 	bl	80067b4 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014a6:	f7ff fe83 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014aa:	4819      	ldr	r0, [pc, #100]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ac:	f004 ff9e 	bl	80063ec <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014b6:	f7ff fe7b 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ca:	f005 fd4b 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014d4:	f7ff fe6c 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80014dc:	f241 0368 	movw	r3, #4200	; 0x1068
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014f2:	f005 f89d 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f7ff fe58 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001502:	f000 f82b 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000200 	.word	0x20000200
 8001514:	40000800 	.word	0x40000800

08001518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40000800 	.word	0x40000800
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_TIM_MspPostInit+0x68>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d11e      	bne.n	80015bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PP_step_Pin;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PP_step_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_TIM_MspPostInit+0x70>)
 80015b8:	f004 f856 	bl	8005668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART1_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001608:	f005 fd28 	bl	800705c <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fdcd 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000248 	.word	0x20000248
 8001620:	40011000 	.word	0x40011000

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_UART_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d134      	bne.n	80016b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_UART_MspInit+0x98>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_UART_MspInit+0x9c>)
 800169c:	f003 ffe4 	bl	8005668 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f003 ff16 	bl	80054d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f003 ff2f 	bl	800550e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ee:	f7ff fe89 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f006 ffe1 	bl	80086b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fcd1 	bl	800109c <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001708:	0800f6fc 	.word	0x0800f6fc
  ldr r2, =_sbss
 800170c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001710:	20000eec 	.word	0x20000eec

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <app_main>:

#include "board_pkg.h"


void app_main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af02      	add	r7, sp, #8
	int state = newEntities(5);
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fd94 	bl	800224c <newEntities>
 8001724:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "app_main: error entity allocation");
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10e      	bne.n	800174a <app_main+0x32>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf0c      	ite	eq
 8001732:	2301      	moveq	r3, #1
 8001734:	2300      	movne	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <app_main+0x48>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	230e      	movs	r3, #14
 8001740:	4a08      	ldr	r2, [pc, #32]	; (8001764 <app_main+0x4c>)
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <app_main+0x50>)
 8001744:	f003 fc46 	bl	8004fd4 <__M_Error>
 8001748:	e006      	b.n	8001758 <app_main+0x40>
	entityBoardInit();
 800174a:	f000 f80f 	bl	800176c <entityBoardInit>


	init_stm32_communicator();
 800174e:	f003 fca3 	bl	8005098 <init_stm32_communicator>
	// protocolAllTest(44, 100, (TESTER_CRC | TESTER_ENDIAN | TESTER_CONVERT | TESTER_RAW_P_DMA | TESTER_REED_SOLOMON_ECC | TESTER_CALLBACK_MANAGER | TESTER_PULL_CONTAINER | TESTER_RAW_P_IT | TESTER_RAW_P_GEN));
	//protocolAllTest(44, 100, TESTER_ENDIAN | TESTER_CONVERT | TESTER_RAW_P_GEN |TESTER_RAW_P_IT | TESTER_RAW_P_DMA);
	while(1) {
		proceedIncommingMessage();
 8001752:	f003 fcd3 	bl	80050fc <proceedIncommingMessage>
 8001756:	e7fc      	b.n	8001752 <app_main+0x3a>
	}
}
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800cd2c 	.word	0x0800cd2c
 8001764:	0800ccf8 	.word	0x0800ccf8
 8001768:	0800cd14 	.word	0x0800cd14

0800176c <entityBoardInit>:
#include "smart_assert.h"

const boards_t* board_entry = NULL;

void entityBoardInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	; 0x38
 8001770:	af06      	add	r7, sp, #24
	reg board_entityNum = ENTITY_NUMBER_ERROR;
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	60bb      	str	r3, [r7, #8]
	reg fieldNumber = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]

	int state = initEntity(&board_entityNum, (17 + 10 + 1), sizeof(boards_t), "BID ", 0, 0, NULL);
 800177c:	f107 0008 	add.w	r0, r7, #8
 8001780:	2300      	movs	r3, #0
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2300      	movs	r3, #0
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <entityBoardInit+0xdc>)
 800178e:	2270      	movs	r2, #112	; 0x70
 8001790:	211c      	movs	r1, #28
 8001792:	f000 fdad 	bl	80022f0 <initEntity>
 8001796:	61f8      	str	r0, [r7, #28]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "entityBoardInit: initEntity Error");
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <entityBoardInit+0x50>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <entityBoardInit+0xe0>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	230d      	movs	r3, #13
 80017b2:	4a27      	ldr	r2, [pc, #156]	; (8001850 <entityBoardInit+0xe4>)
 80017b4:	4827      	ldr	r0, [pc, #156]	; (8001854 <entityBoardInit+0xe8>)
 80017b6:	f003 fc0d 	bl	8004fd4 <__M_Error>
 80017ba:	e165      	b.n	8001a88 <entityBoardInit+0x31c>

	Entity* const entity = getEntityPointer(board_entityNum);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	613b      	str	r3, [r7, #16]
 */

// getter entity pointer by entity number
STATIC_FORCEINLINE Entity * getEntityPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <entityBoardInit+0xec>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d206      	bcs.n	80017d8 <entityBoardInit+0x6c>
        return entityInfo.entities[entityNumber];
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <entityBoardInit+0xec>)
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e000      	b.n	80017da <entityBoardInit+0x6e>
    }
    return NULLPTR(Entity*);
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
	M_Assert_BreakSaveCheck((entity == NULL), M_EMPTY, return, "entityBoardInit: entity is null");
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10e      	bne.n	8001800 <entityBoardInit+0x94>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <entityBoardInit+0xf0>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2310      	movs	r3, #16
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <entityBoardInit+0xe4>)
 80017f8:	4819      	ldr	r0, [pc, #100]	; (8001860 <entityBoardInit+0xf4>)
 80017fa:	f003 fbeb 	bl	8004fd4 <__M_Error>
 80017fe:	e143      	b.n	8001a88 <entityBoardInit+0x31c>

	boards_t* entry = getVoidPointer(board_entityNum);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60fb      	str	r3, [r7, #12]
}

// getter data pointer by entity number
STATIC_FORCEINLINE void * getVoidPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <entityBoardInit+0xec>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	429a      	cmp	r2, r3
 800180c:	d207      	bcs.n	800181e <entityBoardInit+0xb2>
        return entityInfo.entities[entityNumber]->pointer;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <entityBoardInit+0xec>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e000      	b.n	8001820 <entityBoardInit+0xb4>
    }
    return NULL;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
	M_Assert_BreakSaveCheck((entry == NULL), M_EMPTY, return, "entityBoardInit: entry is null");
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d121      	bne.n	800186c <entityBoardInit+0x100>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <entityBoardInit+0xf8>)
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2313      	movs	r3, #19
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <entityBoardInit+0xe4>)
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <entityBoardInit+0xfc>)
 8001840:	f003 fbc8 	bl	8004fd4 <__M_Error>
 8001844:	e120      	b.n	8001a88 <entityBoardInit+0x31c>
 8001846:	bf00      	nop
 8001848:	0800cd50 	.word	0x0800cd50
 800184c:	0800cd90 	.word	0x0800cd90
 8001850:	0800cd58 	.word	0x0800cd58
 8001854:	0800cd78 	.word	0x0800cd78
 8001858:	20000290 	.word	0x20000290
 800185c:	0800cdc8 	.word	0x0800cdc8
 8001860:	0800cdb4 	.word	0x0800cdb4
 8001864:	0800cdf8 	.word	0x0800cdf8
 8001868:	0800cde8 	.word	0x0800cde8

	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, boardId), 	UINT8_TYPE, 	"B   ", &entry->boardId);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	1d39      	adds	r1, r7, #4
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	4b87      	ldr	r3, [pc, #540]	; (8001a90 <entityBoardInit+0x324>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2301      	movs	r3, #1
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	2201      	movs	r2, #1
 800187e:	69b8      	ldr	r0, [r7, #24]
 8001880:	f000 fe48 	bl	8002514 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, major), 		UINT8_TYPE, 	"VerH", &entry->major);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	1d39      	adds	r1, r7, #4
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <entityBoardInit+0x328>)
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	2201      	movs	r2, #1
 8001898:	69b8      	ldr	r0, [r7, #24]
 800189a:	f000 fe3b 	bl	8002514 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, minor), 		UINT8_TYPE, 	"VerM", &entry->minor);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3302      	adds	r3, #2
 80018a2:	1d39      	adds	r1, r7, #4
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <entityBoardInit+0x32c>)
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	2201      	movs	r2, #1
 80018b2:	69b8      	ldr	r0, [r7, #24]
 80018b4:	f000 fe2e 	bl	8002514 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, patch), 		UINT16_TYPE, 	"VerL", &entry->patch);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3304      	adds	r3, #4
 80018bc:	1d39      	adds	r1, r7, #4
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <entityBoardInit+0x330>)
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2304      	movs	r3, #4
 80018ca:	2201      	movs	r2, #1
 80018cc:	69b8      	ldr	r0, [r7, #24]
 80018ce:	f000 fe21 	bl	8002514 <initField>

    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _1), UINT8_TYPE,                "F1", &entry->_1);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3306      	adds	r3, #6
 80018d6:	1d39      	adds	r1, r7, #4
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	4b71      	ldr	r3, [pc, #452]	; (8001aa0 <entityBoardInit+0x334>)
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2301      	movs	r3, #1
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2306      	movs	r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	69b8      	ldr	r0, [r7, #24]
 80018e8:	f000 fe14 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _2), UINT8_TYPE,                "F2", &entry->_2);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3307      	adds	r3, #7
 80018f0:	1d39      	adds	r1, r7, #4
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	4b6b      	ldr	r3, [pc, #428]	; (8001aa4 <entityBoardInit+0x338>)
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2307      	movs	r3, #7
 80018fe:	2200      	movs	r2, #0
 8001900:	69b8      	ldr	r0, [r7, #24]
 8001902:	f000 fe07 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _3), UINT16_TYPE,               "F3", &entry->_3);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3308      	adds	r3, #8
 800190a:	1d39      	adds	r1, r7, #4
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <entityBoardInit+0x33c>)
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2302      	movs	r3, #2
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2308      	movs	r3, #8
 8001918:	2200      	movs	r2, #0
 800191a:	69b8      	ldr	r0, [r7, #24]
 800191c:	f000 fdfa 	bl	8002514 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _4), UINT24_TYPE,               "F4", &entry->_4);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _5), UINT32_TYPE,               "F5", &entry->_5);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3310      	adds	r3, #16
 8001924:	1d39      	adds	r1, r7, #4
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	4b60      	ldr	r3, [pc, #384]	; (8001aac <entityBoardInit+0x340>)
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2303      	movs	r3, #3
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2310      	movs	r3, #16
 8001932:	2200      	movs	r2, #0
 8001934:	69b8      	ldr	r0, [r7, #24]
 8001936:	f000 fded 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _6), UINT64_TYPE,               "F6", &entry->_6);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3318      	adds	r3, #24
 800193e:	1d39      	adds	r1, r7, #4
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <entityBoardInit+0x344>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2304      	movs	r3, #4
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2318      	movs	r3, #24
 800194c:	2200      	movs	r2, #0
 800194e:	69b8      	ldr	r0, [r7, #24]
 8001950:	f000 fde0 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _7), CHAR_TYPE,                 "F7", &entry->_7);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3320      	adds	r3, #32
 8001958:	1d39      	adds	r1, r7, #4
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <entityBoardInit+0x348>)
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2305      	movs	r3, #5
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2320      	movs	r3, #32
 8001966:	2200      	movs	r2, #0
 8001968:	69b8      	ldr	r0, [r7, #24]
 800196a:	f000 fdd3 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _8), INT8_TYPE,                 "F8", &entry->_8);
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3321      	adds	r3, #33	; 0x21
 8001972:	1d39      	adds	r1, r7, #4
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <entityBoardInit+0x34c>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2306      	movs	r3, #6
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2321      	movs	r3, #33	; 0x21
 8001980:	2200      	movs	r2, #0
 8001982:	69b8      	ldr	r0, [r7, #24]
 8001984:	f000 fdc6 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _9), INT16_TYPE,                "F9", &entry->_9);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3322      	adds	r3, #34	; 0x22
 800198c:	1d39      	adds	r1, r7, #4
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <entityBoardInit+0x350>)
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2307      	movs	r3, #7
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2322      	movs	r3, #34	; 0x22
 800199a:	2200      	movs	r2, #0
 800199c:	69b8      	ldr	r0, [r7, #24]
 800199e:	f000 fdb9 	bl	8002514 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _10), INT24_TYPE,               "F10", &entry->_10);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _11), INT32_TYPE,               "F11", &entry->_11);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3328      	adds	r3, #40	; 0x28
 80019a6:	1d39      	adds	r1, r7, #4
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <entityBoardInit+0x354>)
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2308      	movs	r3, #8
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2328      	movs	r3, #40	; 0x28
 80019b4:	2200      	movs	r2, #0
 80019b6:	69b8      	ldr	r0, [r7, #24]
 80019b8:	f000 fdac 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _12), INT64_TYPE,               "F12", &entry->_12);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3330      	adds	r3, #48	; 0x30
 80019c0:	1d39      	adds	r1, r7, #4
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <entityBoardInit+0x358>)
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2309      	movs	r3, #9
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2330      	movs	r3, #48	; 0x30
 80019ce:	2200      	movs	r2, #0
 80019d0:	69b8      	ldr	r0, [r7, #24]
 80019d2:	f000 fd9f 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _13), FLOAT_TYPE,               "F13", &entry->_13);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	1d39      	adds	r1, r7, #4
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <entityBoardInit+0x35c>)
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	230a      	movs	r3, #10
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2338      	movs	r3, #56	; 0x38
 80019e8:	2200      	movs	r2, #0
 80019ea:	69b8      	ldr	r0, [r7, #24]
 80019ec:	f000 fd92 	bl	8002514 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _14), DOUBLE_TYPE,              "F14", &entry->_14);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3340      	adds	r3, #64	; 0x40
 80019f4:	1d39      	adds	r1, r7, #4
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	4b34      	ldr	r3, [pc, #208]	; (8001acc <entityBoardInit+0x360>)
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	230b      	movs	r3, #11
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	2200      	movs	r2, #0
 8001a04:	69b8      	ldr	r0, [r7, #24]
 8001a06:	f000 fd85 	bl	8002514 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _15), LONG_DOUBLE_TYPE,         "F15", &entry->_15);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _16), BOOL_TYPE,                "F16", &entry->_16);
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3350      	adds	r3, #80	; 0x50
 8001a0e:	1d39      	adds	r1, r7, #4
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <entityBoardInit+0x364>)
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	230d      	movs	r3, #13
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2350      	movs	r3, #80	; 0x50
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	69b8      	ldr	r0, [r7, #24]
 8001a20:	f000 fd78 	bl	8002514 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _17), REG_TYPE,                 "F17", &entry->_17);
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _18), SREG_TYPE,                "F18", &entry->_18);

    initFieldArray(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, data), UINT8_TYPE, sizeof(entry->data), NULL, entry->data, 1);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	335c      	adds	r3, #92	; 0x5c
 8001a28:	1d39      	adds	r1, r7, #4
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	9204      	str	r2, [sp, #16]
 8001a2e:	9303      	str	r3, [sp, #12]
 8001a30:	2300      	movs	r3, #0
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	230a      	movs	r3, #10
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	235c      	movs	r3, #92	; 0x5c
 8001a3e:	2200      	movs	r2, #0
 8001a40:	69b8      	ldr	r0, [r7, #24]
 8001a42:	f000 fe37 	bl	80026b4 <initFieldArray>
    initFieldPointer(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, ptr), UINT8_TYPE,                "REG", &entry->ptr);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3368      	adds	r3, #104	; 0x68
 8001a4a:	1d39      	adds	r1, r7, #4
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <entityBoardInit+0x368>)
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2301      	movs	r3, #1
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2368      	movs	r3, #104	; 0x68
 8001a58:	2200      	movs	r2, #0
 8001a5a:	69b8      	ldr	r0, [r7, #24]
 8001a5c:	f000 fe10 	bl	8002680 <initFieldPointer>
    entry->ptr = (reg)&entry->data[1];
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	335d      	adds	r3, #93	; 0x5d
 8001a64:	461a      	mov	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	669a      	str	r2, [r3, #104]	; 0x68

	entry->boardId 	= INIT_BOARD_ID;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
	entry->major 	= BOARD_MAJOR;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2201      	movs	r2, #1
 8001a74:	705a      	strb	r2, [r3, #1]
	entry->minor 	= BOARD_MINOR;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	709a      	strb	r2, [r3, #2]
	entry->patch	= BOARD_PATCHLEVEL;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	809a      	strh	r2, [r3, #4]
	board_entry 	= entry;
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <entityBoardInit+0x36c>)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	0800ce18 	.word	0x0800ce18
 8001a94:	0800ce20 	.word	0x0800ce20
 8001a98:	0800ce28 	.word	0x0800ce28
 8001a9c:	0800ce30 	.word	0x0800ce30
 8001aa0:	0800ce38 	.word	0x0800ce38
 8001aa4:	0800ce3c 	.word	0x0800ce3c
 8001aa8:	0800ce40 	.word	0x0800ce40
 8001aac:	0800ce44 	.word	0x0800ce44
 8001ab0:	0800ce48 	.word	0x0800ce48
 8001ab4:	0800ce4c 	.word	0x0800ce4c
 8001ab8:	0800ce50 	.word	0x0800ce50
 8001abc:	0800ce54 	.word	0x0800ce54
 8001ac0:	0800ce58 	.word	0x0800ce58
 8001ac4:	0800ce5c 	.word	0x0800ce5c
 8001ac8:	0800ce60 	.word	0x0800ce60
 8001acc:	0800ce64 	.word	0x0800ce64
 8001ad0:	0800ce68 	.word	0x0800ce68
 8001ad4:	0800ce6c 	.word	0x0800ce6c
 8001ad8:	2000028c 	.word	0x2000028c

08001adc <HAL_UART_RxCpltCallback>:



// uart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_UART_RxCpltCallback+0x54>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d11c      	bne.n	8001b28 <HAL_UART_RxCpltCallback+0x4c>

		RawParser_dma_receiveByte(&comm.rawparser, comm.receiveByte);
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_UART_RxCpltCallback+0x58>)
 8001af0:	f893 3a34 	ldrb.w	r3, [r3, #2612]	; 0xa34
 8001af4:	75fb      	strb	r3, [r7, #23]

// receive functions-----------------------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_receiveByte(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == NULL), M_EMPTY, return, "RawParser_dma_receiveByte: No valid input");
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_UART_RxCpltCallback+0x5c>)
 8001af8:	613b      	str	r3, [r7, #16]
    reg m_receivePos            = self->m_receivePos;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_UART_RxCpltCallback+0x58>)
 8001afc:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001b00:	60fb      	str	r3, [r7, #12]

    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	7dfa      	ldrb	r2, [r7, #23]
 8001b0e:	701a      	strb	r2, [r3, #0]
    ++m_receivePos;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]

    self->m_receivePos = m_receivePos;
 8001b16:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_UART_RxCpltCallback+0x58>)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
		HAL_UART_Receive_IT(huart, (uint8_t*) &comm.receiveByte, 1);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4906      	ldr	r1, [pc, #24]	; (8001b3c <HAL_UART_RxCpltCallback+0x60>)
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f005 fb79 	bl	800721a <HAL_UART_Receive_IT>
	}
}
 8001b28:	bf00      	nop
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40011000 	.word	0x40011000
 8001b34:	200002a0 	.word	0x200002a0
 8001b38:	200002a8 	.word	0x200002a8
 8001b3c:	20000cd4 	.word	0x20000cd4

08001b40 <CallbackManager_init>:
    CallbackManager_init(m_manager);
    return m_manager;
}

void CallbackManager_init(CallbackManager_t * const self)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af04      	add	r7, sp, #16
 8001b46:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_init: no valid input data", ENA, LIB);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d112      	bne.n	8001b74 <CallbackManager_init+0x34>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <CallbackManager_init+0x60>)
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	2301      	movs	r3, #1
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <CallbackManager_init+0x64>)
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2314      	movs	r3, #20
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <CallbackManager_init+0x68>)
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <CallbackManager_init+0x6c>)
 8001b6e:	f003 fa31 	bl	8004fd4 <__M_Error>
 8001b72:	e011      	b.n	8001b98 <CallbackManager_init+0x58>
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e007      	b.n	8001b8a <CallbackManager_init+0x4a>
        self->workers[i] = (CallbackWorker)NULL;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2bff      	cmp	r3, #255	; 0xff
 8001b8e:	d9f4      	bls.n	8001b7a <CallbackManager_init+0x3a>
        self->ctx[i] = NULL;
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
    }

#ifndef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx = NULL;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	0800ced0 	.word	0x0800ced0
 8001ba4:	0800cf3c 	.word	0x0800cf3c
 8001ba8:	0800ce70 	.word	0x0800ce70
 8001bac:	0800cf18 	.word	0x0800cf18

08001bb0 <CallbackManager_addWorker>:

    return 0;
}

void CallbackManager_addWorker(CallbackManager_t * const self, const CallBManIdType id, const CallbackWorker worker, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af04      	add	r7, sp, #16
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d112      	bne.n	8001bec <CallbackManager_addWorker+0x3c>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <CallbackManager_addWorker+0x54>)
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <CallbackManager_addWorker+0x58>)
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	232d      	movs	r3, #45	; 0x2d
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <CallbackManager_addWorker+0x5c>)
 8001be4:	480a      	ldr	r0, [pc, #40]	; (8001c10 <CallbackManager_addWorker+0x60>)
 8001be6:	f003 f9f5 	bl	8004fd4 <__M_Error>
 8001bea:	e008      	b.n	8001bfe <CallbackManager_addWorker+0x4e>

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    self->workers[id] = worker;
 8001bec:	7afa      	ldrb	r2, [r7, #11]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx[id] = PREPROCESSOR_CTX_TYPE_CAST(ctx);
#else
    self->ctx = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	0800ced0 	.word	0x0800ced0
 8001c08:	0800cfc0 	.word	0x0800cfc0
 8001c0c:	0800ce70 	.word	0x0800ce70
 8001c10:	0800cf18 	.word	0x0800cf18

08001c14 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
int CallbackManager_proceed(const CallbackManager_t* const self, const CallBManIdType id,
                            u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b08b      	sub	sp, #44	; 0x2c
 8001c18:	af04      	add	r7, sp, #16
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input data", ENA, LIB);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d113      	bne.n	8001c52 <CallbackManager_proceed+0x3e>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <CallbackManager_proceed+0x84>)
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <CallbackManager_proceed+0x88>)
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2341      	movs	r3, #65	; 0x41
 8001c46:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <CallbackManager_proceed+0x8c>)
 8001c48:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <CallbackManager_proceed+0x90>)
 8001c4a:	f003 f9c3 	bl	8004fd4 <__M_Error>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e01e      	b.n	8001c90 <CallbackManager_proceed+0x7c>
#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    // move to cash
    const CallbackWorker worker = self->workers[id];
 8001c52:	7afa      	ldrb	r2, [r7, #11]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5a:	617b      	str	r3, [r7, #20]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx[id];
#else
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c62:	613b      	str	r3, [r7, #16]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    // do logic
    M_Assert_SafeFunctionCall((worker != (CallbackWorker)NULL), {
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <CallbackManager_proceed+0x6a>
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	697c      	ldr	r4, [r7, #20]
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	47a0      	blx	r4
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e008      	b.n	8001c90 <CallbackManager_proceed+0x7c>
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <CallbackManager_proceed+0x94>)
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2351      	movs	r3, #81	; 0x51
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <CallbackManager_proceed+0x8c>)
 8001c86:	2100      	movs	r1, #0
 8001c88:	4808      	ldr	r0, [pc, #32]	; (8001cac <CallbackManager_proceed+0x98>)
 8001c8a:	f003 f9c1 	bl	8005010 <__M_Warning>
                                  worker(inputData, outputData, size, maxOutBufferSize, ctx);
                                  return 1;
                              });
    return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	0800ced0 	.word	0x0800ced0
 8001c9c:	0800cff4 	.word	0x0800cff4
 8001ca0:	0800ce70 	.word	0x0800ce70
 8001ca4:	0800cf18 	.word	0x0800cf18
 8001ca8:	0800d048 	.word	0x0800d048
 8001cac:	0800d024 	.word	0x0800d024

08001cb0 <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 8001cc0:	79fa      	ldrb	r2, [r7, #7]
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	4053      	eors	r3, r2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <fast_crc8_maxim_byte+0x2c>)
 8001ccc:	5c9b      	ldrb	r3, [r3, r2]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	0800f0fc 	.word	0x0800f0fc

08001ce0 <entityCMD>:
#ifdef C_ENTITY_FRAMEWORK_LIB_ENA
#include "entity_packet.h"
#include "smart_assert.h"

void entityCMD(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b0b7      	sub	sp, #220	; 0xdc
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
    M_Assert_Break((inputData == NULL) || (outputData == NULL) || (size == NULL), M_EMPTY, return, "entityCMD: invalid input");
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <entityCMD+0x20>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <entityCMD+0x20>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d114      	bne.n	8001d2a <entityCMD+0x4a>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <entityCMD+0x32>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <entityCMD+0x32>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <entityCMD+0x36>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <entityCMD+0x38>
 8001d16:	2300      	movs	r3, #0
 8001d18:	b2d9      	uxtb	r1, r3
 8001d1a:	4bb5      	ldr	r3, [pc, #724]	; (8001ff0 <entityCMD+0x310>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	230a      	movs	r3, #10
 8001d20:	4ab4      	ldr	r2, [pc, #720]	; (8001ff4 <entityCMD+0x314>)
 8001d22:	48b5      	ldr	r0, [pc, #724]	; (8001ff8 <entityCMD+0x318>)
 8001d24:	f003 f956 	bl	8004fd4 <__M_Error>
 8001d28:	e1ee      	b.n	8002108 <entityCMD+0x428>

    const reg sizeInternal = (*size);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    M_Assert_Break((sizeInternal == 0) || (maxOutBufferSize == 0), M_EMPTY, return, "entityCMD: invalid input size");
 8001d32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <entityCMD+0x60>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d112      	bne.n	8001d66 <entityCMD+0x86>
 8001d40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <entityCMD+0x6e>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <entityCMD+0x72>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <entityCMD+0x74>
 8001d52:	2300      	movs	r3, #0
 8001d54:	b2d9      	uxtb	r1, r3
 8001d56:	4ba9      	ldr	r3, [pc, #676]	; (8001ffc <entityCMD+0x31c>)
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	230d      	movs	r3, #13
 8001d5c:	4aa5      	ldr	r2, [pc, #660]	; (8001ff4 <entityCMD+0x314>)
 8001d5e:	48a8      	ldr	r0, [pc, #672]	; (8002000 <entityCMD+0x320>)
 8001d60:	f003 f938 	bl	8004fd4 <__M_Error>
 8001d64:	e1d0      	b.n	8002108 <entityCMD+0x428>

    reg Wpos = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Rpos = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40
    reg entitySize = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
    const u8 cmd = inputData[0];
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


    // write header------------------------------------------
    outputData[0] =   cmd;                     // CMD_ID
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8001d82:	701a      	strb	r2, [r3, #0]

    // do logic------------------------------------------
    switch(cmd) {
 8001d84:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001d88:	2b0a      	cmp	r3, #10
 8001d8a:	f200 81b7 	bhi.w	80020fc <entityCMD+0x41c>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <entityCMD+0xb4>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001ddd 	.word	0x08001ddd
 8001d98:	08001e71 	.word	0x08001e71
 8001d9c:	08001f59 	.word	0x08001f59
 8001da0:	0800202d 	.word	0x0800202d
 8001da4:	08002005 	.word	0x08002005
 8001da8:	080020b5 	.word	0x080020b5
 8001dac:	080020dd 	.word	0x080020dd
 8001db0:	080020dd 	.word	0x080020dd
 8001db4:	080020fd 	.word	0x080020fd
 8001db8:	080020fd 	.word	0x080020fd
 8001dbc:	08001dc1 	.word	0x08001dc1

    /* **********************************************************************************************************************************
     *  READ MAIN TYPE DIMENSIONS
     */
    case ENTITY_READ_DIMENSIONS: {
        readEntitiesSizes((outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dc6:	18d0      	adds	r0, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dce:	1ad2      	subs	r2, r2, r3
 8001dd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f000 fd65 	bl	80028a4 <readEntitiesSizes>
        break;}
 8001dda:	e18f      	b.n	80020fc <entityCMD+0x41c>
     */
    case READ_ENTITY_DESCRIPTIONS: {
        //ENTITY_DBG_ASSERT_BUF( (Rpos + (ENTITIES_SIZEOF << 1)) > sizeInternal, M_EMPTY, return, "entityCMD: read size more than buffer");

        // read entity start
        TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber = readEntityNumberFromBuf(&inputData[Rpos]);
 8001ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001df4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
/************************************************************************************
 *  Macro for user copy
 */
STATIC_FORCEINLINE void MY_CTYPE_USER_DATA_MEMCPY(reg n, void* from, void* to)
{
    switch (n) {
 8001dfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <entityCMD+0x132>
//-------------------- NOT WORK --------------------------------------------------------
//    case sizeof(u64): *(u64*)to = *(u64*)from; break;
//    case sizeof(u32): *(u32*)to = *(u32*)from; break;
//    case sizeof(u16): *(u16*)to = *(u16*)from; break;
//-------------------- NOT WORK --------------------------------------------------------
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e008      	b.n	8001e24 <entityCMD+0x144>
    default: memcpy(to, from, n); break;
 8001e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e16:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001e1a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001e1e:	f006 fc83 	bl	8008728 <memcpy>
 8001e22:	bf00      	nop
    }
}
 8001e24:	bf00      	nop
#if (MAX_NUBER_OF_ENTITIES < 256U)
	entityNumber = *(inputData);
#else

    ENTITY_BYTE_CPY(ENTITIES_SIZEOF, inputData, &entityNumber);
    entityNumber &= 0x0000FFFFUL;
 8001e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	63bb      	str	r3, [r7, #56]	; 0x38
#endif /* (MAX_NUBER_OF_ENTITIES < 256U) */
    //----------------- END --------------------------------------------------------------------------------

    return entityNumber;
 8001e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        Rpos += ENTITIES_SIZEOF;
 8001e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e34:	3302      	adds	r3, #2
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40

        // read number of entity
        //        TYPEOF_STRUCT(EntityInfo, entities_count) len; //(WARNING!!!) do not supported on old version!!!!!!!
        //        readEntityNumberFromBuf(&len, &inputData[Rpos]);
        //        Rpos += ENTITIES_SIZEOF;
        const TYPEOF_STRUCT(EntityInfo, entities_count) len = inputData[Rpos++]; // support on old version (this is glitch!!!)
 8001e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	643a      	str	r2, [r7, #64]	; 0x40
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        // read descriptions function
        readEntitiesDescriptions(startEntityNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e4e:	18d1      	adds	r1, r2, r3
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	460a      	mov	r2, r1
 8001e62:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001e66:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001e6a:	f000 fdb9 	bl	80029e0 <readEntitiesDescriptions>
        break;}
 8001e6e:	e145      	b.n	80020fc <entityCMD+0x41c>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
}

// read entity & field number from input buffer by next position
STATIC_FORCEINLINE void readEntityFieldNumbersfromBuf(TYPEOF_STRUCT(EntityInfo, entities_count)* const entityNumber, TYPEOF_STRUCT(Entity, fields_count)* const fieldNumber, u8* const inputData, reg* const Rpos)
{
    reg Rpos_internal = (*Rpos);
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read entity number
     */
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001e7c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e84:	4413      	add	r3, r2
 8001e86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 8001ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <entityCMD+0x1d6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e008      	b.n	8001ec8 <entityCMD+0x1e8>
    default: memcpy(to, from, n); break;
 8001eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001ebe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001ec2:	f006 fc31 	bl	8008728 <memcpy>
 8001ec6:	bf00      	nop
}
 8001ec8:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    return entityNumber;
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
    Rpos_internal += ENTITIES_SIZEOF;
 8001ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read field number
     */
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001ede:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fieldNumber = *(inputData);
 8001eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    return fieldNumber;
 8001ef6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001efa:	867b      	strh	r3, [r7, #50]	; 0x32
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f00:	3301      	adds	r3, #1
 8001f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    //----------------- END -----------------------------------------------
    (*Rpos) = Rpos_internal;
 8001f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f0a:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001f0c:	bf00      	nop
        TYPEOF_STRUCT(Entity, fields_count)         startFieldNumber;
        TYPEOF_STRUCT(Entity, fields_count)         len;
        readEntityFieldNumbersfromBuf(&entityNumber, &startFieldNumber, inputData, &Rpos);

        //read number of fields
        len = readFieldNumberFromBuf(&inputData[Rpos]);
 8001f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	fieldNumber = *(inputData);
 8001f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    return fieldNumber;
 8001f22:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001f26:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        Rpos += ENTITY_FIELD_SIZEOF;
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	643b      	str	r3, [r7, #64]	; 0x40

        readEntityFields(entityNumber, startFieldNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001f30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f32:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f3a:	18d4      	adds	r4, r2, r3
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4623      	mov	r3, r4
 8001f52:	f000 fdfd 	bl	8002b50 <readEntityFields>
        break;}
 8001f56:	e0d1      	b.n	80020fc <entityCMD+0x41c>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    reg Rpos_internal = (*Rpos);
 8001f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f60:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f68:	4413      	add	r3, r2
 8001f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	677b      	str	r3, [r7, #116]	; 0x74
 8001f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f72:	673b      	str	r3, [r7, #112]	; 0x70
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	66fb      	str	r3, [r7, #108]	; 0x6c
    switch (n) {
 8001f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d104      	bne.n	8001f8a <entityCMD+0x2aa>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8001f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e005      	b.n	8001f96 <entityCMD+0x2b6>
    default: memcpy(to, from, n); break;
 8001f8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f8c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001f8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f90:	f006 fbca 	bl	8008728 <memcpy>
 8001f94:	bf00      	nop
}
 8001f96:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	623b      	str	r3, [r7, #32]
    return entityNumber;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    Rpos_internal += ENTITIES_SIZEOF;
 8001fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001fa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fae:	4413      	add	r3, r2
 8001fb0:	66bb      	str	r3, [r7, #104]	; 0x68
	fieldNumber = *(inputData);
 8001fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    return fieldNumber;
 8001fba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001fbe:	84fb      	strh	r3, [r7, #38]	; 0x26
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*Rpos) = Rpos_internal;
 8001fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001fca:	bf00      	nop

        TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
        TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        readFieldValue(entityNumber, fieldNumber, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fce:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fd6:	18d4      	adds	r4, r2, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	4622      	mov	r2, r4
 8001fea:	f000 fec5 	bl	8002d78 <readFieldValue>
        break;}
 8001fee:	e085      	b.n	80020fc <entityCMD+0x41c>
 8001ff0:	0800d0cc 	.word	0x0800d0cc
 8001ff4:	0800d05c 	.word	0x0800d05c
 8001ff8:	0800d08c 	.word	0x0800d08c
 8001ffc:	0800d118 	.word	0x0800d118
 8002000:	0800d0e8 	.word	0x0800d0e8

    case READ_SEVERAL_VALUES: {
        entitySize = (sizeInternal - 1U);
 8002004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002008:	3b01      	subs	r3, #1
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
        readSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 800200c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	18d0      	adds	r0, r2, r3
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002018:	18d1      	adds	r1, r2, r3
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002026:	f000 ffdb 	bl	8002fe0 <readSeveralFieldsValues>
        break;}
 800202a:	e067      	b.n	80020fc <entityCMD+0x41c>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	663b      	str	r3, [r7, #96]	; 0x60
    reg Rpos_internal = (*Rpos);
 8002030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002032:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002038:	4413      	add	r3, r2
 800203a:	65bb      	str	r3, [r7, #88]	; 0x58
 800203c:	2302      	movs	r3, #2
 800203e:	657b      	str	r3, [r7, #84]	; 0x54
 8002040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002042:	653b      	str	r3, [r7, #80]	; 0x50
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (n) {
 800204a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204c:	2b01      	cmp	r3, #1
 800204e:	d104      	bne.n	800205a <entityCMD+0x37a>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <entityCMD+0x386>
    default: memcpy(to, from, n); break;
 800205a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800205c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800205e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002060:	f006 fb62 	bl	8008728 <memcpy>
 8002064:	bf00      	nop
}
 8002066:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	b29b      	uxth	r3, r3
 800206c:	617b      	str	r3, [r7, #20]
    return entityNumber;
 800206e:	697b      	ldr	r3, [r7, #20]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002070:	61fb      	str	r3, [r7, #28]
    Rpos_internal += ENTITIES_SIZEOF;
 8002072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002074:	3302      	adds	r3, #2
 8002076:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8002078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800207a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207c:	4413      	add	r3, r2
 800207e:	64bb      	str	r3, [r7, #72]	; 0x48
	fieldNumber = *(inputData);
 8002080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    return fieldNumber;
 8002088:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800208c:	837b      	strh	r3, [r7, #26]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800208e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002090:	3301      	adds	r3, #1
 8002092:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*Rpos) = Rpos_internal;
 8002094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
}
 8002098:	bf00      	nop

        TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
        TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        setFieldValue(entityNumber, fieldNumber, (inputData + Rpos), (sizeInternal - Rpos));
 800209a:	69f8      	ldr	r0, [r7, #28]
 800209c:	8b79      	ldrh	r1, [r7, #26]
 800209e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	18d4      	adds	r4, r2, r3
 80020a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	4622      	mov	r2, r4
 80020ae:	f001 f993 	bl	80033d8 <setFieldValue>
        break;}
 80020b2:	e023      	b.n	80020fc <entityCMD+0x41c>

    case WRITE_SEVERAL_VALUES: {
        entitySize = (sizeInternal - 1U);
 80020b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020b8:	3b01      	subs	r3, #1
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        setSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	18d0      	adds	r0, r2, r3
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020c8:	18d1      	adds	r1, r2, r3
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80020d6:	f001 fa87 	bl	80035e8 <setSeveralFieldsValues>
        break;}
 80020da:	e00f      	b.n	80020fc <entityCMD+0x41c>
    /* **********************************************************************************************************************************
     *  WRITE/READ Values
     */
    case READ_SEVERAL_VALUES_GLUED :
    case WRITE_SEVERAL_VALUES_GLUED: {
        proceedGluedValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 80020dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	18d0      	adds	r0, r2, r3
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020e8:	18d1      	adds	r1, r2, r3
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80020f6:	f001 fc77 	bl	80039e8 <proceedGluedValues>
        break;}
 80020fa:	bf00      	nop
    case ENTITY_FLASH_OPERATION: {
        break;}

    }

    (*size) = (Wpos + entitySize);
 80020fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002102:	441a      	add	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	601a      	str	r2, [r3, #0]
    UNUSED(ctx);
}
 8002108:	37d4      	adds	r7, #212	; 0xd4
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop

08002110 <deleteEntitityFieldsInternal>:
 * **********************************************************************************************************************************
 */

/// delete some entity for internal using
static void deleteEntitityFieldsInternal(const reg entityNumber)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af02      	add	r7, sp, #8
 8002116:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((entityNumber > entityInfo.entities_count), M_EMPTY, return, "deleteEntitityFieldsInternal: No entity for delete!!!");
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d910      	bls.n	8002144 <deleteEntitityFieldsInternal+0x34>
 8002122:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	bf8c      	ite	hi
 800212c:	2301      	movhi	r3, #1
 800212e:	2300      	movls	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <deleteEntitityFieldsInternal+0xe4>)
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	231b      	movs	r3, #27
 800213a:	4a2f      	ldr	r2, [pc, #188]	; (80021f8 <deleteEntitityFieldsInternal+0xe8>)
 800213c:	482f      	ldr	r0, [pc, #188]	; (80021fc <deleteEntitityFieldsInternal+0xec>)
 800213e:	f002 ff49 	bl	8004fd4 <__M_Error>
 8002142:	e051      	b.n	80021e8 <deleteEntitityFieldsInternal+0xd8>
    M_Assert_BreakSaveCheck((entityInfo.entities[entityNumber] == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]))), M_EMPTY, return, "initEntity: entity number: %d is null", entityNumber);
 8002144:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d115      	bne.n	8002180 <deleteEntitityFieldsInternal+0x70>
 8002154:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	4619      	mov	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <deleteEntitityFieldsInternal+0xf0>)
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	231c      	movs	r3, #28
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <deleteEntitityFieldsInternal+0xe8>)
 8002178:	4822      	ldr	r0, [pc, #136]	; (8002204 <deleteEntitityFieldsInternal+0xf4>)
 800217a:	f002 ff2b 	bl	8004fd4 <__M_Error>
 800217e:	e033      	b.n	80021e8 <deleteEntitityFieldsInternal+0xd8>
    if(entityInfo.entities[entityNumber]->isHeap) {
        free(entityInfo.entities[entityNumber]->pointer);
        entityInfo.entities[entityNumber]->pointer = NULL;
    }
#else
    free(entityInfo.entities[entityNumber]->pointer);
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f006 fac2 	bl	8008718 <free>
    entityInfo.entities[entityNumber]->pointer = NULL;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
#endif /* USE_ENTITY_USER_SPACE */

    free(entityInfo.entities[entityNumber]->fields);
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f006 fab0 	bl	8008718 <free>
    entityInfo.entities[entityNumber]->fields = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]->fields));
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]

    free(entityInfo.entities[entityNumber]);
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f006 fa9f 	bl	8008718 <free>
    entityInfo.entities[entityNumber] = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]));
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <deleteEntitityFieldsInternal+0xe0>)
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
}
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000290 	.word	0x20000290
 80021f4:	0800d198 	.word	0x0800d198
 80021f8:	0800d138 	.word	0x0800d138
 80021fc:	0800d16c 	.word	0x0800d16c
 8002200:	0800d234 	.word	0x0800d234
 8002204:	0800d1d0 	.word	0x0800d1d0

08002208 <deleteEntities>:
}


/// delete all entities and deallocation all memory
void deleteEntities(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <deleteEntities+0x40>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	603b      	str	r3, [r7, #0]

    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	e005      	b.n	8002226 <deleteEntities+0x1e>
        deleteEntitityFieldsInternal(i);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ff78 	bl	8002110 <deleteEntitityFieldsInternal>
    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3301      	adds	r3, #1
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3f5      	bcc.n	800221a <deleteEntities+0x12>
    }

    free(entityInfo.entities);
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <deleteEntities+0x40>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f006 fa70 	bl	8008718 <free>
    pointerInit(sizeof(entityInfo), (u8*)&entityInfo);
 8002238:	4903      	ldr	r1, [pc, #12]	; (8002248 <deleteEntities+0x40>)
 800223a:	200c      	movs	r0, #12
 800223c:	f002 f982 	bl	8004544 <pointerInit>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000290 	.word	0x20000290

0800224c <newEntities>:



/// allocation new entities pointers
int newEntities(const reg numberOfEntities)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af04      	add	r7, sp, #16
 8002252:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((numberOfEntities > MAX_NUBER_OF_ENTITIES), M_EMPTY, return ENTITY_ERROR, "newEntities: No valid input number of entities, value: %d, max: %d", numberOfEntities, MAX_NUBER_OF_ENTITIES);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800225a:	d915      	bls.n	8002288 <newEntities+0x3c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002262:	bf8c      	ite	hi
 8002264:	2301      	movhi	r3, #1
 8002266:	2300      	movls	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002270:	9302      	str	r3, [sp, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <newEntities+0x8c>)
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2359      	movs	r3, #89	; 0x59
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <newEntities+0x90>)
 800227e:	4818      	ldr	r0, [pc, #96]	; (80022e0 <newEntities+0x94>)
 8002280:	f002 fea8 	bl	8004fd4 <__M_Error>
 8002284:	2300      	movs	r3, #0
 8002286:	e022      	b.n	80022ce <newEntities+0x82>

    deleteEntities(); // delete all entities
 8002288:	f7ff ffbe 	bl	8002208 <deleteEntities>

    entityInfo.entities = (Entity**) calloc(numberOfEntities, sizeof(Entity*)); // allocation & initialization all entity pointers
 800228c:	2104      	movs	r1, #4
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f005 ff7a 	bl	8008188 <calloc>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <newEntities+0x98>)
 800229a:	609a      	str	r2, [r3, #8]
    M_Assert_BreakSaveCheck((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities))), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entity pointers");
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <newEntities+0x98>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d110      	bne.n	80022c6 <newEntities+0x7a>
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <newEntities+0x98>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4619      	mov	r1, r3
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <newEntities+0x9c>)
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	235e      	movs	r3, #94	; 0x5e
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <newEntities+0x90>)
 80022bc:	480b      	ldr	r0, [pc, #44]	; (80022ec <newEntities+0xa0>)
 80022be:	f002 fe89 	bl	8004fd4 <__M_Error>
 80022c2:	2300      	movs	r3, #0
 80022c4:	e003      	b.n	80022ce <newEntities+0x82>

    entityInfo.allocated_entity_pointers = numberOfEntities;
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <newEntities+0x98>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6013      	str	r3, [r2, #0]
    return ENTITY_OK;
 80022cc:	2301      	movs	r3, #1
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	0800d2b4 	.word	0x0800d2b4
 80022dc:	0800d138 	.word	0x0800d138
 80022e0:	0800d288 	.word	0x0800d288
 80022e4:	20000290 	.word	0x20000290
 80022e8:	0800d340 	.word	0x0800d340
 80022ec:	0800d2f8 	.word	0x0800d2f8

080022f0 <initEntity>:


/// allocation entitites pointer & fields
int initEntity(reg* const entityNumber, const reg NumberOfFields, const reg pointerSize, const char descr[ENTITY_DESCRIPTION_SIZE], const b isCustomSpace, const b isHeap, void* arg)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b093      	sub	sp, #76	; 0x4c
 80022f4:	af04      	add	r7, sp, #16
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((NumberOfFields > MAX_NUBER_OF_FIELDS), M_EMPTY, return ENTITY_ERROR, "initEntity: No valid input number of fields, value: %d, max: %d", NumberOfFields, MAX_NUBER_OF_FIELDS);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2bff      	cmp	r3, #255	; 0xff
 8002302:	d913      	bls.n	800232c <initEntity+0x3c>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2bff      	cmp	r3, #255	; 0xff
 8002308:	bf8c      	ite	hi
 800230a:	2301      	movhi	r3, #1
 800230c:	2300      	movls	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	4619      	mov	r1, r3
 8002312:	23ff      	movs	r3, #255	; 0xff
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	4b71      	ldr	r3, [pc, #452]	; (80024e0 <initEntity+0x1f0>)
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2368      	movs	r3, #104	; 0x68
 8002320:	4a70      	ldr	r2, [pc, #448]	; (80024e4 <initEntity+0x1f4>)
 8002322:	4871      	ldr	r0, [pc, #452]	; (80024e8 <initEntity+0x1f8>)
 8002324:	f002 fe56 	bl	8004fd4 <__M_Error>
 8002328:	2300      	movs	r3, #0
 800232a:	e0d4      	b.n	80024d6 <initEntity+0x1e6>

    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <initEntity+0x1fc>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
    const TYPEOF_STRUCT(EntityInfo, allocated_entity_pointers) allocated_entity_pointers = entityInfo.allocated_entity_pointers;
 8002332:	4b6e      	ldr	r3, [pc, #440]	; (80024ec <initEntity+0x1fc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c

    M_Assert_BreakSaveCheck((entities_count >= allocated_entity_pointers), M_EMPTY, return ENTITY_ERROR, "initEntity: There is no free entity for initialization!!!, use /newEntities/ function before");
 8002338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	429a      	cmp	r2, r3
 800233e:	d310      	bcc.n	8002362 <initEntity+0x72>
 8002340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	429a      	cmp	r2, r3
 8002346:	bf2c      	ite	cs
 8002348:	2301      	movcs	r3, #1
 800234a:	2300      	movcc	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <initEntity+0x200>)
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	236d      	movs	r3, #109	; 0x6d
 8002356:	4a63      	ldr	r2, [pc, #396]	; (80024e4 <initEntity+0x1f4>)
 8002358:	4866      	ldr	r0, [pc, #408]	; (80024f4 <initEntity+0x204>)
 800235a:	f002 fe3b 	bl	8004fd4 <__M_Error>
 800235e:	2300      	movs	r3, #0
 8002360:	e0b9      	b.n	80024d6 <initEntity+0x1e6>

    char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	f107 0318 	add.w	r3, r7, #24
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	721a      	strb	r2, [r3, #8]

    // allocation pointer to Entity--------------------------------------------------------------------------------------------------------------------------------------------------------------
    Entity* const new_entity = entityInfo.entities[entities_count] = (Entity*) calloc(1, sizeof(Entity));
 8002372:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <initEntity+0x1fc>)
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	18d4      	adds	r4, r2, r3
 800237c:	2110      	movs	r1, #16
 800237e:	2001      	movs	r0, #1
 8002380:	f005 ff02 	bl	8008188 <calloc>
 8002384:	4603      	mov	r3, r0
 8002386:	6023      	str	r3, [r4, #0]
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
    M_Assert_BreakSaveCheck(new_entity == NULLPTR(Entity*), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entitity");
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <initEntity+0xc2>
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <initEntity+0x208>)
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2373      	movs	r3, #115	; 0x73
 80023a6:	4a4f      	ldr	r2, [pc, #316]	; (80024e4 <initEntity+0x1f4>)
 80023a8:	4854      	ldr	r0, [pc, #336]	; (80024fc <initEntity+0x20c>)
 80023aa:	f002 fe13 	bl	8004fd4 <__M_Error>
 80023ae:	2300      	movs	r3, #0
 80023b0:	e091      	b.n	80024d6 <initEntity+0x1e6>

    // copy entity description-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if(descr) {
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <initEntity+0xd4>
        memcpy(new_entity->descr, descr, ENTITY_DESCRIPTION_SIZE);
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	3304      	adds	r3, #4
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e00a      	b.n	80023da <initEntity+0xea>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)descr, (u8 *)new_entity->descr);
    } else {
        sprintf(str, "E%d", entities_count);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ca:	494d      	ldr	r1, [pc, #308]	; (8002500 <initEntity+0x210>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f007 fb0d 	bl	80099ec <siprintf>
        memcpy(new_entity->descr, str, ENTITY_DESCRIPTION_SIZE);
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	3304      	adds	r3, #4
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	601a      	str	r2, [r3, #0]
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, (isCustomSpace ? "newEntities: Invalid user input space" : "newEntities: No memory for allocation Entitity"));

#else

    new_entity->pointer = calloc(1, pointerSize);
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	2001      	movs	r0, #1
 80023de:	f005 fed3 	bl	8008188 <calloc>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	601a      	str	r2, [r3, #0]
    UNUSED(isCustomSpace);
    UNUSED(isHeap);
    UNUSED(arg);

    M_Assert_BreakSaveCheck((new_entity->pointer == NULL), {
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d113      	bne.n	800241a <initEntity+0x12a>
 80023f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023f4:	f7ff fe8c 	bl	8002110 <deleteEntitityFieldsInternal>
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4619      	mov	r1, r3
 8002408:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <initEntity+0x208>)
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2396      	movs	r3, #150	; 0x96
 800240e:	4a35      	ldr	r2, [pc, #212]	; (80024e4 <initEntity+0x1f4>)
 8002410:	483c      	ldr	r0, [pc, #240]	; (8002504 <initEntity+0x214>)
 8002412:	f002 fddf 	bl	8004fd4 <__M_Error>
 8002416:	2300      	movs	r3, #0
 8002418:	e05d      	b.n	80024d6 <initEntity+0x1e6>

#endif /* USE_ENTITY_USER_SPACE */


    // allocation pointer to Fields------------------------------------------------------------------------------------------------------------------------------------------------------------
    new_entity->fields = (EntityField*) calloc(NumberOfFields, sizeof(EntityField));
 800241a:	2120      	movs	r1, #32
 800241c:	68b8      	ldr	r0, [r7, #8]
 800241e:	f005 feb3 	bl	8008188 <calloc>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	60da      	str	r2, [r3, #12]
    M_Assert_BreakSaveCheck((new_entity->fields == NULLPTR(TYPEOF_STRUCT(Entity, fields))), {
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d113      	bne.n	800245a <initEntity+0x16a>
 8002432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002434:	f7ff fe6c 	bl	8002110 <deleteEntitityFieldsInternal>
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <initEntity+0x218>)
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	239f      	movs	r3, #159	; 0x9f
 800244e:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <initEntity+0x1f4>)
 8002450:	482e      	ldr	r0, [pc, #184]	; (800250c <initEntity+0x21c>)
 8002452:	f002 fdbf 	bl	8004fd4 <__M_Error>
 8002456:	2300      	movs	r3, #0
 8002458:	e03d      	b.n	80024d6 <initEntity+0x1e6>
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, "newEntities: No memory for allocation EntityField");

    new_entity->fields_count = NumberOfFields;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	b29a      	uxth	r2, r3
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	811a      	strh	r2, [r3, #8]

    // initialization Fields-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    for(reg i = 0; i < NumberOfFields; ++i) {
 8002462:	2300      	movs	r3, #0
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
 8002466:	e028      	b.n	80024ba <initEntity+0x1ca>
        EntityField* const    field = &new_entity->fields[i];
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246e:	015b      	lsls	r3, r3, #5
 8002470:	4413      	add	r3, r2
 8002472:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef USE_ENTITY_CALLBACKS

#   ifdef USE_ENTITY_READ_CALLBACK
        field->rdCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
        field->rdCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
#   endif /* USE_ENTITY_READ_CALLBACK */

#   ifdef USE_ENTITY_WRITE_CALLBACK
        field->wrCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
        field->wrCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
#   endif /* USE_ENTITY_WRITE_CALLBACK */

#endif /* USE_ENTITY_CALLBACKS */

        field->bitFlags  = 0;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
        field->shift     = 0;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
        field->type      = VOID_TYPE;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	2200      	movs	r2, #0
 800249c:	761a      	strb	r2, [r3, #24]

        sprintf(str, "F%d", i);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a4:	491a      	ldr	r1, [pc, #104]	; (8002510 <initEntity+0x220>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f007 faa0 	bl	80099ec <siprintf>
        memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3319      	adds	r3, #25
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	601a      	str	r2, [r3, #0]
    for(reg i = 0; i < NumberOfFields; ++i) {
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b6:	3301      	adds	r3, #1
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3d2      	bcc.n	8002468 <initEntity+0x178>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);
    }

    (*entityNumber) = entities_count;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c6:	601a      	str	r2, [r3, #0]
    ++entities_count;
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	3301      	adds	r3, #1
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
    entityInfo.entities_count = entities_count;
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <initEntity+0x1fc>)
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	6053      	str	r3, [r2, #4]
    return ENTITY_OK;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	373c      	adds	r7, #60	; 0x3c
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop
 80024e0:	0800d3a0 	.word	0x0800d3a0
 80024e4:	0800d138 	.word	0x0800d138
 80024e8:	0800d378 	.word	0x0800d378
 80024ec:	20000290 	.word	0x20000290
 80024f0:	0800d410 	.word	0x0800d410
 80024f4:	0800d3e0 	.word	0x0800d3e0
 80024f8:	0800d490 	.word	0x0800d490
 80024fc:	0800d470 	.word	0x0800d470
 8002500:	0800d4c0 	.word	0x0800d4c0
 8002504:	0800d4c4 	.word	0x0800d4c4
 8002508:	0800d524 	.word	0x0800d524
 800250c:	0800d4e4 	.word	0x0800d4e4
 8002510:	0800d558 	.word	0x0800d558

08002514 <initField>:
 * **********************************************************************************************************************************
 */

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08e      	sub	sp, #56	; 0x38
 8002518:	af04      	add	r7, sp, #16
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL), M_EMPTY, return ENTITY_ERROR, "initField: No valid input");
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <initField+0x1a>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d112      	bne.n	8002554 <initField+0x40>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <initField+0x26>
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <initField+0x2a>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <initField+0x2c>
 800253e:	2300      	movs	r3, #0
 8002540:	b2d9      	uxtb	r1, r3
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <initField+0x14c>)
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	23cf      	movs	r3, #207	; 0xcf
 8002548:	4a46      	ldr	r2, [pc, #280]	; (8002664 <initField+0x150>)
 800254a:	4847      	ldr	r0, [pc, #284]	; (8002668 <initField+0x154>)
 800254c:	f002 fd42 	bl	8004fd4 <__M_Error>
 8002550:	2300      	movs	r3, #0
 8002552:	e081      	b.n	8002658 <initField+0x144>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && !(type == REG_TYPE || type == SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initField: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d021      	beq.n	80025a2 <initField+0x8e>
 800255e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002562:	2b10      	cmp	r3, #16
 8002564:	d01d      	beq.n	80025a2 <initField+0x8e>
 8002566:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800256a:	2b11      	cmp	r3, #17
 800256c:	d019      	beq.n	80025a2 <initField+0x8e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <initField+0x78>
 8002578:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800257c:	2b10      	cmp	r3, #16
 800257e:	d005      	beq.n	800258c <initField+0x78>
 8002580:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002584:	2b11      	cmp	r3, #17
 8002586:	d001      	beq.n	800258c <initField+0x78>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <initField+0x7a>
 800258c:	2300      	movs	r3, #0
 800258e:	b2d9      	uxtb	r1, r3
 8002590:	4b36      	ldr	r3, [pc, #216]	; (800266c <initField+0x158>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	23d2      	movs	r3, #210	; 0xd2
 8002596:	4a33      	ldr	r2, [pc, #204]	; (8002664 <initField+0x150>)
 8002598:	4835      	ldr	r0, [pc, #212]	; (8002670 <initField+0x15c>)
 800259a:	f002 fd1b 	bl	8004fd4 <__M_Error>
 800259e:	2300      	movs	r3, #0
 80025a0:	e05a      	b.n	8002658 <initField+0x144>
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	623b      	str	r3, [r7, #32]
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	891b      	ldrh	r3, [r3, #8]
 80025ac:	83fb      	strh	r3, [r7, #30]

    M_Assert_BreakElseSaveCheck((fields_count > fieldNumber_readed), {
 80025ae:	8bfb      	ldrh	r3, [r7, #30]
 80025b0:	6a3a      	ldr	r2, [r7, #32]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d23c      	bcs.n	8002630 <initField+0x11c>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	015b      	lsls	r3, r3, #5
 80025be:	4413      	add	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	611a      	str	r2, [r3, #16]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	615a      	str	r2, [r3, #20]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025d4:	761a      	strb	r2, [r3, #24]
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <initField+0xd2>
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	3319      	adds	r3, #25
 80025e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d019      	beq.n	8002620 <initField+0x10c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <initField+0xe8>
 80025f6:	2304      	movs	r3, #4
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	e00c      	b.n	8002616 <initField+0x102>
 80025fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002600:	617b      	str	r3, [r7, #20]
}


STATIC_FORCEINLINE reg getMYCTypeLen(reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b11      	cmp	r3, #17
 8002606:	d804      	bhi.n	8002612 <initField+0xfe>
        return typeLengthMappingArray[type];
 8002608:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <initField+0x160>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	e000      	b.n	8002614 <initField+0x100>
    }
    return 0;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	2100      	movs	r1, #0
 800261a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800261c:	f006 f8ac 	bl	8008778 <memset>
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	3301      	adds	r3, #1
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	e013      	b.n	8002658 <initField+0x144>
 8002630:	8bfb      	ldrh	r3, [r7, #30]
 8002632:	6a3a      	ldr	r2, [r7, #32]
 8002634:	429a      	cmp	r2, r3
 8002636:	bf34      	ite	cc
 8002638:	2301      	movcc	r3, #1
 800263a:	2300      	movcs	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4619      	mov	r1, r3
 8002640:	8bfb      	ldrh	r3, [r7, #30]
 8002642:	9302      	str	r3, [sp, #8]
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <initField+0x164>)
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	23d8      	movs	r3, #216	; 0xd8
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <initField+0x150>)
 8002650:	480a      	ldr	r0, [pc, #40]	; (800267c <initField+0x168>)
 8002652:	f002 fcbf 	bl	8004fd4 <__M_Error>
                                    ++fieldNumber_readed;
                                    (*fieldNumber) = fieldNumber_readed;
                                    return ENTITY_OK;
                                }, M_EMPTY, M_EMPTY, "initField: fieldNumber: &d,  is too long than allocated fields_count: %d", fieldNumber_readed, fields_count);

    return ENTITY_ERROR;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3728      	adds	r7, #40	; 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	0800d598 	.word	0x0800d598
 8002664:	0800d138 	.word	0x0800d138
 8002668:	0800d55c 	.word	0x0800d55c
 800266c:	0800d604 	.word	0x0800d604
 8002670:	0800d5b4 	.word	0x0800d5b4
 8002674:	0800f1fc 	.word	0x0800f1fc
 8002678:	0800d6a4 	.word	0x0800d6a4
 800267c:	0800d65c 	.word	0x0800d65c

08002680 <initFieldPointer>:

int initFieldPointer(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], reg* const field_ptr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af04      	add	r7, sp, #16
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
	return initField(entityInst, fieldNumber, bitFlags | ENTITY_POINTER_MSK, shift, type, descr, field_ptr);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f043 0208 	orr.w	r2, r3, #8
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	7e3b      	ldrb	r3, [r7, #24]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff ff35 	bl	8002514 <initField>
 80026aa:	4603      	mov	r3, r0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <initFieldArray>:


/// init field-array
int initFieldArray(Entity* const entityInst, reg* const fieldNumber, TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const int arrayLen, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr, const int startNum)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b094      	sub	sp, #80	; 0x50
 80026b8:	af04      	add	r7, sp, #16
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL) || (arrayLen == 0), M_EMPTY, return ENTITY_ERROR, "initFieldArray: No valid input");
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <initFieldArray+0x20>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <initFieldArray+0x20>
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d116      	bne.n	8002702 <initFieldArray+0x4e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <initFieldArray+0x32>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <initFieldArray+0x32>
 80026e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <initFieldArray+0x36>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <initFieldArray+0x38>
 80026ea:	2300      	movs	r3, #0
 80026ec:	b2d9      	uxtb	r1, r3
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <initFieldArray+0x1c8>)
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80026f6:	4a62      	ldr	r2, [pc, #392]	; (8002880 <initFieldArray+0x1cc>)
 80026f8:	4862      	ldr	r0, [pc, #392]	; (8002884 <initFieldArray+0x1d0>)
 80026fa:	f002 fc6b 	bl	8004fd4 <__M_Error>
 80026fe:	2300      	movs	r3, #0
 8002700:	e0b7      	b.n	8002872 <initFieldArray+0x1be>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && (type != REG_TYPE || type != SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initFieldArray: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d022      	beq.n	8002752 <initFieldArray+0x9e>
 800270c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002710:	2b10      	cmp	r3, #16
 8002712:	d103      	bne.n	800271c <initFieldArray+0x68>
 8002714:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002718:	2b11      	cmp	r3, #17
 800271a:	d01a      	beq.n	8002752 <initFieldArray+0x9e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <initFieldArray+0x86>
 8002726:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800272a:	2b10      	cmp	r3, #16
 800272c:	d103      	bne.n	8002736 <initFieldArray+0x82>
 800272e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002732:	2b11      	cmp	r3, #17
 8002734:	d001      	beq.n	800273a <initFieldArray+0x86>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <initFieldArray+0x88>
 800273a:	2300      	movs	r3, #0
 800273c:	b2d9      	uxtb	r1, r3
 800273e:	4b52      	ldr	r3, [pc, #328]	; (8002888 <initFieldArray+0x1d4>)
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	f240 1307 	movw	r3, #263	; 0x107
 8002746:	4a4e      	ldr	r2, [pc, #312]	; (8002880 <initFieldArray+0x1cc>)
 8002748:	4850      	ldr	r0, [pc, #320]	; (800288c <initFieldArray+0x1d8>)
 800274a:	f002 fc43 	bl	8004fd4 <__M_Error>
 800274e:	2300      	movs	r3, #0
 8002750:	e08f      	b.n	8002872 <initFieldArray+0x1be>
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	891b      	ldrh	r3, [r3, #8]
 800275c:	867b      	strh	r3, [r7, #50]	; 0x32

	reg typeLen;
#ifdef USE_ENTITY_POINTER
	if(bitFlags & ENTITY_POINTER_MSK) {
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <initFieldArray+0xba>
		typeLen = sizeof(reg);
 8002768:	2304      	movs	r3, #4
 800276a:	63bb      	str	r3, [r7, #56]	; 0x38
 800276c:	e00c      	b.n	8002788 <initFieldArray+0xd4>
	} else {
#endif /* USE_ENTITY_REGISTER */
		typeLen = getMYCTypeLen(type);
 800276e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    if(type < TYPE_ARRAY_LENGTH) {
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	2b11      	cmp	r3, #17
 8002778:	d804      	bhi.n	8002784 <initFieldArray+0xd0>
        return typeLengthMappingArray[type];
 800277a:	4a45      	ldr	r2, [pc, #276]	; (8002890 <initFieldArray+0x1dc>)
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	e000      	b.n	8002786 <initFieldArray+0xd2>
    return 0;
 8002784:	2300      	movs	r3, #0
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef USE_ENTITY_POINTER
	}
#endif /* USE_ENTITY_REGISTER */

    const reg need_count = (fieldNumber_readed + arrayLen);
 8002788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800278c:	4413      	add	r3, r2
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    M_Assert_BreakSaveCheck(fields_count < need_count, M_EMPTY, return ENTITY_ERROR, "initFieldArray: need fields Number: &d,  is too long than allocated fields_count: %d", need_count, fields_count);
 8002790:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002794:	429a      	cmp	r2, r3
 8002796:	d915      	bls.n	80027c4 <initFieldArray+0x110>
 8002798:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800279a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279c:	429a      	cmp	r2, r3
 800279e:	bf8c      	ite	hi
 80027a0:	2301      	movhi	r3, #1
 80027a2:	2300      	movls	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <initFieldArray+0x1e0>)
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	f240 1319 	movw	r3, #281	; 0x119
 80027b8:	4a31      	ldr	r2, [pc, #196]	; (8002880 <initFieldArray+0x1cc>)
 80027ba:	4837      	ldr	r0, [pc, #220]	; (8002898 <initFieldArray+0x1e4>)
 80027bc:	f002 fc0a 	bl	8004fd4 <__M_Error>
 80027c0:	2300      	movs	r3, #0
 80027c2:	e056      	b.n	8002872 <initFieldArray+0x1be>

	char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	721a      	strb	r2, [r3, #8]
	bitFlags |= ENTITY_ARRAY_MSK;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027da:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < arrayLen; ++i) {
 80027dc:	2300      	movs	r3, #0
 80027de:	637b      	str	r3, [r7, #52]	; 0x34
 80027e0:	e033      	b.n	800284a <initFieldArray+0x196>
		EntityField* const    field = &entityInst->fields[fieldNumber_readed];
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e8:	015b      	lsls	r3, r3, #5
 80027ea:	4413      	add	r3, r2
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28

		field->bitFlags   = bitFlags;
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	611a      	str	r2, [r3, #16]
		field->shift      = shift;
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	615a      	str	r2, [r3, #20]
		field->type       = type;
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8002800:	761a      	strb	r2, [r3, #24]

		if(descr) {
 8002802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002804:	2b00      	cmp	r3, #0
 8002806:	d009      	beq.n	800281c <initFieldArray+0x168>
			sprintf(str, "%s%d", descr, (i + startNum));
 8002808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800280a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800280c:	4413      	add	r3, r2
 800280e:	f107 0014 	add.w	r0, r7, #20
 8002812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002814:	4921      	ldr	r1, [pc, #132]	; (800289c <initFieldArray+0x1e8>)
 8002816:	f007 f8e9 	bl	80099ec <siprintf>
 800281a:	e008      	b.n	800282e <initFieldArray+0x17a>
		} else {
			sprintf(str, ":[%d]", (i + startNum));
 800281c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002820:	441a      	add	r2, r3
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	491e      	ldr	r1, [pc, #120]	; (80028a0 <initFieldArray+0x1ec>)
 8002828:	4618      	mov	r0, r3
 800282a:	f007 f8df 	bl	80099ec <siprintf>
		}
		memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	3319      	adds	r3, #25
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	601a      	str	r2, [r3, #0]
		//MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);

		shift += typeLen;
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	4413      	add	r3, r2
 800283c:	603b      	str	r3, [r7, #0]
		++fieldNumber_readed;
 800283e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002840:	3301      	adds	r3, #1
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = 0; i < arrayLen; ++i) {
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	3301      	adds	r3, #1
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284e:	429a      	cmp	r2, r3
 8002850:	dbc7      	blt.n	80027e2 <initFieldArray+0x12e>
	}

	if(field_ptr) {
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <initFieldArray+0x1b6>
		memset(field_ptr, 0, (arrayLen * typeLen));
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	461a      	mov	r2, r3
 8002862:	2100      	movs	r1, #0
 8002864:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002866:	f005 ff87 	bl	8008778 <memset>
	}

	(*fieldNumber) = fieldNumber_readed;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800286e:	601a      	str	r2, [r3, #0]
	return ENTITY_OK;
 8002870:	2301      	movs	r3, #1
}
 8002872:	4618      	mov	r0, r3
 8002874:	3740      	adds	r7, #64	; 0x40
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	0800d73c 	.word	0x0800d73c
 8002880:	0800d138 	.word	0x0800d138
 8002884:	0800d6f0 	.word	0x0800d6f0
 8002888:	0800d7a8 	.word	0x0800d7a8
 800288c:	0800d75c 	.word	0x0800d75c
 8002890:	0800f1fc 	.word	0x0800f1fc
 8002894:	0800d820 	.word	0x0800d820
 8002898:	0800d804 	.word	0x0800d804
 800289c:	0800d878 	.word	0x0800d878
 80028a0:	0800d880 	.word	0x0800d880

080028a4 <readEntitiesSizes>:
}

#endif /* USE_ENTITY_PING */

int readEntitiesSizes(u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: No allocated entities or invalid input");
 80028b0:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <readEntitiesSizes+0x120>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <readEntitiesSizes+0x20>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <readEntitiesSizes+0x20>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d116      	bne.n	80028f2 <readEntitiesSizes+0x4e>
 80028c4:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <readEntitiesSizes+0x120>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <readEntitiesSizes+0x34>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <readEntitiesSizes+0x34>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <readEntitiesSizes+0x38>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <readEntitiesSizes+0x3a>
 80028dc:	2300      	movs	r3, #0
 80028de:	b2d9      	uxtb	r1, r3
 80028e0:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <readEntitiesSizes+0x124>)
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	231f      	movs	r3, #31
 80028e6:	4a39      	ldr	r2, [pc, #228]	; (80029cc <readEntitiesSizes+0x128>)
 80028e8:	4839      	ldr	r0, [pc, #228]	; (80029d0 <readEntitiesSizes+0x12c>)
 80028ea:	f002 fb73 	bl	8004fd4 <__M_Error>
 80028ee:	2300      	movs	r3, #0
 80028f0:	e064      	b.n	80029bc <readEntitiesSizes+0x118>
    ENTITY_DBG_ASSERT_BUF(maxOutBufferSize < (8 + TYPE_ARRAY_LENGTH), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: sizes read more than buffer");
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b19      	cmp	r3, #25
 80028f6:	d80f      	bhi.n	8002918 <readEntitiesSizes+0x74>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b19      	cmp	r3, #25
 80028fc:	bf94      	ite	ls
 80028fe:	2301      	movls	r3, #1
 8002900:	2300      	movhi	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <readEntitiesSizes+0x130>)
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2320      	movs	r3, #32
 800290c:	4a2f      	ldr	r2, [pc, #188]	; (80029cc <readEntitiesSizes+0x128>)
 800290e:	4832      	ldr	r0, [pc, #200]	; (80029d8 <readEntitiesSizes+0x134>)
 8002910:	f002 fb60 	bl	8004fd4 <__M_Error>
 8002914:	2300      	movs	r3, #0
 8002916:	e051      	b.n	80029bc <readEntitiesSizes+0x118>

    reg pos = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

    // main sizes -----------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_OK;                              // OK byte
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	617a      	str	r2, [r7, #20]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4413      	add	r3, r2
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	617a      	str	r2, [r7, #20]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	2204      	movs	r2, #4
 8002936:	701a      	strb	r2, [r3, #0]

    // entities sizes -------------------------------------------------------------------------------------
    outputData[pos++] = ENTITIES_SIZEOF;                        // entities count sizeof
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	617a      	str	r2, [r7, #20]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	2202      	movs	r2, #2
 8002944:	701a      	strb	r2, [r3, #0]

    // fields sizes --------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_FIELD_SIZEOF;                    // fields count sizeof
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	617a      	str	r2, [r7, #20]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]

    outputData[pos++] = SIZEOF_STRUCT(EntityField, bitFlags);   // fields bitFlags sizeof
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	617a      	str	r2, [r7, #20]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	2204      	movs	r2, #4
 8002960:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = SIZEOF_STRUCT(EntityField, shift);      // fields shift sizeof
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	617a      	str	r2, [r7, #20]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	2204      	movs	r2, #4
 800296e:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = 1;                                      // fields type sizeof
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	617a      	str	r2, [r7, #20]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]

    // system types sizes --------------------------------------------------------------------------------
    outputData[pos++] = TYPE_ARRAY_LENGTH;                      // size array types
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	617a      	str	r2, [r7, #20]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	2212      	movs	r2, #18
 800298a:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	e00d      	b.n	80029ae <readEntitiesSizes+0x10a>
        outputData[pos++] = typeLengthMappingArray[i];          // copy array types
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <readEntitiesSizes+0x138>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	617a      	str	r2, [r7, #20]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	b2ca      	uxtb	r2, r1
 80029a6:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	3301      	adds	r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b11      	cmp	r3, #17
 80029b2:	d9ee      	bls.n	8002992 <readEntitiesSizes+0xee>
    }

    (*size) = pos;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000290 	.word	0x20000290
 80029c8:	0800dcc8 	.word	0x0800dcc8
 80029cc:	0800dc24 	.word	0x0800dc24
 80029d0:	0800dc58 	.word	0x0800dc58
 80029d4:	0800dd30 	.word	0x0800dd30
 80029d8:	0800dd04 	.word	0x0800dd04
 80029dc:	0800f1fc 	.word	0x0800f1fc

080029e0 <readEntitiesDescriptions>:

int readEntitiesDescriptions(const TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber, TYPEOF_STRUCT(EntityInfo, entities_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[0].descr, ... entities[entities_count].descr}
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (2 + ENTITIES_SIZEOF)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesDescriptions: No allocated entities or invalid input");
 80029ee:	4b52      	ldr	r3, [pc, #328]	; (8002b38 <readEntitiesDescriptions+0x158>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <readEntitiesDescriptions+0x28>
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d905      	bls.n	8002a08 <readEntitiesDescriptions+0x28>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <readEntitiesDescriptions+0x28>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d119      	bne.n	8002a3c <readEntitiesDescriptions+0x5c>
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <readEntitiesDescriptions+0x158>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <readEntitiesDescriptions+0x42>
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d905      	bls.n	8002a22 <readEntitiesDescriptions+0x42>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <readEntitiesDescriptions+0x42>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <readEntitiesDescriptions+0x46>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <readEntitiesDescriptions+0x48>
 8002a26:	2300      	movs	r3, #0
 8002a28:	b2d9      	uxtb	r1, r3
 8002a2a:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <readEntitiesDescriptions+0x15c>)
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2340      	movs	r3, #64	; 0x40
 8002a30:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <readEntitiesDescriptions+0x160>)
 8002a32:	4844      	ldr	r0, [pc, #272]	; (8002b44 <readEntitiesDescriptions+0x164>)
 8002a34:	f002 face 	bl	8004fd4 <__M_Error>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e079      	b.n	8002b30 <readEntitiesDescriptions+0x150>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002a3c:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <readEntitiesDescriptions+0x158>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24

    if(startEntityNumber < entities_count) {
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d26a      	bcs.n	8002b20 <readEntitiesDescriptions+0x140>
        reg pos = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

        outputData[pos++] = ENTITY_OK;
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	2204      	movs	r2, #4
 8002a68:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(EntityInfo, entities_count) tmp = (entities_count - startEntityNumber);
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	623b      	str	r3, [r7, #32]
        len = MIN(tmp, len);
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	4293      	cmp	r3, r2
 8002a78:	bf28      	it	cs
 8002a7a:	4613      	movcs	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]
        //#else
        //        len &= 0xFFFFUL;
        //        ENTITY_BYTE_CPY(ENTITIES_SIZEOF, (u8*)&len, &outputData[pos]);
        //        pos += ENTITIES_SIZEOF;
        //#endif /* MAX_NUBER_OF_ENTITIES < 256 */
        outputData[pos++] = (u8)(len & 0xFFU); // support on old version (this is glitch!!!)
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]
        //---------------------------================================----------------------------------==================================-----------------------------------================================---------------------------===========================---------------------------=========================------------------------
        len += startEntityNumber;
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60bb      	str	r3, [r7, #8]

        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9a:	e038      	b.n	8002b0e <readEntitiesDescriptions+0x12e>

            ENTITY_DBG_ASSERT_BUF( (pos + ENTITY_DESCRIPTION_SIZE) > maxOutBufferSize, M_EMPTY, {
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d210      	bcs.n	8002ac8 <readEntitiesDescriptions+0xe8>
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf34      	ite	cc
 8002ab0:	2301      	movcc	r3, #1
 8002ab2:	2300      	movcs	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <readEntitiesDescriptions+0x168>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	235a      	movs	r3, #90	; 0x5a
 8002abe:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <readEntitiesDescriptions+0x160>)
 8002ac0:	4822      	ldr	r0, [pc, #136]	; (8002b4c <readEntitiesDescriptions+0x16c>)
 8002ac2:	f002 fa87 	bl	8004fd4 <__M_Error>
 8002ac6:	e02c      	b.n	8002b22 <readEntitiesDescriptions+0x142>
                                       goto error;
                                   }, "readEntitiesDescriptions: description read size more than buffer");


            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)entityInfo.entities[i]->descr, &outputData[pos]);
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <readEntitiesDescriptions+0x158>)
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	1d1a      	adds	r2, r3, #4
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	440b      	add	r3, r1
 8002adc:	2104      	movs	r1, #4
 8002ade:	61f9      	str	r1, [r7, #28]
 8002ae0:	61ba      	str	r2, [r7, #24]
 8002ae2:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d104      	bne.n	8002af4 <readEntitiesDescriptions+0x114>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e005      	b.n	8002b00 <readEntitiesDescriptions+0x120>
    default: memcpy(to, from, n); break;
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f005 fe15 	bl	8008728 <memcpy>
 8002afe:	bf00      	nop
}
 8002b00:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	3304      	adds	r3, #4
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d3c2      	bcc.n	8002a9c <readEntitiesDescriptions+0xbc>
        }

        (*size) = pos;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1a:	601a      	str	r2, [r3, #0]
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e007      	b.n	8002b30 <readEntitiesDescriptions+0x150>
        goto error;
 8002b20:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3730      	adds	r7, #48	; 0x30
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000290 	.word	0x20000290
 8002b3c:	0800de00 	.word	0x0800de00
 8002b40:	0800dc24 	.word	0x0800dc24
 8002b44:	0800dd60 	.word	0x0800dd60
 8002b48:	0800de78 	.word	0x0800de78
 8002b4c:	0800de44 	.word	0x0800de44

08002b50 <readEntityFields>:

int readEntityFields(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) startFieldNumber, TYPEOF_STRUCT(Entity, fields_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[entityNum].fields[startFieldNum], ... entities[num].fields[entities[num].fields_count]}
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b096      	sub	sp, #88	; 0x58
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	817b      	strh	r3, [r7, #10]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	813b      	strh	r3, [r7, #8]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITY_FIELD_SIZEOF << 1))) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntityFields: No allocated entities or invalid input");
 8002b62:	4b7f      	ldr	r3, [pc, #508]	; (8002d60 <readEntityFields+0x210>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <readEntityFields+0x2c>
 8002b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d905      	bls.n	8002b7c <readEntityFields+0x2c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <readEntityFields+0x2c>
 8002b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d119      	bne.n	8002bb0 <readEntityFields+0x60>
 8002b7c:	4b78      	ldr	r3, [pc, #480]	; (8002d60 <readEntityFields+0x210>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <readEntityFields+0x46>
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d905      	bls.n	8002b96 <readEntityFields+0x46>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <readEntityFields+0x46>
 8002b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <readEntityFields+0x4a>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <readEntityFields+0x4c>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	b2d9      	uxtb	r1, r3
 8002b9e:	4b71      	ldr	r3, [pc, #452]	; (8002d64 <readEntityFields+0x214>)
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2376      	movs	r3, #118	; 0x76
 8002ba4:	4a70      	ldr	r2, [pc, #448]	; (8002d68 <readEntityFields+0x218>)
 8002ba6:	4871      	ldr	r0, [pc, #452]	; (8002d6c <readEntityFields+0x21c>)
 8002ba8:	f002 fa14 	bl	8004fd4 <__M_Error>
 8002bac:	2300      	movs	r3, #0
 8002bae:	e0d3      	b.n	8002d58 <readEntityFields+0x208>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <readEntityFields+0x210>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	647b      	str	r3, [r7, #68]	; 0x44
    const Entity* const entity = entityInfo.entities[entityNumber];
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <readEntityFields+0x210>)
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	643b      	str	r3, [r7, #64]	; 0x40
    const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc6:	891b      	ldrh	r3, [r3, #8]
 8002bc8:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	f080 80ba 	bcs.w	8002d48 <readEntityFields+0x1f8>
 8002bd4:	897a      	ldrh	r2, [r7, #10]
 8002bd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	f080 80b5 	bcs.w	8002d48 <readEntityFields+0x1f8>
        reg pos = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	64fb      	str	r3, [r7, #76]	; 0x4c

        outputData[pos++] = ENTITY_OK;
 8002be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]

#if (MAX_NUBER_OF_FIELDS < 256U)
        outputData[pos++] = (u8)(startFieldNumber & 0xFFU);                             /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	897a      	ldrh	r2, [r7, #10]
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(Entity, fields_count) tmp = (fields_count - startFieldNumber);
 8002c00:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	87bb      	strh	r3, [r7, #60]	; 0x3c
        len = MIN(tmp, len);
 8002c08:	893a      	ldrh	r2, [r7, #8]
 8002c0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	bf28      	it	cs
 8002c10:	4613      	movcs	r3, r2
 8002c12:	813b      	strh	r3, [r7, #8]
        outputData[pos++] = (u8)(len & 0xFFU);
 8002c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	893a      	ldrh	r2, [r7, #8]
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]
        ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, (u8*)&len, &outputData[pos]);
        pos += ENTITY_FIELD_SIZEOF;

#endif /* MAX_NUBER_OF_FIELDS < 256 */

        len += startFieldNumber;
 8002c24:	893a      	ldrh	r2, [r7, #8]
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	4413      	add	r3, r2
 8002c2a:	813b      	strh	r3, [r7, #8]

        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002c32:	e07d      	b.n	8002d30 <readEntityFields+0x1e0>
            const EntityField* const field = &entity->fields[i];
 8002c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c3c:	015b      	lsls	r3, r3, #5
 8002c3e:	4413      	add	r3, r2
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38

            ENTITY_DBG_ASSERT_BUF( ((pos + (sizeof(field->bitFlags) + sizeof(field->shift) + 1 + ENTITY_DESCRIPTION_SIZE)) > maxOutBufferSize), M_EMPTY, {
 8002c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c44:	330d      	adds	r3, #13
 8002c46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d210      	bcs.n	8002c6e <readEntityFields+0x11e>
 8002c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4e:	330d      	adds	r3, #13
 8002c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf34      	ite	cc
 8002c56:	2301      	movcc	r3, #1
 8002c58:	2300      	movcs	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <readEntityFields+0x220>)
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	239a      	movs	r3, #154	; 0x9a
 8002c64:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <readEntityFields+0x218>)
 8002c66:	4843      	ldr	r0, [pc, #268]	; (8002d74 <readEntityFields+0x224>)
 8002c68:	f002 f9b4 	bl	8004fd4 <__M_Error>
 8002c6c:	e06d      	b.n	8002d4a <readEntityFields+0x1fa>

            //            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
            //            pos += ENTITY_DESCRIPTION_SIZE;
            //-----------------=============================-----------------------------------===========================-----------------------------=================================-------------------------------===========================-------------------======================
            // this is glitch
            ENTITY_BYTE_CPY(1, (u8 *)&field->bitFlags, &outputData[pos]);
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	f103 0210 	add.w	r2, r3, #16
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c78:	440b      	add	r3, r1
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	61f9      	str	r1, [r7, #28]
 8002c7e:	61ba      	str	r2, [r7, #24]
 8002c80:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d104      	bne.n	8002c92 <readEntityFields+0x142>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e005      	b.n	8002c9e <readEntityFields+0x14e>
    default: memcpy(to, from, n); break;
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	69b9      	ldr	r1, [r7, #24]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f005 fd46 	bl	8008728 <memcpy>
 8002c9c:	bf00      	nop
}
 8002c9e:	bf00      	nop
            pos += 1;
 8002ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	64fb      	str	r3, [r7, #76]	; 0x4c

            ENTITY_BYTE_CPY(2, (u8 *)&field->shift, &outputData[pos]);
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	f103 0214 	add.w	r2, r3, #20
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	440b      	add	r3, r1
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8002cb8:	623b      	str	r3, [r7, #32]
    switch (n) {
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d104      	bne.n	8002cca <readEntityFields+0x17a>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e005      	b.n	8002cd6 <readEntityFields+0x186>
    default: memcpy(to, from, n); break;
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cce:	6a38      	ldr	r0, [r7, #32]
 8002cd0:	f005 fd2a 	bl	8008728 <memcpy>
 8002cd4:	bf00      	nop
}
 8002cd6:	bf00      	nop
            pos += 2;
 8002cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cda:	3302      	adds	r3, #2
 8002cdc:	64fb      	str	r3, [r7, #76]	; 0x4c

            outputData[pos++] = (field->type & 0xFFU);
 8002cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cea:	7e12      	ldrb	r2, [r2, #24]
 8002cec:	701a      	strb	r2, [r3, #0]

            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	f103 0219 	add.w	r2, r3, #25
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf8:	440b      	add	r3, r1
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	6379      	str	r1, [r7, #52]	; 0x34
 8002cfe:	633a      	str	r2, [r7, #48]	; 0x30
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d104      	bne.n	8002d12 <readEntityFields+0x1c2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e005      	b.n	8002d1e <readEntityFields+0x1ce>
    default: memcpy(to, from, n); break;
 8002d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d18:	f005 fd06 	bl	8008728 <memcpy>
 8002d1c:	bf00      	nop
}
 8002d1e:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d22:	3304      	adds	r3, #4
 8002d24:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002d26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002d30:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002d34:	893b      	ldrh	r3, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	f4ff af7c 	bcc.w	8002c34 <readEntityFields+0xe4>
            //------------------------------=========================================--------------------------------------===================================--------------------------------------=============================---------------------------------========================

        }

        (*size) = pos;
 8002d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d40:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002d42:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e007      	b.n	8002d58 <readEntityFields+0x208>
        goto error;
 8002d48:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3750      	adds	r7, #80	; 0x50
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000290 	.word	0x20000290
 8002d64:	0800df68 	.word	0x0800df68
 8002d68:	0800dc24 	.word	0x0800dc24
 8002d6c:	0800debc 	.word	0x0800debc
 8002d70:	0800e010 	.word	0x0800e010
 8002d74:	0800dfa4 	.word	0x0800dfa4

08002d78 <readFieldValue>:
/* ******************************************************************************************************************
 * READ one field value
 *
 */
int readFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{ //send {0x01 , prt + 0, ... , ptr + getTypeLen(entities[no].fields[fieldNo].type)}
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b0a3      	sub	sp, #140	; 0x8c
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	460b      	mov	r3, r1
 8002d86:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 2) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readFieldValue: No allocated entities or invalid input");
 8002d88:	4b8e      	ldr	r3, [pc, #568]	; (8002fc4 <readFieldValue+0x24c>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <readFieldValue+0x2c>
 8002d90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d905      	bls.n	8002da4 <readFieldValue+0x2c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <readFieldValue+0x2c>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11a      	bne.n	8002dda <readFieldValue+0x62>
 8002da4:	4b87      	ldr	r3, [pc, #540]	; (8002fc4 <readFieldValue+0x24c>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <readFieldValue+0x48>
 8002dac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d905      	bls.n	8002dc0 <readFieldValue+0x48>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <readFieldValue+0x48>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <readFieldValue+0x4c>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <readFieldValue+0x4e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	b2d9      	uxtb	r1, r3
 8002dc8:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <readFieldValue+0x250>)
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	23d0      	movs	r3, #208	; 0xd0
 8002dce:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <readFieldValue+0x254>)
 8002dd0:	487f      	ldr	r0, [pc, #508]	; (8002fd0 <readFieldValue+0x258>)
 8002dd2:	f002 f8ff 	bl	8004fd4 <__M_Error>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e0ef      	b.n	8002fba <readFieldValue+0x242>

    Entity*         const       entity  = entityInfo.entities[entityNumber];
 8002dda:	4b7a      	ldr	r3, [pc, #488]	; (8002fc4 <readFieldValue+0x24c>)
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	67fb      	str	r3, [r7, #124]	; 0x7c
    EntityField*    const       field   = &entity->fields[fieldNumber];
 8002de8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	897b      	ldrh	r3, [r7, #10]
 8002dee:	015b      	lsls	r3, r3, #5
 8002df0:	4413      	add	r3, r2
 8002df2:	67bb      	str	r3, [r7, #120]	; 0x78

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8002df4:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <readFieldValue+0x24c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	677b      	str	r3, [r7, #116]	; 0x74
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8002dfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dfc:	891b      	ldrh	r3, [r3, #8]
 8002dfe:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f080 80cf 	bcs.w	8002faa <readFieldValue+0x232>
 8002e0c:	897a      	ldrh	r2, [r7, #10]
 8002e0e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e12:	429a      	cmp	r2, r3
 8002e14:	f080 80c9 	bcs.w	8002faa <readFieldValue+0x232>
        const u8        type    = field->type;
 8002e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e1a:	7e1b      	ldrb	r3, [r3, #24]
 8002e1c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        const reg       typeLen = getMYCTypeLen(type);
 8002e20:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
    if(type < TYPE_ARRAY_LENGTH) {
 8002e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e28:	2b11      	cmp	r3, #17
 8002e2a:	d804      	bhi.n	8002e36 <readFieldValue+0xbe>
        return typeLengthMappingArray[type];
 8002e2c:	4a69      	ldr	r2, [pc, #420]	; (8002fd4 <readFieldValue+0x25c>)
 8002e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	e000      	b.n	8002e38 <readFieldValue+0xc0>
    return 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	66fb      	str	r3, [r7, #108]	; 0x6c
        void* const     ptr     = (entity->pointer + field->shift);
 8002e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	4413      	add	r3, r2
 8002e44:	66bb      	str	r3, [r7, #104]	; 0x68

        reg pos = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	667b      	str	r3, [r7, #100]	; 0x64

        outputData[pos++] = ENTITY_OK;
 8002e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	667a      	str	r2, [r7, #100]	; 0x64
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = type;    /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8002e66:	701a      	strb	r2, [r3, #0]

        ENTITY_DBG_ASSERT_BUF(((pos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8002e68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d212      	bcs.n	8002e9c <readFieldValue+0x124>
 8002e76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002e80:	429a      	cmp	r2, r3
 8002e82:	bf34      	ite	cc
 8002e84:	2301      	movcc	r3, #1
 8002e86:	2300      	movcs	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <readFieldValue+0x260>)
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	23e2      	movs	r3, #226	; 0xe2
 8002e92:	4a4e      	ldr	r2, [pc, #312]	; (8002fcc <readFieldValue+0x254>)
 8002e94:	4851      	ldr	r0, [pc, #324]	; (8002fdc <readFieldValue+0x264>)
 8002e96:	f002 f89d 	bl	8004fd4 <__M_Error>
 8002e9a:	e087      	b.n	8002fac <readFieldValue+0x234>
                                  goto error;
                              }, "readFieldValue: field read size more than buffer");

        proceedReadEntity(field->bitFlags, ptr, &outputData[pos], typeLen);
 8002e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ea4:	440b      	add	r3, r1
 8002ea6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ea8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002eaa:	657a      	str	r2, [r7, #84]	; 0x54
 8002eac:	653b      	str	r3, [r7, #80]	; 0x50
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d016      	beq.n	8002eea <readFieldValue+0x172>
 8002ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d011      	beq.n	8002eea <readFieldValue+0x172>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8002ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 8002ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
                                        if(reg_ptr_from) {
 8002ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d050      	beq.n	8002f78 <readFieldValue+0x200>
 8002ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    MY_CTYPE_REG_CPY(to, from);
 8002ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee4:	601a      	str	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002ee8:	e046      	b.n	8002f78 <readFieldValue+0x200>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8002eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <readFieldValue+0x196>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8002ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef6:	63bb      	str	r3, [r7, #56]	; 0x38
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8002ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	633b      	str	r3, [r7, #48]	; 0x30
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    MY_CTYPE_REG_CPY(to, from);
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	e035      	b.n	8002f7a <readFieldValue+0x202>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8002f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01a      	beq.n	8002f4e <readFieldValue+0x1d6>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 8002f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
                                        if(reg_ptr_from) {
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02a      	beq.n	8002f7a <readFieldValue+0x202>
 8002f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2e:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d104      	bne.n	8002f40 <readFieldValue+0x1c8>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e005      	b.n	8002f4c <readFieldValue+0x1d4>
    default: memcpy(to, from, n); break;
 8002f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f42:	6a39      	ldr	r1, [r7, #32]
 8002f44:	69f8      	ldr	r0, [r7, #28]
 8002f46:	f005 fbef 	bl	8008728 <memcpy>
 8002f4a:	bf00      	nop
}
 8002f4c:	e015      	b.n	8002f7a <readFieldValue+0x202>
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f58:	613b      	str	r3, [r7, #16]
    switch (n) {
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d104      	bne.n	8002f6a <readFieldValue+0x1f2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e005      	b.n	8002f76 <readFieldValue+0x1fe>
    default: memcpy(to, from, n); break;
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	6979      	ldr	r1, [r7, #20]
 8002f6e:	6938      	ldr	r0, [r7, #16]
 8002f70:	f005 fbda 	bl	8008728 <memcpy>
 8002f74:	bf00      	nop
}
 8002f76:	e000      	b.n	8002f7a <readFieldValue+0x202>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002f78:	bf00      	nop
}
 8002f7a:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8002f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	663b      	str	r3, [r7, #96]	; 0x60
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8002f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <readFieldValue+0x21e>
            __entityCallback(entity, field, ptr, field->rdCallback.context);
 8002f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8002f8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f90:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002f92:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002f94:	47a0      	blx	r4
        }
#endif /* USE_ENTITY_READ_CALLBACK */

        pos += typeLen;
 8002f96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9a:	4413      	add	r3, r2
 8002f9c:	667b      	str	r3, [r7, #100]	; 0x64
        (*size) = pos;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002fa2:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002fa4:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <readFieldValue+0x242>
        goto error;
 8002faa:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3784      	adds	r7, #132	; 0x84
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000290 	.word	0x20000290
 8002fc8:	0800e0d0 	.word	0x0800e0d0
 8002fcc:	0800dc24 	.word	0x0800dc24
 8002fd0:	0800e044 	.word	0x0800e044
 8002fd4:	0800f1fc 	.word	0x0800f1fc
 8002fd8:	0800e130 	.word	0x0800e130
 8002fdc:	0800e108 	.word	0x0800e108

08002fe0 <readSeveralFieldsValues>:
 * READ several fields values
 *
 */

int readSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b0b7      	sub	sp, #220	; 0xdc
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readSeveralFieldsValues: No allocated entities or invalid input");
 8002fee:	4ba9      	ldr	r3, [pc, #676]	; (8003294 <readSeveralFieldsValues+0x2b4>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <readSeveralFieldsValues+0x2e>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d908      	bls.n	800300e <readSeveralFieldsValues+0x2e>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <readSeveralFieldsValues+0x2e>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <readSeveralFieldsValues+0x2e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11d      	bne.n	800304a <readSeveralFieldsValues+0x6a>
 800300e:	4ba1      	ldr	r3, [pc, #644]	; (8003294 <readSeveralFieldsValues+0x2b4>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <readSeveralFieldsValues+0x4e>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d908      	bls.n	800302e <readSeveralFieldsValues+0x4e>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <readSeveralFieldsValues+0x4e>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <readSeveralFieldsValues+0x4e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <readSeveralFieldsValues+0x52>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <readSeveralFieldsValues+0x54>
 8003032:	2300      	movs	r3, #0
 8003034:	b2d9      	uxtb	r1, r3
 8003036:	4b98      	ldr	r3, [pc, #608]	; (8003298 <readSeveralFieldsValues+0x2b8>)
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800303e:	4a97      	ldr	r2, [pc, #604]	; (800329c <readSeveralFieldsValues+0x2bc>)
 8003040:	4897      	ldr	r0, [pc, #604]	; (80032a0 <readSeveralFieldsValues+0x2c0>)
 8003042:	f001 ffc7 	bl	8004fd4 <__M_Error>
 8003046:	2300      	movs	r3, #0
 8003048:	e1c2      	b.n	80033d0 <readSeveralFieldsValues+0x3f0>

    const reg inputMsgSize = (*size);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Wpos = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Rpos = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800305c:	4b8d      	ldr	r3, [pc, #564]	; (8003294 <readSeveralFieldsValues+0x2b4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8003064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 8003076:	e150      	b.n	800331a <readSeveralFieldsValues+0x33a>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    reg Rpos_internal = (*Rpos);
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003084:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003088:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800308c:	4413      	add	r3, r2
 800308e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003092:	2302      	movs	r3, #2
 8003094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800309c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    switch (n) {
 80030a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d106      	bne.n	80030be <readSeveralFieldsValues+0xde>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80030b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e008      	b.n	80030d0 <readSeveralFieldsValues+0xf0>
    default: memcpy(to, from, n); break;
 80030be:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80030c2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80030c6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80030ca:	f005 fb2d 	bl	8008728 <memcpy>
 80030ce:	bf00      	nop
}
 80030d0:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	617b      	str	r3, [r7, #20]
    return entityNumber;
 80030d8:	697b      	ldr	r3, [r7, #20]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80030da:	61fb      	str	r3, [r7, #28]
    Rpos_internal += ENTITIES_SIZEOF;
 80030dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030e0:	3302      	adds	r3, #2
 80030e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80030e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ee:	4413      	add	r3, r2
 80030f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	fieldNumber = *(inputData);
 80030f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    return fieldNumber;
 80030fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003102:	837b      	strh	r3, [r7, #26]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003104:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003108:	3301      	adds	r3, #1
 800310a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*Rpos) = Rpos_internal;
 800310e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003112:	623b      	str	r3, [r7, #32]
}
 8003114:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <readSeveralFieldsValues+0x2b4>)
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 8003126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	8b7b      	ldrh	r3, [r7, #26]
 800312e:	015b      	lsls	r3, r3, #5
 8003130:	4413      	add	r3, r2
 8003132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 8003136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800313a:	891b      	ldrh	r3, [r3, #8]
 800313c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003146:	429a      	cmp	r2, r3
 8003148:	f240 80f4 	bls.w	8003334 <readSeveralFieldsValues+0x354>
 800314c:	8b7b      	ldrh	r3, [r7, #26]
 800314e:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8003152:	429a      	cmp	r2, r3
 8003154:	f240 80ee 	bls.w	8003334 <readSeveralFieldsValues+0x354>

            const reg typeLen = getMYCTypeLen(field->type);
 8003158:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800315c:	7e1b      	ldrb	r3, [r3, #24]
 800315e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(type < TYPE_ARRAY_LENGTH) {
 8003162:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003166:	2b11      	cmp	r3, #17
 8003168:	d805      	bhi.n	8003176 <readSeveralFieldsValues+0x196>
        return typeLengthMappingArray[type];
 800316a:	4a4e      	ldr	r2, [pc, #312]	; (80032a4 <readSeveralFieldsValues+0x2c4>)
 800316c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003174:	e000      	b.n	8003178 <readSeveralFieldsValues+0x198>
    return 0;
 8003176:	2300      	movs	r3, #0
 8003178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, {
 800317c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003184:	4413      	add	r3, r2
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d214      	bcs.n	80031b6 <readSeveralFieldsValues+0x1d6>
 800318c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003194:	4413      	add	r3, r2
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	bf34      	ite	cc
 800319c:	2301      	movcc	r3, #1
 800319e:	2300      	movcs	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <readSeveralFieldsValues+0x2c8>)
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	f240 1321 	movw	r3, #289	; 0x121
 80031ac:	4a3b      	ldr	r2, [pc, #236]	; (800329c <readSeveralFieldsValues+0x2bc>)
 80031ae:	483f      	ldr	r0, [pc, #252]	; (80032ac <readSeveralFieldsValues+0x2cc>)
 80031b0:	f001 ff10 	bl	8004fd4 <__M_Error>
 80031b4:	e0bf      	b.n	8003336 <readSeveralFieldsValues+0x356>
                                      goto error;
                                  }, "readSeveralFieldsValues: field size more than buffer");

            ptr = (entity->pointer + field->shift);
 80031b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4413      	add	r3, r2
 80031c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 80031c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031d4:	440b      	add	r3, r1
 80031d6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80031da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031e8:	67bb      	str	r3, [r7, #120]	; 0x78
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80031ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d018      	beq.n	8003228 <readSeveralFieldsValues+0x248>
 80031f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <readSeveralFieldsValues+0x248>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8003202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	677b      	str	r3, [r7, #116]	; 0x74
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 800320a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800320c:	673b      	str	r3, [r7, #112]	; 0x70
                                        if(reg_ptr_from) {
 800320e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003210:	2b00      	cmp	r3, #0
 8003212:	d063      	beq.n	80032dc <readSeveralFieldsValues+0x2fc>
 8003214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321a:	66bb      	str	r3, [r7, #104]	; 0x68
    MY_CTYPE_REG_CPY(to, from);
 800321c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003222:	601a      	str	r2, [r3, #0]
}
 8003224:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003226:	e059      	b.n	80032dc <readSeveralFieldsValues+0x2fc>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00d      	beq.n	8003250 <readSeveralFieldsValues+0x270>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8003234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003238:	667b      	str	r3, [r7, #100]	; 0x64
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 800323a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800323c:	663b      	str	r3, [r7, #96]	; 0x60
 800323e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003244:	65bb      	str	r3, [r7, #88]	; 0x58
    MY_CTYPE_REG_CPY(to, from);
 8003246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	e046      	b.n	80032de <readSeveralFieldsValues+0x2fe>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d029      	beq.n	80032b0 <readSeveralFieldsValues+0x2d0>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 800325c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	657b      	str	r3, [r7, #84]	; 0x54
                                        if(reg_ptr_from) {
 8003264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003266:	2b00      	cmp	r3, #0
 8003268:	d039      	beq.n	80032de <readSeveralFieldsValues+0x2fe>
 800326a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326c:	653b      	str	r3, [r7, #80]	; 0x50
 800326e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003270:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
    switch (n) {
 8003276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003278:	2b01      	cmp	r3, #1
 800327a:	d104      	bne.n	8003286 <readSeveralFieldsValues+0x2a6>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800327c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e005      	b.n	8003292 <readSeveralFieldsValues+0x2b2>
    default: memcpy(to, from, n); break;
 8003286:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003288:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800328a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800328c:	f005 fa4c 	bl	8008728 <memcpy>
 8003290:	bf00      	nop
}
 8003292:	e024      	b.n	80032de <readSeveralFieldsValues+0x2fe>
 8003294:	20000290 	.word	0x20000290
 8003298:	0800e234 	.word	0x0800e234
 800329c:	0800dc24 	.word	0x0800dc24
 80032a0:	0800e164 	.word	0x0800e164
 80032a4:	0800f1fc 	.word	0x0800f1fc
 80032a8:	0800e29c 	.word	0x0800e29c
 80032ac:	0800e274 	.word	0x0800e274
 80032b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
 80032b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032b8:	643b      	str	r3, [r7, #64]	; 0x40
 80032ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    switch (n) {
 80032be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d104      	bne.n	80032ce <readSeveralFieldsValues+0x2ee>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80032c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e005      	b.n	80032da <readSeveralFieldsValues+0x2fa>
    default: memcpy(to, from, n); break;
 80032ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032d4:	f005 fa28 	bl	8008728 <memcpy>
 80032d8:	bf00      	nop
}
 80032da:	e000      	b.n	80032de <readSeveralFieldsValues+0x2fe>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80032dc:	bf00      	nop
}
 80032de:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
            const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 80032e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80032ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <readSeveralFieldsValues+0x32a>
                __entityCallback(entity, field, ptr, field->rdCallback.context);
 80032f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80032fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003300:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003304:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003308:	47a0      	blx	r4
            }
#endif /* USE_ENTITY_READ_CALLBACK */

            Wpos += typeLen;
 800330a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800330e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003312:	4413      	add	r3, r2
 8003314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003318:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	3302      	adds	r3, #2
 800331e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003322:	429a      	cmp	r2, r3
 8003324:	f63f aea8 	bhi.w	8003078 <readSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800332e:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003330:	2301      	movs	r3, #1
 8003332:	e04d      	b.n	80033d0 <readSeveralFieldsValues+0x3f0>
            goto error;
 8003334:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    outputData[Wpos++] = ENTITY_ERROR;
 800333c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4413      	add	r3, r2
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003354:	4413      	add	r3, r2
 8003356:	2202      	movs	r2, #2
 8003358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
 800335c:	f107 031c 	add.w	r3, r7, #28
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    switch (n) {
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d104      	bne.n	8003372 <readSeveralFieldsValues+0x392>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e005      	b.n	800337e <readSeveralFieldsValues+0x39e>
    default: memcpy(to, from, n); break;
 8003372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003378:	f005 f9d6 	bl	8008728 <memcpy>
 800337c:	bf00      	nop
}
 800337e:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 8003380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003384:	3302      	adds	r3, #2
 8003386:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003390:	4413      	add	r3, r2
 8003392:	2201      	movs	r2, #1
 8003394:	63ba      	str	r2, [r7, #56]	; 0x38
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
 8003398:	f107 031a 	add.w	r3, r7, #26
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (n) {
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d104      	bne.n	80033ae <readSeveralFieldsValues+0x3ce>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80033a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	e005      	b.n	80033ba <readSeveralFieldsValues+0x3da>
    default: memcpy(to, from, n); break;
 80033ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033b4:	f005 f9b8 	bl	8008728 <memcpy>
 80033b8:	bf00      	nop
}
 80033ba:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 80033bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033c0:	3301      	adds	r3, #1
 80033c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    (*size) = Wpos;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80033cc:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	37d4      	adds	r7, #212	; 0xd4
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}

080033d8 <setFieldValue>:
/* ******************************************************************************************************************
 * WRITE one field value
 *
 */
int setFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const inputData, const reg inputBufferSize)
{
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b0a3      	sub	sp, #140	; 0x8c
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	460b      	mov	r3, r1
 80033e6:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (inputData == NULL) || (inputBufferSize == 0)), M_EMPTY, return ENTITY_ERROR, "setFieldValue: No allocated entities or invalid input");
 80033e8:	4b78      	ldr	r3, [pc, #480]	; (80035cc <setFieldValue+0x1f4>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <setFieldValue+0x24>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <setFieldValue+0x24>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d117      	bne.n	800342c <setFieldValue+0x54>
 80033fc:	4b73      	ldr	r3, [pc, #460]	; (80035cc <setFieldValue+0x1f4>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <setFieldValue+0x38>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <setFieldValue+0x38>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <setFieldValue+0x3c>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <setFieldValue+0x3e>
 8003414:	2300      	movs	r3, #0
 8003416:	b2d9      	uxtb	r1, r3
 8003418:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <setFieldValue+0x1f8>)
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	f44f 73a9 	mov.w	r3, #338	; 0x152
 8003420:	4a6c      	ldr	r2, [pc, #432]	; (80035d4 <setFieldValue+0x1fc>)
 8003422:	486d      	ldr	r0, [pc, #436]	; (80035d8 <setFieldValue+0x200>)
 8003424:	f001 fdd6 	bl	8004fd4 <__M_Error>
 8003428:	2300      	movs	r3, #0
 800342a:	e0cb      	b.n	80035c4 <setFieldValue+0x1ec>

    Entity* const entity = entityInfo.entities[entityNumber];
 800342c:	4b67      	ldr	r3, [pc, #412]	; (80035cc <setFieldValue+0x1f4>)
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	67fb      	str	r3, [r7, #124]	; 0x7c
    EntityField* const field = &entity->fields[fieldNumber];
 800343a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	015b      	lsls	r3, r3, #5
 8003442:	4413      	add	r3, r2
 8003444:	67bb      	str	r3, [r7, #120]	; 0x78

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8003446:	4b61      	ldr	r3, [pc, #388]	; (80035cc <setFieldValue+0x1f4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	677b      	str	r3, [r7, #116]	; 0x74
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 800344c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800344e:	891b      	ldrh	r3, [r3, #8]
 8003450:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	66fb      	str	r3, [r7, #108]	; 0x6c

    if((entityNumber < entities_count) && (fieldNumber < fields_count) && ((bitFlags & ENTITY_READ_ONLY_MSK) == 0)) {
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345e:	429a      	cmp	r2, r3
 8003460:	f080 80af 	bcs.w	80035c2 <setFieldValue+0x1ea>
 8003464:	897a      	ldrh	r2, [r7, #10]
 8003466:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800346a:	429a      	cmp	r2, r3
 800346c:	f080 80a9 	bcs.w	80035c2 <setFieldValue+0x1ea>
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 80a3 	bne.w	80035c2 <setFieldValue+0x1ea>
        void* const ptr = (entity->pointer + field->shift);
 800347c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	4413      	add	r3, r2
 8003486:	66bb      	str	r3, [r7, #104]	; 0x68
        const reg typeLen = getMYCTypeLen(field->type);
 8003488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348a:	7e1b      	ldrb	r3, [r3, #24]
 800348c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if(type < TYPE_ARRAY_LENGTH) {
 800348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003490:	2b11      	cmp	r3, #17
 8003492:	d804      	bhi.n	800349e <setFieldValue+0xc6>
        return typeLengthMappingArray[type];
 8003494:	4a51      	ldr	r2, [pc, #324]	; (80035dc <setFieldValue+0x204>)
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349c:	e000      	b.n	80034a0 <setFieldValue+0xc8>
    return 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	667b      	str	r3, [r7, #100]	; 0x64

        ENTITY_DBG_ASSERT_BUF((typeLen > inputBufferSize), M_EMPTY, {
 80034a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d911      	bls.n	80034ce <setFieldValue+0xf6>
 80034aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	bf8c      	ite	hi
 80034b2:	2301      	movhi	r3, #1
 80034b4:	2300      	movls	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <setFieldValue+0x208>)
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	f240 135f 	movw	r3, #351	; 0x15f
 80034c2:	4a44      	ldr	r2, [pc, #272]	; (80035d4 <setFieldValue+0x1fc>)
 80034c4:	4847      	ldr	r0, [pc, #284]	; (80035e4 <setFieldValue+0x20c>)
 80034c6:	f001 fd85 	bl	8004fd4 <__M_Error>
 80034ca:	2300      	movs	r3, #0
 80034cc:	e07a      	b.n	80035c4 <setFieldValue+0x1ec>
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80034d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d4:	657b      	str	r3, [r7, #84]	; 0x54
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	653b      	str	r3, [r7, #80]	; 0x50
 80034da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80034de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d016      	beq.n	8003516 <setFieldValue+0x13e>
 80034e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d011      	beq.n	8003516 <setFieldValue+0x13e>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 80034f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 80034f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034fa:	647b      	str	r3, [r7, #68]	; 0x44
                                        if(reg_ptr_to) {
 80034fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d050      	beq.n	80035a4 <setFieldValue+0x1cc>
 8003502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003504:	643b      	str	r3, [r7, #64]	; 0x40
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
    MY_CTYPE_REG_CPY(to, from);
 800350a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	601a      	str	r2, [r3, #0]
}
 8003512:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003514:	e046      	b.n	80035a4 <setFieldValue+0x1cc>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00c      	beq.n	800353a <setFieldValue+0x162>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 8003520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 8003524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
    MY_CTYPE_REG_CPY(to, from);
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	601a      	str	r2, [r3, #0]
}
 8003538:	e035      	b.n	80035a6 <setFieldValue+0x1ce>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 800353a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01a      	beq.n	800357a <setFieldValue+0x1a2>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
                                        if(reg_ptr_to) {
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02a      	beq.n	80035a6 <setFieldValue+0x1ce>
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	61fb      	str	r3, [r7, #28]
    switch (n) {
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	2b01      	cmp	r3, #1
 8003560:	d104      	bne.n	800356c <setFieldValue+0x194>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e005      	b.n	8003578 <setFieldValue+0x1a0>
    default: memcpy(to, from, n); break;
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	6a39      	ldr	r1, [r7, #32]
 8003570:	69f8      	ldr	r0, [r7, #28]
 8003572:	f005 f8d9 	bl	8008728 <memcpy>
 8003576:	bf00      	nop
}
 8003578:	e015      	b.n	80035a6 <setFieldValue+0x1ce>
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003584:	613b      	str	r3, [r7, #16]
    switch (n) {
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d104      	bne.n	8003596 <setFieldValue+0x1be>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e005      	b.n	80035a2 <setFieldValue+0x1ca>
    default: memcpy(to, from, n); break;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	6979      	ldr	r1, [r7, #20]
 800359a:	6938      	ldr	r0, [r7, #16]
 800359c:	f005 f8c4 	bl	8008728 <memcpy>
 80035a0:	bf00      	nop
}
 80035a2:	e000      	b.n	80035a6 <setFieldValue+0x1ce>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80035a4:	bf00      	nop
}
 80035a6:	bf00      	nop

        proceedWriteEntity(bitFlags, ptr, inputData, typeLen);


#ifdef USE_ENTITY_WRITE_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 80035a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	663b      	str	r3, [r7, #96]	; 0x60
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80035ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <setFieldValue+0x1ea>
            __entityCallback(entity, field, ptr, field->wrCallback.context);
 80035b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80035ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035bc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80035be:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80035c0:	47a0      	blx	r4
#endif /* USE_ENTITY_WRITE_CALLBACK */

    }

    UNUSED(inputBufferSize);
    return ENTITY_OK;
 80035c2:	2301      	movs	r3, #1
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3784      	adds	r7, #132	; 0x84
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}
 80035cc:	20000290 	.word	0x20000290
 80035d0:	0800e34c 	.word	0x0800e34c
 80035d4:	0800dc24 	.word	0x0800dc24
 80035d8:	0800e2d4 	.word	0x0800e2d4
 80035dc:	0800f1fc 	.word	0x0800f1fc
 80035e0:	0800e3a0 	.word	0x0800e3a0
 80035e4:	0800e384 	.word	0x0800e384

080035e8 <setSeveralFieldsValues>:
/* ******************************************************************************************************************
 * WRITE several fields values
 *
 */
int setSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b0b7      	sub	sp, #220	; 0xdc
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "setSeveralFieldsValues: No allocated entities or invalid input");
 80035f6:	4bac      	ldr	r3, [pc, #688]	; (80038a8 <setSeveralFieldsValues+0x2c0>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <setSeveralFieldsValues+0x2e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d908      	bls.n	8003616 <setSeveralFieldsValues+0x2e>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <setSeveralFieldsValues+0x2e>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <setSeveralFieldsValues+0x2e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <setSeveralFieldsValues+0x6a>
 8003616:	4ba4      	ldr	r3, [pc, #656]	; (80038a8 <setSeveralFieldsValues+0x2c0>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <setSeveralFieldsValues+0x4e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d908      	bls.n	8003636 <setSeveralFieldsValues+0x4e>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <setSeveralFieldsValues+0x4e>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <setSeveralFieldsValues+0x4e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <setSeveralFieldsValues+0x52>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <setSeveralFieldsValues+0x54>
 800363a:	2300      	movs	r3, #0
 800363c:	b2d9      	uxtb	r1, r3
 800363e:	4b9b      	ldr	r3, [pc, #620]	; (80038ac <setSeveralFieldsValues+0x2c4>)
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	f240 137b 	movw	r3, #379	; 0x17b
 8003646:	4a9a      	ldr	r2, [pc, #616]	; (80038b0 <setSeveralFieldsValues+0x2c8>)
 8003648:	489a      	ldr	r0, [pc, #616]	; (80038b4 <setSeveralFieldsValues+0x2cc>)
 800364a:	f001 fcc3 	bl	8004fd4 <__M_Error>
 800364e:	2300      	movs	r3, #0
 8003650:	e1c5      	b.n	80039de <setSeveralFieldsValues+0x3f6>

    const reg inputMsgSize = (*size);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Wpos = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Rpos = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003664:	4b90      	ldr	r3, [pc, #576]	; (80038a8 <setSeveralFieldsValues+0x2c0>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 800366c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4413      	add	r3, r2
 800367a:	2201      	movs	r2, #1
 800367c:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 800367e:	e153      	b.n	8003928 <setSeveralFieldsValues+0x340>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    reg Rpos_internal = (*Rpos);
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 800368c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003690:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003694:	4413      	add	r3, r2
 8003696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800369a:	2302      	movs	r3, #2
 800369c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036a8:	f107 0310 	add.w	r3, r7, #16
 80036ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    switch (n) {
 80036b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d106      	bne.n	80036c6 <setSeveralFieldsValues+0xde>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80036b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e008      	b.n	80036d8 <setSeveralFieldsValues+0xf0>
    default: memcpy(to, from, n); break;
 80036c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80036ca:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80036ce:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80036d2:	f005 f829 	bl	8008728 <memcpy>
 80036d6:	bf00      	nop
}
 80036d8:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	613b      	str	r3, [r7, #16]
    return entityNumber;
 80036e0:	693b      	ldr	r3, [r7, #16]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80036e2:	61bb      	str	r3, [r7, #24]
    Rpos_internal += ENTITIES_SIZEOF;
 80036e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036e8:	3302      	adds	r3, #2
 80036ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80036ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80036f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036f6:	4413      	add	r3, r2
 80036f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	fieldNumber = *(inputData);
 80036fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    return fieldNumber;
 8003706:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800370a:	82fb      	strh	r3, [r7, #22]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800370c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003710:	3301      	adds	r3, #1
 8003712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    (*Rpos) = Rpos_internal;
 8003716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800371a:	61fb      	str	r3, [r7, #28]
}
 800371c:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 800371e:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <setSeveralFieldsValues+0x2c0>)
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 800372e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	8afb      	ldrh	r3, [r7, #22]
 8003736:	015b      	lsls	r3, r3, #5
 8003738:	4413      	add	r3, r2
 800373a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 800373e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003742:	891b      	ldrh	r3, [r3, #8]
 8003744:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003748:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003758:	429a      	cmp	r2, r3
 800375a:	f240 80f2 	bls.w	8003942 <setSeveralFieldsValues+0x35a>
 800375e:	8afb      	ldrh	r3, [r7, #22]
 8003760:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8003764:	429a      	cmp	r2, r3
 8003766:	f240 80ec 	bls.w	8003942 <setSeveralFieldsValues+0x35a>
            const reg typeLen = getMYCTypeLen(field->type);
 800376a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800376e:	7e1b      	ldrb	r3, [r3, #24]
 8003770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if(type < TYPE_ARRAY_LENGTH) {
 8003774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003778:	2b11      	cmp	r3, #17
 800377a:	d805      	bhi.n	8003788 <setSeveralFieldsValues+0x1a0>
        return typeLengthMappingArray[type];
 800377c:	4a4e      	ldr	r2, [pc, #312]	; (80038b8 <setSeveralFieldsValues+0x2d0>)
 800377e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003786:	e000      	b.n	800378a <setSeveralFieldsValues+0x1a2>
    return 0;
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, {
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003794:	4413      	add	r3, r2
 8003796:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800379a:	429a      	cmp	r2, r3
 800379c:	d214      	bcs.n	80037c8 <setSeveralFieldsValues+0x1e0>
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037a4:	4413      	add	r3, r2
 80037a6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf34      	ite	cc
 80037ae:	2301      	movcc	r3, #1
 80037b0:	2300      	movcs	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <setSeveralFieldsValues+0x2d4>)
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80037be:	4a3c      	ldr	r2, [pc, #240]	; (80038b0 <setSeveralFieldsValues+0x2c8>)
 80037c0:	483f      	ldr	r0, [pc, #252]	; (80038c0 <setSeveralFieldsValues+0x2d8>)
 80037c2:	f001 fc07 	bl	8004fd4 <__M_Error>
 80037c6:	e0bd      	b.n	8003944 <setSeveralFieldsValues+0x35c>
                                      goto error;
                                  }, "setSeveralFieldsValues: field read size more than buffer");


            if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 80037c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f040 80a3 	bne.w	800391c <setSeveralFieldsValues+0x334>

                ptr = (entity->pointer + field->shift);
 80037d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	4413      	add	r3, r2
 80037e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4413      	add	r3, r2
 80037ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80037fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003802:	677b      	str	r3, [r7, #116]	; 0x74
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d017      	beq.n	8003840 <setSeveralFieldsValues+0x258>
 8003810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <setSeveralFieldsValues+0x258>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 800381c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	673b      	str	r3, [r7, #112]	; 0x70
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 8003822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003824:	66fb      	str	r3, [r7, #108]	; 0x6c
                                        if(reg_ptr_to) {
 8003826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003828:	2b00      	cmp	r3, #0
 800382a:	d060      	beq.n	80038ee <setSeveralFieldsValues+0x306>
 800382c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003832:	667b      	str	r3, [r7, #100]	; 0x64
    MY_CTYPE_REG_CPY(to, from);
 8003834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800383a:	601a      	str	r2, [r3, #0]
}
 800383c:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800383e:	e056      	b.n	80038ee <setSeveralFieldsValues+0x306>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00c      	beq.n	8003866 <setSeveralFieldsValues+0x27e>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 800384c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800384e:	663b      	str	r3, [r7, #96]	; 0x60
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 8003850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003856:	65bb      	str	r3, [r7, #88]	; 0x58
 8003858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800385a:	657b      	str	r3, [r7, #84]	; 0x54
    MY_CTYPE_REG_CPY(to, from);
 800385c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	e044      	b.n	80038f0 <setSeveralFieldsValues+0x308>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d028      	beq.n	80038c4 <setSeveralFieldsValues+0x2dc>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003872:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	653b      	str	r3, [r7, #80]	; 0x50
                                        if(reg_ptr_to) {
 8003878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387a:	2b00      	cmp	r3, #0
 800387c:	d038      	beq.n	80038f0 <setSeveralFieldsValues+0x308>
 800387e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003884:	64bb      	str	r3, [r7, #72]	; 0x48
 8003886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d104      	bne.n	800389a <setSeveralFieldsValues+0x2b2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e005      	b.n	80038a6 <setSeveralFieldsValues+0x2be>
    default: memcpy(to, from, n); break;
 800389a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800389c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800389e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038a0:	f004 ff42 	bl	8008728 <memcpy>
 80038a4:	bf00      	nop
}
 80038a6:	e023      	b.n	80038f0 <setSeveralFieldsValues+0x308>
 80038a8:	20000290 	.word	0x20000290
 80038ac:	0800e3cc 	.word	0x0800e3cc
 80038b0:	0800dc24 	.word	0x0800dc24
 80038b4:	0800e164 	.word	0x0800e164
 80038b8:	0800f1fc 	.word	0x0800f1fc
 80038bc:	0800e430 	.word	0x0800e430
 80038c0:	0800e40c 	.word	0x0800e40c
 80038c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
 80038c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 80038d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d104      	bne.n	80038e0 <setSeveralFieldsValues+0x2f8>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e005      	b.n	80038ec <setSeveralFieldsValues+0x304>
    default: memcpy(to, from, n); break;
 80038e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038e6:	f004 ff1f 	bl	8008728 <memcpy>
 80038ea:	bf00      	nop
}
 80038ec:	e000      	b.n	80038f0 <setSeveralFieldsValues+0x308>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80038ee:	bf00      	nop
}
 80038f0:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 80038f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80038fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <setSeveralFieldsValues+0x334>
                    __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003904:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800390e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003912:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003916:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800391a:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_WRITE_CALLBACK */

            }

            Rpos += typeLen;
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003922:	4413      	add	r3, r2
 8003924:	61fb      	str	r3, [r7, #28]
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003926:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3303      	adds	r3, #3
 800392c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003930:	429a      	cmp	r2, r3
 8003932:	f63f aea5 	bhi.w	8003680 <setSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800393c:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 800393e:	2301      	movs	r3, #1
 8003940:	e04d      	b.n	80039de <setSeveralFieldsValues+0x3f6>
            goto error;
 8003942:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    outputData[Wpos++] = ENTITY_ERROR;
 800394a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4413      	add	r3, r2
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003962:	4413      	add	r3, r2
 8003964:	2202      	movs	r2, #2
 8003966:	62ba      	str	r2, [r7, #40]	; 0x28
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
 800396a:	f107 0318 	add.w	r3, r7, #24
 800396e:	623b      	str	r3, [r7, #32]
    switch (n) {
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	2b01      	cmp	r3, #1
 8003974:	d104      	bne.n	8003980 <setSeveralFieldsValues+0x398>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e005      	b.n	800398c <setSeveralFieldsValues+0x3a4>
    default: memcpy(to, from, n); break;
 8003980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003984:	6a38      	ldr	r0, [r7, #32]
 8003986:	f004 fecf 	bl	8008728 <memcpy>
 800398a:	bf00      	nop
}
 800398c:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 800398e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003992:	3302      	adds	r3, #2
 8003994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800399e:	4413      	add	r3, r2
 80039a0:	2201      	movs	r2, #1
 80039a2:	637a      	str	r2, [r7, #52]	; 0x34
 80039a4:	633b      	str	r3, [r7, #48]	; 0x30
 80039a6:	f107 0316 	add.w	r3, r7, #22
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 80039ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d104      	bne.n	80039bc <setSeveralFieldsValues+0x3d4>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e005      	b.n	80039c8 <setSeveralFieldsValues+0x3e0>
    default: memcpy(to, from, n); break;
 80039bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039c2:	f004 feb1 	bl	8008728 <memcpy>
 80039c6:	bf00      	nop
}
 80039c8:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 80039ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039ce:	3301      	adds	r3, #1
 80039d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    (*size) = Wpos;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039da:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	37d4      	adds	r7, #212	; 0xd4
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop

080039e8 <proceedGluedValues>:
/* ******************************************************************************************************************
 * GLUED functions fields values
 *
 */
int proceedGluedValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b0d9      	sub	sp, #356	; 0x164
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 80039f2:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 80039f6:	6020      	str	r0, [r4, #0]
 80039f8:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80039fc:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8003a00:	6001      	str	r1, [r0, #0]
 8003a02:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8003a06:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 8003a0a:	600a      	str	r2, [r1, #0]
 8003a0c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003a10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a14:	6013      	str	r3, [r2, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 3) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: No allocated entities or invalid input");
 8003a16:	4bb6      	ldr	r3, [pc, #728]	; (8003cf0 <proceedGluedValues+0x308>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01b      	beq.n	8003a56 <proceedGluedValues+0x6e>
 8003a1e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a22:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d914      	bls.n	8003a56 <proceedGluedValues+0x6e>
 8003a2c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <proceedGluedValues+0x6e>
 8003a3a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <proceedGluedValues+0x6e>
 8003a48:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a4c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d12e      	bne.n	8003ab4 <proceedGluedValues+0xcc>
 8003a56:	4ba6      	ldr	r3, [pc, #664]	; (8003cf0 <proceedGluedValues+0x308>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01b      	beq.n	8003a96 <proceedGluedValues+0xae>
 8003a5e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a62:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d914      	bls.n	8003a96 <proceedGluedValues+0xae>
 8003a6c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <proceedGluedValues+0xae>
 8003a7a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a7e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d006      	beq.n	8003a96 <proceedGluedValues+0xae>
 8003a88:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a8c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <proceedGluedValues+0xb2>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <proceedGluedValues+0xb4>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	b2d9      	uxtb	r1, r3
 8003a9e:	4b95      	ldr	r3, [pc, #596]	; (8003cf4 <proceedGluedValues+0x30c>)
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	f240 13c9 	movw	r3, #457	; 0x1c9
 8003aa6:	4a94      	ldr	r2, [pc, #592]	; (8003cf8 <proceedGluedValues+0x310>)
 8003aa8:	4894      	ldr	r0, [pc, #592]	; (8003cfc <proceedGluedValues+0x314>)
 8003aaa:	f001 fa93 	bl	8004fd4 <__M_Error>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f000 bd43 	b.w	800453a <proceedGluedValues+0xb52>

    const reg inputMsgSize = (*size);
 8003ab4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ab8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    reg Wpos = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    reg Rpos = 0;
 8003aca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ace:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003ad6:	4b86      	ldr	r3, [pc, #536]	; (8003cf0 <proceedGluedValues+0x308>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    u8 cmd = inputData[Rpos++];
 8003ade:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ae2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	1c59      	adds	r1, r3, #1
 8003aea:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003aee:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8003af2:	6011      	str	r1, [r2, #0]
 8003af4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003af8:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

    if(cmd == WRITE_SEVERAL_VALUES_GLUED) {
 8003b06:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003b0a:	2b07      	cmp	r3, #7
 8003b0c:	f040 8254 	bne.w	8003fb8 <proceedGluedValues+0x5d0>
        const u8 writeRequestCnt = inputData[Rpos++];
 8003b10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c59      	adds	r1, r3, #1
 8003b1c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003b20:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8003b24:	6011      	str	r1, [r2, #0]
 8003b26:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003b2a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003b3e:	e1f7      	b.n	8003f30 <proceedGluedValues+0x548>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize),
 8003b40:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3303      	adds	r3, #3
 8003b4c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d218      	bcs.n	8003b86 <proceedGluedValues+0x19e>
 8003b54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3303      	adds	r3, #3
 8003b60:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf34      	ite	cc
 8003b68:	2301      	movcc	r3, #1
 8003b6a:	2300      	movcs	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4b63      	ldr	r3, [pc, #396]	; (8003d00 <proceedGluedValues+0x318>)
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003b78:	4a5f      	ldr	r2, [pc, #380]	; (8003cf8 <proceedGluedValues+0x310>)
 8003b7a:	4862      	ldr	r0, [pc, #392]	; (8003d04 <proceedGluedValues+0x31c>)
 8003b7c:	f001 fa2a 	bl	8004fd4 <__M_Error>
 8003b80:	2300      	movs	r3, #0
 8003b82:	f000 bcda 	b.w	800453a <proceedGluedValues+0xb52>
 8003b86:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    reg Rpos_internal = (*Rpos);
 8003b94:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003ba2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003ba6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003baa:	4413      	add	r3, r2
 8003bac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bbe:	f107 0318 	add.w	r3, r7, #24
 8003bc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    switch (n) {
 8003bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d106      	bne.n	8003bdc <proceedGluedValues+0x1f4>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	781a      	ldrb	r2, [r3, #0]
 8003bd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e008      	b.n	8003bee <proceedGluedValues+0x206>
    default: memcpy(to, from, n); break;
 8003bdc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003be0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8003be4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8003be8:	f004 fd9e 	bl	8008728 <memcpy>
 8003bec:	bf00      	nop
}
 8003bee:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8003bf0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003bf4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c04:	601a      	str	r2, [r3, #0]
    return entityNumber;
 8003c06:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c0a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c0e:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003c10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c14:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c18:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 8003c1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c1e:	3302      	adds	r3, #2
 8003c20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003c24:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003c28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	fieldNumber = *(inputData);
 8003c32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
    return fieldNumber;
 8003c3c:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	; 0xea
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003c40:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c44:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8003c48:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003c4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    (*Rpos) = Rpos_internal;
 8003c54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c5c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003c60:	601a      	str	r2, [r3, #0]
}
 8003c62:	bf00      	nop
                                  M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <proceedGluedValues+0x308>)
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c6c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            EntityField* const field = &entity->fields[fieldNumber];
 8003c7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c86:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	015b      	lsls	r3, r3, #5
 8003c8e:	4413      	add	r3, r2
 8003c90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003c94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c98:	891b      	ldrh	r3, [r3, #8]
 8003c9a:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003c9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003ca8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003cac:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f240 8135 	bls.w	8003f26 <proceedGluedValues+0x53e>
 8003cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003cc0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	f240 812b 	bls.w	8003f26 <proceedGluedValues+0x53e>
                const reg typeLen = getMYCTypeLen(field->type);
 8003cd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003cd4:	7e1b      	ldrb	r3, [r3, #24]
 8003cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    if(type < TYPE_ARRAY_LENGTH) {
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	2b11      	cmp	r3, #17
 8003ce0:	d814      	bhi.n	8003d0c <proceedGluedValues+0x324>
        return typeLengthMappingArray[type];
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <proceedGluedValues+0x320>)
 8003ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cec:	e00f      	b.n	8003d0e <proceedGluedValues+0x326>
 8003cee:	bf00      	nop
 8003cf0:	20000290 	.word	0x20000290
 8003cf4:	0800e510 	.word	0x0800e510
 8003cf8:	0800dc24 	.word	0x0800dc24
 8003cfc:	0800e46c 	.word	0x0800e46c
 8003d00:	0800e590 	.word	0x0800e590
 8003d04:	0800e54c 	.word	0x0800e54c
 8003d08:	0800f1fc 	.word	0x0800f1fc
    return 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003d12:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d20:	4413      	add	r3, r2
 8003d22:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d219      	bcs.n	8003d5e <proceedGluedValues+0x376>
 8003d2a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d38:	4413      	add	r3, r2
 8003d3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	bf34      	ite	cc
 8003d42:	2301      	movcc	r3, #1
 8003d44:	2300      	movcs	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4baf      	ldr	r3, [pc, #700]	; (8004008 <proceedGluedValues+0x620>)
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 8003d52:	4aae      	ldr	r2, [pc, #696]	; (800400c <proceedGluedValues+0x624>)
 8003d54:	48ae      	ldr	r0, [pc, #696]	; (8004010 <proceedGluedValues+0x628>)
 8003d56:	f001 f93d 	bl	8004fd4 <__M_Error>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e3ed      	b.n	800453a <proceedGluedValues+0xb52>

                if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8003d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 80d0 	bne.w	8003f0c <proceedGluedValues+0x524>

                    ptr = (entity->pointer + field->shift);
 8003d6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 8003d7e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d82:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003d8c:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	4413      	add	r3, r2
 8003d94:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003d98:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8003d9c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003da0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003da4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003da8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d022      	beq.n	8003e02 <proceedGluedValues+0x41a>
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01c      	beq.n	8003e02 <proceedGluedValues+0x41a>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 8003dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 8003dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                                        if(reg_ptr_to) {
 8003dda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d07d      	beq.n	8003ede <proceedGluedValues+0x4f6>
 8003de2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    MY_CTYPE_REG_CPY(to, from);
 8003df2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfc:	601a      	str	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003e00:	e06d      	b.n	8003ede <proceedGluedValues+0x4f6>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <proceedGluedValues+0x454>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 8003e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 8003e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    MY_CTYPE_REG_CPY(to, from);
 8003e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	e051      	b.n	8003ee0 <proceedGluedValues+0x4f8>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d029      	beq.n	8003e9c <proceedGluedValues+0x4b4>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                                        if(reg_ptr_to) {
 8003e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d042      	beq.n	8003ee0 <proceedGluedValues+0x4f8>
 8003e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    switch (n) {
 8003e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d106      	bne.n	8003e88 <proceedGluedValues+0x4a0>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003e7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e008      	b.n	8003e9a <proceedGluedValues+0x4b2>
    default: memcpy(to, from, n); break;
 8003e88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e8c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003e90:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003e94:	f004 fc48 	bl	8008728 <memcpy>
 8003e98:	bf00      	nop
}
 8003e9a:	e021      	b.n	8003ee0 <proceedGluedValues+0x4f8>
 8003e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    switch (n) {
 8003eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <proceedGluedValues+0x4e2>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 8003ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e008      	b.n	8003edc <proceedGluedValues+0x4f4>
    default: memcpy(to, from, n); break;
 8003eca:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003ece:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003ed2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003ed6:	f004 fc27 	bl	8008728 <memcpy>
 8003eda:	bf00      	nop
}
 8003edc:	e000      	b.n	8003ee0 <proceedGluedValues+0x4f8>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003ede:	bf00      	nop
}
 8003ee0:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                    const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003eec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <proceedGluedValues+0x524>
                        __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003ef4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8003efe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003f02:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8003f06:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003f0a:	47a0      	blx	r4
                    }
#endif /* USE_ENTITY_WRITE_CALLBACK */

                }

                Rpos += typeLen;
 8003f0c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f1a:	441a      	add	r2, r3
 8003f1c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f24:	601a      	str	r2, [r3, #0]
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8003f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f30:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003f34:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f4ff ae01 	bcc.w	8003b40 <proceedGluedValues+0x158>
            }
        }

        ENTITY_DBG_ASSERT_BUF(((Rpos + 1) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003f3e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f42:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d217      	bcs.n	8003f82 <proceedGluedValues+0x59a>
 8003f52:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f56:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f62:	429a      	cmp	r2, r3
 8003f64:	bf34      	ite	cc
 8003f66:	2301      	movcc	r3, #1
 8003f68:	2300      	movcs	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <proceedGluedValues+0x620>)
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	f240 13fb 	movw	r3, #507	; 0x1fb
 8003f76:	4a25      	ldr	r2, [pc, #148]	; (800400c <proceedGluedValues+0x624>)
 8003f78:	4826      	ldr	r0, [pc, #152]	; (8004014 <proceedGluedValues+0x62c>)
 8003f7a:	f001 f82b 	bl	8004fd4 <__M_Error>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e2db      	b.n	800453a <proceedGluedValues+0xb52>
        cmd = inputData[Rpos];
 8003f82:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003f90:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        if(cmd == SEVERAL_VALUES_GLUED_END) {
 8003f9e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003fa2:	2b09      	cmp	r3, #9
 8003fa4:	d108      	bne.n	8003fb8 <proceedGluedValues+0x5d0>
            (*size) = 0;
 8003fa6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003faa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
            return ENTITY_OK;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e2c0      	b.n	800453a <proceedGluedValues+0xb52>
        }
    }

    if(cmd == READ_SEVERAL_VALUES_GLUED) {
 8003fb8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003fbc:	2b06      	cmp	r3, #6
 8003fbe:	f040 82b3 	bne.w	8004528 <proceedGluedValues+0xb40>
        ENTITY_DBG_ASSERT_BUF(((Rpos + 2) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003fc2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003fc6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3302      	adds	r3, #2
 8003fce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d222      	bcs.n	800401c <proceedGluedValues+0x634>
 8003fd6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003fda:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	bf34      	ite	cc
 8003fea:	2301      	movcc	r3, #1
 8003fec:	2300      	movcs	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <proceedGluedValues+0x620>)
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	f240 2305 	movw	r3, #517	; 0x205
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <proceedGluedValues+0x624>)
 8003ffc:	4806      	ldr	r0, [pc, #24]	; (8004018 <proceedGluedValues+0x630>)
 8003ffe:	f000 ffe9 	bl	8004fd4 <__M_Error>
 8004002:	2300      	movs	r3, #0
 8004004:	e299      	b.n	800453a <proceedGluedValues+0xb52>
 8004006:	bf00      	nop
 8004008:	0800e5cc 	.word	0x0800e5cc
 800400c:	0800dc24 	.word	0x0800dc24
 8004010:	0800e40c 	.word	0x0800e40c
 8004014:	0800e604 	.word	0x0800e604
 8004018:	0800e620 	.word	0x0800e620

        const u8 readRequestCnt = inputData[Rpos++];
 800401c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004020:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800402c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004036:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	4413      	add	r3, r2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        outputData[Wpos++] = READ_SEVERAL_VALUES_GLUED;
 8004044:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800404e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004052:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	4413      	add	r3, r2
 800405a:	2206      	movs	r2, #6
 800405c:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = readRequestCnt;
 800405e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004068:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800406c:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	4413      	add	r3, r2
 8004074:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8004078:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = inputData[Rpos++];
 800407a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800407e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	1c59      	adds	r1, r3, #1
 8004086:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800408a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800408e:	6011      	str	r1, [r2, #0]
 8004090:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004094:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	441a      	add	r2, r3
 800409c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80040a0:	1c59      	adds	r1, r3, #1
 80040a2:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 80040a6:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80040aa:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 80040ae:	6809      	ldr	r1, [r1, #0]
 80040b0:	440b      	add	r3, r1
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	701a      	strb	r2, [r3, #0]

        for(reg i = 0; i < readRequestCnt; ++i) {
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80040bc:	e22d      	b.n	800451a <proceedGluedValues+0xb32>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field request size more than buffer");
 80040be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3303      	adds	r3, #3
 80040ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d217      	bcs.n	8004102 <proceedGluedValues+0x71a>
 80040d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3303      	adds	r3, #3
 80040de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040e2:	429a      	cmp	r2, r3
 80040e4:	bf34      	ite	cc
 80040e6:	2301      	movcc	r3, #1
 80040e8:	2300      	movcs	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	4619      	mov	r1, r3
 80040ee:	4bac      	ldr	r3, [pc, #688]	; (80043a0 <proceedGluedValues+0x9b8>)
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	f240 230d 	movw	r3, #525	; 0x20d
 80040f6:	4aab      	ldr	r2, [pc, #684]	; (80043a4 <proceedGluedValues+0x9bc>)
 80040f8:	48ab      	ldr	r0, [pc, #684]	; (80043a8 <proceedGluedValues+0x9c0>)
 80040fa:	f000 ff6b 	bl	8004fd4 <__M_Error>
 80040fe:	2300      	movs	r3, #0
 8004100:	e21b      	b.n	800453a <proceedGluedValues+0xb52>
 8004102:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004106:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    reg Rpos_internal = (*Rpos);
 8004110:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004114:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 800411e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004126:	4413      	add	r3, r2
 8004128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800412c:	2302      	movs	r3, #2
 800412e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800413a:	f107 0314 	add.w	r3, r7, #20
 800413e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    switch (n) {
 8004142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004146:	2b01      	cmp	r3, #1
 8004148:	d106      	bne.n	8004158 <proceedGluedValues+0x770>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800414a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	e008      	b.n	800416a <proceedGluedValues+0x782>
    default: memcpy(to, from, n); break;
 8004158:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800415c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004160:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004164:	f004 fae0 	bl	8008728 <memcpy>
 8004168:	bf00      	nop
}
 800416a:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 800416c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004170:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	b29a      	uxth	r2, r3
 8004178:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800417c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004180:	601a      	str	r2, [r3, #0]
    return entityNumber;
 8004182:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004186:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800418a:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 800418c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004190:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004194:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 8004196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800419a:	3302      	adds	r3, #2
 800419c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80041a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041a8:	4413      	add	r3, r2
 80041aa:	67fb      	str	r3, [r7, #124]	; 0x7c
	fieldNumber = *(inputData);
 80041ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    return fieldNumber;
 80041b4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80041b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041bc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80041c0:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80041c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041c6:	3301      	adds	r3, #1
 80041c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    (*Rpos) = Rpos_internal;
 80041cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 80041dc:	4b73      	ldr	r3, [pc, #460]	; (80043ac <proceedGluedValues+0x9c4>)
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041e4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            EntityField* const field = &entity->fields[fieldNumber];
 80041f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041fe:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	015b      	lsls	r3, r3, #5
 8004206:	4413      	add	r3, r2
 8004208:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 800420c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004210:	891b      	ldrh	r3, [r3, #8]
 8004212:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8004216:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800421a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004224:	429a      	cmp	r2, r3
 8004226:	f240 8171 	bls.w	800450c <proceedGluedValues+0xb24>
 800422a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800422e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8004238:	429a      	cmp	r2, r3
 800423a:	f240 8167 	bls.w	800450c <proceedGluedValues+0xb24>
                const reg typeLen = getMYCTypeLen(field->type);
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004242:	7e1b      	ldrb	r3, [r3, #24]
 8004244:	677b      	str	r3, [r7, #116]	; 0x74
    if(type < TYPE_ARRAY_LENGTH) {
 8004246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004248:	2b11      	cmp	r3, #17
 800424a:	d804      	bhi.n	8004256 <proceedGluedValues+0x86e>
        return typeLengthMappingArray[type];
 800424c:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <proceedGluedValues+0x9c8>)
 800424e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004254:	e000      	b.n	8004258 <proceedGluedValues+0x870>
    return 0;
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

                ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");
 800425c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004264:	4413      	add	r3, r2
 8004266:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800426a:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d219      	bcs.n	80042a8 <proceedGluedValues+0x8c0>
 8004274:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427c:	4413      	add	r3, r2
 800427e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004282:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	bf34      	ite	cc
 800428c:	2301      	movcc	r3, #1
 800428e:	2300      	movcs	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	4619      	mov	r1, r3
 8004294:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <proceedGluedValues+0x9cc>)
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	f44f 7306 	mov.w	r3, #536	; 0x218
 800429c:	4a41      	ldr	r2, [pc, #260]	; (80043a4 <proceedGluedValues+0x9bc>)
 800429e:	4846      	ldr	r0, [pc, #280]	; (80043b8 <proceedGluedValues+0x9d0>)
 80042a0:	f000 fe98 	bl	8004fd4 <__M_Error>
 80042a4:	2300      	movs	r3, #0
 80042a6:	e148      	b.n	800453a <proceedGluedValues+0xb52>

                ptr = (entity->pointer + field->shift);
 80042a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	4413      	add	r3, r2
 80042b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80042ce:	440b      	add	r3, r1
 80042d0:	673a      	str	r2, [r7, #112]	; 0x70
 80042d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80042d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80042da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042de:	667b      	str	r3, [r7, #100]	; 0x64
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80042e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d027      	beq.n	800433a <proceedGluedValues+0x952>
 80042ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d022      	beq.n	800433a <proceedGluedValues+0x952>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 80042f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	663b      	str	r3, [r7, #96]	; 0x60
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 80042fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042fc:	65fb      	str	r3, [r7, #92]	; 0x5c
                                        if(reg_ptr_from) {
 80042fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80e4 	beq.w	80044ce <proceedGluedValues+0xae6>
 8004306:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800430a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800430e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800431a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800431c:	601a      	str	r2, [r3, #0]
    MY_CTYPE_REG_CPY(to, from);
 800431e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004322:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800432e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	601a      	str	r2, [r3, #0]
}
 8004336:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004338:	e0c9      	b.n	80044ce <proceedGluedValues+0xae6>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 800433a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03b      	beq.n	80043bc <proceedGluedValues+0x9d4>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8004344:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800434c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800434e:	601a      	str	r2, [r3, #0]
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8004350:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004354:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004358:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004360:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004364:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004368:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004374:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004378:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800437c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	601a      	str	r2, [r3, #0]
    MY_CTYPE_REG_CPY(to, from);
 8004384:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004388:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004394:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	601a      	str	r2, [r3, #0]
}
 800439c:	e098      	b.n	80044d0 <proceedGluedValues+0xae8>
 800439e:	bf00      	nop
 80043a0:	0800e63c 	.word	0x0800e63c
 80043a4:	0800dc24 	.word	0x0800dc24
 80043a8:	0800e54c 	.word	0x0800e54c
 80043ac:	20000290 	.word	0x20000290
 80043b0:	0800f1fc 	.word	0x0800f1fc
 80043b4:	0800e590 	.word	0x0800e590
 80043b8:	0800e274 	.word	0x0800e274
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80043bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d04a      	beq.n	800445c <proceedGluedValues+0xa74>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043d2:	601a      	str	r2, [r3, #0]
                                        if(reg_ptr_from) {
 80043d4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d076      	beq.n	80044d0 <proceedGluedValues+0xae8>
 80043e2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043f6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80043fa:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004406:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800440a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800440c:	601a      	str	r2, [r3, #0]
    switch (n) {
 800440e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004412:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10c      	bne.n	8004436 <proceedGluedValues+0xa4e>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800441c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004420:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800442c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	e011      	b.n	800445a <proceedGluedValues+0xa72>
    default: memcpy(to, from, n); break;
 8004436:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800443a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800443e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004442:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8004446:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800444a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	6809      	ldr	r1, [r1, #0]
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	f004 f968 	bl	8008728 <memcpy>
 8004458:	bf00      	nop
}
 800445a:	e039      	b.n	80044d0 <proceedGluedValues+0xae8>
 800445c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004460:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004464:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800446c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004470:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800447e:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004480:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004484:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10c      	bne.n	80044a8 <proceedGluedValues+0xac0>
    case sizeof(u8 ): *(u8 *)to = *(u8 *)from; break;
 800448e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	781a      	ldrb	r2, [r3, #0]
 800449a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800449e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e011      	b.n	80044cc <proceedGluedValues+0xae4>
    default: memcpy(to, from, n); break;
 80044a8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80044ac:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 80044b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80044b4:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 80044b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80044bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	6809      	ldr	r1, [r1, #0]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	f004 f92f 	bl	8008728 <memcpy>
 80044ca:	bf00      	nop
}
 80044cc:	e000      	b.n	80044d0 <proceedGluedValues+0xae8>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80044ce:	bf00      	nop
}
 80044d0:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80044dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <proceedGluedValues+0xb14>
                    __entityCallback(entity, field, ptr, field->rdCallback.context);
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 80044ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80044f2:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80044f6:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80044fa:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_READ_CALLBACK */

                Wpos += typeLen;
 80044fc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004504:	4413      	add	r3, r2
 8004506:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 800450a:	e001      	b.n	8004510 <proceedGluedValues+0xb28>
            } else {
                return ENTITY_ERROR;
 800450c:	2300      	movs	r3, #0
 800450e:	e014      	b.n	800453a <proceedGluedValues+0xb52>
        for(reg i = 0; i < readRequestCnt; ++i) {
 8004510:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004514:	3301      	adds	r3, #1
 8004516:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800451a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800451e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004522:	429a      	cmp	r2, r3
 8004524:	f4ff adcb 	bcc.w	80040be <proceedGluedValues+0x6d6>
            }
        }
    }

    (*size) = Wpos;
 8004528:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800452c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004536:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8004538:	2301      	movs	r3, #1
}
 800453a:	4618      	mov	r0, r3
 800453c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8004540:	46bd      	mov	sp, r7
 8004542:	bd90      	pop	{r4, r7, pc}

08004544 <pointerInit>:
    }
}

// init data sizeof ---------------------------------------
void pointerInit(reg n, u8* ptr)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
    while(n--) {
 800454e:	e004      	b.n	800455a <pointerInit+0x16>
        *ptr++ = 0;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	603a      	str	r2, [r7, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
    while(n--) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f5      	bne.n	8004550 <pointerInit+0xc>
    }
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <rawParser_dma_init>:
    }
    return self;
}

int rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af02      	add	r7, sp, #8
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: No input data valid ");
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <rawParser_dma_init+0x32>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	4b23      	ldr	r3, [pc, #140]	; (8004624 <rawParser_dma_init+0xb0>)
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2348      	movs	r3, #72	; 0x48
 800459a:	4a23      	ldr	r2, [pc, #140]	; (8004628 <rawParser_dma_init+0xb4>)
 800459c:	4823      	ldr	r0, [pc, #140]	; (800462c <rawParser_dma_init+0xb8>)
 800459e:	f000 fd19 	bl	8004fd4 <__M_Error>
 80045a2:	2300      	movs	r3, #0
 80045a4:	e03a      	b.n	800461c <rawParser_dma_init+0xa8>

    self->m_startByte = packStart;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	701a      	strb	r2, [r3, #0]
    self->m_receivePackLen = 0;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
    self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	22ff      	movs	r2, #255	; 0xff
 80045b6:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	22ff      	movs	r2, #255	; 0xff
 80045be:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

    self->m_triggerSB = 0;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
    self->m_receivePos = 0;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    self->m_receiveReadPos = 0;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    self->m_receiveHandlePos = 0;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    self->TX.data = self->m_sendBuffer;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#else
    self->TX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    self->TX.size = 0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
    self->RX.data = self->m_receiveFrameBuffer;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
#else
    self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

    self->RX.size = 0;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

    self->uniRXPosition = 0;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return D_RAW_P_OK;
 800461a:	2301      	movs	r3, #1
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	0800e700 	.word	0x0800e700
 8004628:	0800e674 	.word	0x0800e674
 800462c:	0800e6b0 	.word	0x0800e6b0

08004630 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af04      	add	r7, sp, #16
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	70fb      	strb	r3, [r7, #3]
 800463c:	4613      	mov	r3, r2
 800463e:	70bb      	strb	r3, [r7, #2]
    if (newFrame) {
 8004640:	78bb      	ldrb	r3, [r7, #2]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d020      	beq.n	8004688 <RawParser_dma_proceedByte+0x58>

#ifdef D_RAW_P_CRC_ENA
    	M_Assert_Warning(self->receiveState < RAW_P_DMA_RECEIVE_CRC_0 , M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: last packet error!!!");
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 800464c:	2b03      	cmp	r3, #3
 800464e:	d80f      	bhi.n	8004670 <RawParser_dma_proceedByte+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 8004656:	2b03      	cmp	r3, #3
 8004658:	bf94      	ite	ls
 800465a:	2301      	movls	r3, #1
 800465c:	2300      	movhi	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	4619      	mov	r1, r3
 8004662:	4b79      	ldr	r3, [pc, #484]	; (8004848 <RawParser_dma_proceedByte+0x218>)
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	23b1      	movs	r3, #177	; 0xb1
 8004668:	4a78      	ldr	r2, [pc, #480]	; (800484c <RawParser_dma_proceedByte+0x21c>)
 800466a:	4879      	ldr	r0, [pc, #484]	; (8004850 <RawParser_dma_proceedByte+0x220>)
 800466c:	f000 fcd0 	bl	8005010 <__M_Warning>

    	self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

        self->m_receiveHandlePos = 0;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
    }

    switch(self->receiveState) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 800468e:	2b0d      	cmp	r3, #13
 8004690:	f200 80d2 	bhi.w	8004838 <RawParser_dma_proceedByte+0x208>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <RawParser_dma_proceedByte+0x6c>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046d5 	.word	0x080046d5
 80046a0:	08004839 	.word	0x08004839
 80046a4:	08004839 	.word	0x08004839
 80046a8:	08004763 	.word	0x08004763
 80046ac:	080047b5 	.word	0x080047b5
 80046b0:	08004839 	.word	0x08004839
 80046b4:	08004839 	.word	0x08004839
 80046b8:	08004839 	.word	0x08004839
 80046bc:	08004839 	.word	0x08004839
 80046c0:	08004839 	.word	0x08004839
 80046c4:	08004839 	.word	0x08004839
 80046c8:	08004839 	.word	0x08004839
 80046cc:	080047fd 	.word	0x080047fd
 80046d0:	08004821 	.word	0x08004821

    case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd fae6 	bl	8001cb0 <fast_crc8_maxim_byte>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        if(RECEIVE_EXTENDED_LEN_CMD == ch) {
            self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
        } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

            const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d902      	bls.n	80046fe <RawParser_dma_proceedByte+0xce>
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	e000      	b.n	8004700 <RawParser_dma_proceedByte+0xd0>
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6053      	str	r3, [r2, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	60bb      	str	r3, [r7, #8]
            self->m_receiveHandlePos = 0;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2203      	movs	r2, #3
 8004716:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

            M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d803      	bhi.n	800472a <RawParser_dma_proceedByte+0xfa>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 8089 	bne.w	800483c <RawParser_dma_proceedByte+0x20c>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004730:	d802      	bhi.n	8004738 <RawParser_dma_proceedByte+0x108>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <RawParser_dma_proceedByte+0x10c>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <RawParser_dma_proceedByte+0x10e>
 800473c:	2300      	movs	r3, #0
 800473e:	b2d9      	uxtb	r1, r3
 8004740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004744:	9302      	str	r3, [sp, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	4b42      	ldr	r3, [pc, #264]	; (8004854 <RawParser_dma_proceedByte+0x224>)
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	23cd      	movs	r3, #205	; 0xcd
 8004750:	4a3e      	ldr	r2, [pc, #248]	; (800484c <RawParser_dma_proceedByte+0x21c>)
 8004752:	4841      	ldr	r0, [pc, #260]	; (8004858 <RawParser_dma_proceedByte+0x228>)
 8004754:	f000 fc5c 	bl	8005010 <__M_Warning>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	220c      	movs	r2, #12
 800475c:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
        }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        break;}
 8004760:	e06c      	b.n	800483c <RawParser_dma_proceedByte+0x20c>

        break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    case RAW_P_DMA_RECEIVE_DATA: {
        reg rx_pos = self->m_receiveHandlePos;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 8004768:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f7fd fa9b 	bl	8001cb0 <fast_crc8_maxim_byte>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
#endif /* D_RAW_P_CRC_ENA */

        self->RX.data[rx_pos] = ch;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 2624 	ldr.w	r2, [r3, #1572]	; 0x624
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	701a      	strb	r2, [r3, #0]
        ++rx_pos;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]

        if (rx_pos == self->m_receivePackLen) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d103      	bne.n	80047aa <RawParser_dma_proceedByte+0x17a>

#ifdef D_RAW_P_CRC_ENA
            D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
            self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2204      	movs	r2, #4
 80047a6:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
            self->RX.size = self->m_receivePackLen;
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
        }

        self->m_receiveHandlePos = rx_pos;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        break;}
 80047b2:	e044      	b.n	800483e <RawParser_dma_proceedByte+0x20e>

    case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

        if(self->m_receiveCalcCRC == ch) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d109      	bne.n	80047d4 <RawParser_dma_proceedByte+0x1a4>
            self->RX.size = self->m_receivePackLen;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	220d      	movs	r2, #13
 80047ce:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
        self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

        break;}
 80047d2:	e034      	b.n	800483e <RawParser_dma_proceedByte+0x20e>
            M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive CRC8 error, rx_crc: %d, calc_crc: %d", ch, self->m_receiveCalcCRC);
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	f892 2608 	ldrb.w	r2, [r2, #1544]	; 0x608
 80047dc:	9202      	str	r2, [sp, #8]
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	4b1e      	ldr	r3, [pc, #120]	; (800485c <RawParser_dma_proceedByte+0x22c>)
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f240 1323 	movw	r3, #291	; 0x123
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <RawParser_dma_proceedByte+0x21c>)
 80047ea:	2101      	movs	r1, #1
 80047ec:	481c      	ldr	r0, [pc, #112]	; (8004860 <RawParser_dma_proceedByte+0x230>)
 80047ee:	f000 fc0f 	bl	8005010 <__M_Warning>
            self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	220c      	movs	r2, #12
 80047f6:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        break;}
 80047fa:	e020      	b.n	800483e <RawParser_dma_proceedByte+0x20e>

#endif /* D_RAW_P_CRC_ENA */


    case RAW_P_DMA_RECEIVE_ERR:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive error, byte: %d, rx_len: %d, max_rxlen: %d", ch, self->m_receivePackLen, D_RAW_P_RX_BUF_SIZE);
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6852      	ldr	r2, [r2, #4]
 8004802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004806:	9103      	str	r1, [sp, #12]
 8004808:	9202      	str	r2, [sp, #8]
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	4b15      	ldr	r3, [pc, #84]	; (8004864 <RawParser_dma_proceedByte+0x234>)
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <RawParser_dma_proceedByte+0x21c>)
 8004816:	2101      	movs	r1, #1
 8004818:	4811      	ldr	r0, [pc, #68]	; (8004860 <RawParser_dma_proceedByte+0x230>)
 800481a:	f000 fbf9 	bl	8005010 <__M_Warning>
        break;
 800481e:	e00e      	b.n	800483e <RawParser_dma_proceedByte+0x20e>

    case RAW_P_DMA_RECEIVE_OK:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: LAST Received OK, byte: %d is not received because no SB", ch);
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	4b10      	ldr	r3, [pc, #64]	; (8004868 <RawParser_dma_proceedByte+0x238>)
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800482c:	4a07      	ldr	r2, [pc, #28]	; (800484c <RawParser_dma_proceedByte+0x21c>)
 800482e:	2101      	movs	r1, #1
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <RawParser_dma_proceedByte+0x230>)
 8004832:	f000 fbed 	bl	8005010 <__M_Warning>
        break;
 8004836:	e002      	b.n	800483e <RawParser_dma_proceedByte+0x20e>

    default:
        break;
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <RawParser_dma_proceedByte+0x20e>
        break;}
 800483c:	bf00      	nop
    }
}
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	0800e7ac 	.word	0x0800e7ac
 800484c:	0800e674 	.word	0x0800e674
 8004850:	0800e77c 	.word	0x0800e77c
 8004854:	0800e80c 	.word	0x0800e80c
 8004858:	0800e7dc 	.word	0x0800e7dc
 800485c:	0800e868 	.word	0x0800e868
 8004860:	0800e85c 	.word	0x0800e85c
 8004864:	0800e8b0 	.word	0x0800e8b0
 8004868:	0800e900 	.word	0x0800e900

0800486c <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid input");
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d110      	bne.n	800489c <RawParser_dma_proceed+0x30>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	4b33      	ldr	r3, [pc, #204]	; (8004958 <RawParser_dma_proceed+0xec>)
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8004890:	4a32      	ldr	r2, [pc, #200]	; (800495c <RawParser_dma_proceed+0xf0>)
 8004892:	4833      	ldr	r0, [pc, #204]	; (8004960 <RawParser_dma_proceed+0xf4>)
 8004894:	f000 fb9e 	bl	8004fd4 <__M_Error>
 8004898:	2300      	movs	r3, #0
 800489a:	e059      	b.n	8004950 <RawParser_dma_proceed+0xe4>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	613b      	str	r3, [r7, #16]
            reg   receiveReadPos      = self->m_receiveReadPos    & (D_RAW_P_RX_BUF_SIZE - 1U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	617b      	str	r3, [r7, #20]
    self->RX.size = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

//    if(receivePos_saved == receiveReadPos) { // may be needed
//        return &self->RX;
//    }

    while (receivePos_saved != receiveReadPos) {
 80048bc:	e03b      	b.n	8004936 <RawParser_dma_proceed+0xca>

        const u8 ch = self->m_receiveBuffer[receiveReadPos];
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	4413      	add	r3, r2
 80048c4:	3308      	adds	r3, #8
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	73fb      	strb	r3, [r7, #15]

        if (self->m_triggerSB) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 360a 	ldrb.w	r3, [r3, #1546]	; 0x60a
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d016      	beq.n	8004902 <RawParser_dma_proceed+0x96>
            if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	7bfa      	ldrb	r2, [r7, #15]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d106      	bne.n	80048ec <RawParser_dma_proceed+0x80>
                RawParser_dma_proceedByte(self, ch, 0);
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2200      	movs	r2, #0
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff fea3 	bl	8004630 <RawParser_dma_proceedByte>
 80048ea:	e005      	b.n	80048f8 <RawParser_dma_proceed+0x8c>
            } else { //{SB}{!SB} -> {SB} and newframe
                RawParser_dma_proceedByte(self, ch, 1);
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2201      	movs	r2, #1
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff fe9c 	bl	8004630 <RawParser_dma_proceedByte>
            }
            self->m_triggerSB = 0;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8004900:	e00f      	b.n	8004922 <RawParser_dma_proceed+0xb6>
        } else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	7bfa      	ldrb	r2, [r7, #15]
 8004908:	429a      	cmp	r2, r3
 800490a:	d104      	bne.n	8004916 <RawParser_dma_proceed+0xaa>
            self->m_triggerSB = 1;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8004914:	e005      	b.n	8004922 <RawParser_dma_proceed+0xb6>
        } else { //{!SB}{!SB} -> {!SB}
            RawParser_dma_proceedByte(self, ch, 0);
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2200      	movs	r2, #0
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fe87 	bl	8004630 <RawParser_dma_proceedByte>
        }

        receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	3301      	adds	r3, #1
 8004926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492a:	617b      	str	r3, [r7, #20]

        if(self->RX.size != 0) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <RawParser_dma_proceed+0xd4>
    while (receivePos_saved != receiveReadPos) {
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	429a      	cmp	r2, r3
 800493c:	d1bf      	bne.n	80048be <RawParser_dma_proceed+0x52>
 800493e:	e000      	b.n	8004942 <RawParser_dma_proceed+0xd6>
#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
            /* Now decode -- encoded codeword size must be passed */
            rscode_decode(&self->rs_ecc, self->RX.data, self->RX.size);
            self->RX.size -= RSCODE_NPAR;
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */
            break;
 8004940:	bf00      	nop
        }
    }

    self->m_receiveReadPos = receiveReadPos;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    return &self->RX;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f203 6324 	addw	r3, r3, #1572	; 0x624
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	0800e978 	.word	0x0800e978
 800495c:	0800e674 	.word	0x0800e674
 8004960:	0800e954 	.word	0x0800e954

08004964 <RawParser_dma_shieldFrame>:

// slow shield functions (slow & more copy)-----------------------------------------------------------------------------------------
RawParser_Frame_t* RawParser_dma_shieldFrame(RawParser_dma_t* const self, const u8* data, reg len)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	; 0x30
 8004968:	af04      	add	r7, sp, #16
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_shieldFrame: No valid input");
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d110      	bne.n	8004998 <RawParser_dma_shieldFrame+0x34>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	4b57      	ldr	r3, [pc, #348]	; (8004ae4 <RawParser_dma_shieldFrame+0x180>)
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 800498c:	4a56      	ldr	r2, [pc, #344]	; (8004ae8 <RawParser_dma_shieldFrame+0x184>)
 800498e:	4857      	ldr	r0, [pc, #348]	; (8004aec <RawParser_dma_shieldFrame+0x188>)
 8004990:	f000 fb20 	bl	8004fd4 <__M_Error>
 8004994:	2300      	movs	r3, #0
 8004996:	e0a1      	b.n	8004adc <RawParser_dma_shieldFrame+0x178>
    M_Assert_Break((data == (u8*)NULL) || len == 0, M_EMPTY, {
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <RawParser_dma_shieldFrame+0x40>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d119      	bne.n	80049d8 <RawParser_dma_shieldFrame+0x74>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <RawParser_dma_shieldFrame+0x4c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <RawParser_dma_shieldFrame+0x50>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <RawParser_dma_shieldFrame+0x52>
 80049b4:	2300      	movs	r3, #0
 80049b6:	b2d9      	uxtb	r1, r3
 80049b8:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <RawParser_dma_shieldFrame+0x180>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	f240 13d3 	movw	r3, #467	; 0x1d3
 80049c0:	4a49      	ldr	r2, [pc, #292]	; (8004ae8 <RawParser_dma_shieldFrame+0x184>)
 80049c2:	484b      	ldr	r0, [pc, #300]	; (8004af0 <RawParser_dma_shieldFrame+0x18c>)
 80049c4:	f000 fb06 	bl	8004fd4 <__M_Error>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80049d6:	e081      	b.n	8004adc <RawParser_dma_shieldFrame+0x178>

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    RawParser_dma_startTransmittPacket(self, (len + RSCODE_NPAR));
    rs_encode_data_onlyParity(&self->rs_ecc, data, len);
#else
    RawParser_dma_startTransmittPacket(self, len);
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f892 	bl	8004b04 <RawParser_dma_startTransmittPacket>

#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    while(len--) {
 80049e0:	e073      	b.n	8004aca <RawParser_dma_shieldFrame+0x166>
        RawParser_dma_addTxByteCRC(self, *data++);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	60ba      	str	r2, [r7, #8]
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	4613      	mov	r3, r2
 80049f0:	76fb      	strb	r3, [r7, #27]

#ifdef D_RAW_P_CRC_ENA
// elementary byte adding functions with calc crc----------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_addTxByteCRC(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10e      	bne.n	8004a16 <RawParser_dma_shieldFrame+0xb2>
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	4619      	mov	r1, r3
 8004a06:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <RawParser_dma_shieldFrame+0x190>)
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	23a1      	movs	r3, #161	; 0xa1
 8004a0c:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <RawParser_dma_shieldFrame+0x194>)
 8004a0e:	4837      	ldr	r0, [pc, #220]	; (8004aec <RawParser_dma_shieldFrame+0x188>)
 8004a10:	f000 fae0 	bl	8004fd4 <__M_Error>
 8004a14:	e059      	b.n	8004aca <RawParser_dma_shieldFrame+0x166>
#   ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#   endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    // move to cash
    u8* const   TX_data   = self->TX.data;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004a1c:	617b      	str	r3, [r7, #20]
    reg         TX_size   = self->TX.size;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004a24:	613b      	str	r3, [r7, #16]


#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2bfd      	cmp	r3, #253	; 0xfd
 8004a2a:	d113      	bne.n	8004a54 <RawParser_dma_shieldFrame+0xf0>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2bfd      	cmp	r3, #253	; 0xfd
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	22fd      	movs	r2, #253	; 0xfd
 8004a40:	9202      	str	r2, [sp, #8]
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <RawParser_dma_shieldFrame+0x198>)
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	23b1      	movs	r3, #177	; 0xb1
 8004a4a:	4a2b      	ldr	r2, [pc, #172]	; (8004af8 <RawParser_dma_shieldFrame+0x194>)
 8004a4c:	482c      	ldr	r0, [pc, #176]	; (8004b00 <RawParser_dma_shieldFrame+0x19c>)
 8004a4e:	f000 fac1 	bl	8004fd4 <__M_Error>
 8004a52:	e03a      	b.n	8004aca <RawParser_dma_shieldFrame+0x166>
#   else
    M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */


    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004a5a:	7efa      	ldrb	r2, [r7, #27]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd f926 	bl	8001cb0 <fast_crc8_maxim_byte>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609

    TX_data[TX_size++] = byte;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	613a      	str	r2, [r7, #16]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4413      	add	r3, r2
 8004a78:	7efa      	ldrb	r2, [r7, #27]
 8004a7a:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	7efa      	ldrb	r2, [r7, #27]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d11d      	bne.n	8004ac2 <RawParser_dma_shieldFrame+0x15e>

#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2bfd      	cmp	r3, #253	; 0xfd
 8004a8a:	d113      	bne.n	8004ab4 <RawParser_dma_shieldFrame+0x150>
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2bfd      	cmp	r3, #253	; 0xfd
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	4619      	mov	r1, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	22fd      	movs	r2, #253	; 0xfd
 8004aa0:	9202      	str	r2, [sp, #8]
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	4b15      	ldr	r3, [pc, #84]	; (8004afc <RawParser_dma_shieldFrame+0x198>)
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	23bd      	movs	r3, #189	; 0xbd
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <RawParser_dma_shieldFrame+0x194>)
 8004aac:	4814      	ldr	r0, [pc, #80]	; (8004b00 <RawParser_dma_shieldFrame+0x19c>)
 8004aae:	f000 fa91 	bl	8004fd4 <__M_Error>
 8004ab2:	e00a      	b.n	8004aca <RawParser_dma_shieldFrame+0x166>
#   else
        M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */

        TX_data[TX_size++] = byte;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	613a      	str	r2, [r7, #16]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4413      	add	r3, r2
 8004abe:	7efa      	ldrb	r2, [r7, #27]
 8004ac0:	701a      	strb	r2, [r3, #0]
    }

    self->TX.size = TX_size;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    while(len--) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	1e5a      	subs	r2, r3, #1
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d186      	bne.n	80049e2 <RawParser_dma_shieldFrame+0x7e>
    for (unsigned i = 0; i < RSCODE_NPAR; ++i) {
        RawParser_dma_addTxByteCRC(self, pBytes[RSCODE_NPAR-1-i]);
    }
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return RawParser_dma_finishTransmittPacket(self);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f91f 	bl	8004d18 <RawParser_dma_finishTransmittPacket>
 8004ada:	4603      	mov	r3, r0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	0800e9a0 	.word	0x0800e9a0
 8004ae8:	0800e674 	.word	0x0800e674
 8004aec:	0800e954 	.word	0x0800e954
 8004af0:	0800e9cc 	.word	0x0800e9cc
 8004af4:	0800ea28 	.word	0x0800ea28
 8004af8:	0800e9ec 	.word	0x0800e9ec
 8004afc:	0800ea80 	.word	0x0800ea80
 8004b00:	0800ea54 	.word	0x0800ea54

08004b04 <RawParser_dma_startTransmittPacket>:

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
void RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen) /////////////////////////////////////////////////////
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input");
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <RawParser_dma_startTransmittPacket+0x30>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bf0c      	ite	eq
 8004b1a:	2301      	moveq	r3, #1
 8004b1c:	2300      	movne	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	4619      	mov	r1, r3
 8004b22:	4b70      	ldr	r3, [pc, #448]	; (8004ce4 <RawParser_dma_startTransmittPacket+0x1e0>)
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004b2a:	4a6f      	ldr	r2, [pc, #444]	; (8004ce8 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004b2c:	486f      	ldr	r0, [pc, #444]	; (8004cec <RawParser_dma_startTransmittPacket+0x1e8>)
 8004b2e:	f000 fa51 	bl	8004fd4 <__M_Error>
 8004b32:	e0d3      	b.n	8004cdc <RawParser_dma_startTransmittPacket+0x1d8>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    M_Assert_Break((predictedLen == 0), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length");
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <RawParser_dma_startTransmittPacket+0x56>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	4619      	mov	r1, r3
 8004b48:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <RawParser_dma_startTransmittPacket+0x1ec>)
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	f240 13fd 	movw	r3, #509	; 0x1fd
 8004b50:	4a65      	ldr	r2, [pc, #404]	; (8004ce8 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004b52:	4868      	ldr	r0, [pc, #416]	; (8004cf4 <RawParser_dma_startTransmittPacket+0x1f0>)
 8004b54:	f000 fa3e 	bl	8004fd4 <__M_Error>
 8004b58:	e0c0      	b.n	8004cdc <RawParser_dma_startTransmittPacket+0x1d8>

#if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE // control undefined behavior
    M_Assert_Break( ((predictedLen + 4) > (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_MAX_PROTOCOL_LEN);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	2bfd      	cmp	r3, #253	; 0xfd
 8004b60:	d914      	bls.n	8004b8c <RawParser_dma_startTransmittPacket+0x88>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	3304      	adds	r3, #4
 8004b66:	2bfd      	cmp	r3, #253	; 0xfd
 8004b68:	bf8c      	ite	hi
 8004b6a:	2301      	movhi	r3, #1
 8004b6c:	2300      	movls	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	4619      	mov	r1, r3
 8004b72:	23fe      	movs	r3, #254	; 0xfe
 8004b74:	9302      	str	r3, [sp, #8]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	4b5f      	ldr	r3, [pc, #380]	; (8004cf8 <RawParser_dma_startTransmittPacket+0x1f4>)
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b82:	4a59      	ldr	r2, [pc, #356]	; (8004ce8 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004b84:	485d      	ldr	r0, [pc, #372]	; (8004cfc <RawParser_dma_startTransmittPacket+0x1f8>)
 8004b86:	f000 fa25 	bl	8004fd4 <__M_Error>
 8004b8a:	e0a7      	b.n	8004cdc <RawParser_dma_startTransmittPacket+0x1d8>
    M_Assert_Warning((predictedLen > (D_RAW_P_MAX_PROTOCOL_LEN >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_MAX_PROTOCOL_LEN >> 1));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b90:	d912      	bls.n	8004bb8 <RawParser_dma_startTransmittPacket+0xb4>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b7f      	cmp	r3, #127	; 0x7f
 8004b96:	bf8c      	ite	hi
 8004b98:	2301      	movhi	r3, #1
 8004b9a:	2300      	movls	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	237f      	movs	r3, #127	; 0x7f
 8004ba2:	9302      	str	r3, [sp, #8]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	4b55      	ldr	r3, [pc, #340]	; (8004d00 <RawParser_dma_startTransmittPacket+0x1fc>)
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	f240 2301 	movw	r3, #513	; 0x201
 8004bb0:	4a4d      	ldr	r2, [pc, #308]	; (8004ce8 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004bb2:	4854      	ldr	r0, [pc, #336]	; (8004d04 <RawParser_dma_startTransmittPacket+0x200>)
 8004bb4:	f000 fa2c 	bl	8005010 <__M_Warning>
    M_Assert_Warning((predictedLen > (D_RAW_P_TX_BUF_SIZE >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - buffer size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_TX_BUF_SIZE >> 1));
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */


#ifdef D_RAW_P_CRC_ENA
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	22ff      	movs	r2, #255	; 0xff
 8004bbc:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    D_RAW_P_CRC_START(self->m_transmittCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

    const u8 startByte = self->m_startByte;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	77fb      	strb	r3, [r7, #31]


    self->TX.size = 0;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    self->TX.data[self->TX.size++] = startByte;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004bda:	1c58      	adds	r0, r3, #1
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	f8c1 0620 	str.w	r0, [r1, #1568]	; 0x620
 8004be2:	4413      	add	r3, r2
 8004be4:	7ffa      	ldrb	r2, [r7, #31]
 8004be6:	701a      	strb	r2, [r3, #0]
        RawParser_dma_addTxByteCRC(self, (u8)((predictedLen >> 8U) & 0x000000FFUL));

    } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        RawParser_dma_addTxByteCRC(self, (u8)(((predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen) & 0x000000FFUL));
 8004be8:	7ffb      	ldrb	r3, [r7, #31]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d304      	bcc.n	8004bfa <RawParser_dma_startTransmittPacket+0xf6>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e001      	b.n	8004bfe <RawParser_dma_startTransmittPacket+0xfa>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	61ba      	str	r2, [r7, #24]
 8004c02:	75fb      	strb	r3, [r7, #23]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10e      	bne.n	8004c28 <RawParser_dma_startTransmittPacket+0x124>
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <RawParser_dma_startTransmittPacket+0x204>)
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	23a1      	movs	r3, #161	; 0xa1
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <RawParser_dma_startTransmittPacket+0x208>)
 8004c20:	4832      	ldr	r0, [pc, #200]	; (8004cec <RawParser_dma_startTransmittPacket+0x1e8>)
 8004c22:	f000 f9d7 	bl	8004fd4 <__M_Error>
 8004c26:	e059      	b.n	8004cdc <RawParser_dma_startTransmittPacket+0x1d8>
    u8* const   TX_data   = self->TX.data;
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004c2e:	613b      	str	r3, [r7, #16]
    reg         TX_size   = self->TX.size;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004c36:	60fb      	str	r3, [r7, #12]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2bfd      	cmp	r3, #253	; 0xfd
 8004c3c:	d113      	bne.n	8004c66 <RawParser_dma_startTransmittPacket+0x162>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2bfd      	cmp	r3, #253	; 0xfd
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	22fd      	movs	r2, #253	; 0xfd
 8004c52:	9202      	str	r2, [sp, #8]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <RawParser_dma_startTransmittPacket+0x20c>)
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	23b1      	movs	r3, #177	; 0xb1
 8004c5c:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <RawParser_dma_startTransmittPacket+0x208>)
 8004c5e:	482d      	ldr	r0, [pc, #180]	; (8004d14 <RawParser_dma_startTransmittPacket+0x210>)
 8004c60:	f000 f9b8 	bl	8004fd4 <__M_Error>
 8004c64:	e03a      	b.n	8004cdc <RawParser_dma_startTransmittPacket+0x1d8>
    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004c6c:	7dfa      	ldrb	r2, [r7, #23]
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd f81d 	bl	8001cb0 <fast_crc8_maxim_byte>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    TX_data[TX_size++] = byte;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	60fa      	str	r2, [r7, #12]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	7dfa      	ldrb	r2, [r7, #23]
 8004c8c:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	7dfa      	ldrb	r2, [r7, #23]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d11d      	bne.n	8004cd4 <RawParser_dma_startTransmittPacket+0x1d0>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2bfd      	cmp	r3, #253	; 0xfd
 8004c9c:	d113      	bne.n	8004cc6 <RawParser_dma_startTransmittPacket+0x1c2>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2bfd      	cmp	r3, #253	; 0xfd
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	4619      	mov	r1, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	22fd      	movs	r2, #253	; 0xfd
 8004cb2:	9202      	str	r2, [sp, #8]
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <RawParser_dma_startTransmittPacket+0x20c>)
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	23bd      	movs	r3, #189	; 0xbd
 8004cbc:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <RawParser_dma_startTransmittPacket+0x208>)
 8004cbe:	4815      	ldr	r0, [pc, #84]	; (8004d14 <RawParser_dma_startTransmittPacket+0x210>)
 8004cc0:	f000 f988 	bl	8004fd4 <__M_Error>
 8004cc4:	e00a      	b.n	8004cdc <RawParser_dma_startTransmittPacket+0x1d8>
        TX_data[TX_size++] = byte;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	60fa      	str	r2, [r7, #12]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	7dfa      	ldrb	r2, [r7, #23]
 8004cd2:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */
}
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	0800ead0 	.word	0x0800ead0
 8004ce8:	0800e674 	.word	0x0800e674
 8004cec:	0800e954 	.word	0x0800e954
 8004cf0:	0800eb18 	.word	0x0800eb18
 8004cf4:	0800eb04 	.word	0x0800eb04
 8004cf8:	0800eb8c 	.word	0x0800eb8c
 8004cfc:	0800eb54 	.word	0x0800eb54
 8004d00:	0800ec0c 	.word	0x0800ec0c
 8004d04:	0800ebd8 	.word	0x0800ebd8
 8004d08:	0800ea28 	.word	0x0800ea28
 8004d0c:	0800e9ec 	.word	0x0800e9ec
 8004d10:	0800ea80 	.word	0x0800ea80
 8004d14:	0800ea54 	.word	0x0800ea54

08004d18 <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af04      	add	r7, sp, #16
 8004d1e:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_startTransmittPacket: No valid input");
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d110      	bne.n	8004d48 <RawParser_dma_finishTransmittPacket+0x30>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	4619      	mov	r1, r3
 8004d34:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <RawParser_dma_finishTransmittPacket+0x10c>)
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	f44f 730a 	mov.w	r3, #552	; 0x228
 8004d3c:	4a3a      	ldr	r2, [pc, #232]	; (8004e28 <RawParser_dma_finishTransmittPacket+0x110>)
 8004d3e:	483b      	ldr	r0, [pc, #236]	; (8004e2c <RawParser_dma_finishTransmittPacket+0x114>)
 8004d40:	f000 f948 	bl	8004fd4 <__M_Error>
 8004d44:	2300      	movs	r3, #0
 8004d46:	e068      	b.n	8004e1a <RawParser_dma_finishTransmittPacket+0x102>
#ifdef D_RAW_P_CRC_ENA
    D_RAW_P_CRC_FINAL(self->m_transmittCalcCRC);

#   ifdef D_RAW_P_USE_CRC8

    RawParser_dma_addTxByte(self, self->m_transmittCalcCRC);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 2609 	ldrb.w	r2, [r3, #1545]	; 0x609
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	4613      	mov	r3, r2
 8004d54:	74fb      	strb	r3, [r7, #19]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid input");
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10e      	bne.n	8004d7a <RawParser_dma_finishTransmittPacket+0x62>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4b31      	ldr	r3, [pc, #196]	; (8004e30 <RawParser_dma_finishTransmittPacket+0x118>)
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2379      	movs	r3, #121	; 0x79
 8004d70:	4a30      	ldr	r2, [pc, #192]	; (8004e34 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004d72:	482e      	ldr	r0, [pc, #184]	; (8004e2c <RawParser_dma_finishTransmittPacket+0x114>)
 8004d74:	f000 f92e 	bl	8004fd4 <__M_Error>
 8004d78:	e04c      	b.n	8004e14 <RawParser_dma_finishTransmittPacket+0xfc>
    u8* const   TX_data   = self->TX.data;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004d80:	60fb      	str	r3, [r7, #12]
    reg         TX_size   = self->TX.size;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004d88:	60bb      	str	r3, [r7, #8]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2bfd      	cmp	r3, #253	; 0xfd
 8004d8e:	d113      	bne.n	8004db8 <RawParser_dma_finishTransmittPacket+0xa0>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2bfd      	cmp	r3, #253	; 0xfd
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	3301      	adds	r3, #1
 8004da2:	22fd      	movs	r2, #253	; 0xfd
 8004da4:	9202      	str	r2, [sp, #8]
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <RawParser_dma_finishTransmittPacket+0x120>)
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2389      	movs	r3, #137	; 0x89
 8004dae:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004db0:	4822      	ldr	r0, [pc, #136]	; (8004e3c <RawParser_dma_finishTransmittPacket+0x124>)
 8004db2:	f000 f90f 	bl	8004fd4 <__M_Error>
 8004db6:	e02d      	b.n	8004e14 <RawParser_dma_finishTransmittPacket+0xfc>
    TX_data[TX_size++] = byte;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	60ba      	str	r2, [r7, #8]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	7cfa      	ldrb	r2, [r7, #19]
 8004dc4:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	7cfa      	ldrb	r2, [r7, #19]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d11d      	bne.n	8004e0c <RawParser_dma_finishTransmittPacket+0xf4>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2bfd      	cmp	r3, #253	; 0xfd
 8004dd4:	d113      	bne.n	8004dfe <RawParser_dma_finishTransmittPacket+0xe6>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2bfd      	cmp	r3, #253	; 0xfd
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	4619      	mov	r1, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	3301      	adds	r3, #1
 8004de8:	22fd      	movs	r2, #253	; 0xfd
 8004dea:	9202      	str	r2, [sp, #8]
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <RawParser_dma_finishTransmittPacket+0x120>)
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	2392      	movs	r3, #146	; 0x92
 8004df4:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004df6:	4811      	ldr	r0, [pc, #68]	; (8004e3c <RawParser_dma_finishTransmittPacket+0x124>)
 8004df8:	f000 f8ec 	bl	8004fd4 <__M_Error>
 8004dfc:	e00a      	b.n	8004e14 <RawParser_dma_finishTransmittPacket+0xfc>
        TX_data[TX_size++] = byte;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	60ba      	str	r2, [r7, #8]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	7cfa      	ldrb	r2, [r7, #19]
 8004e0a:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    RawParser_dma_addTxByte(self, (u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

    return &self->TX;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f203 631c 	addw	r3, r3, #1564	; 0x61c
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	0800ead0 	.word	0x0800ead0
 8004e28:	0800e674 	.word	0x0800e674
 8004e2c:	0800e954 	.word	0x0800e954
 8004e30:	0800ecb0 	.word	0x0800ecb0
 8004e34:	0800e9ec 	.word	0x0800e9ec
 8004e38:	0800ecd8 	.word	0x0800ecd8
 8004e3c:	0800ea54 	.word	0x0800ea54

08004e40 <__M_SEND_ASSERT_MSG>:

static inline void __M_SEND_ASSERT_MSG(const char* const header,
                                const char* const expr_str, const unsigned char expr,
                                const char* const file, const int line,
                                const char* const msg, va_list args)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	71fb      	strb	r3, [r7, #7]
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)

    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b5b      	cmp	r3, #91	; 0x5b
 8004e56:	d175      	bne.n	8004f44 <__M_SEND_ASSERT_MSG+0x104>
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b5d      	cmp	r3, #93	; 0x5d
 8004e60:	d170      	bne.n	8004f44 <__M_SEND_ASSERT_MSG+0x104>

        int assertEna = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
        char* descr = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]

        switch(__M_ASSERT_DATA(msg)) {
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b73      	cmp	r3, #115	; 0x73
 8004e72:	d015      	beq.n	8004ea0 <__M_SEND_ASSERT_MSG+0x60>
 8004e74:	2b73      	cmp	r3, #115	; 0x73
 8004e76:	dc23      	bgt.n	8004ec0 <__M_SEND_ASSERT_MSG+0x80>
 8004e78:	2b65      	cmp	r3, #101	; 0x65
 8004e7a:	d019      	beq.n	8004eb0 <__M_SEND_ASSERT_MSG+0x70>
 8004e7c:	2b65      	cmp	r3, #101	; 0x65
 8004e7e:	dc1f      	bgt.n	8004ec0 <__M_SEND_ASSERT_MSG+0x80>
 8004e80:	2b30      	cmp	r3, #48	; 0x30
 8004e82:	f000 8095 	beq.w	8004fb0 <__M_SEND_ASSERT_MSG+0x170>
 8004e86:	2b64      	cmp	r3, #100	; 0x64
 8004e88:	d11a      	bne.n	8004ec0 <__M_SEND_ASSERT_MSG+0x80>

        case 'd':
            // get library info
            assertEna = va_arg(args, const int);
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	1d1a      	adds	r2, r3, #4
 8004e8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	1d1a      	adds	r2, r3, #4
 8004e98:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	613b      	str	r3, [r7, #16]
            break;
 8004e9e:	e00f      	b.n	8004ec0 <__M_SEND_ASSERT_MSG+0x80>

        case 's':
            // get library info
            assertEna = 1;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	62ba      	str	r2, [r7, #40]	; 0x28
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	613b      	str	r3, [r7, #16]
            break;
 8004eae:	e007      	b.n	8004ec0 <__M_SEND_ASSERT_MSG+0x80>

        case 'e':
            // get library info
            assertEna = va_arg(args, const int);
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	1d1a      	adds	r2, r3, #4
 8004eb4:	62ba      	str	r2, [r7, #40]	; 0x28
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	617b      	str	r3, [r7, #20]
            descr = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
            break;
 8004ebe:	bf00      	nop

        }

#   if !defined(M_MESSAGE_ALWAYS_ENABLE)
        // send message if enabled message
        if(assertEna) {
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d076      	beq.n	8004fb4 <__M_SEND_ASSERT_MSG+0x174>
#   endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) */
            fprintf(stderr, "\n%s\n", header);
 8004ec6:	4b3d      	ldr	r3, [pc, #244]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	493c      	ldr	r1, [pc, #240]	; (8004fc0 <__M_SEND_ASSERT_MSG+0x180>)
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f003 fb11 	bl	80084f8 <fiprintf>
            fprintf(stderr, "Library Name: %s\n", descr);
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4939      	ldr	r1, [pc, #228]	; (8004fc4 <__M_SEND_ASSERT_MSG+0x184>)
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f003 fb09 	bl	80084f8 <fiprintf>
            fprintf(stderr, "Assert failed:\t");
 8004ee6:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	220f      	movs	r2, #15
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4835      	ldr	r0, [pc, #212]	; (8004fc8 <__M_SEND_ASSERT_MSG+0x188>)
 8004ef2:	f003 fbd3 	bl	800869c <fwrite>
            vfprintf(stderr, &msg[3], args);
 8004ef6:	4b31      	ldr	r3, [pc, #196]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68d8      	ldr	r0, [r3, #12]
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	3303      	adds	r3, #3
 8004f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f02:	4619      	mov	r1, r3
 8004f04:	f003 fe90 	bl	8008c28 <vfiprintf>
            fprintf(stderr, "\n");
 8004f08:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	200a      	movs	r0, #10
 8004f12:	f003 fb3b 	bl	800858c <fputc>

#   if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8004f16:	4b29      	ldr	r3, [pc, #164]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68d8      	ldr	r0, [r3, #12]
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	492a      	ldr	r1, [pc, #168]	; (8004fcc <__M_SEND_ASSERT_MSG+0x18c>)
 8004f22:	f003 fae9 	bl	80084f8 <fiprintf>
#   endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#   if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8004f26:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68d8      	ldr	r0, [r3, #12]
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	4927      	ldr	r1, [pc, #156]	; (8004fd0 <__M_SEND_ASSERT_MSG+0x190>)
 8004f32:	f003 fae1 	bl	80084f8 <fiprintf>
#   endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */
            fflush(stderr);
 8004f36:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f003 f9f3 	bl	8008328 <fflush>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004f42:	e037      	b.n	8004fb4 <__M_SEND_ASSERT_MSG+0x174>
        (void)assertEna;
    } else {

#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

        fprintf(stderr, "\n%s\n", header);
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	491c      	ldr	r1, [pc, #112]	; (8004fc0 <__M_SEND_ASSERT_MSG+0x180>)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f003 fad2 	bl	80084f8 <fiprintf>
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
        fprintf(stderr, "Assert failed:\t");
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	220f      	movs	r2, #15
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	481a      	ldr	r0, [pc, #104]	; (8004fc8 <__M_SEND_ASSERT_MSG+0x188>)
 8004f60:	f003 fb9c 	bl	800869c <fwrite>
        vfprintf(stderr, msg, args);
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f003 fe5a 	bl	8008c28 <vfiprintf>
        fprintf(stderr, "\n");
 8004f74:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	200a      	movs	r0, #10
 8004f7e:	f003 fb05 	bl	800858c <fputc>
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

#if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68d8      	ldr	r0, [r3, #12]
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	490f      	ldr	r1, [pc, #60]	; (8004fcc <__M_SEND_ASSERT_MSG+0x18c>)
 8004f8e:	f003 fab3 	bl	80084f8 <fiprintf>
#endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68d8      	ldr	r0, [r3, #12]
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	490c      	ldr	r1, [pc, #48]	; (8004fd0 <__M_SEND_ASSERT_MSG+0x190>)
 8004f9e:	f003 faab 	bl	80084f8 <fiprintf>
#endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */

        fflush(stderr);
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <__M_SEND_ASSERT_MSG+0x17c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f003 f9bd 	bl	8008328 <fflush>
 8004fae:	e002      	b.n	8004fb6 <__M_SEND_ASSERT_MSG+0x176>
            return;
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <__M_SEND_ASSERT_MSG+0x176>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004fb4:	bf00      	nop
    (void)expr;
    (void)file;
    (void)line;
    (void)msg;
    (void)args;
}
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	2000000c 	.word	0x2000000c
 8004fc0:	0800ee28 	.word	0x0800ee28
 8004fc4:	0800ee30 	.word	0x0800ee30
 8004fc8:	0800ee44 	.word	0x0800ee44
 8004fcc:	0800ee54 	.word	0x0800ee54
 8004fd0:	0800ee70 	.word	0x0800ee70

08004fd4 <__M_Error>:

void __M_Error(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af04      	add	r7, sp, #16
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8004fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fe8:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("PROGRAMM EXIT WITH ERROR!!!", expr_str, expr, file, line, msg, args);
 8004fea:	7afa      	ldrb	r2, [r7, #11]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	9302      	str	r3, [sp, #8]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	4803      	ldr	r0, [pc, #12]	; (800500c <__M_Error+0x38>)
 8004ffe:	f7ff ff1f 	bl	8004e40 <__M_SEND_ASSERT_MSG>
    va_end(args);
    //abort(); // exit programm
}
 8005002:	bf00      	nop
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	0800ee88 	.word	0x0800ee88

08005010 <__M_Warning>:

void __M_Warning(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af04      	add	r7, sp, #16
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	460b      	mov	r3, r1
 800501e:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8005020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005024:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("WARNING!!!", expr_str, expr, file, line, msg, args);
 8005026:	7afa      	ldrb	r2, [r7, #11]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	9302      	str	r3, [sp, #8]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	4803      	ldr	r0, [pc, #12]	; (8005048 <__M_Warning+0x38>)
 800503a:	f7ff ff01 	bl	8004e40 <__M_SEND_ASSERT_MSG>
    va_end(args);
}
 800503e:	bf00      	nop
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	0800eea4 	.word	0x0800eea4

0800504c <ping_worker>:
#include <string.h>



void ping_worker(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
	static u8 counte = 0;


	memcpy(outputData, inputData, (*size));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68f9      	ldr	r1, [r7, #12]
 8005062:	68b8      	ldr	r0, [r7, #8]
 8005064:	f003 fb60 	bl	8008728 <memcpy>
	outputData[(*size)] = counte;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4413      	add	r3, r2
 8005070:	4a08      	ldr	r2, [pc, #32]	; (8005094 <ping_worker+0x48>)
 8005072:	7812      	ldrb	r2, [r2, #0]
 8005074:	701a      	strb	r2, [r3, #0]
	++(*size);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	601a      	str	r2, [r3, #0]
	++counte;
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <ping_worker+0x48>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	3301      	adds	r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	4b02      	ldr	r3, [pc, #8]	; (8005094 <ping_worker+0x48>)
 800508a:	701a      	strb	r2, [r3, #0]
	UNUSED(maxOutBufferSize);
	UNUSED(ctx);
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	2000029c 	.word	0x2000029c

08005098 <init_stm32_communicator>:

Communicator_t comm;
extern UART_HandleTypeDef huart1;

int init_stm32_communicator(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
	int state = rawParser_dma_init(&comm.rawparser, 0x1A);
 800509e:	211a      	movs	r1, #26
 80050a0:	4810      	ldr	r0, [pc, #64]	; (80050e4 <init_stm32_communicator+0x4c>)
 80050a2:	f7ff fa67 	bl	8004574 <rawParser_dma_init>
 80050a6:	6078      	str	r0, [r7, #4]
	if(state != D_RAW_P_OK) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <init_stm32_communicator+0x1a>
		return D_RAW_P_ERROR;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e014      	b.n	80050dc <init_stm32_communicator+0x44>
	}

	// init callback manager
	CallbackManager_init(&comm.manager);
 80050b2:	480d      	ldr	r0, [pc, #52]	; (80050e8 <init_stm32_communicator+0x50>)
 80050b4:	f7fc fd44 	bl	8001b40 <CallbackManager_init>
	CallbackManager_addWorker(&comm.manager, 0x00, ping_worker, NULL);
 80050b8:	2300      	movs	r3, #0
 80050ba:	4a0c      	ldr	r2, [pc, #48]	; (80050ec <init_stm32_communicator+0x54>)
 80050bc:	2100      	movs	r1, #0
 80050be:	480a      	ldr	r0, [pc, #40]	; (80050e8 <init_stm32_communicator+0x50>)
 80050c0:	f7fc fd76 	bl	8001bb0 <CallbackManager_addWorker>
	CallbackManager_addWorker(&comm.manager, 0xF0, entityCMD, NULL);
 80050c4:	2300      	movs	r3, #0
 80050c6:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <init_stm32_communicator+0x58>)
 80050c8:	21f0      	movs	r1, #240	; 0xf0
 80050ca:	4807      	ldr	r0, [pc, #28]	; (80050e8 <init_stm32_communicator+0x50>)
 80050cc:	f7fc fd70 	bl	8001bb0 <CallbackManager_addWorker>

	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 80050d0:	2201      	movs	r2, #1
 80050d2:	4908      	ldr	r1, [pc, #32]	; (80050f4 <init_stm32_communicator+0x5c>)
 80050d4:	4808      	ldr	r0, [pc, #32]	; (80050f8 <init_stm32_communicator+0x60>)
 80050d6:	f002 f8a0 	bl	800721a <HAL_UART_Receive_IT>
	return state;
 80050da:	687b      	ldr	r3, [r7, #4]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200002a0 	.word	0x200002a0
 80050e8:	200008d0 	.word	0x200008d0
 80050ec:	0800504d 	.word	0x0800504d
 80050f0:	08001ce1 	.word	0x08001ce1
 80050f4:	20000cd4 	.word	0x20000cd4
 80050f8:	20000248 	.word	0x20000248

080050fc <proceedIncommingMessage>:


void proceedIncommingMessage(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8005102:	2201      	movs	r2, #1
 8005104:	493a      	ldr	r1, [pc, #232]	; (80051f0 <proceedIncommingMessage+0xf4>)
 8005106:	483b      	ldr	r0, [pc, #236]	; (80051f4 <proceedIncommingMessage+0xf8>)
 8005108:	f002 f887 	bl	800721a <HAL_UART_Receive_IT>

	// move to cash--------------------------------------------------------------
	const RawParser_Frame_t* const Rxframe = RawParser_dma_proceed(&comm.rawparser);
 800510c:	483a      	ldr	r0, [pc, #232]	; (80051f8 <proceedIncommingMessage+0xfc>)
 800510e:	f7ff fbad 	bl	800486c <RawParser_dma_proceed>
 8005112:	6178      	str	r0, [r7, #20]
	u8* const input_data 	= Rxframe->data;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	613b      	str	r3, [r7, #16]
	reg input_size 			= Rxframe->size;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	603b      	str	r3, [r7, #0]

//	if(input_size == 0) {
//		return;
//	}

	const boards_t* const board_entry_internal = board_entry;
 8005120:	4b36      	ldr	r3, [pc, #216]	; (80051fc <proceedIncommingMessage+0x100>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]

	const u8 bid 		= input_data[0];
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	72fb      	strb	r3, [r7, #11]
	const u8 cmd_id 	= input_data[1];
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	72bb      	strb	r3, [r7, #10]

	// do logic ------------------------------------------------------------------

	M_Assert_Break(((Rxframe == NULL) || (input_data == NULL) || (board_entry_internal == NULL)), M_EMPTY, return, "proceedIncommingMessage: No valid descriptors");
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <proceedIncommingMessage+0x48>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <proceedIncommingMessage+0x48>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d114      	bne.n	800516e <proceedIncommingMessage+0x72>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <proceedIncommingMessage+0x5a>
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <proceedIncommingMessage+0x5a>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <proceedIncommingMessage+0x5e>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <proceedIncommingMessage+0x60>
 800515a:	2300      	movs	r3, #0
 800515c:	b2d9      	uxtb	r1, r3
 800515e:	4b28      	ldr	r3, [pc, #160]	; (8005200 <proceedIncommingMessage+0x104>)
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2335      	movs	r3, #53	; 0x35
 8005164:	4a27      	ldr	r2, [pc, #156]	; (8005204 <proceedIncommingMessage+0x108>)
 8005166:	4828      	ldr	r0, [pc, #160]	; (8005208 <proceedIncommingMessage+0x10c>)
 8005168:	f7ff ff34 	bl	8004fd4 <__M_Error>
 800516c:	e03c      	b.n	80051e8 <proceedIncommingMessage+0xec>

//	// check input size and board id
	if((input_size < 2U) || (bid != board_entry_internal->boardId)) {
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d936      	bls.n	80051e2 <proceedIncommingMessage+0xe6>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	7afa      	ldrb	r2, [r7, #11]
 800517a:	429a      	cmp	r2, r3
 800517c:	d131      	bne.n	80051e2 <proceedIncommingMessage+0xe6>
		return;
	}

	// call worker
	input_size -= 2;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	3b02      	subs	r3, #2
 8005182:	603b      	str	r3, [r7, #0]
	if(!CallbackManager_proceed(&comm.manager, cmd_id, &input_data[2], &comm.outputData[2], &input_size, (D_RAW_P_TX_BUF_SIZE - 2U))) {
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	7ab9      	ldrb	r1, [r7, #10]
 800518a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	463b      	mov	r3, r7
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <proceedIncommingMessage+0x110>)
 8005196:	481e      	ldr	r0, [pc, #120]	; (8005210 <proceedIncommingMessage+0x114>)
 8005198:	f7fc fd3c 	bl	8001c14 <CallbackManager_proceed>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <proceedIncommingMessage+0xaa>
		input_size = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	603b      	str	r3, [r7, #0]
	}

//	// check if worker want to send packet
	if(input_size == 0) {
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01c      	beq.n	80051e6 <proceedIncommingMessage+0xea>
		return;
	}

	comm.outputData[0] = bid;
 80051ac:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <proceedIncommingMessage+0xfc>)
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	f882 3a35 	strb.w	r3, [r2, #2613]	; 0xa35
	comm.outputData[1] = cmd_id;
 80051b4:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <proceedIncommingMessage+0xfc>)
 80051b6:	7abb      	ldrb	r3, [r7, #10]
 80051b8:	f882 3a36 	strb.w	r3, [r2, #2614]	; 0xa36

	const RawParser_Frame_t* const Txframe = RawParser_dma_shieldFrame(&comm.rawparser, comm.outputData, (input_size + 2));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	3302      	adds	r3, #2
 80051c0:	461a      	mov	r2, r3
 80051c2:	4914      	ldr	r1, [pc, #80]	; (8005214 <proceedIncommingMessage+0x118>)
 80051c4:	480c      	ldr	r0, [pc, #48]	; (80051f8 <proceedIncommingMessage+0xfc>)
 80051c6:	f7ff fbcd 	bl	8004964 <RawParser_dma_shieldFrame>
 80051ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, Txframe->data, Txframe->size, 1000);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051da:	4806      	ldr	r0, [pc, #24]	; (80051f4 <proceedIncommingMessage+0xf8>)
 80051dc:	f001 ff8b 	bl	80070f6 <HAL_UART_Transmit>
 80051e0:	e002      	b.n	80051e8 <proceedIncommingMessage+0xec>
		return;
 80051e2:	bf00      	nop
 80051e4:	e000      	b.n	80051e8 <proceedIncommingMessage+0xec>
		return;
 80051e6:	bf00      	nop
}
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000cd4 	.word	0x20000cd4
 80051f4:	20000248 	.word	0x20000248
 80051f8:	200002a0 	.word	0x200002a0
 80051fc:	2000028c 	.word	0x2000028c
 8005200:	0800f0b4 	.word	0x0800f0b4
 8005204:	0800f03c 	.word	0x0800f03c
 8005208:	0800f064 	.word	0x0800f064
 800520c:	20000cd7 	.word	0x20000cd7
 8005210:	200008d0 	.word	0x200008d0
 8005214:	20000cd5 	.word	0x20000cd5

08005218 <__io_putchar>:
#include "main.h"
#include "stm32_printf.h"

extern UART_HandleTypeDef huart1;
PUTCHAR_PROTOTYPE
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8005220:	1d39      	adds	r1, r7, #4
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	2201      	movs	r2, #1
 8005228:	4803      	ldr	r0, [pc, #12]	; (8005238 <__io_putchar+0x20>)
 800522a:	f001 ff64 	bl	80070f6 <HAL_UART_Transmit>
	return ch;
 800522e:	687b      	ldr	r3, [r7, #4]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000248 	.word	0x20000248

0800523c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <HAL_Init+0x40>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <HAL_Init+0x40>)
 8005246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800524a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_Init+0x40>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_Init+0x40>)
 8005252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_Init+0x40>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a07      	ldr	r2, [pc, #28]	; (800527c <HAL_Init+0x40>)
 800525e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005264:	2003      	movs	r0, #3
 8005266:	f000 f92b 	bl	80054c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800526a:	200f      	movs	r0, #15
 800526c:	f000 f808 	bl	8005280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005270:	f7fb ffa4 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40023c00 	.word	0x40023c00

08005280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005288:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_InitTick+0x54>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <HAL_InitTick+0x58>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005296:	fbb3 f3f1 	udiv	r3, r3, r1
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f943 	bl	800552a <HAL_SYSTICK_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e00e      	b.n	80052cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b0f      	cmp	r3, #15
 80052b2:	d80a      	bhi.n	80052ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052b4:	2200      	movs	r2, #0
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	f000 f90b 	bl	80054d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052c0:	4a06      	ldr	r2, [pc, #24]	; (80052dc <HAL_InitTick+0x5c>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000000 	.word	0x20000000
 80052d8:	20000008 	.word	0x20000008
 80052dc:	20000004 	.word	0x20000004

080052e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_IncTick+0x20>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_IncTick+0x24>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4413      	add	r3, r2
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <HAL_IncTick+0x24>)
 80052f2:	6013      	str	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000008 	.word	0x20000008
 8005304:	20000ed8 	.word	0x20000ed8

08005308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return uwTick;
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <HAL_GetTick+0x14>)
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	4618      	mov	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000ed8 	.word	0x20000ed8

08005320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <__NVIC_SetPriorityGrouping+0x44>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800533c:	4013      	ands	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800534c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005352:	4a04      	ldr	r2, [pc, #16]	; (8005364 <__NVIC_SetPriorityGrouping+0x44>)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	60d3      	str	r3, [r2, #12]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <__NVIC_GetPriorityGrouping+0x18>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	0a1b      	lsrs	r3, r3, #8
 8005372:	f003 0307 	and.w	r3, r3, #7
}
 8005376:	4618      	mov	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800538e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005392:	2b00      	cmp	r3, #0
 8005394:	db0b      	blt.n	80053ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	f003 021f 	and.w	r2, r3, #31
 800539c:	4907      	ldr	r1, [pc, #28]	; (80053bc <__NVIC_EnableIRQ+0x38>)
 800539e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2001      	movs	r0, #1
 80053a6:	fa00 f202 	lsl.w	r2, r0, r2
 80053aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000e100 	.word	0xe000e100

080053c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	6039      	str	r1, [r7, #0]
 80053ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	db0a      	blt.n	80053ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	490c      	ldr	r1, [pc, #48]	; (800540c <__NVIC_SetPriority+0x4c>)
 80053da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053de:	0112      	lsls	r2, r2, #4
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	440b      	add	r3, r1
 80053e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053e8:	e00a      	b.n	8005400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <__NVIC_SetPriority+0x50>)
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	3b04      	subs	r3, #4
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	440b      	add	r3, r1
 80053fe:	761a      	strb	r2, [r3, #24]
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	e000e100 	.word	0xe000e100
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f1c3 0307 	rsb	r3, r3, #7
 800542e:	2b04      	cmp	r3, #4
 8005430:	bf28      	it	cs
 8005432:	2304      	movcs	r3, #4
 8005434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3304      	adds	r3, #4
 800543a:	2b06      	cmp	r3, #6
 800543c:	d902      	bls.n	8005444 <NVIC_EncodePriority+0x30>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	3b03      	subs	r3, #3
 8005442:	e000      	b.n	8005446 <NVIC_EncodePriority+0x32>
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43da      	mvns	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	401a      	ands	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800545c:	f04f 31ff 	mov.w	r1, #4294967295
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	fa01 f303 	lsl.w	r3, r1, r3
 8005466:	43d9      	mvns	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800546c:	4313      	orrs	r3, r2
         );
}
 800546e:	4618      	mov	r0, r3
 8005470:	3724      	adds	r7, #36	; 0x24
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3b01      	subs	r3, #1
 8005488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800548c:	d301      	bcc.n	8005492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800548e:	2301      	movs	r3, #1
 8005490:	e00f      	b.n	80054b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005492:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <SysTick_Config+0x40>)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3b01      	subs	r3, #1
 8005498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800549a:	210f      	movs	r1, #15
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	f7ff ff8e 	bl	80053c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <SysTick_Config+0x40>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054aa:	4b04      	ldr	r3, [pc, #16]	; (80054bc <SysTick_Config+0x40>)
 80054ac:	2207      	movs	r2, #7
 80054ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	e000e010 	.word	0xe000e010

080054c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ff29 	bl	8005320 <__NVIC_SetPriorityGrouping>
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b086      	sub	sp, #24
 80054da:	af00      	add	r7, sp, #0
 80054dc:	4603      	mov	r3, r0
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054e8:	f7ff ff3e 	bl	8005368 <__NVIC_GetPriorityGrouping>
 80054ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	6978      	ldr	r0, [r7, #20]
 80054f4:	f7ff ff8e 	bl	8005414 <NVIC_EncodePriority>
 80054f8:	4602      	mov	r2, r0
 80054fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fe:	4611      	mov	r1, r2
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff5d 	bl	80053c0 <__NVIC_SetPriority>
}
 8005506:	bf00      	nop
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	4603      	mov	r3, r0
 8005516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff ff31 	bl	8005384 <__NVIC_EnableIRQ>
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff ffa2 	bl	800547c <SysTick_Config>
 8005538:	4603      	mov	r3, r0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005550:	f7ff feda 	bl	8005308 <HAL_GetTick>
 8005554:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d008      	beq.n	8005574 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2280      	movs	r2, #128	; 0x80
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e052      	b.n	800561a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0216 	bic.w	r2, r2, #22
 8005582:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005592:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <HAL_DMA_Abort+0x62>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0208 	bic.w	r2, r2, #8
 80055b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c4:	e013      	b.n	80055ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055c6:	f7ff fe9f 	bl	8005308 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b05      	cmp	r3, #5
 80055d2:	d90c      	bls.n	80055ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2203      	movs	r2, #3
 80055de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e015      	b.n	800561a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e4      	bne.n	80055c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	223f      	movs	r2, #63	; 0x3f
 8005602:	409a      	lsls	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d004      	beq.n	8005640 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2280      	movs	r2, #128	; 0x80
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e00c      	b.n	800565a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2205      	movs	r2, #5
 8005644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	e16b      	b.n	800595c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005684:	2201      	movs	r2, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4013      	ands	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	429a      	cmp	r2, r3
 800569e:	f040 815a 	bne.w	8005956 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d005      	beq.n	80056ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d130      	bne.n	800571c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	2203      	movs	r2, #3
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056f0:	2201      	movs	r2, #1
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	43db      	mvns	r3, r3
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	4013      	ands	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 0201 	and.w	r2, r3, #1
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	2b03      	cmp	r3, #3
 8005726:	d017      	beq.n	8005758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	2203      	movs	r2, #3
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4013      	ands	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d123      	bne.n	80057ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	08da      	lsrs	r2, r3, #3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3208      	adds	r2, #8
 800576c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	220f      	movs	r2, #15
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	43db      	mvns	r3, r3
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4013      	ands	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	08da      	lsrs	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3208      	adds	r2, #8
 80057a6:	69b9      	ldr	r1, [r7, #24]
 80057a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	2203      	movs	r2, #3
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 0203 	and.w	r2, r3, #3
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80b4 	beq.w	8005956 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	4b60      	ldr	r3, [pc, #384]	; (8005974 <HAL_GPIO_Init+0x30c>)
 80057f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f6:	4a5f      	ldr	r2, [pc, #380]	; (8005974 <HAL_GPIO_Init+0x30c>)
 80057f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057fc:	6453      	str	r3, [r2, #68]	; 0x44
 80057fe:	4b5d      	ldr	r3, [pc, #372]	; (8005974 <HAL_GPIO_Init+0x30c>)
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800580a:	4a5b      	ldr	r2, [pc, #364]	; (8005978 <HAL_GPIO_Init+0x310>)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	089b      	lsrs	r3, r3, #2
 8005810:	3302      	adds	r3, #2
 8005812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	220f      	movs	r2, #15
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43db      	mvns	r3, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a52      	ldr	r2, [pc, #328]	; (800597c <HAL_GPIO_Init+0x314>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d02b      	beq.n	800588e <HAL_GPIO_Init+0x226>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a51      	ldr	r2, [pc, #324]	; (8005980 <HAL_GPIO_Init+0x318>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d025      	beq.n	800588a <HAL_GPIO_Init+0x222>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a50      	ldr	r2, [pc, #320]	; (8005984 <HAL_GPIO_Init+0x31c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01f      	beq.n	8005886 <HAL_GPIO_Init+0x21e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a4f      	ldr	r2, [pc, #316]	; (8005988 <HAL_GPIO_Init+0x320>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d019      	beq.n	8005882 <HAL_GPIO_Init+0x21a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a4e      	ldr	r2, [pc, #312]	; (800598c <HAL_GPIO_Init+0x324>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <HAL_GPIO_Init+0x216>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a4d      	ldr	r2, [pc, #308]	; (8005990 <HAL_GPIO_Init+0x328>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00d      	beq.n	800587a <HAL_GPIO_Init+0x212>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a4c      	ldr	r2, [pc, #304]	; (8005994 <HAL_GPIO_Init+0x32c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <HAL_GPIO_Init+0x20e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a4b      	ldr	r2, [pc, #300]	; (8005998 <HAL_GPIO_Init+0x330>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d101      	bne.n	8005872 <HAL_GPIO_Init+0x20a>
 800586e:	2307      	movs	r3, #7
 8005870:	e00e      	b.n	8005890 <HAL_GPIO_Init+0x228>
 8005872:	2308      	movs	r3, #8
 8005874:	e00c      	b.n	8005890 <HAL_GPIO_Init+0x228>
 8005876:	2306      	movs	r3, #6
 8005878:	e00a      	b.n	8005890 <HAL_GPIO_Init+0x228>
 800587a:	2305      	movs	r3, #5
 800587c:	e008      	b.n	8005890 <HAL_GPIO_Init+0x228>
 800587e:	2304      	movs	r3, #4
 8005880:	e006      	b.n	8005890 <HAL_GPIO_Init+0x228>
 8005882:	2303      	movs	r3, #3
 8005884:	e004      	b.n	8005890 <HAL_GPIO_Init+0x228>
 8005886:	2302      	movs	r3, #2
 8005888:	e002      	b.n	8005890 <HAL_GPIO_Init+0x228>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <HAL_GPIO_Init+0x228>
 800588e:	2300      	movs	r3, #0
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	f002 0203 	and.w	r2, r2, #3
 8005896:	0092      	lsls	r2, r2, #2
 8005898:	4093      	lsls	r3, r2
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	4313      	orrs	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058a0:	4935      	ldr	r1, [pc, #212]	; (8005978 <HAL_GPIO_Init+0x310>)
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	3302      	adds	r3, #2
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ae:	4b3b      	ldr	r3, [pc, #236]	; (800599c <HAL_GPIO_Init+0x334>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4013      	ands	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058d2:	4a32      	ldr	r2, [pc, #200]	; (800599c <HAL_GPIO_Init+0x334>)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058d8:	4b30      	ldr	r3, [pc, #192]	; (800599c <HAL_GPIO_Init+0x334>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058fc:	4a27      	ldr	r2, [pc, #156]	; (800599c <HAL_GPIO_Init+0x334>)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005902:	4b26      	ldr	r3, [pc, #152]	; (800599c <HAL_GPIO_Init+0x334>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	43db      	mvns	r3, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4013      	ands	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005926:	4a1d      	ldr	r2, [pc, #116]	; (800599c <HAL_GPIO_Init+0x334>)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <HAL_GPIO_Init+0x334>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	43db      	mvns	r3, r3
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	4013      	ands	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005950:	4a12      	ldr	r2, [pc, #72]	; (800599c <HAL_GPIO_Init+0x334>)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	3301      	adds	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b0f      	cmp	r3, #15
 8005960:	f67f ae90 	bls.w	8005684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40023800 	.word	0x40023800
 8005978:	40013800 	.word	0x40013800
 800597c:	40020000 	.word	0x40020000
 8005980:	40020400 	.word	0x40020400
 8005984:	40020800 	.word	0x40020800
 8005988:	40020c00 	.word	0x40020c00
 800598c:	40021000 	.word	0x40021000
 8005990:	40021400 	.word	0x40021400
 8005994:	40021800 	.word	0x40021800
 8005998:	40021c00 	.word	0x40021c00
 800599c:	40013c00 	.word	0x40013c00

080059a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
 80059ac:	4613      	mov	r3, r2
 80059ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059b0:	787b      	ldrb	r3, [r7, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059b6:	887a      	ldrh	r2, [r7, #2]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059bc:	e003      	b.n	80059c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	041a      	lsls	r2, r3, #16
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	619a      	str	r2, [r3, #24]
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e267      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d075      	beq.n	8005ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059f2:	4b88      	ldr	r3, [pc, #544]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d00c      	beq.n	8005a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fe:	4b85      	ldr	r3, [pc, #532]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d112      	bne.n	8005a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a0a:	4b82      	ldr	r3, [pc, #520]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a16:	d10b      	bne.n	8005a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a18:	4b7e      	ldr	r3, [pc, #504]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05b      	beq.n	8005adc <HAL_RCC_OscConfig+0x108>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d157      	bne.n	8005adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e242      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d106      	bne.n	8005a48 <HAL_RCC_OscConfig+0x74>
 8005a3a:	4b76      	ldr	r3, [pc, #472]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a75      	ldr	r2, [pc, #468]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	e01d      	b.n	8005a84 <HAL_RCC_OscConfig+0xb0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a50:	d10c      	bne.n	8005a6c <HAL_RCC_OscConfig+0x98>
 8005a52:	4b70      	ldr	r3, [pc, #448]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a6f      	ldr	r2, [pc, #444]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	4b6d      	ldr	r3, [pc, #436]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a6c      	ldr	r2, [pc, #432]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	e00b      	b.n	8005a84 <HAL_RCC_OscConfig+0xb0>
 8005a6c:	4b69      	ldr	r3, [pc, #420]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a68      	ldr	r2, [pc, #416]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	4b66      	ldr	r3, [pc, #408]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a65      	ldr	r2, [pc, #404]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d013      	beq.n	8005ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8c:	f7ff fc3c 	bl	8005308 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a94:	f7ff fc38 	bl	8005308 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b64      	cmp	r3, #100	; 0x64
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e207      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa6:	4b5b      	ldr	r3, [pc, #364]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCC_OscConfig+0xc0>
 8005ab2:	e014      	b.n	8005ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab4:	f7ff fc28 	bl	8005308 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005abc:	f7ff fc24 	bl	8005308 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e1f3      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ace:	4b51      	ldr	r3, [pc, #324]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <HAL_RCC_OscConfig+0xe8>
 8005ada:	e000      	b.n	8005ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d063      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aea:	4b4a      	ldr	r3, [pc, #296]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af6:	4b47      	ldr	r3, [pc, #284]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d11c      	bne.n	8005b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b02:	4b44      	ldr	r3, [pc, #272]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d116      	bne.n	8005b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0e:	4b41      	ldr	r3, [pc, #260]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <HAL_RCC_OscConfig+0x152>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d001      	beq.n	8005b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e1c7      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b26:	4b3b      	ldr	r3, [pc, #236]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4937      	ldr	r1, [pc, #220]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3a:	e03a      	b.n	8005bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d020      	beq.n	8005b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b44:	4b34      	ldr	r3, [pc, #208]	; (8005c18 <HAL_RCC_OscConfig+0x244>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7ff fbdd 	bl	8005308 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b52:	f7ff fbd9 	bl	8005308 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e1a8      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b64:	4b2b      	ldr	r3, [pc, #172]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0f0      	beq.n	8005b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4925      	ldr	r1, [pc, #148]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]
 8005b84:	e015      	b.n	8005bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b86:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <HAL_RCC_OscConfig+0x244>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7ff fbbc 	bl	8005308 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b94:	f7ff fbb8 	bl	8005308 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e187      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba6:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d036      	beq.n	8005c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d016      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <HAL_RCC_OscConfig+0x248>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7ff fb9c 	bl	8005308 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd4:	f7ff fb98 	bl	8005308 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e167      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <HAL_RCC_OscConfig+0x240>)
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x200>
 8005bf2:	e01b      	b.n	8005c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCC_OscConfig+0x248>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfa:	f7ff fb85 	bl	8005308 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c00:	e00e      	b.n	8005c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c02:	f7ff fb81 	bl	8005308 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d907      	bls.n	8005c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e150      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
 8005c14:	40023800 	.word	0x40023800
 8005c18:	42470000 	.word	0x42470000
 8005c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c20:	4b88      	ldr	r3, [pc, #544]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1ea      	bne.n	8005c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8097 	beq.w	8005d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3e:	4b81      	ldr	r3, [pc, #516]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10f      	bne.n	8005c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	4b7d      	ldr	r3, [pc, #500]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	4a7c      	ldr	r2, [pc, #496]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c58:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5a:	4b7a      	ldr	r3, [pc, #488]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c62:	60bb      	str	r3, [r7, #8]
 8005c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6a:	4b77      	ldr	r3, [pc, #476]	; (8005e48 <HAL_RCC_OscConfig+0x474>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d118      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c76:	4b74      	ldr	r3, [pc, #464]	; (8005e48 <HAL_RCC_OscConfig+0x474>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a73      	ldr	r2, [pc, #460]	; (8005e48 <HAL_RCC_OscConfig+0x474>)
 8005c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c82:	f7ff fb41 	bl	8005308 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8a:	f7ff fb3d 	bl	8005308 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e10c      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9c:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <HAL_RCC_OscConfig+0x474>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d106      	bne.n	8005cbe <HAL_RCC_OscConfig+0x2ea>
 8005cb0:	4b64      	ldr	r3, [pc, #400]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	4a63      	ldr	r2, [pc, #396]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbc:	e01c      	b.n	8005cf8 <HAL_RCC_OscConfig+0x324>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x30c>
 8005cc6:	4b5f      	ldr	r3, [pc, #380]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	4a5e      	ldr	r2, [pc, #376]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	f043 0304 	orr.w	r3, r3, #4
 8005cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd2:	4b5c      	ldr	r3, [pc, #368]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	4a5b      	ldr	r2, [pc, #364]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cde:	e00b      	b.n	8005cf8 <HAL_RCC_OscConfig+0x324>
 8005ce0:	4b58      	ldr	r3, [pc, #352]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	4a57      	ldr	r2, [pc, #348]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	6713      	str	r3, [r2, #112]	; 0x70
 8005cec:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	4a54      	ldr	r2, [pc, #336]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	f023 0304 	bic.w	r3, r3, #4
 8005cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d00:	f7ff fb02 	bl	8005308 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d08:	f7ff fafe 	bl	8005308 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e0cb      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1e:	4b49      	ldr	r3, [pc, #292]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0ee      	beq.n	8005d08 <HAL_RCC_OscConfig+0x334>
 8005d2a:	e014      	b.n	8005d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d2c:	f7ff faec 	bl	8005308 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d32:	e00a      	b.n	8005d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d34:	f7ff fae8 	bl	8005308 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e0b5      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d4a:	4b3e      	ldr	r3, [pc, #248]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ee      	bne.n	8005d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d105      	bne.n	8005d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5c:	4b39      	ldr	r3, [pc, #228]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	4a38      	ldr	r2, [pc, #224]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80a1 	beq.w	8005eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d72:	4b34      	ldr	r3, [pc, #208]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d05c      	beq.n	8005e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d141      	bne.n	8005e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d86:	4b31      	ldr	r3, [pc, #196]	; (8005e4c <HAL_RCC_OscConfig+0x478>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8c:	f7ff fabc 	bl	8005308 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d94:	f7ff fab8 	bl	8005308 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e087      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da6:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f0      	bne.n	8005d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69da      	ldr	r2, [r3, #28]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	019b      	lsls	r3, r3, #6
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	061b      	lsls	r3, r3, #24
 8005dd6:	491b      	ldr	r1, [pc, #108]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ddc:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <HAL_RCC_OscConfig+0x478>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de2:	f7ff fa91 	bl	8005308 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dea:	f7ff fa8d 	bl	8005308 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e05c      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfc:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <HAL_RCC_OscConfig+0x416>
 8005e08:	e054      	b.n	8005eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0a:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <HAL_RCC_OscConfig+0x478>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e10:	f7ff fa7a 	bl	8005308 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e18:	f7ff fa76 	bl	8005308 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e045      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_RCC_OscConfig+0x470>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0x444>
 8005e36:	e03d      	b.n	8005eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d107      	bne.n	8005e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e038      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
 8005e44:	40023800 	.word	0x40023800
 8005e48:	40007000 	.word	0x40007000
 8005e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e50:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <HAL_RCC_OscConfig+0x4ec>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d028      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d121      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d11a      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e80:	4013      	ands	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d111      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d001      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40023800 	.word	0x40023800

08005ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e0cc      	b.n	8006072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed8:	4b68      	ldr	r3, [pc, #416]	; (800607c <HAL_RCC_ClockConfig+0x1b8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d90c      	bls.n	8005f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee6:	4b65      	ldr	r3, [pc, #404]	; (800607c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eee:	4b63      	ldr	r3, [pc, #396]	; (800607c <HAL_RCC_ClockConfig+0x1b8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e0b8      	b.n	8006072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d020      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f18:	4b59      	ldr	r3, [pc, #356]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	4a58      	ldr	r2, [pc, #352]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f30:	4b53      	ldr	r3, [pc, #332]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4a52      	ldr	r2, [pc, #328]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f3c:	4b50      	ldr	r3, [pc, #320]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	494d      	ldr	r1, [pc, #308]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d044      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d107      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f62:	4b47      	ldr	r3, [pc, #284]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d119      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e07f      	b.n	8006072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d003      	beq.n	8005f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d107      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f82:	4b3f      	ldr	r3, [pc, #252]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e06f      	b.n	8006072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f92:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e067      	b.n	8006072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fa2:	4b37      	ldr	r3, [pc, #220]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f023 0203 	bic.w	r2, r3, #3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	4934      	ldr	r1, [pc, #208]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fb4:	f7ff f9a8 	bl	8005308 <HAL_GetTick>
 8005fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fba:	e00a      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fbc:	f7ff f9a4 	bl	8005308 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e04f      	b.n	8006072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	4b2b      	ldr	r3, [pc, #172]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 020c 	and.w	r2, r3, #12
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d1eb      	bne.n	8005fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe4:	4b25      	ldr	r3, [pc, #148]	; (800607c <HAL_RCC_ClockConfig+0x1b8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d20c      	bcs.n	800600c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff2:	4b22      	ldr	r3, [pc, #136]	; (800607c <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <HAL_RCC_ClockConfig+0x1b8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d001      	beq.n	800600c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e032      	b.n	8006072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006018:	4b19      	ldr	r3, [pc, #100]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	4916      	ldr	r1, [pc, #88]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	490e      	ldr	r1, [pc, #56]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800604a:	f000 f82d 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 800604e:	4602      	mov	r2, r0
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <HAL_RCC_ClockConfig+0x1bc>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	490a      	ldr	r1, [pc, #40]	; (8006084 <HAL_RCC_ClockConfig+0x1c0>)
 800605c:	5ccb      	ldrb	r3, [r1, r3]
 800605e:	fa22 f303 	lsr.w	r3, r2, r3
 8006062:	4a09      	ldr	r2, [pc, #36]	; (8006088 <HAL_RCC_ClockConfig+0x1c4>)
 8006064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006066:	4b09      	ldr	r3, [pc, #36]	; (800608c <HAL_RCC_ClockConfig+0x1c8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff f908 	bl	8005280 <HAL_InitTick>

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40023c00 	.word	0x40023c00
 8006080:	40023800 	.word	0x40023800
 8006084:	0800f0e4 	.word	0x0800f0e4
 8006088:	20000000 	.word	0x20000000
 800608c:	20000004 	.word	0x20000004

08006090 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006094:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <HAL_RCC_EnableCSS+0x14>)
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	4247004c 	.word	0x4247004c

080060a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ac:	b094      	sub	sp, #80	; 0x50
 80060ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	647b      	str	r3, [r7, #68]	; 0x44
 80060b4:	2300      	movs	r3, #0
 80060b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b8:	2300      	movs	r3, #0
 80060ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060c0:	4b79      	ldr	r3, [pc, #484]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d00d      	beq.n	80060e8 <HAL_RCC_GetSysClockFreq+0x40>
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	f200 80e1 	bhi.w	8006294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_RCC_GetSysClockFreq+0x34>
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d003      	beq.n	80060e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80060da:	e0db      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060dc:	4b73      	ldr	r3, [pc, #460]	; (80062ac <HAL_RCC_GetSysClockFreq+0x204>)
 80060de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80060e0:	e0db      	b.n	800629a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060e2:	4b72      	ldr	r3, [pc, #456]	; (80062ac <HAL_RCC_GetSysClockFreq+0x204>)
 80060e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060e6:	e0d8      	b.n	800629a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060e8:	4b6f      	ldr	r3, [pc, #444]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060f2:	4b6d      	ldr	r3, [pc, #436]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d063      	beq.n	80061c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fe:	4b6a      	ldr	r3, [pc, #424]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	099b      	lsrs	r3, r3, #6
 8006104:	2200      	movs	r2, #0
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
 8006108:	63fa      	str	r2, [r7, #60]	; 0x3c
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800611a:	4622      	mov	r2, r4
 800611c:	462b      	mov	r3, r5
 800611e:	f04f 0000 	mov.w	r0, #0
 8006122:	f04f 0100 	mov.w	r1, #0
 8006126:	0159      	lsls	r1, r3, #5
 8006128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800612c:	0150      	lsls	r0, r2, #5
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4621      	mov	r1, r4
 8006134:	1a51      	subs	r1, r2, r1
 8006136:	6139      	str	r1, [r7, #16]
 8006138:	4629      	mov	r1, r5
 800613a:	eb63 0301 	sbc.w	r3, r3, r1
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800614c:	4659      	mov	r1, fp
 800614e:	018b      	lsls	r3, r1, #6
 8006150:	4651      	mov	r1, sl
 8006152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006156:	4651      	mov	r1, sl
 8006158:	018a      	lsls	r2, r1, #6
 800615a:	4651      	mov	r1, sl
 800615c:	ebb2 0801 	subs.w	r8, r2, r1
 8006160:	4659      	mov	r1, fp
 8006162:	eb63 0901 	sbc.w	r9, r3, r1
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800617a:	4690      	mov	r8, r2
 800617c:	4699      	mov	r9, r3
 800617e:	4623      	mov	r3, r4
 8006180:	eb18 0303 	adds.w	r3, r8, r3
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	462b      	mov	r3, r5
 8006188:	eb49 0303 	adc.w	r3, r9, r3
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800619a:	4629      	mov	r1, r5
 800619c:	028b      	lsls	r3, r1, #10
 800619e:	4621      	mov	r1, r4
 80061a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061a4:	4621      	mov	r1, r4
 80061a6:	028a      	lsls	r2, r1, #10
 80061a8:	4610      	mov	r0, r2
 80061aa:	4619      	mov	r1, r3
 80061ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ae:	2200      	movs	r2, #0
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061b8:	f7fa fd66 	bl	8000c88 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4613      	mov	r3, r2
 80061c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c4:	e058      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c6:	4b38      	ldr	r3, [pc, #224]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	099b      	lsrs	r3, r3, #6
 80061cc:	2200      	movs	r2, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	4611      	mov	r1, r2
 80061d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	2300      	movs	r3, #0
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
 80061dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	f04f 0000 	mov.w	r0, #0
 80061e8:	f04f 0100 	mov.w	r1, #0
 80061ec:	0159      	lsls	r1, r3, #5
 80061ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061f2:	0150      	lsls	r0, r2, #5
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4641      	mov	r1, r8
 80061fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80061fe:	4649      	mov	r1, r9
 8006200:	eb63 0b01 	sbc.w	fp, r3, r1
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006218:	ebb2 040a 	subs.w	r4, r2, sl
 800621c:	eb63 050b 	sbc.w	r5, r3, fp
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	00eb      	lsls	r3, r5, #3
 800622a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800622e:	00e2      	lsls	r2, r4, #3
 8006230:	4614      	mov	r4, r2
 8006232:	461d      	mov	r5, r3
 8006234:	4643      	mov	r3, r8
 8006236:	18e3      	adds	r3, r4, r3
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	464b      	mov	r3, r9
 800623c:	eb45 0303 	adc.w	r3, r5, r3
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800624e:	4629      	mov	r1, r5
 8006250:	028b      	lsls	r3, r1, #10
 8006252:	4621      	mov	r1, r4
 8006254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006258:	4621      	mov	r1, r4
 800625a:	028a      	lsls	r2, r1, #10
 800625c:	4610      	mov	r0, r2
 800625e:	4619      	mov	r1, r3
 8006260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006262:	2200      	movs	r2, #0
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	61fa      	str	r2, [r7, #28]
 8006268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800626c:	f7fa fd0c 	bl	8000c88 <__aeabi_uldivmod>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4613      	mov	r3, r2
 8006276:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	3301      	adds	r3, #1
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006292:	e002      	b.n	800629a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006296:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800629a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800629c:	4618      	mov	r0, r3
 800629e:	3750      	adds	r7, #80	; 0x50
 80062a0:	46bd      	mov	sp, r7
 80062a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062a6:	bf00      	nop
 80062a8:	40023800 	.word	0x40023800
 80062ac:	00f42400 	.word	0x00f42400

080062b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062b4:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062b6:	681b      	ldr	r3, [r3, #0]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000000 	.word	0x20000000

080062c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062cc:	f7ff fff0 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 80062d0:	4602      	mov	r2, r0
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	0a9b      	lsrs	r3, r3, #10
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	4903      	ldr	r1, [pc, #12]	; (80062ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80062de:	5ccb      	ldrb	r3, [r1, r3]
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40023800 	.word	0x40023800
 80062ec:	0800f0f4 	.word	0x0800f0f4

080062f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062f4:	f7ff ffdc 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 80062f8:	4602      	mov	r2, r0
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	0b5b      	lsrs	r3, r3, #13
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	4903      	ldr	r1, [pc, #12]	; (8006314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006306:	5ccb      	ldrb	r3, [r1, r3]
 8006308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800630c:	4618      	mov	r0, r3
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40023800 	.word	0x40023800
 8006314:	0800f0f4 	.word	0x0800f0f4

08006318 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <HAL_RCC_NMI_IRQHandler+0x20>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	2b80      	cmp	r3, #128	; 0x80
 8006326:	d104      	bne.n	8006332 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006328:	f000 f80a 	bl	8006340 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800632c:	4b03      	ldr	r3, [pc, #12]	; (800633c <HAL_RCC_NMI_IRQHandler+0x24>)
 800632e:	2280      	movs	r2, #128	; 0x80
 8006330:	701a      	strb	r2, [r3, #0]
  }
}
 8006332:	bf00      	nop
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40023800 	.word	0x40023800
 800633c:	4002380e 	.word	0x4002380e

08006340 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e041      	b.n	80063e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d106      	bne.n	800637a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fb f8cf 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f000 fad9 	bl	8006944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e041      	b.n	8006482 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f839 	bl	800648a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f000 fa8a 	bl	8006944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <HAL_TIM_PWM_Start+0x24>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	bf14      	ite	ne
 80064bc:	2301      	movne	r3, #1
 80064be:	2300      	moveq	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	e022      	b.n	800650a <HAL_TIM_PWM_Start+0x6a>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d109      	bne.n	80064de <HAL_TIM_PWM_Start+0x3e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e015      	b.n	800650a <HAL_TIM_PWM_Start+0x6a>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d109      	bne.n	80064f8 <HAL_TIM_PWM_Start+0x58>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	e008      	b.n	800650a <HAL_TIM_PWM_Start+0x6a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e07c      	b.n	800660c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <HAL_TIM_PWM_Start+0x82>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006520:	e013      	b.n	800654a <HAL_TIM_PWM_Start+0xaa>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b04      	cmp	r3, #4
 8006526:	d104      	bne.n	8006532 <HAL_TIM_PWM_Start+0x92>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006530:	e00b      	b.n	800654a <HAL_TIM_PWM_Start+0xaa>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b08      	cmp	r3, #8
 8006536:	d104      	bne.n	8006542 <HAL_TIM_PWM_Start+0xa2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006540:	e003      	b.n	800654a <HAL_TIM_PWM_Start+0xaa>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2201      	movs	r2, #1
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fce0 	bl	8006f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2d      	ldr	r2, [pc, #180]	; (8006614 <HAL_TIM_PWM_Start+0x174>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <HAL_TIM_PWM_Start+0xcc>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a2c      	ldr	r2, [pc, #176]	; (8006618 <HAL_TIM_PWM_Start+0x178>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d101      	bne.n	8006570 <HAL_TIM_PWM_Start+0xd0>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <HAL_TIM_PWM_Start+0xd2>
 8006570:	2300      	movs	r3, #0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d007      	beq.n	8006586 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006584:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a22      	ldr	r2, [pc, #136]	; (8006614 <HAL_TIM_PWM_Start+0x174>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <HAL_TIM_PWM_Start+0x136>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006598:	d01d      	beq.n	80065d6 <HAL_TIM_PWM_Start+0x136>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1f      	ldr	r2, [pc, #124]	; (800661c <HAL_TIM_PWM_Start+0x17c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <HAL_TIM_PWM_Start+0x136>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1d      	ldr	r2, [pc, #116]	; (8006620 <HAL_TIM_PWM_Start+0x180>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_TIM_PWM_Start+0x136>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1c      	ldr	r2, [pc, #112]	; (8006624 <HAL_TIM_PWM_Start+0x184>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_TIM_PWM_Start+0x136>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a16      	ldr	r2, [pc, #88]	; (8006618 <HAL_TIM_PWM_Start+0x178>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_TIM_PWM_Start+0x136>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a18      	ldr	r2, [pc, #96]	; (8006628 <HAL_TIM_PWM_Start+0x188>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_TIM_PWM_Start+0x136>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a16      	ldr	r2, [pc, #88]	; (800662c <HAL_TIM_PWM_Start+0x18c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d111      	bne.n	80065fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	d010      	beq.n	800660a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	e007      	b.n	800660a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40010000 	.word	0x40010000
 8006618:	40010400 	.word	0x40010400
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40014000 	.word	0x40014000
 800662c:	40001800 	.word	0x40001800

08006630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800664a:	2302      	movs	r3, #2
 800664c:	e0ae      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	f200 809f 	bhi.w	800679c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006699 	.word	0x08006699
 8006668:	0800679d 	.word	0x0800679d
 800666c:	0800679d 	.word	0x0800679d
 8006670:	0800679d 	.word	0x0800679d
 8006674:	080066d9 	.word	0x080066d9
 8006678:	0800679d 	.word	0x0800679d
 800667c:	0800679d 	.word	0x0800679d
 8006680:	0800679d 	.word	0x0800679d
 8006684:	0800671b 	.word	0x0800671b
 8006688:	0800679d 	.word	0x0800679d
 800668c:	0800679d 	.word	0x0800679d
 8006690:	0800679d 	.word	0x0800679d
 8006694:	0800675b 	.word	0x0800675b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 f9f0 	bl	8006a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0208 	orr.w	r2, r2, #8
 80066b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0204 	bic.w	r2, r2, #4
 80066c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6999      	ldr	r1, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	619a      	str	r2, [r3, #24]
      break;
 80066d6:	e064      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fa40 	bl	8006b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	021a      	lsls	r2, r3, #8
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	619a      	str	r2, [r3, #24]
      break;
 8006718:	e043      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fa95 	bl	8006c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0208 	orr.w	r2, r2, #8
 8006734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0204 	bic.w	r2, r2, #4
 8006744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	61da      	str	r2, [r3, #28]
      break;
 8006758:	e023      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fae9 	bl	8006d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	021a      	lsls	r2, r3, #8
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	61da      	str	r2, [r3, #28]
      break;
 800679a:	e002      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	75fb      	strb	r3, [r7, #23]
      break;
 80067a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_TIM_ConfigClockSource+0x1c>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e0b4      	b.n	800693a <HAL_TIM_ConfigClockSource+0x186>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006808:	d03e      	beq.n	8006888 <HAL_TIM_ConfigClockSource+0xd4>
 800680a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680e:	f200 8087 	bhi.w	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	f000 8086 	beq.w	8006926 <HAL_TIM_ConfigClockSource+0x172>
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681e:	d87f      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006820:	2b70      	cmp	r3, #112	; 0x70
 8006822:	d01a      	beq.n	800685a <HAL_TIM_ConfigClockSource+0xa6>
 8006824:	2b70      	cmp	r3, #112	; 0x70
 8006826:	d87b      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006828:	2b60      	cmp	r3, #96	; 0x60
 800682a:	d050      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x11a>
 800682c:	2b60      	cmp	r3, #96	; 0x60
 800682e:	d877      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006830:	2b50      	cmp	r3, #80	; 0x50
 8006832:	d03c      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0xfa>
 8006834:	2b50      	cmp	r3, #80	; 0x50
 8006836:	d873      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006838:	2b40      	cmp	r3, #64	; 0x40
 800683a:	d058      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x13a>
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d86f      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006840:	2b30      	cmp	r3, #48	; 0x30
 8006842:	d064      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x15a>
 8006844:	2b30      	cmp	r3, #48	; 0x30
 8006846:	d86b      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006848:	2b20      	cmp	r3, #32
 800684a:	d060      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x15a>
 800684c:	2b20      	cmp	r3, #32
 800684e:	d867      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006850:	2b00      	cmp	r3, #0
 8006852:	d05c      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x15a>
 8006854:	2b10      	cmp	r3, #16
 8006856:	d05a      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x15a>
 8006858:	e062      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6899      	ldr	r1, [r3, #8]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f000 fb35 	bl	8006ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800687c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	609a      	str	r2, [r3, #8]
      break;
 8006886:	e04f      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	6899      	ldr	r1, [r3, #8]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f000 fb1e 	bl	8006ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068aa:	609a      	str	r2, [r3, #8]
      break;
 80068ac:	e03c      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6859      	ldr	r1, [r3, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f000 fa92 	bl	8006de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2150      	movs	r1, #80	; 0x50
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 faeb 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 80068cc:	e02c      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6859      	ldr	r1, [r3, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	461a      	mov	r2, r3
 80068dc:	f000 fab1 	bl	8006e42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2160      	movs	r1, #96	; 0x60
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fadb 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 80068ec:	e01c      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6859      	ldr	r1, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f000 fa72 	bl	8006de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2140      	movs	r1, #64	; 0x40
 8006906:	4618      	mov	r0, r3
 8006908:	f000 facb 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 800690c:	e00c      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f000 fac2 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 800691e:	e003      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
      break;
 8006924:	e000      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006938:	7bfb      	ldrb	r3, [r7, #15]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a40      	ldr	r2, [pc, #256]	; (8006a58 <TIM_Base_SetConfig+0x114>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d00f      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a3d      	ldr	r2, [pc, #244]	; (8006a5c <TIM_Base_SetConfig+0x118>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00b      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a3c      	ldr	r2, [pc, #240]	; (8006a60 <TIM_Base_SetConfig+0x11c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a3b      	ldr	r2, [pc, #236]	; (8006a64 <TIM_Base_SetConfig+0x120>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0x40>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a3a      	ldr	r2, [pc, #232]	; (8006a68 <TIM_Base_SetConfig+0x124>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d108      	bne.n	8006996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <TIM_Base_SetConfig+0x114>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d02b      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d027      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a2c      	ldr	r2, [pc, #176]	; (8006a5c <TIM_Base_SetConfig+0x118>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d023      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a2b      	ldr	r2, [pc, #172]	; (8006a60 <TIM_Base_SetConfig+0x11c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d01f      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2a      	ldr	r2, [pc, #168]	; (8006a64 <TIM_Base_SetConfig+0x120>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01b      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a29      	ldr	r2, [pc, #164]	; (8006a68 <TIM_Base_SetConfig+0x124>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d017      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a28      	ldr	r2, [pc, #160]	; (8006a6c <TIM_Base_SetConfig+0x128>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a27      	ldr	r2, [pc, #156]	; (8006a70 <TIM_Base_SetConfig+0x12c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00f      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a26      	ldr	r2, [pc, #152]	; (8006a74 <TIM_Base_SetConfig+0x130>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00b      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a25      	ldr	r2, [pc, #148]	; (8006a78 <TIM_Base_SetConfig+0x134>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d007      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a24      	ldr	r2, [pc, #144]	; (8006a7c <TIM_Base_SetConfig+0x138>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d003      	beq.n	80069f6 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a23      	ldr	r2, [pc, #140]	; (8006a80 <TIM_Base_SetConfig+0x13c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d108      	bne.n	8006a08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a0a      	ldr	r2, [pc, #40]	; (8006a58 <TIM_Base_SetConfig+0x114>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_Base_SetConfig+0xf8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a0c      	ldr	r2, [pc, #48]	; (8006a68 <TIM_Base_SetConfig+0x124>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d103      	bne.n	8006a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	615a      	str	r2, [r3, #20]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40010400 	.word	0x40010400
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40014400 	.word	0x40014400
 8006a74:	40014800 	.word	0x40014800
 8006a78:	40001800 	.word	0x40001800
 8006a7c:	40001c00 	.word	0x40001c00
 8006a80:	40002000 	.word	0x40002000

08006a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f023 0201 	bic.w	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f023 0302 	bic.w	r3, r3, #2
 8006acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a20      	ldr	r2, [pc, #128]	; (8006b5c <TIM_OC1_SetConfig+0xd8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC1_SetConfig+0x64>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a1f      	ldr	r2, [pc, #124]	; (8006b60 <TIM_OC1_SetConfig+0xdc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10c      	bne.n	8006b02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0308 	bic.w	r3, r3, #8
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 0304 	bic.w	r3, r3, #4
 8006b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a15      	ldr	r2, [pc, #84]	; (8006b5c <TIM_OC1_SetConfig+0xd8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d003      	beq.n	8006b12 <TIM_OC1_SetConfig+0x8e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a14      	ldr	r2, [pc, #80]	; (8006b60 <TIM_OC1_SetConfig+0xdc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d111      	bne.n	8006b36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40010400 	.word	0x40010400

08006b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0210 	bic.w	r2, r3, #16
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0320 	bic.w	r3, r3, #32
 8006bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a22      	ldr	r2, [pc, #136]	; (8006c48 <TIM_OC2_SetConfig+0xe4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_OC2_SetConfig+0x68>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a21      	ldr	r2, [pc, #132]	; (8006c4c <TIM_OC2_SetConfig+0xe8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d10d      	bne.n	8006be8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <TIM_OC2_SetConfig+0xe4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <TIM_OC2_SetConfig+0x94>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a16      	ldr	r2, [pc, #88]	; (8006c4c <TIM_OC2_SetConfig+0xe8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d113      	bne.n	8006c20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40010400 	.word	0x40010400

08006c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a21      	ldr	r2, [pc, #132]	; (8006d30 <TIM_OC3_SetConfig+0xe0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x66>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a20      	ldr	r2, [pc, #128]	; (8006d34 <TIM_OC3_SetConfig+0xe4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d10d      	bne.n	8006cd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a16      	ldr	r2, [pc, #88]	; (8006d30 <TIM_OC3_SetConfig+0xe0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_OC3_SetConfig+0x92>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <TIM_OC3_SetConfig+0xe4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d113      	bne.n	8006d0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	621a      	str	r2, [r3, #32]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40010400 	.word	0x40010400

08006d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	031b      	lsls	r3, r3, #12
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a12      	ldr	r2, [pc, #72]	; (8006ddc <TIM_OC4_SetConfig+0xa4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_OC4_SetConfig+0x68>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a11      	ldr	r2, [pc, #68]	; (8006de0 <TIM_OC4_SetConfig+0xa8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d109      	bne.n	8006db4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	019b      	lsls	r3, r3, #6
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	40010000 	.word	0x40010000
 8006de0:	40010400 	.word	0x40010400

08006de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 030a 	bic.w	r3, r3, #10
 8006e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0210 	bic.w	r2, r3, #16
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	031b      	lsls	r3, r3, #12
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f043 0307 	orr.w	r3, r3, #7
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	021a      	lsls	r2, r3, #8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	609a      	str	r2, [r3, #8]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	401a      	ands	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a1a      	ldr	r2, [r3, #32]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e05a      	b.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a21      	ldr	r2, [pc, #132]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d022      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc8:	d01d      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d018      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1b      	ldr	r2, [pc, #108]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1a      	ldr	r2, [pc, #104]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00e      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a18      	ldr	r2, [pc, #96]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a17      	ldr	r2, [pc, #92]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a15      	ldr	r2, [pc, #84]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10c      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	4313      	orrs	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40010000 	.word	0x40010000
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40010400 	.word	0x40010400
 8007054:	40014000 	.word	0x40014000
 8007058:	40001800 	.word	0x40001800

0800705c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e03f      	b.n	80070ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fa face 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2224      	movs	r2, #36	; 0x24
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800709e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fddf 	bl	8007c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b08a      	sub	sp, #40	; 0x28
 80070fa:	af02      	add	r7, sp, #8
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b20      	cmp	r3, #32
 8007114:	d17c      	bne.n	8007210 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_UART_Transmit+0x2c>
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e075      	b.n	8007212 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_UART_Transmit+0x3e>
 8007130:	2302      	movs	r3, #2
 8007132:	e06e      	b.n	8007212 <HAL_UART_Transmit+0x11c>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2221      	movs	r2, #33	; 0x21
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800714a:	f7fe f8dd 	bl	8005308 <HAL_GetTick>
 800714e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	88fa      	ldrh	r2, [r7, #6]
 800715a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007164:	d108      	bne.n	8007178 <HAL_UART_Transmit+0x82>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d104      	bne.n	8007178 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	e003      	b.n	8007180 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800717c:	2300      	movs	r3, #0
 800717e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007188:	e02a      	b.n	80071e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	2180      	movs	r1, #128	; 0x80
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fb1f 	bl	80077d8 <UART_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e036      	b.n	8007212 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10b      	bne.n	80071c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	3302      	adds	r3, #2
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	e007      	b.n	80071d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	781a      	ldrb	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	3301      	adds	r3, #1
 80071d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1cf      	bne.n	800718a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2200      	movs	r2, #0
 80071f2:	2140      	movs	r1, #64	; 0x40
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 faef 	bl	80077d8 <UART_WaitOnFlagUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e006      	b.n	8007212 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	e000      	b.n	8007212 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007210:	2302      	movs	r3, #2
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	4613      	mov	r3, r2
 8007226:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b20      	cmp	r3, #32
 8007232:	d11d      	bne.n	8007270 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_UART_Receive_IT+0x26>
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e016      	b.n	8007272 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_UART_Receive_IT+0x38>
 800724e:	2302      	movs	r3, #2
 8007250:	e00f      	b.n	8007272 <HAL_UART_Receive_IT+0x58>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	461a      	mov	r2, r3
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fb24 	bl	80078b4 <UART_Start_Receive_IT>
 800726c:	4603      	mov	r3, r0
 800726e:	e000      	b.n	8007272 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007270:	2302      	movs	r3, #2
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b0ba      	sub	sp, #232	; 0xe8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10f      	bne.n	80072e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_UART_IRQHandler+0x66>
 80072ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fc07 	bl	8007aee <UART_Receive_IT>
      return;
 80072e0:	e256      	b.n	8007790 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80de 	beq.w	80074a8 <HAL_UART_IRQHandler+0x22c>
 80072ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 80d1 	beq.w	80074a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00b      	beq.n	800732a <HAL_UART_IRQHandler+0xae>
 8007312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f043 0201 	orr.w	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800732a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <HAL_UART_IRQHandler+0xd2>
 8007336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f043 0202 	orr.w	r2, r3, #2
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <HAL_UART_IRQHandler+0xf6>
 800735a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f043 0204 	orr.w	r2, r3, #4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d011      	beq.n	80073a2 <HAL_UART_IRQHandler+0x126>
 800737e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d105      	bne.n	8007396 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800738a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f043 0208 	orr.w	r2, r3, #8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 81ed 	beq.w	8007786 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_UART_IRQHandler+0x14e>
 80073b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fb92 	bl	8007aee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	bf0c      	ite	eq
 80073d8:	2301      	moveq	r3, #1
 80073da:	2300      	movne	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <HAL_UART_IRQHandler+0x17a>
 80073ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d04f      	beq.n	8007496 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa9a 	bl	8007930 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b40      	cmp	r3, #64	; 0x40
 8007408:	d141      	bne.n	800748e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3314      	adds	r3, #20
 8007410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3314      	adds	r3, #20
 8007432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007436:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800743a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800744e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1d9      	bne.n	800740a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	2b00      	cmp	r3, #0
 800745c:	d013      	beq.n	8007486 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	4a7d      	ldr	r2, [pc, #500]	; (8007658 <HAL_UART_IRQHandler+0x3dc>)
 8007464:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe f8d9 	bl	8005622 <HAL_DMA_Abort_IT>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	e00e      	b.n	80074a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f990 	bl	80077ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	e00a      	b.n	80074a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f98c 	bl	80077ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007494:	e006      	b.n	80074a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f988 	bl	80077ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074a2:	e170      	b.n	8007786 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a4:	bf00      	nop
    return;
 80074a6:	e16e      	b.n	8007786 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	f040 814a 	bne.w	8007746 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 8143 	beq.w	8007746 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 813c 	beq.w	8007746 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074ce:	2300      	movs	r3, #0
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60bb      	str	r3, [r7, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ee:	2b40      	cmp	r3, #64	; 0x40
 80074f0:	f040 80b4 	bne.w	800765c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007500:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8140 	beq.w	800778a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800750e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007512:	429a      	cmp	r2, r3
 8007514:	f080 8139 	bcs.w	800778a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800751e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752a:	f000 8088 	beq.w	800763e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	330c      	adds	r3, #12
 8007534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800754c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800755a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800755e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007566:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1d9      	bne.n	800752e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3314      	adds	r3, #20
 8007580:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800758a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800758c:	f023 0301 	bic.w	r3, r3, #1
 8007590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3314      	adds	r3, #20
 800759a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800759e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e1      	bne.n	800757a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3314      	adds	r3, #20
 80075bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3314      	adds	r3, #20
 80075d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e3      	bne.n	80075b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	330c      	adds	r3, #12
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800760c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760e:	f023 0310 	bic.w	r3, r3, #16
 8007612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	330c      	adds	r3, #12
 800761c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007620:	65ba      	str	r2, [r7, #88]	; 0x58
 8007622:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007626:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800762e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e3      	bne.n	80075fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	4618      	mov	r0, r3
 800763a:	f7fd ff82 	bl	8005542 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007646:	b29b      	uxth	r3, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	b29b      	uxth	r3, r3
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f8b6 	bl	80077c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007654:	e099      	b.n	800778a <HAL_UART_IRQHandler+0x50e>
 8007656:	bf00      	nop
 8007658:	080079f7 	.word	0x080079f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007664:	b29b      	uxth	r3, r3
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 808b 	beq.w	800778e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8086 	beq.w	800778e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	330c      	adds	r3, #12
 8007688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076a6:	647a      	str	r2, [r7, #68]	; 0x44
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e3      	bne.n	8007682 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3314      	adds	r3, #20
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	623b      	str	r3, [r7, #32]
   return(result);
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3314      	adds	r3, #20
 80076da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076de:	633a      	str	r2, [r7, #48]	; 0x30
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e3      	bne.n	80076ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	330c      	adds	r3, #12
 8007706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0310 	bic.w	r3, r3, #16
 8007716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	330c      	adds	r3, #12
 8007720:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007724:	61fa      	str	r2, [r7, #28]
 8007726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	69b9      	ldr	r1, [r7, #24]
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	617b      	str	r3, [r7, #20]
   return(result);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e3      	bne.n	8007700 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f83e 	bl	80077c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007744:	e023      	b.n	800778e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <HAL_UART_IRQHandler+0x4ea>
 8007752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f95d 	bl	8007a1e <UART_Transmit_IT>
    return;
 8007764:	e014      	b.n	8007790 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00e      	beq.n	8007790 <HAL_UART_IRQHandler+0x514>
 8007772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d008      	beq.n	8007790 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f99d 	bl	8007abe <UART_EndTransmit_IT>
    return;
 8007784:	e004      	b.n	8007790 <HAL_UART_IRQHandler+0x514>
    return;
 8007786:	bf00      	nop
 8007788:	e002      	b.n	8007790 <HAL_UART_IRQHandler+0x514>
      return;
 800778a:	bf00      	nop
 800778c:	e000      	b.n	8007790 <HAL_UART_IRQHandler+0x514>
      return;
 800778e:	bf00      	nop
  }
}
 8007790:	37e8      	adds	r7, #232	; 0xe8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop

08007798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b090      	sub	sp, #64	; 0x40
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	4613      	mov	r3, r2
 80077e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e8:	e050      	b.n	800788c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f0:	d04c      	beq.n	800788c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d007      	beq.n	8007808 <UART_WaitOnFlagUntilTimeout+0x30>
 80077f8:	f7fd fd86 	bl	8005308 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007804:	429a      	cmp	r2, r3
 8007806:	d241      	bcs.n	800788c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007828:	637a      	str	r2, [r7, #52]	; 0x34
 800782a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800782e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e5      	bne.n	8007808 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3314      	adds	r3, #20
 8007842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	613b      	str	r3, [r7, #16]
   return(result);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f023 0301 	bic.w	r3, r3, #1
 8007852:	63bb      	str	r3, [r7, #56]	; 0x38
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800785c:	623a      	str	r2, [r7, #32]
 800785e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	69f9      	ldr	r1, [r7, #28]
 8007862:	6a3a      	ldr	r2, [r7, #32]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	61bb      	str	r3, [r7, #24]
   return(result);
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e5      	bne.n	800783c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e00f      	b.n	80078ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4013      	ands	r3, r2
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	bf0c      	ite	eq
 800789c:	2301      	moveq	r3, #1
 800789e:	2300      	movne	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d09f      	beq.n	80077ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3740      	adds	r7, #64	; 0x40
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	88fa      	ldrh	r2, [r7, #6]
 80078d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2222      	movs	r2, #34	; 0x22
 80078de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007900:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 0201 	orr.w	r2, r2, #1
 8007910:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0220 	orr.w	r2, r2, #32
 8007920:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b095      	sub	sp, #84	; 0x54
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	330c      	adds	r3, #12
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800794e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	330c      	adds	r3, #12
 8007956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007958:	643a      	str	r2, [r7, #64]	; 0x40
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800795e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e5      	bne.n	8007938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3314      	adds	r3, #20
 8007972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	61fb      	str	r3, [r7, #28]
   return(result);
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f023 0301 	bic.w	r3, r3, #1
 8007982:	64bb      	str	r3, [r7, #72]	; 0x48
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3314      	adds	r3, #20
 800798a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800798c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e5      	bne.n	800796c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d119      	bne.n	80079dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	330c      	adds	r3, #12
 80079ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f023 0310 	bic.w	r3, r3, #16
 80079be:	647b      	str	r3, [r7, #68]	; 0x44
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079c8:	61ba      	str	r2, [r7, #24]
 80079ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	613b      	str	r3, [r7, #16]
   return(result);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e5      	bne.n	80079a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079ea:	bf00      	nop
 80079ec:	3754      	adds	r7, #84	; 0x54
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff fecb 	bl	80077ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b21      	cmp	r3, #33	; 0x21
 8007a30:	d13e      	bne.n	8007ab0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3a:	d114      	bne.n	8007a66 <UART_Transmit_IT+0x48>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d110      	bne.n	8007a66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	1c9a      	adds	r2, r3, #2
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	621a      	str	r2, [r3, #32]
 8007a64:	e008      	b.n	8007a78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	1c59      	adds	r1, r3, #1
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6211      	str	r1, [r2, #32]
 8007a70:	781a      	ldrb	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4619      	mov	r1, r3
 8007a86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10f      	bne.n	8007aac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e000      	b.n	8007ab2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ab0:	2302      	movs	r3, #2
  }
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ad4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff fe5a 	bl	8007798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b08c      	sub	sp, #48	; 0x30
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b22      	cmp	r3, #34	; 0x22
 8007b00:	f040 80ab 	bne.w	8007c5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0c:	d117      	bne.n	8007b3e <UART_Receive_IT+0x50>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d113      	bne.n	8007b3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	1c9a      	adds	r2, r3, #2
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8007b3c:	e026      	b.n	8007b8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b50:	d007      	beq.n	8007b62 <UART_Receive_IT+0x74>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <UART_Receive_IT+0x82>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	e008      	b.n	8007b82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d15a      	bne.n	8007c56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0220 	bic.w	r2, r2, #32
 8007bae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d135      	bne.n	8007c4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f023 0310 	bic.w	r3, r3, #16
 8007bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	330c      	adds	r3, #12
 8007c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c06:	623a      	str	r2, [r7, #32]
 8007c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	69f9      	ldr	r1, [r7, #28]
 8007c0c:	6a3a      	ldr	r2, [r7, #32]
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b10      	cmp	r3, #16
 8007c26:	d10a      	bne.n	8007c3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff fdbb 	bl	80077c0 <HAL_UARTEx_RxEventCallback>
 8007c4a:	e002      	b.n	8007c52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7f9 ff45 	bl	8001adc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	e002      	b.n	8007c5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e000      	b.n	8007c5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c5a:	2302      	movs	r3, #2
  }
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3730      	adds	r7, #48	; 0x30
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c68:	b0c0      	sub	sp, #256	; 0x100
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c80:	68d9      	ldr	r1, [r3, #12]
 8007c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	ea40 0301 	orr.w	r3, r0, r1
 8007c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cbc:	f021 010c 	bic.w	r1, r1, #12
 8007cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cde:	6999      	ldr	r1, [r3, #24]
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	ea40 0301 	orr.w	r3, r0, r1
 8007cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	4b8f      	ldr	r3, [pc, #572]	; (8007f30 <UART_SetConfig+0x2cc>)
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d005      	beq.n	8007d04 <UART_SetConfig+0xa0>
 8007cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	4b8d      	ldr	r3, [pc, #564]	; (8007f34 <UART_SetConfig+0x2d0>)
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d104      	bne.n	8007d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d04:	f7fe faf4 	bl	80062f0 <HAL_RCC_GetPCLK2Freq>
 8007d08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d0c:	e003      	b.n	8007d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d0e:	f7fe fadb 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 8007d12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d20:	f040 810c 	bne.w	8007f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d36:	4622      	mov	r2, r4
 8007d38:	462b      	mov	r3, r5
 8007d3a:	1891      	adds	r1, r2, r2
 8007d3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d3e:	415b      	adcs	r3, r3
 8007d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d46:	4621      	mov	r1, r4
 8007d48:	eb12 0801 	adds.w	r8, r2, r1
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	eb43 0901 	adc.w	r9, r3, r1
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	f04f 0300 	mov.w	r3, #0
 8007d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d66:	4690      	mov	r8, r2
 8007d68:	4699      	mov	r9, r3
 8007d6a:	4623      	mov	r3, r4
 8007d6c:	eb18 0303 	adds.w	r3, r8, r3
 8007d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d74:	462b      	mov	r3, r5
 8007d76:	eb49 0303 	adc.w	r3, r9, r3
 8007d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d92:	460b      	mov	r3, r1
 8007d94:	18db      	adds	r3, r3, r3
 8007d96:	653b      	str	r3, [r7, #80]	; 0x50
 8007d98:	4613      	mov	r3, r2
 8007d9a:	eb42 0303 	adc.w	r3, r2, r3
 8007d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8007da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007da8:	f7f8 ff6e 	bl	8000c88 <__aeabi_uldivmod>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4b61      	ldr	r3, [pc, #388]	; (8007f38 <UART_SetConfig+0x2d4>)
 8007db2:	fba3 2302 	umull	r2, r3, r3, r2
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	011c      	lsls	r4, r3, #4
 8007dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	1891      	adds	r1, r2, r2
 8007dd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007dd4:	415b      	adcs	r3, r3
 8007dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ddc:	4641      	mov	r1, r8
 8007dde:	eb12 0a01 	adds.w	sl, r2, r1
 8007de2:	4649      	mov	r1, r9
 8007de4:	eb43 0b01 	adc.w	fp, r3, r1
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dfc:	4692      	mov	sl, r2
 8007dfe:	469b      	mov	fp, r3
 8007e00:	4643      	mov	r3, r8
 8007e02:	eb1a 0303 	adds.w	r3, sl, r3
 8007e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e0a:	464b      	mov	r3, r9
 8007e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	18db      	adds	r3, r3, r3
 8007e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2e:	4613      	mov	r3, r2
 8007e30:	eb42 0303 	adc.w	r3, r2, r3
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
 8007e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e3e:	f7f8 ff23 	bl	8000c88 <__aeabi_uldivmod>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4611      	mov	r1, r2
 8007e48:	4b3b      	ldr	r3, [pc, #236]	; (8007f38 <UART_SetConfig+0x2d4>)
 8007e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	2264      	movs	r2, #100	; 0x64
 8007e52:	fb02 f303 	mul.w	r3, r2, r3
 8007e56:	1acb      	subs	r3, r1, r3
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e5e:	4b36      	ldr	r3, [pc, #216]	; (8007f38 <UART_SetConfig+0x2d4>)
 8007e60:	fba3 2302 	umull	r2, r3, r3, r2
 8007e64:	095b      	lsrs	r3, r3, #5
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e6c:	441c      	add	r4, r3
 8007e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	1891      	adds	r1, r2, r2
 8007e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e88:	415b      	adcs	r3, r3
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e90:	4641      	mov	r1, r8
 8007e92:	1851      	adds	r1, r2, r1
 8007e94:	6339      	str	r1, [r7, #48]	; 0x30
 8007e96:	4649      	mov	r1, r9
 8007e98:	414b      	adcs	r3, r1
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ea8:	4659      	mov	r1, fp
 8007eaa:	00cb      	lsls	r3, r1, #3
 8007eac:	4651      	mov	r1, sl
 8007eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eb2:	4651      	mov	r1, sl
 8007eb4:	00ca      	lsls	r2, r1, #3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	189b      	adds	r3, r3, r2
 8007ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	460a      	mov	r2, r1
 8007ec8:	eb42 0303 	adc.w	r3, r2, r3
 8007ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007edc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	18db      	adds	r3, r3, r3
 8007ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eea:	4613      	mov	r3, r2
 8007eec:	eb42 0303 	adc.w	r3, r2, r3
 8007ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007efa:	f7f8 fec5 	bl	8000c88 <__aeabi_uldivmod>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4b0d      	ldr	r3, [pc, #52]	; (8007f38 <UART_SetConfig+0x2d4>)
 8007f04:	fba3 1302 	umull	r1, r3, r3, r2
 8007f08:	095b      	lsrs	r3, r3, #5
 8007f0a:	2164      	movs	r1, #100	; 0x64
 8007f0c:	fb01 f303 	mul.w	r3, r1, r3
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	3332      	adds	r3, #50	; 0x32
 8007f16:	4a08      	ldr	r2, [pc, #32]	; (8007f38 <UART_SetConfig+0x2d4>)
 8007f18:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1c:	095b      	lsrs	r3, r3, #5
 8007f1e:	f003 0207 	and.w	r2, r3, #7
 8007f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4422      	add	r2, r4
 8007f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f2c:	e105      	b.n	800813a <UART_SetConfig+0x4d6>
 8007f2e:	bf00      	nop
 8007f30:	40011000 	.word	0x40011000
 8007f34:	40011400 	.word	0x40011400
 8007f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f4e:	4642      	mov	r2, r8
 8007f50:	464b      	mov	r3, r9
 8007f52:	1891      	adds	r1, r2, r2
 8007f54:	6239      	str	r1, [r7, #32]
 8007f56:	415b      	adcs	r3, r3
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
 8007f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f5e:	4641      	mov	r1, r8
 8007f60:	1854      	adds	r4, r2, r1
 8007f62:	4649      	mov	r1, r9
 8007f64:	eb43 0501 	adc.w	r5, r3, r1
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	f04f 0300 	mov.w	r3, #0
 8007f70:	00eb      	lsls	r3, r5, #3
 8007f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f76:	00e2      	lsls	r2, r4, #3
 8007f78:	4614      	mov	r4, r2
 8007f7a:	461d      	mov	r5, r3
 8007f7c:	4643      	mov	r3, r8
 8007f7e:	18e3      	adds	r3, r4, r3
 8007f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f84:	464b      	mov	r3, r9
 8007f86:	eb45 0303 	adc.w	r3, r5, r3
 8007f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	f04f 0300 	mov.w	r3, #0
 8007fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007faa:	4629      	mov	r1, r5
 8007fac:	008b      	lsls	r3, r1, #2
 8007fae:	4621      	mov	r1, r4
 8007fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	008a      	lsls	r2, r1, #2
 8007fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007fbc:	f7f8 fe64 	bl	8000c88 <__aeabi_uldivmod>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4b60      	ldr	r3, [pc, #384]	; (8008148 <UART_SetConfig+0x4e4>)
 8007fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	011c      	lsls	r4, r3, #4
 8007fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	1891      	adds	r1, r2, r2
 8007fe6:	61b9      	str	r1, [r7, #24]
 8007fe8:	415b      	adcs	r3, r3
 8007fea:	61fb      	str	r3, [r7, #28]
 8007fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ff0:	4641      	mov	r1, r8
 8007ff2:	1851      	adds	r1, r2, r1
 8007ff4:	6139      	str	r1, [r7, #16]
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	414b      	adcs	r3, r1
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	f04f 0300 	mov.w	r3, #0
 8008004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008008:	4659      	mov	r1, fp
 800800a:	00cb      	lsls	r3, r1, #3
 800800c:	4651      	mov	r1, sl
 800800e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008012:	4651      	mov	r1, sl
 8008014:	00ca      	lsls	r2, r1, #3
 8008016:	4610      	mov	r0, r2
 8008018:	4619      	mov	r1, r3
 800801a:	4603      	mov	r3, r0
 800801c:	4642      	mov	r2, r8
 800801e:	189b      	adds	r3, r3, r2
 8008020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008024:	464b      	mov	r3, r9
 8008026:	460a      	mov	r2, r1
 8008028:	eb42 0303 	adc.w	r3, r2, r3
 800802c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	67bb      	str	r3, [r7, #120]	; 0x78
 800803a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008048:	4649      	mov	r1, r9
 800804a:	008b      	lsls	r3, r1, #2
 800804c:	4641      	mov	r1, r8
 800804e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008052:	4641      	mov	r1, r8
 8008054:	008a      	lsls	r2, r1, #2
 8008056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800805a:	f7f8 fe15 	bl	8000c88 <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4b39      	ldr	r3, [pc, #228]	; (8008148 <UART_SetConfig+0x4e4>)
 8008064:	fba3 1302 	umull	r1, r3, r3, r2
 8008068:	095b      	lsrs	r3, r3, #5
 800806a:	2164      	movs	r1, #100	; 0x64
 800806c:	fb01 f303 	mul.w	r3, r1, r3
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	3332      	adds	r3, #50	; 0x32
 8008076:	4a34      	ldr	r2, [pc, #208]	; (8008148 <UART_SetConfig+0x4e4>)
 8008078:	fba2 2303 	umull	r2, r3, r2, r3
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008082:	441c      	add	r4, r3
 8008084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008088:	2200      	movs	r2, #0
 800808a:	673b      	str	r3, [r7, #112]	; 0x70
 800808c:	677a      	str	r2, [r7, #116]	; 0x74
 800808e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008092:	4642      	mov	r2, r8
 8008094:	464b      	mov	r3, r9
 8008096:	1891      	adds	r1, r2, r2
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	415b      	adcs	r3, r3
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080a2:	4641      	mov	r1, r8
 80080a4:	1851      	adds	r1, r2, r1
 80080a6:	6039      	str	r1, [r7, #0]
 80080a8:	4649      	mov	r1, r9
 80080aa:	414b      	adcs	r3, r1
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080ba:	4659      	mov	r1, fp
 80080bc:	00cb      	lsls	r3, r1, #3
 80080be:	4651      	mov	r1, sl
 80080c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080c4:	4651      	mov	r1, sl
 80080c6:	00ca      	lsls	r2, r1, #3
 80080c8:	4610      	mov	r0, r2
 80080ca:	4619      	mov	r1, r3
 80080cc:	4603      	mov	r3, r0
 80080ce:	4642      	mov	r2, r8
 80080d0:	189b      	adds	r3, r3, r2
 80080d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80080d4:	464b      	mov	r3, r9
 80080d6:	460a      	mov	r2, r1
 80080d8:	eb42 0303 	adc.w	r3, r2, r3
 80080dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	663b      	str	r3, [r7, #96]	; 0x60
 80080e8:	667a      	str	r2, [r7, #100]	; 0x64
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080f6:	4649      	mov	r1, r9
 80080f8:	008b      	lsls	r3, r1, #2
 80080fa:	4641      	mov	r1, r8
 80080fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008100:	4641      	mov	r1, r8
 8008102:	008a      	lsls	r2, r1, #2
 8008104:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008108:	f7f8 fdbe 	bl	8000c88 <__aeabi_uldivmod>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <UART_SetConfig+0x4e4>)
 8008112:	fba3 1302 	umull	r1, r3, r3, r2
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	2164      	movs	r1, #100	; 0x64
 800811a:	fb01 f303 	mul.w	r3, r1, r3
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	3332      	adds	r3, #50	; 0x32
 8008124:	4a08      	ldr	r2, [pc, #32]	; (8008148 <UART_SetConfig+0x4e4>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	095b      	lsrs	r3, r3, #5
 800812c:	f003 020f 	and.w	r2, r3, #15
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4422      	add	r2, r4
 8008138:	609a      	str	r2, [r3, #8]
}
 800813a:	bf00      	nop
 800813c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008140:	46bd      	mov	sp, r7
 8008142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008146:	bf00      	nop
 8008148:	51eb851f 	.word	0x51eb851f

0800814c <__assert_func>:
 800814c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800814e:	4614      	mov	r4, r2
 8008150:	461a      	mov	r2, r3
 8008152:	4b09      	ldr	r3, [pc, #36]	; (8008178 <__assert_func+0x2c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4605      	mov	r5, r0
 8008158:	68d8      	ldr	r0, [r3, #12]
 800815a:	b14c      	cbz	r4, 8008170 <__assert_func+0x24>
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <__assert_func+0x30>)
 800815e:	9100      	str	r1, [sp, #0]
 8008160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008164:	4906      	ldr	r1, [pc, #24]	; (8008180 <__assert_func+0x34>)
 8008166:	462b      	mov	r3, r5
 8008168:	f000 f9c6 	bl	80084f8 <fiprintf>
 800816c:	f002 fc22 	bl	800a9b4 <abort>
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <__assert_func+0x38>)
 8008172:	461c      	mov	r4, r3
 8008174:	e7f3      	b.n	800815e <__assert_func+0x12>
 8008176:	bf00      	nop
 8008178:	2000000c 	.word	0x2000000c
 800817c:	0800f244 	.word	0x0800f244
 8008180:	0800f251 	.word	0x0800f251
 8008184:	0800f27f 	.word	0x0800f27f

08008188 <calloc>:
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <calloc+0xc>)
 800818a:	460a      	mov	r2, r1
 800818c:	4601      	mov	r1, r0
 800818e:	6818      	ldr	r0, [r3, #0]
 8008190:	f000 bafa 	b.w	8008788 <_calloc_r>
 8008194:	2000000c 	.word	0x2000000c

08008198 <__errno>:
 8008198:	4b01      	ldr	r3, [pc, #4]	; (80081a0 <__errno+0x8>)
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	2000000c 	.word	0x2000000c

080081a4 <__sflush_r>:
 80081a4:	898a      	ldrh	r2, [r1, #12]
 80081a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081aa:	4605      	mov	r5, r0
 80081ac:	0710      	lsls	r0, r2, #28
 80081ae:	460c      	mov	r4, r1
 80081b0:	d458      	bmi.n	8008264 <__sflush_r+0xc0>
 80081b2:	684b      	ldr	r3, [r1, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dc05      	bgt.n	80081c4 <__sflush_r+0x20>
 80081b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dc02      	bgt.n	80081c4 <__sflush_r+0x20>
 80081be:	2000      	movs	r0, #0
 80081c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	d0f9      	beq.n	80081be <__sflush_r+0x1a>
 80081ca:	2300      	movs	r3, #0
 80081cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081d0:	682f      	ldr	r7, [r5, #0]
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	d032      	beq.n	800823c <__sflush_r+0x98>
 80081d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	075a      	lsls	r2, r3, #29
 80081dc:	d505      	bpl.n	80081ea <__sflush_r+0x46>
 80081de:	6863      	ldr	r3, [r4, #4]
 80081e0:	1ac0      	subs	r0, r0, r3
 80081e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081e4:	b10b      	cbz	r3, 80081ea <__sflush_r+0x46>
 80081e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081e8:	1ac0      	subs	r0, r0, r3
 80081ea:	2300      	movs	r3, #0
 80081ec:	4602      	mov	r2, r0
 80081ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081f0:	6a21      	ldr	r1, [r4, #32]
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b0      	blx	r6
 80081f6:	1c43      	adds	r3, r0, #1
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	d106      	bne.n	800820a <__sflush_r+0x66>
 80081fc:	6829      	ldr	r1, [r5, #0]
 80081fe:	291d      	cmp	r1, #29
 8008200:	d82c      	bhi.n	800825c <__sflush_r+0xb8>
 8008202:	4a2a      	ldr	r2, [pc, #168]	; (80082ac <__sflush_r+0x108>)
 8008204:	40ca      	lsrs	r2, r1
 8008206:	07d6      	lsls	r6, r2, #31
 8008208:	d528      	bpl.n	800825c <__sflush_r+0xb8>
 800820a:	2200      	movs	r2, #0
 800820c:	6062      	str	r2, [r4, #4]
 800820e:	04d9      	lsls	r1, r3, #19
 8008210:	6922      	ldr	r2, [r4, #16]
 8008212:	6022      	str	r2, [r4, #0]
 8008214:	d504      	bpl.n	8008220 <__sflush_r+0x7c>
 8008216:	1c42      	adds	r2, r0, #1
 8008218:	d101      	bne.n	800821e <__sflush_r+0x7a>
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	b903      	cbnz	r3, 8008220 <__sflush_r+0x7c>
 800821e:	6560      	str	r0, [r4, #84]	; 0x54
 8008220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008222:	602f      	str	r7, [r5, #0]
 8008224:	2900      	cmp	r1, #0
 8008226:	d0ca      	beq.n	80081be <__sflush_r+0x1a>
 8008228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800822c:	4299      	cmp	r1, r3
 800822e:	d002      	beq.n	8008236 <__sflush_r+0x92>
 8008230:	4628      	mov	r0, r5
 8008232:	f000 fabf 	bl	80087b4 <_free_r>
 8008236:	2000      	movs	r0, #0
 8008238:	6360      	str	r0, [r4, #52]	; 0x34
 800823a:	e7c1      	b.n	80081c0 <__sflush_r+0x1c>
 800823c:	6a21      	ldr	r1, [r4, #32]
 800823e:	2301      	movs	r3, #1
 8008240:	4628      	mov	r0, r5
 8008242:	47b0      	blx	r6
 8008244:	1c41      	adds	r1, r0, #1
 8008246:	d1c7      	bne.n	80081d8 <__sflush_r+0x34>
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0c4      	beq.n	80081d8 <__sflush_r+0x34>
 800824e:	2b1d      	cmp	r3, #29
 8008250:	d001      	beq.n	8008256 <__sflush_r+0xb2>
 8008252:	2b16      	cmp	r3, #22
 8008254:	d101      	bne.n	800825a <__sflush_r+0xb6>
 8008256:	602f      	str	r7, [r5, #0]
 8008258:	e7b1      	b.n	80081be <__sflush_r+0x1a>
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008260:	81a3      	strh	r3, [r4, #12]
 8008262:	e7ad      	b.n	80081c0 <__sflush_r+0x1c>
 8008264:	690f      	ldr	r7, [r1, #16]
 8008266:	2f00      	cmp	r7, #0
 8008268:	d0a9      	beq.n	80081be <__sflush_r+0x1a>
 800826a:	0793      	lsls	r3, r2, #30
 800826c:	680e      	ldr	r6, [r1, #0]
 800826e:	bf08      	it	eq
 8008270:	694b      	ldreq	r3, [r1, #20]
 8008272:	600f      	str	r7, [r1, #0]
 8008274:	bf18      	it	ne
 8008276:	2300      	movne	r3, #0
 8008278:	eba6 0807 	sub.w	r8, r6, r7
 800827c:	608b      	str	r3, [r1, #8]
 800827e:	f1b8 0f00 	cmp.w	r8, #0
 8008282:	dd9c      	ble.n	80081be <__sflush_r+0x1a>
 8008284:	6a21      	ldr	r1, [r4, #32]
 8008286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008288:	4643      	mov	r3, r8
 800828a:	463a      	mov	r2, r7
 800828c:	4628      	mov	r0, r5
 800828e:	47b0      	blx	r6
 8008290:	2800      	cmp	r0, #0
 8008292:	dc06      	bgt.n	80082a2 <__sflush_r+0xfe>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800829a:	81a3      	strh	r3, [r4, #12]
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	e78e      	b.n	80081c0 <__sflush_r+0x1c>
 80082a2:	4407      	add	r7, r0
 80082a4:	eba8 0800 	sub.w	r8, r8, r0
 80082a8:	e7e9      	b.n	800827e <__sflush_r+0xda>
 80082aa:	bf00      	nop
 80082ac:	20400001 	.word	0x20400001

080082b0 <_fflush_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	690b      	ldr	r3, [r1, #16]
 80082b4:	4605      	mov	r5, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	b913      	cbnz	r3, 80082c0 <_fflush_r+0x10>
 80082ba:	2500      	movs	r5, #0
 80082bc:	4628      	mov	r0, r5
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	b118      	cbz	r0, 80082ca <_fflush_r+0x1a>
 80082c2:	6983      	ldr	r3, [r0, #24]
 80082c4:	b90b      	cbnz	r3, 80082ca <_fflush_r+0x1a>
 80082c6:	f000 f899 	bl	80083fc <__sinit>
 80082ca:	4b14      	ldr	r3, [pc, #80]	; (800831c <_fflush_r+0x6c>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	d11b      	bne.n	8008308 <_fflush_r+0x58>
 80082d0:	686c      	ldr	r4, [r5, #4]
 80082d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0ef      	beq.n	80082ba <_fflush_r+0xa>
 80082da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082dc:	07d0      	lsls	r0, r2, #31
 80082de:	d404      	bmi.n	80082ea <_fflush_r+0x3a>
 80082e0:	0599      	lsls	r1, r3, #22
 80082e2:	d402      	bmi.n	80082ea <_fflush_r+0x3a>
 80082e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e6:	f000 fa0c 	bl	8008702 <__retarget_lock_acquire_recursive>
 80082ea:	4628      	mov	r0, r5
 80082ec:	4621      	mov	r1, r4
 80082ee:	f7ff ff59 	bl	80081a4 <__sflush_r>
 80082f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082f4:	07da      	lsls	r2, r3, #31
 80082f6:	4605      	mov	r5, r0
 80082f8:	d4e0      	bmi.n	80082bc <_fflush_r+0xc>
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	059b      	lsls	r3, r3, #22
 80082fe:	d4dd      	bmi.n	80082bc <_fflush_r+0xc>
 8008300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008302:	f000 f9ff 	bl	8008704 <__retarget_lock_release_recursive>
 8008306:	e7d9      	b.n	80082bc <_fflush_r+0xc>
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <_fflush_r+0x70>)
 800830a:	429c      	cmp	r4, r3
 800830c:	d101      	bne.n	8008312 <_fflush_r+0x62>
 800830e:	68ac      	ldr	r4, [r5, #8]
 8008310:	e7df      	b.n	80082d2 <_fflush_r+0x22>
 8008312:	4b04      	ldr	r3, [pc, #16]	; (8008324 <_fflush_r+0x74>)
 8008314:	429c      	cmp	r4, r3
 8008316:	bf08      	it	eq
 8008318:	68ec      	ldreq	r4, [r5, #12]
 800831a:	e7da      	b.n	80082d2 <_fflush_r+0x22>
 800831c:	0800f3a4 	.word	0x0800f3a4
 8008320:	0800f3c4 	.word	0x0800f3c4
 8008324:	0800f384 	.word	0x0800f384

08008328 <fflush>:
 8008328:	4601      	mov	r1, r0
 800832a:	b920      	cbnz	r0, 8008336 <fflush+0xe>
 800832c:	4b04      	ldr	r3, [pc, #16]	; (8008340 <fflush+0x18>)
 800832e:	4905      	ldr	r1, [pc, #20]	; (8008344 <fflush+0x1c>)
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	f000 b933 	b.w	800859c <_fwalk_reent>
 8008336:	4b04      	ldr	r3, [pc, #16]	; (8008348 <fflush+0x20>)
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	f7ff bfb9 	b.w	80082b0 <_fflush_r>
 800833e:	bf00      	nop
 8008340:	0800f3e4 	.word	0x0800f3e4
 8008344:	080082b1 	.word	0x080082b1
 8008348:	2000000c 	.word	0x2000000c

0800834c <std>:
 800834c:	2300      	movs	r3, #0
 800834e:	b510      	push	{r4, lr}
 8008350:	4604      	mov	r4, r0
 8008352:	e9c0 3300 	strd	r3, r3, [r0]
 8008356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800835a:	6083      	str	r3, [r0, #8]
 800835c:	8181      	strh	r1, [r0, #12]
 800835e:	6643      	str	r3, [r0, #100]	; 0x64
 8008360:	81c2      	strh	r2, [r0, #14]
 8008362:	6183      	str	r3, [r0, #24]
 8008364:	4619      	mov	r1, r3
 8008366:	2208      	movs	r2, #8
 8008368:	305c      	adds	r0, #92	; 0x5c
 800836a:	f000 fa05 	bl	8008778 <memset>
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <std+0x38>)
 8008370:	6263      	str	r3, [r4, #36]	; 0x24
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <std+0x3c>)
 8008374:	62a3      	str	r3, [r4, #40]	; 0x28
 8008376:	4b05      	ldr	r3, [pc, #20]	; (800838c <std+0x40>)
 8008378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <std+0x44>)
 800837c:	6224      	str	r4, [r4, #32]
 800837e:	6323      	str	r3, [r4, #48]	; 0x30
 8008380:	bd10      	pop	{r4, pc}
 8008382:	bf00      	nop
 8008384:	08009a2d 	.word	0x08009a2d
 8008388:	08009a4f 	.word	0x08009a4f
 800838c:	08009a87 	.word	0x08009a87
 8008390:	08009aab 	.word	0x08009aab

08008394 <_cleanup_r>:
 8008394:	4901      	ldr	r1, [pc, #4]	; (800839c <_cleanup_r+0x8>)
 8008396:	f000 b901 	b.w	800859c <_fwalk_reent>
 800839a:	bf00      	nop
 800839c:	080082b1 	.word	0x080082b1

080083a0 <__sfmoreglue>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	2268      	movs	r2, #104	; 0x68
 80083a4:	1e4d      	subs	r5, r1, #1
 80083a6:	4355      	muls	r5, r2
 80083a8:	460e      	mov	r6, r1
 80083aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083ae:	f000 fa6d 	bl	800888c <_malloc_r>
 80083b2:	4604      	mov	r4, r0
 80083b4:	b140      	cbz	r0, 80083c8 <__sfmoreglue+0x28>
 80083b6:	2100      	movs	r1, #0
 80083b8:	e9c0 1600 	strd	r1, r6, [r0]
 80083bc:	300c      	adds	r0, #12
 80083be:	60a0      	str	r0, [r4, #8]
 80083c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083c4:	f000 f9d8 	bl	8008778 <memset>
 80083c8:	4620      	mov	r0, r4
 80083ca:	bd70      	pop	{r4, r5, r6, pc}

080083cc <__sfp_lock_acquire>:
 80083cc:	4801      	ldr	r0, [pc, #4]	; (80083d4 <__sfp_lock_acquire+0x8>)
 80083ce:	f000 b998 	b.w	8008702 <__retarget_lock_acquire_recursive>
 80083d2:	bf00      	nop
 80083d4:	20000edd 	.word	0x20000edd

080083d8 <__sfp_lock_release>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__sfp_lock_release+0x8>)
 80083da:	f000 b993 	b.w	8008704 <__retarget_lock_release_recursive>
 80083de:	bf00      	nop
 80083e0:	20000edd 	.word	0x20000edd

080083e4 <__sinit_lock_acquire>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__sinit_lock_acquire+0x8>)
 80083e6:	f000 b98c 	b.w	8008702 <__retarget_lock_acquire_recursive>
 80083ea:	bf00      	nop
 80083ec:	20000ede 	.word	0x20000ede

080083f0 <__sinit_lock_release>:
 80083f0:	4801      	ldr	r0, [pc, #4]	; (80083f8 <__sinit_lock_release+0x8>)
 80083f2:	f000 b987 	b.w	8008704 <__retarget_lock_release_recursive>
 80083f6:	bf00      	nop
 80083f8:	20000ede 	.word	0x20000ede

080083fc <__sinit>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	4604      	mov	r4, r0
 8008400:	f7ff fff0 	bl	80083e4 <__sinit_lock_acquire>
 8008404:	69a3      	ldr	r3, [r4, #24]
 8008406:	b11b      	cbz	r3, 8008410 <__sinit+0x14>
 8008408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800840c:	f7ff bff0 	b.w	80083f0 <__sinit_lock_release>
 8008410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008414:	6523      	str	r3, [r4, #80]	; 0x50
 8008416:	4b13      	ldr	r3, [pc, #76]	; (8008464 <__sinit+0x68>)
 8008418:	4a13      	ldr	r2, [pc, #76]	; (8008468 <__sinit+0x6c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	62a2      	str	r2, [r4, #40]	; 0x28
 800841e:	42a3      	cmp	r3, r4
 8008420:	bf04      	itt	eq
 8008422:	2301      	moveq	r3, #1
 8008424:	61a3      	streq	r3, [r4, #24]
 8008426:	4620      	mov	r0, r4
 8008428:	f000 f820 	bl	800846c <__sfp>
 800842c:	6060      	str	r0, [r4, #4]
 800842e:	4620      	mov	r0, r4
 8008430:	f000 f81c 	bl	800846c <__sfp>
 8008434:	60a0      	str	r0, [r4, #8]
 8008436:	4620      	mov	r0, r4
 8008438:	f000 f818 	bl	800846c <__sfp>
 800843c:	2200      	movs	r2, #0
 800843e:	60e0      	str	r0, [r4, #12]
 8008440:	2104      	movs	r1, #4
 8008442:	6860      	ldr	r0, [r4, #4]
 8008444:	f7ff ff82 	bl	800834c <std>
 8008448:	68a0      	ldr	r0, [r4, #8]
 800844a:	2201      	movs	r2, #1
 800844c:	2109      	movs	r1, #9
 800844e:	f7ff ff7d 	bl	800834c <std>
 8008452:	68e0      	ldr	r0, [r4, #12]
 8008454:	2202      	movs	r2, #2
 8008456:	2112      	movs	r1, #18
 8008458:	f7ff ff78 	bl	800834c <std>
 800845c:	2301      	movs	r3, #1
 800845e:	61a3      	str	r3, [r4, #24]
 8008460:	e7d2      	b.n	8008408 <__sinit+0xc>
 8008462:	bf00      	nop
 8008464:	0800f3e4 	.word	0x0800f3e4
 8008468:	08008395 	.word	0x08008395

0800846c <__sfp>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	4607      	mov	r7, r0
 8008470:	f7ff ffac 	bl	80083cc <__sfp_lock_acquire>
 8008474:	4b1e      	ldr	r3, [pc, #120]	; (80084f0 <__sfp+0x84>)
 8008476:	681e      	ldr	r6, [r3, #0]
 8008478:	69b3      	ldr	r3, [r6, #24]
 800847a:	b913      	cbnz	r3, 8008482 <__sfp+0x16>
 800847c:	4630      	mov	r0, r6
 800847e:	f7ff ffbd 	bl	80083fc <__sinit>
 8008482:	3648      	adds	r6, #72	; 0x48
 8008484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008488:	3b01      	subs	r3, #1
 800848a:	d503      	bpl.n	8008494 <__sfp+0x28>
 800848c:	6833      	ldr	r3, [r6, #0]
 800848e:	b30b      	cbz	r3, 80084d4 <__sfp+0x68>
 8008490:	6836      	ldr	r6, [r6, #0]
 8008492:	e7f7      	b.n	8008484 <__sfp+0x18>
 8008494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008498:	b9d5      	cbnz	r5, 80084d0 <__sfp+0x64>
 800849a:	4b16      	ldr	r3, [pc, #88]	; (80084f4 <__sfp+0x88>)
 800849c:	60e3      	str	r3, [r4, #12]
 800849e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084a2:	6665      	str	r5, [r4, #100]	; 0x64
 80084a4:	f000 f92c 	bl	8008700 <__retarget_lock_init_recursive>
 80084a8:	f7ff ff96 	bl	80083d8 <__sfp_lock_release>
 80084ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084b4:	6025      	str	r5, [r4, #0]
 80084b6:	61a5      	str	r5, [r4, #24]
 80084b8:	2208      	movs	r2, #8
 80084ba:	4629      	mov	r1, r5
 80084bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084c0:	f000 f95a 	bl	8008778 <memset>
 80084c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084cc:	4620      	mov	r0, r4
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d0:	3468      	adds	r4, #104	; 0x68
 80084d2:	e7d9      	b.n	8008488 <__sfp+0x1c>
 80084d4:	2104      	movs	r1, #4
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7ff ff62 	bl	80083a0 <__sfmoreglue>
 80084dc:	4604      	mov	r4, r0
 80084de:	6030      	str	r0, [r6, #0]
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d1d5      	bne.n	8008490 <__sfp+0x24>
 80084e4:	f7ff ff78 	bl	80083d8 <__sfp_lock_release>
 80084e8:	230c      	movs	r3, #12
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	e7ee      	b.n	80084cc <__sfp+0x60>
 80084ee:	bf00      	nop
 80084f0:	0800f3e4 	.word	0x0800f3e4
 80084f4:	ffff0001 	.word	0xffff0001

080084f8 <fiprintf>:
 80084f8:	b40e      	push	{r1, r2, r3}
 80084fa:	b503      	push	{r0, r1, lr}
 80084fc:	4601      	mov	r1, r0
 80084fe:	ab03      	add	r3, sp, #12
 8008500:	4805      	ldr	r0, [pc, #20]	; (8008518 <fiprintf+0x20>)
 8008502:	f853 2b04 	ldr.w	r2, [r3], #4
 8008506:	6800      	ldr	r0, [r0, #0]
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	f000 fa5d 	bl	80089c8 <_vfiprintf_r>
 800850e:	b002      	add	sp, #8
 8008510:	f85d eb04 	ldr.w	lr, [sp], #4
 8008514:	b003      	add	sp, #12
 8008516:	4770      	bx	lr
 8008518:	2000000c 	.word	0x2000000c

0800851c <_fputc_r>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	460e      	mov	r6, r1
 8008520:	4614      	mov	r4, r2
 8008522:	4605      	mov	r5, r0
 8008524:	b118      	cbz	r0, 800852e <_fputc_r+0x12>
 8008526:	6983      	ldr	r3, [r0, #24]
 8008528:	b90b      	cbnz	r3, 800852e <_fputc_r+0x12>
 800852a:	f7ff ff67 	bl	80083fc <__sinit>
 800852e:	4b14      	ldr	r3, [pc, #80]	; (8008580 <_fputc_r+0x64>)
 8008530:	429c      	cmp	r4, r3
 8008532:	d11a      	bne.n	800856a <_fputc_r+0x4e>
 8008534:	686c      	ldr	r4, [r5, #4]
 8008536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008538:	07d8      	lsls	r0, r3, #31
 800853a:	d405      	bmi.n	8008548 <_fputc_r+0x2c>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	0599      	lsls	r1, r3, #22
 8008540:	d402      	bmi.n	8008548 <_fputc_r+0x2c>
 8008542:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008544:	f000 f8dd 	bl	8008702 <__retarget_lock_acquire_recursive>
 8008548:	4622      	mov	r2, r4
 800854a:	4628      	mov	r0, r5
 800854c:	4631      	mov	r1, r6
 800854e:	f001 f9ef 	bl	8009930 <_putc_r>
 8008552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008554:	07da      	lsls	r2, r3, #31
 8008556:	4605      	mov	r5, r0
 8008558:	d405      	bmi.n	8008566 <_fputc_r+0x4a>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	059b      	lsls	r3, r3, #22
 800855e:	d402      	bmi.n	8008566 <_fputc_r+0x4a>
 8008560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008562:	f000 f8cf 	bl	8008704 <__retarget_lock_release_recursive>
 8008566:	4628      	mov	r0, r5
 8008568:	bd70      	pop	{r4, r5, r6, pc}
 800856a:	4b06      	ldr	r3, [pc, #24]	; (8008584 <_fputc_r+0x68>)
 800856c:	429c      	cmp	r4, r3
 800856e:	d101      	bne.n	8008574 <_fputc_r+0x58>
 8008570:	68ac      	ldr	r4, [r5, #8]
 8008572:	e7e0      	b.n	8008536 <_fputc_r+0x1a>
 8008574:	4b04      	ldr	r3, [pc, #16]	; (8008588 <_fputc_r+0x6c>)
 8008576:	429c      	cmp	r4, r3
 8008578:	bf08      	it	eq
 800857a:	68ec      	ldreq	r4, [r5, #12]
 800857c:	e7db      	b.n	8008536 <_fputc_r+0x1a>
 800857e:	bf00      	nop
 8008580:	0800f3a4 	.word	0x0800f3a4
 8008584:	0800f3c4 	.word	0x0800f3c4
 8008588:	0800f384 	.word	0x0800f384

0800858c <fputc>:
 800858c:	4b02      	ldr	r3, [pc, #8]	; (8008598 <fputc+0xc>)
 800858e:	460a      	mov	r2, r1
 8008590:	4601      	mov	r1, r0
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	f7ff bfc2 	b.w	800851c <_fputc_r>
 8008598:	2000000c 	.word	0x2000000c

0800859c <_fwalk_reent>:
 800859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a0:	4606      	mov	r6, r0
 80085a2:	4688      	mov	r8, r1
 80085a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085a8:	2700      	movs	r7, #0
 80085aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085ae:	f1b9 0901 	subs.w	r9, r9, #1
 80085b2:	d505      	bpl.n	80085c0 <_fwalk_reent+0x24>
 80085b4:	6824      	ldr	r4, [r4, #0]
 80085b6:	2c00      	cmp	r4, #0
 80085b8:	d1f7      	bne.n	80085aa <_fwalk_reent+0xe>
 80085ba:	4638      	mov	r0, r7
 80085bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c0:	89ab      	ldrh	r3, [r5, #12]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d907      	bls.n	80085d6 <_fwalk_reent+0x3a>
 80085c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085ca:	3301      	adds	r3, #1
 80085cc:	d003      	beq.n	80085d6 <_fwalk_reent+0x3a>
 80085ce:	4629      	mov	r1, r5
 80085d0:	4630      	mov	r0, r6
 80085d2:	47c0      	blx	r8
 80085d4:	4307      	orrs	r7, r0
 80085d6:	3568      	adds	r5, #104	; 0x68
 80085d8:	e7e9      	b.n	80085ae <_fwalk_reent+0x12>
	...

080085dc <_fwrite_r>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	9c08      	ldr	r4, [sp, #32]
 80085e2:	468a      	mov	sl, r1
 80085e4:	4690      	mov	r8, r2
 80085e6:	fb02 f903 	mul.w	r9, r2, r3
 80085ea:	4605      	mov	r5, r0
 80085ec:	b118      	cbz	r0, 80085f6 <_fwrite_r+0x1a>
 80085ee:	6983      	ldr	r3, [r0, #24]
 80085f0:	b90b      	cbnz	r3, 80085f6 <_fwrite_r+0x1a>
 80085f2:	f7ff ff03 	bl	80083fc <__sinit>
 80085f6:	4b26      	ldr	r3, [pc, #152]	; (8008690 <_fwrite_r+0xb4>)
 80085f8:	429c      	cmp	r4, r3
 80085fa:	d123      	bne.n	8008644 <_fwrite_r+0x68>
 80085fc:	686c      	ldr	r4, [r5, #4]
 80085fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008600:	07de      	lsls	r6, r3, #31
 8008602:	d405      	bmi.n	8008610 <_fwrite_r+0x34>
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	0598      	lsls	r0, r3, #22
 8008608:	d402      	bmi.n	8008610 <_fwrite_r+0x34>
 800860a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860c:	f000 f879 	bl	8008702 <__retarget_lock_acquire_recursive>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	0719      	lsls	r1, r3, #28
 8008614:	d520      	bpl.n	8008658 <_fwrite_r+0x7c>
 8008616:	6923      	ldr	r3, [r4, #16]
 8008618:	b1f3      	cbz	r3, 8008658 <_fwrite_r+0x7c>
 800861a:	2600      	movs	r6, #0
 800861c:	454e      	cmp	r6, r9
 800861e:	d029      	beq.n	8008674 <_fwrite_r+0x98>
 8008620:	68a7      	ldr	r7, [r4, #8]
 8008622:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8008626:	3f01      	subs	r7, #1
 8008628:	2f00      	cmp	r7, #0
 800862a:	60a7      	str	r7, [r4, #8]
 800862c:	da04      	bge.n	8008638 <_fwrite_r+0x5c>
 800862e:	69a3      	ldr	r3, [r4, #24]
 8008630:	429f      	cmp	r7, r3
 8008632:	db19      	blt.n	8008668 <_fwrite_r+0x8c>
 8008634:	290a      	cmp	r1, #10
 8008636:	d017      	beq.n	8008668 <_fwrite_r+0x8c>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	7019      	strb	r1, [r3, #0]
 8008640:	3601      	adds	r6, #1
 8008642:	e7eb      	b.n	800861c <_fwrite_r+0x40>
 8008644:	4b13      	ldr	r3, [pc, #76]	; (8008694 <_fwrite_r+0xb8>)
 8008646:	429c      	cmp	r4, r3
 8008648:	d101      	bne.n	800864e <_fwrite_r+0x72>
 800864a:	68ac      	ldr	r4, [r5, #8]
 800864c:	e7d7      	b.n	80085fe <_fwrite_r+0x22>
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <_fwrite_r+0xbc>)
 8008650:	429c      	cmp	r4, r3
 8008652:	bf08      	it	eq
 8008654:	68ec      	ldreq	r4, [r5, #12]
 8008656:	e7d2      	b.n	80085fe <_fwrite_r+0x22>
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f002 f93c 	bl	800a8d8 <__swsetup_r>
 8008660:	2800      	cmp	r0, #0
 8008662:	d0da      	beq.n	800861a <_fwrite_r+0x3e>
 8008664:	2600      	movs	r6, #0
 8008666:	e005      	b.n	8008674 <_fwrite_r+0x98>
 8008668:	4622      	mov	r2, r4
 800866a:	4628      	mov	r0, r5
 800866c:	f002 f8d0 	bl	800a810 <__swbuf_r>
 8008670:	3001      	adds	r0, #1
 8008672:	d1e5      	bne.n	8008640 <_fwrite_r+0x64>
 8008674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008676:	07da      	lsls	r2, r3, #31
 8008678:	d405      	bmi.n	8008686 <_fwrite_r+0xaa>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	059b      	lsls	r3, r3, #22
 800867e:	d402      	bmi.n	8008686 <_fwrite_r+0xaa>
 8008680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008682:	f000 f83f 	bl	8008704 <__retarget_lock_release_recursive>
 8008686:	fbb6 f0f8 	udiv	r0, r6, r8
 800868a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868e:	bf00      	nop
 8008690:	0800f3a4 	.word	0x0800f3a4
 8008694:	0800f3c4 	.word	0x0800f3c4
 8008698:	0800f384 	.word	0x0800f384

0800869c <fwrite>:
 800869c:	b507      	push	{r0, r1, r2, lr}
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4613      	mov	r3, r2
 80086a2:	460a      	mov	r2, r1
 80086a4:	4601      	mov	r1, r0
 80086a6:	4803      	ldr	r0, [pc, #12]	; (80086b4 <fwrite+0x18>)
 80086a8:	6800      	ldr	r0, [r0, #0]
 80086aa:	f7ff ff97 	bl	80085dc <_fwrite_r>
 80086ae:	b003      	add	sp, #12
 80086b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80086b4:	2000000c 	.word	0x2000000c

080086b8 <__libc_init_array>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	4d0d      	ldr	r5, [pc, #52]	; (80086f0 <__libc_init_array+0x38>)
 80086bc:	4c0d      	ldr	r4, [pc, #52]	; (80086f4 <__libc_init_array+0x3c>)
 80086be:	1b64      	subs	r4, r4, r5
 80086c0:	10a4      	asrs	r4, r4, #2
 80086c2:	2600      	movs	r6, #0
 80086c4:	42a6      	cmp	r6, r4
 80086c6:	d109      	bne.n	80086dc <__libc_init_array+0x24>
 80086c8:	4d0b      	ldr	r5, [pc, #44]	; (80086f8 <__libc_init_array+0x40>)
 80086ca:	4c0c      	ldr	r4, [pc, #48]	; (80086fc <__libc_init_array+0x44>)
 80086cc:	f004 fb08 	bl	800cce0 <_init>
 80086d0:	1b64      	subs	r4, r4, r5
 80086d2:	10a4      	asrs	r4, r4, #2
 80086d4:	2600      	movs	r6, #0
 80086d6:	42a6      	cmp	r6, r4
 80086d8:	d105      	bne.n	80086e6 <__libc_init_array+0x2e>
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e0:	4798      	blx	r3
 80086e2:	3601      	adds	r6, #1
 80086e4:	e7ee      	b.n	80086c4 <__libc_init_array+0xc>
 80086e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ea:	4798      	blx	r3
 80086ec:	3601      	adds	r6, #1
 80086ee:	e7f2      	b.n	80086d6 <__libc_init_array+0x1e>
 80086f0:	0800f6f4 	.word	0x0800f6f4
 80086f4:	0800f6f4 	.word	0x0800f6f4
 80086f8:	0800f6f4 	.word	0x0800f6f4
 80086fc:	0800f6f8 	.word	0x0800f6f8

08008700 <__retarget_lock_init_recursive>:
 8008700:	4770      	bx	lr

08008702 <__retarget_lock_acquire_recursive>:
 8008702:	4770      	bx	lr

08008704 <__retarget_lock_release_recursive>:
 8008704:	4770      	bx	lr
	...

08008708 <malloc>:
 8008708:	4b02      	ldr	r3, [pc, #8]	; (8008714 <malloc+0xc>)
 800870a:	4601      	mov	r1, r0
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	f000 b8bd 	b.w	800888c <_malloc_r>
 8008712:	bf00      	nop
 8008714:	2000000c 	.word	0x2000000c

08008718 <free>:
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <free+0xc>)
 800871a:	4601      	mov	r1, r0
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	f000 b849 	b.w	80087b4 <_free_r>
 8008722:	bf00      	nop
 8008724:	2000000c 	.word	0x2000000c

08008728 <memcpy>:
 8008728:	440a      	add	r2, r1
 800872a:	4291      	cmp	r1, r2
 800872c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008730:	d100      	bne.n	8008734 <memcpy+0xc>
 8008732:	4770      	bx	lr
 8008734:	b510      	push	{r4, lr}
 8008736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800873a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800873e:	4291      	cmp	r1, r2
 8008740:	d1f9      	bne.n	8008736 <memcpy+0xe>
 8008742:	bd10      	pop	{r4, pc}

08008744 <memmove>:
 8008744:	4288      	cmp	r0, r1
 8008746:	b510      	push	{r4, lr}
 8008748:	eb01 0402 	add.w	r4, r1, r2
 800874c:	d902      	bls.n	8008754 <memmove+0x10>
 800874e:	4284      	cmp	r4, r0
 8008750:	4623      	mov	r3, r4
 8008752:	d807      	bhi.n	8008764 <memmove+0x20>
 8008754:	1e43      	subs	r3, r0, #1
 8008756:	42a1      	cmp	r1, r4
 8008758:	d008      	beq.n	800876c <memmove+0x28>
 800875a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800875e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008762:	e7f8      	b.n	8008756 <memmove+0x12>
 8008764:	4402      	add	r2, r0
 8008766:	4601      	mov	r1, r0
 8008768:	428a      	cmp	r2, r1
 800876a:	d100      	bne.n	800876e <memmove+0x2a>
 800876c:	bd10      	pop	{r4, pc}
 800876e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008776:	e7f7      	b.n	8008768 <memmove+0x24>

08008778 <memset>:
 8008778:	4402      	add	r2, r0
 800877a:	4603      	mov	r3, r0
 800877c:	4293      	cmp	r3, r2
 800877e:	d100      	bne.n	8008782 <memset+0xa>
 8008780:	4770      	bx	lr
 8008782:	f803 1b01 	strb.w	r1, [r3], #1
 8008786:	e7f9      	b.n	800877c <memset+0x4>

08008788 <_calloc_r>:
 8008788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800878a:	fba1 2402 	umull	r2, r4, r1, r2
 800878e:	b94c      	cbnz	r4, 80087a4 <_calloc_r+0x1c>
 8008790:	4611      	mov	r1, r2
 8008792:	9201      	str	r2, [sp, #4]
 8008794:	f000 f87a 	bl	800888c <_malloc_r>
 8008798:	9a01      	ldr	r2, [sp, #4]
 800879a:	4605      	mov	r5, r0
 800879c:	b930      	cbnz	r0, 80087ac <_calloc_r+0x24>
 800879e:	4628      	mov	r0, r5
 80087a0:	b003      	add	sp, #12
 80087a2:	bd30      	pop	{r4, r5, pc}
 80087a4:	220c      	movs	r2, #12
 80087a6:	6002      	str	r2, [r0, #0]
 80087a8:	2500      	movs	r5, #0
 80087aa:	e7f8      	b.n	800879e <_calloc_r+0x16>
 80087ac:	4621      	mov	r1, r4
 80087ae:	f7ff ffe3 	bl	8008778 <memset>
 80087b2:	e7f4      	b.n	800879e <_calloc_r+0x16>

080087b4 <_free_r>:
 80087b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087b6:	2900      	cmp	r1, #0
 80087b8:	d044      	beq.n	8008844 <_free_r+0x90>
 80087ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087be:	9001      	str	r0, [sp, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f1a1 0404 	sub.w	r4, r1, #4
 80087c6:	bfb8      	it	lt
 80087c8:	18e4      	addlt	r4, r4, r3
 80087ca:	f003 fb85 	bl	800bed8 <__malloc_lock>
 80087ce:	4a1e      	ldr	r2, [pc, #120]	; (8008848 <_free_r+0x94>)
 80087d0:	9801      	ldr	r0, [sp, #4]
 80087d2:	6813      	ldr	r3, [r2, #0]
 80087d4:	b933      	cbnz	r3, 80087e4 <_free_r+0x30>
 80087d6:	6063      	str	r3, [r4, #4]
 80087d8:	6014      	str	r4, [r2, #0]
 80087da:	b003      	add	sp, #12
 80087dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087e0:	f003 bb80 	b.w	800bee4 <__malloc_unlock>
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	d908      	bls.n	80087fa <_free_r+0x46>
 80087e8:	6825      	ldr	r5, [r4, #0]
 80087ea:	1961      	adds	r1, r4, r5
 80087ec:	428b      	cmp	r3, r1
 80087ee:	bf01      	itttt	eq
 80087f0:	6819      	ldreq	r1, [r3, #0]
 80087f2:	685b      	ldreq	r3, [r3, #4]
 80087f4:	1949      	addeq	r1, r1, r5
 80087f6:	6021      	streq	r1, [r4, #0]
 80087f8:	e7ed      	b.n	80087d6 <_free_r+0x22>
 80087fa:	461a      	mov	r2, r3
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	b10b      	cbz	r3, 8008804 <_free_r+0x50>
 8008800:	42a3      	cmp	r3, r4
 8008802:	d9fa      	bls.n	80087fa <_free_r+0x46>
 8008804:	6811      	ldr	r1, [r2, #0]
 8008806:	1855      	adds	r5, r2, r1
 8008808:	42a5      	cmp	r5, r4
 800880a:	d10b      	bne.n	8008824 <_free_r+0x70>
 800880c:	6824      	ldr	r4, [r4, #0]
 800880e:	4421      	add	r1, r4
 8008810:	1854      	adds	r4, r2, r1
 8008812:	42a3      	cmp	r3, r4
 8008814:	6011      	str	r1, [r2, #0]
 8008816:	d1e0      	bne.n	80087da <_free_r+0x26>
 8008818:	681c      	ldr	r4, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	6053      	str	r3, [r2, #4]
 800881e:	4421      	add	r1, r4
 8008820:	6011      	str	r1, [r2, #0]
 8008822:	e7da      	b.n	80087da <_free_r+0x26>
 8008824:	d902      	bls.n	800882c <_free_r+0x78>
 8008826:	230c      	movs	r3, #12
 8008828:	6003      	str	r3, [r0, #0]
 800882a:	e7d6      	b.n	80087da <_free_r+0x26>
 800882c:	6825      	ldr	r5, [r4, #0]
 800882e:	1961      	adds	r1, r4, r5
 8008830:	428b      	cmp	r3, r1
 8008832:	bf04      	itt	eq
 8008834:	6819      	ldreq	r1, [r3, #0]
 8008836:	685b      	ldreq	r3, [r3, #4]
 8008838:	6063      	str	r3, [r4, #4]
 800883a:	bf04      	itt	eq
 800883c:	1949      	addeq	r1, r1, r5
 800883e:	6021      	streq	r1, [r4, #0]
 8008840:	6054      	str	r4, [r2, #4]
 8008842:	e7ca      	b.n	80087da <_free_r+0x26>
 8008844:	b003      	add	sp, #12
 8008846:	bd30      	pop	{r4, r5, pc}
 8008848:	20000ee0 	.word	0x20000ee0

0800884c <sbrk_aligned>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4e0e      	ldr	r6, [pc, #56]	; (8008888 <sbrk_aligned+0x3c>)
 8008850:	460c      	mov	r4, r1
 8008852:	6831      	ldr	r1, [r6, #0]
 8008854:	4605      	mov	r5, r0
 8008856:	b911      	cbnz	r1, 800885e <sbrk_aligned+0x12>
 8008858:	f001 f8b2 	bl	80099c0 <_sbrk_r>
 800885c:	6030      	str	r0, [r6, #0]
 800885e:	4621      	mov	r1, r4
 8008860:	4628      	mov	r0, r5
 8008862:	f001 f8ad 	bl	80099c0 <_sbrk_r>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	d00a      	beq.n	8008880 <sbrk_aligned+0x34>
 800886a:	1cc4      	adds	r4, r0, #3
 800886c:	f024 0403 	bic.w	r4, r4, #3
 8008870:	42a0      	cmp	r0, r4
 8008872:	d007      	beq.n	8008884 <sbrk_aligned+0x38>
 8008874:	1a21      	subs	r1, r4, r0
 8008876:	4628      	mov	r0, r5
 8008878:	f001 f8a2 	bl	80099c0 <_sbrk_r>
 800887c:	3001      	adds	r0, #1
 800887e:	d101      	bne.n	8008884 <sbrk_aligned+0x38>
 8008880:	f04f 34ff 	mov.w	r4, #4294967295
 8008884:	4620      	mov	r0, r4
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	20000ee4 	.word	0x20000ee4

0800888c <_malloc_r>:
 800888c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008890:	1ccd      	adds	r5, r1, #3
 8008892:	f025 0503 	bic.w	r5, r5, #3
 8008896:	3508      	adds	r5, #8
 8008898:	2d0c      	cmp	r5, #12
 800889a:	bf38      	it	cc
 800889c:	250c      	movcc	r5, #12
 800889e:	2d00      	cmp	r5, #0
 80088a0:	4607      	mov	r7, r0
 80088a2:	db01      	blt.n	80088a8 <_malloc_r+0x1c>
 80088a4:	42a9      	cmp	r1, r5
 80088a6:	d905      	bls.n	80088b4 <_malloc_r+0x28>
 80088a8:	230c      	movs	r3, #12
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	2600      	movs	r6, #0
 80088ae:	4630      	mov	r0, r6
 80088b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b4:	4e2e      	ldr	r6, [pc, #184]	; (8008970 <_malloc_r+0xe4>)
 80088b6:	f003 fb0f 	bl	800bed8 <__malloc_lock>
 80088ba:	6833      	ldr	r3, [r6, #0]
 80088bc:	461c      	mov	r4, r3
 80088be:	bb34      	cbnz	r4, 800890e <_malloc_r+0x82>
 80088c0:	4629      	mov	r1, r5
 80088c2:	4638      	mov	r0, r7
 80088c4:	f7ff ffc2 	bl	800884c <sbrk_aligned>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	4604      	mov	r4, r0
 80088cc:	d14d      	bne.n	800896a <_malloc_r+0xde>
 80088ce:	6834      	ldr	r4, [r6, #0]
 80088d0:	4626      	mov	r6, r4
 80088d2:	2e00      	cmp	r6, #0
 80088d4:	d140      	bne.n	8008958 <_malloc_r+0xcc>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	4631      	mov	r1, r6
 80088da:	4638      	mov	r0, r7
 80088dc:	eb04 0803 	add.w	r8, r4, r3
 80088e0:	f001 f86e 	bl	80099c0 <_sbrk_r>
 80088e4:	4580      	cmp	r8, r0
 80088e6:	d13a      	bne.n	800895e <_malloc_r+0xd2>
 80088e8:	6821      	ldr	r1, [r4, #0]
 80088ea:	3503      	adds	r5, #3
 80088ec:	1a6d      	subs	r5, r5, r1
 80088ee:	f025 0503 	bic.w	r5, r5, #3
 80088f2:	3508      	adds	r5, #8
 80088f4:	2d0c      	cmp	r5, #12
 80088f6:	bf38      	it	cc
 80088f8:	250c      	movcc	r5, #12
 80088fa:	4629      	mov	r1, r5
 80088fc:	4638      	mov	r0, r7
 80088fe:	f7ff ffa5 	bl	800884c <sbrk_aligned>
 8008902:	3001      	adds	r0, #1
 8008904:	d02b      	beq.n	800895e <_malloc_r+0xd2>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	442b      	add	r3, r5
 800890a:	6023      	str	r3, [r4, #0]
 800890c:	e00e      	b.n	800892c <_malloc_r+0xa0>
 800890e:	6822      	ldr	r2, [r4, #0]
 8008910:	1b52      	subs	r2, r2, r5
 8008912:	d41e      	bmi.n	8008952 <_malloc_r+0xc6>
 8008914:	2a0b      	cmp	r2, #11
 8008916:	d916      	bls.n	8008946 <_malloc_r+0xba>
 8008918:	1961      	adds	r1, r4, r5
 800891a:	42a3      	cmp	r3, r4
 800891c:	6025      	str	r5, [r4, #0]
 800891e:	bf18      	it	ne
 8008920:	6059      	strne	r1, [r3, #4]
 8008922:	6863      	ldr	r3, [r4, #4]
 8008924:	bf08      	it	eq
 8008926:	6031      	streq	r1, [r6, #0]
 8008928:	5162      	str	r2, [r4, r5]
 800892a:	604b      	str	r3, [r1, #4]
 800892c:	4638      	mov	r0, r7
 800892e:	f104 060b 	add.w	r6, r4, #11
 8008932:	f003 fad7 	bl	800bee4 <__malloc_unlock>
 8008936:	f026 0607 	bic.w	r6, r6, #7
 800893a:	1d23      	adds	r3, r4, #4
 800893c:	1af2      	subs	r2, r6, r3
 800893e:	d0b6      	beq.n	80088ae <_malloc_r+0x22>
 8008940:	1b9b      	subs	r3, r3, r6
 8008942:	50a3      	str	r3, [r4, r2]
 8008944:	e7b3      	b.n	80088ae <_malloc_r+0x22>
 8008946:	6862      	ldr	r2, [r4, #4]
 8008948:	42a3      	cmp	r3, r4
 800894a:	bf0c      	ite	eq
 800894c:	6032      	streq	r2, [r6, #0]
 800894e:	605a      	strne	r2, [r3, #4]
 8008950:	e7ec      	b.n	800892c <_malloc_r+0xa0>
 8008952:	4623      	mov	r3, r4
 8008954:	6864      	ldr	r4, [r4, #4]
 8008956:	e7b2      	b.n	80088be <_malloc_r+0x32>
 8008958:	4634      	mov	r4, r6
 800895a:	6876      	ldr	r6, [r6, #4]
 800895c:	e7b9      	b.n	80088d2 <_malloc_r+0x46>
 800895e:	230c      	movs	r3, #12
 8008960:	603b      	str	r3, [r7, #0]
 8008962:	4638      	mov	r0, r7
 8008964:	f003 fabe 	bl	800bee4 <__malloc_unlock>
 8008968:	e7a1      	b.n	80088ae <_malloc_r+0x22>
 800896a:	6025      	str	r5, [r4, #0]
 800896c:	e7de      	b.n	800892c <_malloc_r+0xa0>
 800896e:	bf00      	nop
 8008970:	20000ee0 	.word	0x20000ee0

08008974 <__sfputc_r>:
 8008974:	6893      	ldr	r3, [r2, #8]
 8008976:	3b01      	subs	r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	b410      	push	{r4}
 800897c:	6093      	str	r3, [r2, #8]
 800897e:	da08      	bge.n	8008992 <__sfputc_r+0x1e>
 8008980:	6994      	ldr	r4, [r2, #24]
 8008982:	42a3      	cmp	r3, r4
 8008984:	db01      	blt.n	800898a <__sfputc_r+0x16>
 8008986:	290a      	cmp	r1, #10
 8008988:	d103      	bne.n	8008992 <__sfputc_r+0x1e>
 800898a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800898e:	f001 bf3f 	b.w	800a810 <__swbuf_r>
 8008992:	6813      	ldr	r3, [r2, #0]
 8008994:	1c58      	adds	r0, r3, #1
 8008996:	6010      	str	r0, [r2, #0]
 8008998:	7019      	strb	r1, [r3, #0]
 800899a:	4608      	mov	r0, r1
 800899c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <__sfputs_r>:
 80089a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a4:	4606      	mov	r6, r0
 80089a6:	460f      	mov	r7, r1
 80089a8:	4614      	mov	r4, r2
 80089aa:	18d5      	adds	r5, r2, r3
 80089ac:	42ac      	cmp	r4, r5
 80089ae:	d101      	bne.n	80089b4 <__sfputs_r+0x12>
 80089b0:	2000      	movs	r0, #0
 80089b2:	e007      	b.n	80089c4 <__sfputs_r+0x22>
 80089b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b8:	463a      	mov	r2, r7
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7ff ffda 	bl	8008974 <__sfputc_r>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d1f3      	bne.n	80089ac <__sfputs_r+0xa>
 80089c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089c8 <_vfiprintf_r>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	460d      	mov	r5, r1
 80089ce:	b09d      	sub	sp, #116	; 0x74
 80089d0:	4614      	mov	r4, r2
 80089d2:	4698      	mov	r8, r3
 80089d4:	4606      	mov	r6, r0
 80089d6:	b118      	cbz	r0, 80089e0 <_vfiprintf_r+0x18>
 80089d8:	6983      	ldr	r3, [r0, #24]
 80089da:	b90b      	cbnz	r3, 80089e0 <_vfiprintf_r+0x18>
 80089dc:	f7ff fd0e 	bl	80083fc <__sinit>
 80089e0:	4b89      	ldr	r3, [pc, #548]	; (8008c08 <_vfiprintf_r+0x240>)
 80089e2:	429d      	cmp	r5, r3
 80089e4:	d11b      	bne.n	8008a1e <_vfiprintf_r+0x56>
 80089e6:	6875      	ldr	r5, [r6, #4]
 80089e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ea:	07d9      	lsls	r1, r3, #31
 80089ec:	d405      	bmi.n	80089fa <_vfiprintf_r+0x32>
 80089ee:	89ab      	ldrh	r3, [r5, #12]
 80089f0:	059a      	lsls	r2, r3, #22
 80089f2:	d402      	bmi.n	80089fa <_vfiprintf_r+0x32>
 80089f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089f6:	f7ff fe84 	bl	8008702 <__retarget_lock_acquire_recursive>
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	071b      	lsls	r3, r3, #28
 80089fe:	d501      	bpl.n	8008a04 <_vfiprintf_r+0x3c>
 8008a00:	692b      	ldr	r3, [r5, #16]
 8008a02:	b9eb      	cbnz	r3, 8008a40 <_vfiprintf_r+0x78>
 8008a04:	4629      	mov	r1, r5
 8008a06:	4630      	mov	r0, r6
 8008a08:	f001 ff66 	bl	800a8d8 <__swsetup_r>
 8008a0c:	b1c0      	cbz	r0, 8008a40 <_vfiprintf_r+0x78>
 8008a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a10:	07dc      	lsls	r4, r3, #31
 8008a12:	d50e      	bpl.n	8008a32 <_vfiprintf_r+0x6a>
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	b01d      	add	sp, #116	; 0x74
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1e:	4b7b      	ldr	r3, [pc, #492]	; (8008c0c <_vfiprintf_r+0x244>)
 8008a20:	429d      	cmp	r5, r3
 8008a22:	d101      	bne.n	8008a28 <_vfiprintf_r+0x60>
 8008a24:	68b5      	ldr	r5, [r6, #8]
 8008a26:	e7df      	b.n	80089e8 <_vfiprintf_r+0x20>
 8008a28:	4b79      	ldr	r3, [pc, #484]	; (8008c10 <_vfiprintf_r+0x248>)
 8008a2a:	429d      	cmp	r5, r3
 8008a2c:	bf08      	it	eq
 8008a2e:	68f5      	ldreq	r5, [r6, #12]
 8008a30:	e7da      	b.n	80089e8 <_vfiprintf_r+0x20>
 8008a32:	89ab      	ldrh	r3, [r5, #12]
 8008a34:	0598      	lsls	r0, r3, #22
 8008a36:	d4ed      	bmi.n	8008a14 <_vfiprintf_r+0x4c>
 8008a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a3a:	f7ff fe63 	bl	8008704 <__retarget_lock_release_recursive>
 8008a3e:	e7e9      	b.n	8008a14 <_vfiprintf_r+0x4c>
 8008a40:	2300      	movs	r3, #0
 8008a42:	9309      	str	r3, [sp, #36]	; 0x24
 8008a44:	2320      	movs	r3, #32
 8008a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a4e:	2330      	movs	r3, #48	; 0x30
 8008a50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c14 <_vfiprintf_r+0x24c>
 8008a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a58:	f04f 0901 	mov.w	r9, #1
 8008a5c:	4623      	mov	r3, r4
 8008a5e:	469a      	mov	sl, r3
 8008a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a64:	b10a      	cbz	r2, 8008a6a <_vfiprintf_r+0xa2>
 8008a66:	2a25      	cmp	r2, #37	; 0x25
 8008a68:	d1f9      	bne.n	8008a5e <_vfiprintf_r+0x96>
 8008a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a6e:	d00b      	beq.n	8008a88 <_vfiprintf_r+0xc0>
 8008a70:	465b      	mov	r3, fp
 8008a72:	4622      	mov	r2, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff ff93 	bl	80089a2 <__sfputs_r>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	f000 80aa 	beq.w	8008bd6 <_vfiprintf_r+0x20e>
 8008a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a84:	445a      	add	r2, fp
 8008a86:	9209      	str	r2, [sp, #36]	; 0x24
 8008a88:	f89a 3000 	ldrb.w	r3, [sl]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 80a2 	beq.w	8008bd6 <_vfiprintf_r+0x20e>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f04f 32ff 	mov.w	r2, #4294967295
 8008a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a9c:	f10a 0a01 	add.w	sl, sl, #1
 8008aa0:	9304      	str	r3, [sp, #16]
 8008aa2:	9307      	str	r3, [sp, #28]
 8008aa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aa8:	931a      	str	r3, [sp, #104]	; 0x68
 8008aaa:	4654      	mov	r4, sl
 8008aac:	2205      	movs	r2, #5
 8008aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab2:	4858      	ldr	r0, [pc, #352]	; (8008c14 <_vfiprintf_r+0x24c>)
 8008ab4:	f7f7 fb94 	bl	80001e0 <memchr>
 8008ab8:	9a04      	ldr	r2, [sp, #16]
 8008aba:	b9d8      	cbnz	r0, 8008af4 <_vfiprintf_r+0x12c>
 8008abc:	06d1      	lsls	r1, r2, #27
 8008abe:	bf44      	itt	mi
 8008ac0:	2320      	movmi	r3, #32
 8008ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ac6:	0713      	lsls	r3, r2, #28
 8008ac8:	bf44      	itt	mi
 8008aca:	232b      	movmi	r3, #43	; 0x2b
 8008acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad6:	d015      	beq.n	8008b04 <_vfiprintf_r+0x13c>
 8008ad8:	9a07      	ldr	r2, [sp, #28]
 8008ada:	4654      	mov	r4, sl
 8008adc:	2000      	movs	r0, #0
 8008ade:	f04f 0c0a 	mov.w	ip, #10
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ae8:	3b30      	subs	r3, #48	; 0x30
 8008aea:	2b09      	cmp	r3, #9
 8008aec:	d94e      	bls.n	8008b8c <_vfiprintf_r+0x1c4>
 8008aee:	b1b0      	cbz	r0, 8008b1e <_vfiprintf_r+0x156>
 8008af0:	9207      	str	r2, [sp, #28]
 8008af2:	e014      	b.n	8008b1e <_vfiprintf_r+0x156>
 8008af4:	eba0 0308 	sub.w	r3, r0, r8
 8008af8:	fa09 f303 	lsl.w	r3, r9, r3
 8008afc:	4313      	orrs	r3, r2
 8008afe:	9304      	str	r3, [sp, #16]
 8008b00:	46a2      	mov	sl, r4
 8008b02:	e7d2      	b.n	8008aaa <_vfiprintf_r+0xe2>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	1d19      	adds	r1, r3, #4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	9103      	str	r1, [sp, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	bfbb      	ittet	lt
 8008b10:	425b      	neglt	r3, r3
 8008b12:	f042 0202 	orrlt.w	r2, r2, #2
 8008b16:	9307      	strge	r3, [sp, #28]
 8008b18:	9307      	strlt	r3, [sp, #28]
 8008b1a:	bfb8      	it	lt
 8008b1c:	9204      	strlt	r2, [sp, #16]
 8008b1e:	7823      	ldrb	r3, [r4, #0]
 8008b20:	2b2e      	cmp	r3, #46	; 0x2e
 8008b22:	d10c      	bne.n	8008b3e <_vfiprintf_r+0x176>
 8008b24:	7863      	ldrb	r3, [r4, #1]
 8008b26:	2b2a      	cmp	r3, #42	; 0x2a
 8008b28:	d135      	bne.n	8008b96 <_vfiprintf_r+0x1ce>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	1d1a      	adds	r2, r3, #4
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	9203      	str	r2, [sp, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bfb8      	it	lt
 8008b36:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b3a:	3402      	adds	r4, #2
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c24 <_vfiprintf_r+0x25c>
 8008b42:	7821      	ldrb	r1, [r4, #0]
 8008b44:	2203      	movs	r2, #3
 8008b46:	4650      	mov	r0, sl
 8008b48:	f7f7 fb4a 	bl	80001e0 <memchr>
 8008b4c:	b140      	cbz	r0, 8008b60 <_vfiprintf_r+0x198>
 8008b4e:	2340      	movs	r3, #64	; 0x40
 8008b50:	eba0 000a 	sub.w	r0, r0, sl
 8008b54:	fa03 f000 	lsl.w	r0, r3, r0
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	4303      	orrs	r3, r0
 8008b5c:	3401      	adds	r4, #1
 8008b5e:	9304      	str	r3, [sp, #16]
 8008b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b64:	482c      	ldr	r0, [pc, #176]	; (8008c18 <_vfiprintf_r+0x250>)
 8008b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b6a:	2206      	movs	r2, #6
 8008b6c:	f7f7 fb38 	bl	80001e0 <memchr>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d03f      	beq.n	8008bf4 <_vfiprintf_r+0x22c>
 8008b74:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <_vfiprintf_r+0x254>)
 8008b76:	bb1b      	cbnz	r3, 8008bc0 <_vfiprintf_r+0x1f8>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	3307      	adds	r3, #7
 8008b7c:	f023 0307 	bic.w	r3, r3, #7
 8008b80:	3308      	adds	r3, #8
 8008b82:	9303      	str	r3, [sp, #12]
 8008b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b86:	443b      	add	r3, r7
 8008b88:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8a:	e767      	b.n	8008a5c <_vfiprintf_r+0x94>
 8008b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b90:	460c      	mov	r4, r1
 8008b92:	2001      	movs	r0, #1
 8008b94:	e7a5      	b.n	8008ae2 <_vfiprintf_r+0x11a>
 8008b96:	2300      	movs	r3, #0
 8008b98:	3401      	adds	r4, #1
 8008b9a:	9305      	str	r3, [sp, #20]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f04f 0c0a 	mov.w	ip, #10
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ba8:	3a30      	subs	r2, #48	; 0x30
 8008baa:	2a09      	cmp	r2, #9
 8008bac:	d903      	bls.n	8008bb6 <_vfiprintf_r+0x1ee>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0c5      	beq.n	8008b3e <_vfiprintf_r+0x176>
 8008bb2:	9105      	str	r1, [sp, #20]
 8008bb4:	e7c3      	b.n	8008b3e <_vfiprintf_r+0x176>
 8008bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bba:	4604      	mov	r4, r0
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e7f0      	b.n	8008ba2 <_vfiprintf_r+0x1da>
 8008bc0:	ab03      	add	r3, sp, #12
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	462a      	mov	r2, r5
 8008bc6:	4b16      	ldr	r3, [pc, #88]	; (8008c20 <_vfiprintf_r+0x258>)
 8008bc8:	a904      	add	r1, sp, #16
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 f8d6 	bl	8008d7c <_printf_float>
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	1c78      	adds	r0, r7, #1
 8008bd4:	d1d6      	bne.n	8008b84 <_vfiprintf_r+0x1bc>
 8008bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bd8:	07d9      	lsls	r1, r3, #31
 8008bda:	d405      	bmi.n	8008be8 <_vfiprintf_r+0x220>
 8008bdc:	89ab      	ldrh	r3, [r5, #12]
 8008bde:	059a      	lsls	r2, r3, #22
 8008be0:	d402      	bmi.n	8008be8 <_vfiprintf_r+0x220>
 8008be2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008be4:	f7ff fd8e 	bl	8008704 <__retarget_lock_release_recursive>
 8008be8:	89ab      	ldrh	r3, [r5, #12]
 8008bea:	065b      	lsls	r3, r3, #25
 8008bec:	f53f af12 	bmi.w	8008a14 <_vfiprintf_r+0x4c>
 8008bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bf2:	e711      	b.n	8008a18 <_vfiprintf_r+0x50>
 8008bf4:	ab03      	add	r3, sp, #12
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	462a      	mov	r2, r5
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <_vfiprintf_r+0x258>)
 8008bfc:	a904      	add	r1, sp, #16
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f000 fb60 	bl	80092c4 <_printf_i>
 8008c04:	e7e4      	b.n	8008bd0 <_vfiprintf_r+0x208>
 8008c06:	bf00      	nop
 8008c08:	0800f3a4 	.word	0x0800f3a4
 8008c0c:	0800f3c4 	.word	0x0800f3c4
 8008c10:	0800f384 	.word	0x0800f384
 8008c14:	0800f3e8 	.word	0x0800f3e8
 8008c18:	0800f3f2 	.word	0x0800f3f2
 8008c1c:	08008d7d 	.word	0x08008d7d
 8008c20:	080089a3 	.word	0x080089a3
 8008c24:	0800f3ee 	.word	0x0800f3ee

08008c28 <vfiprintf>:
 8008c28:	4613      	mov	r3, r2
 8008c2a:	460a      	mov	r2, r1
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	4802      	ldr	r0, [pc, #8]	; (8008c38 <vfiprintf+0x10>)
 8008c30:	6800      	ldr	r0, [r0, #0]
 8008c32:	f7ff bec9 	b.w	80089c8 <_vfiprintf_r>
 8008c36:	bf00      	nop
 8008c38:	2000000c 	.word	0x2000000c

08008c3c <__cvt>:
 8008c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	ec55 4b10 	vmov	r4, r5, d0
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	460e      	mov	r6, r1
 8008c48:	4619      	mov	r1, r3
 8008c4a:	462b      	mov	r3, r5
 8008c4c:	bfbb      	ittet	lt
 8008c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c52:	461d      	movlt	r5, r3
 8008c54:	2300      	movge	r3, #0
 8008c56:	232d      	movlt	r3, #45	; 0x2d
 8008c58:	700b      	strb	r3, [r1, #0]
 8008c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c60:	4691      	mov	r9, r2
 8008c62:	f023 0820 	bic.w	r8, r3, #32
 8008c66:	bfbc      	itt	lt
 8008c68:	4622      	movlt	r2, r4
 8008c6a:	4614      	movlt	r4, r2
 8008c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c70:	d005      	beq.n	8008c7e <__cvt+0x42>
 8008c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c76:	d100      	bne.n	8008c7a <__cvt+0x3e>
 8008c78:	3601      	adds	r6, #1
 8008c7a:	2102      	movs	r1, #2
 8008c7c:	e000      	b.n	8008c80 <__cvt+0x44>
 8008c7e:	2103      	movs	r1, #3
 8008c80:	ab03      	add	r3, sp, #12
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	ab02      	add	r3, sp, #8
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	ec45 4b10 	vmov	d0, r4, r5
 8008c8c:	4653      	mov	r3, sl
 8008c8e:	4632      	mov	r2, r6
 8008c90:	f001 ff36 	bl	800ab00 <_dtoa_r>
 8008c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c98:	4607      	mov	r7, r0
 8008c9a:	d102      	bne.n	8008ca2 <__cvt+0x66>
 8008c9c:	f019 0f01 	tst.w	r9, #1
 8008ca0:	d022      	beq.n	8008ce8 <__cvt+0xac>
 8008ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ca6:	eb07 0906 	add.w	r9, r7, r6
 8008caa:	d110      	bne.n	8008cce <__cvt+0x92>
 8008cac:	783b      	ldrb	r3, [r7, #0]
 8008cae:	2b30      	cmp	r3, #48	; 0x30
 8008cb0:	d10a      	bne.n	8008cc8 <__cvt+0x8c>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4629      	mov	r1, r5
 8008cba:	f7f7 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cbe:	b918      	cbnz	r0, 8008cc8 <__cvt+0x8c>
 8008cc0:	f1c6 0601 	rsb	r6, r6, #1
 8008cc4:	f8ca 6000 	str.w	r6, [sl]
 8008cc8:	f8da 3000 	ldr.w	r3, [sl]
 8008ccc:	4499      	add	r9, r3
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cda:	b108      	cbz	r0, 8008ce0 <__cvt+0xa4>
 8008cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ce0:	2230      	movs	r2, #48	; 0x30
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	454b      	cmp	r3, r9
 8008ce6:	d307      	bcc.n	8008cf8 <__cvt+0xbc>
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cec:	1bdb      	subs	r3, r3, r7
 8008cee:	4638      	mov	r0, r7
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	b004      	add	sp, #16
 8008cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf8:	1c59      	adds	r1, r3, #1
 8008cfa:	9103      	str	r1, [sp, #12]
 8008cfc:	701a      	strb	r2, [r3, #0]
 8008cfe:	e7f0      	b.n	8008ce2 <__cvt+0xa6>

08008d00 <__exponent>:
 8008d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d02:	4603      	mov	r3, r0
 8008d04:	2900      	cmp	r1, #0
 8008d06:	bfb8      	it	lt
 8008d08:	4249      	neglt	r1, r1
 8008d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8008d0e:	bfb4      	ite	lt
 8008d10:	222d      	movlt	r2, #45	; 0x2d
 8008d12:	222b      	movge	r2, #43	; 0x2b
 8008d14:	2909      	cmp	r1, #9
 8008d16:	7042      	strb	r2, [r0, #1]
 8008d18:	dd2a      	ble.n	8008d70 <__exponent+0x70>
 8008d1a:	f10d 0407 	add.w	r4, sp, #7
 8008d1e:	46a4      	mov	ip, r4
 8008d20:	270a      	movs	r7, #10
 8008d22:	46a6      	mov	lr, r4
 8008d24:	460a      	mov	r2, r1
 8008d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d2a:	fb07 1516 	mls	r5, r7, r6, r1
 8008d2e:	3530      	adds	r5, #48	; 0x30
 8008d30:	2a63      	cmp	r2, #99	; 0x63
 8008d32:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	dcf1      	bgt.n	8008d22 <__exponent+0x22>
 8008d3e:	3130      	adds	r1, #48	; 0x30
 8008d40:	f1ae 0502 	sub.w	r5, lr, #2
 8008d44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d48:	1c44      	adds	r4, r0, #1
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4561      	cmp	r1, ip
 8008d4e:	d30a      	bcc.n	8008d66 <__exponent+0x66>
 8008d50:	f10d 0209 	add.w	r2, sp, #9
 8008d54:	eba2 020e 	sub.w	r2, r2, lr
 8008d58:	4565      	cmp	r5, ip
 8008d5a:	bf88      	it	hi
 8008d5c:	2200      	movhi	r2, #0
 8008d5e:	4413      	add	r3, r2
 8008d60:	1a18      	subs	r0, r3, r0
 8008d62:	b003      	add	sp, #12
 8008d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d6e:	e7ed      	b.n	8008d4c <__exponent+0x4c>
 8008d70:	2330      	movs	r3, #48	; 0x30
 8008d72:	3130      	adds	r1, #48	; 0x30
 8008d74:	7083      	strb	r3, [r0, #2]
 8008d76:	70c1      	strb	r1, [r0, #3]
 8008d78:	1d03      	adds	r3, r0, #4
 8008d7a:	e7f1      	b.n	8008d60 <__exponent+0x60>

08008d7c <_printf_float>:
 8008d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	ed2d 8b02 	vpush	{d8}
 8008d84:	b08d      	sub	sp, #52	; 0x34
 8008d86:	460c      	mov	r4, r1
 8008d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d8c:	4616      	mov	r6, r2
 8008d8e:	461f      	mov	r7, r3
 8008d90:	4605      	mov	r5, r0
 8008d92:	f003 f813 	bl	800bdbc <_localeconv_r>
 8008d96:	f8d0 a000 	ldr.w	sl, [r0]
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	f7f7 fa18 	bl	80001d0 <strlen>
 8008da0:	2300      	movs	r3, #0
 8008da2:	930a      	str	r3, [sp, #40]	; 0x28
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	9305      	str	r3, [sp, #20]
 8008da8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008db0:	3307      	adds	r3, #7
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	f103 0208 	add.w	r2, r3, #8
 8008dba:	f8c8 2000 	str.w	r2, [r8]
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008dc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008dd4:	ee08 0a10 	vmov	s16, r0
 8008dd8:	4b9f      	ldr	r3, [pc, #636]	; (8009058 <_printf_float+0x2dc>)
 8008dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dde:	f04f 32ff 	mov.w	r2, #4294967295
 8008de2:	f7f7 fea3 	bl	8000b2c <__aeabi_dcmpun>
 8008de6:	bb88      	cbnz	r0, 8008e4c <_printf_float+0xd0>
 8008de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dec:	4b9a      	ldr	r3, [pc, #616]	; (8009058 <_printf_float+0x2dc>)
 8008dee:	f04f 32ff 	mov.w	r2, #4294967295
 8008df2:	f7f7 fe7d 	bl	8000af0 <__aeabi_dcmple>
 8008df6:	bb48      	cbnz	r0, 8008e4c <_printf_float+0xd0>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4649      	mov	r1, r9
 8008e00:	f7f7 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8008e04:	b110      	cbz	r0, 8008e0c <_printf_float+0x90>
 8008e06:	232d      	movs	r3, #45	; 0x2d
 8008e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e0c:	4b93      	ldr	r3, [pc, #588]	; (800905c <_printf_float+0x2e0>)
 8008e0e:	4894      	ldr	r0, [pc, #592]	; (8009060 <_printf_float+0x2e4>)
 8008e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e14:	bf94      	ite	ls
 8008e16:	4698      	movls	r8, r3
 8008e18:	4680      	movhi	r8, r0
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	9b05      	ldr	r3, [sp, #20]
 8008e20:	f023 0204 	bic.w	r2, r3, #4
 8008e24:	6022      	str	r2, [r4, #0]
 8008e26:	f04f 0900 	mov.w	r9, #0
 8008e2a:	9700      	str	r7, [sp, #0]
 8008e2c:	4633      	mov	r3, r6
 8008e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f9d8 	bl	80091e8 <_printf_common>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f040 8090 	bne.w	8008f5e <_printf_float+0x1e2>
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	b00d      	add	sp, #52	; 0x34
 8008e44:	ecbd 8b02 	vpop	{d8}
 8008e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	464b      	mov	r3, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	4649      	mov	r1, r9
 8008e54:	f7f7 fe6a 	bl	8000b2c <__aeabi_dcmpun>
 8008e58:	b140      	cbz	r0, 8008e6c <_printf_float+0xf0>
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfbc      	itt	lt
 8008e60:	232d      	movlt	r3, #45	; 0x2d
 8008e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e66:	487f      	ldr	r0, [pc, #508]	; (8009064 <_printf_float+0x2e8>)
 8008e68:	4b7f      	ldr	r3, [pc, #508]	; (8009068 <_printf_float+0x2ec>)
 8008e6a:	e7d1      	b.n	8008e10 <_printf_float+0x94>
 8008e6c:	6863      	ldr	r3, [r4, #4]
 8008e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e72:	9206      	str	r2, [sp, #24]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	d13f      	bne.n	8008ef8 <_printf_float+0x17c>
 8008e78:	2306      	movs	r3, #6
 8008e7a:	6063      	str	r3, [r4, #4]
 8008e7c:	9b05      	ldr	r3, [sp, #20]
 8008e7e:	6861      	ldr	r1, [r4, #4]
 8008e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e84:	2300      	movs	r3, #0
 8008e86:	9303      	str	r3, [sp, #12]
 8008e88:	ab0a      	add	r3, sp, #40	; 0x28
 8008e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e8e:	ab09      	add	r3, sp, #36	; 0x24
 8008e90:	ec49 8b10 	vmov	d0, r8, r9
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	6022      	str	r2, [r4, #0]
 8008e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f7ff fecd 	bl	8008c3c <__cvt>
 8008ea2:	9b06      	ldr	r3, [sp, #24]
 8008ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ea6:	2b47      	cmp	r3, #71	; 0x47
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	d108      	bne.n	8008ebe <_printf_float+0x142>
 8008eac:	1cc8      	adds	r0, r1, #3
 8008eae:	db02      	blt.n	8008eb6 <_printf_float+0x13a>
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	4299      	cmp	r1, r3
 8008eb4:	dd41      	ble.n	8008f3a <_printf_float+0x1be>
 8008eb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8008eba:	fa5f fb8b 	uxtb.w	fp, fp
 8008ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ec2:	d820      	bhi.n	8008f06 <_printf_float+0x18a>
 8008ec4:	3901      	subs	r1, #1
 8008ec6:	465a      	mov	r2, fp
 8008ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8008ece:	f7ff ff17 	bl	8008d00 <__exponent>
 8008ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed4:	1813      	adds	r3, r2, r0
 8008ed6:	2a01      	cmp	r2, #1
 8008ed8:	4681      	mov	r9, r0
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	dc02      	bgt.n	8008ee4 <_printf_float+0x168>
 8008ede:	6822      	ldr	r2, [r4, #0]
 8008ee0:	07d2      	lsls	r2, r2, #31
 8008ee2:	d501      	bpl.n	8008ee8 <_printf_float+0x16c>
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	6123      	str	r3, [r4, #16]
 8008ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d09c      	beq.n	8008e2a <_printf_float+0xae>
 8008ef0:	232d      	movs	r3, #45	; 0x2d
 8008ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef6:	e798      	b.n	8008e2a <_printf_float+0xae>
 8008ef8:	9a06      	ldr	r2, [sp, #24]
 8008efa:	2a47      	cmp	r2, #71	; 0x47
 8008efc:	d1be      	bne.n	8008e7c <_printf_float+0x100>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1bc      	bne.n	8008e7c <_printf_float+0x100>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e7b9      	b.n	8008e7a <_printf_float+0xfe>
 8008f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f0a:	d118      	bne.n	8008f3e <_printf_float+0x1c2>
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	6863      	ldr	r3, [r4, #4]
 8008f10:	dd0b      	ble.n	8008f2a <_printf_float+0x1ae>
 8008f12:	6121      	str	r1, [r4, #16]
 8008f14:	b913      	cbnz	r3, 8008f1c <_printf_float+0x1a0>
 8008f16:	6822      	ldr	r2, [r4, #0]
 8008f18:	07d0      	lsls	r0, r2, #31
 8008f1a:	d502      	bpl.n	8008f22 <_printf_float+0x1a6>
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	440b      	add	r3, r1
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f24:	f04f 0900 	mov.w	r9, #0
 8008f28:	e7de      	b.n	8008ee8 <_printf_float+0x16c>
 8008f2a:	b913      	cbnz	r3, 8008f32 <_printf_float+0x1b6>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	07d2      	lsls	r2, r2, #31
 8008f30:	d501      	bpl.n	8008f36 <_printf_float+0x1ba>
 8008f32:	3302      	adds	r3, #2
 8008f34:	e7f4      	b.n	8008f20 <_printf_float+0x1a4>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e7f2      	b.n	8008f20 <_printf_float+0x1a4>
 8008f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f40:	4299      	cmp	r1, r3
 8008f42:	db05      	blt.n	8008f50 <_printf_float+0x1d4>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	6121      	str	r1, [r4, #16]
 8008f48:	07d8      	lsls	r0, r3, #31
 8008f4a:	d5ea      	bpl.n	8008f22 <_printf_float+0x1a6>
 8008f4c:	1c4b      	adds	r3, r1, #1
 8008f4e:	e7e7      	b.n	8008f20 <_printf_float+0x1a4>
 8008f50:	2900      	cmp	r1, #0
 8008f52:	bfd4      	ite	le
 8008f54:	f1c1 0202 	rsble	r2, r1, #2
 8008f58:	2201      	movgt	r2, #1
 8008f5a:	4413      	add	r3, r2
 8008f5c:	e7e0      	b.n	8008f20 <_printf_float+0x1a4>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	055a      	lsls	r2, r3, #21
 8008f62:	d407      	bmi.n	8008f74 <_printf_float+0x1f8>
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	4642      	mov	r2, r8
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b8      	blx	r7
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d12c      	bne.n	8008fcc <_printf_float+0x250>
 8008f72:	e764      	b.n	8008e3e <_printf_float+0xc2>
 8008f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f78:	f240 80e0 	bls.w	800913c <_printf_float+0x3c0>
 8008f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f80:	2200      	movs	r2, #0
 8008f82:	2300      	movs	r3, #0
 8008f84:	f7f7 fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d034      	beq.n	8008ff6 <_printf_float+0x27a>
 8008f8c:	4a37      	ldr	r2, [pc, #220]	; (800906c <_printf_float+0x2f0>)
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b8      	blx	r7
 8008f96:	3001      	adds	r0, #1
 8008f98:	f43f af51 	beq.w	8008e3e <_printf_float+0xc2>
 8008f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	db02      	blt.n	8008faa <_printf_float+0x22e>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	07d8      	lsls	r0, r3, #31
 8008fa8:	d510      	bpl.n	8008fcc <_printf_float+0x250>
 8008faa:	ee18 3a10 	vmov	r3, s16
 8008fae:	4652      	mov	r2, sl
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	47b8      	blx	r7
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f43f af41 	beq.w	8008e3e <_printf_float+0xc2>
 8008fbc:	f04f 0800 	mov.w	r8, #0
 8008fc0:	f104 091a 	add.w	r9, r4, #26
 8008fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	4543      	cmp	r3, r8
 8008fca:	dc09      	bgt.n	8008fe0 <_printf_float+0x264>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	079b      	lsls	r3, r3, #30
 8008fd0:	f100 8105 	bmi.w	80091de <_printf_float+0x462>
 8008fd4:	68e0      	ldr	r0, [r4, #12]
 8008fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd8:	4298      	cmp	r0, r3
 8008fda:	bfb8      	it	lt
 8008fdc:	4618      	movlt	r0, r3
 8008fde:	e730      	b.n	8008e42 <_printf_float+0xc6>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	464a      	mov	r2, r9
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b8      	blx	r7
 8008fea:	3001      	adds	r0, #1
 8008fec:	f43f af27 	beq.w	8008e3e <_printf_float+0xc2>
 8008ff0:	f108 0801 	add.w	r8, r8, #1
 8008ff4:	e7e6      	b.n	8008fc4 <_printf_float+0x248>
 8008ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dc39      	bgt.n	8009070 <_printf_float+0x2f4>
 8008ffc:	4a1b      	ldr	r2, [pc, #108]	; (800906c <_printf_float+0x2f0>)
 8008ffe:	2301      	movs	r3, #1
 8009000:	4631      	mov	r1, r6
 8009002:	4628      	mov	r0, r5
 8009004:	47b8      	blx	r7
 8009006:	3001      	adds	r0, #1
 8009008:	f43f af19 	beq.w	8008e3e <_printf_float+0xc2>
 800900c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009010:	4313      	orrs	r3, r2
 8009012:	d102      	bne.n	800901a <_printf_float+0x29e>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	07d9      	lsls	r1, r3, #31
 8009018:	d5d8      	bpl.n	8008fcc <_printf_float+0x250>
 800901a:	ee18 3a10 	vmov	r3, s16
 800901e:	4652      	mov	r2, sl
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	47b8      	blx	r7
 8009026:	3001      	adds	r0, #1
 8009028:	f43f af09 	beq.w	8008e3e <_printf_float+0xc2>
 800902c:	f04f 0900 	mov.w	r9, #0
 8009030:	f104 0a1a 	add.w	sl, r4, #26
 8009034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009036:	425b      	negs	r3, r3
 8009038:	454b      	cmp	r3, r9
 800903a:	dc01      	bgt.n	8009040 <_printf_float+0x2c4>
 800903c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903e:	e792      	b.n	8008f66 <_printf_float+0x1ea>
 8009040:	2301      	movs	r3, #1
 8009042:	4652      	mov	r2, sl
 8009044:	4631      	mov	r1, r6
 8009046:	4628      	mov	r0, r5
 8009048:	47b8      	blx	r7
 800904a:	3001      	adds	r0, #1
 800904c:	f43f aef7 	beq.w	8008e3e <_printf_float+0xc2>
 8009050:	f109 0901 	add.w	r9, r9, #1
 8009054:	e7ee      	b.n	8009034 <_printf_float+0x2b8>
 8009056:	bf00      	nop
 8009058:	7fefffff 	.word	0x7fefffff
 800905c:	0800f3f9 	.word	0x0800f3f9
 8009060:	0800f3fd 	.word	0x0800f3fd
 8009064:	0800f405 	.word	0x0800f405
 8009068:	0800f401 	.word	0x0800f401
 800906c:	0800f409 	.word	0x0800f409
 8009070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009074:	429a      	cmp	r2, r3
 8009076:	bfa8      	it	ge
 8009078:	461a      	movge	r2, r3
 800907a:	2a00      	cmp	r2, #0
 800907c:	4691      	mov	r9, r2
 800907e:	dc37      	bgt.n	80090f0 <_printf_float+0x374>
 8009080:	f04f 0b00 	mov.w	fp, #0
 8009084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009088:	f104 021a 	add.w	r2, r4, #26
 800908c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800908e:	9305      	str	r3, [sp, #20]
 8009090:	eba3 0309 	sub.w	r3, r3, r9
 8009094:	455b      	cmp	r3, fp
 8009096:	dc33      	bgt.n	8009100 <_printf_float+0x384>
 8009098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800909c:	429a      	cmp	r2, r3
 800909e:	db3b      	blt.n	8009118 <_printf_float+0x39c>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	07da      	lsls	r2, r3, #31
 80090a4:	d438      	bmi.n	8009118 <_printf_float+0x39c>
 80090a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a8:	9a05      	ldr	r2, [sp, #20]
 80090aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090ac:	1a9a      	subs	r2, r3, r2
 80090ae:	eba3 0901 	sub.w	r9, r3, r1
 80090b2:	4591      	cmp	r9, r2
 80090b4:	bfa8      	it	ge
 80090b6:	4691      	movge	r9, r2
 80090b8:	f1b9 0f00 	cmp.w	r9, #0
 80090bc:	dc35      	bgt.n	800912a <_printf_float+0x3ae>
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090c6:	f104 0a1a 	add.w	sl, r4, #26
 80090ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	eba3 0309 	sub.w	r3, r3, r9
 80090d4:	4543      	cmp	r3, r8
 80090d6:	f77f af79 	ble.w	8008fcc <_printf_float+0x250>
 80090da:	2301      	movs	r3, #1
 80090dc:	4652      	mov	r2, sl
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	f43f aeaa 	beq.w	8008e3e <_printf_float+0xc2>
 80090ea:	f108 0801 	add.w	r8, r8, #1
 80090ee:	e7ec      	b.n	80090ca <_printf_float+0x34e>
 80090f0:	4613      	mov	r3, r2
 80090f2:	4631      	mov	r1, r6
 80090f4:	4642      	mov	r2, r8
 80090f6:	4628      	mov	r0, r5
 80090f8:	47b8      	blx	r7
 80090fa:	3001      	adds	r0, #1
 80090fc:	d1c0      	bne.n	8009080 <_printf_float+0x304>
 80090fe:	e69e      	b.n	8008e3e <_printf_float+0xc2>
 8009100:	2301      	movs	r3, #1
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	9205      	str	r2, [sp, #20]
 8009108:	47b8      	blx	r7
 800910a:	3001      	adds	r0, #1
 800910c:	f43f ae97 	beq.w	8008e3e <_printf_float+0xc2>
 8009110:	9a05      	ldr	r2, [sp, #20]
 8009112:	f10b 0b01 	add.w	fp, fp, #1
 8009116:	e7b9      	b.n	800908c <_printf_float+0x310>
 8009118:	ee18 3a10 	vmov	r3, s16
 800911c:	4652      	mov	r2, sl
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	d1be      	bne.n	80090a6 <_printf_float+0x32a>
 8009128:	e689      	b.n	8008e3e <_printf_float+0xc2>
 800912a:	9a05      	ldr	r2, [sp, #20]
 800912c:	464b      	mov	r3, r9
 800912e:	4442      	add	r2, r8
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	d1c1      	bne.n	80090be <_printf_float+0x342>
 800913a:	e680      	b.n	8008e3e <_printf_float+0xc2>
 800913c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800913e:	2a01      	cmp	r2, #1
 8009140:	dc01      	bgt.n	8009146 <_printf_float+0x3ca>
 8009142:	07db      	lsls	r3, r3, #31
 8009144:	d538      	bpl.n	80091b8 <_printf_float+0x43c>
 8009146:	2301      	movs	r3, #1
 8009148:	4642      	mov	r2, r8
 800914a:	4631      	mov	r1, r6
 800914c:	4628      	mov	r0, r5
 800914e:	47b8      	blx	r7
 8009150:	3001      	adds	r0, #1
 8009152:	f43f ae74 	beq.w	8008e3e <_printf_float+0xc2>
 8009156:	ee18 3a10 	vmov	r3, s16
 800915a:	4652      	mov	r2, sl
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	f43f ae6b 	beq.w	8008e3e <_printf_float+0xc2>
 8009168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800916c:	2200      	movs	r2, #0
 800916e:	2300      	movs	r3, #0
 8009170:	f7f7 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009174:	b9d8      	cbnz	r0, 80091ae <_printf_float+0x432>
 8009176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009178:	f108 0201 	add.w	r2, r8, #1
 800917c:	3b01      	subs	r3, #1
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	47b8      	blx	r7
 8009184:	3001      	adds	r0, #1
 8009186:	d10e      	bne.n	80091a6 <_printf_float+0x42a>
 8009188:	e659      	b.n	8008e3e <_printf_float+0xc2>
 800918a:	2301      	movs	r3, #1
 800918c:	4652      	mov	r2, sl
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	47b8      	blx	r7
 8009194:	3001      	adds	r0, #1
 8009196:	f43f ae52 	beq.w	8008e3e <_printf_float+0xc2>
 800919a:	f108 0801 	add.w	r8, r8, #1
 800919e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a0:	3b01      	subs	r3, #1
 80091a2:	4543      	cmp	r3, r8
 80091a4:	dcf1      	bgt.n	800918a <_printf_float+0x40e>
 80091a6:	464b      	mov	r3, r9
 80091a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091ac:	e6dc      	b.n	8008f68 <_printf_float+0x1ec>
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	f104 0a1a 	add.w	sl, r4, #26
 80091b6:	e7f2      	b.n	800919e <_printf_float+0x422>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4642      	mov	r2, r8
 80091bc:	e7df      	b.n	800917e <_printf_float+0x402>
 80091be:	2301      	movs	r3, #1
 80091c0:	464a      	mov	r2, r9
 80091c2:	4631      	mov	r1, r6
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b8      	blx	r7
 80091c8:	3001      	adds	r0, #1
 80091ca:	f43f ae38 	beq.w	8008e3e <_printf_float+0xc2>
 80091ce:	f108 0801 	add.w	r8, r8, #1
 80091d2:	68e3      	ldr	r3, [r4, #12]
 80091d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091d6:	1a5b      	subs	r3, r3, r1
 80091d8:	4543      	cmp	r3, r8
 80091da:	dcf0      	bgt.n	80091be <_printf_float+0x442>
 80091dc:	e6fa      	b.n	8008fd4 <_printf_float+0x258>
 80091de:	f04f 0800 	mov.w	r8, #0
 80091e2:	f104 0919 	add.w	r9, r4, #25
 80091e6:	e7f4      	b.n	80091d2 <_printf_float+0x456>

080091e8 <_printf_common>:
 80091e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ec:	4616      	mov	r6, r2
 80091ee:	4699      	mov	r9, r3
 80091f0:	688a      	ldr	r2, [r1, #8]
 80091f2:	690b      	ldr	r3, [r1, #16]
 80091f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091f8:	4293      	cmp	r3, r2
 80091fa:	bfb8      	it	lt
 80091fc:	4613      	movlt	r3, r2
 80091fe:	6033      	str	r3, [r6, #0]
 8009200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009204:	4607      	mov	r7, r0
 8009206:	460c      	mov	r4, r1
 8009208:	b10a      	cbz	r2, 800920e <_printf_common+0x26>
 800920a:	3301      	adds	r3, #1
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	0699      	lsls	r1, r3, #26
 8009212:	bf42      	ittt	mi
 8009214:	6833      	ldrmi	r3, [r6, #0]
 8009216:	3302      	addmi	r3, #2
 8009218:	6033      	strmi	r3, [r6, #0]
 800921a:	6825      	ldr	r5, [r4, #0]
 800921c:	f015 0506 	ands.w	r5, r5, #6
 8009220:	d106      	bne.n	8009230 <_printf_common+0x48>
 8009222:	f104 0a19 	add.w	sl, r4, #25
 8009226:	68e3      	ldr	r3, [r4, #12]
 8009228:	6832      	ldr	r2, [r6, #0]
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	42ab      	cmp	r3, r5
 800922e:	dc26      	bgt.n	800927e <_printf_common+0x96>
 8009230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009234:	1e13      	subs	r3, r2, #0
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	bf18      	it	ne
 800923a:	2301      	movne	r3, #1
 800923c:	0692      	lsls	r2, r2, #26
 800923e:	d42b      	bmi.n	8009298 <_printf_common+0xb0>
 8009240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009244:	4649      	mov	r1, r9
 8009246:	4638      	mov	r0, r7
 8009248:	47c0      	blx	r8
 800924a:	3001      	adds	r0, #1
 800924c:	d01e      	beq.n	800928c <_printf_common+0xa4>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	68e5      	ldr	r5, [r4, #12]
 8009252:	6832      	ldr	r2, [r6, #0]
 8009254:	f003 0306 	and.w	r3, r3, #6
 8009258:	2b04      	cmp	r3, #4
 800925a:	bf08      	it	eq
 800925c:	1aad      	subeq	r5, r5, r2
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	6922      	ldr	r2, [r4, #16]
 8009262:	bf0c      	ite	eq
 8009264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009268:	2500      	movne	r5, #0
 800926a:	4293      	cmp	r3, r2
 800926c:	bfc4      	itt	gt
 800926e:	1a9b      	subgt	r3, r3, r2
 8009270:	18ed      	addgt	r5, r5, r3
 8009272:	2600      	movs	r6, #0
 8009274:	341a      	adds	r4, #26
 8009276:	42b5      	cmp	r5, r6
 8009278:	d11a      	bne.n	80092b0 <_printf_common+0xc8>
 800927a:	2000      	movs	r0, #0
 800927c:	e008      	b.n	8009290 <_printf_common+0xa8>
 800927e:	2301      	movs	r3, #1
 8009280:	4652      	mov	r2, sl
 8009282:	4649      	mov	r1, r9
 8009284:	4638      	mov	r0, r7
 8009286:	47c0      	blx	r8
 8009288:	3001      	adds	r0, #1
 800928a:	d103      	bne.n	8009294 <_printf_common+0xac>
 800928c:	f04f 30ff 	mov.w	r0, #4294967295
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	3501      	adds	r5, #1
 8009296:	e7c6      	b.n	8009226 <_printf_common+0x3e>
 8009298:	18e1      	adds	r1, r4, r3
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	2030      	movs	r0, #48	; 0x30
 800929e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092a2:	4422      	add	r2, r4
 80092a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092ac:	3302      	adds	r3, #2
 80092ae:	e7c7      	b.n	8009240 <_printf_common+0x58>
 80092b0:	2301      	movs	r3, #1
 80092b2:	4622      	mov	r2, r4
 80092b4:	4649      	mov	r1, r9
 80092b6:	4638      	mov	r0, r7
 80092b8:	47c0      	blx	r8
 80092ba:	3001      	adds	r0, #1
 80092bc:	d0e6      	beq.n	800928c <_printf_common+0xa4>
 80092be:	3601      	adds	r6, #1
 80092c0:	e7d9      	b.n	8009276 <_printf_common+0x8e>
	...

080092c4 <_printf_i>:
 80092c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	7e0f      	ldrb	r7, [r1, #24]
 80092ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092cc:	2f78      	cmp	r7, #120	; 0x78
 80092ce:	4691      	mov	r9, r2
 80092d0:	4680      	mov	r8, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	469a      	mov	sl, r3
 80092d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092da:	d807      	bhi.n	80092ec <_printf_i+0x28>
 80092dc:	2f62      	cmp	r7, #98	; 0x62
 80092de:	d80a      	bhi.n	80092f6 <_printf_i+0x32>
 80092e0:	2f00      	cmp	r7, #0
 80092e2:	f000 80d8 	beq.w	8009496 <_printf_i+0x1d2>
 80092e6:	2f58      	cmp	r7, #88	; 0x58
 80092e8:	f000 80a3 	beq.w	8009432 <_printf_i+0x16e>
 80092ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092f4:	e03a      	b.n	800936c <_printf_i+0xa8>
 80092f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092fa:	2b15      	cmp	r3, #21
 80092fc:	d8f6      	bhi.n	80092ec <_printf_i+0x28>
 80092fe:	a101      	add	r1, pc, #4	; (adr r1, 8009304 <_printf_i+0x40>)
 8009300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009304:	0800935d 	.word	0x0800935d
 8009308:	08009371 	.word	0x08009371
 800930c:	080092ed 	.word	0x080092ed
 8009310:	080092ed 	.word	0x080092ed
 8009314:	080092ed 	.word	0x080092ed
 8009318:	080092ed 	.word	0x080092ed
 800931c:	08009371 	.word	0x08009371
 8009320:	080092ed 	.word	0x080092ed
 8009324:	080092ed 	.word	0x080092ed
 8009328:	080092ed 	.word	0x080092ed
 800932c:	080092ed 	.word	0x080092ed
 8009330:	0800947d 	.word	0x0800947d
 8009334:	080093a1 	.word	0x080093a1
 8009338:	0800945f 	.word	0x0800945f
 800933c:	080092ed 	.word	0x080092ed
 8009340:	080092ed 	.word	0x080092ed
 8009344:	0800949f 	.word	0x0800949f
 8009348:	080092ed 	.word	0x080092ed
 800934c:	080093a1 	.word	0x080093a1
 8009350:	080092ed 	.word	0x080092ed
 8009354:	080092ed 	.word	0x080092ed
 8009358:	08009467 	.word	0x08009467
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	1d1a      	adds	r2, r3, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	602a      	str	r2, [r5, #0]
 8009364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800936c:	2301      	movs	r3, #1
 800936e:	e0a3      	b.n	80094b8 <_printf_i+0x1f4>
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	6829      	ldr	r1, [r5, #0]
 8009374:	0606      	lsls	r6, r0, #24
 8009376:	f101 0304 	add.w	r3, r1, #4
 800937a:	d50a      	bpl.n	8009392 <_printf_i+0xce>
 800937c:	680e      	ldr	r6, [r1, #0]
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	2e00      	cmp	r6, #0
 8009382:	da03      	bge.n	800938c <_printf_i+0xc8>
 8009384:	232d      	movs	r3, #45	; 0x2d
 8009386:	4276      	negs	r6, r6
 8009388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800938c:	485e      	ldr	r0, [pc, #376]	; (8009508 <_printf_i+0x244>)
 800938e:	230a      	movs	r3, #10
 8009390:	e019      	b.n	80093c6 <_printf_i+0x102>
 8009392:	680e      	ldr	r6, [r1, #0]
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800939a:	bf18      	it	ne
 800939c:	b236      	sxthne	r6, r6
 800939e:	e7ef      	b.n	8009380 <_printf_i+0xbc>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	6820      	ldr	r0, [r4, #0]
 80093a4:	1d19      	adds	r1, r3, #4
 80093a6:	6029      	str	r1, [r5, #0]
 80093a8:	0601      	lsls	r1, r0, #24
 80093aa:	d501      	bpl.n	80093b0 <_printf_i+0xec>
 80093ac:	681e      	ldr	r6, [r3, #0]
 80093ae:	e002      	b.n	80093b6 <_printf_i+0xf2>
 80093b0:	0646      	lsls	r6, r0, #25
 80093b2:	d5fb      	bpl.n	80093ac <_printf_i+0xe8>
 80093b4:	881e      	ldrh	r6, [r3, #0]
 80093b6:	4854      	ldr	r0, [pc, #336]	; (8009508 <_printf_i+0x244>)
 80093b8:	2f6f      	cmp	r7, #111	; 0x6f
 80093ba:	bf0c      	ite	eq
 80093bc:	2308      	moveq	r3, #8
 80093be:	230a      	movne	r3, #10
 80093c0:	2100      	movs	r1, #0
 80093c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093c6:	6865      	ldr	r5, [r4, #4]
 80093c8:	60a5      	str	r5, [r4, #8]
 80093ca:	2d00      	cmp	r5, #0
 80093cc:	bfa2      	ittt	ge
 80093ce:	6821      	ldrge	r1, [r4, #0]
 80093d0:	f021 0104 	bicge.w	r1, r1, #4
 80093d4:	6021      	strge	r1, [r4, #0]
 80093d6:	b90e      	cbnz	r6, 80093dc <_printf_i+0x118>
 80093d8:	2d00      	cmp	r5, #0
 80093da:	d04d      	beq.n	8009478 <_printf_i+0x1b4>
 80093dc:	4615      	mov	r5, r2
 80093de:	fbb6 f1f3 	udiv	r1, r6, r3
 80093e2:	fb03 6711 	mls	r7, r3, r1, r6
 80093e6:	5dc7      	ldrb	r7, [r0, r7]
 80093e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093ec:	4637      	mov	r7, r6
 80093ee:	42bb      	cmp	r3, r7
 80093f0:	460e      	mov	r6, r1
 80093f2:	d9f4      	bls.n	80093de <_printf_i+0x11a>
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d10b      	bne.n	8009410 <_printf_i+0x14c>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	07de      	lsls	r6, r3, #31
 80093fc:	d508      	bpl.n	8009410 <_printf_i+0x14c>
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	6861      	ldr	r1, [r4, #4]
 8009402:	4299      	cmp	r1, r3
 8009404:	bfde      	ittt	le
 8009406:	2330      	movle	r3, #48	; 0x30
 8009408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800940c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009410:	1b52      	subs	r2, r2, r5
 8009412:	6122      	str	r2, [r4, #16]
 8009414:	f8cd a000 	str.w	sl, [sp]
 8009418:	464b      	mov	r3, r9
 800941a:	aa03      	add	r2, sp, #12
 800941c:	4621      	mov	r1, r4
 800941e:	4640      	mov	r0, r8
 8009420:	f7ff fee2 	bl	80091e8 <_printf_common>
 8009424:	3001      	adds	r0, #1
 8009426:	d14c      	bne.n	80094c2 <_printf_i+0x1fe>
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	b004      	add	sp, #16
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	4835      	ldr	r0, [pc, #212]	; (8009508 <_printf_i+0x244>)
 8009434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009438:	6829      	ldr	r1, [r5, #0]
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009440:	6029      	str	r1, [r5, #0]
 8009442:	061d      	lsls	r5, r3, #24
 8009444:	d514      	bpl.n	8009470 <_printf_i+0x1ac>
 8009446:	07df      	lsls	r7, r3, #31
 8009448:	bf44      	itt	mi
 800944a:	f043 0320 	orrmi.w	r3, r3, #32
 800944e:	6023      	strmi	r3, [r4, #0]
 8009450:	b91e      	cbnz	r6, 800945a <_printf_i+0x196>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	f023 0320 	bic.w	r3, r3, #32
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	2310      	movs	r3, #16
 800945c:	e7b0      	b.n	80093c0 <_printf_i+0xfc>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	f043 0320 	orr.w	r3, r3, #32
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	2378      	movs	r3, #120	; 0x78
 8009468:	4828      	ldr	r0, [pc, #160]	; (800950c <_printf_i+0x248>)
 800946a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800946e:	e7e3      	b.n	8009438 <_printf_i+0x174>
 8009470:	0659      	lsls	r1, r3, #25
 8009472:	bf48      	it	mi
 8009474:	b2b6      	uxthmi	r6, r6
 8009476:	e7e6      	b.n	8009446 <_printf_i+0x182>
 8009478:	4615      	mov	r5, r2
 800947a:	e7bb      	b.n	80093f4 <_printf_i+0x130>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	6826      	ldr	r6, [r4, #0]
 8009480:	6961      	ldr	r1, [r4, #20]
 8009482:	1d18      	adds	r0, r3, #4
 8009484:	6028      	str	r0, [r5, #0]
 8009486:	0635      	lsls	r5, r6, #24
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	d501      	bpl.n	8009490 <_printf_i+0x1cc>
 800948c:	6019      	str	r1, [r3, #0]
 800948e:	e002      	b.n	8009496 <_printf_i+0x1d2>
 8009490:	0670      	lsls	r0, r6, #25
 8009492:	d5fb      	bpl.n	800948c <_printf_i+0x1c8>
 8009494:	8019      	strh	r1, [r3, #0]
 8009496:	2300      	movs	r3, #0
 8009498:	6123      	str	r3, [r4, #16]
 800949a:	4615      	mov	r5, r2
 800949c:	e7ba      	b.n	8009414 <_printf_i+0x150>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	1d1a      	adds	r2, r3, #4
 80094a2:	602a      	str	r2, [r5, #0]
 80094a4:	681d      	ldr	r5, [r3, #0]
 80094a6:	6862      	ldr	r2, [r4, #4]
 80094a8:	2100      	movs	r1, #0
 80094aa:	4628      	mov	r0, r5
 80094ac:	f7f6 fe98 	bl	80001e0 <memchr>
 80094b0:	b108      	cbz	r0, 80094b6 <_printf_i+0x1f2>
 80094b2:	1b40      	subs	r0, r0, r5
 80094b4:	6060      	str	r0, [r4, #4]
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	6123      	str	r3, [r4, #16]
 80094ba:	2300      	movs	r3, #0
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c0:	e7a8      	b.n	8009414 <_printf_i+0x150>
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	462a      	mov	r2, r5
 80094c6:	4649      	mov	r1, r9
 80094c8:	4640      	mov	r0, r8
 80094ca:	47d0      	blx	sl
 80094cc:	3001      	adds	r0, #1
 80094ce:	d0ab      	beq.n	8009428 <_printf_i+0x164>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	079b      	lsls	r3, r3, #30
 80094d4:	d413      	bmi.n	80094fe <_printf_i+0x23a>
 80094d6:	68e0      	ldr	r0, [r4, #12]
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	4298      	cmp	r0, r3
 80094dc:	bfb8      	it	lt
 80094de:	4618      	movlt	r0, r3
 80094e0:	e7a4      	b.n	800942c <_printf_i+0x168>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4632      	mov	r2, r6
 80094e6:	4649      	mov	r1, r9
 80094e8:	4640      	mov	r0, r8
 80094ea:	47d0      	blx	sl
 80094ec:	3001      	adds	r0, #1
 80094ee:	d09b      	beq.n	8009428 <_printf_i+0x164>
 80094f0:	3501      	adds	r5, #1
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	9903      	ldr	r1, [sp, #12]
 80094f6:	1a5b      	subs	r3, r3, r1
 80094f8:	42ab      	cmp	r3, r5
 80094fa:	dcf2      	bgt.n	80094e2 <_printf_i+0x21e>
 80094fc:	e7eb      	b.n	80094d6 <_printf_i+0x212>
 80094fe:	2500      	movs	r5, #0
 8009500:	f104 0619 	add.w	r6, r4, #25
 8009504:	e7f5      	b.n	80094f2 <_printf_i+0x22e>
 8009506:	bf00      	nop
 8009508:	0800f40b 	.word	0x0800f40b
 800950c:	0800f41c 	.word	0x0800f41c

08009510 <_scanf_float>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	b087      	sub	sp, #28
 8009516:	4617      	mov	r7, r2
 8009518:	9303      	str	r3, [sp, #12]
 800951a:	688b      	ldr	r3, [r1, #8]
 800951c:	1e5a      	subs	r2, r3, #1
 800951e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009522:	bf83      	ittte	hi
 8009524:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009528:	195b      	addhi	r3, r3, r5
 800952a:	9302      	strhi	r3, [sp, #8]
 800952c:	2300      	movls	r3, #0
 800952e:	bf86      	itte	hi
 8009530:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009534:	608b      	strhi	r3, [r1, #8]
 8009536:	9302      	strls	r3, [sp, #8]
 8009538:	680b      	ldr	r3, [r1, #0]
 800953a:	468b      	mov	fp, r1
 800953c:	2500      	movs	r5, #0
 800953e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009542:	f84b 3b1c 	str.w	r3, [fp], #28
 8009546:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800954a:	4680      	mov	r8, r0
 800954c:	460c      	mov	r4, r1
 800954e:	465e      	mov	r6, fp
 8009550:	46aa      	mov	sl, r5
 8009552:	46a9      	mov	r9, r5
 8009554:	9501      	str	r5, [sp, #4]
 8009556:	68a2      	ldr	r2, [r4, #8]
 8009558:	b152      	cbz	r2, 8009570 <_scanf_float+0x60>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b4e      	cmp	r3, #78	; 0x4e
 8009560:	d864      	bhi.n	800962c <_scanf_float+0x11c>
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d83c      	bhi.n	80095e0 <_scanf_float+0xd0>
 8009566:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800956a:	b2c8      	uxtb	r0, r1
 800956c:	280e      	cmp	r0, #14
 800956e:	d93a      	bls.n	80095e6 <_scanf_float+0xd6>
 8009570:	f1b9 0f00 	cmp.w	r9, #0
 8009574:	d003      	beq.n	800957e <_scanf_float+0x6e>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009582:	f1ba 0f01 	cmp.w	sl, #1
 8009586:	f200 8113 	bhi.w	80097b0 <_scanf_float+0x2a0>
 800958a:	455e      	cmp	r6, fp
 800958c:	f200 8105 	bhi.w	800979a <_scanf_float+0x28a>
 8009590:	2501      	movs	r5, #1
 8009592:	4628      	mov	r0, r5
 8009594:	b007      	add	sp, #28
 8009596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800959e:	2a0d      	cmp	r2, #13
 80095a0:	d8e6      	bhi.n	8009570 <_scanf_float+0x60>
 80095a2:	a101      	add	r1, pc, #4	; (adr r1, 80095a8 <_scanf_float+0x98>)
 80095a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095a8:	080096e7 	.word	0x080096e7
 80095ac:	08009571 	.word	0x08009571
 80095b0:	08009571 	.word	0x08009571
 80095b4:	08009571 	.word	0x08009571
 80095b8:	08009747 	.word	0x08009747
 80095bc:	0800971f 	.word	0x0800971f
 80095c0:	08009571 	.word	0x08009571
 80095c4:	08009571 	.word	0x08009571
 80095c8:	080096f5 	.word	0x080096f5
 80095cc:	08009571 	.word	0x08009571
 80095d0:	08009571 	.word	0x08009571
 80095d4:	08009571 	.word	0x08009571
 80095d8:	08009571 	.word	0x08009571
 80095dc:	080096ad 	.word	0x080096ad
 80095e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80095e4:	e7db      	b.n	800959e <_scanf_float+0x8e>
 80095e6:	290e      	cmp	r1, #14
 80095e8:	d8c2      	bhi.n	8009570 <_scanf_float+0x60>
 80095ea:	a001      	add	r0, pc, #4	; (adr r0, 80095f0 <_scanf_float+0xe0>)
 80095ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095f0:	0800969f 	.word	0x0800969f
 80095f4:	08009571 	.word	0x08009571
 80095f8:	0800969f 	.word	0x0800969f
 80095fc:	08009733 	.word	0x08009733
 8009600:	08009571 	.word	0x08009571
 8009604:	0800964d 	.word	0x0800964d
 8009608:	08009689 	.word	0x08009689
 800960c:	08009689 	.word	0x08009689
 8009610:	08009689 	.word	0x08009689
 8009614:	08009689 	.word	0x08009689
 8009618:	08009689 	.word	0x08009689
 800961c:	08009689 	.word	0x08009689
 8009620:	08009689 	.word	0x08009689
 8009624:	08009689 	.word	0x08009689
 8009628:	08009689 	.word	0x08009689
 800962c:	2b6e      	cmp	r3, #110	; 0x6e
 800962e:	d809      	bhi.n	8009644 <_scanf_float+0x134>
 8009630:	2b60      	cmp	r3, #96	; 0x60
 8009632:	d8b2      	bhi.n	800959a <_scanf_float+0x8a>
 8009634:	2b54      	cmp	r3, #84	; 0x54
 8009636:	d077      	beq.n	8009728 <_scanf_float+0x218>
 8009638:	2b59      	cmp	r3, #89	; 0x59
 800963a:	d199      	bne.n	8009570 <_scanf_float+0x60>
 800963c:	2d07      	cmp	r5, #7
 800963e:	d197      	bne.n	8009570 <_scanf_float+0x60>
 8009640:	2508      	movs	r5, #8
 8009642:	e029      	b.n	8009698 <_scanf_float+0x188>
 8009644:	2b74      	cmp	r3, #116	; 0x74
 8009646:	d06f      	beq.n	8009728 <_scanf_float+0x218>
 8009648:	2b79      	cmp	r3, #121	; 0x79
 800964a:	e7f6      	b.n	800963a <_scanf_float+0x12a>
 800964c:	6821      	ldr	r1, [r4, #0]
 800964e:	05c8      	lsls	r0, r1, #23
 8009650:	d51a      	bpl.n	8009688 <_scanf_float+0x178>
 8009652:	9b02      	ldr	r3, [sp, #8]
 8009654:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009658:	6021      	str	r1, [r4, #0]
 800965a:	f109 0901 	add.w	r9, r9, #1
 800965e:	b11b      	cbz	r3, 8009668 <_scanf_float+0x158>
 8009660:	3b01      	subs	r3, #1
 8009662:	3201      	adds	r2, #1
 8009664:	9302      	str	r3, [sp, #8]
 8009666:	60a2      	str	r2, [r4, #8]
 8009668:	68a3      	ldr	r3, [r4, #8]
 800966a:	3b01      	subs	r3, #1
 800966c:	60a3      	str	r3, [r4, #8]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	3301      	adds	r3, #1
 8009672:	6123      	str	r3, [r4, #16]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3b01      	subs	r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	607b      	str	r3, [r7, #4]
 800967c:	f340 8084 	ble.w	8009788 <_scanf_float+0x278>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	603b      	str	r3, [r7, #0]
 8009686:	e766      	b.n	8009556 <_scanf_float+0x46>
 8009688:	eb1a 0f05 	cmn.w	sl, r5
 800968c:	f47f af70 	bne.w	8009570 <_scanf_float+0x60>
 8009690:	6822      	ldr	r2, [r4, #0]
 8009692:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009696:	6022      	str	r2, [r4, #0]
 8009698:	f806 3b01 	strb.w	r3, [r6], #1
 800969c:	e7e4      	b.n	8009668 <_scanf_float+0x158>
 800969e:	6822      	ldr	r2, [r4, #0]
 80096a0:	0610      	lsls	r0, r2, #24
 80096a2:	f57f af65 	bpl.w	8009570 <_scanf_float+0x60>
 80096a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096aa:	e7f4      	b.n	8009696 <_scanf_float+0x186>
 80096ac:	f1ba 0f00 	cmp.w	sl, #0
 80096b0:	d10e      	bne.n	80096d0 <_scanf_float+0x1c0>
 80096b2:	f1b9 0f00 	cmp.w	r9, #0
 80096b6:	d10e      	bne.n	80096d6 <_scanf_float+0x1c6>
 80096b8:	6822      	ldr	r2, [r4, #0]
 80096ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096c2:	d108      	bne.n	80096d6 <_scanf_float+0x1c6>
 80096c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096c8:	6022      	str	r2, [r4, #0]
 80096ca:	f04f 0a01 	mov.w	sl, #1
 80096ce:	e7e3      	b.n	8009698 <_scanf_float+0x188>
 80096d0:	f1ba 0f02 	cmp.w	sl, #2
 80096d4:	d055      	beq.n	8009782 <_scanf_float+0x272>
 80096d6:	2d01      	cmp	r5, #1
 80096d8:	d002      	beq.n	80096e0 <_scanf_float+0x1d0>
 80096da:	2d04      	cmp	r5, #4
 80096dc:	f47f af48 	bne.w	8009570 <_scanf_float+0x60>
 80096e0:	3501      	adds	r5, #1
 80096e2:	b2ed      	uxtb	r5, r5
 80096e4:	e7d8      	b.n	8009698 <_scanf_float+0x188>
 80096e6:	f1ba 0f01 	cmp.w	sl, #1
 80096ea:	f47f af41 	bne.w	8009570 <_scanf_float+0x60>
 80096ee:	f04f 0a02 	mov.w	sl, #2
 80096f2:	e7d1      	b.n	8009698 <_scanf_float+0x188>
 80096f4:	b97d      	cbnz	r5, 8009716 <_scanf_float+0x206>
 80096f6:	f1b9 0f00 	cmp.w	r9, #0
 80096fa:	f47f af3c 	bne.w	8009576 <_scanf_float+0x66>
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009704:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009708:	f47f af39 	bne.w	800957e <_scanf_float+0x6e>
 800970c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009710:	6022      	str	r2, [r4, #0]
 8009712:	2501      	movs	r5, #1
 8009714:	e7c0      	b.n	8009698 <_scanf_float+0x188>
 8009716:	2d03      	cmp	r5, #3
 8009718:	d0e2      	beq.n	80096e0 <_scanf_float+0x1d0>
 800971a:	2d05      	cmp	r5, #5
 800971c:	e7de      	b.n	80096dc <_scanf_float+0x1cc>
 800971e:	2d02      	cmp	r5, #2
 8009720:	f47f af26 	bne.w	8009570 <_scanf_float+0x60>
 8009724:	2503      	movs	r5, #3
 8009726:	e7b7      	b.n	8009698 <_scanf_float+0x188>
 8009728:	2d06      	cmp	r5, #6
 800972a:	f47f af21 	bne.w	8009570 <_scanf_float+0x60>
 800972e:	2507      	movs	r5, #7
 8009730:	e7b2      	b.n	8009698 <_scanf_float+0x188>
 8009732:	6822      	ldr	r2, [r4, #0]
 8009734:	0591      	lsls	r1, r2, #22
 8009736:	f57f af1b 	bpl.w	8009570 <_scanf_float+0x60>
 800973a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800973e:	6022      	str	r2, [r4, #0]
 8009740:	f8cd 9004 	str.w	r9, [sp, #4]
 8009744:	e7a8      	b.n	8009698 <_scanf_float+0x188>
 8009746:	6822      	ldr	r2, [r4, #0]
 8009748:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800974c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009750:	d006      	beq.n	8009760 <_scanf_float+0x250>
 8009752:	0550      	lsls	r0, r2, #21
 8009754:	f57f af0c 	bpl.w	8009570 <_scanf_float+0x60>
 8009758:	f1b9 0f00 	cmp.w	r9, #0
 800975c:	f43f af0f 	beq.w	800957e <_scanf_float+0x6e>
 8009760:	0591      	lsls	r1, r2, #22
 8009762:	bf58      	it	pl
 8009764:	9901      	ldrpl	r1, [sp, #4]
 8009766:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800976a:	bf58      	it	pl
 800976c:	eba9 0101 	subpl.w	r1, r9, r1
 8009770:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009774:	bf58      	it	pl
 8009776:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800977a:	6022      	str	r2, [r4, #0]
 800977c:	f04f 0900 	mov.w	r9, #0
 8009780:	e78a      	b.n	8009698 <_scanf_float+0x188>
 8009782:	f04f 0a03 	mov.w	sl, #3
 8009786:	e787      	b.n	8009698 <_scanf_float+0x188>
 8009788:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800978c:	4639      	mov	r1, r7
 800978e:	4640      	mov	r0, r8
 8009790:	4798      	blx	r3
 8009792:	2800      	cmp	r0, #0
 8009794:	f43f aedf 	beq.w	8009556 <_scanf_float+0x46>
 8009798:	e6ea      	b.n	8009570 <_scanf_float+0x60>
 800979a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800979e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097a2:	463a      	mov	r2, r7
 80097a4:	4640      	mov	r0, r8
 80097a6:	4798      	blx	r3
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	e6ec      	b.n	800958a <_scanf_float+0x7a>
 80097b0:	1e6b      	subs	r3, r5, #1
 80097b2:	2b06      	cmp	r3, #6
 80097b4:	d825      	bhi.n	8009802 <_scanf_float+0x2f2>
 80097b6:	2d02      	cmp	r5, #2
 80097b8:	d836      	bhi.n	8009828 <_scanf_float+0x318>
 80097ba:	455e      	cmp	r6, fp
 80097bc:	f67f aee8 	bls.w	8009590 <_scanf_float+0x80>
 80097c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097c8:	463a      	mov	r2, r7
 80097ca:	4640      	mov	r0, r8
 80097cc:	4798      	blx	r3
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	6123      	str	r3, [r4, #16]
 80097d4:	e7f1      	b.n	80097ba <_scanf_float+0x2aa>
 80097d6:	9802      	ldr	r0, [sp, #8]
 80097d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80097e0:	9002      	str	r0, [sp, #8]
 80097e2:	463a      	mov	r2, r7
 80097e4:	4640      	mov	r0, r8
 80097e6:	4798      	blx	r3
 80097e8:	6923      	ldr	r3, [r4, #16]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	6123      	str	r3, [r4, #16]
 80097ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097f2:	fa5f fa8a 	uxtb.w	sl, sl
 80097f6:	f1ba 0f02 	cmp.w	sl, #2
 80097fa:	d1ec      	bne.n	80097d6 <_scanf_float+0x2c6>
 80097fc:	3d03      	subs	r5, #3
 80097fe:	b2ed      	uxtb	r5, r5
 8009800:	1b76      	subs	r6, r6, r5
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	05da      	lsls	r2, r3, #23
 8009806:	d52f      	bpl.n	8009868 <_scanf_float+0x358>
 8009808:	055b      	lsls	r3, r3, #21
 800980a:	d510      	bpl.n	800982e <_scanf_float+0x31e>
 800980c:	455e      	cmp	r6, fp
 800980e:	f67f aebf 	bls.w	8009590 <_scanf_float+0x80>
 8009812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800981a:	463a      	mov	r2, r7
 800981c:	4640      	mov	r0, r8
 800981e:	4798      	blx	r3
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	3b01      	subs	r3, #1
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	e7f1      	b.n	800980c <_scanf_float+0x2fc>
 8009828:	46aa      	mov	sl, r5
 800982a:	9602      	str	r6, [sp, #8]
 800982c:	e7df      	b.n	80097ee <_scanf_float+0x2de>
 800982e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	2965      	cmp	r1, #101	; 0x65
 8009836:	f103 33ff 	add.w	r3, r3, #4294967295
 800983a:	f106 35ff 	add.w	r5, r6, #4294967295
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	d00c      	beq.n	800985c <_scanf_float+0x34c>
 8009842:	2945      	cmp	r1, #69	; 0x45
 8009844:	d00a      	beq.n	800985c <_scanf_float+0x34c>
 8009846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800984a:	463a      	mov	r2, r7
 800984c:	4640      	mov	r0, r8
 800984e:	4798      	blx	r3
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009856:	3b01      	subs	r3, #1
 8009858:	1eb5      	subs	r5, r6, #2
 800985a:	6123      	str	r3, [r4, #16]
 800985c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009860:	463a      	mov	r2, r7
 8009862:	4640      	mov	r0, r8
 8009864:	4798      	blx	r3
 8009866:	462e      	mov	r6, r5
 8009868:	6825      	ldr	r5, [r4, #0]
 800986a:	f015 0510 	ands.w	r5, r5, #16
 800986e:	d159      	bne.n	8009924 <_scanf_float+0x414>
 8009870:	7035      	strb	r5, [r6, #0]
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800987c:	d11b      	bne.n	80098b6 <_scanf_float+0x3a6>
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	454b      	cmp	r3, r9
 8009882:	eba3 0209 	sub.w	r2, r3, r9
 8009886:	d123      	bne.n	80098d0 <_scanf_float+0x3c0>
 8009888:	2200      	movs	r2, #0
 800988a:	4659      	mov	r1, fp
 800988c:	4640      	mov	r0, r8
 800988e:	f000 ff35 	bl	800a6fc <_strtod_r>
 8009892:	6822      	ldr	r2, [r4, #0]
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	f012 0f02 	tst.w	r2, #2
 800989a:	ec57 6b10 	vmov	r6, r7, d0
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	d021      	beq.n	80098e6 <_scanf_float+0x3d6>
 80098a2:	9903      	ldr	r1, [sp, #12]
 80098a4:	1d1a      	adds	r2, r3, #4
 80098a6:	600a      	str	r2, [r1, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	e9c3 6700 	strd	r6, r7, [r3]
 80098ae:	68e3      	ldr	r3, [r4, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	60e3      	str	r3, [r4, #12]
 80098b4:	e66d      	b.n	8009592 <_scanf_float+0x82>
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0e5      	beq.n	8009888 <_scanf_float+0x378>
 80098bc:	9905      	ldr	r1, [sp, #20]
 80098be:	230a      	movs	r3, #10
 80098c0:	462a      	mov	r2, r5
 80098c2:	3101      	adds	r1, #1
 80098c4:	4640      	mov	r0, r8
 80098c6:	f000 ffa1 	bl	800a80c <_strtol_r>
 80098ca:	9b04      	ldr	r3, [sp, #16]
 80098cc:	9e05      	ldr	r6, [sp, #20]
 80098ce:	1ac2      	subs	r2, r0, r3
 80098d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80098d4:	429e      	cmp	r6, r3
 80098d6:	bf28      	it	cs
 80098d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80098dc:	4912      	ldr	r1, [pc, #72]	; (8009928 <_scanf_float+0x418>)
 80098de:	4630      	mov	r0, r6
 80098e0:	f000 f884 	bl	80099ec <siprintf>
 80098e4:	e7d0      	b.n	8009888 <_scanf_float+0x378>
 80098e6:	9903      	ldr	r1, [sp, #12]
 80098e8:	f012 0f04 	tst.w	r2, #4
 80098ec:	f103 0204 	add.w	r2, r3, #4
 80098f0:	600a      	str	r2, [r1, #0]
 80098f2:	d1d9      	bne.n	80098a8 <_scanf_float+0x398>
 80098f4:	f8d3 8000 	ldr.w	r8, [r3]
 80098f8:	ee10 2a10 	vmov	r2, s0
 80098fc:	ee10 0a10 	vmov	r0, s0
 8009900:	463b      	mov	r3, r7
 8009902:	4639      	mov	r1, r7
 8009904:	f7f7 f912 	bl	8000b2c <__aeabi_dcmpun>
 8009908:	b128      	cbz	r0, 8009916 <_scanf_float+0x406>
 800990a:	4808      	ldr	r0, [pc, #32]	; (800992c <_scanf_float+0x41c>)
 800990c:	f000 f868 	bl	80099e0 <nanf>
 8009910:	ed88 0a00 	vstr	s0, [r8]
 8009914:	e7cb      	b.n	80098ae <_scanf_float+0x39e>
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f7 f965 	bl	8000be8 <__aeabi_d2f>
 800991e:	f8c8 0000 	str.w	r0, [r8]
 8009922:	e7c4      	b.n	80098ae <_scanf_float+0x39e>
 8009924:	2500      	movs	r5, #0
 8009926:	e634      	b.n	8009592 <_scanf_float+0x82>
 8009928:	0800f42d 	.word	0x0800f42d
 800992c:	0800f27f 	.word	0x0800f27f

08009930 <_putc_r>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	460d      	mov	r5, r1
 8009934:	4614      	mov	r4, r2
 8009936:	4606      	mov	r6, r0
 8009938:	b118      	cbz	r0, 8009942 <_putc_r+0x12>
 800993a:	6983      	ldr	r3, [r0, #24]
 800993c:	b90b      	cbnz	r3, 8009942 <_putc_r+0x12>
 800993e:	f7fe fd5d 	bl	80083fc <__sinit>
 8009942:	4b1c      	ldr	r3, [pc, #112]	; (80099b4 <_putc_r+0x84>)
 8009944:	429c      	cmp	r4, r3
 8009946:	d124      	bne.n	8009992 <_putc_r+0x62>
 8009948:	6874      	ldr	r4, [r6, #4]
 800994a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800994c:	07d8      	lsls	r0, r3, #31
 800994e:	d405      	bmi.n	800995c <_putc_r+0x2c>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	0599      	lsls	r1, r3, #22
 8009954:	d402      	bmi.n	800995c <_putc_r+0x2c>
 8009956:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009958:	f7fe fed3 	bl	8008702 <__retarget_lock_acquire_recursive>
 800995c:	68a3      	ldr	r3, [r4, #8]
 800995e:	3b01      	subs	r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	60a3      	str	r3, [r4, #8]
 8009964:	da05      	bge.n	8009972 <_putc_r+0x42>
 8009966:	69a2      	ldr	r2, [r4, #24]
 8009968:	4293      	cmp	r3, r2
 800996a:	db1c      	blt.n	80099a6 <_putc_r+0x76>
 800996c:	b2eb      	uxtb	r3, r5
 800996e:	2b0a      	cmp	r3, #10
 8009970:	d019      	beq.n	80099a6 <_putc_r+0x76>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	6022      	str	r2, [r4, #0]
 8009978:	701d      	strb	r5, [r3, #0]
 800997a:	b2ed      	uxtb	r5, r5
 800997c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800997e:	07da      	lsls	r2, r3, #31
 8009980:	d405      	bmi.n	800998e <_putc_r+0x5e>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	059b      	lsls	r3, r3, #22
 8009986:	d402      	bmi.n	800998e <_putc_r+0x5e>
 8009988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800998a:	f7fe febb 	bl	8008704 <__retarget_lock_release_recursive>
 800998e:	4628      	mov	r0, r5
 8009990:	bd70      	pop	{r4, r5, r6, pc}
 8009992:	4b09      	ldr	r3, [pc, #36]	; (80099b8 <_putc_r+0x88>)
 8009994:	429c      	cmp	r4, r3
 8009996:	d101      	bne.n	800999c <_putc_r+0x6c>
 8009998:	68b4      	ldr	r4, [r6, #8]
 800999a:	e7d6      	b.n	800994a <_putc_r+0x1a>
 800999c:	4b07      	ldr	r3, [pc, #28]	; (80099bc <_putc_r+0x8c>)
 800999e:	429c      	cmp	r4, r3
 80099a0:	bf08      	it	eq
 80099a2:	68f4      	ldreq	r4, [r6, #12]
 80099a4:	e7d1      	b.n	800994a <_putc_r+0x1a>
 80099a6:	4629      	mov	r1, r5
 80099a8:	4622      	mov	r2, r4
 80099aa:	4630      	mov	r0, r6
 80099ac:	f000 ff30 	bl	800a810 <__swbuf_r>
 80099b0:	4605      	mov	r5, r0
 80099b2:	e7e3      	b.n	800997c <_putc_r+0x4c>
 80099b4:	0800f3a4 	.word	0x0800f3a4
 80099b8:	0800f3c4 	.word	0x0800f3c4
 80099bc:	0800f384 	.word	0x0800f384

080099c0 <_sbrk_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d06      	ldr	r5, [pc, #24]	; (80099dc <_sbrk_r+0x1c>)
 80099c4:	2300      	movs	r3, #0
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	602b      	str	r3, [r5, #0]
 80099cc:	f7f7 fce4 	bl	8001398 <_sbrk>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_sbrk_r+0x1a>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_sbrk_r+0x1a>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	20000ee8 	.word	0x20000ee8

080099e0 <nanf>:
 80099e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80099e8 <nanf+0x8>
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	7fc00000 	.word	0x7fc00000

080099ec <siprintf>:
 80099ec:	b40e      	push	{r1, r2, r3}
 80099ee:	b500      	push	{lr}
 80099f0:	b09c      	sub	sp, #112	; 0x70
 80099f2:	ab1d      	add	r3, sp, #116	; 0x74
 80099f4:	9002      	str	r0, [sp, #8]
 80099f6:	9006      	str	r0, [sp, #24]
 80099f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099fc:	4809      	ldr	r0, [pc, #36]	; (8009a24 <siprintf+0x38>)
 80099fe:	9107      	str	r1, [sp, #28]
 8009a00:	9104      	str	r1, [sp, #16]
 8009a02:	4909      	ldr	r1, [pc, #36]	; (8009a28 <siprintf+0x3c>)
 8009a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a08:	9105      	str	r1, [sp, #20]
 8009a0a:	6800      	ldr	r0, [r0, #0]
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	a902      	add	r1, sp, #8
 8009a10:	f002 ffba 	bl	800c988 <_svfiprintf_r>
 8009a14:	9b02      	ldr	r3, [sp, #8]
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	b01c      	add	sp, #112	; 0x70
 8009a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a20:	b003      	add	sp, #12
 8009a22:	4770      	bx	lr
 8009a24:	2000000c 	.word	0x2000000c
 8009a28:	ffff0208 	.word	0xffff0208

08009a2c <__sread>:
 8009a2c:	b510      	push	{r4, lr}
 8009a2e:	460c      	mov	r4, r1
 8009a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a34:	f003 f8a8 	bl	800cb88 <_read_r>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	bfab      	itete	ge
 8009a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a40:	181b      	addge	r3, r3, r0
 8009a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a46:	bfac      	ite	ge
 8009a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a4a:	81a3      	strhlt	r3, [r4, #12]
 8009a4c:	bd10      	pop	{r4, pc}

08009a4e <__swrite>:
 8009a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a52:	461f      	mov	r7, r3
 8009a54:	898b      	ldrh	r3, [r1, #12]
 8009a56:	05db      	lsls	r3, r3, #23
 8009a58:	4605      	mov	r5, r0
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	4616      	mov	r6, r2
 8009a5e:	d505      	bpl.n	8009a6c <__swrite+0x1e>
 8009a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a64:	2302      	movs	r3, #2
 8009a66:	2200      	movs	r2, #0
 8009a68:	f002 f9ac 	bl	800bdc4 <_lseek_r>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	4632      	mov	r2, r6
 8009a7a:	463b      	mov	r3, r7
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a82:	f000 bf17 	b.w	800a8b4 <_write_r>

08009a86 <__sseek>:
 8009a86:	b510      	push	{r4, lr}
 8009a88:	460c      	mov	r4, r1
 8009a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8e:	f002 f999 	bl	800bdc4 <_lseek_r>
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	bf15      	itete	ne
 8009a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aa2:	81a3      	strheq	r3, [r4, #12]
 8009aa4:	bf18      	it	ne
 8009aa6:	81a3      	strhne	r3, [r4, #12]
 8009aa8:	bd10      	pop	{r4, pc}

08009aaa <__sclose>:
 8009aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aae:	f000 bf89 	b.w	800a9c4 <_close_r>

08009ab2 <sulp>:
 8009ab2:	b570      	push	{r4, r5, r6, lr}
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	ec45 4b10 	vmov	d0, r4, r5
 8009abc:	4616      	mov	r6, r2
 8009abe:	f002 fd89 	bl	800c5d4 <__ulp>
 8009ac2:	ec51 0b10 	vmov	r0, r1, d0
 8009ac6:	b17e      	cbz	r6, 8009ae8 <sulp+0x36>
 8009ac8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009acc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	dd09      	ble.n	8009ae8 <sulp+0x36>
 8009ad4:	051b      	lsls	r3, r3, #20
 8009ad6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009ada:	2400      	movs	r4, #0
 8009adc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	462b      	mov	r3, r5
 8009ae4:	f7f6 fd88 	bl	80005f8 <__aeabi_dmul>
 8009ae8:	bd70      	pop	{r4, r5, r6, pc}
 8009aea:	0000      	movs	r0, r0
 8009aec:	0000      	movs	r0, r0
	...

08009af0 <_strtod_l>:
 8009af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	ed2d 8b02 	vpush	{d8}
 8009af8:	b09d      	sub	sp, #116	; 0x74
 8009afa:	461f      	mov	r7, r3
 8009afc:	2300      	movs	r3, #0
 8009afe:	9318      	str	r3, [sp, #96]	; 0x60
 8009b00:	4ba2      	ldr	r3, [pc, #648]	; (8009d8c <_strtod_l+0x29c>)
 8009b02:	9213      	str	r2, [sp, #76]	; 0x4c
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	9305      	str	r3, [sp, #20]
 8009b08:	4604      	mov	r4, r0
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	4688      	mov	r8, r1
 8009b0e:	f7f6 fb5f 	bl	80001d0 <strlen>
 8009b12:	f04f 0a00 	mov.w	sl, #0
 8009b16:	4605      	mov	r5, r0
 8009b18:	f04f 0b00 	mov.w	fp, #0
 8009b1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009b20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	2a2b      	cmp	r2, #43	; 0x2b
 8009b26:	d04e      	beq.n	8009bc6 <_strtod_l+0xd6>
 8009b28:	d83b      	bhi.n	8009ba2 <_strtod_l+0xb2>
 8009b2a:	2a0d      	cmp	r2, #13
 8009b2c:	d834      	bhi.n	8009b98 <_strtod_l+0xa8>
 8009b2e:	2a08      	cmp	r2, #8
 8009b30:	d834      	bhi.n	8009b9c <_strtod_l+0xac>
 8009b32:	2a00      	cmp	r2, #0
 8009b34:	d03e      	beq.n	8009bb4 <_strtod_l+0xc4>
 8009b36:	2300      	movs	r3, #0
 8009b38:	930a      	str	r3, [sp, #40]	; 0x28
 8009b3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009b3c:	7833      	ldrb	r3, [r6, #0]
 8009b3e:	2b30      	cmp	r3, #48	; 0x30
 8009b40:	f040 80b0 	bne.w	8009ca4 <_strtod_l+0x1b4>
 8009b44:	7873      	ldrb	r3, [r6, #1]
 8009b46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b4a:	2b58      	cmp	r3, #88	; 0x58
 8009b4c:	d168      	bne.n	8009c20 <_strtod_l+0x130>
 8009b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	ab18      	add	r3, sp, #96	; 0x60
 8009b54:	9702      	str	r7, [sp, #8]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	4a8d      	ldr	r2, [pc, #564]	; (8009d90 <_strtod_l+0x2a0>)
 8009b5a:	ab19      	add	r3, sp, #100	; 0x64
 8009b5c:	a917      	add	r1, sp, #92	; 0x5c
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f001 fe24 	bl	800b7ac <__gethex>
 8009b64:	f010 0707 	ands.w	r7, r0, #7
 8009b68:	4605      	mov	r5, r0
 8009b6a:	d005      	beq.n	8009b78 <_strtod_l+0x88>
 8009b6c:	2f06      	cmp	r7, #6
 8009b6e:	d12c      	bne.n	8009bca <_strtod_l+0xda>
 8009b70:	3601      	adds	r6, #1
 8009b72:	2300      	movs	r3, #0
 8009b74:	9617      	str	r6, [sp, #92]	; 0x5c
 8009b76:	930a      	str	r3, [sp, #40]	; 0x28
 8009b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f040 8590 	bne.w	800a6a0 <_strtod_l+0xbb0>
 8009b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b82:	b1eb      	cbz	r3, 8009bc0 <_strtod_l+0xd0>
 8009b84:	4652      	mov	r2, sl
 8009b86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b8a:	ec43 2b10 	vmov	d0, r2, r3
 8009b8e:	b01d      	add	sp, #116	; 0x74
 8009b90:	ecbd 8b02 	vpop	{d8}
 8009b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b98:	2a20      	cmp	r2, #32
 8009b9a:	d1cc      	bne.n	8009b36 <_strtod_l+0x46>
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ba0:	e7be      	b.n	8009b20 <_strtod_l+0x30>
 8009ba2:	2a2d      	cmp	r2, #45	; 0x2d
 8009ba4:	d1c7      	bne.n	8009b36 <_strtod_l+0x46>
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	920a      	str	r2, [sp, #40]	; 0x28
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1c2      	bne.n	8009b3a <_strtod_l+0x4a>
 8009bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f040 856e 	bne.w	800a69c <_strtod_l+0xbac>
 8009bc0:	4652      	mov	r2, sl
 8009bc2:	465b      	mov	r3, fp
 8009bc4:	e7e1      	b.n	8009b8a <_strtod_l+0x9a>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	e7ee      	b.n	8009ba8 <_strtod_l+0xb8>
 8009bca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009bcc:	b13a      	cbz	r2, 8009bde <_strtod_l+0xee>
 8009bce:	2135      	movs	r1, #53	; 0x35
 8009bd0:	a81a      	add	r0, sp, #104	; 0x68
 8009bd2:	f002 fe0a 	bl	800c7ea <__copybits>
 8009bd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f002 f9c9 	bl	800bf70 <_Bfree>
 8009bde:	3f01      	subs	r7, #1
 8009be0:	2f04      	cmp	r7, #4
 8009be2:	d806      	bhi.n	8009bf2 <_strtod_l+0x102>
 8009be4:	e8df f007 	tbb	[pc, r7]
 8009be8:	1714030a 	.word	0x1714030a
 8009bec:	0a          	.byte	0x0a
 8009bed:	00          	.byte	0x00
 8009bee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009bf2:	0728      	lsls	r0, r5, #28
 8009bf4:	d5c0      	bpl.n	8009b78 <_strtod_l+0x88>
 8009bf6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009bfa:	e7bd      	b.n	8009b78 <_strtod_l+0x88>
 8009bfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009c00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009c0e:	e7f0      	b.n	8009bf2 <_strtod_l+0x102>
 8009c10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009d94 <_strtod_l+0x2a4>
 8009c14:	e7ed      	b.n	8009bf2 <_strtod_l+0x102>
 8009c16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009c1a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c1e:	e7e8      	b.n	8009bf2 <_strtod_l+0x102>
 8009c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	2b30      	cmp	r3, #48	; 0x30
 8009c2a:	d0f9      	beq.n	8009c20 <_strtod_l+0x130>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0a3      	beq.n	8009b78 <_strtod_l+0x88>
 8009c30:	2301      	movs	r3, #1
 8009c32:	f04f 0900 	mov.w	r9, #0
 8009c36:	9304      	str	r3, [sp, #16]
 8009c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c3a:	9308      	str	r3, [sp, #32]
 8009c3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009c40:	464f      	mov	r7, r9
 8009c42:	220a      	movs	r2, #10
 8009c44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009c46:	7806      	ldrb	r6, [r0, #0]
 8009c48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009c4c:	b2d9      	uxtb	r1, r3
 8009c4e:	2909      	cmp	r1, #9
 8009c50:	d92a      	bls.n	8009ca8 <_strtod_l+0x1b8>
 8009c52:	9905      	ldr	r1, [sp, #20]
 8009c54:	462a      	mov	r2, r5
 8009c56:	f002 fff7 	bl	800cc48 <strncmp>
 8009c5a:	b398      	cbz	r0, 8009cc4 <_strtod_l+0x1d4>
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	4632      	mov	r2, r6
 8009c60:	463d      	mov	r5, r7
 8009c62:	9005      	str	r0, [sp, #20]
 8009c64:	4603      	mov	r3, r0
 8009c66:	2a65      	cmp	r2, #101	; 0x65
 8009c68:	d001      	beq.n	8009c6e <_strtod_l+0x17e>
 8009c6a:	2a45      	cmp	r2, #69	; 0x45
 8009c6c:	d118      	bne.n	8009ca0 <_strtod_l+0x1b0>
 8009c6e:	b91d      	cbnz	r5, 8009c78 <_strtod_l+0x188>
 8009c70:	9a04      	ldr	r2, [sp, #16]
 8009c72:	4302      	orrs	r2, r0
 8009c74:	d09e      	beq.n	8009bb4 <_strtod_l+0xc4>
 8009c76:	2500      	movs	r5, #0
 8009c78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009c7c:	f108 0201 	add.w	r2, r8, #1
 8009c80:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009c86:	2a2b      	cmp	r2, #43	; 0x2b
 8009c88:	d075      	beq.n	8009d76 <_strtod_l+0x286>
 8009c8a:	2a2d      	cmp	r2, #45	; 0x2d
 8009c8c:	d07b      	beq.n	8009d86 <_strtod_l+0x296>
 8009c8e:	f04f 0c00 	mov.w	ip, #0
 8009c92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009c96:	2909      	cmp	r1, #9
 8009c98:	f240 8082 	bls.w	8009da0 <_strtod_l+0x2b0>
 8009c9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ca0:	2600      	movs	r6, #0
 8009ca2:	e09d      	b.n	8009de0 <_strtod_l+0x2f0>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e7c4      	b.n	8009c32 <_strtod_l+0x142>
 8009ca8:	2f08      	cmp	r7, #8
 8009caa:	bfd8      	it	le
 8009cac:	9907      	ldrle	r1, [sp, #28]
 8009cae:	f100 0001 	add.w	r0, r0, #1
 8009cb2:	bfda      	itte	le
 8009cb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cb8:	9307      	strle	r3, [sp, #28]
 8009cba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009cbe:	3701      	adds	r7, #1
 8009cc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8009cc2:	e7bf      	b.n	8009c44 <_strtod_l+0x154>
 8009cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cc6:	195a      	adds	r2, r3, r5
 8009cc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8009cca:	5d5a      	ldrb	r2, [r3, r5]
 8009ccc:	2f00      	cmp	r7, #0
 8009cce:	d037      	beq.n	8009d40 <_strtod_l+0x250>
 8009cd0:	9005      	str	r0, [sp, #20]
 8009cd2:	463d      	mov	r5, r7
 8009cd4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009cd8:	2b09      	cmp	r3, #9
 8009cda:	d912      	bls.n	8009d02 <_strtod_l+0x212>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e7c2      	b.n	8009c66 <_strtod_l+0x176>
 8009ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ce6:	785a      	ldrb	r2, [r3, #1]
 8009ce8:	3001      	adds	r0, #1
 8009cea:	2a30      	cmp	r2, #48	; 0x30
 8009cec:	d0f8      	beq.n	8009ce0 <_strtod_l+0x1f0>
 8009cee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009cf2:	2b08      	cmp	r3, #8
 8009cf4:	f200 84d9 	bhi.w	800a6aa <_strtod_l+0xbba>
 8009cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cfa:	9005      	str	r0, [sp, #20]
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	9308      	str	r3, [sp, #32]
 8009d00:	4605      	mov	r5, r0
 8009d02:	3a30      	subs	r2, #48	; 0x30
 8009d04:	f100 0301 	add.w	r3, r0, #1
 8009d08:	d014      	beq.n	8009d34 <_strtod_l+0x244>
 8009d0a:	9905      	ldr	r1, [sp, #20]
 8009d0c:	4419      	add	r1, r3
 8009d0e:	9105      	str	r1, [sp, #20]
 8009d10:	462b      	mov	r3, r5
 8009d12:	eb00 0e05 	add.w	lr, r0, r5
 8009d16:	210a      	movs	r1, #10
 8009d18:	4573      	cmp	r3, lr
 8009d1a:	d113      	bne.n	8009d44 <_strtod_l+0x254>
 8009d1c:	182b      	adds	r3, r5, r0
 8009d1e:	2b08      	cmp	r3, #8
 8009d20:	f105 0501 	add.w	r5, r5, #1
 8009d24:	4405      	add	r5, r0
 8009d26:	dc1c      	bgt.n	8009d62 <_strtod_l+0x272>
 8009d28:	9907      	ldr	r1, [sp, #28]
 8009d2a:	230a      	movs	r3, #10
 8009d2c:	fb03 2301 	mla	r3, r3, r1, r2
 8009d30:	9307      	str	r3, [sp, #28]
 8009d32:	2300      	movs	r3, #0
 8009d34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d36:	1c51      	adds	r1, r2, #1
 8009d38:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d3a:	7852      	ldrb	r2, [r2, #1]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	e7c9      	b.n	8009cd4 <_strtod_l+0x1e4>
 8009d40:	4638      	mov	r0, r7
 8009d42:	e7d2      	b.n	8009cea <_strtod_l+0x1fa>
 8009d44:	2b08      	cmp	r3, #8
 8009d46:	dc04      	bgt.n	8009d52 <_strtod_l+0x262>
 8009d48:	9e07      	ldr	r6, [sp, #28]
 8009d4a:	434e      	muls	r6, r1
 8009d4c:	9607      	str	r6, [sp, #28]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	e7e2      	b.n	8009d18 <_strtod_l+0x228>
 8009d52:	f103 0c01 	add.w	ip, r3, #1
 8009d56:	f1bc 0f10 	cmp.w	ip, #16
 8009d5a:	bfd8      	it	le
 8009d5c:	fb01 f909 	mulle.w	r9, r1, r9
 8009d60:	e7f5      	b.n	8009d4e <_strtod_l+0x25e>
 8009d62:	2d10      	cmp	r5, #16
 8009d64:	bfdc      	itt	le
 8009d66:	230a      	movle	r3, #10
 8009d68:	fb03 2909 	mlale	r9, r3, r9, r2
 8009d6c:	e7e1      	b.n	8009d32 <_strtod_l+0x242>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9305      	str	r3, [sp, #20]
 8009d72:	2301      	movs	r3, #1
 8009d74:	e77c      	b.n	8009c70 <_strtod_l+0x180>
 8009d76:	f04f 0c00 	mov.w	ip, #0
 8009d7a:	f108 0202 	add.w	r2, r8, #2
 8009d7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009d84:	e785      	b.n	8009c92 <_strtod_l+0x1a2>
 8009d86:	f04f 0c01 	mov.w	ip, #1
 8009d8a:	e7f6      	b.n	8009d7a <_strtod_l+0x28a>
 8009d8c:	0800f580 	.word	0x0800f580
 8009d90:	0800f434 	.word	0x0800f434
 8009d94:	7ff00000 	.word	0x7ff00000
 8009d98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d9a:	1c51      	adds	r1, r2, #1
 8009d9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d9e:	7852      	ldrb	r2, [r2, #1]
 8009da0:	2a30      	cmp	r2, #48	; 0x30
 8009da2:	d0f9      	beq.n	8009d98 <_strtod_l+0x2a8>
 8009da4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009da8:	2908      	cmp	r1, #8
 8009daa:	f63f af79 	bhi.w	8009ca0 <_strtod_l+0x1b0>
 8009dae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009db2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009db4:	9206      	str	r2, [sp, #24]
 8009db6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009db8:	1c51      	adds	r1, r2, #1
 8009dba:	9117      	str	r1, [sp, #92]	; 0x5c
 8009dbc:	7852      	ldrb	r2, [r2, #1]
 8009dbe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009dc2:	2e09      	cmp	r6, #9
 8009dc4:	d937      	bls.n	8009e36 <_strtod_l+0x346>
 8009dc6:	9e06      	ldr	r6, [sp, #24]
 8009dc8:	1b89      	subs	r1, r1, r6
 8009dca:	2908      	cmp	r1, #8
 8009dcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009dd0:	dc02      	bgt.n	8009dd8 <_strtod_l+0x2e8>
 8009dd2:	4576      	cmp	r6, lr
 8009dd4:	bfa8      	it	ge
 8009dd6:	4676      	movge	r6, lr
 8009dd8:	f1bc 0f00 	cmp.w	ip, #0
 8009ddc:	d000      	beq.n	8009de0 <_strtod_l+0x2f0>
 8009dde:	4276      	negs	r6, r6
 8009de0:	2d00      	cmp	r5, #0
 8009de2:	d14d      	bne.n	8009e80 <_strtod_l+0x390>
 8009de4:	9904      	ldr	r1, [sp, #16]
 8009de6:	4301      	orrs	r1, r0
 8009de8:	f47f aec6 	bne.w	8009b78 <_strtod_l+0x88>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f47f aee1 	bne.w	8009bb4 <_strtod_l+0xc4>
 8009df2:	2a69      	cmp	r2, #105	; 0x69
 8009df4:	d027      	beq.n	8009e46 <_strtod_l+0x356>
 8009df6:	dc24      	bgt.n	8009e42 <_strtod_l+0x352>
 8009df8:	2a49      	cmp	r2, #73	; 0x49
 8009dfa:	d024      	beq.n	8009e46 <_strtod_l+0x356>
 8009dfc:	2a4e      	cmp	r2, #78	; 0x4e
 8009dfe:	f47f aed9 	bne.w	8009bb4 <_strtod_l+0xc4>
 8009e02:	499f      	ldr	r1, [pc, #636]	; (800a080 <_strtod_l+0x590>)
 8009e04:	a817      	add	r0, sp, #92	; 0x5c
 8009e06:	f001 ff29 	bl	800bc5c <__match>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	f43f aed2 	beq.w	8009bb4 <_strtod_l+0xc4>
 8009e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	2b28      	cmp	r3, #40	; 0x28
 8009e16:	d12d      	bne.n	8009e74 <_strtod_l+0x384>
 8009e18:	499a      	ldr	r1, [pc, #616]	; (800a084 <_strtod_l+0x594>)
 8009e1a:	aa1a      	add	r2, sp, #104	; 0x68
 8009e1c:	a817      	add	r0, sp, #92	; 0x5c
 8009e1e:	f001 ff31 	bl	800bc84 <__hexnan>
 8009e22:	2805      	cmp	r0, #5
 8009e24:	d126      	bne.n	8009e74 <_strtod_l+0x384>
 8009e26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009e2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009e30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009e34:	e6a0      	b.n	8009b78 <_strtod_l+0x88>
 8009e36:	210a      	movs	r1, #10
 8009e38:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009e3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009e40:	e7b9      	b.n	8009db6 <_strtod_l+0x2c6>
 8009e42:	2a6e      	cmp	r2, #110	; 0x6e
 8009e44:	e7db      	b.n	8009dfe <_strtod_l+0x30e>
 8009e46:	4990      	ldr	r1, [pc, #576]	; (800a088 <_strtod_l+0x598>)
 8009e48:	a817      	add	r0, sp, #92	; 0x5c
 8009e4a:	f001 ff07 	bl	800bc5c <__match>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f43f aeb0 	beq.w	8009bb4 <_strtod_l+0xc4>
 8009e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e56:	498d      	ldr	r1, [pc, #564]	; (800a08c <_strtod_l+0x59c>)
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	a817      	add	r0, sp, #92	; 0x5c
 8009e5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e5e:	f001 fefd 	bl	800bc5c <__match>
 8009e62:	b910      	cbnz	r0, 8009e6a <_strtod_l+0x37a>
 8009e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e66:	3301      	adds	r3, #1
 8009e68:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a09c <_strtod_l+0x5ac>
 8009e6e:	f04f 0a00 	mov.w	sl, #0
 8009e72:	e681      	b.n	8009b78 <_strtod_l+0x88>
 8009e74:	4886      	ldr	r0, [pc, #536]	; (800a090 <_strtod_l+0x5a0>)
 8009e76:	f002 fe9b 	bl	800cbb0 <nan>
 8009e7a:	ec5b ab10 	vmov	sl, fp, d0
 8009e7e:	e67b      	b.n	8009b78 <_strtod_l+0x88>
 8009e80:	9b05      	ldr	r3, [sp, #20]
 8009e82:	9807      	ldr	r0, [sp, #28]
 8009e84:	1af3      	subs	r3, r6, r3
 8009e86:	2f00      	cmp	r7, #0
 8009e88:	bf08      	it	eq
 8009e8a:	462f      	moveq	r7, r5
 8009e8c:	2d10      	cmp	r5, #16
 8009e8e:	9306      	str	r3, [sp, #24]
 8009e90:	46a8      	mov	r8, r5
 8009e92:	bfa8      	it	ge
 8009e94:	f04f 0810 	movge.w	r8, #16
 8009e98:	f7f6 fb34 	bl	8000504 <__aeabi_ui2d>
 8009e9c:	2d09      	cmp	r5, #9
 8009e9e:	4682      	mov	sl, r0
 8009ea0:	468b      	mov	fp, r1
 8009ea2:	dd13      	ble.n	8009ecc <_strtod_l+0x3dc>
 8009ea4:	4b7b      	ldr	r3, [pc, #492]	; (800a094 <_strtod_l+0x5a4>)
 8009ea6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009eaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009eae:	f7f6 fba3 	bl	80005f8 <__aeabi_dmul>
 8009eb2:	4682      	mov	sl, r0
 8009eb4:	4648      	mov	r0, r9
 8009eb6:	468b      	mov	fp, r1
 8009eb8:	f7f6 fb24 	bl	8000504 <__aeabi_ui2d>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4650      	mov	r0, sl
 8009ec2:	4659      	mov	r1, fp
 8009ec4:	f7f6 f9e2 	bl	800028c <__adddf3>
 8009ec8:	4682      	mov	sl, r0
 8009eca:	468b      	mov	fp, r1
 8009ecc:	2d0f      	cmp	r5, #15
 8009ece:	dc38      	bgt.n	8009f42 <_strtod_l+0x452>
 8009ed0:	9b06      	ldr	r3, [sp, #24]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f43f ae50 	beq.w	8009b78 <_strtod_l+0x88>
 8009ed8:	dd24      	ble.n	8009f24 <_strtod_l+0x434>
 8009eda:	2b16      	cmp	r3, #22
 8009edc:	dc0b      	bgt.n	8009ef6 <_strtod_l+0x406>
 8009ede:	496d      	ldr	r1, [pc, #436]	; (800a094 <_strtod_l+0x5a4>)
 8009ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee8:	4652      	mov	r2, sl
 8009eea:	465b      	mov	r3, fp
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	468b      	mov	fp, r1
 8009ef4:	e640      	b.n	8009b78 <_strtod_l+0x88>
 8009ef6:	9a06      	ldr	r2, [sp, #24]
 8009ef8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009efc:	4293      	cmp	r3, r2
 8009efe:	db20      	blt.n	8009f42 <_strtod_l+0x452>
 8009f00:	4c64      	ldr	r4, [pc, #400]	; (800a094 <_strtod_l+0x5a4>)
 8009f02:	f1c5 050f 	rsb	r5, r5, #15
 8009f06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f0a:	4652      	mov	r2, sl
 8009f0c:	465b      	mov	r3, fp
 8009f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f12:	f7f6 fb71 	bl	80005f8 <__aeabi_dmul>
 8009f16:	9b06      	ldr	r3, [sp, #24]
 8009f18:	1b5d      	subs	r5, r3, r5
 8009f1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f22:	e7e3      	b.n	8009eec <_strtod_l+0x3fc>
 8009f24:	9b06      	ldr	r3, [sp, #24]
 8009f26:	3316      	adds	r3, #22
 8009f28:	db0b      	blt.n	8009f42 <_strtod_l+0x452>
 8009f2a:	9b05      	ldr	r3, [sp, #20]
 8009f2c:	1b9e      	subs	r6, r3, r6
 8009f2e:	4b59      	ldr	r3, [pc, #356]	; (800a094 <_strtod_l+0x5a4>)
 8009f30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009f34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f38:	4650      	mov	r0, sl
 8009f3a:	4659      	mov	r1, fp
 8009f3c:	f7f6 fc86 	bl	800084c <__aeabi_ddiv>
 8009f40:	e7d6      	b.n	8009ef0 <_strtod_l+0x400>
 8009f42:	9b06      	ldr	r3, [sp, #24]
 8009f44:	eba5 0808 	sub.w	r8, r5, r8
 8009f48:	4498      	add	r8, r3
 8009f4a:	f1b8 0f00 	cmp.w	r8, #0
 8009f4e:	dd74      	ble.n	800a03a <_strtod_l+0x54a>
 8009f50:	f018 030f 	ands.w	r3, r8, #15
 8009f54:	d00a      	beq.n	8009f6c <_strtod_l+0x47c>
 8009f56:	494f      	ldr	r1, [pc, #316]	; (800a094 <_strtod_l+0x5a4>)
 8009f58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	465b      	mov	r3, fp
 8009f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f64:	f7f6 fb48 	bl	80005f8 <__aeabi_dmul>
 8009f68:	4682      	mov	sl, r0
 8009f6a:	468b      	mov	fp, r1
 8009f6c:	f038 080f 	bics.w	r8, r8, #15
 8009f70:	d04f      	beq.n	800a012 <_strtod_l+0x522>
 8009f72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009f76:	dd22      	ble.n	8009fbe <_strtod_l+0x4ce>
 8009f78:	2500      	movs	r5, #0
 8009f7a:	462e      	mov	r6, r5
 8009f7c:	9507      	str	r5, [sp, #28]
 8009f7e:	9505      	str	r5, [sp, #20]
 8009f80:	2322      	movs	r3, #34	; 0x22
 8009f82:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a09c <_strtod_l+0x5ac>
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	f04f 0a00 	mov.w	sl, #0
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f43f adf2 	beq.w	8009b78 <_strtod_l+0x88>
 8009f94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f96:	4620      	mov	r0, r4
 8009f98:	f001 ffea 	bl	800bf70 <_Bfree>
 8009f9c:	9905      	ldr	r1, [sp, #20]
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f001 ffe6 	bl	800bf70 <_Bfree>
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f001 ffe2 	bl	800bf70 <_Bfree>
 8009fac:	9907      	ldr	r1, [sp, #28]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f001 ffde 	bl	800bf70 <_Bfree>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f001 ffda 	bl	800bf70 <_Bfree>
 8009fbc:	e5dc      	b.n	8009b78 <_strtod_l+0x88>
 8009fbe:	4b36      	ldr	r3, [pc, #216]	; (800a098 <_strtod_l+0x5a8>)
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009fc8:	4650      	mov	r0, sl
 8009fca:	4659      	mov	r1, fp
 8009fcc:	4699      	mov	r9, r3
 8009fce:	f1b8 0f01 	cmp.w	r8, #1
 8009fd2:	dc21      	bgt.n	800a018 <_strtod_l+0x528>
 8009fd4:	b10b      	cbz	r3, 8009fda <_strtod_l+0x4ea>
 8009fd6:	4682      	mov	sl, r0
 8009fd8:	468b      	mov	fp, r1
 8009fda:	4b2f      	ldr	r3, [pc, #188]	; (800a098 <_strtod_l+0x5a8>)
 8009fdc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009fe0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009fe4:	4652      	mov	r2, sl
 8009fe6:	465b      	mov	r3, fp
 8009fe8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009fec:	f7f6 fb04 	bl	80005f8 <__aeabi_dmul>
 8009ff0:	4b2a      	ldr	r3, [pc, #168]	; (800a09c <_strtod_l+0x5ac>)
 8009ff2:	460a      	mov	r2, r1
 8009ff4:	400b      	ands	r3, r1
 8009ff6:	492a      	ldr	r1, [pc, #168]	; (800a0a0 <_strtod_l+0x5b0>)
 8009ff8:	428b      	cmp	r3, r1
 8009ffa:	4682      	mov	sl, r0
 8009ffc:	d8bc      	bhi.n	8009f78 <_strtod_l+0x488>
 8009ffe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a002:	428b      	cmp	r3, r1
 800a004:	bf86      	itte	hi
 800a006:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a0a4 <_strtod_l+0x5b4>
 800a00a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a00e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a012:	2300      	movs	r3, #0
 800a014:	9304      	str	r3, [sp, #16]
 800a016:	e084      	b.n	800a122 <_strtod_l+0x632>
 800a018:	f018 0f01 	tst.w	r8, #1
 800a01c:	d005      	beq.n	800a02a <_strtod_l+0x53a>
 800a01e:	9b04      	ldr	r3, [sp, #16]
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f7f6 fae8 	bl	80005f8 <__aeabi_dmul>
 800a028:	2301      	movs	r3, #1
 800a02a:	9a04      	ldr	r2, [sp, #16]
 800a02c:	3208      	adds	r2, #8
 800a02e:	f109 0901 	add.w	r9, r9, #1
 800a032:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a036:	9204      	str	r2, [sp, #16]
 800a038:	e7c9      	b.n	8009fce <_strtod_l+0x4de>
 800a03a:	d0ea      	beq.n	800a012 <_strtod_l+0x522>
 800a03c:	f1c8 0800 	rsb	r8, r8, #0
 800a040:	f018 020f 	ands.w	r2, r8, #15
 800a044:	d00a      	beq.n	800a05c <_strtod_l+0x56c>
 800a046:	4b13      	ldr	r3, [pc, #76]	; (800a094 <_strtod_l+0x5a4>)
 800a048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a04c:	4650      	mov	r0, sl
 800a04e:	4659      	mov	r1, fp
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 fbfa 	bl	800084c <__aeabi_ddiv>
 800a058:	4682      	mov	sl, r0
 800a05a:	468b      	mov	fp, r1
 800a05c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a060:	d0d7      	beq.n	800a012 <_strtod_l+0x522>
 800a062:	f1b8 0f1f 	cmp.w	r8, #31
 800a066:	dd1f      	ble.n	800a0a8 <_strtod_l+0x5b8>
 800a068:	2500      	movs	r5, #0
 800a06a:	462e      	mov	r6, r5
 800a06c:	9507      	str	r5, [sp, #28]
 800a06e:	9505      	str	r5, [sp, #20]
 800a070:	2322      	movs	r3, #34	; 0x22
 800a072:	f04f 0a00 	mov.w	sl, #0
 800a076:	f04f 0b00 	mov.w	fp, #0
 800a07a:	6023      	str	r3, [r4, #0]
 800a07c:	e786      	b.n	8009f8c <_strtod_l+0x49c>
 800a07e:	bf00      	nop
 800a080:	0800f406 	.word	0x0800f406
 800a084:	0800f448 	.word	0x0800f448
 800a088:	0800f3fe 	.word	0x0800f3fe
 800a08c:	0800f48b 	.word	0x0800f48b
 800a090:	0800f27f 	.word	0x0800f27f
 800a094:	0800f618 	.word	0x0800f618
 800a098:	0800f5f0 	.word	0x0800f5f0
 800a09c:	7ff00000 	.word	0x7ff00000
 800a0a0:	7ca00000 	.word	0x7ca00000
 800a0a4:	7fefffff 	.word	0x7fefffff
 800a0a8:	f018 0310 	ands.w	r3, r8, #16
 800a0ac:	bf18      	it	ne
 800a0ae:	236a      	movne	r3, #106	; 0x6a
 800a0b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a460 <_strtod_l+0x970>
 800a0b4:	9304      	str	r3, [sp, #16]
 800a0b6:	4650      	mov	r0, sl
 800a0b8:	4659      	mov	r1, fp
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f018 0f01 	tst.w	r8, #1
 800a0c0:	d004      	beq.n	800a0cc <_strtod_l+0x5dc>
 800a0c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a0c6:	f7f6 fa97 	bl	80005f8 <__aeabi_dmul>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a0d0:	f109 0908 	add.w	r9, r9, #8
 800a0d4:	d1f2      	bne.n	800a0bc <_strtod_l+0x5cc>
 800a0d6:	b10b      	cbz	r3, 800a0dc <_strtod_l+0x5ec>
 800a0d8:	4682      	mov	sl, r0
 800a0da:	468b      	mov	fp, r1
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	b1c3      	cbz	r3, 800a112 <_strtod_l+0x622>
 800a0e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a0e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	4659      	mov	r1, fp
 800a0ec:	dd11      	ble.n	800a112 <_strtod_l+0x622>
 800a0ee:	2b1f      	cmp	r3, #31
 800a0f0:	f340 8124 	ble.w	800a33c <_strtod_l+0x84c>
 800a0f4:	2b34      	cmp	r3, #52	; 0x34
 800a0f6:	bfde      	ittt	le
 800a0f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a0fc:	f04f 33ff 	movle.w	r3, #4294967295
 800a100:	fa03 f202 	lslle.w	r2, r3, r2
 800a104:	f04f 0a00 	mov.w	sl, #0
 800a108:	bfcc      	ite	gt
 800a10a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a10e:	ea02 0b01 	andle.w	fp, r2, r1
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4650      	mov	r0, sl
 800a118:	4659      	mov	r1, fp
 800a11a:	f7f6 fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d1a2      	bne.n	800a068 <_strtod_l+0x578>
 800a122:	9b07      	ldr	r3, [sp, #28]
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	9908      	ldr	r1, [sp, #32]
 800a128:	462b      	mov	r3, r5
 800a12a:	463a      	mov	r2, r7
 800a12c:	4620      	mov	r0, r4
 800a12e:	f001 ff87 	bl	800c040 <__s2b>
 800a132:	9007      	str	r0, [sp, #28]
 800a134:	2800      	cmp	r0, #0
 800a136:	f43f af1f 	beq.w	8009f78 <_strtod_l+0x488>
 800a13a:	9b05      	ldr	r3, [sp, #20]
 800a13c:	1b9e      	subs	r6, r3, r6
 800a13e:	9b06      	ldr	r3, [sp, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	bfb4      	ite	lt
 800a144:	4633      	movlt	r3, r6
 800a146:	2300      	movge	r3, #0
 800a148:	930c      	str	r3, [sp, #48]	; 0x30
 800a14a:	9b06      	ldr	r3, [sp, #24]
 800a14c:	2500      	movs	r5, #0
 800a14e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a152:	9312      	str	r3, [sp, #72]	; 0x48
 800a154:	462e      	mov	r6, r5
 800a156:	9b07      	ldr	r3, [sp, #28]
 800a158:	4620      	mov	r0, r4
 800a15a:	6859      	ldr	r1, [r3, #4]
 800a15c:	f001 fec8 	bl	800bef0 <_Balloc>
 800a160:	9005      	str	r0, [sp, #20]
 800a162:	2800      	cmp	r0, #0
 800a164:	f43f af0c 	beq.w	8009f80 <_strtod_l+0x490>
 800a168:	9b07      	ldr	r3, [sp, #28]
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	3202      	adds	r2, #2
 800a16e:	f103 010c 	add.w	r1, r3, #12
 800a172:	0092      	lsls	r2, r2, #2
 800a174:	300c      	adds	r0, #12
 800a176:	f7fe fad7 	bl	8008728 <memcpy>
 800a17a:	ec4b ab10 	vmov	d0, sl, fp
 800a17e:	aa1a      	add	r2, sp, #104	; 0x68
 800a180:	a919      	add	r1, sp, #100	; 0x64
 800a182:	4620      	mov	r0, r4
 800a184:	f002 faa2 	bl	800c6cc <__d2b>
 800a188:	ec4b ab18 	vmov	d8, sl, fp
 800a18c:	9018      	str	r0, [sp, #96]	; 0x60
 800a18e:	2800      	cmp	r0, #0
 800a190:	f43f aef6 	beq.w	8009f80 <_strtod_l+0x490>
 800a194:	2101      	movs	r1, #1
 800a196:	4620      	mov	r0, r4
 800a198:	f001 ffec 	bl	800c174 <__i2b>
 800a19c:	4606      	mov	r6, r0
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	f43f aeee 	beq.w	8009f80 <_strtod_l+0x490>
 800a1a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1a6:	9904      	ldr	r1, [sp, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfab      	itete	ge
 800a1ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a1ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a1b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a1b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a1b6:	bfac      	ite	ge
 800a1b8:	eb03 0902 	addge.w	r9, r3, r2
 800a1bc:	1ad7      	sublt	r7, r2, r3
 800a1be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a1c0:	eba3 0801 	sub.w	r8, r3, r1
 800a1c4:	4490      	add	r8, r2
 800a1c6:	4ba1      	ldr	r3, [pc, #644]	; (800a44c <_strtod_l+0x95c>)
 800a1c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1cc:	4598      	cmp	r8, r3
 800a1ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a1d2:	f280 80c7 	bge.w	800a364 <_strtod_l+0x874>
 800a1d6:	eba3 0308 	sub.w	r3, r3, r8
 800a1da:	2b1f      	cmp	r3, #31
 800a1dc:	eba2 0203 	sub.w	r2, r2, r3
 800a1e0:	f04f 0101 	mov.w	r1, #1
 800a1e4:	f300 80b1 	bgt.w	800a34a <_strtod_l+0x85a>
 800a1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ec:	930d      	str	r3, [sp, #52]	; 0x34
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9308      	str	r3, [sp, #32]
 800a1f2:	eb09 0802 	add.w	r8, r9, r2
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	45c1      	cmp	r9, r8
 800a1fa:	4417      	add	r7, r2
 800a1fc:	441f      	add	r7, r3
 800a1fe:	464b      	mov	r3, r9
 800a200:	bfa8      	it	ge
 800a202:	4643      	movge	r3, r8
 800a204:	42bb      	cmp	r3, r7
 800a206:	bfa8      	it	ge
 800a208:	463b      	movge	r3, r7
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bfc2      	ittt	gt
 800a20e:	eba8 0803 	subgt.w	r8, r8, r3
 800a212:	1aff      	subgt	r7, r7, r3
 800a214:	eba9 0903 	subgt.w	r9, r9, r3
 800a218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	dd17      	ble.n	800a24e <_strtod_l+0x75e>
 800a21e:	4631      	mov	r1, r6
 800a220:	461a      	mov	r2, r3
 800a222:	4620      	mov	r0, r4
 800a224:	f002 f866 	bl	800c2f4 <__pow5mult>
 800a228:	4606      	mov	r6, r0
 800a22a:	2800      	cmp	r0, #0
 800a22c:	f43f aea8 	beq.w	8009f80 <_strtod_l+0x490>
 800a230:	4601      	mov	r1, r0
 800a232:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a234:	4620      	mov	r0, r4
 800a236:	f001 ffb3 	bl	800c1a0 <__multiply>
 800a23a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f43f ae9f 	beq.w	8009f80 <_strtod_l+0x490>
 800a242:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a244:	4620      	mov	r0, r4
 800a246:	f001 fe93 	bl	800bf70 <_Bfree>
 800a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24c:	9318      	str	r3, [sp, #96]	; 0x60
 800a24e:	f1b8 0f00 	cmp.w	r8, #0
 800a252:	f300 808c 	bgt.w	800a36e <_strtod_l+0x87e>
 800a256:	9b06      	ldr	r3, [sp, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dd08      	ble.n	800a26e <_strtod_l+0x77e>
 800a25c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a25e:	9905      	ldr	r1, [sp, #20]
 800a260:	4620      	mov	r0, r4
 800a262:	f002 f847 	bl	800c2f4 <__pow5mult>
 800a266:	9005      	str	r0, [sp, #20]
 800a268:	2800      	cmp	r0, #0
 800a26a:	f43f ae89 	beq.w	8009f80 <_strtod_l+0x490>
 800a26e:	2f00      	cmp	r7, #0
 800a270:	dd08      	ble.n	800a284 <_strtod_l+0x794>
 800a272:	9905      	ldr	r1, [sp, #20]
 800a274:	463a      	mov	r2, r7
 800a276:	4620      	mov	r0, r4
 800a278:	f002 f896 	bl	800c3a8 <__lshift>
 800a27c:	9005      	str	r0, [sp, #20]
 800a27e:	2800      	cmp	r0, #0
 800a280:	f43f ae7e 	beq.w	8009f80 <_strtod_l+0x490>
 800a284:	f1b9 0f00 	cmp.w	r9, #0
 800a288:	dd08      	ble.n	800a29c <_strtod_l+0x7ac>
 800a28a:	4631      	mov	r1, r6
 800a28c:	464a      	mov	r2, r9
 800a28e:	4620      	mov	r0, r4
 800a290:	f002 f88a 	bl	800c3a8 <__lshift>
 800a294:	4606      	mov	r6, r0
 800a296:	2800      	cmp	r0, #0
 800a298:	f43f ae72 	beq.w	8009f80 <_strtod_l+0x490>
 800a29c:	9a05      	ldr	r2, [sp, #20]
 800a29e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f002 f90d 	bl	800c4c0 <__mdiff>
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f43f ae69 	beq.w	8009f80 <_strtod_l+0x490>
 800a2ae:	68c3      	ldr	r3, [r0, #12]
 800a2b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60c3      	str	r3, [r0, #12]
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	f002 f8e6 	bl	800c488 <__mcmp>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	da60      	bge.n	800a382 <_strtod_l+0x892>
 800a2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c2:	ea53 030a 	orrs.w	r3, r3, sl
 800a2c6:	f040 8082 	bne.w	800a3ce <_strtod_l+0x8de>
 800a2ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d17d      	bne.n	800a3ce <_strtod_l+0x8de>
 800a2d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2d6:	0d1b      	lsrs	r3, r3, #20
 800a2d8:	051b      	lsls	r3, r3, #20
 800a2da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a2de:	d976      	bls.n	800a3ce <_strtod_l+0x8de>
 800a2e0:	696b      	ldr	r3, [r5, #20]
 800a2e2:	b913      	cbnz	r3, 800a2ea <_strtod_l+0x7fa>
 800a2e4:	692b      	ldr	r3, [r5, #16]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	dd71      	ble.n	800a3ce <_strtod_l+0x8de>
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f002 f85a 	bl	800c3a8 <__lshift>
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	f002 f8c6 	bl	800c488 <__mcmp>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	dd66      	ble.n	800a3ce <_strtod_l+0x8de>
 800a300:	9904      	ldr	r1, [sp, #16]
 800a302:	4a53      	ldr	r2, [pc, #332]	; (800a450 <_strtod_l+0x960>)
 800a304:	465b      	mov	r3, fp
 800a306:	2900      	cmp	r1, #0
 800a308:	f000 8081 	beq.w	800a40e <_strtod_l+0x91e>
 800a30c:	ea02 010b 	and.w	r1, r2, fp
 800a310:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a314:	dc7b      	bgt.n	800a40e <_strtod_l+0x91e>
 800a316:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a31a:	f77f aea9 	ble.w	800a070 <_strtod_l+0x580>
 800a31e:	4b4d      	ldr	r3, [pc, #308]	; (800a454 <_strtod_l+0x964>)
 800a320:	4650      	mov	r0, sl
 800a322:	4659      	mov	r1, fp
 800a324:	2200      	movs	r2, #0
 800a326:	f7f6 f967 	bl	80005f8 <__aeabi_dmul>
 800a32a:	460b      	mov	r3, r1
 800a32c:	4303      	orrs	r3, r0
 800a32e:	bf08      	it	eq
 800a330:	2322      	moveq	r3, #34	; 0x22
 800a332:	4682      	mov	sl, r0
 800a334:	468b      	mov	fp, r1
 800a336:	bf08      	it	eq
 800a338:	6023      	streq	r3, [r4, #0]
 800a33a:	e62b      	b.n	8009f94 <_strtod_l+0x4a4>
 800a33c:	f04f 32ff 	mov.w	r2, #4294967295
 800a340:	fa02 f303 	lsl.w	r3, r2, r3
 800a344:	ea03 0a0a 	and.w	sl, r3, sl
 800a348:	e6e3      	b.n	800a112 <_strtod_l+0x622>
 800a34a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a34e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a352:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a356:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a35a:	fa01 f308 	lsl.w	r3, r1, r8
 800a35e:	9308      	str	r3, [sp, #32]
 800a360:	910d      	str	r1, [sp, #52]	; 0x34
 800a362:	e746      	b.n	800a1f2 <_strtod_l+0x702>
 800a364:	2300      	movs	r3, #0
 800a366:	9308      	str	r3, [sp, #32]
 800a368:	2301      	movs	r3, #1
 800a36a:	930d      	str	r3, [sp, #52]	; 0x34
 800a36c:	e741      	b.n	800a1f2 <_strtod_l+0x702>
 800a36e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a370:	4642      	mov	r2, r8
 800a372:	4620      	mov	r0, r4
 800a374:	f002 f818 	bl	800c3a8 <__lshift>
 800a378:	9018      	str	r0, [sp, #96]	; 0x60
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f47f af6b 	bne.w	800a256 <_strtod_l+0x766>
 800a380:	e5fe      	b.n	8009f80 <_strtod_l+0x490>
 800a382:	465f      	mov	r7, fp
 800a384:	d16e      	bne.n	800a464 <_strtod_l+0x974>
 800a386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a388:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a38c:	b342      	cbz	r2, 800a3e0 <_strtod_l+0x8f0>
 800a38e:	4a32      	ldr	r2, [pc, #200]	; (800a458 <_strtod_l+0x968>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d128      	bne.n	800a3e6 <_strtod_l+0x8f6>
 800a394:	9b04      	ldr	r3, [sp, #16]
 800a396:	4651      	mov	r1, sl
 800a398:	b1eb      	cbz	r3, 800a3d6 <_strtod_l+0x8e6>
 800a39a:	4b2d      	ldr	r3, [pc, #180]	; (800a450 <_strtod_l+0x960>)
 800a39c:	403b      	ands	r3, r7
 800a39e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a6:	d819      	bhi.n	800a3dc <_strtod_l+0x8ec>
 800a3a8:	0d1b      	lsrs	r3, r3, #20
 800a3aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b2:	4299      	cmp	r1, r3
 800a3b4:	d117      	bne.n	800a3e6 <_strtod_l+0x8f6>
 800a3b6:	4b29      	ldr	r3, [pc, #164]	; (800a45c <_strtod_l+0x96c>)
 800a3b8:	429f      	cmp	r7, r3
 800a3ba:	d102      	bne.n	800a3c2 <_strtod_l+0x8d2>
 800a3bc:	3101      	adds	r1, #1
 800a3be:	f43f addf 	beq.w	8009f80 <_strtod_l+0x490>
 800a3c2:	4b23      	ldr	r3, [pc, #140]	; (800a450 <_strtod_l+0x960>)
 800a3c4:	403b      	ands	r3, r7
 800a3c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a3ca:	f04f 0a00 	mov.w	sl, #0
 800a3ce:	9b04      	ldr	r3, [sp, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1a4      	bne.n	800a31e <_strtod_l+0x82e>
 800a3d4:	e5de      	b.n	8009f94 <_strtod_l+0x4a4>
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3da:	e7ea      	b.n	800a3b2 <_strtod_l+0x8c2>
 800a3dc:	4613      	mov	r3, r2
 800a3de:	e7e8      	b.n	800a3b2 <_strtod_l+0x8c2>
 800a3e0:	ea53 030a 	orrs.w	r3, r3, sl
 800a3e4:	d08c      	beq.n	800a300 <_strtod_l+0x810>
 800a3e6:	9b08      	ldr	r3, [sp, #32]
 800a3e8:	b1db      	cbz	r3, 800a422 <_strtod_l+0x932>
 800a3ea:	423b      	tst	r3, r7
 800a3ec:	d0ef      	beq.n	800a3ce <_strtod_l+0x8de>
 800a3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f0:	9a04      	ldr	r2, [sp, #16]
 800a3f2:	4650      	mov	r0, sl
 800a3f4:	4659      	mov	r1, fp
 800a3f6:	b1c3      	cbz	r3, 800a42a <_strtod_l+0x93a>
 800a3f8:	f7ff fb5b 	bl	8009ab2 <sulp>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	ec51 0b18 	vmov	r0, r1, d8
 800a404:	f7f5 ff42 	bl	800028c <__adddf3>
 800a408:	4682      	mov	sl, r0
 800a40a:	468b      	mov	fp, r1
 800a40c:	e7df      	b.n	800a3ce <_strtod_l+0x8de>
 800a40e:	4013      	ands	r3, r2
 800a410:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a414:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a418:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a41c:	f04f 3aff 	mov.w	sl, #4294967295
 800a420:	e7d5      	b.n	800a3ce <_strtod_l+0x8de>
 800a422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a424:	ea13 0f0a 	tst.w	r3, sl
 800a428:	e7e0      	b.n	800a3ec <_strtod_l+0x8fc>
 800a42a:	f7ff fb42 	bl	8009ab2 <sulp>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	ec51 0b18 	vmov	r0, r1, d8
 800a436:	f7f5 ff27 	bl	8000288 <__aeabi_dsub>
 800a43a:	2200      	movs	r2, #0
 800a43c:	2300      	movs	r3, #0
 800a43e:	4682      	mov	sl, r0
 800a440:	468b      	mov	fp, r1
 800a442:	f7f6 fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 800a446:	2800      	cmp	r0, #0
 800a448:	d0c1      	beq.n	800a3ce <_strtod_l+0x8de>
 800a44a:	e611      	b.n	800a070 <_strtod_l+0x580>
 800a44c:	fffffc02 	.word	0xfffffc02
 800a450:	7ff00000 	.word	0x7ff00000
 800a454:	39500000 	.word	0x39500000
 800a458:	000fffff 	.word	0x000fffff
 800a45c:	7fefffff 	.word	0x7fefffff
 800a460:	0800f460 	.word	0x0800f460
 800a464:	4631      	mov	r1, r6
 800a466:	4628      	mov	r0, r5
 800a468:	f002 f98c 	bl	800c784 <__ratio>
 800a46c:	ec59 8b10 	vmov	r8, r9, d0
 800a470:	ee10 0a10 	vmov	r0, s0
 800a474:	2200      	movs	r2, #0
 800a476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a47a:	4649      	mov	r1, r9
 800a47c:	f7f6 fb38 	bl	8000af0 <__aeabi_dcmple>
 800a480:	2800      	cmp	r0, #0
 800a482:	d07a      	beq.n	800a57a <_strtod_l+0xa8a>
 800a484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a486:	2b00      	cmp	r3, #0
 800a488:	d04a      	beq.n	800a520 <_strtod_l+0xa30>
 800a48a:	4b95      	ldr	r3, [pc, #596]	; (800a6e0 <_strtod_l+0xbf0>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a492:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a6e0 <_strtod_l+0xbf0>
 800a496:	f04f 0800 	mov.w	r8, #0
 800a49a:	4b92      	ldr	r3, [pc, #584]	; (800a6e4 <_strtod_l+0xbf4>)
 800a49c:	403b      	ands	r3, r7
 800a49e:	930d      	str	r3, [sp, #52]	; 0x34
 800a4a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4a2:	4b91      	ldr	r3, [pc, #580]	; (800a6e8 <_strtod_l+0xbf8>)
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	f040 80b0 	bne.w	800a60a <_strtod_l+0xb1a>
 800a4aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a4b2:	ec4b ab10 	vmov	d0, sl, fp
 800a4b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4ba:	f002 f88b 	bl	800c5d4 <__ulp>
 800a4be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4c2:	ec53 2b10 	vmov	r2, r3, d0
 800a4c6:	f7f6 f897 	bl	80005f8 <__aeabi_dmul>
 800a4ca:	4652      	mov	r2, sl
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	f7f5 fedd 	bl	800028c <__adddf3>
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4983      	ldr	r1, [pc, #524]	; (800a6e4 <_strtod_l+0xbf4>)
 800a4d6:	4a85      	ldr	r2, [pc, #532]	; (800a6ec <_strtod_l+0xbfc>)
 800a4d8:	4019      	ands	r1, r3
 800a4da:	4291      	cmp	r1, r2
 800a4dc:	4682      	mov	sl, r0
 800a4de:	d960      	bls.n	800a5a2 <_strtod_l+0xab2>
 800a4e0:	ee18 3a90 	vmov	r3, s17
 800a4e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d104      	bne.n	800a4f6 <_strtod_l+0xa06>
 800a4ec:	ee18 3a10 	vmov	r3, s16
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	f43f ad45 	beq.w	8009f80 <_strtod_l+0x490>
 800a4f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a6f8 <_strtod_l+0xc08>
 800a4fa:	f04f 3aff 	mov.w	sl, #4294967295
 800a4fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a500:	4620      	mov	r0, r4
 800a502:	f001 fd35 	bl	800bf70 <_Bfree>
 800a506:	9905      	ldr	r1, [sp, #20]
 800a508:	4620      	mov	r0, r4
 800a50a:	f001 fd31 	bl	800bf70 <_Bfree>
 800a50e:	4631      	mov	r1, r6
 800a510:	4620      	mov	r0, r4
 800a512:	f001 fd2d 	bl	800bf70 <_Bfree>
 800a516:	4629      	mov	r1, r5
 800a518:	4620      	mov	r0, r4
 800a51a:	f001 fd29 	bl	800bf70 <_Bfree>
 800a51e:	e61a      	b.n	800a156 <_strtod_l+0x666>
 800a520:	f1ba 0f00 	cmp.w	sl, #0
 800a524:	d11b      	bne.n	800a55e <_strtod_l+0xa6e>
 800a526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a52a:	b9f3      	cbnz	r3, 800a56a <_strtod_l+0xa7a>
 800a52c:	4b6c      	ldr	r3, [pc, #432]	; (800a6e0 <_strtod_l+0xbf0>)
 800a52e:	2200      	movs	r2, #0
 800a530:	4640      	mov	r0, r8
 800a532:	4649      	mov	r1, r9
 800a534:	f7f6 fad2 	bl	8000adc <__aeabi_dcmplt>
 800a538:	b9d0      	cbnz	r0, 800a570 <_strtod_l+0xa80>
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	4b6c      	ldr	r3, [pc, #432]	; (800a6f0 <_strtod_l+0xc00>)
 800a540:	2200      	movs	r2, #0
 800a542:	f7f6 f859 	bl	80005f8 <__aeabi_dmul>
 800a546:	4680      	mov	r8, r0
 800a548:	4689      	mov	r9, r1
 800a54a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a54e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a552:	9315      	str	r3, [sp, #84]	; 0x54
 800a554:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a558:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a55c:	e79d      	b.n	800a49a <_strtod_l+0x9aa>
 800a55e:	f1ba 0f01 	cmp.w	sl, #1
 800a562:	d102      	bne.n	800a56a <_strtod_l+0xa7a>
 800a564:	2f00      	cmp	r7, #0
 800a566:	f43f ad83 	beq.w	800a070 <_strtod_l+0x580>
 800a56a:	4b62      	ldr	r3, [pc, #392]	; (800a6f4 <_strtod_l+0xc04>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	e78e      	b.n	800a48e <_strtod_l+0x99e>
 800a570:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a6f0 <_strtod_l+0xc00>
 800a574:	f04f 0800 	mov.w	r8, #0
 800a578:	e7e7      	b.n	800a54a <_strtod_l+0xa5a>
 800a57a:	4b5d      	ldr	r3, [pc, #372]	; (800a6f0 <_strtod_l+0xc00>)
 800a57c:	4640      	mov	r0, r8
 800a57e:	4649      	mov	r1, r9
 800a580:	2200      	movs	r2, #0
 800a582:	f7f6 f839 	bl	80005f8 <__aeabi_dmul>
 800a586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a588:	4680      	mov	r8, r0
 800a58a:	4689      	mov	r9, r1
 800a58c:	b933      	cbnz	r3, 800a59c <_strtod_l+0xaac>
 800a58e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a592:	900e      	str	r0, [sp, #56]	; 0x38
 800a594:	930f      	str	r3, [sp, #60]	; 0x3c
 800a596:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a59a:	e7dd      	b.n	800a558 <_strtod_l+0xa68>
 800a59c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a5a0:	e7f9      	b.n	800a596 <_strtod_l+0xaa6>
 800a5a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a5a6:	9b04      	ldr	r3, [sp, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1a8      	bne.n	800a4fe <_strtod_l+0xa0e>
 800a5ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a5b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5b2:	0d1b      	lsrs	r3, r3, #20
 800a5b4:	051b      	lsls	r3, r3, #20
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d1a1      	bne.n	800a4fe <_strtod_l+0xa0e>
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4649      	mov	r1, r9
 800a5be:	f7f6 fb7b 	bl	8000cb8 <__aeabi_d2lz>
 800a5c2:	f7f5 ffeb 	bl	800059c <__aeabi_l2d>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	f7f5 fe5b 	bl	8000288 <__aeabi_dsub>
 800a5d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5d8:	ea43 030a 	orr.w	r3, r3, sl
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	4680      	mov	r8, r0
 800a5e0:	4689      	mov	r9, r1
 800a5e2:	d055      	beq.n	800a690 <_strtod_l+0xba0>
 800a5e4:	a336      	add	r3, pc, #216	; (adr r3, 800a6c0 <_strtod_l+0xbd0>)
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	f7f6 fa77 	bl	8000adc <__aeabi_dcmplt>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f47f acd0 	bne.w	8009f94 <_strtod_l+0x4a4>
 800a5f4:	a334      	add	r3, pc, #208	; (adr r3, 800a6c8 <_strtod_l+0xbd8>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	f7f6 fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 800a602:	2800      	cmp	r0, #0
 800a604:	f43f af7b 	beq.w	800a4fe <_strtod_l+0xa0e>
 800a608:	e4c4      	b.n	8009f94 <_strtod_l+0x4a4>
 800a60a:	9b04      	ldr	r3, [sp, #16]
 800a60c:	b333      	cbz	r3, 800a65c <_strtod_l+0xb6c>
 800a60e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a610:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a614:	d822      	bhi.n	800a65c <_strtod_l+0xb6c>
 800a616:	a32e      	add	r3, pc, #184	; (adr r3, 800a6d0 <_strtod_l+0xbe0>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	4640      	mov	r0, r8
 800a61e:	4649      	mov	r1, r9
 800a620:	f7f6 fa66 	bl	8000af0 <__aeabi_dcmple>
 800a624:	b1a0      	cbz	r0, 800a650 <_strtod_l+0xb60>
 800a626:	4649      	mov	r1, r9
 800a628:	4640      	mov	r0, r8
 800a62a:	f7f6 fabd 	bl	8000ba8 <__aeabi_d2uiz>
 800a62e:	2801      	cmp	r0, #1
 800a630:	bf38      	it	cc
 800a632:	2001      	movcc	r0, #1
 800a634:	f7f5 ff66 	bl	8000504 <__aeabi_ui2d>
 800a638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63a:	4680      	mov	r8, r0
 800a63c:	4689      	mov	r9, r1
 800a63e:	bb23      	cbnz	r3, 800a68a <_strtod_l+0xb9a>
 800a640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a644:	9010      	str	r0, [sp, #64]	; 0x40
 800a646:	9311      	str	r3, [sp, #68]	; 0x44
 800a648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a64c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a654:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a658:	1a9b      	subs	r3, r3, r2
 800a65a:	9309      	str	r3, [sp, #36]	; 0x24
 800a65c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a660:	eeb0 0a48 	vmov.f32	s0, s16
 800a664:	eef0 0a68 	vmov.f32	s1, s17
 800a668:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a66c:	f001 ffb2 	bl	800c5d4 <__ulp>
 800a670:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a674:	ec53 2b10 	vmov	r2, r3, d0
 800a678:	f7f5 ffbe 	bl	80005f8 <__aeabi_dmul>
 800a67c:	ec53 2b18 	vmov	r2, r3, d8
 800a680:	f7f5 fe04 	bl	800028c <__adddf3>
 800a684:	4682      	mov	sl, r0
 800a686:	468b      	mov	fp, r1
 800a688:	e78d      	b.n	800a5a6 <_strtod_l+0xab6>
 800a68a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a68e:	e7db      	b.n	800a648 <_strtod_l+0xb58>
 800a690:	a311      	add	r3, pc, #68	; (adr r3, 800a6d8 <_strtod_l+0xbe8>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f7f6 fa21 	bl	8000adc <__aeabi_dcmplt>
 800a69a:	e7b2      	b.n	800a602 <_strtod_l+0xb12>
 800a69c:	2300      	movs	r3, #0
 800a69e:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6a4:	6013      	str	r3, [r2, #0]
 800a6a6:	f7ff ba6b 	b.w	8009b80 <_strtod_l+0x90>
 800a6aa:	2a65      	cmp	r2, #101	; 0x65
 800a6ac:	f43f ab5f 	beq.w	8009d6e <_strtod_l+0x27e>
 800a6b0:	2a45      	cmp	r2, #69	; 0x45
 800a6b2:	f43f ab5c 	beq.w	8009d6e <_strtod_l+0x27e>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	f7ff bb94 	b.w	8009de4 <_strtod_l+0x2f4>
 800a6bc:	f3af 8000 	nop.w
 800a6c0:	94a03595 	.word	0x94a03595
 800a6c4:	3fdfffff 	.word	0x3fdfffff
 800a6c8:	35afe535 	.word	0x35afe535
 800a6cc:	3fe00000 	.word	0x3fe00000
 800a6d0:	ffc00000 	.word	0xffc00000
 800a6d4:	41dfffff 	.word	0x41dfffff
 800a6d8:	94a03595 	.word	0x94a03595
 800a6dc:	3fcfffff 	.word	0x3fcfffff
 800a6e0:	3ff00000 	.word	0x3ff00000
 800a6e4:	7ff00000 	.word	0x7ff00000
 800a6e8:	7fe00000 	.word	0x7fe00000
 800a6ec:	7c9fffff 	.word	0x7c9fffff
 800a6f0:	3fe00000 	.word	0x3fe00000
 800a6f4:	bff00000 	.word	0xbff00000
 800a6f8:	7fefffff 	.word	0x7fefffff

0800a6fc <_strtod_r>:
 800a6fc:	4b01      	ldr	r3, [pc, #4]	; (800a704 <_strtod_r+0x8>)
 800a6fe:	f7ff b9f7 	b.w	8009af0 <_strtod_l>
 800a702:	bf00      	nop
 800a704:	20000074 	.word	0x20000074

0800a708 <_strtol_l.constprop.0>:
 800a708:	2b01      	cmp	r3, #1
 800a70a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a70e:	d001      	beq.n	800a714 <_strtol_l.constprop.0+0xc>
 800a710:	2b24      	cmp	r3, #36	; 0x24
 800a712:	d906      	bls.n	800a722 <_strtol_l.constprop.0+0x1a>
 800a714:	f7fd fd40 	bl	8008198 <__errno>
 800a718:	2316      	movs	r3, #22
 800a71a:	6003      	str	r3, [r0, #0]
 800a71c:	2000      	movs	r0, #0
 800a71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a722:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a808 <_strtol_l.constprop.0+0x100>
 800a726:	460d      	mov	r5, r1
 800a728:	462e      	mov	r6, r5
 800a72a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a72e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a732:	f017 0708 	ands.w	r7, r7, #8
 800a736:	d1f7      	bne.n	800a728 <_strtol_l.constprop.0+0x20>
 800a738:	2c2d      	cmp	r4, #45	; 0x2d
 800a73a:	d132      	bne.n	800a7a2 <_strtol_l.constprop.0+0x9a>
 800a73c:	782c      	ldrb	r4, [r5, #0]
 800a73e:	2701      	movs	r7, #1
 800a740:	1cb5      	adds	r5, r6, #2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d05b      	beq.n	800a7fe <_strtol_l.constprop.0+0xf6>
 800a746:	2b10      	cmp	r3, #16
 800a748:	d109      	bne.n	800a75e <_strtol_l.constprop.0+0x56>
 800a74a:	2c30      	cmp	r4, #48	; 0x30
 800a74c:	d107      	bne.n	800a75e <_strtol_l.constprop.0+0x56>
 800a74e:	782c      	ldrb	r4, [r5, #0]
 800a750:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a754:	2c58      	cmp	r4, #88	; 0x58
 800a756:	d14d      	bne.n	800a7f4 <_strtol_l.constprop.0+0xec>
 800a758:	786c      	ldrb	r4, [r5, #1]
 800a75a:	2310      	movs	r3, #16
 800a75c:	3502      	adds	r5, #2
 800a75e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a762:	f108 38ff 	add.w	r8, r8, #4294967295
 800a766:	f04f 0c00 	mov.w	ip, #0
 800a76a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a76e:	4666      	mov	r6, ip
 800a770:	fb03 8a19 	mls	sl, r3, r9, r8
 800a774:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a778:	f1be 0f09 	cmp.w	lr, #9
 800a77c:	d816      	bhi.n	800a7ac <_strtol_l.constprop.0+0xa4>
 800a77e:	4674      	mov	r4, lr
 800a780:	42a3      	cmp	r3, r4
 800a782:	dd24      	ble.n	800a7ce <_strtol_l.constprop.0+0xc6>
 800a784:	f1bc 0f00 	cmp.w	ip, #0
 800a788:	db1e      	blt.n	800a7c8 <_strtol_l.constprop.0+0xc0>
 800a78a:	45b1      	cmp	r9, r6
 800a78c:	d31c      	bcc.n	800a7c8 <_strtol_l.constprop.0+0xc0>
 800a78e:	d101      	bne.n	800a794 <_strtol_l.constprop.0+0x8c>
 800a790:	45a2      	cmp	sl, r4
 800a792:	db19      	blt.n	800a7c8 <_strtol_l.constprop.0+0xc0>
 800a794:	fb06 4603 	mla	r6, r6, r3, r4
 800a798:	f04f 0c01 	mov.w	ip, #1
 800a79c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7a0:	e7e8      	b.n	800a774 <_strtol_l.constprop.0+0x6c>
 800a7a2:	2c2b      	cmp	r4, #43	; 0x2b
 800a7a4:	bf04      	itt	eq
 800a7a6:	782c      	ldrbeq	r4, [r5, #0]
 800a7a8:	1cb5      	addeq	r5, r6, #2
 800a7aa:	e7ca      	b.n	800a742 <_strtol_l.constprop.0+0x3a>
 800a7ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a7b0:	f1be 0f19 	cmp.w	lr, #25
 800a7b4:	d801      	bhi.n	800a7ba <_strtol_l.constprop.0+0xb2>
 800a7b6:	3c37      	subs	r4, #55	; 0x37
 800a7b8:	e7e2      	b.n	800a780 <_strtol_l.constprop.0+0x78>
 800a7ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a7be:	f1be 0f19 	cmp.w	lr, #25
 800a7c2:	d804      	bhi.n	800a7ce <_strtol_l.constprop.0+0xc6>
 800a7c4:	3c57      	subs	r4, #87	; 0x57
 800a7c6:	e7db      	b.n	800a780 <_strtol_l.constprop.0+0x78>
 800a7c8:	f04f 3cff 	mov.w	ip, #4294967295
 800a7cc:	e7e6      	b.n	800a79c <_strtol_l.constprop.0+0x94>
 800a7ce:	f1bc 0f00 	cmp.w	ip, #0
 800a7d2:	da05      	bge.n	800a7e0 <_strtol_l.constprop.0+0xd8>
 800a7d4:	2322      	movs	r3, #34	; 0x22
 800a7d6:	6003      	str	r3, [r0, #0]
 800a7d8:	4646      	mov	r6, r8
 800a7da:	b942      	cbnz	r2, 800a7ee <_strtol_l.constprop.0+0xe6>
 800a7dc:	4630      	mov	r0, r6
 800a7de:	e79e      	b.n	800a71e <_strtol_l.constprop.0+0x16>
 800a7e0:	b107      	cbz	r7, 800a7e4 <_strtol_l.constprop.0+0xdc>
 800a7e2:	4276      	negs	r6, r6
 800a7e4:	2a00      	cmp	r2, #0
 800a7e6:	d0f9      	beq.n	800a7dc <_strtol_l.constprop.0+0xd4>
 800a7e8:	f1bc 0f00 	cmp.w	ip, #0
 800a7ec:	d000      	beq.n	800a7f0 <_strtol_l.constprop.0+0xe8>
 800a7ee:	1e69      	subs	r1, r5, #1
 800a7f0:	6011      	str	r1, [r2, #0]
 800a7f2:	e7f3      	b.n	800a7dc <_strtol_l.constprop.0+0xd4>
 800a7f4:	2430      	movs	r4, #48	; 0x30
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1b1      	bne.n	800a75e <_strtol_l.constprop.0+0x56>
 800a7fa:	2308      	movs	r3, #8
 800a7fc:	e7af      	b.n	800a75e <_strtol_l.constprop.0+0x56>
 800a7fe:	2c30      	cmp	r4, #48	; 0x30
 800a800:	d0a5      	beq.n	800a74e <_strtol_l.constprop.0+0x46>
 800a802:	230a      	movs	r3, #10
 800a804:	e7ab      	b.n	800a75e <_strtol_l.constprop.0+0x56>
 800a806:	bf00      	nop
 800a808:	0800f281 	.word	0x0800f281

0800a80c <_strtol_r>:
 800a80c:	f7ff bf7c 	b.w	800a708 <_strtol_l.constprop.0>

0800a810 <__swbuf_r>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	460e      	mov	r6, r1
 800a814:	4614      	mov	r4, r2
 800a816:	4605      	mov	r5, r0
 800a818:	b118      	cbz	r0, 800a822 <__swbuf_r+0x12>
 800a81a:	6983      	ldr	r3, [r0, #24]
 800a81c:	b90b      	cbnz	r3, 800a822 <__swbuf_r+0x12>
 800a81e:	f7fd fded 	bl	80083fc <__sinit>
 800a822:	4b21      	ldr	r3, [pc, #132]	; (800a8a8 <__swbuf_r+0x98>)
 800a824:	429c      	cmp	r4, r3
 800a826:	d12b      	bne.n	800a880 <__swbuf_r+0x70>
 800a828:	686c      	ldr	r4, [r5, #4]
 800a82a:	69a3      	ldr	r3, [r4, #24]
 800a82c:	60a3      	str	r3, [r4, #8]
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	071a      	lsls	r2, r3, #28
 800a832:	d52f      	bpl.n	800a894 <__swbuf_r+0x84>
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	b36b      	cbz	r3, 800a894 <__swbuf_r+0x84>
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	6820      	ldr	r0, [r4, #0]
 800a83c:	1ac0      	subs	r0, r0, r3
 800a83e:	6963      	ldr	r3, [r4, #20]
 800a840:	b2f6      	uxtb	r6, r6
 800a842:	4283      	cmp	r3, r0
 800a844:	4637      	mov	r7, r6
 800a846:	dc04      	bgt.n	800a852 <__swbuf_r+0x42>
 800a848:	4621      	mov	r1, r4
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7fd fd30 	bl	80082b0 <_fflush_r>
 800a850:	bb30      	cbnz	r0, 800a8a0 <__swbuf_r+0x90>
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	3b01      	subs	r3, #1
 800a856:	60a3      	str	r3, [r4, #8]
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	6022      	str	r2, [r4, #0]
 800a85e:	701e      	strb	r6, [r3, #0]
 800a860:	6963      	ldr	r3, [r4, #20]
 800a862:	3001      	adds	r0, #1
 800a864:	4283      	cmp	r3, r0
 800a866:	d004      	beq.n	800a872 <__swbuf_r+0x62>
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	07db      	lsls	r3, r3, #31
 800a86c:	d506      	bpl.n	800a87c <__swbuf_r+0x6c>
 800a86e:	2e0a      	cmp	r6, #10
 800a870:	d104      	bne.n	800a87c <__swbuf_r+0x6c>
 800a872:	4621      	mov	r1, r4
 800a874:	4628      	mov	r0, r5
 800a876:	f7fd fd1b 	bl	80082b0 <_fflush_r>
 800a87a:	b988      	cbnz	r0, 800a8a0 <__swbuf_r+0x90>
 800a87c:	4638      	mov	r0, r7
 800a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a880:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <__swbuf_r+0x9c>)
 800a882:	429c      	cmp	r4, r3
 800a884:	d101      	bne.n	800a88a <__swbuf_r+0x7a>
 800a886:	68ac      	ldr	r4, [r5, #8]
 800a888:	e7cf      	b.n	800a82a <__swbuf_r+0x1a>
 800a88a:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <__swbuf_r+0xa0>)
 800a88c:	429c      	cmp	r4, r3
 800a88e:	bf08      	it	eq
 800a890:	68ec      	ldreq	r4, [r5, #12]
 800a892:	e7ca      	b.n	800a82a <__swbuf_r+0x1a>
 800a894:	4621      	mov	r1, r4
 800a896:	4628      	mov	r0, r5
 800a898:	f000 f81e 	bl	800a8d8 <__swsetup_r>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d0cb      	beq.n	800a838 <__swbuf_r+0x28>
 800a8a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8a4:	e7ea      	b.n	800a87c <__swbuf_r+0x6c>
 800a8a6:	bf00      	nop
 800a8a8:	0800f3a4 	.word	0x0800f3a4
 800a8ac:	0800f3c4 	.word	0x0800f3c4
 800a8b0:	0800f384 	.word	0x0800f384

0800a8b4 <_write_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4d07      	ldr	r5, [pc, #28]	; (800a8d4 <_write_r+0x20>)
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	4608      	mov	r0, r1
 800a8bc:	4611      	mov	r1, r2
 800a8be:	2200      	movs	r2, #0
 800a8c0:	602a      	str	r2, [r5, #0]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f7f6 fd17 	bl	80012f6 <_write>
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	d102      	bne.n	800a8d2 <_write_r+0x1e>
 800a8cc:	682b      	ldr	r3, [r5, #0]
 800a8ce:	b103      	cbz	r3, 800a8d2 <_write_r+0x1e>
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	20000ee8 	.word	0x20000ee8

0800a8d8 <__swsetup_r>:
 800a8d8:	4b32      	ldr	r3, [pc, #200]	; (800a9a4 <__swsetup_r+0xcc>)
 800a8da:	b570      	push	{r4, r5, r6, lr}
 800a8dc:	681d      	ldr	r5, [r3, #0]
 800a8de:	4606      	mov	r6, r0
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	b125      	cbz	r5, 800a8ee <__swsetup_r+0x16>
 800a8e4:	69ab      	ldr	r3, [r5, #24]
 800a8e6:	b913      	cbnz	r3, 800a8ee <__swsetup_r+0x16>
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f7fd fd87 	bl	80083fc <__sinit>
 800a8ee:	4b2e      	ldr	r3, [pc, #184]	; (800a9a8 <__swsetup_r+0xd0>)
 800a8f0:	429c      	cmp	r4, r3
 800a8f2:	d10f      	bne.n	800a914 <__swsetup_r+0x3c>
 800a8f4:	686c      	ldr	r4, [r5, #4]
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8fc:	0719      	lsls	r1, r3, #28
 800a8fe:	d42c      	bmi.n	800a95a <__swsetup_r+0x82>
 800a900:	06dd      	lsls	r5, r3, #27
 800a902:	d411      	bmi.n	800a928 <__swsetup_r+0x50>
 800a904:	2309      	movs	r3, #9
 800a906:	6033      	str	r3, [r6, #0]
 800a908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a90c:	81a3      	strh	r3, [r4, #12]
 800a90e:	f04f 30ff 	mov.w	r0, #4294967295
 800a912:	e03e      	b.n	800a992 <__swsetup_r+0xba>
 800a914:	4b25      	ldr	r3, [pc, #148]	; (800a9ac <__swsetup_r+0xd4>)
 800a916:	429c      	cmp	r4, r3
 800a918:	d101      	bne.n	800a91e <__swsetup_r+0x46>
 800a91a:	68ac      	ldr	r4, [r5, #8]
 800a91c:	e7eb      	b.n	800a8f6 <__swsetup_r+0x1e>
 800a91e:	4b24      	ldr	r3, [pc, #144]	; (800a9b0 <__swsetup_r+0xd8>)
 800a920:	429c      	cmp	r4, r3
 800a922:	bf08      	it	eq
 800a924:	68ec      	ldreq	r4, [r5, #12]
 800a926:	e7e6      	b.n	800a8f6 <__swsetup_r+0x1e>
 800a928:	0758      	lsls	r0, r3, #29
 800a92a:	d512      	bpl.n	800a952 <__swsetup_r+0x7a>
 800a92c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a92e:	b141      	cbz	r1, 800a942 <__swsetup_r+0x6a>
 800a930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a934:	4299      	cmp	r1, r3
 800a936:	d002      	beq.n	800a93e <__swsetup_r+0x66>
 800a938:	4630      	mov	r0, r6
 800a93a:	f7fd ff3b 	bl	80087b4 <_free_r>
 800a93e:	2300      	movs	r3, #0
 800a940:	6363      	str	r3, [r4, #52]	; 0x34
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	2300      	movs	r3, #0
 800a94c:	6063      	str	r3, [r4, #4]
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	f043 0308 	orr.w	r3, r3, #8
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	b94b      	cbnz	r3, 800a972 <__swsetup_r+0x9a>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a968:	d003      	beq.n	800a972 <__swsetup_r+0x9a>
 800a96a:	4621      	mov	r1, r4
 800a96c:	4630      	mov	r0, r6
 800a96e:	f001 fa61 	bl	800be34 <__smakebuf_r>
 800a972:	89a0      	ldrh	r0, [r4, #12]
 800a974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a978:	f010 0301 	ands.w	r3, r0, #1
 800a97c:	d00a      	beq.n	800a994 <__swsetup_r+0xbc>
 800a97e:	2300      	movs	r3, #0
 800a980:	60a3      	str	r3, [r4, #8]
 800a982:	6963      	ldr	r3, [r4, #20]
 800a984:	425b      	negs	r3, r3
 800a986:	61a3      	str	r3, [r4, #24]
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	b943      	cbnz	r3, 800a99e <__swsetup_r+0xc6>
 800a98c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a990:	d1ba      	bne.n	800a908 <__swsetup_r+0x30>
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	0781      	lsls	r1, r0, #30
 800a996:	bf58      	it	pl
 800a998:	6963      	ldrpl	r3, [r4, #20]
 800a99a:	60a3      	str	r3, [r4, #8]
 800a99c:	e7f4      	b.n	800a988 <__swsetup_r+0xb0>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e7f7      	b.n	800a992 <__swsetup_r+0xba>
 800a9a2:	bf00      	nop
 800a9a4:	2000000c 	.word	0x2000000c
 800a9a8:	0800f3a4 	.word	0x0800f3a4
 800a9ac:	0800f3c4 	.word	0x0800f3c4
 800a9b0:	0800f384 	.word	0x0800f384

0800a9b4 <abort>:
 800a9b4:	b508      	push	{r3, lr}
 800a9b6:	2006      	movs	r0, #6
 800a9b8:	f002 f92a 	bl	800cc10 <raise>
 800a9bc:	2001      	movs	r0, #1
 800a9be:	f7f6 fc73 	bl	80012a8 <_exit>
	...

0800a9c4 <_close_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4d06      	ldr	r5, [pc, #24]	; (800a9e0 <_close_r+0x1c>)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	602b      	str	r3, [r5, #0]
 800a9d0:	f7f6 fcad 	bl	800132e <_close>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_close_r+0x1a>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_close_r+0x1a>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	20000ee8 	.word	0x20000ee8

0800a9e4 <quorem>:
 800a9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	6903      	ldr	r3, [r0, #16]
 800a9ea:	690c      	ldr	r4, [r1, #16]
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	f2c0 8081 	blt.w	800aaf6 <quorem+0x112>
 800a9f4:	3c01      	subs	r4, #1
 800a9f6:	f101 0814 	add.w	r8, r1, #20
 800a9fa:	f100 0514 	add.w	r5, r0, #20
 800a9fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa18:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa1c:	d331      	bcc.n	800aa82 <quorem+0x9e>
 800aa1e:	f04f 0e00 	mov.w	lr, #0
 800aa22:	4640      	mov	r0, r8
 800aa24:	46ac      	mov	ip, r5
 800aa26:	46f2      	mov	sl, lr
 800aa28:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa2c:	b293      	uxth	r3, r2
 800aa2e:	fb06 e303 	mla	r3, r6, r3, lr
 800aa32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	ebaa 0303 	sub.w	r3, sl, r3
 800aa3c:	f8dc a000 	ldr.w	sl, [ip]
 800aa40:	0c12      	lsrs	r2, r2, #16
 800aa42:	fa13 f38a 	uxtah	r3, r3, sl
 800aa46:	fb06 e202 	mla	r2, r6, r2, lr
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	9b00      	ldr	r3, [sp, #0]
 800aa4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa52:	b292      	uxth	r2, r2
 800aa54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aa58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa5c:	f8bd 3000 	ldrh.w	r3, [sp]
 800aa60:	4581      	cmp	r9, r0
 800aa62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa66:	f84c 3b04 	str.w	r3, [ip], #4
 800aa6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa6e:	d2db      	bcs.n	800aa28 <quorem+0x44>
 800aa70:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa74:	b92b      	cbnz	r3, 800aa82 <quorem+0x9e>
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	3b04      	subs	r3, #4
 800aa7a:	429d      	cmp	r5, r3
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	d32e      	bcc.n	800aade <quorem+0xfa>
 800aa80:	613c      	str	r4, [r7, #16]
 800aa82:	4638      	mov	r0, r7
 800aa84:	f001 fd00 	bl	800c488 <__mcmp>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	db24      	blt.n	800aad6 <quorem+0xf2>
 800aa8c:	3601      	adds	r6, #1
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f04f 0c00 	mov.w	ip, #0
 800aa94:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa98:	f8d0 e000 	ldr.w	lr, [r0]
 800aa9c:	b293      	uxth	r3, r2
 800aa9e:	ebac 0303 	sub.w	r3, ip, r3
 800aaa2:	0c12      	lsrs	r2, r2, #16
 800aaa4:	fa13 f38e 	uxtah	r3, r3, lr
 800aaa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aaac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aab6:	45c1      	cmp	r9, r8
 800aab8:	f840 3b04 	str.w	r3, [r0], #4
 800aabc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aac0:	d2e8      	bcs.n	800aa94 <quorem+0xb0>
 800aac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaca:	b922      	cbnz	r2, 800aad6 <quorem+0xf2>
 800aacc:	3b04      	subs	r3, #4
 800aace:	429d      	cmp	r5, r3
 800aad0:	461a      	mov	r2, r3
 800aad2:	d30a      	bcc.n	800aaea <quorem+0x106>
 800aad4:	613c      	str	r4, [r7, #16]
 800aad6:	4630      	mov	r0, r6
 800aad8:	b003      	add	sp, #12
 800aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aade:	6812      	ldr	r2, [r2, #0]
 800aae0:	3b04      	subs	r3, #4
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	d1cc      	bne.n	800aa80 <quorem+0x9c>
 800aae6:	3c01      	subs	r4, #1
 800aae8:	e7c7      	b.n	800aa7a <quorem+0x96>
 800aaea:	6812      	ldr	r2, [r2, #0]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	2a00      	cmp	r2, #0
 800aaf0:	d1f0      	bne.n	800aad4 <quorem+0xf0>
 800aaf2:	3c01      	subs	r4, #1
 800aaf4:	e7eb      	b.n	800aace <quorem+0xea>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e7ee      	b.n	800aad8 <quorem+0xf4>
 800aafa:	0000      	movs	r0, r0
 800aafc:	0000      	movs	r0, r0
	...

0800ab00 <_dtoa_r>:
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	ed2d 8b04 	vpush	{d8-d9}
 800ab08:	ec57 6b10 	vmov	r6, r7, d0
 800ab0c:	b093      	sub	sp, #76	; 0x4c
 800ab0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab14:	9106      	str	r1, [sp, #24]
 800ab16:	ee10 aa10 	vmov	sl, s0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab1e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab20:	46bb      	mov	fp, r7
 800ab22:	b975      	cbnz	r5, 800ab42 <_dtoa_r+0x42>
 800ab24:	2010      	movs	r0, #16
 800ab26:	f7fd fdef 	bl	8008708 <malloc>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	6260      	str	r0, [r4, #36]	; 0x24
 800ab2e:	b920      	cbnz	r0, 800ab3a <_dtoa_r+0x3a>
 800ab30:	4ba7      	ldr	r3, [pc, #668]	; (800add0 <_dtoa_r+0x2d0>)
 800ab32:	21ea      	movs	r1, #234	; 0xea
 800ab34:	48a7      	ldr	r0, [pc, #668]	; (800add4 <_dtoa_r+0x2d4>)
 800ab36:	f7fd fb09 	bl	800814c <__assert_func>
 800ab3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab3e:	6005      	str	r5, [r0, #0]
 800ab40:	60c5      	str	r5, [r0, #12]
 800ab42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab44:	6819      	ldr	r1, [r3, #0]
 800ab46:	b151      	cbz	r1, 800ab5e <_dtoa_r+0x5e>
 800ab48:	685a      	ldr	r2, [r3, #4]
 800ab4a:	604a      	str	r2, [r1, #4]
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	4093      	lsls	r3, r2
 800ab50:	608b      	str	r3, [r1, #8]
 800ab52:	4620      	mov	r0, r4
 800ab54:	f001 fa0c 	bl	800bf70 <_Bfree>
 800ab58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	1e3b      	subs	r3, r7, #0
 800ab60:	bfaa      	itet	ge
 800ab62:	2300      	movge	r3, #0
 800ab64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ab68:	f8c8 3000 	strge.w	r3, [r8]
 800ab6c:	4b9a      	ldr	r3, [pc, #616]	; (800add8 <_dtoa_r+0x2d8>)
 800ab6e:	bfbc      	itt	lt
 800ab70:	2201      	movlt	r2, #1
 800ab72:	f8c8 2000 	strlt.w	r2, [r8]
 800ab76:	ea33 030b 	bics.w	r3, r3, fp
 800ab7a:	d11b      	bne.n	800abb4 <_dtoa_r+0xb4>
 800ab7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab7e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab88:	4333      	orrs	r3, r6
 800ab8a:	f000 8592 	beq.w	800b6b2 <_dtoa_r+0xbb2>
 800ab8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab90:	b963      	cbnz	r3, 800abac <_dtoa_r+0xac>
 800ab92:	4b92      	ldr	r3, [pc, #584]	; (800addc <_dtoa_r+0x2dc>)
 800ab94:	e022      	b.n	800abdc <_dtoa_r+0xdc>
 800ab96:	4b92      	ldr	r3, [pc, #584]	; (800ade0 <_dtoa_r+0x2e0>)
 800ab98:	9301      	str	r3, [sp, #4]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	9801      	ldr	r0, [sp, #4]
 800aba2:	b013      	add	sp, #76	; 0x4c
 800aba4:	ecbd 8b04 	vpop	{d8-d9}
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	4b8b      	ldr	r3, [pc, #556]	; (800addc <_dtoa_r+0x2dc>)
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	3303      	adds	r3, #3
 800abb2:	e7f3      	b.n	800ab9c <_dtoa_r+0x9c>
 800abb4:	2200      	movs	r2, #0
 800abb6:	2300      	movs	r3, #0
 800abb8:	4650      	mov	r0, sl
 800abba:	4659      	mov	r1, fp
 800abbc:	f7f5 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 800abc0:	ec4b ab19 	vmov	d9, sl, fp
 800abc4:	4680      	mov	r8, r0
 800abc6:	b158      	cbz	r0, 800abe0 <_dtoa_r+0xe0>
 800abc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abca:	2301      	movs	r3, #1
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 856b 	beq.w	800b6ac <_dtoa_r+0xbac>
 800abd6:	4883      	ldr	r0, [pc, #524]	; (800ade4 <_dtoa_r+0x2e4>)
 800abd8:	6018      	str	r0, [r3, #0]
 800abda:	1e43      	subs	r3, r0, #1
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	e7df      	b.n	800aba0 <_dtoa_r+0xa0>
 800abe0:	ec4b ab10 	vmov	d0, sl, fp
 800abe4:	aa10      	add	r2, sp, #64	; 0x40
 800abe6:	a911      	add	r1, sp, #68	; 0x44
 800abe8:	4620      	mov	r0, r4
 800abea:	f001 fd6f 	bl	800c6cc <__d2b>
 800abee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800abf2:	ee08 0a10 	vmov	s16, r0
 800abf6:	2d00      	cmp	r5, #0
 800abf8:	f000 8084 	beq.w	800ad04 <_dtoa_r+0x204>
 800abfc:	ee19 3a90 	vmov	r3, s19
 800ac00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ac08:	4656      	mov	r6, sl
 800ac0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ac0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ac16:	4b74      	ldr	r3, [pc, #464]	; (800ade8 <_dtoa_r+0x2e8>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	f7f5 fb33 	bl	8000288 <__aeabi_dsub>
 800ac22:	a365      	add	r3, pc, #404	; (adr r3, 800adb8 <_dtoa_r+0x2b8>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f7f5 fce6 	bl	80005f8 <__aeabi_dmul>
 800ac2c:	a364      	add	r3, pc, #400	; (adr r3, 800adc0 <_dtoa_r+0x2c0>)
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	f7f5 fb2b 	bl	800028c <__adddf3>
 800ac36:	4606      	mov	r6, r0
 800ac38:	4628      	mov	r0, r5
 800ac3a:	460f      	mov	r7, r1
 800ac3c:	f7f5 fc72 	bl	8000524 <__aeabi_i2d>
 800ac40:	a361      	add	r3, pc, #388	; (adr r3, 800adc8 <_dtoa_r+0x2c8>)
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	f7f5 fcd7 	bl	80005f8 <__aeabi_dmul>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 fb1b 	bl	800028c <__adddf3>
 800ac56:	4606      	mov	r6, r0
 800ac58:	460f      	mov	r7, r1
 800ac5a:	f7f5 ff7d 	bl	8000b58 <__aeabi_d2iz>
 800ac5e:	2200      	movs	r2, #0
 800ac60:	9000      	str	r0, [sp, #0]
 800ac62:	2300      	movs	r3, #0
 800ac64:	4630      	mov	r0, r6
 800ac66:	4639      	mov	r1, r7
 800ac68:	f7f5 ff38 	bl	8000adc <__aeabi_dcmplt>
 800ac6c:	b150      	cbz	r0, 800ac84 <_dtoa_r+0x184>
 800ac6e:	9800      	ldr	r0, [sp, #0]
 800ac70:	f7f5 fc58 	bl	8000524 <__aeabi_i2d>
 800ac74:	4632      	mov	r2, r6
 800ac76:	463b      	mov	r3, r7
 800ac78:	f7f5 ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac7c:	b910      	cbnz	r0, 800ac84 <_dtoa_r+0x184>
 800ac7e:	9b00      	ldr	r3, [sp, #0]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	9b00      	ldr	r3, [sp, #0]
 800ac86:	2b16      	cmp	r3, #22
 800ac88:	d85a      	bhi.n	800ad40 <_dtoa_r+0x240>
 800ac8a:	9a00      	ldr	r2, [sp, #0]
 800ac8c:	4b57      	ldr	r3, [pc, #348]	; (800adec <_dtoa_r+0x2ec>)
 800ac8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	ec51 0b19 	vmov	r0, r1, d9
 800ac9a:	f7f5 ff1f 	bl	8000adc <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d050      	beq.n	800ad44 <_dtoa_r+0x244>
 800aca2:	9b00      	ldr	r3, [sp, #0]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800acac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acae:	1b5d      	subs	r5, r3, r5
 800acb0:	1e6b      	subs	r3, r5, #1
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	bf45      	ittet	mi
 800acb6:	f1c5 0301 	rsbmi	r3, r5, #1
 800acba:	9304      	strmi	r3, [sp, #16]
 800acbc:	2300      	movpl	r3, #0
 800acbe:	2300      	movmi	r3, #0
 800acc0:	bf4c      	ite	mi
 800acc2:	9305      	strmi	r3, [sp, #20]
 800acc4:	9304      	strpl	r3, [sp, #16]
 800acc6:	9b00      	ldr	r3, [sp, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	db3d      	blt.n	800ad48 <_dtoa_r+0x248>
 800accc:	9b05      	ldr	r3, [sp, #20]
 800acce:	9a00      	ldr	r2, [sp, #0]
 800acd0:	920a      	str	r2, [sp, #40]	; 0x28
 800acd2:	4413      	add	r3, r2
 800acd4:	9305      	str	r3, [sp, #20]
 800acd6:	2300      	movs	r3, #0
 800acd8:	9307      	str	r3, [sp, #28]
 800acda:	9b06      	ldr	r3, [sp, #24]
 800acdc:	2b09      	cmp	r3, #9
 800acde:	f200 8089 	bhi.w	800adf4 <_dtoa_r+0x2f4>
 800ace2:	2b05      	cmp	r3, #5
 800ace4:	bfc4      	itt	gt
 800ace6:	3b04      	subgt	r3, #4
 800ace8:	9306      	strgt	r3, [sp, #24]
 800acea:	9b06      	ldr	r3, [sp, #24]
 800acec:	f1a3 0302 	sub.w	r3, r3, #2
 800acf0:	bfcc      	ite	gt
 800acf2:	2500      	movgt	r5, #0
 800acf4:	2501      	movle	r5, #1
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	f200 8087 	bhi.w	800ae0a <_dtoa_r+0x30a>
 800acfc:	e8df f003 	tbb	[pc, r3]
 800ad00:	59383a2d 	.word	0x59383a2d
 800ad04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ad08:	441d      	add	r5, r3
 800ad0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	bfc1      	itttt	gt
 800ad12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ad1a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ad1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad22:	bfda      	itte	le
 800ad24:	f1c3 0320 	rsble	r3, r3, #32
 800ad28:	fa06 f003 	lslle.w	r0, r6, r3
 800ad2c:	4318      	orrgt	r0, r3
 800ad2e:	f7f5 fbe9 	bl	8000504 <__aeabi_ui2d>
 800ad32:	2301      	movs	r3, #1
 800ad34:	4606      	mov	r6, r0
 800ad36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ad3a:	3d01      	subs	r5, #1
 800ad3c:	930e      	str	r3, [sp, #56]	; 0x38
 800ad3e:	e76a      	b.n	800ac16 <_dtoa_r+0x116>
 800ad40:	2301      	movs	r3, #1
 800ad42:	e7b2      	b.n	800acaa <_dtoa_r+0x1aa>
 800ad44:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad46:	e7b1      	b.n	800acac <_dtoa_r+0x1ac>
 800ad48:	9b04      	ldr	r3, [sp, #16]
 800ad4a:	9a00      	ldr	r2, [sp, #0]
 800ad4c:	1a9b      	subs	r3, r3, r2
 800ad4e:	9304      	str	r3, [sp, #16]
 800ad50:	4253      	negs	r3, r2
 800ad52:	9307      	str	r3, [sp, #28]
 800ad54:	2300      	movs	r3, #0
 800ad56:	930a      	str	r3, [sp, #40]	; 0x28
 800ad58:	e7bf      	b.n	800acda <_dtoa_r+0x1da>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9308      	str	r3, [sp, #32]
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dc55      	bgt.n	800ae10 <_dtoa_r+0x310>
 800ad64:	2301      	movs	r3, #1
 800ad66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad6e:	e00c      	b.n	800ad8a <_dtoa_r+0x28a>
 800ad70:	2301      	movs	r3, #1
 800ad72:	e7f3      	b.n	800ad5c <_dtoa_r+0x25c>
 800ad74:	2300      	movs	r3, #0
 800ad76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad78:	9308      	str	r3, [sp, #32]
 800ad7a:	9b00      	ldr	r3, [sp, #0]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	9302      	str	r3, [sp, #8]
 800ad80:	3301      	adds	r3, #1
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	bfb8      	it	lt
 800ad88:	2301      	movlt	r3, #1
 800ad8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	6042      	str	r2, [r0, #4]
 800ad90:	2204      	movs	r2, #4
 800ad92:	f102 0614 	add.w	r6, r2, #20
 800ad96:	429e      	cmp	r6, r3
 800ad98:	6841      	ldr	r1, [r0, #4]
 800ad9a:	d93d      	bls.n	800ae18 <_dtoa_r+0x318>
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f001 f8a7 	bl	800bef0 <_Balloc>
 800ada2:	9001      	str	r0, [sp, #4]
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d13b      	bne.n	800ae20 <_dtoa_r+0x320>
 800ada8:	4b11      	ldr	r3, [pc, #68]	; (800adf0 <_dtoa_r+0x2f0>)
 800adaa:	4602      	mov	r2, r0
 800adac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800adb0:	e6c0      	b.n	800ab34 <_dtoa_r+0x34>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e7df      	b.n	800ad76 <_dtoa_r+0x276>
 800adb6:	bf00      	nop
 800adb8:	636f4361 	.word	0x636f4361
 800adbc:	3fd287a7 	.word	0x3fd287a7
 800adc0:	8b60c8b3 	.word	0x8b60c8b3
 800adc4:	3fc68a28 	.word	0x3fc68a28
 800adc8:	509f79fb 	.word	0x509f79fb
 800adcc:	3fd34413 	.word	0x3fd34413
 800add0:	0800f495 	.word	0x0800f495
 800add4:	0800f4ac 	.word	0x0800f4ac
 800add8:	7ff00000 	.word	0x7ff00000
 800addc:	0800f491 	.word	0x0800f491
 800ade0:	0800f488 	.word	0x0800f488
 800ade4:	0800f40a 	.word	0x0800f40a
 800ade8:	3ff80000 	.word	0x3ff80000
 800adec:	0800f618 	.word	0x0800f618
 800adf0:	0800f507 	.word	0x0800f507
 800adf4:	2501      	movs	r5, #1
 800adf6:	2300      	movs	r3, #0
 800adf8:	9306      	str	r3, [sp, #24]
 800adfa:	9508      	str	r5, [sp, #32]
 800adfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ae00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae04:	2200      	movs	r2, #0
 800ae06:	2312      	movs	r3, #18
 800ae08:	e7b0      	b.n	800ad6c <_dtoa_r+0x26c>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	9308      	str	r3, [sp, #32]
 800ae0e:	e7f5      	b.n	800adfc <_dtoa_r+0x2fc>
 800ae10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae16:	e7b8      	b.n	800ad8a <_dtoa_r+0x28a>
 800ae18:	3101      	adds	r1, #1
 800ae1a:	6041      	str	r1, [r0, #4]
 800ae1c:	0052      	lsls	r2, r2, #1
 800ae1e:	e7b8      	b.n	800ad92 <_dtoa_r+0x292>
 800ae20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae22:	9a01      	ldr	r2, [sp, #4]
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	2b0e      	cmp	r3, #14
 800ae2a:	f200 809d 	bhi.w	800af68 <_dtoa_r+0x468>
 800ae2e:	2d00      	cmp	r5, #0
 800ae30:	f000 809a 	beq.w	800af68 <_dtoa_r+0x468>
 800ae34:	9b00      	ldr	r3, [sp, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dd32      	ble.n	800aea0 <_dtoa_r+0x3a0>
 800ae3a:	4ab7      	ldr	r2, [pc, #732]	; (800b118 <_dtoa_r+0x618>)
 800ae3c:	f003 030f 	and.w	r3, r3, #15
 800ae40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae48:	9b00      	ldr	r3, [sp, #0]
 800ae4a:	05d8      	lsls	r0, r3, #23
 800ae4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ae50:	d516      	bpl.n	800ae80 <_dtoa_r+0x380>
 800ae52:	4bb2      	ldr	r3, [pc, #712]	; (800b11c <_dtoa_r+0x61c>)
 800ae54:	ec51 0b19 	vmov	r0, r1, d9
 800ae58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae5c:	f7f5 fcf6 	bl	800084c <__aeabi_ddiv>
 800ae60:	f007 070f 	and.w	r7, r7, #15
 800ae64:	4682      	mov	sl, r0
 800ae66:	468b      	mov	fp, r1
 800ae68:	2503      	movs	r5, #3
 800ae6a:	4eac      	ldr	r6, [pc, #688]	; (800b11c <_dtoa_r+0x61c>)
 800ae6c:	b957      	cbnz	r7, 800ae84 <_dtoa_r+0x384>
 800ae6e:	4642      	mov	r2, r8
 800ae70:	464b      	mov	r3, r9
 800ae72:	4650      	mov	r0, sl
 800ae74:	4659      	mov	r1, fp
 800ae76:	f7f5 fce9 	bl	800084c <__aeabi_ddiv>
 800ae7a:	4682      	mov	sl, r0
 800ae7c:	468b      	mov	fp, r1
 800ae7e:	e028      	b.n	800aed2 <_dtoa_r+0x3d2>
 800ae80:	2502      	movs	r5, #2
 800ae82:	e7f2      	b.n	800ae6a <_dtoa_r+0x36a>
 800ae84:	07f9      	lsls	r1, r7, #31
 800ae86:	d508      	bpl.n	800ae9a <_dtoa_r+0x39a>
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae90:	f7f5 fbb2 	bl	80005f8 <__aeabi_dmul>
 800ae94:	3501      	adds	r5, #1
 800ae96:	4680      	mov	r8, r0
 800ae98:	4689      	mov	r9, r1
 800ae9a:	107f      	asrs	r7, r7, #1
 800ae9c:	3608      	adds	r6, #8
 800ae9e:	e7e5      	b.n	800ae6c <_dtoa_r+0x36c>
 800aea0:	f000 809b 	beq.w	800afda <_dtoa_r+0x4da>
 800aea4:	9b00      	ldr	r3, [sp, #0]
 800aea6:	4f9d      	ldr	r7, [pc, #628]	; (800b11c <_dtoa_r+0x61c>)
 800aea8:	425e      	negs	r6, r3
 800aeaa:	4b9b      	ldr	r3, [pc, #620]	; (800b118 <_dtoa_r+0x618>)
 800aeac:	f006 020f 	and.w	r2, r6, #15
 800aeb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb8:	ec51 0b19 	vmov	r0, r1, d9
 800aebc:	f7f5 fb9c 	bl	80005f8 <__aeabi_dmul>
 800aec0:	1136      	asrs	r6, r6, #4
 800aec2:	4682      	mov	sl, r0
 800aec4:	468b      	mov	fp, r1
 800aec6:	2300      	movs	r3, #0
 800aec8:	2502      	movs	r5, #2
 800aeca:	2e00      	cmp	r6, #0
 800aecc:	d17a      	bne.n	800afc4 <_dtoa_r+0x4c4>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1d3      	bne.n	800ae7a <_dtoa_r+0x37a>
 800aed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 8082 	beq.w	800afde <_dtoa_r+0x4de>
 800aeda:	4b91      	ldr	r3, [pc, #580]	; (800b120 <_dtoa_r+0x620>)
 800aedc:	2200      	movs	r2, #0
 800aede:	4650      	mov	r0, sl
 800aee0:	4659      	mov	r1, fp
 800aee2:	f7f5 fdfb 	bl	8000adc <__aeabi_dcmplt>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d079      	beq.n	800afde <_dtoa_r+0x4de>
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d076      	beq.n	800afde <_dtoa_r+0x4de>
 800aef0:	9b02      	ldr	r3, [sp, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	dd36      	ble.n	800af64 <_dtoa_r+0x464>
 800aef6:	9b00      	ldr	r3, [sp, #0]
 800aef8:	4650      	mov	r0, sl
 800aefa:	4659      	mov	r1, fp
 800aefc:	1e5f      	subs	r7, r3, #1
 800aefe:	2200      	movs	r2, #0
 800af00:	4b88      	ldr	r3, [pc, #544]	; (800b124 <_dtoa_r+0x624>)
 800af02:	f7f5 fb79 	bl	80005f8 <__aeabi_dmul>
 800af06:	9e02      	ldr	r6, [sp, #8]
 800af08:	4682      	mov	sl, r0
 800af0a:	468b      	mov	fp, r1
 800af0c:	3501      	adds	r5, #1
 800af0e:	4628      	mov	r0, r5
 800af10:	f7f5 fb08 	bl	8000524 <__aeabi_i2d>
 800af14:	4652      	mov	r2, sl
 800af16:	465b      	mov	r3, fp
 800af18:	f7f5 fb6e 	bl	80005f8 <__aeabi_dmul>
 800af1c:	4b82      	ldr	r3, [pc, #520]	; (800b128 <_dtoa_r+0x628>)
 800af1e:	2200      	movs	r2, #0
 800af20:	f7f5 f9b4 	bl	800028c <__adddf3>
 800af24:	46d0      	mov	r8, sl
 800af26:	46d9      	mov	r9, fp
 800af28:	4682      	mov	sl, r0
 800af2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800af2e:	2e00      	cmp	r6, #0
 800af30:	d158      	bne.n	800afe4 <_dtoa_r+0x4e4>
 800af32:	4b7e      	ldr	r3, [pc, #504]	; (800b12c <_dtoa_r+0x62c>)
 800af34:	2200      	movs	r2, #0
 800af36:	4640      	mov	r0, r8
 800af38:	4649      	mov	r1, r9
 800af3a:	f7f5 f9a5 	bl	8000288 <__aeabi_dsub>
 800af3e:	4652      	mov	r2, sl
 800af40:	465b      	mov	r3, fp
 800af42:	4680      	mov	r8, r0
 800af44:	4689      	mov	r9, r1
 800af46:	f7f5 fde7 	bl	8000b18 <__aeabi_dcmpgt>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	f040 8295 	bne.w	800b47a <_dtoa_r+0x97a>
 800af50:	4652      	mov	r2, sl
 800af52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af56:	4640      	mov	r0, r8
 800af58:	4649      	mov	r1, r9
 800af5a:	f7f5 fdbf 	bl	8000adc <__aeabi_dcmplt>
 800af5e:	2800      	cmp	r0, #0
 800af60:	f040 8289 	bne.w	800b476 <_dtoa_r+0x976>
 800af64:	ec5b ab19 	vmov	sl, fp, d9
 800af68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f2c0 8148 	blt.w	800b200 <_dtoa_r+0x700>
 800af70:	9a00      	ldr	r2, [sp, #0]
 800af72:	2a0e      	cmp	r2, #14
 800af74:	f300 8144 	bgt.w	800b200 <_dtoa_r+0x700>
 800af78:	4b67      	ldr	r3, [pc, #412]	; (800b118 <_dtoa_r+0x618>)
 800af7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af84:	2b00      	cmp	r3, #0
 800af86:	f280 80d5 	bge.w	800b134 <_dtoa_r+0x634>
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f300 80d1 	bgt.w	800b134 <_dtoa_r+0x634>
 800af92:	f040 826f 	bne.w	800b474 <_dtoa_r+0x974>
 800af96:	4b65      	ldr	r3, [pc, #404]	; (800b12c <_dtoa_r+0x62c>)
 800af98:	2200      	movs	r2, #0
 800af9a:	4640      	mov	r0, r8
 800af9c:	4649      	mov	r1, r9
 800af9e:	f7f5 fb2b 	bl	80005f8 <__aeabi_dmul>
 800afa2:	4652      	mov	r2, sl
 800afa4:	465b      	mov	r3, fp
 800afa6:	f7f5 fdad 	bl	8000b04 <__aeabi_dcmpge>
 800afaa:	9e03      	ldr	r6, [sp, #12]
 800afac:	4637      	mov	r7, r6
 800afae:	2800      	cmp	r0, #0
 800afb0:	f040 8245 	bne.w	800b43e <_dtoa_r+0x93e>
 800afb4:	9d01      	ldr	r5, [sp, #4]
 800afb6:	2331      	movs	r3, #49	; 0x31
 800afb8:	f805 3b01 	strb.w	r3, [r5], #1
 800afbc:	9b00      	ldr	r3, [sp, #0]
 800afbe:	3301      	adds	r3, #1
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	e240      	b.n	800b446 <_dtoa_r+0x946>
 800afc4:	07f2      	lsls	r2, r6, #31
 800afc6:	d505      	bpl.n	800afd4 <_dtoa_r+0x4d4>
 800afc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afcc:	f7f5 fb14 	bl	80005f8 <__aeabi_dmul>
 800afd0:	3501      	adds	r5, #1
 800afd2:	2301      	movs	r3, #1
 800afd4:	1076      	asrs	r6, r6, #1
 800afd6:	3708      	adds	r7, #8
 800afd8:	e777      	b.n	800aeca <_dtoa_r+0x3ca>
 800afda:	2502      	movs	r5, #2
 800afdc:	e779      	b.n	800aed2 <_dtoa_r+0x3d2>
 800afde:	9f00      	ldr	r7, [sp, #0]
 800afe0:	9e03      	ldr	r6, [sp, #12]
 800afe2:	e794      	b.n	800af0e <_dtoa_r+0x40e>
 800afe4:	9901      	ldr	r1, [sp, #4]
 800afe6:	4b4c      	ldr	r3, [pc, #304]	; (800b118 <_dtoa_r+0x618>)
 800afe8:	4431      	add	r1, r6
 800afea:	910d      	str	r1, [sp, #52]	; 0x34
 800afec:	9908      	ldr	r1, [sp, #32]
 800afee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aff2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aff6:	2900      	cmp	r1, #0
 800aff8:	d043      	beq.n	800b082 <_dtoa_r+0x582>
 800affa:	494d      	ldr	r1, [pc, #308]	; (800b130 <_dtoa_r+0x630>)
 800affc:	2000      	movs	r0, #0
 800affe:	f7f5 fc25 	bl	800084c <__aeabi_ddiv>
 800b002:	4652      	mov	r2, sl
 800b004:	465b      	mov	r3, fp
 800b006:	f7f5 f93f 	bl	8000288 <__aeabi_dsub>
 800b00a:	9d01      	ldr	r5, [sp, #4]
 800b00c:	4682      	mov	sl, r0
 800b00e:	468b      	mov	fp, r1
 800b010:	4649      	mov	r1, r9
 800b012:	4640      	mov	r0, r8
 800b014:	f7f5 fda0 	bl	8000b58 <__aeabi_d2iz>
 800b018:	4606      	mov	r6, r0
 800b01a:	f7f5 fa83 	bl	8000524 <__aeabi_i2d>
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	4640      	mov	r0, r8
 800b024:	4649      	mov	r1, r9
 800b026:	f7f5 f92f 	bl	8000288 <__aeabi_dsub>
 800b02a:	3630      	adds	r6, #48	; 0x30
 800b02c:	f805 6b01 	strb.w	r6, [r5], #1
 800b030:	4652      	mov	r2, sl
 800b032:	465b      	mov	r3, fp
 800b034:	4680      	mov	r8, r0
 800b036:	4689      	mov	r9, r1
 800b038:	f7f5 fd50 	bl	8000adc <__aeabi_dcmplt>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d163      	bne.n	800b108 <_dtoa_r+0x608>
 800b040:	4642      	mov	r2, r8
 800b042:	464b      	mov	r3, r9
 800b044:	4936      	ldr	r1, [pc, #216]	; (800b120 <_dtoa_r+0x620>)
 800b046:	2000      	movs	r0, #0
 800b048:	f7f5 f91e 	bl	8000288 <__aeabi_dsub>
 800b04c:	4652      	mov	r2, sl
 800b04e:	465b      	mov	r3, fp
 800b050:	f7f5 fd44 	bl	8000adc <__aeabi_dcmplt>
 800b054:	2800      	cmp	r0, #0
 800b056:	f040 80b5 	bne.w	800b1c4 <_dtoa_r+0x6c4>
 800b05a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b05c:	429d      	cmp	r5, r3
 800b05e:	d081      	beq.n	800af64 <_dtoa_r+0x464>
 800b060:	4b30      	ldr	r3, [pc, #192]	; (800b124 <_dtoa_r+0x624>)
 800b062:	2200      	movs	r2, #0
 800b064:	4650      	mov	r0, sl
 800b066:	4659      	mov	r1, fp
 800b068:	f7f5 fac6 	bl	80005f8 <__aeabi_dmul>
 800b06c:	4b2d      	ldr	r3, [pc, #180]	; (800b124 <_dtoa_r+0x624>)
 800b06e:	4682      	mov	sl, r0
 800b070:	468b      	mov	fp, r1
 800b072:	4640      	mov	r0, r8
 800b074:	4649      	mov	r1, r9
 800b076:	2200      	movs	r2, #0
 800b078:	f7f5 fabe 	bl	80005f8 <__aeabi_dmul>
 800b07c:	4680      	mov	r8, r0
 800b07e:	4689      	mov	r9, r1
 800b080:	e7c6      	b.n	800b010 <_dtoa_r+0x510>
 800b082:	4650      	mov	r0, sl
 800b084:	4659      	mov	r1, fp
 800b086:	f7f5 fab7 	bl	80005f8 <__aeabi_dmul>
 800b08a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b08c:	9d01      	ldr	r5, [sp, #4]
 800b08e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b090:	4682      	mov	sl, r0
 800b092:	468b      	mov	fp, r1
 800b094:	4649      	mov	r1, r9
 800b096:	4640      	mov	r0, r8
 800b098:	f7f5 fd5e 	bl	8000b58 <__aeabi_d2iz>
 800b09c:	4606      	mov	r6, r0
 800b09e:	f7f5 fa41 	bl	8000524 <__aeabi_i2d>
 800b0a2:	3630      	adds	r6, #48	; 0x30
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	f7f5 f8ec 	bl	8000288 <__aeabi_dsub>
 800b0b0:	f805 6b01 	strb.w	r6, [r5], #1
 800b0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0b6:	429d      	cmp	r5, r3
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	4689      	mov	r9, r1
 800b0bc:	f04f 0200 	mov.w	r2, #0
 800b0c0:	d124      	bne.n	800b10c <_dtoa_r+0x60c>
 800b0c2:	4b1b      	ldr	r3, [pc, #108]	; (800b130 <_dtoa_r+0x630>)
 800b0c4:	4650      	mov	r0, sl
 800b0c6:	4659      	mov	r1, fp
 800b0c8:	f7f5 f8e0 	bl	800028c <__adddf3>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	f7f5 fd20 	bl	8000b18 <__aeabi_dcmpgt>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d173      	bne.n	800b1c4 <_dtoa_r+0x6c4>
 800b0dc:	4652      	mov	r2, sl
 800b0de:	465b      	mov	r3, fp
 800b0e0:	4913      	ldr	r1, [pc, #76]	; (800b130 <_dtoa_r+0x630>)
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	f7f5 f8d0 	bl	8000288 <__aeabi_dsub>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f7f5 fcf4 	bl	8000adc <__aeabi_dcmplt>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	f43f af35 	beq.w	800af64 <_dtoa_r+0x464>
 800b0fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b0fc:	1e6b      	subs	r3, r5, #1
 800b0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800b100:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b104:	2b30      	cmp	r3, #48	; 0x30
 800b106:	d0f8      	beq.n	800b0fa <_dtoa_r+0x5fa>
 800b108:	9700      	str	r7, [sp, #0]
 800b10a:	e049      	b.n	800b1a0 <_dtoa_r+0x6a0>
 800b10c:	4b05      	ldr	r3, [pc, #20]	; (800b124 <_dtoa_r+0x624>)
 800b10e:	f7f5 fa73 	bl	80005f8 <__aeabi_dmul>
 800b112:	4680      	mov	r8, r0
 800b114:	4689      	mov	r9, r1
 800b116:	e7bd      	b.n	800b094 <_dtoa_r+0x594>
 800b118:	0800f618 	.word	0x0800f618
 800b11c:	0800f5f0 	.word	0x0800f5f0
 800b120:	3ff00000 	.word	0x3ff00000
 800b124:	40240000 	.word	0x40240000
 800b128:	401c0000 	.word	0x401c0000
 800b12c:	40140000 	.word	0x40140000
 800b130:	3fe00000 	.word	0x3fe00000
 800b134:	9d01      	ldr	r5, [sp, #4]
 800b136:	4656      	mov	r6, sl
 800b138:	465f      	mov	r7, fp
 800b13a:	4642      	mov	r2, r8
 800b13c:	464b      	mov	r3, r9
 800b13e:	4630      	mov	r0, r6
 800b140:	4639      	mov	r1, r7
 800b142:	f7f5 fb83 	bl	800084c <__aeabi_ddiv>
 800b146:	f7f5 fd07 	bl	8000b58 <__aeabi_d2iz>
 800b14a:	4682      	mov	sl, r0
 800b14c:	f7f5 f9ea 	bl	8000524 <__aeabi_i2d>
 800b150:	4642      	mov	r2, r8
 800b152:	464b      	mov	r3, r9
 800b154:	f7f5 fa50 	bl	80005f8 <__aeabi_dmul>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4630      	mov	r0, r6
 800b15e:	4639      	mov	r1, r7
 800b160:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b164:	f7f5 f890 	bl	8000288 <__aeabi_dsub>
 800b168:	f805 6b01 	strb.w	r6, [r5], #1
 800b16c:	9e01      	ldr	r6, [sp, #4]
 800b16e:	9f03      	ldr	r7, [sp, #12]
 800b170:	1bae      	subs	r6, r5, r6
 800b172:	42b7      	cmp	r7, r6
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	d135      	bne.n	800b1e6 <_dtoa_r+0x6e6>
 800b17a:	f7f5 f887 	bl	800028c <__adddf3>
 800b17e:	4642      	mov	r2, r8
 800b180:	464b      	mov	r3, r9
 800b182:	4606      	mov	r6, r0
 800b184:	460f      	mov	r7, r1
 800b186:	f7f5 fcc7 	bl	8000b18 <__aeabi_dcmpgt>
 800b18a:	b9d0      	cbnz	r0, 800b1c2 <_dtoa_r+0x6c2>
 800b18c:	4642      	mov	r2, r8
 800b18e:	464b      	mov	r3, r9
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800b198:	b110      	cbz	r0, 800b1a0 <_dtoa_r+0x6a0>
 800b19a:	f01a 0f01 	tst.w	sl, #1
 800b19e:	d110      	bne.n	800b1c2 <_dtoa_r+0x6c2>
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	ee18 1a10 	vmov	r1, s16
 800b1a6:	f000 fee3 	bl	800bf70 <_Bfree>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9800      	ldr	r0, [sp, #0]
 800b1ae:	702b      	strb	r3, [r5, #0]
 800b1b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	6018      	str	r0, [r3, #0]
 800b1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f43f acf1 	beq.w	800aba0 <_dtoa_r+0xa0>
 800b1be:	601d      	str	r5, [r3, #0]
 800b1c0:	e4ee      	b.n	800aba0 <_dtoa_r+0xa0>
 800b1c2:	9f00      	ldr	r7, [sp, #0]
 800b1c4:	462b      	mov	r3, r5
 800b1c6:	461d      	mov	r5, r3
 800b1c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1cc:	2a39      	cmp	r2, #57	; 0x39
 800b1ce:	d106      	bne.n	800b1de <_dtoa_r+0x6de>
 800b1d0:	9a01      	ldr	r2, [sp, #4]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d1f7      	bne.n	800b1c6 <_dtoa_r+0x6c6>
 800b1d6:	9901      	ldr	r1, [sp, #4]
 800b1d8:	2230      	movs	r2, #48	; 0x30
 800b1da:	3701      	adds	r7, #1
 800b1dc:	700a      	strb	r2, [r1, #0]
 800b1de:	781a      	ldrb	r2, [r3, #0]
 800b1e0:	3201      	adds	r2, #1
 800b1e2:	701a      	strb	r2, [r3, #0]
 800b1e4:	e790      	b.n	800b108 <_dtoa_r+0x608>
 800b1e6:	4ba6      	ldr	r3, [pc, #664]	; (800b480 <_dtoa_r+0x980>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f7f5 fa05 	bl	80005f8 <__aeabi_dmul>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	f7f5 fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d09d      	beq.n	800b13a <_dtoa_r+0x63a>
 800b1fe:	e7cf      	b.n	800b1a0 <_dtoa_r+0x6a0>
 800b200:	9a08      	ldr	r2, [sp, #32]
 800b202:	2a00      	cmp	r2, #0
 800b204:	f000 80d7 	beq.w	800b3b6 <_dtoa_r+0x8b6>
 800b208:	9a06      	ldr	r2, [sp, #24]
 800b20a:	2a01      	cmp	r2, #1
 800b20c:	f300 80ba 	bgt.w	800b384 <_dtoa_r+0x884>
 800b210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b212:	2a00      	cmp	r2, #0
 800b214:	f000 80b2 	beq.w	800b37c <_dtoa_r+0x87c>
 800b218:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b21c:	9e07      	ldr	r6, [sp, #28]
 800b21e:	9d04      	ldr	r5, [sp, #16]
 800b220:	9a04      	ldr	r2, [sp, #16]
 800b222:	441a      	add	r2, r3
 800b224:	9204      	str	r2, [sp, #16]
 800b226:	9a05      	ldr	r2, [sp, #20]
 800b228:	2101      	movs	r1, #1
 800b22a:	441a      	add	r2, r3
 800b22c:	4620      	mov	r0, r4
 800b22e:	9205      	str	r2, [sp, #20]
 800b230:	f000 ffa0 	bl	800c174 <__i2b>
 800b234:	4607      	mov	r7, r0
 800b236:	2d00      	cmp	r5, #0
 800b238:	dd0c      	ble.n	800b254 <_dtoa_r+0x754>
 800b23a:	9b05      	ldr	r3, [sp, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd09      	ble.n	800b254 <_dtoa_r+0x754>
 800b240:	42ab      	cmp	r3, r5
 800b242:	9a04      	ldr	r2, [sp, #16]
 800b244:	bfa8      	it	ge
 800b246:	462b      	movge	r3, r5
 800b248:	1ad2      	subs	r2, r2, r3
 800b24a:	9204      	str	r2, [sp, #16]
 800b24c:	9a05      	ldr	r2, [sp, #20]
 800b24e:	1aed      	subs	r5, r5, r3
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	9305      	str	r3, [sp, #20]
 800b254:	9b07      	ldr	r3, [sp, #28]
 800b256:	b31b      	cbz	r3, 800b2a0 <_dtoa_r+0x7a0>
 800b258:	9b08      	ldr	r3, [sp, #32]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 80af 	beq.w	800b3be <_dtoa_r+0x8be>
 800b260:	2e00      	cmp	r6, #0
 800b262:	dd13      	ble.n	800b28c <_dtoa_r+0x78c>
 800b264:	4639      	mov	r1, r7
 800b266:	4632      	mov	r2, r6
 800b268:	4620      	mov	r0, r4
 800b26a:	f001 f843 	bl	800c2f4 <__pow5mult>
 800b26e:	ee18 2a10 	vmov	r2, s16
 800b272:	4601      	mov	r1, r0
 800b274:	4607      	mov	r7, r0
 800b276:	4620      	mov	r0, r4
 800b278:	f000 ff92 	bl	800c1a0 <__multiply>
 800b27c:	ee18 1a10 	vmov	r1, s16
 800b280:	4680      	mov	r8, r0
 800b282:	4620      	mov	r0, r4
 800b284:	f000 fe74 	bl	800bf70 <_Bfree>
 800b288:	ee08 8a10 	vmov	s16, r8
 800b28c:	9b07      	ldr	r3, [sp, #28]
 800b28e:	1b9a      	subs	r2, r3, r6
 800b290:	d006      	beq.n	800b2a0 <_dtoa_r+0x7a0>
 800b292:	ee18 1a10 	vmov	r1, s16
 800b296:	4620      	mov	r0, r4
 800b298:	f001 f82c 	bl	800c2f4 <__pow5mult>
 800b29c:	ee08 0a10 	vmov	s16, r0
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f000 ff66 	bl	800c174 <__i2b>
 800b2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	f340 8088 	ble.w	800b3c2 <_dtoa_r+0x8c2>
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	4601      	mov	r1, r0
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f001 f81c 	bl	800c2f4 <__pow5mult>
 800b2bc:	9b06      	ldr	r3, [sp, #24]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	f340 8081 	ble.w	800b3c8 <_dtoa_r+0x8c8>
 800b2c6:	f04f 0800 	mov.w	r8, #0
 800b2ca:	6933      	ldr	r3, [r6, #16]
 800b2cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b2d0:	6918      	ldr	r0, [r3, #16]
 800b2d2:	f000 feff 	bl	800c0d4 <__hi0bits>
 800b2d6:	f1c0 0020 	rsb	r0, r0, #32
 800b2da:	9b05      	ldr	r3, [sp, #20]
 800b2dc:	4418      	add	r0, r3
 800b2de:	f010 001f 	ands.w	r0, r0, #31
 800b2e2:	f000 8092 	beq.w	800b40a <_dtoa_r+0x90a>
 800b2e6:	f1c0 0320 	rsb	r3, r0, #32
 800b2ea:	2b04      	cmp	r3, #4
 800b2ec:	f340 808a 	ble.w	800b404 <_dtoa_r+0x904>
 800b2f0:	f1c0 001c 	rsb	r0, r0, #28
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	4403      	add	r3, r0
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	4403      	add	r3, r0
 800b2fe:	4405      	add	r5, r0
 800b300:	9305      	str	r3, [sp, #20]
 800b302:	9b04      	ldr	r3, [sp, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	dd07      	ble.n	800b318 <_dtoa_r+0x818>
 800b308:	ee18 1a10 	vmov	r1, s16
 800b30c:	461a      	mov	r2, r3
 800b30e:	4620      	mov	r0, r4
 800b310:	f001 f84a 	bl	800c3a8 <__lshift>
 800b314:	ee08 0a10 	vmov	s16, r0
 800b318:	9b05      	ldr	r3, [sp, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dd05      	ble.n	800b32a <_dtoa_r+0x82a>
 800b31e:	4631      	mov	r1, r6
 800b320:	461a      	mov	r2, r3
 800b322:	4620      	mov	r0, r4
 800b324:	f001 f840 	bl	800c3a8 <__lshift>
 800b328:	4606      	mov	r6, r0
 800b32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d06e      	beq.n	800b40e <_dtoa_r+0x90e>
 800b330:	ee18 0a10 	vmov	r0, s16
 800b334:	4631      	mov	r1, r6
 800b336:	f001 f8a7 	bl	800c488 <__mcmp>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	da67      	bge.n	800b40e <_dtoa_r+0x90e>
 800b33e:	9b00      	ldr	r3, [sp, #0]
 800b340:	3b01      	subs	r3, #1
 800b342:	ee18 1a10 	vmov	r1, s16
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	220a      	movs	r2, #10
 800b34a:	2300      	movs	r3, #0
 800b34c:	4620      	mov	r0, r4
 800b34e:	f000 fe31 	bl	800bfb4 <__multadd>
 800b352:	9b08      	ldr	r3, [sp, #32]
 800b354:	ee08 0a10 	vmov	s16, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f000 81b1 	beq.w	800b6c0 <_dtoa_r+0xbc0>
 800b35e:	2300      	movs	r3, #0
 800b360:	4639      	mov	r1, r7
 800b362:	220a      	movs	r2, #10
 800b364:	4620      	mov	r0, r4
 800b366:	f000 fe25 	bl	800bfb4 <__multadd>
 800b36a:	9b02      	ldr	r3, [sp, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	4607      	mov	r7, r0
 800b370:	f300 808e 	bgt.w	800b490 <_dtoa_r+0x990>
 800b374:	9b06      	ldr	r3, [sp, #24]
 800b376:	2b02      	cmp	r3, #2
 800b378:	dc51      	bgt.n	800b41e <_dtoa_r+0x91e>
 800b37a:	e089      	b.n	800b490 <_dtoa_r+0x990>
 800b37c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b37e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b382:	e74b      	b.n	800b21c <_dtoa_r+0x71c>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	1e5e      	subs	r6, r3, #1
 800b388:	9b07      	ldr	r3, [sp, #28]
 800b38a:	42b3      	cmp	r3, r6
 800b38c:	bfbf      	itttt	lt
 800b38e:	9b07      	ldrlt	r3, [sp, #28]
 800b390:	9607      	strlt	r6, [sp, #28]
 800b392:	1af2      	sublt	r2, r6, r3
 800b394:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b396:	bfb6      	itet	lt
 800b398:	189b      	addlt	r3, r3, r2
 800b39a:	1b9e      	subge	r6, r3, r6
 800b39c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	bfb8      	it	lt
 800b3a2:	2600      	movlt	r6, #0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bfb7      	itett	lt
 800b3a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b3ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b3b0:	1a9d      	sublt	r5, r3, r2
 800b3b2:	2300      	movlt	r3, #0
 800b3b4:	e734      	b.n	800b220 <_dtoa_r+0x720>
 800b3b6:	9e07      	ldr	r6, [sp, #28]
 800b3b8:	9d04      	ldr	r5, [sp, #16]
 800b3ba:	9f08      	ldr	r7, [sp, #32]
 800b3bc:	e73b      	b.n	800b236 <_dtoa_r+0x736>
 800b3be:	9a07      	ldr	r2, [sp, #28]
 800b3c0:	e767      	b.n	800b292 <_dtoa_r+0x792>
 800b3c2:	9b06      	ldr	r3, [sp, #24]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	dc18      	bgt.n	800b3fa <_dtoa_r+0x8fa>
 800b3c8:	f1ba 0f00 	cmp.w	sl, #0
 800b3cc:	d115      	bne.n	800b3fa <_dtoa_r+0x8fa>
 800b3ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3d2:	b993      	cbnz	r3, 800b3fa <_dtoa_r+0x8fa>
 800b3d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3d8:	0d1b      	lsrs	r3, r3, #20
 800b3da:	051b      	lsls	r3, r3, #20
 800b3dc:	b183      	cbz	r3, 800b400 <_dtoa_r+0x900>
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	9b05      	ldr	r3, [sp, #20]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	9305      	str	r3, [sp, #20]
 800b3ea:	f04f 0801 	mov.w	r8, #1
 800b3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f47f af6a 	bne.w	800b2ca <_dtoa_r+0x7ca>
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	e76f      	b.n	800b2da <_dtoa_r+0x7da>
 800b3fa:	f04f 0800 	mov.w	r8, #0
 800b3fe:	e7f6      	b.n	800b3ee <_dtoa_r+0x8ee>
 800b400:	4698      	mov	r8, r3
 800b402:	e7f4      	b.n	800b3ee <_dtoa_r+0x8ee>
 800b404:	f43f af7d 	beq.w	800b302 <_dtoa_r+0x802>
 800b408:	4618      	mov	r0, r3
 800b40a:	301c      	adds	r0, #28
 800b40c:	e772      	b.n	800b2f4 <_dtoa_r+0x7f4>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	dc37      	bgt.n	800b484 <_dtoa_r+0x984>
 800b414:	9b06      	ldr	r3, [sp, #24]
 800b416:	2b02      	cmp	r3, #2
 800b418:	dd34      	ble.n	800b484 <_dtoa_r+0x984>
 800b41a:	9b03      	ldr	r3, [sp, #12]
 800b41c:	9302      	str	r3, [sp, #8]
 800b41e:	9b02      	ldr	r3, [sp, #8]
 800b420:	b96b      	cbnz	r3, 800b43e <_dtoa_r+0x93e>
 800b422:	4631      	mov	r1, r6
 800b424:	2205      	movs	r2, #5
 800b426:	4620      	mov	r0, r4
 800b428:	f000 fdc4 	bl	800bfb4 <__multadd>
 800b42c:	4601      	mov	r1, r0
 800b42e:	4606      	mov	r6, r0
 800b430:	ee18 0a10 	vmov	r0, s16
 800b434:	f001 f828 	bl	800c488 <__mcmp>
 800b438:	2800      	cmp	r0, #0
 800b43a:	f73f adbb 	bgt.w	800afb4 <_dtoa_r+0x4b4>
 800b43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b440:	9d01      	ldr	r5, [sp, #4]
 800b442:	43db      	mvns	r3, r3
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	f04f 0800 	mov.w	r8, #0
 800b44a:	4631      	mov	r1, r6
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 fd8f 	bl	800bf70 <_Bfree>
 800b452:	2f00      	cmp	r7, #0
 800b454:	f43f aea4 	beq.w	800b1a0 <_dtoa_r+0x6a0>
 800b458:	f1b8 0f00 	cmp.w	r8, #0
 800b45c:	d005      	beq.n	800b46a <_dtoa_r+0x96a>
 800b45e:	45b8      	cmp	r8, r7
 800b460:	d003      	beq.n	800b46a <_dtoa_r+0x96a>
 800b462:	4641      	mov	r1, r8
 800b464:	4620      	mov	r0, r4
 800b466:	f000 fd83 	bl	800bf70 <_Bfree>
 800b46a:	4639      	mov	r1, r7
 800b46c:	4620      	mov	r0, r4
 800b46e:	f000 fd7f 	bl	800bf70 <_Bfree>
 800b472:	e695      	b.n	800b1a0 <_dtoa_r+0x6a0>
 800b474:	2600      	movs	r6, #0
 800b476:	4637      	mov	r7, r6
 800b478:	e7e1      	b.n	800b43e <_dtoa_r+0x93e>
 800b47a:	9700      	str	r7, [sp, #0]
 800b47c:	4637      	mov	r7, r6
 800b47e:	e599      	b.n	800afb4 <_dtoa_r+0x4b4>
 800b480:	40240000 	.word	0x40240000
 800b484:	9b08      	ldr	r3, [sp, #32]
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 80ca 	beq.w	800b620 <_dtoa_r+0xb20>
 800b48c:	9b03      	ldr	r3, [sp, #12]
 800b48e:	9302      	str	r3, [sp, #8]
 800b490:	2d00      	cmp	r5, #0
 800b492:	dd05      	ble.n	800b4a0 <_dtoa_r+0x9a0>
 800b494:	4639      	mov	r1, r7
 800b496:	462a      	mov	r2, r5
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 ff85 	bl	800c3a8 <__lshift>
 800b49e:	4607      	mov	r7, r0
 800b4a0:	f1b8 0f00 	cmp.w	r8, #0
 800b4a4:	d05b      	beq.n	800b55e <_dtoa_r+0xa5e>
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f000 fd21 	bl	800bef0 <_Balloc>
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	b928      	cbnz	r0, 800b4be <_dtoa_r+0x9be>
 800b4b2:	4b87      	ldr	r3, [pc, #540]	; (800b6d0 <_dtoa_r+0xbd0>)
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b4ba:	f7ff bb3b 	b.w	800ab34 <_dtoa_r+0x34>
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	3202      	adds	r2, #2
 800b4c2:	0092      	lsls	r2, r2, #2
 800b4c4:	f107 010c 	add.w	r1, r7, #12
 800b4c8:	300c      	adds	r0, #12
 800b4ca:	f7fd f92d 	bl	8008728 <memcpy>
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 ff68 	bl	800c3a8 <__lshift>
 800b4d8:	9b01      	ldr	r3, [sp, #4]
 800b4da:	f103 0901 	add.w	r9, r3, #1
 800b4de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	9305      	str	r3, [sp, #20]
 800b4e6:	f00a 0301 	and.w	r3, sl, #1
 800b4ea:	46b8      	mov	r8, r7
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	4607      	mov	r7, r0
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	ee18 0a10 	vmov	r0, s16
 800b4f6:	f7ff fa75 	bl	800a9e4 <quorem>
 800b4fa:	4641      	mov	r1, r8
 800b4fc:	9002      	str	r0, [sp, #8]
 800b4fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b502:	ee18 0a10 	vmov	r0, s16
 800b506:	f000 ffbf 	bl	800c488 <__mcmp>
 800b50a:	463a      	mov	r2, r7
 800b50c:	9003      	str	r0, [sp, #12]
 800b50e:	4631      	mov	r1, r6
 800b510:	4620      	mov	r0, r4
 800b512:	f000 ffd5 	bl	800c4c0 <__mdiff>
 800b516:	68c2      	ldr	r2, [r0, #12]
 800b518:	f109 3bff 	add.w	fp, r9, #4294967295
 800b51c:	4605      	mov	r5, r0
 800b51e:	bb02      	cbnz	r2, 800b562 <_dtoa_r+0xa62>
 800b520:	4601      	mov	r1, r0
 800b522:	ee18 0a10 	vmov	r0, s16
 800b526:	f000 ffaf 	bl	800c488 <__mcmp>
 800b52a:	4602      	mov	r2, r0
 800b52c:	4629      	mov	r1, r5
 800b52e:	4620      	mov	r0, r4
 800b530:	9207      	str	r2, [sp, #28]
 800b532:	f000 fd1d 	bl	800bf70 <_Bfree>
 800b536:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b53a:	ea43 0102 	orr.w	r1, r3, r2
 800b53e:	9b04      	ldr	r3, [sp, #16]
 800b540:	430b      	orrs	r3, r1
 800b542:	464d      	mov	r5, r9
 800b544:	d10f      	bne.n	800b566 <_dtoa_r+0xa66>
 800b546:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b54a:	d02a      	beq.n	800b5a2 <_dtoa_r+0xaa2>
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dd02      	ble.n	800b558 <_dtoa_r+0xa58>
 800b552:	9b02      	ldr	r3, [sp, #8]
 800b554:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b558:	f88b a000 	strb.w	sl, [fp]
 800b55c:	e775      	b.n	800b44a <_dtoa_r+0x94a>
 800b55e:	4638      	mov	r0, r7
 800b560:	e7ba      	b.n	800b4d8 <_dtoa_r+0x9d8>
 800b562:	2201      	movs	r2, #1
 800b564:	e7e2      	b.n	800b52c <_dtoa_r+0xa2c>
 800b566:	9b03      	ldr	r3, [sp, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	db04      	blt.n	800b576 <_dtoa_r+0xa76>
 800b56c:	9906      	ldr	r1, [sp, #24]
 800b56e:	430b      	orrs	r3, r1
 800b570:	9904      	ldr	r1, [sp, #16]
 800b572:	430b      	orrs	r3, r1
 800b574:	d122      	bne.n	800b5bc <_dtoa_r+0xabc>
 800b576:	2a00      	cmp	r2, #0
 800b578:	ddee      	ble.n	800b558 <_dtoa_r+0xa58>
 800b57a:	ee18 1a10 	vmov	r1, s16
 800b57e:	2201      	movs	r2, #1
 800b580:	4620      	mov	r0, r4
 800b582:	f000 ff11 	bl	800c3a8 <__lshift>
 800b586:	4631      	mov	r1, r6
 800b588:	ee08 0a10 	vmov	s16, r0
 800b58c:	f000 ff7c 	bl	800c488 <__mcmp>
 800b590:	2800      	cmp	r0, #0
 800b592:	dc03      	bgt.n	800b59c <_dtoa_r+0xa9c>
 800b594:	d1e0      	bne.n	800b558 <_dtoa_r+0xa58>
 800b596:	f01a 0f01 	tst.w	sl, #1
 800b59a:	d0dd      	beq.n	800b558 <_dtoa_r+0xa58>
 800b59c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b5a0:	d1d7      	bne.n	800b552 <_dtoa_r+0xa52>
 800b5a2:	2339      	movs	r3, #57	; 0x39
 800b5a4:	f88b 3000 	strb.w	r3, [fp]
 800b5a8:	462b      	mov	r3, r5
 800b5aa:	461d      	mov	r5, r3
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5b2:	2a39      	cmp	r2, #57	; 0x39
 800b5b4:	d071      	beq.n	800b69a <_dtoa_r+0xb9a>
 800b5b6:	3201      	adds	r2, #1
 800b5b8:	701a      	strb	r2, [r3, #0]
 800b5ba:	e746      	b.n	800b44a <_dtoa_r+0x94a>
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	dd07      	ble.n	800b5d0 <_dtoa_r+0xad0>
 800b5c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b5c4:	d0ed      	beq.n	800b5a2 <_dtoa_r+0xaa2>
 800b5c6:	f10a 0301 	add.w	r3, sl, #1
 800b5ca:	f88b 3000 	strb.w	r3, [fp]
 800b5ce:	e73c      	b.n	800b44a <_dtoa_r+0x94a>
 800b5d0:	9b05      	ldr	r3, [sp, #20]
 800b5d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b5d6:	4599      	cmp	r9, r3
 800b5d8:	d047      	beq.n	800b66a <_dtoa_r+0xb6a>
 800b5da:	ee18 1a10 	vmov	r1, s16
 800b5de:	2300      	movs	r3, #0
 800b5e0:	220a      	movs	r2, #10
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 fce6 	bl	800bfb4 <__multadd>
 800b5e8:	45b8      	cmp	r8, r7
 800b5ea:	ee08 0a10 	vmov	s16, r0
 800b5ee:	f04f 0300 	mov.w	r3, #0
 800b5f2:	f04f 020a 	mov.w	r2, #10
 800b5f6:	4641      	mov	r1, r8
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	d106      	bne.n	800b60a <_dtoa_r+0xb0a>
 800b5fc:	f000 fcda 	bl	800bfb4 <__multadd>
 800b600:	4680      	mov	r8, r0
 800b602:	4607      	mov	r7, r0
 800b604:	f109 0901 	add.w	r9, r9, #1
 800b608:	e772      	b.n	800b4f0 <_dtoa_r+0x9f0>
 800b60a:	f000 fcd3 	bl	800bfb4 <__multadd>
 800b60e:	4639      	mov	r1, r7
 800b610:	4680      	mov	r8, r0
 800b612:	2300      	movs	r3, #0
 800b614:	220a      	movs	r2, #10
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fccc 	bl	800bfb4 <__multadd>
 800b61c:	4607      	mov	r7, r0
 800b61e:	e7f1      	b.n	800b604 <_dtoa_r+0xb04>
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	9302      	str	r3, [sp, #8]
 800b624:	9d01      	ldr	r5, [sp, #4]
 800b626:	ee18 0a10 	vmov	r0, s16
 800b62a:	4631      	mov	r1, r6
 800b62c:	f7ff f9da 	bl	800a9e4 <quorem>
 800b630:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b634:	9b01      	ldr	r3, [sp, #4]
 800b636:	f805 ab01 	strb.w	sl, [r5], #1
 800b63a:	1aea      	subs	r2, r5, r3
 800b63c:	9b02      	ldr	r3, [sp, #8]
 800b63e:	4293      	cmp	r3, r2
 800b640:	dd09      	ble.n	800b656 <_dtoa_r+0xb56>
 800b642:	ee18 1a10 	vmov	r1, s16
 800b646:	2300      	movs	r3, #0
 800b648:	220a      	movs	r2, #10
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 fcb2 	bl	800bfb4 <__multadd>
 800b650:	ee08 0a10 	vmov	s16, r0
 800b654:	e7e7      	b.n	800b626 <_dtoa_r+0xb26>
 800b656:	9b02      	ldr	r3, [sp, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	bfc8      	it	gt
 800b65c:	461d      	movgt	r5, r3
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	bfd8      	it	le
 800b662:	2501      	movle	r5, #1
 800b664:	441d      	add	r5, r3
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	ee18 1a10 	vmov	r1, s16
 800b66e:	2201      	movs	r2, #1
 800b670:	4620      	mov	r0, r4
 800b672:	f000 fe99 	bl	800c3a8 <__lshift>
 800b676:	4631      	mov	r1, r6
 800b678:	ee08 0a10 	vmov	s16, r0
 800b67c:	f000 ff04 	bl	800c488 <__mcmp>
 800b680:	2800      	cmp	r0, #0
 800b682:	dc91      	bgt.n	800b5a8 <_dtoa_r+0xaa8>
 800b684:	d102      	bne.n	800b68c <_dtoa_r+0xb8c>
 800b686:	f01a 0f01 	tst.w	sl, #1
 800b68a:	d18d      	bne.n	800b5a8 <_dtoa_r+0xaa8>
 800b68c:	462b      	mov	r3, r5
 800b68e:	461d      	mov	r5, r3
 800b690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b694:	2a30      	cmp	r2, #48	; 0x30
 800b696:	d0fa      	beq.n	800b68e <_dtoa_r+0xb8e>
 800b698:	e6d7      	b.n	800b44a <_dtoa_r+0x94a>
 800b69a:	9a01      	ldr	r2, [sp, #4]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d184      	bne.n	800b5aa <_dtoa_r+0xaaa>
 800b6a0:	9b00      	ldr	r3, [sp, #0]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	2331      	movs	r3, #49	; 0x31
 800b6a8:	7013      	strb	r3, [r2, #0]
 800b6aa:	e6ce      	b.n	800b44a <_dtoa_r+0x94a>
 800b6ac:	4b09      	ldr	r3, [pc, #36]	; (800b6d4 <_dtoa_r+0xbd4>)
 800b6ae:	f7ff ba95 	b.w	800abdc <_dtoa_r+0xdc>
 800b6b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f47f aa6e 	bne.w	800ab96 <_dtoa_r+0x96>
 800b6ba:	4b07      	ldr	r3, [pc, #28]	; (800b6d8 <_dtoa_r+0xbd8>)
 800b6bc:	f7ff ba8e 	b.w	800abdc <_dtoa_r+0xdc>
 800b6c0:	9b02      	ldr	r3, [sp, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	dcae      	bgt.n	800b624 <_dtoa_r+0xb24>
 800b6c6:	9b06      	ldr	r3, [sp, #24]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	f73f aea8 	bgt.w	800b41e <_dtoa_r+0x91e>
 800b6ce:	e7a9      	b.n	800b624 <_dtoa_r+0xb24>
 800b6d0:	0800f507 	.word	0x0800f507
 800b6d4:	0800f409 	.word	0x0800f409
 800b6d8:	0800f488 	.word	0x0800f488

0800b6dc <rshift>:
 800b6dc:	6903      	ldr	r3, [r0, #16]
 800b6de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b6e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b6ea:	f100 0414 	add.w	r4, r0, #20
 800b6ee:	dd45      	ble.n	800b77c <rshift+0xa0>
 800b6f0:	f011 011f 	ands.w	r1, r1, #31
 800b6f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b6f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b6fc:	d10c      	bne.n	800b718 <rshift+0x3c>
 800b6fe:	f100 0710 	add.w	r7, r0, #16
 800b702:	4629      	mov	r1, r5
 800b704:	42b1      	cmp	r1, r6
 800b706:	d334      	bcc.n	800b772 <rshift+0x96>
 800b708:	1a9b      	subs	r3, r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	1eea      	subs	r2, r5, #3
 800b70e:	4296      	cmp	r6, r2
 800b710:	bf38      	it	cc
 800b712:	2300      	movcc	r3, #0
 800b714:	4423      	add	r3, r4
 800b716:	e015      	b.n	800b744 <rshift+0x68>
 800b718:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b71c:	f1c1 0820 	rsb	r8, r1, #32
 800b720:	40cf      	lsrs	r7, r1
 800b722:	f105 0e04 	add.w	lr, r5, #4
 800b726:	46a1      	mov	r9, r4
 800b728:	4576      	cmp	r6, lr
 800b72a:	46f4      	mov	ip, lr
 800b72c:	d815      	bhi.n	800b75a <rshift+0x7e>
 800b72e:	1a9a      	subs	r2, r3, r2
 800b730:	0092      	lsls	r2, r2, #2
 800b732:	3a04      	subs	r2, #4
 800b734:	3501      	adds	r5, #1
 800b736:	42ae      	cmp	r6, r5
 800b738:	bf38      	it	cc
 800b73a:	2200      	movcc	r2, #0
 800b73c:	18a3      	adds	r3, r4, r2
 800b73e:	50a7      	str	r7, [r4, r2]
 800b740:	b107      	cbz	r7, 800b744 <rshift+0x68>
 800b742:	3304      	adds	r3, #4
 800b744:	1b1a      	subs	r2, r3, r4
 800b746:	42a3      	cmp	r3, r4
 800b748:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b74c:	bf08      	it	eq
 800b74e:	2300      	moveq	r3, #0
 800b750:	6102      	str	r2, [r0, #16]
 800b752:	bf08      	it	eq
 800b754:	6143      	streq	r3, [r0, #20]
 800b756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b75a:	f8dc c000 	ldr.w	ip, [ip]
 800b75e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b762:	ea4c 0707 	orr.w	r7, ip, r7
 800b766:	f849 7b04 	str.w	r7, [r9], #4
 800b76a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b76e:	40cf      	lsrs	r7, r1
 800b770:	e7da      	b.n	800b728 <rshift+0x4c>
 800b772:	f851 cb04 	ldr.w	ip, [r1], #4
 800b776:	f847 cf04 	str.w	ip, [r7, #4]!
 800b77a:	e7c3      	b.n	800b704 <rshift+0x28>
 800b77c:	4623      	mov	r3, r4
 800b77e:	e7e1      	b.n	800b744 <rshift+0x68>

0800b780 <__hexdig_fun>:
 800b780:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b784:	2b09      	cmp	r3, #9
 800b786:	d802      	bhi.n	800b78e <__hexdig_fun+0xe>
 800b788:	3820      	subs	r0, #32
 800b78a:	b2c0      	uxtb	r0, r0
 800b78c:	4770      	bx	lr
 800b78e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b792:	2b05      	cmp	r3, #5
 800b794:	d801      	bhi.n	800b79a <__hexdig_fun+0x1a>
 800b796:	3847      	subs	r0, #71	; 0x47
 800b798:	e7f7      	b.n	800b78a <__hexdig_fun+0xa>
 800b79a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b79e:	2b05      	cmp	r3, #5
 800b7a0:	d801      	bhi.n	800b7a6 <__hexdig_fun+0x26>
 800b7a2:	3827      	subs	r0, #39	; 0x27
 800b7a4:	e7f1      	b.n	800b78a <__hexdig_fun+0xa>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	4770      	bx	lr
	...

0800b7ac <__gethex>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	ed2d 8b02 	vpush	{d8}
 800b7b4:	b089      	sub	sp, #36	; 0x24
 800b7b6:	ee08 0a10 	vmov	s16, r0
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	4bb4      	ldr	r3, [pc, #720]	; (800ba90 <__gethex+0x2e4>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	468b      	mov	fp, r1
 800b7c6:	4690      	mov	r8, r2
 800b7c8:	f7f4 fd02 	bl	80001d0 <strlen>
 800b7cc:	9b01      	ldr	r3, [sp, #4]
 800b7ce:	f8db 2000 	ldr.w	r2, [fp]
 800b7d2:	4403      	add	r3, r0
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b7da:	9305      	str	r3, [sp, #20]
 800b7dc:	1c93      	adds	r3, r2, #2
 800b7de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b7e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b7e6:	32fe      	adds	r2, #254	; 0xfe
 800b7e8:	18d1      	adds	r1, r2, r3
 800b7ea:	461f      	mov	r7, r3
 800b7ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b7f0:	9100      	str	r1, [sp, #0]
 800b7f2:	2830      	cmp	r0, #48	; 0x30
 800b7f4:	d0f8      	beq.n	800b7e8 <__gethex+0x3c>
 800b7f6:	f7ff ffc3 	bl	800b780 <__hexdig_fun>
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d13a      	bne.n	800b876 <__gethex+0xca>
 800b800:	9901      	ldr	r1, [sp, #4]
 800b802:	4652      	mov	r2, sl
 800b804:	4638      	mov	r0, r7
 800b806:	f001 fa1f 	bl	800cc48 <strncmp>
 800b80a:	4605      	mov	r5, r0
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d168      	bne.n	800b8e2 <__gethex+0x136>
 800b810:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b814:	eb07 060a 	add.w	r6, r7, sl
 800b818:	f7ff ffb2 	bl	800b780 <__hexdig_fun>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d062      	beq.n	800b8e6 <__gethex+0x13a>
 800b820:	4633      	mov	r3, r6
 800b822:	7818      	ldrb	r0, [r3, #0]
 800b824:	2830      	cmp	r0, #48	; 0x30
 800b826:	461f      	mov	r7, r3
 800b828:	f103 0301 	add.w	r3, r3, #1
 800b82c:	d0f9      	beq.n	800b822 <__gethex+0x76>
 800b82e:	f7ff ffa7 	bl	800b780 <__hexdig_fun>
 800b832:	2301      	movs	r3, #1
 800b834:	fab0 f480 	clz	r4, r0
 800b838:	0964      	lsrs	r4, r4, #5
 800b83a:	4635      	mov	r5, r6
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	463a      	mov	r2, r7
 800b840:	4616      	mov	r6, r2
 800b842:	3201      	adds	r2, #1
 800b844:	7830      	ldrb	r0, [r6, #0]
 800b846:	f7ff ff9b 	bl	800b780 <__hexdig_fun>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d1f8      	bne.n	800b840 <__gethex+0x94>
 800b84e:	9901      	ldr	r1, [sp, #4]
 800b850:	4652      	mov	r2, sl
 800b852:	4630      	mov	r0, r6
 800b854:	f001 f9f8 	bl	800cc48 <strncmp>
 800b858:	b980      	cbnz	r0, 800b87c <__gethex+0xd0>
 800b85a:	b94d      	cbnz	r5, 800b870 <__gethex+0xc4>
 800b85c:	eb06 050a 	add.w	r5, r6, sl
 800b860:	462a      	mov	r2, r5
 800b862:	4616      	mov	r6, r2
 800b864:	3201      	adds	r2, #1
 800b866:	7830      	ldrb	r0, [r6, #0]
 800b868:	f7ff ff8a 	bl	800b780 <__hexdig_fun>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d1f8      	bne.n	800b862 <__gethex+0xb6>
 800b870:	1bad      	subs	r5, r5, r6
 800b872:	00ad      	lsls	r5, r5, #2
 800b874:	e004      	b.n	800b880 <__gethex+0xd4>
 800b876:	2400      	movs	r4, #0
 800b878:	4625      	mov	r5, r4
 800b87a:	e7e0      	b.n	800b83e <__gethex+0x92>
 800b87c:	2d00      	cmp	r5, #0
 800b87e:	d1f7      	bne.n	800b870 <__gethex+0xc4>
 800b880:	7833      	ldrb	r3, [r6, #0]
 800b882:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b886:	2b50      	cmp	r3, #80	; 0x50
 800b888:	d13b      	bne.n	800b902 <__gethex+0x156>
 800b88a:	7873      	ldrb	r3, [r6, #1]
 800b88c:	2b2b      	cmp	r3, #43	; 0x2b
 800b88e:	d02c      	beq.n	800b8ea <__gethex+0x13e>
 800b890:	2b2d      	cmp	r3, #45	; 0x2d
 800b892:	d02e      	beq.n	800b8f2 <__gethex+0x146>
 800b894:	1c71      	adds	r1, r6, #1
 800b896:	f04f 0900 	mov.w	r9, #0
 800b89a:	7808      	ldrb	r0, [r1, #0]
 800b89c:	f7ff ff70 	bl	800b780 <__hexdig_fun>
 800b8a0:	1e43      	subs	r3, r0, #1
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b18      	cmp	r3, #24
 800b8a6:	d82c      	bhi.n	800b902 <__gethex+0x156>
 800b8a8:	f1a0 0210 	sub.w	r2, r0, #16
 800b8ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b8b0:	f7ff ff66 	bl	800b780 <__hexdig_fun>
 800b8b4:	1e43      	subs	r3, r0, #1
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b18      	cmp	r3, #24
 800b8ba:	d91d      	bls.n	800b8f8 <__gethex+0x14c>
 800b8bc:	f1b9 0f00 	cmp.w	r9, #0
 800b8c0:	d000      	beq.n	800b8c4 <__gethex+0x118>
 800b8c2:	4252      	negs	r2, r2
 800b8c4:	4415      	add	r5, r2
 800b8c6:	f8cb 1000 	str.w	r1, [fp]
 800b8ca:	b1e4      	cbz	r4, 800b906 <__gethex+0x15a>
 800b8cc:	9b00      	ldr	r3, [sp, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bf14      	ite	ne
 800b8d2:	2700      	movne	r7, #0
 800b8d4:	2706      	moveq	r7, #6
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	b009      	add	sp, #36	; 0x24
 800b8da:	ecbd 8b02 	vpop	{d8}
 800b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e2:	463e      	mov	r6, r7
 800b8e4:	4625      	mov	r5, r4
 800b8e6:	2401      	movs	r4, #1
 800b8e8:	e7ca      	b.n	800b880 <__gethex+0xd4>
 800b8ea:	f04f 0900 	mov.w	r9, #0
 800b8ee:	1cb1      	adds	r1, r6, #2
 800b8f0:	e7d3      	b.n	800b89a <__gethex+0xee>
 800b8f2:	f04f 0901 	mov.w	r9, #1
 800b8f6:	e7fa      	b.n	800b8ee <__gethex+0x142>
 800b8f8:	230a      	movs	r3, #10
 800b8fa:	fb03 0202 	mla	r2, r3, r2, r0
 800b8fe:	3a10      	subs	r2, #16
 800b900:	e7d4      	b.n	800b8ac <__gethex+0x100>
 800b902:	4631      	mov	r1, r6
 800b904:	e7df      	b.n	800b8c6 <__gethex+0x11a>
 800b906:	1bf3      	subs	r3, r6, r7
 800b908:	3b01      	subs	r3, #1
 800b90a:	4621      	mov	r1, r4
 800b90c:	2b07      	cmp	r3, #7
 800b90e:	dc0b      	bgt.n	800b928 <__gethex+0x17c>
 800b910:	ee18 0a10 	vmov	r0, s16
 800b914:	f000 faec 	bl	800bef0 <_Balloc>
 800b918:	4604      	mov	r4, r0
 800b91a:	b940      	cbnz	r0, 800b92e <__gethex+0x182>
 800b91c:	4b5d      	ldr	r3, [pc, #372]	; (800ba94 <__gethex+0x2e8>)
 800b91e:	4602      	mov	r2, r0
 800b920:	21de      	movs	r1, #222	; 0xde
 800b922:	485d      	ldr	r0, [pc, #372]	; (800ba98 <__gethex+0x2ec>)
 800b924:	f7fc fc12 	bl	800814c <__assert_func>
 800b928:	3101      	adds	r1, #1
 800b92a:	105b      	asrs	r3, r3, #1
 800b92c:	e7ee      	b.n	800b90c <__gethex+0x160>
 800b92e:	f100 0914 	add.w	r9, r0, #20
 800b932:	f04f 0b00 	mov.w	fp, #0
 800b936:	f1ca 0301 	rsb	r3, sl, #1
 800b93a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b93e:	f8cd b000 	str.w	fp, [sp]
 800b942:	9306      	str	r3, [sp, #24]
 800b944:	42b7      	cmp	r7, r6
 800b946:	d340      	bcc.n	800b9ca <__gethex+0x21e>
 800b948:	9802      	ldr	r0, [sp, #8]
 800b94a:	9b00      	ldr	r3, [sp, #0]
 800b94c:	f840 3b04 	str.w	r3, [r0], #4
 800b950:	eba0 0009 	sub.w	r0, r0, r9
 800b954:	1080      	asrs	r0, r0, #2
 800b956:	0146      	lsls	r6, r0, #5
 800b958:	6120      	str	r0, [r4, #16]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 fbba 	bl	800c0d4 <__hi0bits>
 800b960:	1a30      	subs	r0, r6, r0
 800b962:	f8d8 6000 	ldr.w	r6, [r8]
 800b966:	42b0      	cmp	r0, r6
 800b968:	dd63      	ble.n	800ba32 <__gethex+0x286>
 800b96a:	1b87      	subs	r7, r0, r6
 800b96c:	4639      	mov	r1, r7
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 ff5e 	bl	800c830 <__any_on>
 800b974:	4682      	mov	sl, r0
 800b976:	b1a8      	cbz	r0, 800b9a4 <__gethex+0x1f8>
 800b978:	1e7b      	subs	r3, r7, #1
 800b97a:	1159      	asrs	r1, r3, #5
 800b97c:	f003 021f 	and.w	r2, r3, #31
 800b980:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b984:	f04f 0a01 	mov.w	sl, #1
 800b988:	fa0a f202 	lsl.w	r2, sl, r2
 800b98c:	420a      	tst	r2, r1
 800b98e:	d009      	beq.n	800b9a4 <__gethex+0x1f8>
 800b990:	4553      	cmp	r3, sl
 800b992:	dd05      	ble.n	800b9a0 <__gethex+0x1f4>
 800b994:	1eb9      	subs	r1, r7, #2
 800b996:	4620      	mov	r0, r4
 800b998:	f000 ff4a 	bl	800c830 <__any_on>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d145      	bne.n	800ba2c <__gethex+0x280>
 800b9a0:	f04f 0a02 	mov.w	sl, #2
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f7ff fe98 	bl	800b6dc <rshift>
 800b9ac:	443d      	add	r5, r7
 800b9ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9b2:	42ab      	cmp	r3, r5
 800b9b4:	da4c      	bge.n	800ba50 <__gethex+0x2a4>
 800b9b6:	ee18 0a10 	vmov	r0, s16
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	f000 fad8 	bl	800bf70 <_Bfree>
 800b9c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	27a3      	movs	r7, #163	; 0xa3
 800b9c8:	e785      	b.n	800b8d6 <__gethex+0x12a>
 800b9ca:	1e73      	subs	r3, r6, #1
 800b9cc:	9a05      	ldr	r2, [sp, #20]
 800b9ce:	9303      	str	r3, [sp, #12]
 800b9d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d019      	beq.n	800ba0c <__gethex+0x260>
 800b9d8:	f1bb 0f20 	cmp.w	fp, #32
 800b9dc:	d107      	bne.n	800b9ee <__gethex+0x242>
 800b9de:	9b02      	ldr	r3, [sp, #8]
 800b9e0:	9a00      	ldr	r2, [sp, #0]
 800b9e2:	f843 2b04 	str.w	r2, [r3], #4
 800b9e6:	9302      	str	r3, [sp, #8]
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	469b      	mov	fp, r3
 800b9ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b9f2:	f7ff fec5 	bl	800b780 <__hexdig_fun>
 800b9f6:	9b00      	ldr	r3, [sp, #0]
 800b9f8:	f000 000f 	and.w	r0, r0, #15
 800b9fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800ba00:	4303      	orrs	r3, r0
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	f10b 0b04 	add.w	fp, fp, #4
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	e00d      	b.n	800ba28 <__gethex+0x27c>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	9a06      	ldr	r2, [sp, #24]
 800ba10:	4413      	add	r3, r2
 800ba12:	42bb      	cmp	r3, r7
 800ba14:	d3e0      	bcc.n	800b9d8 <__gethex+0x22c>
 800ba16:	4618      	mov	r0, r3
 800ba18:	9901      	ldr	r1, [sp, #4]
 800ba1a:	9307      	str	r3, [sp, #28]
 800ba1c:	4652      	mov	r2, sl
 800ba1e:	f001 f913 	bl	800cc48 <strncmp>
 800ba22:	9b07      	ldr	r3, [sp, #28]
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d1d7      	bne.n	800b9d8 <__gethex+0x22c>
 800ba28:	461e      	mov	r6, r3
 800ba2a:	e78b      	b.n	800b944 <__gethex+0x198>
 800ba2c:	f04f 0a03 	mov.w	sl, #3
 800ba30:	e7b8      	b.n	800b9a4 <__gethex+0x1f8>
 800ba32:	da0a      	bge.n	800ba4a <__gethex+0x29e>
 800ba34:	1a37      	subs	r7, r6, r0
 800ba36:	4621      	mov	r1, r4
 800ba38:	ee18 0a10 	vmov	r0, s16
 800ba3c:	463a      	mov	r2, r7
 800ba3e:	f000 fcb3 	bl	800c3a8 <__lshift>
 800ba42:	1bed      	subs	r5, r5, r7
 800ba44:	4604      	mov	r4, r0
 800ba46:	f100 0914 	add.w	r9, r0, #20
 800ba4a:	f04f 0a00 	mov.w	sl, #0
 800ba4e:	e7ae      	b.n	800b9ae <__gethex+0x202>
 800ba50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ba54:	42a8      	cmp	r0, r5
 800ba56:	dd72      	ble.n	800bb3e <__gethex+0x392>
 800ba58:	1b45      	subs	r5, r0, r5
 800ba5a:	42ae      	cmp	r6, r5
 800ba5c:	dc36      	bgt.n	800bacc <__gethex+0x320>
 800ba5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d02a      	beq.n	800babc <__gethex+0x310>
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d02c      	beq.n	800bac4 <__gethex+0x318>
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d11c      	bne.n	800baa8 <__gethex+0x2fc>
 800ba6e:	42ae      	cmp	r6, r5
 800ba70:	d11a      	bne.n	800baa8 <__gethex+0x2fc>
 800ba72:	2e01      	cmp	r6, #1
 800ba74:	d112      	bne.n	800ba9c <__gethex+0x2f0>
 800ba76:	9a04      	ldr	r2, [sp, #16]
 800ba78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	2301      	movs	r3, #1
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	f8c9 3000 	str.w	r3, [r9]
 800ba86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba88:	2762      	movs	r7, #98	; 0x62
 800ba8a:	601c      	str	r4, [r3, #0]
 800ba8c:	e723      	b.n	800b8d6 <__gethex+0x12a>
 800ba8e:	bf00      	nop
 800ba90:	0800f580 	.word	0x0800f580
 800ba94:	0800f507 	.word	0x0800f507
 800ba98:	0800f518 	.word	0x0800f518
 800ba9c:	1e71      	subs	r1, r6, #1
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 fec6 	bl	800c830 <__any_on>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d1e6      	bne.n	800ba76 <__gethex+0x2ca>
 800baa8:	ee18 0a10 	vmov	r0, s16
 800baac:	4621      	mov	r1, r4
 800baae:	f000 fa5f 	bl	800bf70 <_Bfree>
 800bab2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bab4:	2300      	movs	r3, #0
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	2750      	movs	r7, #80	; 0x50
 800baba:	e70c      	b.n	800b8d6 <__gethex+0x12a>
 800babc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1f2      	bne.n	800baa8 <__gethex+0x2fc>
 800bac2:	e7d8      	b.n	800ba76 <__gethex+0x2ca>
 800bac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1d5      	bne.n	800ba76 <__gethex+0x2ca>
 800baca:	e7ed      	b.n	800baa8 <__gethex+0x2fc>
 800bacc:	1e6f      	subs	r7, r5, #1
 800bace:	f1ba 0f00 	cmp.w	sl, #0
 800bad2:	d131      	bne.n	800bb38 <__gethex+0x38c>
 800bad4:	b127      	cbz	r7, 800bae0 <__gethex+0x334>
 800bad6:	4639      	mov	r1, r7
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 fea9 	bl	800c830 <__any_on>
 800bade:	4682      	mov	sl, r0
 800bae0:	117b      	asrs	r3, r7, #5
 800bae2:	2101      	movs	r1, #1
 800bae4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bae8:	f007 071f 	and.w	r7, r7, #31
 800baec:	fa01 f707 	lsl.w	r7, r1, r7
 800baf0:	421f      	tst	r7, r3
 800baf2:	4629      	mov	r1, r5
 800baf4:	4620      	mov	r0, r4
 800baf6:	bf18      	it	ne
 800baf8:	f04a 0a02 	orrne.w	sl, sl, #2
 800bafc:	1b76      	subs	r6, r6, r5
 800bafe:	f7ff fded 	bl	800b6dc <rshift>
 800bb02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bb06:	2702      	movs	r7, #2
 800bb08:	f1ba 0f00 	cmp.w	sl, #0
 800bb0c:	d048      	beq.n	800bba0 <__gethex+0x3f4>
 800bb0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d015      	beq.n	800bb42 <__gethex+0x396>
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d017      	beq.n	800bb4a <__gethex+0x39e>
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d109      	bne.n	800bb32 <__gethex+0x386>
 800bb1e:	f01a 0f02 	tst.w	sl, #2
 800bb22:	d006      	beq.n	800bb32 <__gethex+0x386>
 800bb24:	f8d9 0000 	ldr.w	r0, [r9]
 800bb28:	ea4a 0a00 	orr.w	sl, sl, r0
 800bb2c:	f01a 0f01 	tst.w	sl, #1
 800bb30:	d10e      	bne.n	800bb50 <__gethex+0x3a4>
 800bb32:	f047 0710 	orr.w	r7, r7, #16
 800bb36:	e033      	b.n	800bba0 <__gethex+0x3f4>
 800bb38:	f04f 0a01 	mov.w	sl, #1
 800bb3c:	e7d0      	b.n	800bae0 <__gethex+0x334>
 800bb3e:	2701      	movs	r7, #1
 800bb40:	e7e2      	b.n	800bb08 <__gethex+0x35c>
 800bb42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb44:	f1c3 0301 	rsb	r3, r3, #1
 800bb48:	9315      	str	r3, [sp, #84]	; 0x54
 800bb4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d0f0      	beq.n	800bb32 <__gethex+0x386>
 800bb50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bb54:	f104 0314 	add.w	r3, r4, #20
 800bb58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bb5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bb60:	f04f 0c00 	mov.w	ip, #0
 800bb64:	4618      	mov	r0, r3
 800bb66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb6a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bb6e:	d01c      	beq.n	800bbaa <__gethex+0x3fe>
 800bb70:	3201      	adds	r2, #1
 800bb72:	6002      	str	r2, [r0, #0]
 800bb74:	2f02      	cmp	r7, #2
 800bb76:	f104 0314 	add.w	r3, r4, #20
 800bb7a:	d13f      	bne.n	800bbfc <__gethex+0x450>
 800bb7c:	f8d8 2000 	ldr.w	r2, [r8]
 800bb80:	3a01      	subs	r2, #1
 800bb82:	42b2      	cmp	r2, r6
 800bb84:	d10a      	bne.n	800bb9c <__gethex+0x3f0>
 800bb86:	1171      	asrs	r1, r6, #5
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb8e:	f006 061f 	and.w	r6, r6, #31
 800bb92:	fa02 f606 	lsl.w	r6, r2, r6
 800bb96:	421e      	tst	r6, r3
 800bb98:	bf18      	it	ne
 800bb9a:	4617      	movne	r7, r2
 800bb9c:	f047 0720 	orr.w	r7, r7, #32
 800bba0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bba2:	601c      	str	r4, [r3, #0]
 800bba4:	9b04      	ldr	r3, [sp, #16]
 800bba6:	601d      	str	r5, [r3, #0]
 800bba8:	e695      	b.n	800b8d6 <__gethex+0x12a>
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	f843 cc04 	str.w	ip, [r3, #-4]
 800bbb0:	d8d8      	bhi.n	800bb64 <__gethex+0x3b8>
 800bbb2:	68a3      	ldr	r3, [r4, #8]
 800bbb4:	459b      	cmp	fp, r3
 800bbb6:	db19      	blt.n	800bbec <__gethex+0x440>
 800bbb8:	6861      	ldr	r1, [r4, #4]
 800bbba:	ee18 0a10 	vmov	r0, s16
 800bbbe:	3101      	adds	r1, #1
 800bbc0:	f000 f996 	bl	800bef0 <_Balloc>
 800bbc4:	4681      	mov	r9, r0
 800bbc6:	b918      	cbnz	r0, 800bbd0 <__gethex+0x424>
 800bbc8:	4b1a      	ldr	r3, [pc, #104]	; (800bc34 <__gethex+0x488>)
 800bbca:	4602      	mov	r2, r0
 800bbcc:	2184      	movs	r1, #132	; 0x84
 800bbce:	e6a8      	b.n	800b922 <__gethex+0x176>
 800bbd0:	6922      	ldr	r2, [r4, #16]
 800bbd2:	3202      	adds	r2, #2
 800bbd4:	f104 010c 	add.w	r1, r4, #12
 800bbd8:	0092      	lsls	r2, r2, #2
 800bbda:	300c      	adds	r0, #12
 800bbdc:	f7fc fda4 	bl	8008728 <memcpy>
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	ee18 0a10 	vmov	r0, s16
 800bbe6:	f000 f9c3 	bl	800bf70 <_Bfree>
 800bbea:	464c      	mov	r4, r9
 800bbec:	6923      	ldr	r3, [r4, #16]
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbf4:	6122      	str	r2, [r4, #16]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	615a      	str	r2, [r3, #20]
 800bbfa:	e7bb      	b.n	800bb74 <__gethex+0x3c8>
 800bbfc:	6922      	ldr	r2, [r4, #16]
 800bbfe:	455a      	cmp	r2, fp
 800bc00:	dd0b      	ble.n	800bc1a <__gethex+0x46e>
 800bc02:	2101      	movs	r1, #1
 800bc04:	4620      	mov	r0, r4
 800bc06:	f7ff fd69 	bl	800b6dc <rshift>
 800bc0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc0e:	3501      	adds	r5, #1
 800bc10:	42ab      	cmp	r3, r5
 800bc12:	f6ff aed0 	blt.w	800b9b6 <__gethex+0x20a>
 800bc16:	2701      	movs	r7, #1
 800bc18:	e7c0      	b.n	800bb9c <__gethex+0x3f0>
 800bc1a:	f016 061f 	ands.w	r6, r6, #31
 800bc1e:	d0fa      	beq.n	800bc16 <__gethex+0x46a>
 800bc20:	4453      	add	r3, sl
 800bc22:	f1c6 0620 	rsb	r6, r6, #32
 800bc26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bc2a:	f000 fa53 	bl	800c0d4 <__hi0bits>
 800bc2e:	42b0      	cmp	r0, r6
 800bc30:	dbe7      	blt.n	800bc02 <__gethex+0x456>
 800bc32:	e7f0      	b.n	800bc16 <__gethex+0x46a>
 800bc34:	0800f507 	.word	0x0800f507

0800bc38 <L_shift>:
 800bc38:	f1c2 0208 	rsb	r2, r2, #8
 800bc3c:	0092      	lsls	r2, r2, #2
 800bc3e:	b570      	push	{r4, r5, r6, lr}
 800bc40:	f1c2 0620 	rsb	r6, r2, #32
 800bc44:	6843      	ldr	r3, [r0, #4]
 800bc46:	6804      	ldr	r4, [r0, #0]
 800bc48:	fa03 f506 	lsl.w	r5, r3, r6
 800bc4c:	432c      	orrs	r4, r5
 800bc4e:	40d3      	lsrs	r3, r2
 800bc50:	6004      	str	r4, [r0, #0]
 800bc52:	f840 3f04 	str.w	r3, [r0, #4]!
 800bc56:	4288      	cmp	r0, r1
 800bc58:	d3f4      	bcc.n	800bc44 <L_shift+0xc>
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}

0800bc5c <__match>:
 800bc5c:	b530      	push	{r4, r5, lr}
 800bc5e:	6803      	ldr	r3, [r0, #0]
 800bc60:	3301      	adds	r3, #1
 800bc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc66:	b914      	cbnz	r4, 800bc6e <__match+0x12>
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	bd30      	pop	{r4, r5, pc}
 800bc6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bc76:	2d19      	cmp	r5, #25
 800bc78:	bf98      	it	ls
 800bc7a:	3220      	addls	r2, #32
 800bc7c:	42a2      	cmp	r2, r4
 800bc7e:	d0f0      	beq.n	800bc62 <__match+0x6>
 800bc80:	2000      	movs	r0, #0
 800bc82:	e7f3      	b.n	800bc6c <__match+0x10>

0800bc84 <__hexnan>:
 800bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	680b      	ldr	r3, [r1, #0]
 800bc8a:	115e      	asrs	r6, r3, #5
 800bc8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc90:	f013 031f 	ands.w	r3, r3, #31
 800bc94:	b087      	sub	sp, #28
 800bc96:	bf18      	it	ne
 800bc98:	3604      	addne	r6, #4
 800bc9a:	2500      	movs	r5, #0
 800bc9c:	1f37      	subs	r7, r6, #4
 800bc9e:	4690      	mov	r8, r2
 800bca0:	6802      	ldr	r2, [r0, #0]
 800bca2:	9301      	str	r3, [sp, #4]
 800bca4:	4682      	mov	sl, r0
 800bca6:	f846 5c04 	str.w	r5, [r6, #-4]
 800bcaa:	46b9      	mov	r9, r7
 800bcac:	463c      	mov	r4, r7
 800bcae:	9502      	str	r5, [sp, #8]
 800bcb0:	46ab      	mov	fp, r5
 800bcb2:	7851      	ldrb	r1, [r2, #1]
 800bcb4:	1c53      	adds	r3, r2, #1
 800bcb6:	9303      	str	r3, [sp, #12]
 800bcb8:	b341      	cbz	r1, 800bd0c <__hexnan+0x88>
 800bcba:	4608      	mov	r0, r1
 800bcbc:	9205      	str	r2, [sp, #20]
 800bcbe:	9104      	str	r1, [sp, #16]
 800bcc0:	f7ff fd5e 	bl	800b780 <__hexdig_fun>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d14f      	bne.n	800bd68 <__hexnan+0xe4>
 800bcc8:	9904      	ldr	r1, [sp, #16]
 800bcca:	9a05      	ldr	r2, [sp, #20]
 800bccc:	2920      	cmp	r1, #32
 800bcce:	d818      	bhi.n	800bd02 <__hexnan+0x7e>
 800bcd0:	9b02      	ldr	r3, [sp, #8]
 800bcd2:	459b      	cmp	fp, r3
 800bcd4:	dd13      	ble.n	800bcfe <__hexnan+0x7a>
 800bcd6:	454c      	cmp	r4, r9
 800bcd8:	d206      	bcs.n	800bce8 <__hexnan+0x64>
 800bcda:	2d07      	cmp	r5, #7
 800bcdc:	dc04      	bgt.n	800bce8 <__hexnan+0x64>
 800bcde:	462a      	mov	r2, r5
 800bce0:	4649      	mov	r1, r9
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7ff ffa8 	bl	800bc38 <L_shift>
 800bce8:	4544      	cmp	r4, r8
 800bcea:	d950      	bls.n	800bd8e <__hexnan+0x10a>
 800bcec:	2300      	movs	r3, #0
 800bcee:	f1a4 0904 	sub.w	r9, r4, #4
 800bcf2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcf6:	f8cd b008 	str.w	fp, [sp, #8]
 800bcfa:	464c      	mov	r4, r9
 800bcfc:	461d      	mov	r5, r3
 800bcfe:	9a03      	ldr	r2, [sp, #12]
 800bd00:	e7d7      	b.n	800bcb2 <__hexnan+0x2e>
 800bd02:	2929      	cmp	r1, #41	; 0x29
 800bd04:	d156      	bne.n	800bdb4 <__hexnan+0x130>
 800bd06:	3202      	adds	r2, #2
 800bd08:	f8ca 2000 	str.w	r2, [sl]
 800bd0c:	f1bb 0f00 	cmp.w	fp, #0
 800bd10:	d050      	beq.n	800bdb4 <__hexnan+0x130>
 800bd12:	454c      	cmp	r4, r9
 800bd14:	d206      	bcs.n	800bd24 <__hexnan+0xa0>
 800bd16:	2d07      	cmp	r5, #7
 800bd18:	dc04      	bgt.n	800bd24 <__hexnan+0xa0>
 800bd1a:	462a      	mov	r2, r5
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f7ff ff8a 	bl	800bc38 <L_shift>
 800bd24:	4544      	cmp	r4, r8
 800bd26:	d934      	bls.n	800bd92 <__hexnan+0x10e>
 800bd28:	f1a8 0204 	sub.w	r2, r8, #4
 800bd2c:	4623      	mov	r3, r4
 800bd2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800bd32:	f842 1f04 	str.w	r1, [r2, #4]!
 800bd36:	429f      	cmp	r7, r3
 800bd38:	d2f9      	bcs.n	800bd2e <__hexnan+0xaa>
 800bd3a:	1b3b      	subs	r3, r7, r4
 800bd3c:	f023 0303 	bic.w	r3, r3, #3
 800bd40:	3304      	adds	r3, #4
 800bd42:	3401      	adds	r4, #1
 800bd44:	3e03      	subs	r6, #3
 800bd46:	42b4      	cmp	r4, r6
 800bd48:	bf88      	it	hi
 800bd4a:	2304      	movhi	r3, #4
 800bd4c:	4443      	add	r3, r8
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f843 2b04 	str.w	r2, [r3], #4
 800bd54:	429f      	cmp	r7, r3
 800bd56:	d2fb      	bcs.n	800bd50 <__hexnan+0xcc>
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	b91b      	cbnz	r3, 800bd64 <__hexnan+0xe0>
 800bd5c:	4547      	cmp	r7, r8
 800bd5e:	d127      	bne.n	800bdb0 <__hexnan+0x12c>
 800bd60:	2301      	movs	r3, #1
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	2005      	movs	r0, #5
 800bd66:	e026      	b.n	800bdb6 <__hexnan+0x132>
 800bd68:	3501      	adds	r5, #1
 800bd6a:	2d08      	cmp	r5, #8
 800bd6c:	f10b 0b01 	add.w	fp, fp, #1
 800bd70:	dd06      	ble.n	800bd80 <__hexnan+0xfc>
 800bd72:	4544      	cmp	r4, r8
 800bd74:	d9c3      	bls.n	800bcfe <__hexnan+0x7a>
 800bd76:	2300      	movs	r3, #0
 800bd78:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd7c:	2501      	movs	r5, #1
 800bd7e:	3c04      	subs	r4, #4
 800bd80:	6822      	ldr	r2, [r4, #0]
 800bd82:	f000 000f 	and.w	r0, r0, #15
 800bd86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bd8a:	6022      	str	r2, [r4, #0]
 800bd8c:	e7b7      	b.n	800bcfe <__hexnan+0x7a>
 800bd8e:	2508      	movs	r5, #8
 800bd90:	e7b5      	b.n	800bcfe <__hexnan+0x7a>
 800bd92:	9b01      	ldr	r3, [sp, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d0df      	beq.n	800bd58 <__hexnan+0xd4>
 800bd98:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9c:	f1c3 0320 	rsb	r3, r3, #32
 800bda0:	fa22 f303 	lsr.w	r3, r2, r3
 800bda4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bda8:	401a      	ands	r2, r3
 800bdaa:	f846 2c04 	str.w	r2, [r6, #-4]
 800bdae:	e7d3      	b.n	800bd58 <__hexnan+0xd4>
 800bdb0:	3f04      	subs	r7, #4
 800bdb2:	e7d1      	b.n	800bd58 <__hexnan+0xd4>
 800bdb4:	2004      	movs	r0, #4
 800bdb6:	b007      	add	sp, #28
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdbc <_localeconv_r>:
 800bdbc:	4800      	ldr	r0, [pc, #0]	; (800bdc0 <_localeconv_r+0x4>)
 800bdbe:	4770      	bx	lr
 800bdc0:	20000164 	.word	0x20000164

0800bdc4 <_lseek_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	4d07      	ldr	r5, [pc, #28]	; (800bde4 <_lseek_r+0x20>)
 800bdc8:	4604      	mov	r4, r0
 800bdca:	4608      	mov	r0, r1
 800bdcc:	4611      	mov	r1, r2
 800bdce:	2200      	movs	r2, #0
 800bdd0:	602a      	str	r2, [r5, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f7f5 fad2 	bl	800137c <_lseek>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_lseek_r+0x1e>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_lseek_r+0x1e>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20000ee8 	.word	0x20000ee8

0800bde8 <__swhatbuf_r>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	460e      	mov	r6, r1
 800bdec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf0:	2900      	cmp	r1, #0
 800bdf2:	b096      	sub	sp, #88	; 0x58
 800bdf4:	4614      	mov	r4, r2
 800bdf6:	461d      	mov	r5, r3
 800bdf8:	da08      	bge.n	800be0c <__swhatbuf_r+0x24>
 800bdfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	602a      	str	r2, [r5, #0]
 800be02:	061a      	lsls	r2, r3, #24
 800be04:	d410      	bmi.n	800be28 <__swhatbuf_r+0x40>
 800be06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be0a:	e00e      	b.n	800be2a <__swhatbuf_r+0x42>
 800be0c:	466a      	mov	r2, sp
 800be0e:	f000 ff3d 	bl	800cc8c <_fstat_r>
 800be12:	2800      	cmp	r0, #0
 800be14:	dbf1      	blt.n	800bdfa <__swhatbuf_r+0x12>
 800be16:	9a01      	ldr	r2, [sp, #4]
 800be18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be20:	425a      	negs	r2, r3
 800be22:	415a      	adcs	r2, r3
 800be24:	602a      	str	r2, [r5, #0]
 800be26:	e7ee      	b.n	800be06 <__swhatbuf_r+0x1e>
 800be28:	2340      	movs	r3, #64	; 0x40
 800be2a:	2000      	movs	r0, #0
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	b016      	add	sp, #88	; 0x58
 800be30:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be34 <__smakebuf_r>:
 800be34:	898b      	ldrh	r3, [r1, #12]
 800be36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be38:	079d      	lsls	r5, r3, #30
 800be3a:	4606      	mov	r6, r0
 800be3c:	460c      	mov	r4, r1
 800be3e:	d507      	bpl.n	800be50 <__smakebuf_r+0x1c>
 800be40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	6123      	str	r3, [r4, #16]
 800be48:	2301      	movs	r3, #1
 800be4a:	6163      	str	r3, [r4, #20]
 800be4c:	b002      	add	sp, #8
 800be4e:	bd70      	pop	{r4, r5, r6, pc}
 800be50:	ab01      	add	r3, sp, #4
 800be52:	466a      	mov	r2, sp
 800be54:	f7ff ffc8 	bl	800bde8 <__swhatbuf_r>
 800be58:	9900      	ldr	r1, [sp, #0]
 800be5a:	4605      	mov	r5, r0
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7fc fd15 	bl	800888c <_malloc_r>
 800be62:	b948      	cbnz	r0, 800be78 <__smakebuf_r+0x44>
 800be64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be68:	059a      	lsls	r2, r3, #22
 800be6a:	d4ef      	bmi.n	800be4c <__smakebuf_r+0x18>
 800be6c:	f023 0303 	bic.w	r3, r3, #3
 800be70:	f043 0302 	orr.w	r3, r3, #2
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	e7e3      	b.n	800be40 <__smakebuf_r+0xc>
 800be78:	4b0d      	ldr	r3, [pc, #52]	; (800beb0 <__smakebuf_r+0x7c>)
 800be7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	6020      	str	r0, [r4, #0]
 800be80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	9b00      	ldr	r3, [sp, #0]
 800be88:	6163      	str	r3, [r4, #20]
 800be8a:	9b01      	ldr	r3, [sp, #4]
 800be8c:	6120      	str	r0, [r4, #16]
 800be8e:	b15b      	cbz	r3, 800bea8 <__smakebuf_r+0x74>
 800be90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be94:	4630      	mov	r0, r6
 800be96:	f000 ff0b 	bl	800ccb0 <_isatty_r>
 800be9a:	b128      	cbz	r0, 800bea8 <__smakebuf_r+0x74>
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	f023 0303 	bic.w	r3, r3, #3
 800bea2:	f043 0301 	orr.w	r3, r3, #1
 800bea6:	81a3      	strh	r3, [r4, #12]
 800bea8:	89a0      	ldrh	r0, [r4, #12]
 800beaa:	4305      	orrs	r5, r0
 800beac:	81a5      	strh	r5, [r4, #12]
 800beae:	e7cd      	b.n	800be4c <__smakebuf_r+0x18>
 800beb0:	08008395 	.word	0x08008395

0800beb4 <__ascii_mbtowc>:
 800beb4:	b082      	sub	sp, #8
 800beb6:	b901      	cbnz	r1, 800beba <__ascii_mbtowc+0x6>
 800beb8:	a901      	add	r1, sp, #4
 800beba:	b142      	cbz	r2, 800bece <__ascii_mbtowc+0x1a>
 800bebc:	b14b      	cbz	r3, 800bed2 <__ascii_mbtowc+0x1e>
 800bebe:	7813      	ldrb	r3, [r2, #0]
 800bec0:	600b      	str	r3, [r1, #0]
 800bec2:	7812      	ldrb	r2, [r2, #0]
 800bec4:	1e10      	subs	r0, r2, #0
 800bec6:	bf18      	it	ne
 800bec8:	2001      	movne	r0, #1
 800beca:	b002      	add	sp, #8
 800becc:	4770      	bx	lr
 800bece:	4610      	mov	r0, r2
 800bed0:	e7fb      	b.n	800beca <__ascii_mbtowc+0x16>
 800bed2:	f06f 0001 	mvn.w	r0, #1
 800bed6:	e7f8      	b.n	800beca <__ascii_mbtowc+0x16>

0800bed8 <__malloc_lock>:
 800bed8:	4801      	ldr	r0, [pc, #4]	; (800bee0 <__malloc_lock+0x8>)
 800beda:	f7fc bc12 	b.w	8008702 <__retarget_lock_acquire_recursive>
 800bede:	bf00      	nop
 800bee0:	20000edc 	.word	0x20000edc

0800bee4 <__malloc_unlock>:
 800bee4:	4801      	ldr	r0, [pc, #4]	; (800beec <__malloc_unlock+0x8>)
 800bee6:	f7fc bc0d 	b.w	8008704 <__retarget_lock_release_recursive>
 800beea:	bf00      	nop
 800beec:	20000edc 	.word	0x20000edc

0800bef0 <_Balloc>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef4:	4604      	mov	r4, r0
 800bef6:	460d      	mov	r5, r1
 800bef8:	b976      	cbnz	r6, 800bf18 <_Balloc+0x28>
 800befa:	2010      	movs	r0, #16
 800befc:	f7fc fc04 	bl	8008708 <malloc>
 800bf00:	4602      	mov	r2, r0
 800bf02:	6260      	str	r0, [r4, #36]	; 0x24
 800bf04:	b920      	cbnz	r0, 800bf10 <_Balloc+0x20>
 800bf06:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <_Balloc+0x78>)
 800bf08:	4818      	ldr	r0, [pc, #96]	; (800bf6c <_Balloc+0x7c>)
 800bf0a:	2166      	movs	r1, #102	; 0x66
 800bf0c:	f7fc f91e 	bl	800814c <__assert_func>
 800bf10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf14:	6006      	str	r6, [r0, #0]
 800bf16:	60c6      	str	r6, [r0, #12]
 800bf18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf1a:	68f3      	ldr	r3, [r6, #12]
 800bf1c:	b183      	cbz	r3, 800bf40 <_Balloc+0x50>
 800bf1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf26:	b9b8      	cbnz	r0, 800bf58 <_Balloc+0x68>
 800bf28:	2101      	movs	r1, #1
 800bf2a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf2e:	1d72      	adds	r2, r6, #5
 800bf30:	0092      	lsls	r2, r2, #2
 800bf32:	4620      	mov	r0, r4
 800bf34:	f7fc fc28 	bl	8008788 <_calloc_r>
 800bf38:	b160      	cbz	r0, 800bf54 <_Balloc+0x64>
 800bf3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf3e:	e00e      	b.n	800bf5e <_Balloc+0x6e>
 800bf40:	2221      	movs	r2, #33	; 0x21
 800bf42:	2104      	movs	r1, #4
 800bf44:	4620      	mov	r0, r4
 800bf46:	f7fc fc1f 	bl	8008788 <_calloc_r>
 800bf4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf4c:	60f0      	str	r0, [r6, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e4      	bne.n	800bf1e <_Balloc+0x2e>
 800bf54:	2000      	movs	r0, #0
 800bf56:	bd70      	pop	{r4, r5, r6, pc}
 800bf58:	6802      	ldr	r2, [r0, #0]
 800bf5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf64:	e7f7      	b.n	800bf56 <_Balloc+0x66>
 800bf66:	bf00      	nop
 800bf68:	0800f495 	.word	0x0800f495
 800bf6c:	0800f594 	.word	0x0800f594

0800bf70 <_Bfree>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	b976      	cbnz	r6, 800bf98 <_Bfree+0x28>
 800bf7a:	2010      	movs	r0, #16
 800bf7c:	f7fc fbc4 	bl	8008708 <malloc>
 800bf80:	4602      	mov	r2, r0
 800bf82:	6268      	str	r0, [r5, #36]	; 0x24
 800bf84:	b920      	cbnz	r0, 800bf90 <_Bfree+0x20>
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <_Bfree+0x3c>)
 800bf88:	4809      	ldr	r0, [pc, #36]	; (800bfb0 <_Bfree+0x40>)
 800bf8a:	218a      	movs	r1, #138	; 0x8a
 800bf8c:	f7fc f8de 	bl	800814c <__assert_func>
 800bf90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf94:	6006      	str	r6, [r0, #0]
 800bf96:	60c6      	str	r6, [r0, #12]
 800bf98:	b13c      	cbz	r4, 800bfaa <_Bfree+0x3a>
 800bf9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf9c:	6862      	ldr	r2, [r4, #4]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfa4:	6021      	str	r1, [r4, #0]
 800bfa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	0800f495 	.word	0x0800f495
 800bfb0:	0800f594 	.word	0x0800f594

0800bfb4 <__multadd>:
 800bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb8:	690d      	ldr	r5, [r1, #16]
 800bfba:	4607      	mov	r7, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	461e      	mov	r6, r3
 800bfc0:	f101 0c14 	add.w	ip, r1, #20
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfca:	b299      	uxth	r1, r3
 800bfcc:	fb02 6101 	mla	r1, r2, r1, r6
 800bfd0:	0c1e      	lsrs	r6, r3, #16
 800bfd2:	0c0b      	lsrs	r3, r1, #16
 800bfd4:	fb02 3306 	mla	r3, r2, r6, r3
 800bfd8:	b289      	uxth	r1, r1
 800bfda:	3001      	adds	r0, #1
 800bfdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfe0:	4285      	cmp	r5, r0
 800bfe2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfea:	dcec      	bgt.n	800bfc6 <__multadd+0x12>
 800bfec:	b30e      	cbz	r6, 800c032 <__multadd+0x7e>
 800bfee:	68a3      	ldr	r3, [r4, #8]
 800bff0:	42ab      	cmp	r3, r5
 800bff2:	dc19      	bgt.n	800c028 <__multadd+0x74>
 800bff4:	6861      	ldr	r1, [r4, #4]
 800bff6:	4638      	mov	r0, r7
 800bff8:	3101      	adds	r1, #1
 800bffa:	f7ff ff79 	bl	800bef0 <_Balloc>
 800bffe:	4680      	mov	r8, r0
 800c000:	b928      	cbnz	r0, 800c00e <__multadd+0x5a>
 800c002:	4602      	mov	r2, r0
 800c004:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <__multadd+0x84>)
 800c006:	480d      	ldr	r0, [pc, #52]	; (800c03c <__multadd+0x88>)
 800c008:	21b5      	movs	r1, #181	; 0xb5
 800c00a:	f7fc f89f 	bl	800814c <__assert_func>
 800c00e:	6922      	ldr	r2, [r4, #16]
 800c010:	3202      	adds	r2, #2
 800c012:	f104 010c 	add.w	r1, r4, #12
 800c016:	0092      	lsls	r2, r2, #2
 800c018:	300c      	adds	r0, #12
 800c01a:	f7fc fb85 	bl	8008728 <memcpy>
 800c01e:	4621      	mov	r1, r4
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff ffa5 	bl	800bf70 <_Bfree>
 800c026:	4644      	mov	r4, r8
 800c028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c02c:	3501      	adds	r5, #1
 800c02e:	615e      	str	r6, [r3, #20]
 800c030:	6125      	str	r5, [r4, #16]
 800c032:	4620      	mov	r0, r4
 800c034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c038:	0800f507 	.word	0x0800f507
 800c03c:	0800f594 	.word	0x0800f594

0800c040 <__s2b>:
 800c040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c044:	460c      	mov	r4, r1
 800c046:	4615      	mov	r5, r2
 800c048:	461f      	mov	r7, r3
 800c04a:	2209      	movs	r2, #9
 800c04c:	3308      	adds	r3, #8
 800c04e:	4606      	mov	r6, r0
 800c050:	fb93 f3f2 	sdiv	r3, r3, r2
 800c054:	2100      	movs	r1, #0
 800c056:	2201      	movs	r2, #1
 800c058:	429a      	cmp	r2, r3
 800c05a:	db09      	blt.n	800c070 <__s2b+0x30>
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7ff ff47 	bl	800bef0 <_Balloc>
 800c062:	b940      	cbnz	r0, 800c076 <__s2b+0x36>
 800c064:	4602      	mov	r2, r0
 800c066:	4b19      	ldr	r3, [pc, #100]	; (800c0cc <__s2b+0x8c>)
 800c068:	4819      	ldr	r0, [pc, #100]	; (800c0d0 <__s2b+0x90>)
 800c06a:	21ce      	movs	r1, #206	; 0xce
 800c06c:	f7fc f86e 	bl	800814c <__assert_func>
 800c070:	0052      	lsls	r2, r2, #1
 800c072:	3101      	adds	r1, #1
 800c074:	e7f0      	b.n	800c058 <__s2b+0x18>
 800c076:	9b08      	ldr	r3, [sp, #32]
 800c078:	6143      	str	r3, [r0, #20]
 800c07a:	2d09      	cmp	r5, #9
 800c07c:	f04f 0301 	mov.w	r3, #1
 800c080:	6103      	str	r3, [r0, #16]
 800c082:	dd16      	ble.n	800c0b2 <__s2b+0x72>
 800c084:	f104 0909 	add.w	r9, r4, #9
 800c088:	46c8      	mov	r8, r9
 800c08a:	442c      	add	r4, r5
 800c08c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c090:	4601      	mov	r1, r0
 800c092:	3b30      	subs	r3, #48	; 0x30
 800c094:	220a      	movs	r2, #10
 800c096:	4630      	mov	r0, r6
 800c098:	f7ff ff8c 	bl	800bfb4 <__multadd>
 800c09c:	45a0      	cmp	r8, r4
 800c09e:	d1f5      	bne.n	800c08c <__s2b+0x4c>
 800c0a0:	f1a5 0408 	sub.w	r4, r5, #8
 800c0a4:	444c      	add	r4, r9
 800c0a6:	1b2d      	subs	r5, r5, r4
 800c0a8:	1963      	adds	r3, r4, r5
 800c0aa:	42bb      	cmp	r3, r7
 800c0ac:	db04      	blt.n	800c0b8 <__s2b+0x78>
 800c0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b2:	340a      	adds	r4, #10
 800c0b4:	2509      	movs	r5, #9
 800c0b6:	e7f6      	b.n	800c0a6 <__s2b+0x66>
 800c0b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0bc:	4601      	mov	r1, r0
 800c0be:	3b30      	subs	r3, #48	; 0x30
 800c0c0:	220a      	movs	r2, #10
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7ff ff76 	bl	800bfb4 <__multadd>
 800c0c8:	e7ee      	b.n	800c0a8 <__s2b+0x68>
 800c0ca:	bf00      	nop
 800c0cc:	0800f507 	.word	0x0800f507
 800c0d0:	0800f594 	.word	0x0800f594

0800c0d4 <__hi0bits>:
 800c0d4:	0c03      	lsrs	r3, r0, #16
 800c0d6:	041b      	lsls	r3, r3, #16
 800c0d8:	b9d3      	cbnz	r3, 800c110 <__hi0bits+0x3c>
 800c0da:	0400      	lsls	r0, r0, #16
 800c0dc:	2310      	movs	r3, #16
 800c0de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0e2:	bf04      	itt	eq
 800c0e4:	0200      	lsleq	r0, r0, #8
 800c0e6:	3308      	addeq	r3, #8
 800c0e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0ec:	bf04      	itt	eq
 800c0ee:	0100      	lsleq	r0, r0, #4
 800c0f0:	3304      	addeq	r3, #4
 800c0f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0f6:	bf04      	itt	eq
 800c0f8:	0080      	lsleq	r0, r0, #2
 800c0fa:	3302      	addeq	r3, #2
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	db05      	blt.n	800c10c <__hi0bits+0x38>
 800c100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c104:	f103 0301 	add.w	r3, r3, #1
 800c108:	bf08      	it	eq
 800c10a:	2320      	moveq	r3, #32
 800c10c:	4618      	mov	r0, r3
 800c10e:	4770      	bx	lr
 800c110:	2300      	movs	r3, #0
 800c112:	e7e4      	b.n	800c0de <__hi0bits+0xa>

0800c114 <__lo0bits>:
 800c114:	6803      	ldr	r3, [r0, #0]
 800c116:	f013 0207 	ands.w	r2, r3, #7
 800c11a:	4601      	mov	r1, r0
 800c11c:	d00b      	beq.n	800c136 <__lo0bits+0x22>
 800c11e:	07da      	lsls	r2, r3, #31
 800c120:	d423      	bmi.n	800c16a <__lo0bits+0x56>
 800c122:	0798      	lsls	r0, r3, #30
 800c124:	bf49      	itett	mi
 800c126:	085b      	lsrmi	r3, r3, #1
 800c128:	089b      	lsrpl	r3, r3, #2
 800c12a:	2001      	movmi	r0, #1
 800c12c:	600b      	strmi	r3, [r1, #0]
 800c12e:	bf5c      	itt	pl
 800c130:	600b      	strpl	r3, [r1, #0]
 800c132:	2002      	movpl	r0, #2
 800c134:	4770      	bx	lr
 800c136:	b298      	uxth	r0, r3
 800c138:	b9a8      	cbnz	r0, 800c166 <__lo0bits+0x52>
 800c13a:	0c1b      	lsrs	r3, r3, #16
 800c13c:	2010      	movs	r0, #16
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	b90a      	cbnz	r2, 800c146 <__lo0bits+0x32>
 800c142:	3008      	adds	r0, #8
 800c144:	0a1b      	lsrs	r3, r3, #8
 800c146:	071a      	lsls	r2, r3, #28
 800c148:	bf04      	itt	eq
 800c14a:	091b      	lsreq	r3, r3, #4
 800c14c:	3004      	addeq	r0, #4
 800c14e:	079a      	lsls	r2, r3, #30
 800c150:	bf04      	itt	eq
 800c152:	089b      	lsreq	r3, r3, #2
 800c154:	3002      	addeq	r0, #2
 800c156:	07da      	lsls	r2, r3, #31
 800c158:	d403      	bmi.n	800c162 <__lo0bits+0x4e>
 800c15a:	085b      	lsrs	r3, r3, #1
 800c15c:	f100 0001 	add.w	r0, r0, #1
 800c160:	d005      	beq.n	800c16e <__lo0bits+0x5a>
 800c162:	600b      	str	r3, [r1, #0]
 800c164:	4770      	bx	lr
 800c166:	4610      	mov	r0, r2
 800c168:	e7e9      	b.n	800c13e <__lo0bits+0x2a>
 800c16a:	2000      	movs	r0, #0
 800c16c:	4770      	bx	lr
 800c16e:	2020      	movs	r0, #32
 800c170:	4770      	bx	lr
	...

0800c174 <__i2b>:
 800c174:	b510      	push	{r4, lr}
 800c176:	460c      	mov	r4, r1
 800c178:	2101      	movs	r1, #1
 800c17a:	f7ff feb9 	bl	800bef0 <_Balloc>
 800c17e:	4602      	mov	r2, r0
 800c180:	b928      	cbnz	r0, 800c18e <__i2b+0x1a>
 800c182:	4b05      	ldr	r3, [pc, #20]	; (800c198 <__i2b+0x24>)
 800c184:	4805      	ldr	r0, [pc, #20]	; (800c19c <__i2b+0x28>)
 800c186:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c18a:	f7fb ffdf 	bl	800814c <__assert_func>
 800c18e:	2301      	movs	r3, #1
 800c190:	6144      	str	r4, [r0, #20]
 800c192:	6103      	str	r3, [r0, #16]
 800c194:	bd10      	pop	{r4, pc}
 800c196:	bf00      	nop
 800c198:	0800f507 	.word	0x0800f507
 800c19c:	0800f594 	.word	0x0800f594

0800c1a0 <__multiply>:
 800c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	4691      	mov	r9, r2
 800c1a6:	690a      	ldr	r2, [r1, #16]
 800c1a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	bfb8      	it	lt
 800c1b0:	460b      	movlt	r3, r1
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	bfbc      	itt	lt
 800c1b6:	464c      	movlt	r4, r9
 800c1b8:	4699      	movlt	r9, r3
 800c1ba:	6927      	ldr	r7, [r4, #16]
 800c1bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1c0:	68a3      	ldr	r3, [r4, #8]
 800c1c2:	6861      	ldr	r1, [r4, #4]
 800c1c4:	eb07 060a 	add.w	r6, r7, sl
 800c1c8:	42b3      	cmp	r3, r6
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	bfb8      	it	lt
 800c1ce:	3101      	addlt	r1, #1
 800c1d0:	f7ff fe8e 	bl	800bef0 <_Balloc>
 800c1d4:	b930      	cbnz	r0, 800c1e4 <__multiply+0x44>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	4b44      	ldr	r3, [pc, #272]	; (800c2ec <__multiply+0x14c>)
 800c1da:	4845      	ldr	r0, [pc, #276]	; (800c2f0 <__multiply+0x150>)
 800c1dc:	f240 115d 	movw	r1, #349	; 0x15d
 800c1e0:	f7fb ffb4 	bl	800814c <__assert_func>
 800c1e4:	f100 0514 	add.w	r5, r0, #20
 800c1e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1ec:	462b      	mov	r3, r5
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	4543      	cmp	r3, r8
 800c1f2:	d321      	bcc.n	800c238 <__multiply+0x98>
 800c1f4:	f104 0314 	add.w	r3, r4, #20
 800c1f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1fc:	f109 0314 	add.w	r3, r9, #20
 800c200:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c204:	9202      	str	r2, [sp, #8]
 800c206:	1b3a      	subs	r2, r7, r4
 800c208:	3a15      	subs	r2, #21
 800c20a:	f022 0203 	bic.w	r2, r2, #3
 800c20e:	3204      	adds	r2, #4
 800c210:	f104 0115 	add.w	r1, r4, #21
 800c214:	428f      	cmp	r7, r1
 800c216:	bf38      	it	cc
 800c218:	2204      	movcc	r2, #4
 800c21a:	9201      	str	r2, [sp, #4]
 800c21c:	9a02      	ldr	r2, [sp, #8]
 800c21e:	9303      	str	r3, [sp, #12]
 800c220:	429a      	cmp	r2, r3
 800c222:	d80c      	bhi.n	800c23e <__multiply+0x9e>
 800c224:	2e00      	cmp	r6, #0
 800c226:	dd03      	ble.n	800c230 <__multiply+0x90>
 800c228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d05a      	beq.n	800c2e6 <__multiply+0x146>
 800c230:	6106      	str	r6, [r0, #16]
 800c232:	b005      	add	sp, #20
 800c234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c238:	f843 2b04 	str.w	r2, [r3], #4
 800c23c:	e7d8      	b.n	800c1f0 <__multiply+0x50>
 800c23e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c242:	f1ba 0f00 	cmp.w	sl, #0
 800c246:	d024      	beq.n	800c292 <__multiply+0xf2>
 800c248:	f104 0e14 	add.w	lr, r4, #20
 800c24c:	46a9      	mov	r9, r5
 800c24e:	f04f 0c00 	mov.w	ip, #0
 800c252:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c256:	f8d9 1000 	ldr.w	r1, [r9]
 800c25a:	fa1f fb82 	uxth.w	fp, r2
 800c25e:	b289      	uxth	r1, r1
 800c260:	fb0a 110b 	mla	r1, sl, fp, r1
 800c264:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c268:	f8d9 2000 	ldr.w	r2, [r9]
 800c26c:	4461      	add	r1, ip
 800c26e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c272:	fb0a c20b 	mla	r2, sl, fp, ip
 800c276:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c27a:	b289      	uxth	r1, r1
 800c27c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c280:	4577      	cmp	r7, lr
 800c282:	f849 1b04 	str.w	r1, [r9], #4
 800c286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c28a:	d8e2      	bhi.n	800c252 <__multiply+0xb2>
 800c28c:	9a01      	ldr	r2, [sp, #4]
 800c28e:	f845 c002 	str.w	ip, [r5, r2]
 800c292:	9a03      	ldr	r2, [sp, #12]
 800c294:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c298:	3304      	adds	r3, #4
 800c29a:	f1b9 0f00 	cmp.w	r9, #0
 800c29e:	d020      	beq.n	800c2e2 <__multiply+0x142>
 800c2a0:	6829      	ldr	r1, [r5, #0]
 800c2a2:	f104 0c14 	add.w	ip, r4, #20
 800c2a6:	46ae      	mov	lr, r5
 800c2a8:	f04f 0a00 	mov.w	sl, #0
 800c2ac:	f8bc b000 	ldrh.w	fp, [ip]
 800c2b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2b4:	fb09 220b 	mla	r2, r9, fp, r2
 800c2b8:	4492      	add	sl, r2
 800c2ba:	b289      	uxth	r1, r1
 800c2bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2c0:	f84e 1b04 	str.w	r1, [lr], #4
 800c2c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2c8:	f8be 1000 	ldrh.w	r1, [lr]
 800c2cc:	0c12      	lsrs	r2, r2, #16
 800c2ce:	fb09 1102 	mla	r1, r9, r2, r1
 800c2d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2d6:	4567      	cmp	r7, ip
 800c2d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2dc:	d8e6      	bhi.n	800c2ac <__multiply+0x10c>
 800c2de:	9a01      	ldr	r2, [sp, #4]
 800c2e0:	50a9      	str	r1, [r5, r2]
 800c2e2:	3504      	adds	r5, #4
 800c2e4:	e79a      	b.n	800c21c <__multiply+0x7c>
 800c2e6:	3e01      	subs	r6, #1
 800c2e8:	e79c      	b.n	800c224 <__multiply+0x84>
 800c2ea:	bf00      	nop
 800c2ec:	0800f507 	.word	0x0800f507
 800c2f0:	0800f594 	.word	0x0800f594

0800c2f4 <__pow5mult>:
 800c2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f8:	4615      	mov	r5, r2
 800c2fa:	f012 0203 	ands.w	r2, r2, #3
 800c2fe:	4606      	mov	r6, r0
 800c300:	460f      	mov	r7, r1
 800c302:	d007      	beq.n	800c314 <__pow5mult+0x20>
 800c304:	4c25      	ldr	r4, [pc, #148]	; (800c39c <__pow5mult+0xa8>)
 800c306:	3a01      	subs	r2, #1
 800c308:	2300      	movs	r3, #0
 800c30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c30e:	f7ff fe51 	bl	800bfb4 <__multadd>
 800c312:	4607      	mov	r7, r0
 800c314:	10ad      	asrs	r5, r5, #2
 800c316:	d03d      	beq.n	800c394 <__pow5mult+0xa0>
 800c318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c31a:	b97c      	cbnz	r4, 800c33c <__pow5mult+0x48>
 800c31c:	2010      	movs	r0, #16
 800c31e:	f7fc f9f3 	bl	8008708 <malloc>
 800c322:	4602      	mov	r2, r0
 800c324:	6270      	str	r0, [r6, #36]	; 0x24
 800c326:	b928      	cbnz	r0, 800c334 <__pow5mult+0x40>
 800c328:	4b1d      	ldr	r3, [pc, #116]	; (800c3a0 <__pow5mult+0xac>)
 800c32a:	481e      	ldr	r0, [pc, #120]	; (800c3a4 <__pow5mult+0xb0>)
 800c32c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c330:	f7fb ff0c 	bl	800814c <__assert_func>
 800c334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c338:	6004      	str	r4, [r0, #0]
 800c33a:	60c4      	str	r4, [r0, #12]
 800c33c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c344:	b94c      	cbnz	r4, 800c35a <__pow5mult+0x66>
 800c346:	f240 2171 	movw	r1, #625	; 0x271
 800c34a:	4630      	mov	r0, r6
 800c34c:	f7ff ff12 	bl	800c174 <__i2b>
 800c350:	2300      	movs	r3, #0
 800c352:	f8c8 0008 	str.w	r0, [r8, #8]
 800c356:	4604      	mov	r4, r0
 800c358:	6003      	str	r3, [r0, #0]
 800c35a:	f04f 0900 	mov.w	r9, #0
 800c35e:	07eb      	lsls	r3, r5, #31
 800c360:	d50a      	bpl.n	800c378 <__pow5mult+0x84>
 800c362:	4639      	mov	r1, r7
 800c364:	4622      	mov	r2, r4
 800c366:	4630      	mov	r0, r6
 800c368:	f7ff ff1a 	bl	800c1a0 <__multiply>
 800c36c:	4639      	mov	r1, r7
 800c36e:	4680      	mov	r8, r0
 800c370:	4630      	mov	r0, r6
 800c372:	f7ff fdfd 	bl	800bf70 <_Bfree>
 800c376:	4647      	mov	r7, r8
 800c378:	106d      	asrs	r5, r5, #1
 800c37a:	d00b      	beq.n	800c394 <__pow5mult+0xa0>
 800c37c:	6820      	ldr	r0, [r4, #0]
 800c37e:	b938      	cbnz	r0, 800c390 <__pow5mult+0x9c>
 800c380:	4622      	mov	r2, r4
 800c382:	4621      	mov	r1, r4
 800c384:	4630      	mov	r0, r6
 800c386:	f7ff ff0b 	bl	800c1a0 <__multiply>
 800c38a:	6020      	str	r0, [r4, #0]
 800c38c:	f8c0 9000 	str.w	r9, [r0]
 800c390:	4604      	mov	r4, r0
 800c392:	e7e4      	b.n	800c35e <__pow5mult+0x6a>
 800c394:	4638      	mov	r0, r7
 800c396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39a:	bf00      	nop
 800c39c:	0800f6e0 	.word	0x0800f6e0
 800c3a0:	0800f495 	.word	0x0800f495
 800c3a4:	0800f594 	.word	0x0800f594

0800c3a8 <__lshift>:
 800c3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	6849      	ldr	r1, [r1, #4]
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3b6:	68a3      	ldr	r3, [r4, #8]
 800c3b8:	4607      	mov	r7, r0
 800c3ba:	4691      	mov	r9, r2
 800c3bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3c0:	f108 0601 	add.w	r6, r8, #1
 800c3c4:	42b3      	cmp	r3, r6
 800c3c6:	db0b      	blt.n	800c3e0 <__lshift+0x38>
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	f7ff fd91 	bl	800bef0 <_Balloc>
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	b948      	cbnz	r0, 800c3e6 <__lshift+0x3e>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	4b2a      	ldr	r3, [pc, #168]	; (800c480 <__lshift+0xd8>)
 800c3d6:	482b      	ldr	r0, [pc, #172]	; (800c484 <__lshift+0xdc>)
 800c3d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3dc:	f7fb feb6 	bl	800814c <__assert_func>
 800c3e0:	3101      	adds	r1, #1
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	e7ee      	b.n	800c3c4 <__lshift+0x1c>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f100 0114 	add.w	r1, r0, #20
 800c3ec:	f100 0210 	add.w	r2, r0, #16
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	4553      	cmp	r3, sl
 800c3f4:	db37      	blt.n	800c466 <__lshift+0xbe>
 800c3f6:	6920      	ldr	r0, [r4, #16]
 800c3f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3fc:	f104 0314 	add.w	r3, r4, #20
 800c400:	f019 091f 	ands.w	r9, r9, #31
 800c404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c40c:	d02f      	beq.n	800c46e <__lshift+0xc6>
 800c40e:	f1c9 0e20 	rsb	lr, r9, #32
 800c412:	468a      	mov	sl, r1
 800c414:	f04f 0c00 	mov.w	ip, #0
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	fa02 f209 	lsl.w	r2, r2, r9
 800c41e:	ea42 020c 	orr.w	r2, r2, ip
 800c422:	f84a 2b04 	str.w	r2, [sl], #4
 800c426:	f853 2b04 	ldr.w	r2, [r3], #4
 800c42a:	4298      	cmp	r0, r3
 800c42c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c430:	d8f2      	bhi.n	800c418 <__lshift+0x70>
 800c432:	1b03      	subs	r3, r0, r4
 800c434:	3b15      	subs	r3, #21
 800c436:	f023 0303 	bic.w	r3, r3, #3
 800c43a:	3304      	adds	r3, #4
 800c43c:	f104 0215 	add.w	r2, r4, #21
 800c440:	4290      	cmp	r0, r2
 800c442:	bf38      	it	cc
 800c444:	2304      	movcc	r3, #4
 800c446:	f841 c003 	str.w	ip, [r1, r3]
 800c44a:	f1bc 0f00 	cmp.w	ip, #0
 800c44e:	d001      	beq.n	800c454 <__lshift+0xac>
 800c450:	f108 0602 	add.w	r6, r8, #2
 800c454:	3e01      	subs	r6, #1
 800c456:	4638      	mov	r0, r7
 800c458:	612e      	str	r6, [r5, #16]
 800c45a:	4621      	mov	r1, r4
 800c45c:	f7ff fd88 	bl	800bf70 <_Bfree>
 800c460:	4628      	mov	r0, r5
 800c462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c466:	f842 0f04 	str.w	r0, [r2, #4]!
 800c46a:	3301      	adds	r3, #1
 800c46c:	e7c1      	b.n	800c3f2 <__lshift+0x4a>
 800c46e:	3904      	subs	r1, #4
 800c470:	f853 2b04 	ldr.w	r2, [r3], #4
 800c474:	f841 2f04 	str.w	r2, [r1, #4]!
 800c478:	4298      	cmp	r0, r3
 800c47a:	d8f9      	bhi.n	800c470 <__lshift+0xc8>
 800c47c:	e7ea      	b.n	800c454 <__lshift+0xac>
 800c47e:	bf00      	nop
 800c480:	0800f507 	.word	0x0800f507
 800c484:	0800f594 	.word	0x0800f594

0800c488 <__mcmp>:
 800c488:	b530      	push	{r4, r5, lr}
 800c48a:	6902      	ldr	r2, [r0, #16]
 800c48c:	690c      	ldr	r4, [r1, #16]
 800c48e:	1b12      	subs	r2, r2, r4
 800c490:	d10e      	bne.n	800c4b0 <__mcmp+0x28>
 800c492:	f100 0314 	add.w	r3, r0, #20
 800c496:	3114      	adds	r1, #20
 800c498:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c49c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c4a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c4a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4a8:	42a5      	cmp	r5, r4
 800c4aa:	d003      	beq.n	800c4b4 <__mcmp+0x2c>
 800c4ac:	d305      	bcc.n	800c4ba <__mcmp+0x32>
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	bd30      	pop	{r4, r5, pc}
 800c4b4:	4283      	cmp	r3, r0
 800c4b6:	d3f3      	bcc.n	800c4a0 <__mcmp+0x18>
 800c4b8:	e7fa      	b.n	800c4b0 <__mcmp+0x28>
 800c4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c4be:	e7f7      	b.n	800c4b0 <__mcmp+0x28>

0800c4c0 <__mdiff>:
 800c4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	4690      	mov	r8, r2
 800c4ce:	f7ff ffdb 	bl	800c488 <__mcmp>
 800c4d2:	1e05      	subs	r5, r0, #0
 800c4d4:	d110      	bne.n	800c4f8 <__mdiff+0x38>
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f7ff fd09 	bl	800bef0 <_Balloc>
 800c4de:	b930      	cbnz	r0, 800c4ee <__mdiff+0x2e>
 800c4e0:	4b3a      	ldr	r3, [pc, #232]	; (800c5cc <__mdiff+0x10c>)
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	f240 2132 	movw	r1, #562	; 0x232
 800c4e8:	4839      	ldr	r0, [pc, #228]	; (800c5d0 <__mdiff+0x110>)
 800c4ea:	f7fb fe2f 	bl	800814c <__assert_func>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f8:	bfa4      	itt	ge
 800c4fa:	4643      	movge	r3, r8
 800c4fc:	46a0      	movge	r8, r4
 800c4fe:	4630      	mov	r0, r6
 800c500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c504:	bfa6      	itte	ge
 800c506:	461c      	movge	r4, r3
 800c508:	2500      	movge	r5, #0
 800c50a:	2501      	movlt	r5, #1
 800c50c:	f7ff fcf0 	bl	800bef0 <_Balloc>
 800c510:	b920      	cbnz	r0, 800c51c <__mdiff+0x5c>
 800c512:	4b2e      	ldr	r3, [pc, #184]	; (800c5cc <__mdiff+0x10c>)
 800c514:	4602      	mov	r2, r0
 800c516:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c51a:	e7e5      	b.n	800c4e8 <__mdiff+0x28>
 800c51c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c520:	6926      	ldr	r6, [r4, #16]
 800c522:	60c5      	str	r5, [r0, #12]
 800c524:	f104 0914 	add.w	r9, r4, #20
 800c528:	f108 0514 	add.w	r5, r8, #20
 800c52c:	f100 0e14 	add.w	lr, r0, #20
 800c530:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c534:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c538:	f108 0210 	add.w	r2, r8, #16
 800c53c:	46f2      	mov	sl, lr
 800c53e:	2100      	movs	r1, #0
 800c540:	f859 3b04 	ldr.w	r3, [r9], #4
 800c544:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c548:	fa1f f883 	uxth.w	r8, r3
 800c54c:	fa11 f18b 	uxtah	r1, r1, fp
 800c550:	0c1b      	lsrs	r3, r3, #16
 800c552:	eba1 0808 	sub.w	r8, r1, r8
 800c556:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c55a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c55e:	fa1f f888 	uxth.w	r8, r8
 800c562:	1419      	asrs	r1, r3, #16
 800c564:	454e      	cmp	r6, r9
 800c566:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c56a:	f84a 3b04 	str.w	r3, [sl], #4
 800c56e:	d8e7      	bhi.n	800c540 <__mdiff+0x80>
 800c570:	1b33      	subs	r3, r6, r4
 800c572:	3b15      	subs	r3, #21
 800c574:	f023 0303 	bic.w	r3, r3, #3
 800c578:	3304      	adds	r3, #4
 800c57a:	3415      	adds	r4, #21
 800c57c:	42a6      	cmp	r6, r4
 800c57e:	bf38      	it	cc
 800c580:	2304      	movcc	r3, #4
 800c582:	441d      	add	r5, r3
 800c584:	4473      	add	r3, lr
 800c586:	469e      	mov	lr, r3
 800c588:	462e      	mov	r6, r5
 800c58a:	4566      	cmp	r6, ip
 800c58c:	d30e      	bcc.n	800c5ac <__mdiff+0xec>
 800c58e:	f10c 0203 	add.w	r2, ip, #3
 800c592:	1b52      	subs	r2, r2, r5
 800c594:	f022 0203 	bic.w	r2, r2, #3
 800c598:	3d03      	subs	r5, #3
 800c59a:	45ac      	cmp	ip, r5
 800c59c:	bf38      	it	cc
 800c59e:	2200      	movcc	r2, #0
 800c5a0:	441a      	add	r2, r3
 800c5a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c5a6:	b17b      	cbz	r3, 800c5c8 <__mdiff+0x108>
 800c5a8:	6107      	str	r7, [r0, #16]
 800c5aa:	e7a3      	b.n	800c4f4 <__mdiff+0x34>
 800c5ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5b0:	fa11 f288 	uxtah	r2, r1, r8
 800c5b4:	1414      	asrs	r4, r2, #16
 800c5b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5ba:	b292      	uxth	r2, r2
 800c5bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c5c0:	f84e 2b04 	str.w	r2, [lr], #4
 800c5c4:	1421      	asrs	r1, r4, #16
 800c5c6:	e7e0      	b.n	800c58a <__mdiff+0xca>
 800c5c8:	3f01      	subs	r7, #1
 800c5ca:	e7ea      	b.n	800c5a2 <__mdiff+0xe2>
 800c5cc:	0800f507 	.word	0x0800f507
 800c5d0:	0800f594 	.word	0x0800f594

0800c5d4 <__ulp>:
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	ed8d 0b00 	vstr	d0, [sp]
 800c5da:	9b01      	ldr	r3, [sp, #4]
 800c5dc:	4912      	ldr	r1, [pc, #72]	; (800c628 <__ulp+0x54>)
 800c5de:	4019      	ands	r1, r3
 800c5e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c5e4:	2900      	cmp	r1, #0
 800c5e6:	dd05      	ble.n	800c5f4 <__ulp+0x20>
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	ec43 2b10 	vmov	d0, r2, r3
 800c5f0:	b002      	add	sp, #8
 800c5f2:	4770      	bx	lr
 800c5f4:	4249      	negs	r1, r1
 800c5f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c5fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c5fe:	f04f 0200 	mov.w	r2, #0
 800c602:	f04f 0300 	mov.w	r3, #0
 800c606:	da04      	bge.n	800c612 <__ulp+0x3e>
 800c608:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c60c:	fa41 f300 	asr.w	r3, r1, r0
 800c610:	e7ec      	b.n	800c5ec <__ulp+0x18>
 800c612:	f1a0 0114 	sub.w	r1, r0, #20
 800c616:	291e      	cmp	r1, #30
 800c618:	bfda      	itte	le
 800c61a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c61e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c622:	2101      	movgt	r1, #1
 800c624:	460a      	mov	r2, r1
 800c626:	e7e1      	b.n	800c5ec <__ulp+0x18>
 800c628:	7ff00000 	.word	0x7ff00000

0800c62c <__b2d>:
 800c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62e:	6905      	ldr	r5, [r0, #16]
 800c630:	f100 0714 	add.w	r7, r0, #20
 800c634:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c638:	1f2e      	subs	r6, r5, #4
 800c63a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c63e:	4620      	mov	r0, r4
 800c640:	f7ff fd48 	bl	800c0d4 <__hi0bits>
 800c644:	f1c0 0320 	rsb	r3, r0, #32
 800c648:	280a      	cmp	r0, #10
 800c64a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c6c8 <__b2d+0x9c>
 800c64e:	600b      	str	r3, [r1, #0]
 800c650:	dc14      	bgt.n	800c67c <__b2d+0x50>
 800c652:	f1c0 0e0b 	rsb	lr, r0, #11
 800c656:	fa24 f10e 	lsr.w	r1, r4, lr
 800c65a:	42b7      	cmp	r7, r6
 800c65c:	ea41 030c 	orr.w	r3, r1, ip
 800c660:	bf34      	ite	cc
 800c662:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c666:	2100      	movcs	r1, #0
 800c668:	3015      	adds	r0, #21
 800c66a:	fa04 f000 	lsl.w	r0, r4, r0
 800c66e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c672:	ea40 0201 	orr.w	r2, r0, r1
 800c676:	ec43 2b10 	vmov	d0, r2, r3
 800c67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c67c:	42b7      	cmp	r7, r6
 800c67e:	bf3a      	itte	cc
 800c680:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c684:	f1a5 0608 	subcc.w	r6, r5, #8
 800c688:	2100      	movcs	r1, #0
 800c68a:	380b      	subs	r0, #11
 800c68c:	d017      	beq.n	800c6be <__b2d+0x92>
 800c68e:	f1c0 0c20 	rsb	ip, r0, #32
 800c692:	fa04 f500 	lsl.w	r5, r4, r0
 800c696:	42be      	cmp	r6, r7
 800c698:	fa21 f40c 	lsr.w	r4, r1, ip
 800c69c:	ea45 0504 	orr.w	r5, r5, r4
 800c6a0:	bf8c      	ite	hi
 800c6a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c6a6:	2400      	movls	r4, #0
 800c6a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c6ac:	fa01 f000 	lsl.w	r0, r1, r0
 800c6b0:	fa24 f40c 	lsr.w	r4, r4, ip
 800c6b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c6b8:	ea40 0204 	orr.w	r2, r0, r4
 800c6bc:	e7db      	b.n	800c676 <__b2d+0x4a>
 800c6be:	ea44 030c 	orr.w	r3, r4, ip
 800c6c2:	460a      	mov	r2, r1
 800c6c4:	e7d7      	b.n	800c676 <__b2d+0x4a>
 800c6c6:	bf00      	nop
 800c6c8:	3ff00000 	.word	0x3ff00000

0800c6cc <__d2b>:
 800c6cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6d0:	4689      	mov	r9, r1
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	ec57 6b10 	vmov	r6, r7, d0
 800c6d8:	4690      	mov	r8, r2
 800c6da:	f7ff fc09 	bl	800bef0 <_Balloc>
 800c6de:	4604      	mov	r4, r0
 800c6e0:	b930      	cbnz	r0, 800c6f0 <__d2b+0x24>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	4b25      	ldr	r3, [pc, #148]	; (800c77c <__d2b+0xb0>)
 800c6e6:	4826      	ldr	r0, [pc, #152]	; (800c780 <__d2b+0xb4>)
 800c6e8:	f240 310a 	movw	r1, #778	; 0x30a
 800c6ec:	f7fb fd2e 	bl	800814c <__assert_func>
 800c6f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6f8:	bb35      	cbnz	r5, 800c748 <__d2b+0x7c>
 800c6fa:	2e00      	cmp	r6, #0
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	d028      	beq.n	800c752 <__d2b+0x86>
 800c700:	4668      	mov	r0, sp
 800c702:	9600      	str	r6, [sp, #0]
 800c704:	f7ff fd06 	bl	800c114 <__lo0bits>
 800c708:	9900      	ldr	r1, [sp, #0]
 800c70a:	b300      	cbz	r0, 800c74e <__d2b+0x82>
 800c70c:	9a01      	ldr	r2, [sp, #4]
 800c70e:	f1c0 0320 	rsb	r3, r0, #32
 800c712:	fa02 f303 	lsl.w	r3, r2, r3
 800c716:	430b      	orrs	r3, r1
 800c718:	40c2      	lsrs	r2, r0
 800c71a:	6163      	str	r3, [r4, #20]
 800c71c:	9201      	str	r2, [sp, #4]
 800c71e:	9b01      	ldr	r3, [sp, #4]
 800c720:	61a3      	str	r3, [r4, #24]
 800c722:	2b00      	cmp	r3, #0
 800c724:	bf14      	ite	ne
 800c726:	2202      	movne	r2, #2
 800c728:	2201      	moveq	r2, #1
 800c72a:	6122      	str	r2, [r4, #16]
 800c72c:	b1d5      	cbz	r5, 800c764 <__d2b+0x98>
 800c72e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c732:	4405      	add	r5, r0
 800c734:	f8c9 5000 	str.w	r5, [r9]
 800c738:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c73c:	f8c8 0000 	str.w	r0, [r8]
 800c740:	4620      	mov	r0, r4
 800c742:	b003      	add	sp, #12
 800c744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c74c:	e7d5      	b.n	800c6fa <__d2b+0x2e>
 800c74e:	6161      	str	r1, [r4, #20]
 800c750:	e7e5      	b.n	800c71e <__d2b+0x52>
 800c752:	a801      	add	r0, sp, #4
 800c754:	f7ff fcde 	bl	800c114 <__lo0bits>
 800c758:	9b01      	ldr	r3, [sp, #4]
 800c75a:	6163      	str	r3, [r4, #20]
 800c75c:	2201      	movs	r2, #1
 800c75e:	6122      	str	r2, [r4, #16]
 800c760:	3020      	adds	r0, #32
 800c762:	e7e3      	b.n	800c72c <__d2b+0x60>
 800c764:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c76c:	f8c9 0000 	str.w	r0, [r9]
 800c770:	6918      	ldr	r0, [r3, #16]
 800c772:	f7ff fcaf 	bl	800c0d4 <__hi0bits>
 800c776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c77a:	e7df      	b.n	800c73c <__d2b+0x70>
 800c77c:	0800f507 	.word	0x0800f507
 800c780:	0800f594 	.word	0x0800f594

0800c784 <__ratio>:
 800c784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c788:	4688      	mov	r8, r1
 800c78a:	4669      	mov	r1, sp
 800c78c:	4681      	mov	r9, r0
 800c78e:	f7ff ff4d 	bl	800c62c <__b2d>
 800c792:	a901      	add	r1, sp, #4
 800c794:	4640      	mov	r0, r8
 800c796:	ec55 4b10 	vmov	r4, r5, d0
 800c79a:	f7ff ff47 	bl	800c62c <__b2d>
 800c79e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c7a6:	eba3 0c02 	sub.w	ip, r3, r2
 800c7aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c7ae:	1a9b      	subs	r3, r3, r2
 800c7b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c7b4:	ec51 0b10 	vmov	r0, r1, d0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bfd6      	itet	le
 800c7bc:	460a      	movle	r2, r1
 800c7be:	462a      	movgt	r2, r5
 800c7c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7c4:	468b      	mov	fp, r1
 800c7c6:	462f      	mov	r7, r5
 800c7c8:	bfd4      	ite	le
 800c7ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c7ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	ee10 2a10 	vmov	r2, s0
 800c7d8:	465b      	mov	r3, fp
 800c7da:	4639      	mov	r1, r7
 800c7dc:	f7f4 f836 	bl	800084c <__aeabi_ddiv>
 800c7e0:	ec41 0b10 	vmov	d0, r0, r1
 800c7e4:	b003      	add	sp, #12
 800c7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7ea <__copybits>:
 800c7ea:	3901      	subs	r1, #1
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	1149      	asrs	r1, r1, #5
 800c7f0:	6914      	ldr	r4, [r2, #16]
 800c7f2:	3101      	adds	r1, #1
 800c7f4:	f102 0314 	add.w	r3, r2, #20
 800c7f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c800:	1f05      	subs	r5, r0, #4
 800c802:	42a3      	cmp	r3, r4
 800c804:	d30c      	bcc.n	800c820 <__copybits+0x36>
 800c806:	1aa3      	subs	r3, r4, r2
 800c808:	3b11      	subs	r3, #17
 800c80a:	f023 0303 	bic.w	r3, r3, #3
 800c80e:	3211      	adds	r2, #17
 800c810:	42a2      	cmp	r2, r4
 800c812:	bf88      	it	hi
 800c814:	2300      	movhi	r3, #0
 800c816:	4418      	add	r0, r3
 800c818:	2300      	movs	r3, #0
 800c81a:	4288      	cmp	r0, r1
 800c81c:	d305      	bcc.n	800c82a <__copybits+0x40>
 800c81e:	bd70      	pop	{r4, r5, r6, pc}
 800c820:	f853 6b04 	ldr.w	r6, [r3], #4
 800c824:	f845 6f04 	str.w	r6, [r5, #4]!
 800c828:	e7eb      	b.n	800c802 <__copybits+0x18>
 800c82a:	f840 3b04 	str.w	r3, [r0], #4
 800c82e:	e7f4      	b.n	800c81a <__copybits+0x30>

0800c830 <__any_on>:
 800c830:	f100 0214 	add.w	r2, r0, #20
 800c834:	6900      	ldr	r0, [r0, #16]
 800c836:	114b      	asrs	r3, r1, #5
 800c838:	4298      	cmp	r0, r3
 800c83a:	b510      	push	{r4, lr}
 800c83c:	db11      	blt.n	800c862 <__any_on+0x32>
 800c83e:	dd0a      	ble.n	800c856 <__any_on+0x26>
 800c840:	f011 011f 	ands.w	r1, r1, #31
 800c844:	d007      	beq.n	800c856 <__any_on+0x26>
 800c846:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c84a:	fa24 f001 	lsr.w	r0, r4, r1
 800c84e:	fa00 f101 	lsl.w	r1, r0, r1
 800c852:	428c      	cmp	r4, r1
 800c854:	d10b      	bne.n	800c86e <__any_on+0x3e>
 800c856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d803      	bhi.n	800c866 <__any_on+0x36>
 800c85e:	2000      	movs	r0, #0
 800c860:	bd10      	pop	{r4, pc}
 800c862:	4603      	mov	r3, r0
 800c864:	e7f7      	b.n	800c856 <__any_on+0x26>
 800c866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c86a:	2900      	cmp	r1, #0
 800c86c:	d0f5      	beq.n	800c85a <__any_on+0x2a>
 800c86e:	2001      	movs	r0, #1
 800c870:	e7f6      	b.n	800c860 <__any_on+0x30>

0800c872 <_realloc_r>:
 800c872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c876:	4680      	mov	r8, r0
 800c878:	4614      	mov	r4, r2
 800c87a:	460e      	mov	r6, r1
 800c87c:	b921      	cbnz	r1, 800c888 <_realloc_r+0x16>
 800c87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c882:	4611      	mov	r1, r2
 800c884:	f7fc b802 	b.w	800888c <_malloc_r>
 800c888:	b92a      	cbnz	r2, 800c896 <_realloc_r+0x24>
 800c88a:	f7fb ff93 	bl	80087b4 <_free_r>
 800c88e:	4625      	mov	r5, r4
 800c890:	4628      	mov	r0, r5
 800c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c896:	f000 fa1b 	bl	800ccd0 <_malloc_usable_size_r>
 800c89a:	4284      	cmp	r4, r0
 800c89c:	4607      	mov	r7, r0
 800c89e:	d802      	bhi.n	800c8a6 <_realloc_r+0x34>
 800c8a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8a4:	d812      	bhi.n	800c8cc <_realloc_r+0x5a>
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	f7fb ffef 	bl	800888c <_malloc_r>
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d0ed      	beq.n	800c890 <_realloc_r+0x1e>
 800c8b4:	42bc      	cmp	r4, r7
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	4631      	mov	r1, r6
 800c8ba:	bf28      	it	cs
 800c8bc:	463a      	movcs	r2, r7
 800c8be:	f7fb ff33 	bl	8008728 <memcpy>
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4640      	mov	r0, r8
 800c8c6:	f7fb ff75 	bl	80087b4 <_free_r>
 800c8ca:	e7e1      	b.n	800c890 <_realloc_r+0x1e>
 800c8cc:	4635      	mov	r5, r6
 800c8ce:	e7df      	b.n	800c890 <_realloc_r+0x1e>

0800c8d0 <__ssputs_r>:
 800c8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d4:	688e      	ldr	r6, [r1, #8]
 800c8d6:	429e      	cmp	r6, r3
 800c8d8:	4682      	mov	sl, r0
 800c8da:	460c      	mov	r4, r1
 800c8dc:	4690      	mov	r8, r2
 800c8de:	461f      	mov	r7, r3
 800c8e0:	d838      	bhi.n	800c954 <__ssputs_r+0x84>
 800c8e2:	898a      	ldrh	r2, [r1, #12]
 800c8e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8e8:	d032      	beq.n	800c950 <__ssputs_r+0x80>
 800c8ea:	6825      	ldr	r5, [r4, #0]
 800c8ec:	6909      	ldr	r1, [r1, #16]
 800c8ee:	eba5 0901 	sub.w	r9, r5, r1
 800c8f2:	6965      	ldr	r5, [r4, #20]
 800c8f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	444b      	add	r3, r9
 800c900:	106d      	asrs	r5, r5, #1
 800c902:	429d      	cmp	r5, r3
 800c904:	bf38      	it	cc
 800c906:	461d      	movcc	r5, r3
 800c908:	0553      	lsls	r3, r2, #21
 800c90a:	d531      	bpl.n	800c970 <__ssputs_r+0xa0>
 800c90c:	4629      	mov	r1, r5
 800c90e:	f7fb ffbd 	bl	800888c <_malloc_r>
 800c912:	4606      	mov	r6, r0
 800c914:	b950      	cbnz	r0, 800c92c <__ssputs_r+0x5c>
 800c916:	230c      	movs	r3, #12
 800c918:	f8ca 3000 	str.w	r3, [sl]
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c922:	81a3      	strh	r3, [r4, #12]
 800c924:	f04f 30ff 	mov.w	r0, #4294967295
 800c928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c92c:	6921      	ldr	r1, [r4, #16]
 800c92e:	464a      	mov	r2, r9
 800c930:	f7fb fefa 	bl	8008728 <memcpy>
 800c934:	89a3      	ldrh	r3, [r4, #12]
 800c936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c93e:	81a3      	strh	r3, [r4, #12]
 800c940:	6126      	str	r6, [r4, #16]
 800c942:	6165      	str	r5, [r4, #20]
 800c944:	444e      	add	r6, r9
 800c946:	eba5 0509 	sub.w	r5, r5, r9
 800c94a:	6026      	str	r6, [r4, #0]
 800c94c:	60a5      	str	r5, [r4, #8]
 800c94e:	463e      	mov	r6, r7
 800c950:	42be      	cmp	r6, r7
 800c952:	d900      	bls.n	800c956 <__ssputs_r+0x86>
 800c954:	463e      	mov	r6, r7
 800c956:	6820      	ldr	r0, [r4, #0]
 800c958:	4632      	mov	r2, r6
 800c95a:	4641      	mov	r1, r8
 800c95c:	f7fb fef2 	bl	8008744 <memmove>
 800c960:	68a3      	ldr	r3, [r4, #8]
 800c962:	1b9b      	subs	r3, r3, r6
 800c964:	60a3      	str	r3, [r4, #8]
 800c966:	6823      	ldr	r3, [r4, #0]
 800c968:	4433      	add	r3, r6
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	2000      	movs	r0, #0
 800c96e:	e7db      	b.n	800c928 <__ssputs_r+0x58>
 800c970:	462a      	mov	r2, r5
 800c972:	f7ff ff7e 	bl	800c872 <_realloc_r>
 800c976:	4606      	mov	r6, r0
 800c978:	2800      	cmp	r0, #0
 800c97a:	d1e1      	bne.n	800c940 <__ssputs_r+0x70>
 800c97c:	6921      	ldr	r1, [r4, #16]
 800c97e:	4650      	mov	r0, sl
 800c980:	f7fb ff18 	bl	80087b4 <_free_r>
 800c984:	e7c7      	b.n	800c916 <__ssputs_r+0x46>
	...

0800c988 <_svfiprintf_r>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	4698      	mov	r8, r3
 800c98e:	898b      	ldrh	r3, [r1, #12]
 800c990:	061b      	lsls	r3, r3, #24
 800c992:	b09d      	sub	sp, #116	; 0x74
 800c994:	4607      	mov	r7, r0
 800c996:	460d      	mov	r5, r1
 800c998:	4614      	mov	r4, r2
 800c99a:	d50e      	bpl.n	800c9ba <_svfiprintf_r+0x32>
 800c99c:	690b      	ldr	r3, [r1, #16]
 800c99e:	b963      	cbnz	r3, 800c9ba <_svfiprintf_r+0x32>
 800c9a0:	2140      	movs	r1, #64	; 0x40
 800c9a2:	f7fb ff73 	bl	800888c <_malloc_r>
 800c9a6:	6028      	str	r0, [r5, #0]
 800c9a8:	6128      	str	r0, [r5, #16]
 800c9aa:	b920      	cbnz	r0, 800c9b6 <_svfiprintf_r+0x2e>
 800c9ac:	230c      	movs	r3, #12
 800c9ae:	603b      	str	r3, [r7, #0]
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	e0d1      	b.n	800cb5a <_svfiprintf_r+0x1d2>
 800c9b6:	2340      	movs	r3, #64	; 0x40
 800c9b8:	616b      	str	r3, [r5, #20]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9be:	2320      	movs	r3, #32
 800c9c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9c8:	2330      	movs	r3, #48	; 0x30
 800c9ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb74 <_svfiprintf_r+0x1ec>
 800c9ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9d2:	f04f 0901 	mov.w	r9, #1
 800c9d6:	4623      	mov	r3, r4
 800c9d8:	469a      	mov	sl, r3
 800c9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9de:	b10a      	cbz	r2, 800c9e4 <_svfiprintf_r+0x5c>
 800c9e0:	2a25      	cmp	r2, #37	; 0x25
 800c9e2:	d1f9      	bne.n	800c9d8 <_svfiprintf_r+0x50>
 800c9e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c9e8:	d00b      	beq.n	800ca02 <_svfiprintf_r+0x7a>
 800c9ea:	465b      	mov	r3, fp
 800c9ec:	4622      	mov	r2, r4
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f7ff ff6d 	bl	800c8d0 <__ssputs_r>
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	f000 80aa 	beq.w	800cb50 <_svfiprintf_r+0x1c8>
 800c9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9fe:	445a      	add	r2, fp
 800ca00:	9209      	str	r2, [sp, #36]	; 0x24
 800ca02:	f89a 3000 	ldrb.w	r3, [sl]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 80a2 	beq.w	800cb50 <_svfiprintf_r+0x1c8>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca16:	f10a 0a01 	add.w	sl, sl, #1
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	9307      	str	r3, [sp, #28]
 800ca1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca22:	931a      	str	r3, [sp, #104]	; 0x68
 800ca24:	4654      	mov	r4, sl
 800ca26:	2205      	movs	r2, #5
 800ca28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2c:	4851      	ldr	r0, [pc, #324]	; (800cb74 <_svfiprintf_r+0x1ec>)
 800ca2e:	f7f3 fbd7 	bl	80001e0 <memchr>
 800ca32:	9a04      	ldr	r2, [sp, #16]
 800ca34:	b9d8      	cbnz	r0, 800ca6e <_svfiprintf_r+0xe6>
 800ca36:	06d0      	lsls	r0, r2, #27
 800ca38:	bf44      	itt	mi
 800ca3a:	2320      	movmi	r3, #32
 800ca3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca40:	0711      	lsls	r1, r2, #28
 800ca42:	bf44      	itt	mi
 800ca44:	232b      	movmi	r3, #43	; 0x2b
 800ca46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca50:	d015      	beq.n	800ca7e <_svfiprintf_r+0xf6>
 800ca52:	9a07      	ldr	r2, [sp, #28]
 800ca54:	4654      	mov	r4, sl
 800ca56:	2000      	movs	r0, #0
 800ca58:	f04f 0c0a 	mov.w	ip, #10
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca62:	3b30      	subs	r3, #48	; 0x30
 800ca64:	2b09      	cmp	r3, #9
 800ca66:	d94e      	bls.n	800cb06 <_svfiprintf_r+0x17e>
 800ca68:	b1b0      	cbz	r0, 800ca98 <_svfiprintf_r+0x110>
 800ca6a:	9207      	str	r2, [sp, #28]
 800ca6c:	e014      	b.n	800ca98 <_svfiprintf_r+0x110>
 800ca6e:	eba0 0308 	sub.w	r3, r0, r8
 800ca72:	fa09 f303 	lsl.w	r3, r9, r3
 800ca76:	4313      	orrs	r3, r2
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	46a2      	mov	sl, r4
 800ca7c:	e7d2      	b.n	800ca24 <_svfiprintf_r+0x9c>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	1d19      	adds	r1, r3, #4
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	9103      	str	r1, [sp, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	bfbb      	ittet	lt
 800ca8a:	425b      	neglt	r3, r3
 800ca8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca90:	9307      	strge	r3, [sp, #28]
 800ca92:	9307      	strlt	r3, [sp, #28]
 800ca94:	bfb8      	it	lt
 800ca96:	9204      	strlt	r2, [sp, #16]
 800ca98:	7823      	ldrb	r3, [r4, #0]
 800ca9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca9c:	d10c      	bne.n	800cab8 <_svfiprintf_r+0x130>
 800ca9e:	7863      	ldrb	r3, [r4, #1]
 800caa0:	2b2a      	cmp	r3, #42	; 0x2a
 800caa2:	d135      	bne.n	800cb10 <_svfiprintf_r+0x188>
 800caa4:	9b03      	ldr	r3, [sp, #12]
 800caa6:	1d1a      	adds	r2, r3, #4
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	9203      	str	r2, [sp, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	bfb8      	it	lt
 800cab0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cab4:	3402      	adds	r4, #2
 800cab6:	9305      	str	r3, [sp, #20]
 800cab8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb84 <_svfiprintf_r+0x1fc>
 800cabc:	7821      	ldrb	r1, [r4, #0]
 800cabe:	2203      	movs	r2, #3
 800cac0:	4650      	mov	r0, sl
 800cac2:	f7f3 fb8d 	bl	80001e0 <memchr>
 800cac6:	b140      	cbz	r0, 800cada <_svfiprintf_r+0x152>
 800cac8:	2340      	movs	r3, #64	; 0x40
 800caca:	eba0 000a 	sub.w	r0, r0, sl
 800cace:	fa03 f000 	lsl.w	r0, r3, r0
 800cad2:	9b04      	ldr	r3, [sp, #16]
 800cad4:	4303      	orrs	r3, r0
 800cad6:	3401      	adds	r4, #1
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cade:	4826      	ldr	r0, [pc, #152]	; (800cb78 <_svfiprintf_r+0x1f0>)
 800cae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cae4:	2206      	movs	r2, #6
 800cae6:	f7f3 fb7b 	bl	80001e0 <memchr>
 800caea:	2800      	cmp	r0, #0
 800caec:	d038      	beq.n	800cb60 <_svfiprintf_r+0x1d8>
 800caee:	4b23      	ldr	r3, [pc, #140]	; (800cb7c <_svfiprintf_r+0x1f4>)
 800caf0:	bb1b      	cbnz	r3, 800cb3a <_svfiprintf_r+0x1b2>
 800caf2:	9b03      	ldr	r3, [sp, #12]
 800caf4:	3307      	adds	r3, #7
 800caf6:	f023 0307 	bic.w	r3, r3, #7
 800cafa:	3308      	adds	r3, #8
 800cafc:	9303      	str	r3, [sp, #12]
 800cafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb00:	4433      	add	r3, r6
 800cb02:	9309      	str	r3, [sp, #36]	; 0x24
 800cb04:	e767      	b.n	800c9d6 <_svfiprintf_r+0x4e>
 800cb06:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	2001      	movs	r0, #1
 800cb0e:	e7a5      	b.n	800ca5c <_svfiprintf_r+0xd4>
 800cb10:	2300      	movs	r3, #0
 800cb12:	3401      	adds	r4, #1
 800cb14:	9305      	str	r3, [sp, #20]
 800cb16:	4619      	mov	r1, r3
 800cb18:	f04f 0c0a 	mov.w	ip, #10
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb22:	3a30      	subs	r2, #48	; 0x30
 800cb24:	2a09      	cmp	r2, #9
 800cb26:	d903      	bls.n	800cb30 <_svfiprintf_r+0x1a8>
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d0c5      	beq.n	800cab8 <_svfiprintf_r+0x130>
 800cb2c:	9105      	str	r1, [sp, #20]
 800cb2e:	e7c3      	b.n	800cab8 <_svfiprintf_r+0x130>
 800cb30:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb34:	4604      	mov	r4, r0
 800cb36:	2301      	movs	r3, #1
 800cb38:	e7f0      	b.n	800cb1c <_svfiprintf_r+0x194>
 800cb3a:	ab03      	add	r3, sp, #12
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	462a      	mov	r2, r5
 800cb40:	4b0f      	ldr	r3, [pc, #60]	; (800cb80 <_svfiprintf_r+0x1f8>)
 800cb42:	a904      	add	r1, sp, #16
 800cb44:	4638      	mov	r0, r7
 800cb46:	f7fc f919 	bl	8008d7c <_printf_float>
 800cb4a:	1c42      	adds	r2, r0, #1
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	d1d6      	bne.n	800cafe <_svfiprintf_r+0x176>
 800cb50:	89ab      	ldrh	r3, [r5, #12]
 800cb52:	065b      	lsls	r3, r3, #25
 800cb54:	f53f af2c 	bmi.w	800c9b0 <_svfiprintf_r+0x28>
 800cb58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb5a:	b01d      	add	sp, #116	; 0x74
 800cb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb60:	ab03      	add	r3, sp, #12
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	462a      	mov	r2, r5
 800cb66:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <_svfiprintf_r+0x1f8>)
 800cb68:	a904      	add	r1, sp, #16
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	f7fc fbaa 	bl	80092c4 <_printf_i>
 800cb70:	e7eb      	b.n	800cb4a <_svfiprintf_r+0x1c2>
 800cb72:	bf00      	nop
 800cb74:	0800f3e8 	.word	0x0800f3e8
 800cb78:	0800f3f2 	.word	0x0800f3f2
 800cb7c:	08008d7d 	.word	0x08008d7d
 800cb80:	0800c8d1 	.word	0x0800c8d1
 800cb84:	0800f3ee 	.word	0x0800f3ee

0800cb88 <_read_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4d07      	ldr	r5, [pc, #28]	; (800cba8 <_read_r+0x20>)
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	4608      	mov	r0, r1
 800cb90:	4611      	mov	r1, r2
 800cb92:	2200      	movs	r2, #0
 800cb94:	602a      	str	r2, [r5, #0]
 800cb96:	461a      	mov	r2, r3
 800cb98:	f7f4 fb90 	bl	80012bc <_read>
 800cb9c:	1c43      	adds	r3, r0, #1
 800cb9e:	d102      	bne.n	800cba6 <_read_r+0x1e>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	b103      	cbz	r3, 800cba6 <_read_r+0x1e>
 800cba4:	6023      	str	r3, [r4, #0]
 800cba6:	bd38      	pop	{r3, r4, r5, pc}
 800cba8:	20000ee8 	.word	0x20000ee8
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <nan>:
 800cbb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cbb8 <nan+0x8>
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	00000000 	.word	0x00000000
 800cbbc:	7ff80000 	.word	0x7ff80000

0800cbc0 <_raise_r>:
 800cbc0:	291f      	cmp	r1, #31
 800cbc2:	b538      	push	{r3, r4, r5, lr}
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	460d      	mov	r5, r1
 800cbc8:	d904      	bls.n	800cbd4 <_raise_r+0x14>
 800cbca:	2316      	movs	r3, #22
 800cbcc:	6003      	str	r3, [r0, #0]
 800cbce:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cbd6:	b112      	cbz	r2, 800cbde <_raise_r+0x1e>
 800cbd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbdc:	b94b      	cbnz	r3, 800cbf2 <_raise_r+0x32>
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 f830 	bl	800cc44 <_getpid_r>
 800cbe4:	462a      	mov	r2, r5
 800cbe6:	4601      	mov	r1, r0
 800cbe8:	4620      	mov	r0, r4
 800cbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbee:	f000 b817 	b.w	800cc20 <_kill_r>
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d00a      	beq.n	800cc0c <_raise_r+0x4c>
 800cbf6:	1c59      	adds	r1, r3, #1
 800cbf8:	d103      	bne.n	800cc02 <_raise_r+0x42>
 800cbfa:	2316      	movs	r3, #22
 800cbfc:	6003      	str	r3, [r0, #0]
 800cbfe:	2001      	movs	r0, #1
 800cc00:	e7e7      	b.n	800cbd2 <_raise_r+0x12>
 800cc02:	2400      	movs	r4, #0
 800cc04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc08:	4628      	mov	r0, r5
 800cc0a:	4798      	blx	r3
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	e7e0      	b.n	800cbd2 <_raise_r+0x12>

0800cc10 <raise>:
 800cc10:	4b02      	ldr	r3, [pc, #8]	; (800cc1c <raise+0xc>)
 800cc12:	4601      	mov	r1, r0
 800cc14:	6818      	ldr	r0, [r3, #0]
 800cc16:	f7ff bfd3 	b.w	800cbc0 <_raise_r>
 800cc1a:	bf00      	nop
 800cc1c:	2000000c 	.word	0x2000000c

0800cc20 <_kill_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4d07      	ldr	r5, [pc, #28]	; (800cc40 <_kill_r+0x20>)
 800cc24:	2300      	movs	r3, #0
 800cc26:	4604      	mov	r4, r0
 800cc28:	4608      	mov	r0, r1
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	f7f4 fb2b 	bl	8001288 <_kill>
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	d102      	bne.n	800cc3c <_kill_r+0x1c>
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	b103      	cbz	r3, 800cc3c <_kill_r+0x1c>
 800cc3a:	6023      	str	r3, [r4, #0]
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
 800cc3e:	bf00      	nop
 800cc40:	20000ee8 	.word	0x20000ee8

0800cc44 <_getpid_r>:
 800cc44:	f7f4 bb18 	b.w	8001278 <_getpid>

0800cc48 <strncmp>:
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	b17a      	cbz	r2, 800cc6c <strncmp+0x24>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	3901      	subs	r1, #1
 800cc50:	1884      	adds	r4, r0, r2
 800cc52:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc5a:	4290      	cmp	r0, r2
 800cc5c:	d101      	bne.n	800cc62 <strncmp+0x1a>
 800cc5e:	42a3      	cmp	r3, r4
 800cc60:	d101      	bne.n	800cc66 <strncmp+0x1e>
 800cc62:	1a80      	subs	r0, r0, r2
 800cc64:	bd10      	pop	{r4, pc}
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d1f3      	bne.n	800cc52 <strncmp+0xa>
 800cc6a:	e7fa      	b.n	800cc62 <strncmp+0x1a>
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	e7f9      	b.n	800cc64 <strncmp+0x1c>

0800cc70 <__ascii_wctomb>:
 800cc70:	b149      	cbz	r1, 800cc86 <__ascii_wctomb+0x16>
 800cc72:	2aff      	cmp	r2, #255	; 0xff
 800cc74:	bf85      	ittet	hi
 800cc76:	238a      	movhi	r3, #138	; 0x8a
 800cc78:	6003      	strhi	r3, [r0, #0]
 800cc7a:	700a      	strbls	r2, [r1, #0]
 800cc7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc80:	bf98      	it	ls
 800cc82:	2001      	movls	r0, #1
 800cc84:	4770      	bx	lr
 800cc86:	4608      	mov	r0, r1
 800cc88:	4770      	bx	lr
	...

0800cc8c <_fstat_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4d07      	ldr	r5, [pc, #28]	; (800ccac <_fstat_r+0x20>)
 800cc90:	2300      	movs	r3, #0
 800cc92:	4604      	mov	r4, r0
 800cc94:	4608      	mov	r0, r1
 800cc96:	4611      	mov	r1, r2
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	f7f4 fb54 	bl	8001346 <_fstat>
 800cc9e:	1c43      	adds	r3, r0, #1
 800cca0:	d102      	bne.n	800cca8 <_fstat_r+0x1c>
 800cca2:	682b      	ldr	r3, [r5, #0]
 800cca4:	b103      	cbz	r3, 800cca8 <_fstat_r+0x1c>
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	bd38      	pop	{r3, r4, r5, pc}
 800ccaa:	bf00      	nop
 800ccac:	20000ee8 	.word	0x20000ee8

0800ccb0 <_isatty_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d06      	ldr	r5, [pc, #24]	; (800cccc <_isatty_r+0x1c>)
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	602b      	str	r3, [r5, #0]
 800ccbc:	f7f4 fb53 	bl	8001366 <_isatty>
 800ccc0:	1c43      	adds	r3, r0, #1
 800ccc2:	d102      	bne.n	800ccca <_isatty_r+0x1a>
 800ccc4:	682b      	ldr	r3, [r5, #0]
 800ccc6:	b103      	cbz	r3, 800ccca <_isatty_r+0x1a>
 800ccc8:	6023      	str	r3, [r4, #0]
 800ccca:	bd38      	pop	{r3, r4, r5, pc}
 800cccc:	20000ee8 	.word	0x20000ee8

0800ccd0 <_malloc_usable_size_r>:
 800ccd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccd4:	1f18      	subs	r0, r3, #4
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	bfbc      	itt	lt
 800ccda:	580b      	ldrlt	r3, [r1, r0]
 800ccdc:	18c0      	addlt	r0, r0, r3
 800ccde:	4770      	bx	lr

0800cce0 <_init>:
 800cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce2:	bf00      	nop
 800cce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce6:	bc08      	pop	{r3}
 800cce8:	469e      	mov	lr, r3
 800ccea:	4770      	bx	lr

0800ccec <_fini>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr


f407ve_chaos_sdk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028ec  0800d078  0800d078  0001d078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f964  0800f964  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f964  0800f964  0001f964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f96c  0800f96c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f96c  0800f96c  0001f96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f970  0800f970  0001f970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000d0c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000eec  20000eec  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016691  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d30  00000000  00000000  000368a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f08  00000000  00000000  0003b630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029193  00000000  00000000  0003c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e68  00000000  00000000  000656cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2843  00000000  00000000  0007f533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161d76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000574c  00000000  00000000  00161dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d060 	.word	0x0800d060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d060 	.word	0x0800d060

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_GPIO_Init+0x9c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xa0>)
 800106a:	f004 fe59 	bl	8005d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NP_dir_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NP_dir_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xa0>)
 8001088:	f004 fcae 	bl	80059e8 <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f004 fa8c 	bl	80055bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f818 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff ffa6 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ac:	f000 fa90 	bl	80015d0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010b0:	f000 f9ba 	bl	8001428 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010b4:	2108      	movs	r1, #8
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <main+0x34>)
 80010b8:	f005 fbb2 	bl	8006820 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <main+0x38>)
 80010c4:	f004 fe2c 	bl	8005d20 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80010c8:	f000 fb26 	bl	8001718 <app_main>
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x30>
 80010ce:	bf00      	nop
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40020400 	.word	0x40020400

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fd06 	bl	8008af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemClock_Config+0xd0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemClock_Config+0xd0>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a22      	ldr	r2, [pc, #136]	; (80011ac <SystemClock_Config+0xd4>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800114c:	23a8      	movs	r3, #168	; 0xa8
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fdf9 	bl	8005d54 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 f822 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2105      	movs	r1, #5
 800118a:	4618      	mov	r0, r3
 800118c:	f005 f85a 	bl	8006244 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f80b 	bl	80011b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800119a:	f005 f939 	bl	8006410 <HAL_RCC_EnableCSS>
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001210:	f005 fa42 	bl	8006698 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x8>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f004 fa00 	bl	8005660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART1_IRQHandler+0x10>)
 800126a:	f006 f9c7 	bl	80075fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000248 	.word	0x20000248

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f007 f941 	bl	8008518 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f004 f941 	bl	8005598 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f007 f8a6 	bl	8008518 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	20000ef0 	.word	0x20000ef0

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_TIM4_Init+0xe8>)
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <MX_TIM4_Init+0xec>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM4_Init+0xe8>)
 800146c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM4_Init+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001480:	f005 f925 	bl	80066ce <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800148a:	f7ff fe91 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	4619      	mov	r1, r3
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <MX_TIM4_Init+0xe8>)
 800149c:	f005 fb4a 	bl	8006b34 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014a6:	f7ff fe83 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014aa:	4819      	ldr	r0, [pc, #100]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ac:	f005 f95e 	bl	800676c <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014b6:	f7ff fe7b 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ca:	f005 ff0b 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014d4:	f7ff fe6c 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80014dc:	f241 0368 	movw	r3, #4200	; 0x1068
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014f2:	f005 fa5d 	bl	80069b0 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f7ff fe58 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001502:	f000 f82b 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000200 	.word	0x20000200
 8001514:	40000800 	.word	0x40000800

08001518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40000800 	.word	0x40000800
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_TIM_MspPostInit+0x68>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d11e      	bne.n	80015bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PP_step_Pin;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PP_step_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_TIM_MspPostInit+0x70>)
 80015b8:	f004 fa16 	bl	80059e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART1_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001608:	f005 fee8 	bl	80073dc <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fdcd 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000248 	.word	0x20000248
 8001620:	40011000 	.word	0x40011000

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_UART_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d134      	bne.n	80016b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_UART_MspInit+0x98>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_UART_MspInit+0x9c>)
 800169c:	f004 f9a4 	bl	80059e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f004 f8d6 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f004 f8ef 	bl	800588e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ee:	f7ff fe89 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f007 f9a1 	bl	8008a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fcd1 	bl	800109c <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001708:	0800f974 	.word	0x0800f974
  ldr r2, =_sbss
 800170c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001710:	20000eec 	.word	0x20000eec

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <app_main>:

#include "board_pkg.h"


void app_main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af02      	add	r7, sp, #8
	int state = newEntities(5);
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fde0 	bl	80022e4 <newEntities>
 8001724:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "app_main: error entity allocation");
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10e      	bne.n	800174a <app_main+0x32>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf0c      	ite	eq
 8001732:	2301      	moveq	r3, #1
 8001734:	2300      	movne	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <app_main+0x4c>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	230e      	movs	r3, #14
 8001740:	4a09      	ldr	r2, [pc, #36]	; (8001768 <app_main+0x50>)
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <app_main+0x54>)
 8001744:	f003 fe06 	bl	8005354 <__M_Error>
 8001748:	e008      	b.n	800175c <app_main+0x44>
	entityBoardInit();
 800174a:	f000 f811 	bl	8001770 <entityBoardInit>


	init_stm32_communicator();
 800174e:	f003 fe63 	bl	8005418 <init_stm32_communicator>
//	if(a == 0) {
//		int b =0;
//	}

	while(1) {
		proceedIncommingMessage();
 8001752:	f003 fe93 	bl	800547c <proceedIncommingMessage>
		entityBoardProceed();
 8001756:	f000 f9e3 	bl	8001b20 <entityBoardProceed>
		proceedIncommingMessage();
 800175a:	e7fa      	b.n	8001752 <app_main+0x3a>
	}
}
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800d0ac 	.word	0x0800d0ac
 8001768:	0800d078 	.word	0x0800d078
 800176c:	0800d094 	.word	0x0800d094

08001770 <entityBoardInit>:
boards_t* board_entry = NULL;

extern TIM_HandleTypeDef htim4;

void entityBoardInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b090      	sub	sp, #64	; 0x40
 8001774:	af06      	add	r7, sp, #24
	reg board_entityNum = ENTITY_NUMBER_ERROR;
 8001776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177a:	607b      	str	r3, [r7, #4]
	reg fieldNumber = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	603b      	str	r3, [r7, #0]

	int state = initEntity(&board_entityNum, (17 + 10 + 1), sizeof(boards_t), "BID ", 0, 0, NULL);
 8001780:	1d38      	adds	r0, r7, #4
 8001782:	2300      	movs	r3, #0
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2300      	movs	r3, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <entityBoardInit+0xd8>)
 8001790:	2270      	movs	r2, #112	; 0x70
 8001792:	211c      	movs	r1, #28
 8001794:	f000 fdf8 	bl	8002388 <initEntity>
 8001798:	6278      	str	r0, [r7, #36]	; 0x24
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "entityBoardInit: initEntity Error");
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <entityBoardInit+0x4e>
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <entityBoardInit+0xdc>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2310      	movs	r3, #16
 80017b4:	4a26      	ldr	r2, [pc, #152]	; (8001850 <entityBoardInit+0xe0>)
 80017b6:	4827      	ldr	r0, [pc, #156]	; (8001854 <entityBoardInit+0xe4>)
 80017b8:	f003 fdcc 	bl	8005354 <__M_Error>
 80017bc:	e181      	b.n	8001ac2 <entityBoardInit+0x352>

	Entity* const entity = getEntityPointer(board_entityNum);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	61bb      	str	r3, [r7, #24]
 */

// getter entity pointer by entity number
STATIC_FORCEINLINE Entity * getEntityPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <entityBoardInit+0xe8>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d206      	bcs.n	80017da <entityBoardInit+0x6a>
        return entityInfo.entities[entityNumber];
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <entityBoardInit+0xe8>)
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	e000      	b.n	80017dc <entityBoardInit+0x6c>
    }
    return NULLPTR(Entity*);
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
	M_Assert_BreakSaveCheck((entity == NULL), M_EMPTY, return, "entityBoardInit: entity is null");
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10e      	bne.n	8001802 <entityBoardInit+0x92>
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <entityBoardInit+0xec>)
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2313      	movs	r3, #19
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <entityBoardInit+0xe0>)
 80017fa:	4819      	ldr	r0, [pc, #100]	; (8001860 <entityBoardInit+0xf0>)
 80017fc:	f003 fdaa 	bl	8005354 <__M_Error>
 8001800:	e15f      	b.n	8001ac2 <entityBoardInit+0x352>

	boards_t* entry = getVoidPointer(board_entityNum);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	617b      	str	r3, [r7, #20]
}

// getter data pointer by entity number
STATIC_FORCEINLINE void * getVoidPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <entityBoardInit+0xe8>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <entityBoardInit+0xb0>
        return entityInfo.entities[entityNumber]->pointer;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <entityBoardInit+0xe8>)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	e000      	b.n	8001822 <entityBoardInit+0xb2>
    }
    return NULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
	M_Assert_BreakSaveCheck((entry == NULL), M_EMPTY, return, "entityBoardInit: entry is null");
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d120      	bne.n	800186c <entityBoardInit+0xfc>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <entityBoardInit+0xf4>)
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2316      	movs	r3, #22
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <entityBoardInit+0xe0>)
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <entityBoardInit+0xf8>)
 8001842:	f003 fd87 	bl	8005354 <__M_Error>
 8001846:	e13c      	b.n	8001ac2 <entityBoardInit+0x352>
 8001848:	0800d0d0 	.word	0x0800d0d0
 800184c:	0800d110 	.word	0x0800d110
 8001850:	0800d0d8 	.word	0x0800d0d8
 8001854:	0800d0f8 	.word	0x0800d0f8
 8001858:	20000290 	.word	0x20000290
 800185c:	0800d148 	.word	0x0800d148
 8001860:	0800d134 	.word	0x0800d134
 8001864:	0800d178 	.word	0x0800d178
 8001868:	0800d168 	.word	0x0800d168

	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, boardId), 	UINT8_TYPE, 	"B   ", &entry->boardId);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4639      	mov	r1, r7
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	4b95      	ldr	r3, [pc, #596]	; (8001ac8 <entityBoardInit+0x358>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2301      	movs	r3, #1
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	2201      	movs	r2, #1
 800187e:	6a38      	ldr	r0, [r7, #32]
 8001880:	f000 fe94 	bl	80025ac <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, major), 		UINT8_TYPE, 	"VerH", &entry->major);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	3301      	adds	r3, #1
 8001888:	4639      	mov	r1, r7
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <entityBoardInit+0x35c>)
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	2201      	movs	r2, #1
 8001898:	6a38      	ldr	r0, [r7, #32]
 800189a:	f000 fe87 	bl	80025ac <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, minor), 		UINT8_TYPE, 	"VerM", &entry->minor);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3302      	adds	r3, #2
 80018a2:	4639      	mov	r1, r7
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	4b8a      	ldr	r3, [pc, #552]	; (8001ad0 <entityBoardInit+0x360>)
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	2201      	movs	r2, #1
 80018b2:	6a38      	ldr	r0, [r7, #32]
 80018b4:	f000 fe7a 	bl	80025ac <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, patch), 		UINT16_TYPE, 	"VerL", &entry->patch);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3304      	adds	r3, #4
 80018bc:	4639      	mov	r1, r7
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <entityBoardInit+0x364>)
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2304      	movs	r3, #4
 80018ca:	2201      	movs	r2, #1
 80018cc:	6a38      	ldr	r0, [r7, #32]
 80018ce:	f000 fe6d 	bl	80025ac <initField>

    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _1), UINT8_TYPE,                "F1", &entry->_1);
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3306      	adds	r3, #6
 80018d6:	4639      	mov	r1, r7
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <entityBoardInit+0x368>)
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2301      	movs	r3, #1
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2306      	movs	r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	6a38      	ldr	r0, [r7, #32]
 80018e8:	f000 fe60 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _2), UINT8_TYPE,                "F2", &entry->_2);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3307      	adds	r3, #7
 80018f0:	4639      	mov	r1, r7
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	4b79      	ldr	r3, [pc, #484]	; (8001adc <entityBoardInit+0x36c>)
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2307      	movs	r3, #7
 80018fe:	2200      	movs	r2, #0
 8001900:	6a38      	ldr	r0, [r7, #32]
 8001902:	f000 fe53 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _3), UINT16_TYPE,               "F3", &entry->_3);
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3308      	adds	r3, #8
 800190a:	4639      	mov	r1, r7
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <entityBoardInit+0x370>)
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2302      	movs	r3, #2
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2308      	movs	r3, #8
 8001918:	2200      	movs	r2, #0
 800191a:	6a38      	ldr	r0, [r7, #32]
 800191c:	f000 fe46 	bl	80025ac <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _4), UINT24_TYPE,               "F4", &entry->_4);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _5), UINT32_TYPE,               "F5", &entry->_5);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3310      	adds	r3, #16
 8001924:	4639      	mov	r1, r7
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <entityBoardInit+0x374>)
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2303      	movs	r3, #3
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2310      	movs	r3, #16
 8001932:	2200      	movs	r2, #0
 8001934:	6a38      	ldr	r0, [r7, #32]
 8001936:	f000 fe39 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _6), UINT64_TYPE,               "F6", &entry->_6);
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3318      	adds	r3, #24
 800193e:	4639      	mov	r1, r7
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <entityBoardInit+0x378>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2304      	movs	r3, #4
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2318      	movs	r3, #24
 800194c:	2200      	movs	r2, #0
 800194e:	6a38      	ldr	r0, [r7, #32]
 8001950:	f000 fe2c 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _7), CHAR_TYPE,                 "F7", &entry->_7);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	3320      	adds	r3, #32
 8001958:	4639      	mov	r1, r7
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	4b63      	ldr	r3, [pc, #396]	; (8001aec <entityBoardInit+0x37c>)
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2305      	movs	r3, #5
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2320      	movs	r3, #32
 8001966:	2200      	movs	r2, #0
 8001968:	6a38      	ldr	r0, [r7, #32]
 800196a:	f000 fe1f 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _8), INT8_TYPE,                 "F8", &entry->_8);
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3321      	adds	r3, #33	; 0x21
 8001972:	4639      	mov	r1, r7
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <entityBoardInit+0x380>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2306      	movs	r3, #6
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2321      	movs	r3, #33	; 0x21
 8001980:	2200      	movs	r2, #0
 8001982:	6a38      	ldr	r0, [r7, #32]
 8001984:	f000 fe12 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _9), INT16_TYPE,                "F9", &entry->_9);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	3322      	adds	r3, #34	; 0x22
 800198c:	4639      	mov	r1, r7
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <entityBoardInit+0x384>)
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2307      	movs	r3, #7
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2322      	movs	r3, #34	; 0x22
 800199a:	2200      	movs	r2, #0
 800199c:	6a38      	ldr	r0, [r7, #32]
 800199e:	f000 fe05 	bl	80025ac <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _10), INT24_TYPE,               "F10", &entry->_10);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _11), INT32_TYPE,               "F11", &entry->_11);
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3328      	adds	r3, #40	; 0x28
 80019a6:	4639      	mov	r1, r7
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <entityBoardInit+0x388>)
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2308      	movs	r3, #8
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2328      	movs	r3, #40	; 0x28
 80019b4:	2200      	movs	r2, #0
 80019b6:	6a38      	ldr	r0, [r7, #32]
 80019b8:	f000 fdf8 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _12), INT64_TYPE,               "F12", &entry->_12);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3330      	adds	r3, #48	; 0x30
 80019c0:	4639      	mov	r1, r7
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <entityBoardInit+0x38c>)
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2309      	movs	r3, #9
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2330      	movs	r3, #48	; 0x30
 80019ce:	2200      	movs	r2, #0
 80019d0:	6a38      	ldr	r0, [r7, #32]
 80019d2:	f000 fdeb 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _13), FLOAT_TYPE,               "F13", &entry->_13);
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	4639      	mov	r1, r7
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <entityBoardInit+0x390>)
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	230a      	movs	r3, #10
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2338      	movs	r3, #56	; 0x38
 80019e8:	2200      	movs	r2, #0
 80019ea:	6a38      	ldr	r0, [r7, #32]
 80019ec:	f000 fdde 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _14), DOUBLE_TYPE,              "F14", &entry->_14);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3340      	adds	r3, #64	; 0x40
 80019f4:	4639      	mov	r1, r7
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <entityBoardInit+0x394>)
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	230b      	movs	r3, #11
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	2200      	movs	r2, #0
 8001a04:	6a38      	ldr	r0, [r7, #32]
 8001a06:	f000 fdd1 	bl	80025ac <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _15), LONG_DOUBLE_TYPE,         "F15", &entry->_15);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _16), BOOL_TYPE,                "F16", &entry->_16);
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3350      	adds	r3, #80	; 0x50
 8001a0e:	4639      	mov	r1, r7
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <entityBoardInit+0x398>)
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	230d      	movs	r3, #13
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2350      	movs	r3, #80	; 0x50
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6a38      	ldr	r0, [r7, #32]
 8001a20:	f000 fdc4 	bl	80025ac <initField>
    initField(entity, &fieldNumber, (ENTITY_POINTER_MSK | ENTITY_REGISTER_MSK), offsetof(boards_t, _17), /*REG_TYPE*/UINT32_TYPE,                 "F17", &entry->_17);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3354      	adds	r3, #84	; 0x54
 8001a28:	4639      	mov	r1, r7
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <entityBoardInit+0x39c>)
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	2303      	movs	r3, #3
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2354      	movs	r3, #84	; 0x54
 8001a36:	2218      	movs	r2, #24
 8001a38:	6a38      	ldr	r0, [r7, #32]
 8001a3a:	f000 fdb7 	bl	80025ac <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _18), SREG_TYPE,                "F18", &entry->_18);

    initFieldArray(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, data), UINT8_TYPE, sizeof(entry->data), NULL, entry->data, 1);
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	335c      	adds	r3, #92	; 0x5c
 8001a42:	4639      	mov	r1, r7
 8001a44:	2201      	movs	r2, #1
 8001a46:	9204      	str	r2, [sp, #16]
 8001a48:	9303      	str	r3, [sp, #12]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	230a      	movs	r3, #10
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2301      	movs	r3, #1
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	235c      	movs	r3, #92	; 0x5c
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6a38      	ldr	r0, [r7, #32]
 8001a5c:	f000 fe32 	bl	80026c4 <initFieldArray>
    initFieldPointer(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, ptr), UINT8_TYPE,                "REG", &entry->ptr);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	3368      	adds	r3, #104	; 0x68
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	613a      	str	r2, [r7, #16]
 8001a68:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <entityBoardInit+0x3a0>)
 8001a6a:	60fa      	str	r2, [r7, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr);
STATIC_FORCEINLINE int initFieldPointer(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], reg* const field_ptr)
{
	return initField(entityInst, fieldNumber, bitFlags | ENTITY_POINTER_MSK, shift, type, descr, field_ptr);
 8001a6e:	2208      	movs	r2, #8
 8001a70:	4639      	mov	r1, r7
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2368      	movs	r3, #104	; 0x68
 8001a80:	6938      	ldr	r0, [r7, #16]
 8001a82:	f000 fd93 	bl	80025ac <initField>

    entry->_17 = /*(reg)&entry->data[0]*/(reg)&htim4.Instance->ARR;
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <entityBoardInit+0x3a4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	332c      	adds	r3, #44	; 0x2c
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
    entry->ptr = (reg)&entry->data[1];
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	335d      	adds	r3, #93	; 0x5d
 8001a96:	461a      	mov	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	669a      	str	r2, [r3, #104]	; 0x68

	entry->boardId 	= INIT_BOARD_ID;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
	entry->major 	= BOARD_MAJOR;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	705a      	strb	r2, [r3, #1]
	entry->minor 	= BOARD_MINOR;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	709a      	strb	r2, [r3, #2]
	entry->patch	= BOARD_PATCHLEVEL;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	809a      	strh	r2, [r3, #4]
	board_entry 	= entry;
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <entityBoardInit+0x3a8>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	6013      	str	r3, [r2, #0]

	board_entry->_13 = 3.444;
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <entityBoardInit+0x3a8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <entityBoardInit+0x3ac>)
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	0800d198 	.word	0x0800d198
 8001acc:	0800d1a0 	.word	0x0800d1a0
 8001ad0:	0800d1a8 	.word	0x0800d1a8
 8001ad4:	0800d1b0 	.word	0x0800d1b0
 8001ad8:	0800d1b8 	.word	0x0800d1b8
 8001adc:	0800d1bc 	.word	0x0800d1bc
 8001ae0:	0800d1c0 	.word	0x0800d1c0
 8001ae4:	0800d1c4 	.word	0x0800d1c4
 8001ae8:	0800d1c8 	.word	0x0800d1c8
 8001aec:	0800d1cc 	.word	0x0800d1cc
 8001af0:	0800d1d0 	.word	0x0800d1d0
 8001af4:	0800d1d4 	.word	0x0800d1d4
 8001af8:	0800d1d8 	.word	0x0800d1d8
 8001afc:	0800d1dc 	.word	0x0800d1dc
 8001b00:	0800d1e0 	.word	0x0800d1e0
 8001b04:	0800d1e4 	.word	0x0800d1e4
 8001b08:	0800d1e8 	.word	0x0800d1e8
 8001b0c:	0800d1ec 	.word	0x0800d1ec
 8001b10:	0800d1f0 	.word	0x0800d1f0
 8001b14:	20000200 	.word	0x20000200
 8001b18:	2000028c 	.word	0x2000028c
 8001b1c:	405c6a7f 	.word	0x405c6a7f

08001b20 <entityBoardProceed>:

void entityBoardProceed(void)
{
 8001b20:	b598      	push	{r3, r4, r7, lr}
 8001b22:	af00      	add	r7, sp, #0
//	if((HAL_GetTick() - lastTime) > 1000) {
//		board_entry->
//	}
//
//	lastTime = HAL_GetTick();
	board_entry->_5 = HAL_GetTick();
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <entityBoardProceed+0x14>)
 8001b26:	681c      	ldr	r4, [r3, #0]
 8001b28:	f003 fdae 	bl	8005688 <HAL_GetTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	6123      	str	r3, [r4, #16]
	//board_entry->_13 = 3.444;
}
 8001b30:	bf00      	nop
 8001b32:	bd98      	pop	{r3, r4, r7, pc}
 8001b34:	2000028c 	.word	0x2000028c

08001b38 <HAL_UART_RxCpltCallback>:



// uart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_UART_RxCpltCallback+0x54>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d11c      	bne.n	8001b84 <HAL_UART_RxCpltCallback+0x4c>

		RawParser_dma_receiveByte(&comm.rawparser, comm.receiveByte);
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_UART_RxCpltCallback+0x58>)
 8001b4c:	f893 3a34 	ldrb.w	r3, [r3, #2612]	; 0xa34
 8001b50:	75fb      	strb	r3, [r7, #23]

// receive functions-----------------------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_receiveByte(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == NULL), M_EMPTY, return, "RawParser_dma_receiveByte: No valid input");
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_UART_RxCpltCallback+0x5c>)
 8001b54:	613b      	str	r3, [r7, #16]
    reg m_receivePos            = self->m_receivePos;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_UART_RxCpltCallback+0x58>)
 8001b58:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001b5c:	60fb      	str	r3, [r7, #12]

    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	7dfa      	ldrb	r2, [r7, #23]
 8001b6a:	701a      	strb	r2, [r3, #0]
    ++m_receivePos;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]

    self->m_receivePos = m_receivePos;
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_UART_RxCpltCallback+0x58>)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
		HAL_UART_Receive_IT(huart, (uint8_t*) &comm.receiveByte, 1);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <HAL_UART_RxCpltCallback+0x60>)
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f005 fd0b 	bl	800759a <HAL_UART_Receive_IT>
	}
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	200002a0 	.word	0x200002a0
 8001b94:	200002a8 	.word	0x200002a8
 8001b98:	20000cd4 	.word	0x20000cd4

08001b9c <CallbackManager_init>:
    CallbackManager_init(m_manager);
    return m_manager;
}

void CallbackManager_init(CallbackManager_t * const self)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af04      	add	r7, sp, #16
 8001ba2:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_init: no valid input data", ENA, LIB);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d112      	bne.n	8001bd0 <CallbackManager_init+0x34>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <CallbackManager_init+0x60>)
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <CallbackManager_init+0x64>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2314      	movs	r3, #20
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <CallbackManager_init+0x68>)
 8001bc8:	480f      	ldr	r0, [pc, #60]	; (8001c08 <CallbackManager_init+0x6c>)
 8001bca:	f003 fbc3 	bl	8005354 <__M_Error>
 8001bce:	e011      	b.n	8001bf4 <CallbackManager_init+0x58>
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e007      	b.n	8001be6 <CallbackManager_init+0x4a>
        self->workers[i] = (CallbackWorker)NULL;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3301      	adds	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2bff      	cmp	r3, #255	; 0xff
 8001bea:	d9f4      	bls.n	8001bd6 <CallbackManager_init+0x3a>
        self->ctx[i] = NULL;
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
    }

#ifndef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx = NULL;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	0800d254 	.word	0x0800d254
 8001c00:	0800d2c0 	.word	0x0800d2c0
 8001c04:	0800d1f4 	.word	0x0800d1f4
 8001c08:	0800d29c 	.word	0x0800d29c

08001c0c <CallbackManager_addWorker>:

    return 0;
}

void CallbackManager_addWorker(CallbackManager_t * const self, const CallBManIdType id, const CallbackWorker worker, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af04      	add	r7, sp, #16
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d112      	bne.n	8001c48 <CallbackManager_addWorker+0x3c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <CallbackManager_addWorker+0x54>)
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	2301      	movs	r3, #1
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <CallbackManager_addWorker+0x58>)
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	232d      	movs	r3, #45	; 0x2d
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <CallbackManager_addWorker+0x5c>)
 8001c40:	480a      	ldr	r0, [pc, #40]	; (8001c6c <CallbackManager_addWorker+0x60>)
 8001c42:	f003 fb87 	bl	8005354 <__M_Error>
 8001c46:	e008      	b.n	8001c5a <CallbackManager_addWorker+0x4e>

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    self->workers[id] = worker;
 8001c48:	7afa      	ldrb	r2, [r7, #11]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx[id] = PREPROCESSOR_CTX_TYPE_CAST(ctx);
#else
    self->ctx = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	0800d254 	.word	0x0800d254
 8001c64:	0800d344 	.word	0x0800d344
 8001c68:	0800d1f4 	.word	0x0800d1f4
 8001c6c:	0800d29c 	.word	0x0800d29c

08001c70 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
int CallbackManager_proceed(const CallbackManager_t* const self, const CallBManIdType id,
                            u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b08b      	sub	sp, #44	; 0x2c
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input data", ENA, LIB);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d113      	bne.n	8001cae <CallbackManager_proceed+0x3e>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <CallbackManager_proceed+0x84>)
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <CallbackManager_proceed+0x88>)
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2341      	movs	r3, #65	; 0x41
 8001ca2:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <CallbackManager_proceed+0x8c>)
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <CallbackManager_proceed+0x90>)
 8001ca6:	f003 fb55 	bl	8005354 <__M_Error>
 8001caa:	2300      	movs	r3, #0
 8001cac:	e01e      	b.n	8001cec <CallbackManager_proceed+0x7c>
#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    // move to cash
    const CallbackWorker worker = self->workers[id];
 8001cae:	7afa      	ldrb	r2, [r7, #11]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb6:	617b      	str	r3, [r7, #20]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx[id];
#else
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001cbe:	613b      	str	r3, [r7, #16]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    // do logic
    M_Assert_SafeFunctionCall((worker != (CallbackWorker)NULL), {
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <CallbackManager_proceed+0x6a>
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697c      	ldr	r4, [r7, #20]
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	47a0      	blx	r4
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e008      	b.n	8001cec <CallbackManager_proceed+0x7c>
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <CallbackManager_proceed+0x94>)
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2351      	movs	r3, #81	; 0x51
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <CallbackManager_proceed+0x8c>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <CallbackManager_proceed+0x98>)
 8001ce6:	f003 fb53 	bl	8005390 <__M_Warning>
                                  worker(inputData, outputData, size, maxOutBufferSize, ctx);
                                  return 1;
                              });
    return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	0800d254 	.word	0x0800d254
 8001cf8:	0800d378 	.word	0x0800d378
 8001cfc:	0800d1f4 	.word	0x0800d1f4
 8001d00:	0800d29c 	.word	0x0800d29c
 8001d04:	0800d3cc 	.word	0x0800d3cc
 8001d08:	0800d3a8 	.word	0x0800d3a8

08001d0c <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	460a      	mov	r2, r1
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	4053      	eors	r3, r2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <fast_crc8_maxim_byte+0x2c>)
 8001d28:	5c9b      	ldrb	r3, [r3, r2]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	0800f378 	.word	0x0800f378

08001d3c <entityCMD>:
#ifdef C_ENTITY_FRAMEWORK_LIB_ENA
#include "entity_packet.h"
#include "smart_assert.h"

void entityCMD(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b0b7      	sub	sp, #220	; 0xdc
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
	M_Assert_Break((inputData == NULL) || (outputData == NULL) || (size == NULL), M_EMPTY, return, "entityCMD: invalid input");
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <entityCMD+0x20>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <entityCMD+0x20>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d114      	bne.n	8001d86 <entityCMD+0x4a>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <entityCMD+0x32>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <entityCMD+0x32>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <entityCMD+0x36>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <entityCMD+0x38>
 8001d72:	2300      	movs	r3, #0
 8001d74:	b2d9      	uxtb	r1, r3
 8001d76:	4baa      	ldr	r3, [pc, #680]	; (8002020 <entityCMD+0x2e4>)
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	4aa9      	ldr	r2, [pc, #676]	; (8002024 <entityCMD+0x2e8>)
 8001d7e:	48aa      	ldr	r0, [pc, #680]	; (8002028 <entityCMD+0x2ec>)
 8001d80:	f003 fae8 	bl	8005354 <__M_Error>
 8001d84:	e20a      	b.n	800219c <entityCMD+0x460>

	const reg sizeInternal = (*size);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	M_Assert_Break((sizeInternal == 0) || (maxOutBufferSize == 0), M_EMPTY, return, "entityCMD: invalid input size");
 8001d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <entityCMD+0x60>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d112      	bne.n	8001dc2 <entityCMD+0x86>
 8001d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <entityCMD+0x6e>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <entityCMD+0x72>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <entityCMD+0x74>
 8001dae:	2300      	movs	r3, #0
 8001db0:	b2d9      	uxtb	r1, r3
 8001db2:	4b9e      	ldr	r3, [pc, #632]	; (800202c <entityCMD+0x2f0>)
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	230d      	movs	r3, #13
 8001db8:	4a9a      	ldr	r2, [pc, #616]	; (8002024 <entityCMD+0x2e8>)
 8001dba:	489d      	ldr	r0, [pc, #628]	; (8002030 <entityCMD+0x2f4>)
 8001dbc:	f003 faca 	bl	8005354 <__M_Error>
 8001dc0:	e1ec      	b.n	800219c <entityCMD+0x460>

	reg Wpos = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	reg Rpos = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40
	reg entitySize = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
	const u8 cmd = inputData[0];
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


	// write header------------------------------------------
	outputData[0] =   cmd;                     // CMD_ID
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8001dde:	701a      	strb	r2, [r3, #0]

	// do logic------------------------------------------
	switch(cmd) {
 8001de0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001de4:	2b0b      	cmp	r3, #11
 8001de6:	f200 81d3 	bhi.w	8002190 <entityCMD+0x454>
 8001dea:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <entityCMD+0xb4>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e4b 	.word	0x08001e4b
 8001df4:	08001ee9 	.word	0x08001ee9
 8001df8:	08001fdb 	.word	0x08001fdb
 8001dfc:	080020b9 	.word	0x080020b9
 8001e00:	08002091 	.word	0x08002091
 8001e04:	08002149 	.word	0x08002149
 8001e08:	08002171 	.word	0x08002171
 8001e0c:	08002171 	.word	0x08002171
 8001e10:	08002191 	.word	0x08002191
 8001e14:	08002191 	.word	0x08002191
 8001e18:	08001e2f 	.word	0x08001e2f
 8001e1c:	08001e21 	.word	0x08001e21

	/* **********************************************************************************************************************************
	 *  ENTITY PING
	 */
	case ENTITY_PING_CMD: {
		entitySize = 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c

#ifdef USE_ENTITY_PING
		outputData[1] = entities_ping();
#else
		outputData[1] = 1;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
#endif /* USE_ENTITY_PING */
		break;}
 8001e2c:	e1b0      	b.n	8002190 <entityCMD+0x454>

	/* **********************************************************************************************************************************
	 *  READ MAIN TYPE DIMENSIONS
	 */
	case ENTITY_READ_DIMENSIONS: {
		readEntitiesSizes((outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e3c:	1ad2      	subs	r2, r2, r3
 8001e3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e42:	4619      	mov	r1, r3
 8001e44:	f000 fd34 	bl	80028b0 <readEntitiesSizes>
		break;}
 8001e48:	e1a2      	b.n	8002190 <entityCMD+0x454>
	 */
	case READ_ENTITY_DESCRIPTIONS: {
		//ENTITY_DBG_ASSERT_BUF( (Rpos + (ENTITIES_SIZEOF << 1)) > sizeInternal, M_EMPTY, return, "entityCMD: read size more than buffer");

		// read entity start
		TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber = readEntityNumberFromBuf(&inputData[Rpos]);
 8001e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
/************************************************************************************
 *  Macro for user copy
 */
STATIC_FORCEINLINE void MY_CTYPE_USER_DATA_MEMCPY(reg n, const void* from, void* to)
{
    switch (n) {
 8001e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d013      	beq.n	8001e9a <entityCMD+0x15e>
 8001e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d106      	bne.n	8001e88 <entityCMD+0x14c>
//    case sizeof(u64): *(u64*)to = *(u64*)from; break;
//    case sizeof(u32): *(u32*)to = *(u32*)from; break;
//    case sizeof(u16): *(u16*)to = *(u16*)from; break;
//-------------------- NOT WORK --------------------------------------------------------
    case 0: break;
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8001e7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e009      	b.n	8001e9c <entityCMD+0x160>
    default: memcpy(to, from, n); break;
 8001e88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e8c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001e90:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001e94:	f006 fe08 	bl	8008aa8 <memcpy>
 8001e98:	e000      	b.n	8001e9c <entityCMD+0x160>
    case 0: break;
 8001e9a:	bf00      	nop
    }
}
 8001e9c:	bf00      	nop
#if (MAX_NUBER_OF_ENTITIES < 256U)
	entityNumber = *(inputData);
#else

    ENTITY_BYTE_CPY(ENTITIES_SIZEOF, inputData, &entityNumber);
    entityNumber &= 0x0000FFFFUL;
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
#endif /* (MAX_NUBER_OF_ENTITIES < 256U) */
    //----------------- END --------------------------------------------------------------------------------

    return entityNumber;
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		Rpos += ENTITIES_SIZEOF;
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	3302      	adds	r3, #2
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40

		// read number of entity
		//        TYPEOF_STRUCT(EntityInfo, entities_count) len; //(WARNING!!!) do not supported on old version!!!!!!!
		//        readEntityNumberFromBuf(&len, &inputData[Rpos]);
		//        Rpos += ENTITIES_SIZEOF;
		const TYPEOF_STRUCT(EntityInfo, entities_count) len = inputData[Rpos++]; // support on old version (this is glitch!!!)
 8001eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	643a      	str	r2, [r7, #64]	; 0x40
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// read descriptions function
		readEntitiesDescriptions(startEntityNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ec6:	18d1      	adds	r1, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	460a      	mov	r2, r1
 8001eda:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001ede:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001ee2:	f000 fd83 	bl	80029ec <readEntitiesDescriptions>
		break;}
 8001ee6:	e153      	b.n	8002190 <entityCMD+0x454>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
}

// read entity & field number from input buffer by next position
STATIC_FORCEINLINE void readEntityFieldNumbersfromBuf(TYPEOF_STRUCT(EntityInfo, entities_count)* const entityNumber, TYPEOF_STRUCT(Entity, fields_count)* const fieldNumber, u8* const inputData, reg* const Rpos)
{
    reg Rpos_internal = (*Rpos);
 8001eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read entity number
     */
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001ef4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001efc:	4413      	add	r3, r2
 8001efe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 8001f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <entityCMD+0x20c>
 8001f20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d106      	bne.n	8001f36 <entityCMD+0x1fa>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8001f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e009      	b.n	8001f4a <entityCMD+0x20e>
    default: memcpy(to, from, n); break;
 8001f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f3e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f42:	f006 fdb1 	bl	8008aa8 <memcpy>
 8001f46:	e000      	b.n	8001f4a <entityCMD+0x20e>
    case 0: break;
 8001f48:	bf00      	nop
}
 8001f4a:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    return entityNumber;
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
    Rpos_internal += ENTITIES_SIZEOF;
 8001f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read field number
     */
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001f60:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f68:	4413      	add	r3, r2
 8001f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fieldNumber = *(inputData);
 8001f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    return fieldNumber;
 8001f78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001f7c:	867b      	strh	r3, [r7, #50]	; 0x32
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f82:	3301      	adds	r3, #1
 8001f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    //----------------- END -----------------------------------------------
    (*Rpos) = Rpos_internal;
 8001f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f8c:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001f8e:	bf00      	nop
		TYPEOF_STRUCT(Entity, fields_count)         startFieldNumber;
		TYPEOF_STRUCT(Entity, fields_count)         len;
		readEntityFieldNumbersfromBuf(&entityNumber, &startFieldNumber, inputData, &Rpos);

		//read number of fields
		len = readFieldNumberFromBuf(&inputData[Rpos]);
 8001f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	fieldNumber = *(inputData);
 8001f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    return fieldNumber;
 8001fa4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001fa8:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		Rpos += ENTITY_FIELD_SIZEOF;
 8001fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fae:	3301      	adds	r3, #1
 8001fb0:	643b      	str	r3, [r7, #64]	; 0x40

		readEntityFields(entityNumber, startFieldNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001fb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fb4:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fbc:	18d4      	adds	r4, r2, r3
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4623      	mov	r3, r4
 8001fd4:	f000 fdc6 	bl	8002b64 <readEntityFields>
		break;}
 8001fd8:	e0da      	b.n	8002190 <entityCMD+0x454>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    reg Rpos_internal = (*Rpos);
 8001fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001fe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fea:	4413      	add	r3, r2
 8001fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fee:	2302      	movs	r3, #2
 8001ff0:	677b      	str	r3, [r7, #116]	; 0x74
 8001ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ff4:	673b      	str	r3, [r7, #112]	; 0x70
 8001ff6:	f107 0320 	add.w	r3, r7, #32
 8001ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
    switch (n) {
 8001ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d018      	beq.n	8002034 <entityCMD+0x2f8>
 8002002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002004:	2b01      	cmp	r3, #1
 8002006:	d104      	bne.n	8002012 <entityCMD+0x2d6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	e011      	b.n	8002036 <entityCMD+0x2fa>
    default: memcpy(to, from, n); break;
 8002012:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002014:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002016:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002018:	f006 fd46 	bl	8008aa8 <memcpy>
 800201c:	e00b      	b.n	8002036 <entityCMD+0x2fa>
 800201e:	bf00      	nop
 8002020:	0800d450 	.word	0x0800d450
 8002024:	0800d3e0 	.word	0x0800d3e0
 8002028:	0800d410 	.word	0x0800d410
 800202c:	0800d49c 	.word	0x0800d49c
 8002030:	0800d46c 	.word	0x0800d46c
    case 0: break;
 8002034:	bf00      	nop
}
 8002036:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	b29b      	uxth	r3, r3
 800203c:	623b      	str	r3, [r7, #32]
    return entityNumber;
 800203e:	6a3b      	ldr	r3, [r7, #32]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    Rpos_internal += ENTITIES_SIZEOF;
 8002042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002044:	3302      	adds	r3, #2
 8002046:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8002048:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800204c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800204e:	4413      	add	r3, r2
 8002050:	66bb      	str	r3, [r7, #104]	; 0x68
	fieldNumber = *(inputData);
 8002052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    return fieldNumber;
 800205a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800205e:	84fb      	strh	r3, [r7, #38]	; 0x26
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8002060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002062:	3301      	adds	r3, #1
 8002064:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*Rpos) = Rpos_internal;
 8002066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002068:	643b      	str	r3, [r7, #64]	; 0x40
}
 800206a:	bf00      	nop

		TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
		TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
		readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

		readFieldValue(entityNumber, fieldNumber, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 800206c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800206e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002076:	18d4      	adds	r4, r2, r3
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	4622      	mov	r2, r4
 800208a:	f000 fe8b 	bl	8002da4 <readFieldValue>
		break;}
 800208e:	e07f      	b.n	8002190 <entityCMD+0x454>

	case READ_SEVERAL_VALUES: {
		entitySize = (sizeInternal - 1U);
 8002090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002094:	3b01      	subs	r3, #1
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
		readSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	18d0      	adds	r0, r2, r3
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020a4:	18d1      	adds	r1, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80020b2:	f000 fffd 	bl	80030b0 <readSeveralFieldsValues>
		break;}
 80020b6:	e06b      	b.n	8002190 <entityCMD+0x454>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	663b      	str	r3, [r7, #96]	; 0x60
    reg Rpos_internal = (*Rpos);
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80020c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c4:	4413      	add	r3, r2
 80020c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80020c8:	2302      	movs	r3, #2
 80020ca:	657b      	str	r3, [r7, #84]	; 0x54
 80020cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (n) {
 80020d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <entityCMD+0x3bc>
 80020dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d104      	bne.n	80020ec <entityCMD+0x3b0>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80020e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e006      	b.n	80020fa <entityCMD+0x3be>
    default: memcpy(to, from, n); break;
 80020ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020f2:	f006 fcd9 	bl	8008aa8 <memcpy>
 80020f6:	e000      	b.n	80020fa <entityCMD+0x3be>
    case 0: break;
 80020f8:	bf00      	nop
}
 80020fa:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	617b      	str	r3, [r7, #20]
    return entityNumber;
 8002102:	697b      	ldr	r3, [r7, #20]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002104:	61fb      	str	r3, [r7, #28]
    Rpos_internal += ENTITIES_SIZEOF;
 8002106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002108:	3302      	adds	r3, #2
 800210a:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800210c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800210e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002110:	4413      	add	r3, r2
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
	fieldNumber = *(inputData);
 8002114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    return fieldNumber;
 800211c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8002120:	837b      	strh	r3, [r7, #26]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8002122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002124:	3301      	adds	r3, #1
 8002126:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*Rpos) = Rpos_internal;
 8002128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
}
 800212c:	bf00      	nop

		TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
		TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
		readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

		setFieldValue(entityNumber, fieldNumber, (inputData + Rpos), (sizeInternal - Rpos));
 800212e:	69f8      	ldr	r0, [r7, #28]
 8002130:	8b79      	ldrh	r1, [r7, #26]
 8002132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	18d4      	adds	r4, r2, r3
 8002138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4622      	mov	r2, r4
 8002142:	f001 fa09 	bl	8003558 <setFieldValue>
		break;}
 8002146:	e023      	b.n	8002190 <entityCMD+0x454>

	case WRITE_SEVERAL_VALUES: {
		entitySize = (sizeInternal - 1U);
 8002148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800214c:	3b01      	subs	r3, #1
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
		setSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	18d0      	adds	r0, r2, r3
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800215c:	18d1      	adds	r1, r2, r3
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800216a:	f001 fb39 	bl	80037e0 <setSeveralFieldsValues>
		break;}
 800216e:	e00f      	b.n	8002190 <entityCMD+0x454>
	/* **********************************************************************************************************************************
	 *  WRITE/READ Values
	 */
	case READ_SEVERAL_VALUES_GLUED :
	case WRITE_SEVERAL_VALUES_GLUED: {
		proceedGluedValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	18d0      	adds	r0, r2, r3
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800217c:	18d1      	adds	r1, r2, r3
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800218a:	f001 fd71 	bl	8003c70 <proceedGluedValues>
		break;}
 800218e:	bf00      	nop
	case ENTITY_FLASH_OPERATION: {
		break;}

	}

	(*size) = (Wpos + entitySize);
 8002190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
	UNUSED(ctx);
}
 800219c:	37d4      	adds	r7, #212	; 0xd4
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	bf00      	nop

080021a4 <deleteEntitityFieldsInternal>:
 * **********************************************************************************************************************************
 */

/// delete some entity for internal using
static void deleteEntitityFieldsInternal(const reg entityNumber)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((entityNumber > entityInfo.entities_count), M_EMPTY, return, "deleteEntitityFieldsInternal: No entity for delete!!!");
 80021ac:	4b35      	ldr	r3, [pc, #212]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d910      	bls.n	80021d8 <deleteEntitityFieldsInternal+0x34>
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	bf8c      	ite	hi
 80021c0:	2301      	movhi	r3, #1
 80021c2:	2300      	movls	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <deleteEntitityFieldsInternal+0xe4>)
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	231b      	movs	r3, #27
 80021ce:	4a2f      	ldr	r2, [pc, #188]	; (800228c <deleteEntitityFieldsInternal+0xe8>)
 80021d0:	482f      	ldr	r0, [pc, #188]	; (8002290 <deleteEntitityFieldsInternal+0xec>)
 80021d2:	f003 f8bf 	bl	8005354 <__M_Error>
 80021d6:	e051      	b.n	800227c <deleteEntitityFieldsInternal+0xd8>
    M_Assert_BreakSaveCheck((entityInfo.entities[entityNumber] == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]))), M_EMPTY, return, "initEntity: entity number: %d is null", entityNumber);
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <deleteEntitityFieldsInternal+0x70>
 80021e8:	4b26      	ldr	r3, [pc, #152]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4619      	mov	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <deleteEntitityFieldsInternal+0xf0>)
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	231c      	movs	r3, #28
 800220a:	4a20      	ldr	r2, [pc, #128]	; (800228c <deleteEntitityFieldsInternal+0xe8>)
 800220c:	4822      	ldr	r0, [pc, #136]	; (8002298 <deleteEntitityFieldsInternal+0xf4>)
 800220e:	f003 f8a1 	bl	8005354 <__M_Error>
 8002212:	e033      	b.n	800227c <deleteEntitityFieldsInternal+0xd8>
    if(entityInfo.entities[entityNumber]->isHeap) {
        free(entityInfo.entities[entityNumber]->pointer);
        entityInfo.entities[entityNumber]->pointer = NULL;
    }
#else
    free(entityInfo.entities[entityNumber]->pointer);
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f006 fc38 	bl	8008a98 <free>
    entityInfo.entities[entityNumber]->pointer = NULL;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
#endif /* USE_ENTITY_USER_SPACE */

    free(entityInfo.entities[entityNumber]->fields);
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4618      	mov	r0, r3
 8002248:	f006 fc26 	bl	8008a98 <free>
    entityInfo.entities[entityNumber]->fields = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]->fields));
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]

    free(entityInfo.entities[entityNumber]);
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f006 fc15 	bl	8008a98 <free>
    entityInfo.entities[entityNumber] = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]));
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <deleteEntitityFieldsInternal+0xe0>)
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000290 	.word	0x20000290
 8002288:	0800d51c 	.word	0x0800d51c
 800228c:	0800d4bc 	.word	0x0800d4bc
 8002290:	0800d4f0 	.word	0x0800d4f0
 8002294:	0800d5b8 	.word	0x0800d5b8
 8002298:	0800d554 	.word	0x0800d554

0800229c <deleteEntities>:
}


/// delete all entities and deallocation all memory
void deleteEntities(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <deleteEntities+0x44>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	603b      	str	r3, [r7, #0]

    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	e005      	b.n	80022ba <deleteEntities+0x1e>
        deleteEntitityFieldsInternal(i);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff78 	bl	80021a4 <deleteEntitityFieldsInternal>
    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3301      	adds	r3, #1
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d3f5      	bcc.n	80022ae <deleteEntities+0x12>
    }

    free(entityInfo.entities);
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <deleteEntities+0x44>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f006 fbe6 	bl	8008a98 <free>
    memset(&entityInfo, 0, sizeof(entityInfo));
 80022cc:	220c      	movs	r2, #12
 80022ce:	2100      	movs	r1, #0
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <deleteEntities+0x44>)
 80022d2:	f006 fc11 	bl	8008af8 <memset>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000290 	.word	0x20000290

080022e4 <newEntities>:



/// allocation new entities pointers
int newEntities(const reg numberOfEntities)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af04      	add	r7, sp, #16
 80022ea:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((numberOfEntities > MAX_NUBER_OF_ENTITIES), M_EMPTY, return ENTITY_ERROR, "newEntities: No valid input number of entities, value: %d, max: %d", numberOfEntities, MAX_NUBER_OF_ENTITIES);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022f2:	d915      	bls.n	8002320 <newEntities+0x3c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022fa:	bf8c      	ite	hi
 80022fc:	2301      	movhi	r3, #1
 80022fe:	2300      	movls	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <newEntities+0x8c>)
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2359      	movs	r3, #89	; 0x59
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <newEntities+0x90>)
 8002316:	4818      	ldr	r0, [pc, #96]	; (8002378 <newEntities+0x94>)
 8002318:	f003 f81c 	bl	8005354 <__M_Error>
 800231c:	2300      	movs	r3, #0
 800231e:	e022      	b.n	8002366 <newEntities+0x82>

    deleteEntities(); // delete all entities
 8002320:	f7ff ffbc 	bl	800229c <deleteEntities>

    entityInfo.entities = (Entity**) calloc(numberOfEntities, sizeof(Entity*)); // allocation & initialization all entity pointers
 8002324:	2104      	movs	r1, #4
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f006 f8ee 	bl	8008508 <calloc>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <newEntities+0x98>)
 8002332:	609a      	str	r2, [r3, #8]
    M_Assert_BreakSaveCheck((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities))), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entity pointers");
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <newEntities+0x98>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d110      	bne.n	800235e <newEntities+0x7a>
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <newEntities+0x98>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4619      	mov	r1, r3
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <newEntities+0x9c>)
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	235e      	movs	r3, #94	; 0x5e
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <newEntities+0x90>)
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <newEntities+0xa0>)
 8002356:	f002 fffd 	bl	8005354 <__M_Error>
 800235a:	2300      	movs	r3, #0
 800235c:	e003      	b.n	8002366 <newEntities+0x82>

    entityInfo.allocated_entity_pointers = numberOfEntities;
 800235e:	4a07      	ldr	r2, [pc, #28]	; (800237c <newEntities+0x98>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]
    return ENTITY_OK;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	0800d638 	.word	0x0800d638
 8002374:	0800d4bc 	.word	0x0800d4bc
 8002378:	0800d60c 	.word	0x0800d60c
 800237c:	20000290 	.word	0x20000290
 8002380:	0800d6c4 	.word	0x0800d6c4
 8002384:	0800d67c 	.word	0x0800d67c

08002388 <initEntity>:


/// allocation entitites pointer & fields
int initEntity(reg* const entityNumber, const reg NumberOfFields, const reg pointerSize, const char descr[ENTITY_DESCRIPTION_SIZE], const b isCustomSpace, const b isHeap, void* arg)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b093      	sub	sp, #76	; 0x4c
 800238c:	af04      	add	r7, sp, #16
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((NumberOfFields > MAX_NUBER_OF_FIELDS), M_EMPTY, return ENTITY_ERROR, "initEntity: No valid input number of fields, value: %d, max: %d", NumberOfFields, MAX_NUBER_OF_FIELDS);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2bff      	cmp	r3, #255	; 0xff
 800239a:	d913      	bls.n	80023c4 <initEntity+0x3c>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	bf8c      	ite	hi
 80023a2:	2301      	movhi	r3, #1
 80023a4:	2300      	movls	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	23ff      	movs	r3, #255	; 0xff
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	4b71      	ldr	r3, [pc, #452]	; (8002578 <initEntity+0x1f0>)
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2368      	movs	r3, #104	; 0x68
 80023b8:	4a70      	ldr	r2, [pc, #448]	; (800257c <initEntity+0x1f4>)
 80023ba:	4871      	ldr	r0, [pc, #452]	; (8002580 <initEntity+0x1f8>)
 80023bc:	f002 ffca 	bl	8005354 <__M_Error>
 80023c0:	2300      	movs	r3, #0
 80023c2:	e0d4      	b.n	800256e <initEntity+0x1e6>

    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80023c4:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <initEntity+0x1fc>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    const TYPEOF_STRUCT(EntityInfo, allocated_entity_pointers) allocated_entity_pointers = entityInfo.allocated_entity_pointers;
 80023ca:	4b6e      	ldr	r3, [pc, #440]	; (8002584 <initEntity+0x1fc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    M_Assert_BreakSaveCheck((entities_count >= allocated_entity_pointers), M_EMPTY, return ENTITY_ERROR, "initEntity: There is no free entity for initialization!!!, use /newEntities/ function before");
 80023d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d310      	bcc.n	80023fa <initEntity+0x72>
 80023d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	bf2c      	ite	cs
 80023e0:	2301      	movcs	r3, #1
 80023e2:	2300      	movcc	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	4b67      	ldr	r3, [pc, #412]	; (8002588 <initEntity+0x200>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	236d      	movs	r3, #109	; 0x6d
 80023ee:	4a63      	ldr	r2, [pc, #396]	; (800257c <initEntity+0x1f4>)
 80023f0:	4866      	ldr	r0, [pc, #408]	; (800258c <initEntity+0x204>)
 80023f2:	f002 ffaf 	bl	8005354 <__M_Error>
 80023f6:	2300      	movs	r3, #0
 80023f8:	e0b9      	b.n	800256e <initEntity+0x1e6>

    char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	f107 0318 	add.w	r3, r7, #24
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	721a      	strb	r2, [r3, #8]

    // allocation pointer to Entity--------------------------------------------------------------------------------------------------------------------------------------------------------------
    Entity* const new_entity = entityInfo.entities[entities_count] = (Entity*) calloc(1, sizeof(Entity));
 800240a:	4b5e      	ldr	r3, [pc, #376]	; (8002584 <initEntity+0x1fc>)
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	18d4      	adds	r4, r2, r3
 8002414:	2110      	movs	r1, #16
 8002416:	2001      	movs	r0, #1
 8002418:	f006 f876 	bl	8008508 <calloc>
 800241c:	4603      	mov	r3, r0
 800241e:	6023      	str	r3, [r4, #0]
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    M_Assert_BreakSaveCheck(new_entity == NULLPTR(Entity*), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entitity");
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <initEntity+0xc2>
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	4b55      	ldr	r3, [pc, #340]	; (8002590 <initEntity+0x208>)
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2373      	movs	r3, #115	; 0x73
 800243e:	4a4f      	ldr	r2, [pc, #316]	; (800257c <initEntity+0x1f4>)
 8002440:	4854      	ldr	r0, [pc, #336]	; (8002594 <initEntity+0x20c>)
 8002442:	f002 ff87 	bl	8005354 <__M_Error>
 8002446:	2300      	movs	r3, #0
 8002448:	e091      	b.n	800256e <initEntity+0x1e6>

    // copy entity description-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if(descr) {
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <initEntity+0xd4>
        memcpy(new_entity->descr, descr, ENTITY_DESCRIPTION_SIZE);
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	3304      	adds	r3, #4
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e00a      	b.n	8002472 <initEntity+0xea>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)descr, (u8 *)new_entity->descr);
    } else {
        sprintf(str, "E%d", entities_count);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002462:	494d      	ldr	r1, [pc, #308]	; (8002598 <initEntity+0x210>)
 8002464:	4618      	mov	r0, r3
 8002466:	f007 fc81 	bl	8009d6c <siprintf>
        memcpy(new_entity->descr, str, ENTITY_DESCRIPTION_SIZE);
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	3304      	adds	r3, #4
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, (isCustomSpace ? "newEntities: Invalid user input space" : "newEntities: No memory for allocation Entitity"));

#else

    new_entity->pointer = calloc(1, pointerSize);
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	2001      	movs	r0, #1
 8002476:	f006 f847 	bl	8008508 <calloc>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	601a      	str	r2, [r3, #0]
    UNUSED(isCustomSpace);
    UNUSED(isHeap);
    UNUSED(arg);

    M_Assert_BreakSaveCheck((new_entity->pointer == NULL), {
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d113      	bne.n	80024b2 <initEntity+0x12a>
 800248a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800248c:	f7ff fe8a 	bl	80021a4 <deleteEntitityFieldsInternal>
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <initEntity+0x208>)
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2396      	movs	r3, #150	; 0x96
 80024a6:	4a35      	ldr	r2, [pc, #212]	; (800257c <initEntity+0x1f4>)
 80024a8:	483c      	ldr	r0, [pc, #240]	; (800259c <initEntity+0x214>)
 80024aa:	f002 ff53 	bl	8005354 <__M_Error>
 80024ae:	2300      	movs	r3, #0
 80024b0:	e05d      	b.n	800256e <initEntity+0x1e6>

#endif /* USE_ENTITY_USER_SPACE */


    // allocation pointer to Fields------------------------------------------------------------------------------------------------------------------------------------------------------------
    new_entity->fields = (EntityField*) calloc(NumberOfFields, sizeof(EntityField));
 80024b2:	2120      	movs	r1, #32
 80024b4:	68b8      	ldr	r0, [r7, #8]
 80024b6:	f006 f827 	bl	8008508 <calloc>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	60da      	str	r2, [r3, #12]
    M_Assert_BreakSaveCheck((new_entity->fields == NULLPTR(TYPEOF_STRUCT(Entity, fields))), {
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d113      	bne.n	80024f2 <initEntity+0x16a>
 80024ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024cc:	f7ff fe6a 	bl	80021a4 <deleteEntitityFieldsInternal>
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <initEntity+0x218>)
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	239f      	movs	r3, #159	; 0x9f
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <initEntity+0x1f4>)
 80024e8:	482e      	ldr	r0, [pc, #184]	; (80025a4 <initEntity+0x21c>)
 80024ea:	f002 ff33 	bl	8005354 <__M_Error>
 80024ee:	2300      	movs	r3, #0
 80024f0:	e03d      	b.n	800256e <initEntity+0x1e6>
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, "newEntities: No memory for allocation EntityField");

    new_entity->fields_count = NumberOfFields;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	811a      	strh	r2, [r3, #8]

    // initialization Fields-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    for(reg i = 0; i < NumberOfFields; ++i) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
 80024fe:	e028      	b.n	8002552 <initEntity+0x1ca>
        EntityField* const    field = &new_entity->fields[i];
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	4413      	add	r3, r2
 800250a:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef USE_ENTITY_CALLBACKS

#   ifdef USE_ENTITY_READ_CALLBACK
        field->rdCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
        field->rdCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
#   endif /* USE_ENTITY_READ_CALLBACK */

#   ifdef USE_ENTITY_WRITE_CALLBACK
        field->wrCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
        field->wrCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
#   endif /* USE_ENTITY_WRITE_CALLBACK */

#endif /* USE_ENTITY_CALLBACKS */

        field->bitFlags  = 0;
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
        field->shift     = 0;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	2200      	movs	r2, #0
 800252e:	615a      	str	r2, [r3, #20]
        field->type      = VOID_TYPE;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	2200      	movs	r2, #0
 8002534:	761a      	strb	r2, [r3, #24]

        sprintf(str, "F%d", i);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253c:	491a      	ldr	r1, [pc, #104]	; (80025a8 <initEntity+0x220>)
 800253e:	4618      	mov	r0, r3
 8002540:	f007 fc14 	bl	8009d6c <siprintf>
        memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	3319      	adds	r3, #25
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]
    for(reg i = 0; i < NumberOfFields; ++i) {
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	3301      	adds	r3, #1
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
 8002552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3d2      	bcc.n	8002500 <initEntity+0x178>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);
    }

    (*entityNumber) = entities_count;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	601a      	str	r2, [r3, #0]
    ++entities_count;
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	3301      	adds	r3, #1
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
    entityInfo.entities_count = entities_count;
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <initEntity+0x1fc>)
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	6053      	str	r3, [r2, #4]
    return ENTITY_OK;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	373c      	adds	r7, #60	; 0x3c
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	bf00      	nop
 8002578:	0800d724 	.word	0x0800d724
 800257c:	0800d4bc 	.word	0x0800d4bc
 8002580:	0800d6fc 	.word	0x0800d6fc
 8002584:	20000290 	.word	0x20000290
 8002588:	0800d794 	.word	0x0800d794
 800258c:	0800d764 	.word	0x0800d764
 8002590:	0800d814 	.word	0x0800d814
 8002594:	0800d7f4 	.word	0x0800d7f4
 8002598:	0800d844 	.word	0x0800d844
 800259c:	0800d848 	.word	0x0800d848
 80025a0:	0800d8a8 	.word	0x0800d8a8
 80025a4:	0800d868 	.word	0x0800d868
 80025a8:	0800d8dc 	.word	0x0800d8dc

080025ac <initField>:
 * **********************************************************************************************************************************
 */

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08e      	sub	sp, #56	; 0x38
 80025b0:	af04      	add	r7, sp, #16
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL), M_EMPTY, return ENTITY_ERROR, "initField: No valid input");
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <initField+0x1a>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d112      	bne.n	80025ec <initField+0x40>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <initField+0x26>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <initField+0x2a>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <initField+0x2c>
 80025d6:	2300      	movs	r3, #0
 80025d8:	b2d9      	uxtb	r1, r3
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <initField+0x100>)
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	23cf      	movs	r3, #207	; 0xcf
 80025e0:	4a33      	ldr	r2, [pc, #204]	; (80026b0 <initField+0x104>)
 80025e2:	4834      	ldr	r0, [pc, #208]	; (80026b4 <initField+0x108>)
 80025e4:	f002 feb6 	bl	8005354 <__M_Error>
 80025e8:	2300      	movs	r3, #0
 80025ea:	e05a      	b.n	80026a2 <initField+0xf6>

//#ifdef USE_ENTITY_REGISTER
//    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && !(type == REG_TYPE || type == SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initField: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
//#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	623b      	str	r3, [r7, #32]
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	891b      	ldrh	r3, [r3, #8]
 80025f6:	83fb      	strh	r3, [r7, #30]

    M_Assert_BreakElseSaveCheck((fields_count > fieldNumber_readed), {
 80025f8:	8bfb      	ldrh	r3, [r7, #30]
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d23c      	bcs.n	800267a <initField+0xce>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	015b      	lsls	r3, r3, #5
 8002608:	4413      	add	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	615a      	str	r2, [r3, #20]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800261e:	761a      	strb	r2, [r3, #24]
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <initField+0x84>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	3319      	adds	r3, #25
 800262a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	2b00      	cmp	r3, #0
 8002634:	d019      	beq.n	800266a <initField+0xbe>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <initField+0x9a>
 8002640:	2304      	movs	r3, #4
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	e00c      	b.n	8002660 <initField+0xb4>
 8002646:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800264a:	617b      	str	r3, [r7, #20]
}


STATIC_FORCEINLINE reg getMYCTypeLen(reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b11      	cmp	r3, #17
 8002650:	d804      	bhi.n	800265c <initField+0xb0>
        return typeLengthMappingArray[type];
 8002652:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <initField+0x10c>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	e000      	b.n	800265e <initField+0xb2>
    }
    return 0;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	2100      	movs	r1, #0
 8002664:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002666:	f006 fa47 	bl	8008af8 <memset>
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	3301      	adds	r3, #1
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6a3a      	ldr	r2, [r7, #32]
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	2301      	movs	r3, #1
 8002678:	e013      	b.n	80026a2 <initField+0xf6>
 800267a:	8bfb      	ldrh	r3, [r7, #30]
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	429a      	cmp	r2, r3
 8002680:	bf34      	ite	cc
 8002682:	2301      	movcc	r3, #1
 8002684:	2300      	movcs	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	8bfb      	ldrh	r3, [r7, #30]
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <initField+0x110>)
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	23d8      	movs	r3, #216	; 0xd8
 8002698:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <initField+0x104>)
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <initField+0x114>)
 800269c:	f002 fe5a 	bl	8005354 <__M_Error>
                                    ++fieldNumber_readed;
                                    (*fieldNumber) = fieldNumber_readed;
                                    return ENTITY_OK;
                                }, M_EMPTY, M_EMPTY, "initField: fieldNumber: &d,  is too long than allocated fields_count: %d", fieldNumber_readed, fields_count);

    return ENTITY_ERROR;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	0800d91c 	.word	0x0800d91c
 80026b0:	0800d4bc 	.word	0x0800d4bc
 80026b4:	0800d8e0 	.word	0x0800d8e0
 80026b8:	0800f478 	.word	0x0800f478
 80026bc:	0800d980 	.word	0x0800d980
 80026c0:	0800d938 	.word	0x0800d938

080026c4 <initFieldArray>:

/// init field-array
int initFieldArray(Entity* const entityInst, reg* const fieldNumber, TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const int arrayLen, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr, const int startNum)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b094      	sub	sp, #80	; 0x50
 80026c8:	af04      	add	r7, sp, #16
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL) || (arrayLen == 0), M_EMPTY, return ENTITY_ERROR, "initFieldArray: No valid input");
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <initFieldArray+0x20>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <initFieldArray+0x20>
 80026de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d115      	bne.n	8002710 <initFieldArray+0x4c>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <initFieldArray+0x32>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <initFieldArray+0x32>
 80026f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <initFieldArray+0x36>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <initFieldArray+0x38>
 80026fa:	2300      	movs	r3, #0
 80026fc:	b2d9      	uxtb	r1, r3
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <initFieldArray+0x1c4>)
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	23fe      	movs	r3, #254	; 0xfe
 8002704:	4a61      	ldr	r2, [pc, #388]	; (800288c <initFieldArray+0x1c8>)
 8002706:	4862      	ldr	r0, [pc, #392]	; (8002890 <initFieldArray+0x1cc>)
 8002708:	f002 fe24 	bl	8005354 <__M_Error>
 800270c:	2300      	movs	r3, #0
 800270e:	e0b7      	b.n	8002880 <initFieldArray+0x1bc>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && (type != REG_TYPE || type != SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initFieldArray: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d022      	beq.n	8002760 <initFieldArray+0x9c>
 800271a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800271e:	2b10      	cmp	r3, #16
 8002720:	d103      	bne.n	800272a <initFieldArray+0x66>
 8002722:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002726:	2b11      	cmp	r3, #17
 8002728:	d01a      	beq.n	8002760 <initFieldArray+0x9c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <initFieldArray+0x84>
 8002734:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002738:	2b10      	cmp	r3, #16
 800273a:	d103      	bne.n	8002744 <initFieldArray+0x80>
 800273c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002740:	2b11      	cmp	r3, #17
 8002742:	d001      	beq.n	8002748 <initFieldArray+0x84>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <initFieldArray+0x86>
 8002748:	2300      	movs	r3, #0
 800274a:	b2d9      	uxtb	r1, r3
 800274c:	4b51      	ldr	r3, [pc, #324]	; (8002894 <initFieldArray+0x1d0>)
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f240 1301 	movw	r3, #257	; 0x101
 8002754:	4a4d      	ldr	r2, [pc, #308]	; (800288c <initFieldArray+0x1c8>)
 8002756:	4850      	ldr	r0, [pc, #320]	; (8002898 <initFieldArray+0x1d4>)
 8002758:	f002 fdfc 	bl	8005354 <__M_Error>
 800275c:	2300      	movs	r3, #0
 800275e:	e08f      	b.n	8002880 <initFieldArray+0x1bc>
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	891b      	ldrh	r3, [r3, #8]
 800276a:	867b      	strh	r3, [r7, #50]	; 0x32

	reg typeLen;
#ifdef USE_ENTITY_POINTER
	if(bitFlags & ENTITY_POINTER_MSK) {
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <initFieldArray+0xb8>
		typeLen = sizeof(reg);
 8002776:	2304      	movs	r3, #4
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
 800277a:	e00c      	b.n	8002796 <initFieldArray+0xd2>
	} else {
#endif /* USE_ENTITY_REGISTER */
		typeLen = getMYCTypeLen(type);
 800277c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    if(type < TYPE_ARRAY_LENGTH) {
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	2b11      	cmp	r3, #17
 8002786:	d804      	bhi.n	8002792 <initFieldArray+0xce>
        return typeLengthMappingArray[type];
 8002788:	4a44      	ldr	r2, [pc, #272]	; (800289c <initFieldArray+0x1d8>)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002790:	e000      	b.n	8002794 <initFieldArray+0xd0>
    return 0;
 8002792:	2300      	movs	r3, #0
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef USE_ENTITY_POINTER
	}
#endif /* USE_ENTITY_REGISTER */

    const reg need_count = (fieldNumber_readed + arrayLen);
 8002796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800279a:	4413      	add	r3, r2
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    M_Assert_BreakSaveCheck(fields_count < need_count, M_EMPTY, return ENTITY_ERROR, "initFieldArray: need fields Number: &d,  is too long than allocated fields_count: %d", need_count, fields_count);
 800279e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d915      	bls.n	80027d2 <initFieldArray+0x10e>
 80027a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	429a      	cmp	r2, r3
 80027ac:	bf8c      	ite	hi
 80027ae:	2301      	movhi	r3, #1
 80027b0:	2300      	movls	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <initFieldArray+0x1dc>)
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	f240 1313 	movw	r3, #275	; 0x113
 80027c6:	4a31      	ldr	r2, [pc, #196]	; (800288c <initFieldArray+0x1c8>)
 80027c8:	4836      	ldr	r0, [pc, #216]	; (80028a4 <initFieldArray+0x1e0>)
 80027ca:	f002 fdc3 	bl	8005354 <__M_Error>
 80027ce:	2300      	movs	r3, #0
 80027d0:	e056      	b.n	8002880 <initFieldArray+0x1bc>

	char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	f107 0318 	add.w	r3, r7, #24
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	721a      	strb	r2, [r3, #8]
	bitFlags |= ENTITY_ARRAY_MSK;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < arrayLen; ++i) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	e033      	b.n	8002858 <initFieldArray+0x194>
		EntityField* const    field = &entityInst->fields[fieldNumber_readed];
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f6:	015b      	lsls	r3, r3, #5
 80027f8:	4413      	add	r3, r2
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28

		field->bitFlags   = bitFlags;
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	611a      	str	r2, [r3, #16]
		field->shift      = shift;
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	615a      	str	r2, [r3, #20]
		field->type       = type;
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800280e:	761a      	strb	r2, [r3, #24]

		if(descr) {
 8002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <initFieldArray+0x166>
			sprintf(str, "%s%d", descr, (i + startNum));
 8002816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281a:	4413      	add	r3, r2
 800281c:	f107 0014 	add.w	r0, r7, #20
 8002820:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002822:	4921      	ldr	r1, [pc, #132]	; (80028a8 <initFieldArray+0x1e4>)
 8002824:	f007 faa2 	bl	8009d6c <siprintf>
 8002828:	e008      	b.n	800283c <initFieldArray+0x178>
		} else {
			sprintf(str, ":[%d]", (i + startNum));
 800282a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800282c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282e:	441a      	add	r2, r3
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	491d      	ldr	r1, [pc, #116]	; (80028ac <initFieldArray+0x1e8>)
 8002836:	4618      	mov	r0, r3
 8002838:	f007 fa98 	bl	8009d6c <siprintf>
		}
		memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	3319      	adds	r3, #25
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	601a      	str	r2, [r3, #0]
		//MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);

		shift += typeLen;
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	4413      	add	r3, r2
 800284a:	603b      	str	r3, [r7, #0]
		++fieldNumber_readed;
 800284c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284e:	3301      	adds	r3, #1
 8002850:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = 0; i < arrayLen; ++i) {
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	3301      	adds	r3, #1
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
 8002858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285c:	429a      	cmp	r2, r3
 800285e:	dbc7      	blt.n	80027f0 <initFieldArray+0x12c>
	}

	if(field_ptr) {
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <initFieldArray+0x1b4>
		memset(field_ptr, 0, (arrayLen * typeLen));
 8002866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	461a      	mov	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002874:	f006 f940 	bl	8008af8 <memset>
	}

	(*fieldNumber) = fieldNumber_readed;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800287c:	601a      	str	r2, [r3, #0]
	return ENTITY_OK;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3740      	adds	r7, #64	; 0x40
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	0800da18 	.word	0x0800da18
 800288c:	0800d4bc 	.word	0x0800d4bc
 8002890:	0800d9cc 	.word	0x0800d9cc
 8002894:	0800da84 	.word	0x0800da84
 8002898:	0800da38 	.word	0x0800da38
 800289c:	0800f478 	.word	0x0800f478
 80028a0:	0800dafc 	.word	0x0800dafc
 80028a4:	0800dae0 	.word	0x0800dae0
 80028a8:	0800db54 	.word	0x0800db54
 80028ac:	0800db5c 	.word	0x0800db5c

080028b0 <readEntitiesSizes>:
}

#endif /* USE_ENTITY_PING */

int readEntitiesSizes(u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: No allocated entities or invalid input");
 80028bc:	4b44      	ldr	r3, [pc, #272]	; (80029d0 <readEntitiesSizes+0x120>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <readEntitiesSizes+0x20>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <readEntitiesSizes+0x20>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d116      	bne.n	80028fe <readEntitiesSizes+0x4e>
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <readEntitiesSizes+0x120>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <readEntitiesSizes+0x34>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <readEntitiesSizes+0x34>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <readEntitiesSizes+0x38>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <readEntitiesSizes+0x3a>
 80028e8:	2300      	movs	r3, #0
 80028ea:	b2d9      	uxtb	r1, r3
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <readEntitiesSizes+0x124>)
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	231f      	movs	r3, #31
 80028f2:	4a39      	ldr	r2, [pc, #228]	; (80029d8 <readEntitiesSizes+0x128>)
 80028f4:	4839      	ldr	r0, [pc, #228]	; (80029dc <readEntitiesSizes+0x12c>)
 80028f6:	f002 fd2d 	bl	8005354 <__M_Error>
 80028fa:	2300      	movs	r3, #0
 80028fc:	e064      	b.n	80029c8 <readEntitiesSizes+0x118>
    ENTITY_DBG_ASSERT_BUF(maxOutBufferSize < (8 + TYPE_ARRAY_LENGTH), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: sizes read more than buffer");
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b19      	cmp	r3, #25
 8002902:	d80f      	bhi.n	8002924 <readEntitiesSizes+0x74>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b19      	cmp	r3, #25
 8002908:	bf94      	ite	ls
 800290a:	2301      	movls	r3, #1
 800290c:	2300      	movhi	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	4619      	mov	r1, r3
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <readEntitiesSizes+0x130>)
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2320      	movs	r3, #32
 8002918:	4a2f      	ldr	r2, [pc, #188]	; (80029d8 <readEntitiesSizes+0x128>)
 800291a:	4832      	ldr	r0, [pc, #200]	; (80029e4 <readEntitiesSizes+0x134>)
 800291c:	f002 fd1a 	bl	8005354 <__M_Error>
 8002920:	2300      	movs	r3, #0
 8002922:	e051      	b.n	80029c8 <readEntitiesSizes+0x118>

    reg pos = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

    // main sizes -----------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_OK;                              // OK byte
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	617a      	str	r2, [r7, #20]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	617a      	str	r2, [r7, #20]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	2204      	movs	r2, #4
 8002942:	701a      	strb	r2, [r3, #0]

    // entities sizes -------------------------------------------------------------------------------------
    outputData[pos++] = ENTITIES_SIZEOF;                        // entities count sizeof
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	617a      	str	r2, [r7, #20]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4413      	add	r3, r2
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]

    // fields sizes --------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_FIELD_SIZEOF;                    // fields count sizeof
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	617a      	str	r2, [r7, #20]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]

    outputData[pos++] = SIZEOF_STRUCT(EntityField, bitFlags);   // fields bitFlags sizeof
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	617a      	str	r2, [r7, #20]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	2204      	movs	r2, #4
 800296c:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = SIZEOF_STRUCT(EntityField, shift);      // fields shift sizeof
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	617a      	str	r2, [r7, #20]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	2204      	movs	r2, #4
 800297a:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = 1;                                      // fields type sizeof
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	617a      	str	r2, [r7, #20]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]

    // system types sizes --------------------------------------------------------------------------------
    outputData[pos++] = TYPE_ARRAY_LENGTH;                      // size array types
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	617a      	str	r2, [r7, #20]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	2212      	movs	r2, #18
 8002996:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	e00d      	b.n	80029ba <readEntitiesSizes+0x10a>
        outputData[pos++] = typeLengthMappingArray[i];          // copy array types
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <readEntitiesSizes+0x138>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	617a      	str	r2, [r7, #20]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	b2ca      	uxtb	r2, r1
 80029b2:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	3301      	adds	r3, #1
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b11      	cmp	r3, #17
 80029be:	d9ee      	bls.n	800299e <readEntitiesSizes+0xee>
    }

    (*size) = pos;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000290 	.word	0x20000290
 80029d4:	0800dfa4 	.word	0x0800dfa4
 80029d8:	0800df00 	.word	0x0800df00
 80029dc:	0800df34 	.word	0x0800df34
 80029e0:	0800e00c 	.word	0x0800e00c
 80029e4:	0800dfe0 	.word	0x0800dfe0
 80029e8:	0800f478 	.word	0x0800f478

080029ec <readEntitiesDescriptions>:

int readEntitiesDescriptions(const TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber, TYPEOF_STRUCT(EntityInfo, entities_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[0].descr, ... entities[entities_count].descr}
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08e      	sub	sp, #56	; 0x38
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (2 + ENTITIES_SIZEOF)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesDescriptions: No allocated entities or invalid input");
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <readEntitiesDescriptions+0x160>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <readEntitiesDescriptions+0x28>
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d905      	bls.n	8002a14 <readEntitiesDescriptions+0x28>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <readEntitiesDescriptions+0x28>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d119      	bne.n	8002a48 <readEntitiesDescriptions+0x5c>
 8002a14:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <readEntitiesDescriptions+0x160>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <readEntitiesDescriptions+0x42>
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d905      	bls.n	8002a2e <readEntitiesDescriptions+0x42>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <readEntitiesDescriptions+0x42>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <readEntitiesDescriptions+0x46>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <readEntitiesDescriptions+0x48>
 8002a32:	2300      	movs	r3, #0
 8002a34:	b2d9      	uxtb	r1, r3
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <readEntitiesDescriptions+0x164>)
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2340      	movs	r3, #64	; 0x40
 8002a3c:	4a45      	ldr	r2, [pc, #276]	; (8002b54 <readEntitiesDescriptions+0x168>)
 8002a3e:	4846      	ldr	r0, [pc, #280]	; (8002b58 <readEntitiesDescriptions+0x16c>)
 8002a40:	f002 fc88 	bl	8005354 <__M_Error>
 8002a44:	2300      	movs	r3, #0
 8002a46:	e07d      	b.n	8002b44 <readEntitiesDescriptions+0x158>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002a48:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <readEntitiesDescriptions+0x160>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24

    if(startEntityNumber < entities_count) {
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d26e      	bcs.n	8002b34 <readEntitiesDescriptions+0x148>
        reg pos = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c

        outputData[pos++] = ENTITY_OK;
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	2204      	movs	r2, #4
 8002a74:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(EntityInfo, entities_count) tmp = (entities_count - startEntityNumber);
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	623b      	str	r3, [r7, #32]
        len = MIN(tmp, len);
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	4293      	cmp	r3, r2
 8002a84:	bf28      	it	cs
 8002a86:	4613      	movcs	r3, r2
 8002a88:	60bb      	str	r3, [r7, #8]
        //#else
        //        len &= 0xFFFFUL;
        //        ENTITY_BYTE_CPY(ENTITIES_SIZEOF, (u8*)&len, &outputData[pos]);
        //        pos += ENTITIES_SIZEOF;
        //#endif /* MAX_NUBER_OF_ENTITIES < 256 */
        outputData[pos++] = (u8)(len & 0xFFU); // support on old version (this is glitch!!!)
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
        //---------------------------================================----------------------------------==================================-----------------------------------================================---------------------------===========================---------------------------=========================------------------------
        len += startEntityNumber;
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60bb      	str	r3, [r7, #8]

        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa6:	e03c      	b.n	8002b22 <readEntitiesDescriptions+0x136>

            ENTITY_DBG_ASSERT_BUF( (pos + ENTITY_DESCRIPTION_SIZE) > maxOutBufferSize, M_EMPTY, {
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	3304      	adds	r3, #4
 8002aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d210      	bcs.n	8002ad4 <readEntitiesDescriptions+0xe8>
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	bf34      	ite	cc
 8002abc:	2301      	movcc	r3, #1
 8002abe:	2300      	movcs	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <readEntitiesDescriptions+0x170>)
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	235a      	movs	r3, #90	; 0x5a
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <readEntitiesDescriptions+0x168>)
 8002acc:	4824      	ldr	r0, [pc, #144]	; (8002b60 <readEntitiesDescriptions+0x174>)
 8002ace:	f002 fc41 	bl	8005354 <__M_Error>
 8002ad2:	e030      	b.n	8002b36 <readEntitiesDescriptions+0x14a>
                                       goto error;
                                   }, "readEntitiesDescriptions: description read size more than buffer");


            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)entityInfo.entities[i]->descr, &outputData[pos]);
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <readEntitiesDescriptions+0x160>)
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1d1a      	adds	r2, r3, #4
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	440b      	add	r3, r1
 8002ae8:	2104      	movs	r1, #4
 8002aea:	61f9      	str	r1, [r7, #28]
 8002aec:	61ba      	str	r2, [r7, #24]
 8002aee:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00d      	beq.n	8002b12 <readEntitiesDescriptions+0x126>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d104      	bne.n	8002b06 <readEntitiesDescriptions+0x11a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e006      	b.n	8002b14 <readEntitiesDescriptions+0x128>
    default: memcpy(to, from, n); break;
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	69b9      	ldr	r1, [r7, #24]
 8002b0a:	6978      	ldr	r0, [r7, #20]
 8002b0c:	f005 ffcc 	bl	8008aa8 <memcpy>
 8002b10:	e000      	b.n	8002b14 <readEntitiesDescriptions+0x128>
    case 0: break;
 8002b12:	bf00      	nop
}
 8002b14:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	3304      	adds	r3, #4
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	3301      	adds	r3, #1
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3be      	bcc.n	8002aa8 <readEntitiesDescriptions+0xbc>
        }

        (*size) = pos;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2e:	601a      	str	r2, [r3, #0]
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <readEntitiesDescriptions+0x158>
        goto error;
 8002b34:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3730      	adds	r7, #48	; 0x30
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000290 	.word	0x20000290
 8002b50:	0800e0dc 	.word	0x0800e0dc
 8002b54:	0800df00 	.word	0x0800df00
 8002b58:	0800e03c 	.word	0x0800e03c
 8002b5c:	0800e154 	.word	0x0800e154
 8002b60:	0800e120 	.word	0x0800e120

08002b64 <readEntityFields>:

int readEntityFields(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) startFieldNumber, TYPEOF_STRUCT(Entity, fields_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[entityNum].fields[startFieldNum], ... entities[num].fields[entities[num].fields_count]}
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b096      	sub	sp, #88	; 0x58
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	4613      	mov	r3, r2
 8002b74:	813b      	strh	r3, [r7, #8]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITY_FIELD_SIZEOF << 1))) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntityFields: No allocated entities or invalid input");
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <readEntityFields+0x228>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <readEntityFields+0x2c>
 8002b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d905      	bls.n	8002b90 <readEntityFields+0x2c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <readEntityFields+0x2c>
 8002b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d119      	bne.n	8002bc4 <readEntityFields+0x60>
 8002b90:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <readEntityFields+0x228>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <readEntityFields+0x46>
 8002b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d905      	bls.n	8002baa <readEntityFields+0x46>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <readEntityFields+0x46>
 8002ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <readEntityFields+0x4a>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <readEntityFields+0x4c>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	b2d9      	uxtb	r1, r3
 8002bb2:	4b77      	ldr	r3, [pc, #476]	; (8002d90 <readEntityFields+0x22c>)
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2376      	movs	r3, #118	; 0x76
 8002bb8:	4a76      	ldr	r2, [pc, #472]	; (8002d94 <readEntityFields+0x230>)
 8002bba:	4877      	ldr	r0, [pc, #476]	; (8002d98 <readEntityFields+0x234>)
 8002bbc:	f002 fbca 	bl	8005354 <__M_Error>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e0df      	b.n	8002d84 <readEntityFields+0x220>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002bc4:	4b71      	ldr	r3, [pc, #452]	; (8002d8c <readEntityFields+0x228>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	647b      	str	r3, [r7, #68]	; 0x44
    const Entity* const entity = entityInfo.entities[entityNumber];
 8002bca:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <readEntityFields+0x228>)
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40
    const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 8002bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bda:	891b      	ldrh	r3, [r3, #8]
 8002bdc:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be2:	429a      	cmp	r2, r3
 8002be4:	f080 80c6 	bcs.w	8002d74 <readEntityFields+0x210>
 8002be8:	897a      	ldrh	r2, [r7, #10]
 8002bea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f080 80c1 	bcs.w	8002d74 <readEntityFields+0x210>
        reg pos = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	64fb      	str	r3, [r7, #76]	; 0x4c

        outputData[pos++] = ENTITY_OK;
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]

#if (MAX_NUBER_OF_FIELDS < 256U)
        outputData[pos++] = (u8)(startFieldNumber & 0xFFU);                             /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	897a      	ldrh	r2, [r7, #10]
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(Entity, fields_count) tmp = (fields_count - startFieldNumber);
 8002c14:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
        len = MIN(tmp, len);
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf28      	it	cs
 8002c24:	4613      	movcs	r3, r2
 8002c26:	813b      	strh	r3, [r7, #8]
        outputData[pos++] = (u8)(len & 0xFFU);
 8002c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	893a      	ldrh	r2, [r7, #8]
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]
        ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, (u8*)&len, &outputData[pos]);
        pos += ENTITY_FIELD_SIZEOF;

#endif /* MAX_NUBER_OF_FIELDS < 256 */

        len += startFieldNumber;
 8002c38:	893a      	ldrh	r2, [r7, #8]
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	813b      	strh	r3, [r7, #8]

        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002c40:	897b      	ldrh	r3, [r7, #10]
 8002c42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002c46:	e089      	b.n	8002d5c <readEntityFields+0x1f8>
            const EntityField* const field = &entity->fields[i];
 8002c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c50:	015b      	lsls	r3, r3, #5
 8002c52:	4413      	add	r3, r2
 8002c54:	63bb      	str	r3, [r7, #56]	; 0x38

            ENTITY_DBG_ASSERT_BUF( ((pos + (sizeof(field->bitFlags) + sizeof(field->shift) + 1 + ENTITY_DESCRIPTION_SIZE)) > maxOutBufferSize), M_EMPTY, {
 8002c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c58:	330d      	adds	r3, #13
 8002c5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d210      	bcs.n	8002c82 <readEntityFields+0x11e>
 8002c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c62:	330d      	adds	r3, #13
 8002c64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	bf34      	ite	cc
 8002c6a:	2301      	movcc	r3, #1
 8002c6c:	2300      	movcs	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <readEntityFields+0x238>)
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	239a      	movs	r3, #154	; 0x9a
 8002c78:	4a46      	ldr	r2, [pc, #280]	; (8002d94 <readEntityFields+0x230>)
 8002c7a:	4849      	ldr	r0, [pc, #292]	; (8002da0 <readEntityFields+0x23c>)
 8002c7c:	f002 fb6a 	bl	8005354 <__M_Error>
 8002c80:	e079      	b.n	8002d76 <readEntityFields+0x212>

            //            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
            //            pos += ENTITY_DESCRIPTION_SIZE;
            //-----------------=============================-----------------------------------===========================-----------------------------=================================-------------------------------===========================-------------------======================
            // this is glitch
            ENTITY_BYTE_CPY(1, (u8 *)&field->bitFlags, &outputData[pos]);
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	f103 0210 	add.w	r2, r3, #16
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	440b      	add	r3, r1
 8002c8e:	2101      	movs	r1, #1
 8002c90:	61f9      	str	r1, [r7, #28]
 8002c92:	61ba      	str	r2, [r7, #24]
 8002c94:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00d      	beq.n	8002cb8 <readEntityFields+0x154>
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d104      	bne.n	8002cac <readEntityFields+0x148>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e006      	b.n	8002cba <readEntityFields+0x156>
    default: memcpy(to, from, n); break;
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f005 fef9 	bl	8008aa8 <memcpy>
 8002cb6:	e000      	b.n	8002cba <readEntityFields+0x156>
    case 0: break;
 8002cb8:	bf00      	nop
}
 8002cba:	bf00      	nop
            pos += 1;
 8002cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	64fb      	str	r3, [r7, #76]	; 0x4c

            ENTITY_BYTE_CPY(2, (u8 *)&field->shift, &outputData[pos]);
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	f103 0214 	add.w	r2, r3, #20
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ccc:	440b      	add	r3, r1
 8002cce:	2102      	movs	r1, #2
 8002cd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cd2:	627a      	str	r2, [r7, #36]	; 0x24
 8002cd4:	623b      	str	r3, [r7, #32]
    switch (n) {
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <readEntityFields+0x194>
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d104      	bne.n	8002cec <readEntityFields+0x188>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e006      	b.n	8002cfa <readEntityFields+0x196>
    default: memcpy(to, from, n); break;
 8002cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cf0:	6a38      	ldr	r0, [r7, #32]
 8002cf2:	f005 fed9 	bl	8008aa8 <memcpy>
 8002cf6:	e000      	b.n	8002cfa <readEntityFields+0x196>
    case 0: break;
 8002cf8:	bf00      	nop
}
 8002cfa:	bf00      	nop
            pos += 2;
 8002cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfe:	3302      	adds	r3, #2
 8002d00:	64fb      	str	r3, [r7, #76]	; 0x4c

            outputData[pos++] = (field->type & 0xFFU);
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d0e:	7e12      	ldrb	r2, [r2, #24]
 8002d10:	701a      	strb	r2, [r3, #0]

            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	f103 0219 	add.w	r2, r3, #25
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1c:	440b      	add	r3, r1
 8002d1e:	2104      	movs	r1, #4
 8002d20:	6379      	str	r1, [r7, #52]	; 0x34
 8002d22:	633a      	str	r2, [r7, #48]	; 0x30
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <readEntityFields+0x1e4>
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d104      	bne.n	8002d3c <readEntityFields+0x1d8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e006      	b.n	8002d4a <readEntityFields+0x1e6>
    default: memcpy(to, from, n); break;
 8002d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d42:	f005 feb1 	bl	8008aa8 <memcpy>
 8002d46:	e000      	b.n	8002d4a <readEntityFields+0x1e6>
    case 0: break;
 8002d48:	bf00      	nop
}
 8002d4a:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4e:	3304      	adds	r3, #4
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002d52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d56:	3301      	adds	r3, #1
 8002d58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002d5c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	f4ff af70 	bcc.w	8002c48 <readEntityFields+0xe4>
            //------------------------------=========================================--------------------------------------===================================--------------------------------------=============================---------------------------------========================

        }

        (*size) = pos;
 8002d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d6c:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002d6e:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e007      	b.n	8002d84 <readEntityFields+0x220>
        goto error;
 8002d74:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3750      	adds	r7, #80	; 0x50
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000290 	.word	0x20000290
 8002d90:	0800e244 	.word	0x0800e244
 8002d94:	0800df00 	.word	0x0800df00
 8002d98:	0800e198 	.word	0x0800e198
 8002d9c:	0800e2ec 	.word	0x0800e2ec
 8002da0:	0800e280 	.word	0x0800e280

08002da4 <readFieldValue>:
/* ******************************************************************************************************************
 * READ one field value
 *
 */
int readFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{ //send {0x01 , prt + 0, ... , ptr + getTypeLen(entities[no].fields[fieldNo].type)}
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b0a5      	sub	sp, #148	; 0x94
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	460b      	mov	r3, r1
 8002db2:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 2) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readFieldValue: No allocated entities or invalid input");
 8002db4:	4b93      	ldr	r3, [pc, #588]	; (8003004 <readFieldValue+0x260>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <readFieldValue+0x2c>
 8002dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d905      	bls.n	8002dd0 <readFieldValue+0x2c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <readFieldValue+0x2c>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11a      	bne.n	8002e06 <readFieldValue+0x62>
 8002dd0:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <readFieldValue+0x260>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <readFieldValue+0x48>
 8002dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d905      	bls.n	8002dec <readFieldValue+0x48>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <readFieldValue+0x48>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <readFieldValue+0x4c>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <readFieldValue+0x4e>
 8002df0:	2300      	movs	r3, #0
 8002df2:	b2d9      	uxtb	r1, r3
 8002df4:	4b84      	ldr	r3, [pc, #528]	; (8003008 <readFieldValue+0x264>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	23d0      	movs	r3, #208	; 0xd0
 8002dfa:	4a84      	ldr	r2, [pc, #528]	; (800300c <readFieldValue+0x268>)
 8002dfc:	4884      	ldr	r0, [pc, #528]	; (8003010 <readFieldValue+0x26c>)
 8002dfe:	f002 faa9 	bl	8005354 <__M_Error>
 8002e02:	2300      	movs	r3, #0
 8002e04:	e150      	b.n	80030a8 <readFieldValue+0x304>

    Entity*         const       entity  = entityInfo.entities[entityNumber];
 8002e06:	4b7f      	ldr	r3, [pc, #508]	; (8003004 <readFieldValue+0x260>)
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    EntityField*    const       field   = &entity->fields[fieldNumber];
 8002e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	897b      	ldrh	r3, [r7, #10]
 8002e1e:	015b      	lsls	r3, r3, #5
 8002e20:	4413      	add	r3, r2
 8002e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8002e26:	4b77      	ldr	r3, [pc, #476]	; (8003004 <readFieldValue+0x260>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8002e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e30:	891b      	ldrh	r3, [r3, #8]
 8002e32:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f080 812c 	bcs.w	8003098 <readFieldValue+0x2f4>
 8002e40:	897a      	ldrh	r2, [r7, #10]
 8002e42:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e46:	429a      	cmp	r2, r3
 8002e48:	f080 8126 	bcs.w	8003098 <readFieldValue+0x2f4>
        const u8        type    = field->type;
 8002e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e50:	7e1b      	ldrb	r3, [r3, #24]
 8002e52:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
        const reg       typeLen = getMYCTypeLen(type);
 8002e56:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002e5a:	667b      	str	r3, [r7, #100]	; 0x64
    if(type < TYPE_ARRAY_LENGTH) {
 8002e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5e:	2b11      	cmp	r3, #17
 8002e60:	d804      	bhi.n	8002e6c <readFieldValue+0xc8>
        return typeLengthMappingArray[type];
 8002e62:	4a6c      	ldr	r2, [pc, #432]	; (8003014 <readFieldValue+0x270>)
 8002e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	e000      	b.n	8002e6e <readFieldValue+0xca>
    return 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	677b      	str	r3, [r7, #116]	; 0x74
        void*     ptr     = (entity->pointer + field->shift);
 8002e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	673b      	str	r3, [r7, #112]	; 0x70

        reg pos = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	66fb      	str	r3, [r7, #108]	; 0x6c

        outputData[pos++] = ENTITY_OK;
 8002e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = type;    /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8002ea0:	701a      	strb	r2, [r3, #0]

        ENTITY_DBG_ASSERT_BUF(((pos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8002ea2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d212      	bcs.n	8002ed6 <readFieldValue+0x132>
 8002eb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	bf34      	ite	cc
 8002ebe:	2301      	movcc	r3, #1
 8002ec0:	2300      	movcs	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4b54      	ldr	r3, [pc, #336]	; (8003018 <readFieldValue+0x274>)
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	23e2      	movs	r3, #226	; 0xe2
 8002ecc:	4a4f      	ldr	r2, [pc, #316]	; (800300c <readFieldValue+0x268>)
 8002ece:	4853      	ldr	r0, [pc, #332]	; (800301c <readFieldValue+0x278>)
 8002ed0:	f002 fa40 	bl	8005354 <__M_Error>
 8002ed4:	e0e1      	b.n	800309a <readFieldValue+0x2f6>
                                  goto error;
                              }, "readFieldValue: field read size more than buffer");

        proceedReadEntity(field->bitFlags, ptr, &outputData[pos], typeLen);
 8002ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee0:	440b      	add	r3, r1
 8002ee2:	663a      	str	r2, [r7, #96]	; 0x60
 8002ee4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ee6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ee8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eec:	657b      	str	r3, [r7, #84]	; 0x54
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d030      	beq.n	8002f5a <readFieldValue+0x1b6>
 8002ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d02b      	beq.n	8002f5a <readFieldValue+0x1b6>
                                    	if(ptr) {
 8002f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d022      	beq.n	8002f4e <readFieldValue+0x1aa>
                                    		const void* reg_ptr_from = (const void*) (* REG_TYPE_DC(ptr));
 8002f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	653b      	str	r3, [r7, #80]	; 0x50
                                    		if(reg_ptr_from) {
 8002f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01c      	beq.n	8002f4e <readFieldValue+0x1aa>
												const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 8002f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f1e:	f107 0318 	add.w	r3, r7, #24
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f26:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 8002f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <readFieldValue+0x1a6>
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d104      	bne.n	8002f3e <readFieldValue+0x19a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	e006      	b.n	8002f4c <readFieldValue+0x1a8>
    default: memcpy(to, from, n); break;
 8002f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002f42:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002f44:	f005 fdb0 	bl	8008aa8 <memcpy>
 8002f48:	e000      	b.n	8002f4c <readFieldValue+0x1a8>
    case 0: break;
 8002f4a:	bf00      	nop
}
 8002f4c:	e089      	b.n	8003062 <readFieldValue+0x2be>
                                        memset(outputData, 0, sizeof(reg));
 8002f4e:	2204      	movs	r2, #4
 8002f50:	2100      	movs	r1, #0
 8002f52:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002f54:	f005 fdd0 	bl	8008af8 <memset>
 8002f58:	e083      	b.n	8003062 <readFieldValue+0x2be>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8002f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d021      	beq.n	8002fa8 <readFieldValue+0x204>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 8002f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <readFieldValue+0x1cc>
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e000      	b.n	8002f72 <readFieldValue+0x1ce>
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	2304      	movs	r3, #4
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f80:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00d      	beq.n	8002fa4 <readFieldValue+0x200>
 8002f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d104      	bne.n	8002f98 <readFieldValue+0x1f4>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e006      	b.n	8002fa6 <readFieldValue+0x202>
    default: memcpy(to, from, n); break;
 8002f98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f9e:	f005 fd83 	bl	8008aa8 <memcpy>
 8002fa2:	e000      	b.n	8002fa6 <readFieldValue+0x202>
    case 0: break;
 8002fa4:	bf00      	nop
}
 8002fa6:	e05c      	b.n	8003062 <readFieldValue+0x2be>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8002fa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d036      	beq.n	8003020 <readFieldValue+0x27c>
                                    	if(ptr) {
 8002fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01f      	beq.n	8002ff8 <readFieldValue+0x254>
                                    		const void* reg_ptr_from = (const void *)(* REG_TYPE_DC(ptr));
 8002fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
											if(reg_ptr_from) {
 8002fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d019      	beq.n	8002ff8 <readFieldValue+0x254>
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <readFieldValue+0x24e>
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d104      	bne.n	8002fe6 <readFieldValue+0x242>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	781a      	ldrb	r2, [r3, #0]
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e006      	b.n	8002ff4 <readFieldValue+0x250>
    default: memcpy(to, from, n); break;
 8002fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fec:	f005 fd5c 	bl	8008aa8 <memcpy>
 8002ff0:	e000      	b.n	8002ff4 <readFieldValue+0x250>
    case 0: break;
 8002ff2:	bf00      	nop
}
 8002ff4:	bf00      	nop
												return;
 8002ff6:	e034      	b.n	8003062 <readFieldValue+0x2be>
                                        memset(outputData, 0, typeLen);
 8002ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002ffe:	f005 fd7b 	bl	8008af8 <memset>
 8003002:	e02e      	b.n	8003062 <readFieldValue+0x2be>
 8003004:	20000290 	.word	0x20000290
 8003008:	0800e3ac 	.word	0x0800e3ac
 800300c:	0800df00 	.word	0x0800df00
 8003010:	0800e320 	.word	0x0800e320
 8003014:	0800f478 	.word	0x0800f478
 8003018:	0800e40c 	.word	0x0800e40c
 800301c:	0800e3e4 	.word	0x0800e3e4
                                    	if(ptr) {
 8003020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d018      	beq.n	8003058 <readFieldValue+0x2b4>
 8003026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800302c:	623b      	str	r3, [r7, #32]
 800302e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003030:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00d      	beq.n	8003054 <readFieldValue+0x2b0>
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2b01      	cmp	r3, #1
 800303c:	d104      	bne.n	8003048 <readFieldValue+0x2a4>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e006      	b.n	8003056 <readFieldValue+0x2b2>
    default: memcpy(to, from, n); break;
 8003048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304a:	6a39      	ldr	r1, [r7, #32]
 800304c:	69f8      	ldr	r0, [r7, #28]
 800304e:	f005 fd2b 	bl	8008aa8 <memcpy>
 8003052:	e000      	b.n	8003056 <readFieldValue+0x2b2>
    case 0: break;
 8003054:	bf00      	nop
}
 8003056:	e004      	b.n	8003062 <readFieldValue+0x2be>
                                    		memset(outputData, 0, typeLen);
 8003058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800305a:	2100      	movs	r1, #0
 800305c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800305e:	f005 fd4b 	bl	8008af8 <memset>


#ifdef USE_ENTITY_READ_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8003062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	66bb      	str	r3, [r7, #104]	; 0x68
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 800306a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <readFieldValue+0x2e0>
            __entityCallback(entity, field, ptr, field->rdCallback.context);
 8003070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8003078:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800307a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800307e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003082:	47a0      	blx	r4
        }
#endif /* USE_ENTITY_READ_CALLBACK */

        pos += typeLen;
 8003084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003088:	4413      	add	r3, r2
 800308a:	66fb      	str	r3, [r7, #108]	; 0x6c
        (*size) = pos;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003090:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003092:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003094:	2301      	movs	r3, #1
 8003096:	e007      	b.n	80030a8 <readFieldValue+0x304>
        goto error;
 8003098:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	378c      	adds	r7, #140	; 0x8c
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd90      	pop	{r4, r7, pc}

080030b0 <readSeveralFieldsValues>:
 * READ several fields values
 *
 */

int readSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b0b7      	sub	sp, #220	; 0xdc
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readSeveralFieldsValues: No allocated entities or invalid input");
 80030be:	4baf      	ldr	r3, [pc, #700]	; (800337c <readSeveralFieldsValues+0x2cc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <readSeveralFieldsValues+0x2e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d908      	bls.n	80030de <readSeveralFieldsValues+0x2e>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <readSeveralFieldsValues+0x2e>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <readSeveralFieldsValues+0x2e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d11d      	bne.n	800311a <readSeveralFieldsValues+0x6a>
 80030de:	4ba7      	ldr	r3, [pc, #668]	; (800337c <readSeveralFieldsValues+0x2cc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <readSeveralFieldsValues+0x4e>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d908      	bls.n	80030fe <readSeveralFieldsValues+0x4e>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <readSeveralFieldsValues+0x4e>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <readSeveralFieldsValues+0x4e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <readSeveralFieldsValues+0x52>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <readSeveralFieldsValues+0x54>
 8003102:	2300      	movs	r3, #0
 8003104:	b2d9      	uxtb	r1, r3
 8003106:	4b9e      	ldr	r3, [pc, #632]	; (8003380 <readSeveralFieldsValues+0x2d0>)
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800310e:	4a9d      	ldr	r2, [pc, #628]	; (8003384 <readSeveralFieldsValues+0x2d4>)
 8003110:	489d      	ldr	r0, [pc, #628]	; (8003388 <readSeveralFieldsValues+0x2d8>)
 8003112:	f002 f91f 	bl	8005354 <__M_Error>
 8003116:	2300      	movs	r3, #0
 8003118:	e21a      	b.n	8003550 <readSeveralFieldsValues+0x4a0>

    const reg inputMsgSize = (*size);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Wpos = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Rpos = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800312c:	4b93      	ldr	r3, [pc, #588]	; (800337c <readSeveralFieldsValues+0x2cc>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8003134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 8003146:	e1a0      	b.n	800348a <readSeveralFieldsValues+0x3da>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    reg Rpos_internal = (*Rpos);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003154:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003158:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800315c:	4413      	add	r3, r2
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003162:	2302      	movs	r3, #2
 8003164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800316c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003170:	f107 0318 	add.w	r3, r7, #24
 8003174:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    switch (n) {
 8003178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d013      	beq.n	80031a8 <readSeveralFieldsValues+0xf8>
 8003180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <readSeveralFieldsValues+0xe6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	e009      	b.n	80031aa <readSeveralFieldsValues+0xfa>
    default: memcpy(to, from, n); break;
 8003196:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800319a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800319e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80031a2:	f005 fc81 	bl	8008aa8 <memcpy>
 80031a6:	e000      	b.n	80031aa <readSeveralFieldsValues+0xfa>
    case 0: break;
 80031a8:	bf00      	nop
}
 80031aa:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	61bb      	str	r3, [r7, #24]
    return entityNumber;
 80031b2:	69bb      	ldr	r3, [r7, #24]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80031b4:	623b      	str	r3, [r7, #32]
    Rpos_internal += ENTITIES_SIZEOF;
 80031b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031ba:	3302      	adds	r3, #2
 80031bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80031c0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031c8:	4413      	add	r3, r2
 80031ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	fieldNumber = *(inputData);
 80031ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    return fieldNumber;
 80031d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80031dc:	83fb      	strh	r3, [r7, #30]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80031de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031e2:	3301      	adds	r3, #1
 80031e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*Rpos) = Rpos_internal;
 80031e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031ee:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 80031f0:	4b62      	ldr	r3, [pc, #392]	; (800337c <readSeveralFieldsValues+0x2cc>)
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 8003200:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	8bfb      	ldrh	r3, [r7, #30]
 8003208:	015b      	lsls	r3, r3, #5
 800320a:	4413      	add	r3, r2
 800320c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 8003210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003214:	891b      	ldrh	r3, [r3, #8]
 8003216:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003220:	429a      	cmp	r2, r3
 8003222:	f240 813f 	bls.w	80034a4 <readSeveralFieldsValues+0x3f4>
 8003226:	8bfb      	ldrh	r3, [r7, #30]
 8003228:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800322c:	429a      	cmp	r2, r3
 800322e:	f240 8139 	bls.w	80034a4 <readSeveralFieldsValues+0x3f4>

            const reg typeLen = getMYCTypeLen(field->type);
 8003232:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003236:	7e1b      	ldrb	r3, [r3, #24]
 8003238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(type < TYPE_ARRAY_LENGTH) {
 800323c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003240:	2b11      	cmp	r3, #17
 8003242:	d805      	bhi.n	8003250 <readSeveralFieldsValues+0x1a0>
        return typeLengthMappingArray[type];
 8003244:	4a51      	ldr	r2, [pc, #324]	; (800338c <readSeveralFieldsValues+0x2dc>)
 8003246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324e:	e000      	b.n	8003252 <readSeveralFieldsValues+0x1a2>
    return 0;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8003256:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800325a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800325e:	4413      	add	r3, r2
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d214      	bcs.n	8003290 <readSeveralFieldsValues+0x1e0>
 8003266:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800326a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800326e:	4413      	add	r3, r2
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	bf34      	ite	cc
 8003276:	2301      	movcc	r3, #1
 8003278:	2300      	movcs	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	4619      	mov	r1, r3
 800327e:	4b44      	ldr	r3, [pc, #272]	; (8003390 <readSeveralFieldsValues+0x2e0>)
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	f240 1321 	movw	r3, #289	; 0x121
 8003286:	4a3f      	ldr	r2, [pc, #252]	; (8003384 <readSeveralFieldsValues+0x2d4>)
 8003288:	4842      	ldr	r0, [pc, #264]	; (8003394 <readSeveralFieldsValues+0x2e4>)
 800328a:	f002 f863 	bl	8005354 <__M_Error>
 800328e:	e10a      	b.n	80034a6 <readSeveralFieldsValues+0x3f6>
                                      goto error;
                                  }, "readSeveralFieldsValues: field size more than buffer");

            ptr = (entity->pointer + field->shift);
 8003290:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	4413      	add	r3, r2
 800329e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 80032a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032ae:	440b      	add	r3, r1
 80032b0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80032b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032c2:	67bb      	str	r3, [r7, #120]	; 0x78
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80032c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d033      	beq.n	8003338 <readSeveralFieldsValues+0x288>
 80032d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02d      	beq.n	8003338 <readSeveralFieldsValues+0x288>
                                    	if(ptr) {
 80032dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d023      	beq.n	800332c <readSeveralFieldsValues+0x27c>
                                    		const void* reg_ptr_from = (const void*) (* REG_TYPE_DC(ptr));
 80032e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	677b      	str	r3, [r7, #116]	; 0x74
                                    		if(reg_ptr_from) {
 80032ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01c      	beq.n	800332c <readSeveralFieldsValues+0x27c>
												const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 80032f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	2304      	movs	r3, #4
 80032fa:	673b      	str	r3, [r7, #112]	; 0x70
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003304:	66bb      	str	r3, [r7, #104]	; 0x68
    switch (n) {
 8003306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <readSeveralFieldsValues+0x278>
 800330c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800330e:	2b01      	cmp	r3, #1
 8003310:	d104      	bne.n	800331c <readSeveralFieldsValues+0x26c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e006      	b.n	800332a <readSeveralFieldsValues+0x27a>
    default: memcpy(to, from, n); break;
 800331c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800331e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003320:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003322:	f005 fbc1 	bl	8008aa8 <memcpy>
 8003326:	e000      	b.n	800332a <readSeveralFieldsValues+0x27a>
    case 0: break;
 8003328:	bf00      	nop
}
 800332a:	e091      	b.n	8003450 <readSeveralFieldsValues+0x3a0>
                                        memset(outputData, 0, sizeof(reg));
 800332c:	2204      	movs	r2, #4
 800332e:	2100      	movs	r1, #0
 8003330:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003332:	f005 fbe1 	bl	8008af8 <memset>
 8003336:	e08b      	b.n	8003450 <readSeveralFieldsValues+0x3a0>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d031      	beq.n	80033a8 <readSeveralFieldsValues+0x2f8>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 8003344:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <readSeveralFieldsValues+0x2a4>
 800334c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	e000      	b.n	8003356 <readSeveralFieldsValues+0x2a6>
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	2304      	movs	r3, #4
 800335a:	667b      	str	r3, [r7, #100]	; 0x64
 800335c:	f107 0310 	add.w	r3, r7, #16
 8003360:	663b      	str	r3, [r7, #96]	; 0x60
 8003362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003364:	65fb      	str	r3, [r7, #92]	; 0x5c
    switch (n) {
 8003366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <readSeveralFieldsValues+0x2f4>
 800336c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800336e:	2b01      	cmp	r3, #1
 8003370:	d112      	bne.n	8003398 <readSeveralFieldsValues+0x2e8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e014      	b.n	80033a6 <readSeveralFieldsValues+0x2f6>
 800337c:	20000290 	.word	0x20000290
 8003380:	0800e510 	.word	0x0800e510
 8003384:	0800df00 	.word	0x0800df00
 8003388:	0800e440 	.word	0x0800e440
 800338c:	0800f478 	.word	0x0800f478
 8003390:	0800e578 	.word	0x0800e578
 8003394:	0800e550 	.word	0x0800e550
    default: memcpy(to, from, n); break;
 8003398:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800339a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800339c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800339e:	f005 fb83 	bl	8008aa8 <memcpy>
 80033a2:	e000      	b.n	80033a6 <readSeveralFieldsValues+0x2f6>
    case 0: break;
 80033a4:	bf00      	nop
}
 80033a6:	e053      	b.n	8003450 <readSeveralFieldsValues+0x3a0>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80033a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02a      	beq.n	800340a <readSeveralFieldsValues+0x35a>
                                    	if(ptr) {
 80033b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <readSeveralFieldsValues+0x34e>
                                    		const void* reg_ptr_from = (const void *)(* REG_TYPE_DC(ptr));
 80033bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	65bb      	str	r3, [r7, #88]	; 0x58
											if(reg_ptr_from) {
 80033c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d019      	beq.n	80033fe <readSeveralFieldsValues+0x34e>
 80033ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033cc:	657b      	str	r3, [r7, #84]	; 0x54
 80033ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d0:	653b      	str	r3, [r7, #80]	; 0x50
 80033d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (n) {
 80033d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <readSeveralFieldsValues+0x348>
 80033dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d104      	bne.n	80033ec <readSeveralFieldsValues+0x33c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80033e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e006      	b.n	80033fa <readSeveralFieldsValues+0x34a>
    default: memcpy(to, from, n); break;
 80033ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80033f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80033f2:	f005 fb59 	bl	8008aa8 <memcpy>
 80033f6:	e000      	b.n	80033fa <readSeveralFieldsValues+0x34a>
    case 0: break;
 80033f8:	bf00      	nop
}
 80033fa:	bf00      	nop
												return;
 80033fc:	e028      	b.n	8003450 <readSeveralFieldsValues+0x3a0>
                                        memset(outputData, 0, typeLen);
 80033fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003400:	2100      	movs	r1, #0
 8003402:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003404:	f005 fb78 	bl	8008af8 <memset>
 8003408:	e022      	b.n	8003450 <readSeveralFieldsValues+0x3a0>
                                    	if(ptr) {
 800340a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d019      	beq.n	8003446 <readSeveralFieldsValues+0x396>
 8003412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003414:	64bb      	str	r3, [r7, #72]	; 0x48
 8003416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
 800341c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800341e:	643b      	str	r3, [r7, #64]	; 0x40
    switch (n) {
 8003420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <readSeveralFieldsValues+0x392>
 8003426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003428:	2b01      	cmp	r3, #1
 800342a:	d104      	bne.n	8003436 <readSeveralFieldsValues+0x386>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800342c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e006      	b.n	8003444 <readSeveralFieldsValues+0x394>
    default: memcpy(to, from, n); break;
 8003436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800343a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800343c:	f005 fb34 	bl	8008aa8 <memcpy>
 8003440:	e000      	b.n	8003444 <readSeveralFieldsValues+0x394>
    case 0: break;
 8003442:	bf00      	nop
}
 8003444:	e004      	b.n	8003450 <readSeveralFieldsValues+0x3a0>
                                    		memset(outputData, 0, typeLen);
 8003446:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003448:	2100      	movs	r1, #0
 800344a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800344c:	f005 fb54 	bl	8008af8 <memset>


#ifdef USE_ENTITY_READ_CALLBACK
            const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8003450:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 800345a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <readSeveralFieldsValues+0x3ca>
                __entityCallback(entity, field, ptr, field->rdCallback.context);
 8003462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800346c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003470:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003474:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003478:	47a0      	blx	r4
            }
#endif /* USE_ENTITY_READ_CALLBACK */

            Wpos += typeLen;
 800347a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800347e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003482:	4413      	add	r3, r2
 8003484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003488:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	3302      	adds	r3, #2
 800348e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003492:	429a      	cmp	r2, r3
 8003494:	f63f ae58 	bhi.w	8003148 <readSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800349e:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e055      	b.n	8003550 <readSeveralFieldsValues+0x4a0>
            goto error;
 80034a4:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    outputData[Wpos++] = ENTITY_ERROR;
 80034ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034c4:	4413      	add	r3, r2
 80034c6:	2202      	movs	r2, #2
 80034c8:	633a      	str	r2, [r7, #48]	; 0x30
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034cc:	f107 0320 	add.w	r3, r7, #32
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <readSeveralFieldsValues+0x444>
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d104      	bne.n	80034e8 <readSeveralFieldsValues+0x438>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e006      	b.n	80034f6 <readSeveralFieldsValues+0x446>
    default: memcpy(to, from, n); break;
 80034e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ee:	f005 fadb 	bl	8008aa8 <memcpy>
 80034f2:	e000      	b.n	80034f6 <readSeveralFieldsValues+0x446>
    case 0: break;
 80034f4:	bf00      	nop
}
 80034f6:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 80034f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034fc:	3302      	adds	r3, #2
 80034fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003508:	4413      	add	r3, r2
 800350a:	2201      	movs	r2, #1
 800350c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003510:	f107 031e 	add.w	r3, r7, #30
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
    switch (n) {
 8003516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <readSeveralFieldsValues+0x488>
 800351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d104      	bne.n	800352c <readSeveralFieldsValues+0x47c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	781a      	ldrb	r2, [r3, #0]
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e006      	b.n	800353a <readSeveralFieldsValues+0x48a>
    default: memcpy(to, from, n); break;
 800352c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800352e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003530:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003532:	f005 fab9 	bl	8008aa8 <memcpy>
 8003536:	e000      	b.n	800353a <readSeveralFieldsValues+0x48a>
    case 0: break;
 8003538:	bf00      	nop
}
 800353a:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 800353c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003540:	3301      	adds	r3, #1
 8003542:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    (*size) = Wpos;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800354c:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	37d4      	adds	r7, #212	; 0xd4
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}

08003558 <setFieldValue>:
/* ******************************************************************************************************************
 * WRITE one field value
 *
 */
int setFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const inputData, const reg inputBufferSize)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b0a5      	sub	sp, #148	; 0x94
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	460b      	mov	r3, r1
 8003566:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (inputData == NULL) || (inputBufferSize == 0)), M_EMPTY, return ENTITY_ERROR, "setFieldValue: No allocated entities or invalid input");
 8003568:	4b96      	ldr	r3, [pc, #600]	; (80037c4 <setFieldValue+0x26c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <setFieldValue+0x24>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <setFieldValue+0x24>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d117      	bne.n	80035ac <setFieldValue+0x54>
 800357c:	4b91      	ldr	r3, [pc, #580]	; (80037c4 <setFieldValue+0x26c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <setFieldValue+0x38>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <setFieldValue+0x38>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <setFieldValue+0x3c>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <setFieldValue+0x3e>
 8003594:	2300      	movs	r3, #0
 8003596:	b2d9      	uxtb	r1, r3
 8003598:	4b8b      	ldr	r3, [pc, #556]	; (80037c8 <setFieldValue+0x270>)
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	f44f 73a9 	mov.w	r3, #338	; 0x152
 80035a0:	4a8a      	ldr	r2, [pc, #552]	; (80037cc <setFieldValue+0x274>)
 80035a2:	488b      	ldr	r0, [pc, #556]	; (80037d0 <setFieldValue+0x278>)
 80035a4:	f001 fed6 	bl	8005354 <__M_Error>
 80035a8:	2300      	movs	r3, #0
 80035aa:	e107      	b.n	80037bc <setFieldValue+0x264>

    Entity* const entity = entityInfo.entities[entityNumber];
 80035ac:	4b85      	ldr	r3, [pc, #532]	; (80037c4 <setFieldValue+0x26c>)
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    EntityField* const field = &entity->fields[fieldNumber];
 80035bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	897b      	ldrh	r3, [r7, #10]
 80035c4:	015b      	lsls	r3, r3, #5
 80035c6:	4413      	add	r3, r2
 80035c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 80035cc:	4b7d      	ldr	r3, [pc, #500]	; (80037c4 <setFieldValue+0x26c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80035d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035d6:	891b      	ldrh	r3, [r3, #8]
 80035d8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 80035dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	677b      	str	r3, [r7, #116]	; 0x74

    if((entityNumber < entities_count) && (fieldNumber < fields_count) && ((bitFlags & ENTITY_READ_ONLY_MSK) == 0)) {
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	f080 80e6 	bcs.w	80037ba <setFieldValue+0x262>
 80035ee:	897a      	ldrh	r2, [r7, #10]
 80035f0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80035f4:	429a      	cmp	r2, r3
 80035f6:	f080 80e0 	bcs.w	80037ba <setFieldValue+0x262>
 80035fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 80da 	bne.w	80037ba <setFieldValue+0x262>
        void* const ptr = (entity->pointer + field->shift);
 8003606:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4413      	add	r3, r2
 8003614:	673b      	str	r3, [r7, #112]	; 0x70
        const reg typeLen = getMYCTypeLen(field->type);
 8003616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800361a:	7e1b      	ldrb	r3, [r3, #24]
 800361c:	667b      	str	r3, [r7, #100]	; 0x64
    if(type < TYPE_ARRAY_LENGTH) {
 800361e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003620:	2b11      	cmp	r3, #17
 8003622:	d804      	bhi.n	800362e <setFieldValue+0xd6>
        return typeLengthMappingArray[type];
 8003624:	4a6b      	ldr	r2, [pc, #428]	; (80037d4 <setFieldValue+0x27c>)
 8003626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362c:	e000      	b.n	8003630 <setFieldValue+0xd8>
    return 0;
 800362e:	2300      	movs	r3, #0
 8003630:	66fb      	str	r3, [r7, #108]	; 0x6c

        ENTITY_DBG_ASSERT_BUF((typeLen > inputBufferSize), M_EMPTY, {
 8003632:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d911      	bls.n	800365e <setFieldValue+0x106>
 800363a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	bf8c      	ite	hi
 8003642:	2301      	movhi	r3, #1
 8003644:	2300      	movls	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	4619      	mov	r1, r3
 800364a:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <setFieldValue+0x280>)
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	f240 135f 	movw	r3, #351	; 0x15f
 8003652:	4a5e      	ldr	r2, [pc, #376]	; (80037cc <setFieldValue+0x274>)
 8003654:	4861      	ldr	r0, [pc, #388]	; (80037dc <setFieldValue+0x284>)
 8003656:	f001 fe7d 	bl	8005354 <__M_Error>
 800365a:	2300      	movs	r3, #0
 800365c:	e0ae      	b.n	80037bc <setFieldValue+0x264>
 800365e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003660:	663b      	str	r3, [r7, #96]	; 0x60
 8003662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	65bb      	str	r3, [r7, #88]	; 0x58
 800366a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366c:	657b      	str	r3, [r7, #84]	; 0x54
	if(!ptr) {
 800366e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 808e 	beq.w	8003792 <setFieldValue+0x23a>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d028      	beq.n	80036d2 <setFieldValue+0x17a>
 8003680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d023      	beq.n	80036d2 <setFieldValue+0x17a>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 800368a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	653b      	str	r3, [r7, #80]	; 0x50
										if(reg_ptr_to) {
 8003690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003692:	2b00      	cmp	r3, #0
 8003694:	d07f      	beq.n	8003796 <setFieldValue+0x23e>
 8003696:	2304      	movs	r3, #4
 8003698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800369c:	64bb      	str	r3, [r7, #72]	; 0x48
 800369e:	f107 0318 	add.w	r3, r7, #24
 80036a2:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 80036a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <setFieldValue+0x16e>
 80036aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d104      	bne.n	80036ba <setFieldValue+0x162>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80036b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e006      	b.n	80036c8 <setFieldValue+0x170>
    default: memcpy(to, from, n); break;
 80036ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80036c0:	f005 f9f2 	bl	8008aa8 <memcpy>
 80036c4:	e000      	b.n	80036c8 <setFieldValue+0x170>
    case 0: break;
 80036c6:	bf00      	nop
}
 80036c8:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ce:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80036d0:	e061      	b.n	8003796 <setFieldValue+0x23e>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80036d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01d      	beq.n	8003718 <setFieldValue+0x1c0>
 80036dc:	2304      	movs	r3, #4
 80036de:	643b      	str	r3, [r7, #64]	; 0x40
 80036e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 80036ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <setFieldValue+0x1b4>
 80036f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d104      	bne.n	8003700 <setFieldValue+0x1a8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80036f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	e006      	b.n	800370e <setFieldValue+0x1b6>
    default: memcpy(to, from, n); break;
 8003700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003706:	f005 f9cf 	bl	8008aa8 <memcpy>
 800370a:	e000      	b.n	800370e <setFieldValue+0x1b6>
    case 0: break;
 800370c:	bf00      	nop
}
 800370e:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e03f      	b.n	8003798 <setFieldValue+0x240>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01e      	beq.n	8003760 <setFieldValue+0x208>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 8003722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
                                        if(reg_ptr_to) {
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	2b00      	cmp	r3, #0
 800372c:	d034      	beq.n	8003798 <setFieldValue+0x240>
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
 8003732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (n) {
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <setFieldValue+0x204>
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	2b01      	cmp	r3, #1
 8003744:	d104      	bne.n	8003750 <setFieldValue+0x1f8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e006      	b.n	800375e <setFieldValue+0x206>
    default: memcpy(to, from, n); break;
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003756:	f005 f9a7 	bl	8008aa8 <memcpy>
 800375a:	e000      	b.n	800375e <setFieldValue+0x206>
    case 0: break;
 800375c:	bf00      	nop
}
 800375e:	e01b      	b.n	8003798 <setFieldValue+0x240>
 8003760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
 8003764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003766:	623b      	str	r3, [r7, #32]
 8003768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376a:	61fb      	str	r3, [r7, #28]
    switch (n) {
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <setFieldValue+0x236>
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	2b01      	cmp	r3, #1
 8003776:	d104      	bne.n	8003782 <setFieldValue+0x22a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e006      	b.n	8003790 <setFieldValue+0x238>
    default: memcpy(to, from, n); break;
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	6a39      	ldr	r1, [r7, #32]
 8003786:	69f8      	ldr	r0, [r7, #28]
 8003788:	f005 f98e 	bl	8008aa8 <memcpy>
 800378c:	e000      	b.n	8003790 <setFieldValue+0x238>
    case 0: break;
 800378e:	bf00      	nop
}
 8003790:	e002      	b.n	8003798 <setFieldValue+0x240>
		return;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <setFieldValue+0x240>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003796:	bf00      	nop

        proceedWriteEntity(bitFlags, ptr, inputData, typeLen);


#ifdef USE_ENTITY_WRITE_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003798:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	66bb      	str	r3, [r7, #104]	; 0x68
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80037a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <setFieldValue+0x262>
            __entityCallback(entity, field, ptr, field->wrCallback.context);
 80037a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80037ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80037b0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80037b4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80037b8:	47a0      	blx	r4
#endif /* USE_ENTITY_WRITE_CALLBACK */

    }

    UNUSED(inputBufferSize);
    return ENTITY_OK;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	4618      	mov	r0, r3
 80037be:	378c      	adds	r7, #140	; 0x8c
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}
 80037c4:	20000290 	.word	0x20000290
 80037c8:	0800e628 	.word	0x0800e628
 80037cc:	0800df00 	.word	0x0800df00
 80037d0:	0800e5b0 	.word	0x0800e5b0
 80037d4:	0800f478 	.word	0x0800f478
 80037d8:	0800e67c 	.word	0x0800e67c
 80037dc:	0800e660 	.word	0x0800e660

080037e0 <setSeveralFieldsValues>:
/* ******************************************************************************************************************
 * WRITE several fields values
 *
 */
int setSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b0b9      	sub	sp, #228	; 0xe4
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "setSeveralFieldsValues: No allocated entities or invalid input");
 80037ee:	4bb2      	ldr	r3, [pc, #712]	; (8003ab8 <setSeveralFieldsValues+0x2d8>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <setSeveralFieldsValues+0x2e>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d908      	bls.n	800380e <setSeveralFieldsValues+0x2e>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <setSeveralFieldsValues+0x2e>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <setSeveralFieldsValues+0x2e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11d      	bne.n	800384a <setSeveralFieldsValues+0x6a>
 800380e:	4baa      	ldr	r3, [pc, #680]	; (8003ab8 <setSeveralFieldsValues+0x2d8>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <setSeveralFieldsValues+0x4e>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d908      	bls.n	800382e <setSeveralFieldsValues+0x4e>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <setSeveralFieldsValues+0x4e>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <setSeveralFieldsValues+0x4e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <setSeveralFieldsValues+0x52>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <setSeveralFieldsValues+0x54>
 8003832:	2300      	movs	r3, #0
 8003834:	b2d9      	uxtb	r1, r3
 8003836:	4ba1      	ldr	r3, [pc, #644]	; (8003abc <setSeveralFieldsValues+0x2dc>)
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	f240 137b 	movw	r3, #379	; 0x17b
 800383e:	4aa0      	ldr	r2, [pc, #640]	; (8003ac0 <setSeveralFieldsValues+0x2e0>)
 8003840:	48a0      	ldr	r0, [pc, #640]	; (8003ac4 <setSeveralFieldsValues+0x2e4>)
 8003842:	f001 fd87 	bl	8005354 <__M_Error>
 8003846:	2300      	movs	r3, #0
 8003848:	e20e      	b.n	8003c68 <setSeveralFieldsValues+0x488>

    const reg inputMsgSize = (*size);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    reg Wpos = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    reg Rpos = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800385c:	4b96      	ldr	r3, [pc, #600]	; (8003ab8 <setSeveralFieldsValues+0x2d8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8003864:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8003876:	e194      	b.n	8003ba2 <setSeveralFieldsValues+0x3c2>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    reg Rpos_internal = (*Rpos);
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800388c:	4413      	add	r3, r2
 800388e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003892:	2302      	movs	r3, #2
 8003894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003898:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800389c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038a0:	f107 031c 	add.w	r3, r7, #28
 80038a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    switch (n) {
 80038a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <setSeveralFieldsValues+0xf8>
 80038b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <setSeveralFieldsValues+0xe6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80038b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e009      	b.n	80038da <setSeveralFieldsValues+0xfa>
    default: memcpy(to, from, n); break;
 80038c6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80038ca:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80038ce:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80038d2:	f005 f8e9 	bl	8008aa8 <memcpy>
 80038d6:	e000      	b.n	80038da <setSeveralFieldsValues+0xfa>
    case 0: break;
 80038d8:	bf00      	nop
}
 80038da:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	61fb      	str	r3, [r7, #28]
    return entityNumber;
 80038e2:	69fb      	ldr	r3, [r7, #28]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
    Rpos_internal += ENTITIES_SIZEOF;
 80038e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038ea:	3302      	adds	r3, #2
 80038ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80038f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038f8:	4413      	add	r3, r2
 80038fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	fieldNumber = *(inputData);
 80038fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    return fieldNumber;
 8003908:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800390c:	847b      	strh	r3, [r7, #34]	; 0x22
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800390e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003912:	3301      	adds	r3, #1
 8003914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    (*Rpos) = Rpos_internal;
 8003918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800391e:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 8003920:	4b65      	ldr	r3, [pc, #404]	; (8003ab8 <setSeveralFieldsValues+0x2d8>)
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        EntityField* const field = &entity->fields[fieldNumber];
 8003930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003938:	015b      	lsls	r3, r3, #5
 800393a:	4413      	add	r3, r2
 800393c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003940:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003944:	891b      	ldrh	r3, [r3, #8]
 8003946:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 800394a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800395a:	429a      	cmp	r2, r3
 800395c:	f240 812e 	bls.w	8003bbc <setSeveralFieldsValues+0x3dc>
 8003960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003962:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8003966:	429a      	cmp	r2, r3
 8003968:	f240 8128 	bls.w	8003bbc <setSeveralFieldsValues+0x3dc>
            const reg typeLen = getMYCTypeLen(field->type);
 800396c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003970:	7e1b      	ldrb	r3, [r3, #24]
 8003972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(type < TYPE_ARRAY_LENGTH) {
 8003976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800397a:	2b11      	cmp	r3, #17
 800397c:	d805      	bhi.n	800398a <setSeveralFieldsValues+0x1aa>
        return typeLengthMappingArray[type];
 800397e:	4a52      	ldr	r2, [pc, #328]	; (8003ac8 <setSeveralFieldsValues+0x2e8>)
 8003980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003988:	e000      	b.n	800398c <setSeveralFieldsValues+0x1ac>
    return 0;
 800398a:	2300      	movs	r3, #0
 800398c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

            ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, {
 8003990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003996:	4413      	add	r3, r2
 8003998:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800399c:	429a      	cmp	r2, r3
 800399e:	d214      	bcs.n	80039ca <setSeveralFieldsValues+0x1ea>
 80039a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039a6:	4413      	add	r3, r2
 80039a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80039ac:	429a      	cmp	r2, r3
 80039ae:	bf34      	ite	cc
 80039b0:	2301      	movcc	r3, #1
 80039b2:	2300      	movcs	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	4b44      	ldr	r3, [pc, #272]	; (8003acc <setSeveralFieldsValues+0x2ec>)
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80039c0:	4a3f      	ldr	r2, [pc, #252]	; (8003ac0 <setSeveralFieldsValues+0x2e0>)
 80039c2:	4843      	ldr	r0, [pc, #268]	; (8003ad0 <setSeveralFieldsValues+0x2f0>)
 80039c4:	f001 fcc6 	bl	8005354 <__M_Error>
 80039c8:	e0f9      	b.n	8003bbe <setSeveralFieldsValues+0x3de>
                                      goto error;
                                  }, "setSeveralFieldsValues: field read size more than buffer");


            if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 80039ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 80df 	bne.w	8003b96 <setSeveralFieldsValues+0x3b6>

                ptr = (entity->pointer + field->shift);
 80039d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	4413      	add	r3, r2
 80039e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a08:	67fb      	str	r3, [r7, #124]	; 0x7c
	if(!ptr) {
 8003a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80a9 	beq.w	8003b66 <setSeveralFieldsValues+0x386>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02c      	beq.n	8003a7a <setSeveralFieldsValues+0x29a>
 8003a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d026      	beq.n	8003a7a <setSeveralFieldsValues+0x29a>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 8003a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	67bb      	str	r3, [r7, #120]	; 0x78
										if(reg_ptr_to) {
 8003a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8097 	beq.w	8003b6a <setSeveralFieldsValues+0x38a>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a44:	673b      	str	r3, [r7, #112]	; 0x70
 8003a46:	f107 0318 	add.w	r3, r7, #24
 8003a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    switch (n) {
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <setSeveralFieldsValues+0x28e>
 8003a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d104      	bne.n	8003a62 <setSeveralFieldsValues+0x282>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e006      	b.n	8003a70 <setSeveralFieldsValues+0x290>
    default: memcpy(to, from, n); break;
 8003a62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a64:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003a66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a68:	f005 f81e 	bl	8008aa8 <memcpy>
 8003a6c:	e000      	b.n	8003a70 <setSeveralFieldsValues+0x290>
    case 0: break;
 8003a6e:	bf00      	nop
}
 8003a70:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a76:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003a78:	e077      	b.n	8003b6a <setSeveralFieldsValues+0x38a>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d02d      	beq.n	8003ae2 <setSeveralFieldsValues+0x302>
 8003a86:	2304      	movs	r3, #4
 8003a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	663b      	str	r3, [r7, #96]	; 0x60
    switch (n) {
 8003a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01b      	beq.n	8003ad4 <setSeveralFieldsValues+0x2f4>
 8003a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d104      	bne.n	8003aac <setSeveralFieldsValues+0x2cc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e014      	b.n	8003ad6 <setSeveralFieldsValues+0x2f6>
    default: memcpy(to, from, n); break;
 8003aac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003aae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003ab0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003ab2:	f004 fff9 	bl	8008aa8 <memcpy>
 8003ab6:	e00e      	b.n	8003ad6 <setSeveralFieldsValues+0x2f6>
 8003ab8:	20000290 	.word	0x20000290
 8003abc:	0800e6a8 	.word	0x0800e6a8
 8003ac0:	0800df00 	.word	0x0800df00
 8003ac4:	0800e440 	.word	0x0800e440
 8003ac8:	0800f478 	.word	0x0800f478
 8003acc:	0800e70c 	.word	0x0800e70c
 8003ad0:	0800e6e8 	.word	0x0800e6e8
    case 0: break;
 8003ad4:	bf00      	nop
}
 8003ad6:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e044      	b.n	8003b6c <setSeveralFieldsValues+0x38c>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d020      	beq.n	8003b30 <setSeveralFieldsValues+0x350>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 8003aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	65fb      	str	r3, [r7, #92]	; 0x5c
                                        if(reg_ptr_to) {
 8003af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d037      	beq.n	8003b6c <setSeveralFieldsValues+0x38c>
 8003afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003afe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b04:	657b      	str	r3, [r7, #84]	; 0x54
 8003b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b08:	653b      	str	r3, [r7, #80]	; 0x50
    switch (n) {
 8003b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00d      	beq.n	8003b2c <setSeveralFieldsValues+0x34c>
 8003b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d104      	bne.n	8003b20 <setSeveralFieldsValues+0x340>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e006      	b.n	8003b2e <setSeveralFieldsValues+0x34e>
    default: memcpy(to, from, n); break;
 8003b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b24:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b26:	f004 ffbf 	bl	8008aa8 <memcpy>
 8003b2a:	e000      	b.n	8003b2e <setSeveralFieldsValues+0x34e>
    case 0: break;
 8003b2c:	bf00      	nop
}
 8003b2e:	e01d      	b.n	8003b6c <setSeveralFieldsValues+0x38c>
 8003b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b3e:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 8003b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <setSeveralFieldsValues+0x382>
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d104      	bne.n	8003b56 <setSeveralFieldsValues+0x376>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	781a      	ldrb	r2, [r3, #0]
 8003b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e006      	b.n	8003b64 <setSeveralFieldsValues+0x384>
    default: memcpy(to, from, n); break;
 8003b56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b5c:	f004 ffa4 	bl	8008aa8 <memcpy>
 8003b60:	e000      	b.n	8003b64 <setSeveralFieldsValues+0x384>
    case 0: break;
 8003b62:	bf00      	nop
}
 8003b64:	e002      	b.n	8003b6c <setSeveralFieldsValues+0x38c>
		return;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <setSeveralFieldsValues+0x38c>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003b6a:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003b76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <setSeveralFieldsValues+0x3b6>
                    __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003b88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b8c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003b90:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8003b94:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_WRITE_CALLBACK */

            }

            Rpos += typeLen;
 8003b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b9c:	4413      	add	r3, r2
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003ba0:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	3303      	adds	r3, #3
 8003ba6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003baa:	429a      	cmp	r2, r3
 8003bac:	f63f ae64 	bhi.w	8003878 <setSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bb6:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e055      	b.n	8003c68 <setSeveralFieldsValues+0x488>
            goto error;
 8003bbc:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    outputData[Wpos++] = ENTITY_ERROR;
 8003bc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003bdc:	4413      	add	r3, r2
 8003bde:	2202      	movs	r2, #2
 8003be0:	637a      	str	r2, [r7, #52]	; 0x34
 8003be2:	633b      	str	r3, [r7, #48]	; 0x30
 8003be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <setSeveralFieldsValues+0x42c>
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d104      	bne.n	8003c00 <setSeveralFieldsValues+0x420>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e006      	b.n	8003c0e <setSeveralFieldsValues+0x42e>
    default: memcpy(to, from, n); break;
 8003c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c06:	f004 ff4f 	bl	8008aa8 <memcpy>
 8003c0a:	e000      	b.n	8003c0e <setSeveralFieldsValues+0x42e>
    case 0: break;
 8003c0c:	bf00      	nop
}
 8003c0e:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 8003c10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c14:	3302      	adds	r3, #2
 8003c16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c20:	4413      	add	r3, r2
 8003c22:	2201      	movs	r2, #1
 8003c24:	643a      	str	r2, [r7, #64]	; 0x40
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c28:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 8003c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <setSeveralFieldsValues+0x470>
 8003c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d104      	bne.n	8003c44 <setSeveralFieldsValues+0x464>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e006      	b.n	8003c52 <setSeveralFieldsValues+0x472>
    default: memcpy(to, from, n); break;
 8003c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c4a:	f004 ff2d 	bl	8008aa8 <memcpy>
 8003c4e:	e000      	b.n	8003c52 <setSeveralFieldsValues+0x472>
    case 0: break;
 8003c50:	bf00      	nop
}
 8003c52:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 8003c54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    (*size) = Wpos;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c64:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	37dc      	adds	r7, #220	; 0xdc
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <proceedGluedValues>:
/* ******************************************************************************************************************
 * GLUED functions fields values
 *
 */
int proceedGluedValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b0db      	sub	sp, #364	; 0x16c
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 8003c7a:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 8003c7e:	6020      	str	r0, [r4, #0]
 8003c80:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8003c84:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8003c88:	6001      	str	r1, [r0, #0]
 8003c8a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8003c8e:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 8003c92:	600a      	str	r2, [r1, #0]
 8003c94:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003c98:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c9c:	6013      	str	r3, [r2, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 3) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: No allocated entities or invalid input");
 8003c9e:	4bb8      	ldr	r3, [pc, #736]	; (8003f80 <proceedGluedValues+0x310>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01b      	beq.n	8003cde <proceedGluedValues+0x6e>
 8003ca6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003caa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d914      	bls.n	8003cde <proceedGluedValues+0x6e>
 8003cb4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003cb8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <proceedGluedValues+0x6e>
 8003cc2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003cc6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <proceedGluedValues+0x6e>
 8003cd0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003cd4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d12e      	bne.n	8003d3c <proceedGluedValues+0xcc>
 8003cde:	4ba8      	ldr	r3, [pc, #672]	; (8003f80 <proceedGluedValues+0x310>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01b      	beq.n	8003d1e <proceedGluedValues+0xae>
 8003ce6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003cea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d914      	bls.n	8003d1e <proceedGluedValues+0xae>
 8003cf4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003cf8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <proceedGluedValues+0xae>
 8003d02:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003d06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <proceedGluedValues+0xae>
 8003d10:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003d14:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <proceedGluedValues+0xb2>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <proceedGluedValues+0xb4>
 8003d22:	2300      	movs	r3, #0
 8003d24:	b2d9      	uxtb	r1, r3
 8003d26:	4b97      	ldr	r3, [pc, #604]	; (8003f84 <proceedGluedValues+0x314>)
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	f240 13c9 	movw	r3, #457	; 0x1c9
 8003d2e:	4a96      	ldr	r2, [pc, #600]	; (8003f88 <proceedGluedValues+0x318>)
 8003d30:	4896      	ldr	r0, [pc, #600]	; (8003f8c <proceedGluedValues+0x31c>)
 8003d32:	f001 fb0f 	bl	8005354 <__M_Error>
 8003d36:	2300      	movs	r3, #0
 8003d38:	f000 bdf0 	b.w	800491c <proceedGluedValues+0xcac>

    const reg inputMsgSize = (*size);
 8003d3c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003d40:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    reg Wpos = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    reg Rpos = 0;
 8003d52:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003d56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003d5e:	4b88      	ldr	r3, [pc, #544]	; (8003f80 <proceedGluedValues+0x310>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    u8 cmd = inputData[Rpos++];
 8003d66:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003d6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	1c59      	adds	r1, r3, #1
 8003d72:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003d76:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003d7a:	6011      	str	r1, [r2, #0]
 8003d7c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003d80:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

    if(cmd == WRITE_SEVERAL_VALUES_GLUED) {
 8003d8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d92:	2b07      	cmp	r3, #7
 8003d94:	f040 82a4 	bne.w	80042e0 <proceedGluedValues+0x670>
        const u8 writeRequestCnt = inputData[Rpos++];
 8003d98:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1c59      	adds	r1, r3, #1
 8003da4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003da8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003dac:	6011      	str	r1, [r2, #0]
 8003dae:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003db2:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	4413      	add	r3, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003dc6:	e23e      	b.n	8004246 <proceedGluedValues+0x5d6>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize),
 8003dc8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3303      	adds	r3, #3
 8003dd4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d218      	bcs.n	8003e0e <proceedGluedValues+0x19e>
 8003ddc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3303      	adds	r3, #3
 8003de8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003dec:	429a      	cmp	r2, r3
 8003dee:	bf34      	ite	cc
 8003df0:	2301      	movcc	r3, #1
 8003df2:	2300      	movcs	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	4619      	mov	r1, r3
 8003df8:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <proceedGluedValues+0x320>)
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003e00:	4a61      	ldr	r2, [pc, #388]	; (8003f88 <proceedGluedValues+0x318>)
 8003e02:	4864      	ldr	r0, [pc, #400]	; (8003f94 <proceedGluedValues+0x324>)
 8003e04:	f001 faa6 	bl	8005354 <__M_Error>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f000 bd87 	b.w	800491c <proceedGluedValues+0xcac>
 8003e0e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    reg Rpos_internal = (*Rpos);
 8003e1c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003e2a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003e2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e32:	4413      	add	r3, r2
 8003e34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    switch (n) {
 8003e4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d013      	beq.n	8003e7e <proceedGluedValues+0x20e>
 8003e56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d106      	bne.n	8003e6c <proceedGluedValues+0x1fc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e009      	b.n	8003e80 <proceedGluedValues+0x210>
    default: memcpy(to, from, n); break;
 8003e6c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003e70:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8003e74:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8003e78:	f004 fe16 	bl	8008aa8 <memcpy>
 8003e7c:	e000      	b.n	8003e80 <proceedGluedValues+0x210>
    case 0: break;
 8003e7e:	bf00      	nop
}
 8003e80:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8003e82:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003e96:	601a      	str	r2, [r3, #0]
    return entityNumber;
 8003e98:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003e9c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ea0:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003ea2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003eaa:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 8003eac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003eb6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003eba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	fieldNumber = *(inputData);
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    return fieldNumber;
 8003ece:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003ed2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003ed6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8003eda:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003edc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    (*Rpos) = Rpos_internal;
 8003ee6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003eee:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
                                  M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <proceedGluedValues+0x310>)
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            EntityField* const field = &entity->fields[fieldNumber];
 8003f0e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003f18:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	015b      	lsls	r3, r3, #5
 8003f20:	4413      	add	r3, r2
 8003f22:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003f26:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f2a:	891b      	ldrh	r3, [r3, #8]
 8003f2c:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
            const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003f30:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003f3a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	f240 8177 	bls.w	800423c <proceedGluedValues+0x5cc>
 8003f4e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003f52:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	f240 816d 	bls.w	800423c <proceedGluedValues+0x5cc>
                const reg typeLen = getMYCTypeLen(field->type);
 8003f62:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f66:	7e1b      	ldrb	r3, [r3, #24]
 8003f68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if(type < TYPE_ARRAY_LENGTH) {
 8003f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f70:	2b11      	cmp	r3, #17
 8003f72:	d813      	bhi.n	8003f9c <proceedGluedValues+0x32c>
        return typeLengthMappingArray[type];
 8003f74:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <proceedGluedValues+0x328>)
 8003f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7e:	e00e      	b.n	8003f9e <proceedGluedValues+0x32e>
 8003f80:	20000290 	.word	0x20000290
 8003f84:	0800e7ec 	.word	0x0800e7ec
 8003f88:	0800df00 	.word	0x0800df00
 8003f8c:	0800e748 	.word	0x0800e748
 8003f90:	0800e86c 	.word	0x0800e86c
 8003f94:	0800e828 	.word	0x0800e828
 8003f98:	0800f478 	.word	0x0800f478
    return 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

                ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003fa2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003fa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d21a      	bcs.n	8003ff0 <proceedGluedValues+0x380>
 8003fba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fc8:	4413      	add	r3, r2
 8003fca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	bf34      	ite	cc
 8003fd2:	2301      	movcc	r3, #1
 8003fd4:	2300      	movcs	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4bbd      	ldr	r3, [pc, #756]	; (80042d0 <proceedGluedValues+0x660>)
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 8003fe2:	4abc      	ldr	r2, [pc, #752]	; (80042d4 <proceedGluedValues+0x664>)
 8003fe4:	48bc      	ldr	r0, [pc, #752]	; (80042d8 <proceedGluedValues+0x668>)
 8003fe6:	f001 f9b5 	bl	8005354 <__M_Error>
 8003fea:	2300      	movs	r3, #0
 8003fec:	f000 bc96 	b.w	800491c <proceedGluedValues+0xcac>

                if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8003ff0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f040 8112 	bne.w	8004222 <proceedGluedValues+0x5b2>

                    ptr = (entity->pointer + field->shift);
 8003ffe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	4413      	add	r3, r2
 800400c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 8004010:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800401e:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	4413      	add	r3, r2
 8004026:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800402a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800402e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004032:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004036:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800403a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800403e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if(!ptr) {
 8004042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80d3 	beq.w	80041f2 <proceedGluedValues+0x582>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800404c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d03d      	beq.n	80040d4 <proceedGluedValues+0x464>
 8004058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d037      	beq.n	80040d4 <proceedGluedValues+0x464>
										void* const reg_ptr_to = (void* const) (* REG_TYPE_DC(ptr));
 8004064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
										if(reg_ptr_to) {
 800406e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80bf 	beq.w	80041f6 <proceedGluedValues+0x586>
 8004078:	2304      	movs	r3, #4
 800407a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800407e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004082:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    switch (n) {
 800408e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d013      	beq.n	80040be <proceedGluedValues+0x44e>
 8004096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800409a:	2b01      	cmp	r3, #1
 800409c:	d106      	bne.n	80040ac <proceedGluedValues+0x43c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800409e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e009      	b.n	80040c0 <proceedGluedValues+0x450>
    default: memcpy(to, from, n); break;
 80040ac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80040b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80040b4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80040b8:	f004 fcf6 	bl	8008aa8 <memcpy>
 80040bc:	e000      	b.n	80040c0 <proceedGluedValues+0x450>
    case 0: break;
 80040be:	bf00      	nop
}
 80040c0:	bf00      	nop
											MY_CTYPE_REG_SET(reg_ptr_to, dta);
 80040c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80040c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040d0:	601a      	str	r2, [r3, #0]
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80040d2:	e090      	b.n	80041f6 <proceedGluedValues+0x586>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80040d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02d      	beq.n	800413c <proceedGluedValues+0x4cc>
 80040e0:	2304      	movs	r3, #4
 80040e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040ee:	f107 0320 	add.w	r3, r7, #32
 80040f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    switch (n) {
 80040f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d013      	beq.n	8004126 <proceedGluedValues+0x4b6>
 80040fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004102:	2b01      	cmp	r3, #1
 8004104:	d106      	bne.n	8004114 <proceedGluedValues+0x4a4>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004106:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e009      	b.n	8004128 <proceedGluedValues+0x4b8>
    default: memcpy(to, from, n); break;
 8004114:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004118:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800411c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004120:	f004 fcc2 	bl	8008aa8 <memcpy>
 8004124:	e000      	b.n	8004128 <proceedGluedValues+0x4b8>
    case 0: break;
 8004126:	bf00      	nop
}
 8004128:	bf00      	nop
										MY_CTYPE_REG_SET(ptr, dta);
 800412a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800412e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e05d      	b.n	80041f8 <proceedGluedValues+0x588>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 800413c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02e      	beq.n	80041a6 <proceedGluedValues+0x536>
                                        void* const reg_ptr_to = (void* const)(* REG_TYPE_DC(ptr));
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                                        if(reg_ptr_to) {
 8004152:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04e      	beq.n	80041f8 <proceedGluedValues+0x588>
 800415a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800415e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004166:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800416a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800416e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    switch (n) {
 8004172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d013      	beq.n	80041a2 <proceedGluedValues+0x532>
 800417a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800417e:	2b01      	cmp	r3, #1
 8004180:	d106      	bne.n	8004190 <proceedGluedValues+0x520>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	e009      	b.n	80041a4 <proceedGluedValues+0x534>
    default: memcpy(to, from, n); break;
 8004190:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004194:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8004198:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800419c:	f004 fc84 	bl	8008aa8 <memcpy>
 80041a0:	e000      	b.n	80041a4 <proceedGluedValues+0x534>
    case 0: break;
 80041a2:	bf00      	nop
}
 80041a4:	e028      	b.n	80041f8 <proceedGluedValues+0x588>
 80041a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    switch (n) {
 80041be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d013      	beq.n	80041ee <proceedGluedValues+0x57e>
 80041c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d106      	bne.n	80041dc <proceedGluedValues+0x56c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80041ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e009      	b.n	80041f0 <proceedGluedValues+0x580>
    default: memcpy(to, from, n); break;
 80041dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041e0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80041e4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80041e8:	f004 fc5e 	bl	8008aa8 <memcpy>
 80041ec:	e000      	b.n	80041f0 <proceedGluedValues+0x580>
    case 0: break;
 80041ee:	bf00      	nop
}
 80041f0:	e002      	b.n	80041f8 <proceedGluedValues+0x588>
		return;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <proceedGluedValues+0x588>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80041f6:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                    const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 80041f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8004202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <proceedGluedValues+0x5b2>
                        __entityCallback(entity, field, ptr, field->wrCallback.context);
 800420a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8004214:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004218:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800421c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8004220:	47a0      	blx	r4
                    }
#endif /* USE_ENTITY_WRITE_CALLBACK */

                }

                Rpos += typeLen;
 8004222:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004230:	441a      	add	r2, r3
 8004232:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004236:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800423a:	601a      	str	r2, [r3, #0]
        for(reg i = 0; i < writeRequestCnt; ++i) {
 800423c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004240:	3301      	adds	r3, #1
 8004242:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004246:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800424a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800424e:	429a      	cmp	r2, r3
 8004250:	f4ff adba 	bcc.w	8003dc8 <proceedGluedValues+0x158>
            }
        }

        ENTITY_DBG_ASSERT_BUF(((Rpos + 1) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8004254:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004264:	429a      	cmp	r2, r3
 8004266:	d217      	bcs.n	8004298 <proceedGluedValues+0x628>
 8004268:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800426c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004278:	429a      	cmp	r2, r3
 800427a:	bf34      	ite	cc
 800427c:	2301      	movcc	r3, #1
 800427e:	2300      	movcs	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	4619      	mov	r1, r3
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <proceedGluedValues+0x660>)
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	f240 13fb 	movw	r3, #507	; 0x1fb
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <proceedGluedValues+0x664>)
 800428e:	4813      	ldr	r0, [pc, #76]	; (80042dc <proceedGluedValues+0x66c>)
 8004290:	f001 f860 	bl	8005354 <__M_Error>
 8004294:	2300      	movs	r3, #0
 8004296:	e341      	b.n	800491c <proceedGluedValues+0xcac>
        cmd = inputData[Rpos];
 8004298:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800429c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80042a6:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        if(cmd == SEVERAL_VALUES_GLUED_END) {
 80042b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042b8:	2b09      	cmp	r3, #9
 80042ba:	d111      	bne.n	80042e0 <proceedGluedValues+0x670>
            (*size) = 0;
 80042bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042c0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
            return ENTITY_OK;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e326      	b.n	800491c <proceedGluedValues+0xcac>
 80042ce:	bf00      	nop
 80042d0:	0800e8a8 	.word	0x0800e8a8
 80042d4:	0800df00 	.word	0x0800df00
 80042d8:	0800e6e8 	.word	0x0800e6e8
 80042dc:	0800e8e0 	.word	0x0800e8e0
        }
    }

    if(cmd == READ_SEVERAL_VALUES_GLUED) {
 80042e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	f040 8310 	bne.w	800490a <proceedGluedValues+0xc9a>
        ENTITY_DBG_ASSERT_BUF(((Rpos + 2) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 80042ea:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80042ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3302      	adds	r3, #2
 80042f6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d217      	bcs.n	800432e <proceedGluedValues+0x6be>
 80042fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3302      	adds	r3, #2
 800430a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800430e:	429a      	cmp	r2, r3
 8004310:	bf34      	ite	cc
 8004312:	2301      	movcc	r3, #1
 8004314:	2300      	movcs	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	4bad      	ldr	r3, [pc, #692]	; (80045d0 <proceedGluedValues+0x960>)
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	f240 2305 	movw	r3, #517	; 0x205
 8004322:	4aac      	ldr	r2, [pc, #688]	; (80045d4 <proceedGluedValues+0x964>)
 8004324:	48ac      	ldr	r0, [pc, #688]	; (80045d8 <proceedGluedValues+0x968>)
 8004326:	f001 f815 	bl	8005354 <__M_Error>
 800432a:	2300      	movs	r3, #0
 800432c:	e2f6      	b.n	800491c <proceedGluedValues+0xcac>

        const u8 readRequestCnt = inputData[Rpos++];
 800432e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004332:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1c59      	adds	r1, r3, #1
 800433a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800433e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004342:	6011      	str	r1, [r2, #0]
 8004344:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004348:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        outputData[Wpos++] = READ_SEVERAL_VALUES_GLUED;
 8004356:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8004360:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004364:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	4413      	add	r3, r2
 800436c:	2206      	movs	r2, #6
 800436e:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = readRequestCnt;
 8004370:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800437a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800437e:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	4413      	add	r3, r2
 8004386:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 800438a:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = inputData[Rpos++];
 800438c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800439c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80043a0:	6011      	str	r1, [r2, #0]
 80043a2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80043a6:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	441a      	add	r2, r3
 80043ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80043b2:	1c59      	adds	r1, r3, #1
 80043b4:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 80043b8:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80043bc:	f5a1 71ac 	sub.w	r1, r1, #344	; 0x158
 80043c0:	6809      	ldr	r1, [r1, #0]
 80043c2:	440b      	add	r3, r1
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	701a      	strb	r2, [r3, #0]

        for(reg i = 0; i < readRequestCnt; ++i) {
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80043ce:	e295      	b.n	80048fc <proceedGluedValues+0xc8c>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field request size more than buffer");
 80043d0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3303      	adds	r3, #3
 80043dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d217      	bcs.n	8004414 <proceedGluedValues+0x7a4>
 80043e4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80043e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3303      	adds	r3, #3
 80043f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	bf34      	ite	cc
 80043f8:	2301      	movcc	r3, #1
 80043fa:	2300      	movcs	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	4619      	mov	r1, r3
 8004400:	4b76      	ldr	r3, [pc, #472]	; (80045dc <proceedGluedValues+0x96c>)
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	f240 230d 	movw	r3, #525	; 0x20d
 8004408:	4a72      	ldr	r2, [pc, #456]	; (80045d4 <proceedGluedValues+0x964>)
 800440a:	4875      	ldr	r0, [pc, #468]	; (80045e0 <proceedGluedValues+0x970>)
 800440c:	f000 ffa2 	bl	8005354 <__M_Error>
 8004410:	2300      	movs	r3, #0
 8004412:	e283      	b.n	800491c <proceedGluedValues+0xcac>
 8004414:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004418:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    reg Rpos_internal = (*Rpos);
 8004422:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8004430:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004434:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004438:	4413      	add	r3, r2
 800443a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800443e:	2302      	movs	r3, #2
 8004440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800444c:	f107 031c 	add.w	r3, r7, #28
 8004450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 8004454:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004458:	2b00      	cmp	r3, #0
 800445a:	d013      	beq.n	8004484 <proceedGluedValues+0x814>
 800445c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004460:	2b01      	cmp	r3, #1
 8004462:	d106      	bne.n	8004472 <proceedGluedValues+0x802>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e009      	b.n	8004486 <proceedGluedValues+0x816>
    default: memcpy(to, from, n); break;
 8004472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004476:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800447a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800447e:	f004 fb13 	bl	8008aa8 <memcpy>
 8004482:	e000      	b.n	8004486 <proceedGluedValues+0x816>
    case 0: break;
 8004484:	bf00      	nop
}
 8004486:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8004488:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800448c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	b29a      	uxth	r2, r3
 8004494:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004498:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800449c:	601a      	str	r2, [r3, #0]
    return entityNumber;
 800449e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80044a6:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80044a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044b0:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 80044b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b6:	3302      	adds	r3, #2
 80044b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80044bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80044c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044c4:	4413      	add	r3, r2
 80044c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fieldNumber = *(inputData);
 80044ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    return fieldNumber;
 80044d4:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80044d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044dc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80044e0:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80044e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e6:	3301      	adds	r3, #1
 80044e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    (*Rpos) = Rpos_internal;
 80044ec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80044f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044f4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 80044fc:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <proceedGluedValues+0x974>)
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            EntityField* const field = &entity->fields[fieldNumber];
 8004514:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800451e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	015b      	lsls	r3, r3, #5
 8004526:	4413      	add	r3, r2
 8004528:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 800452c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004530:	891b      	ldrh	r3, [r3, #8]
 8004532:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8004536:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800453a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004544:	429a      	cmp	r2, r3
 8004546:	f240 81d2 	bls.w	80048ee <proceedGluedValues+0xc7e>
 800454a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800454e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8004558:	429a      	cmp	r2, r3
 800455a:	f240 81c8 	bls.w	80048ee <proceedGluedValues+0xc7e>
                const reg typeLen = getMYCTypeLen(field->type);
 800455e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004562:	7e1b      	ldrb	r3, [r3, #24]
 8004564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if(type < TYPE_ARRAY_LENGTH) {
 8004568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800456c:	2b11      	cmp	r3, #17
 800456e:	d805      	bhi.n	800457c <proceedGluedValues+0x90c>
        return typeLengthMappingArray[type];
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <proceedGluedValues+0x978>)
 8004572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457a:	e000      	b.n	800457e <proceedGluedValues+0x90e>
    return 0;
 800457c:	2300      	movs	r3, #0
 800457e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

                ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");
 8004582:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458a:	4413      	add	r3, r2
 800458c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004590:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d22c      	bcs.n	80045f4 <proceedGluedValues+0x984>
 800459a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a2:	4413      	add	r3, r2
 80045a4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80045a8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf34      	ite	cc
 80045b2:	2301      	movcc	r3, #1
 80045b4:	2300      	movcs	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	4619      	mov	r1, r3
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <proceedGluedValues+0x97c>)
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	f44f 7306 	mov.w	r3, #536	; 0x218
 80045c2:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <proceedGluedValues+0x964>)
 80045c4:	480a      	ldr	r0, [pc, #40]	; (80045f0 <proceedGluedValues+0x980>)
 80045c6:	f000 fec5 	bl	8005354 <__M_Error>
 80045ca:	2300      	movs	r3, #0
 80045cc:	e1a6      	b.n	800491c <proceedGluedValues+0xcac>
 80045ce:	bf00      	nop
 80045d0:	0800e8a8 	.word	0x0800e8a8
 80045d4:	0800df00 	.word	0x0800df00
 80045d8:	0800e8fc 	.word	0x0800e8fc
 80045dc:	0800e918 	.word	0x0800e918
 80045e0:	0800e828 	.word	0x0800e828
 80045e4:	20000290 	.word	0x20000290
 80045e8:	0800f478 	.word	0x0800f478
 80045ec:	0800e86c 	.word	0x0800e86c
 80045f0:	0800e550 	.word	0x0800e550

                ptr = (entity->pointer + field->shift);
 80045f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	4413      	add	r3, r2
 8004602:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 8004606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004610:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004614:	6819      	ldr	r1, [r3, #0]
 8004616:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800461a:	440b      	add	r3, r1
 800461c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800461e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004622:	67ba      	str	r2, [r7, #120]	; 0x78
 8004624:	677b      	str	r3, [r7, #116]	; 0x74
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462a:	673b      	str	r3, [r7, #112]	; 0x70
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800462c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d040      	beq.n	80046b8 <proceedGluedValues+0xa48>
 8004636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d03b      	beq.n	80046b8 <proceedGluedValues+0xa48>
                                    	if(ptr) {
 8004640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004642:	2b00      	cmp	r3, #0
 8004644:	d032      	beq.n	80046ac <proceedGluedValues+0xa3c>
                                    		const void* reg_ptr_from = (const void*) (* REG_TYPE_DC(ptr));
 8004646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	66fb      	str	r3, [r7, #108]	; 0x6c
                                    		if(reg_ptr_from) {
 800464c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02c      	beq.n	80046ac <proceedGluedValues+0xa3c>
												const reg dta = MY_CTYPE_REG_GET(reg_ptr_from);
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800465a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	2304      	movs	r3, #4
 8004662:	66bb      	str	r3, [r7, #104]	; 0x68
 8004664:	f107 0318 	add.w	r3, r7, #24
 8004668:	667b      	str	r3, [r7, #100]	; 0x64
 800466a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800466e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004672:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004674:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <proceedGluedValues+0xa38>
 800467c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800467e:	2b01      	cmp	r3, #1
 8004680:	d108      	bne.n	8004694 <proceedGluedValues+0xa24>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800468a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e00a      	b.n	80046aa <proceedGluedValues+0xa3a>
    default: memcpy(to, from, n); break;
 8004694:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004698:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800469c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800469e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	f004 fa01 	bl	8008aa8 <memcpy>
 80046a6:	e000      	b.n	80046aa <proceedGluedValues+0xa3a>
    case 0: break;
 80046a8:	bf00      	nop
}
 80046aa:	e103      	b.n	80048b4 <proceedGluedValues+0xc44>
                                        memset(outputData, 0, sizeof(reg));
 80046ac:	2204      	movs	r2, #4
 80046ae:	2100      	movs	r1, #0
 80046b0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80046b2:	f004 fa21 	bl	8008af8 <memset>
 80046b6:	e0fd      	b.n	80048b4 <proceedGluedValues+0xc44>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80046b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d04d      	beq.n	800475e <proceedGluedValues+0xaee>
                                    	const reg dta = ptr ? MY_CTYPE_REG_GET(ptr) : 0;
 80046c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <proceedGluedValues+0xa5e>
 80046c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	e000      	b.n	80046d0 <proceedGluedValues+0xa60>
 80046ce:	2300      	movs	r3, #0
 80046d0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80046d4:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046e2:	2204      	movs	r2, #4
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ee:	f107 0214 	add.w	r2, r7, #20
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80046f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046fe:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004700:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d025      	beq.n	800475a <proceedGluedValues+0xaea>
 800470e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d10c      	bne.n	8004736 <proceedGluedValues+0xac6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800471c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800472c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e012      	b.n	800475c <proceedGluedValues+0xaec>
    default: memcpy(to, from, n); break;
 8004736:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800473a:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800473e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004742:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8004746:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800474a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	6809      	ldr	r1, [r1, #0]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	f004 f9a8 	bl	8008aa8 <memcpy>
 8004758:	e000      	b.n	800475c <proceedGluedValues+0xaec>
    case 0: break;
 800475a:	bf00      	nop
}
 800475c:	e0aa      	b.n	80048b4 <proceedGluedValues+0xc44>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 800475e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05c      	beq.n	8004822 <proceedGluedValues+0xbb2>
                                    	if(ptr) {
 8004768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476a:	2b00      	cmp	r3, #0
 800476c:	d053      	beq.n	8004816 <proceedGluedValues+0xba6>
                                    		const void* reg_ptr_from = (const void *)(* REG_TYPE_DC(ptr));
 800476e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004776:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800477a:	601a      	str	r2, [r3, #0]
											if(reg_ptr_from) {
 800477c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004780:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d045      	beq.n	8004816 <proceedGluedValues+0xba6>
 800478a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800478e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004792:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800479a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800479e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80047a2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80047b4:	601a      	str	r2, [r3, #0]
    switch (n) {
 80047b6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d025      	beq.n	8004810 <proceedGluedValues+0xba0>
 80047c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10c      	bne.n	80047ec <proceedGluedValues+0xb7c>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80047d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e012      	b.n	8004812 <proceedGluedValues+0xba2>
    default: memcpy(to, from, n); break;
 80047ec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047f0:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80047f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80047f8:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 80047fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004800:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	6809      	ldr	r1, [r1, #0]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	f004 f94d 	bl	8008aa8 <memcpy>
 800480e:	e000      	b.n	8004812 <proceedGluedValues+0xba2>
    case 0: break;
 8004810:	bf00      	nop
}
 8004812:	bf00      	nop
												return;
 8004814:	e04e      	b.n	80048b4 <proceedGluedValues+0xc44>
                                        memset(outputData, 0, typeLen);
 8004816:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004818:	2100      	movs	r1, #0
 800481a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800481c:	f004 f96c 	bl	8008af8 <memset>
 8004820:	e048      	b.n	80048b4 <proceedGluedValues+0xc44>
                                    	if(ptr) {
 8004822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004824:	2b00      	cmp	r3, #0
 8004826:	d040      	beq.n	80048aa <proceedGluedValues+0xc3a>
 8004828:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800482c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004830:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004838:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800483c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004844:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004848:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800484a:	601a      	str	r2, [r3, #0]
    switch (n) {
 800484c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004850:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d025      	beq.n	80048a6 <proceedGluedValues+0xc36>
 800485a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800485e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10c      	bne.n	8004882 <proceedGluedValues+0xc12>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8004868:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800486c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004878:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e012      	b.n	80048a8 <proceedGluedValues+0xc38>
    default: memcpy(to, from, n); break;
 8004882:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004886:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800488a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800488e:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 8004892:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004896:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	6809      	ldr	r1, [r1, #0]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	f004 f902 	bl	8008aa8 <memcpy>
 80048a4:	e000      	b.n	80048a8 <proceedGluedValues+0xc38>
    case 0: break;
 80048a6:	bf00      	nop
}
 80048a8:	e004      	b.n	80048b4 <proceedGluedValues+0xc44>
                                    		memset(outputData, 0, typeLen);
 80048aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80048ac:	2100      	movs	r1, #0
 80048ae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80048b0:	f004 f922 	bl	8008af8 <memset>


#ifdef USE_ENTITY_READ_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 80048b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80048be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <proceedGluedValues+0xc6e>
                    __entityCallback(entity, field, ptr, field->rdCallback.context);
 80048c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80048d0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80048d4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80048d8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80048dc:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_READ_CALLBACK */

                Wpos += typeLen;
 80048de:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e6:	4413      	add	r3, r2
 80048e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80048ec:	e001      	b.n	80048f2 <proceedGluedValues+0xc82>
            } else {
                return ENTITY_ERROR;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e014      	b.n	800491c <proceedGluedValues+0xcac>
        for(reg i = 0; i < readRequestCnt; ++i) {
 80048f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048f6:	3301      	adds	r3, #1
 80048f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004900:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004904:	429a      	cmp	r2, r3
 8004906:	f4ff ad63 	bcc.w	80043d0 <proceedGluedValues+0x760>
            }
        }
    }

    (*size) = Wpos;
 800490a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800490e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004918:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 800491a:	2301      	movs	r3, #1
}
 800491c:	4618      	mov	r0, r3
 800491e:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8004922:	46bd      	mov	sp, r7
 8004924:	bd90      	pop	{r4, r7, pc}
 8004926:	bf00      	nop

08004928 <rawParser_dma_init>:
    }
    return self;
}

int rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af02      	add	r7, sp, #8
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: No input data valid ");
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <rawParser_dma_init+0x32>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4619      	mov	r1, r3
 8004948:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <rawParser_dma_init+0xb0>)
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2348      	movs	r3, #72	; 0x48
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <rawParser_dma_init+0xb4>)
 8004950:	4823      	ldr	r0, [pc, #140]	; (80049e0 <rawParser_dma_init+0xb8>)
 8004952:	f000 fcff 	bl	8005354 <__M_Error>
 8004956:	2300      	movs	r3, #0
 8004958:	e03a      	b.n	80049d0 <rawParser_dma_init+0xa8>

    self->m_startByte = packStart;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	701a      	strb	r2, [r3, #0]
    self->m_receivePackLen = 0;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
    self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	22ff      	movs	r2, #255	; 0xff
 800496a:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	22ff      	movs	r2, #255	; 0xff
 8004972:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

    self->m_triggerSB = 0;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
    self->m_receivePos = 0;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    self->m_receiveReadPos = 0;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    self->m_receiveHandlePos = 0;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    self->TX.data = self->m_sendBuffer;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#else
    self->TX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    self->TX.size = 0;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
    self->RX.data = self->m_receiveFrameBuffer;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 7202 	add.w	r2, r3, #520	; 0x208
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
#else
    self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

    self->RX.size = 0;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

    self->uniRXPosition = 0;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return D_RAW_P_OK;
 80049ce:	2301      	movs	r3, #1
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	0800e9dc 	.word	0x0800e9dc
 80049dc:	0800e950 	.word	0x0800e950
 80049e0:	0800e98c 	.word	0x0800e98c

080049e4 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af04      	add	r7, sp, #16
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
 80049f0:	4613      	mov	r3, r2
 80049f2:	70bb      	strb	r3, [r7, #2]
    if (newFrame) {
 80049f4:	78bb      	ldrb	r3, [r7, #2]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
    	//M_Assert_Warning(self->receiveState < RAW_P_DMA_RECEIVE_CRC_0 , M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: last packet error!!!");

    	self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

        self->m_receiveHandlePos = 0;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
    }

    switch(self->receiveState) {
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 8004a18:	2b0d      	cmp	r3, #13
 8004a1a:	f200 80d1 	bhi.w	8004bc0 <RawParser_dma_proceedByte+0x1dc>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <RawParser_dma_proceedByte+0x40>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a5d 	.word	0x08004a5d
 8004a28:	08004bc1 	.word	0x08004bc1
 8004a2c:	08004bc1 	.word	0x08004bc1
 8004a30:	08004aeb 	.word	0x08004aeb
 8004a34:	08004b3d 	.word	0x08004b3d
 8004a38:	08004bc1 	.word	0x08004bc1
 8004a3c:	08004bc1 	.word	0x08004bc1
 8004a40:	08004bc1 	.word	0x08004bc1
 8004a44:	08004bc1 	.word	0x08004bc1
 8004a48:	08004bc1 	.word	0x08004bc1
 8004a4c:	08004bc1 	.word	0x08004bc1
 8004a50:	08004bc1 	.word	0x08004bc1
 8004a54:	08004b85 	.word	0x08004b85
 8004a58:	08004ba9 	.word	0x08004ba9

    case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fd f950 	bl	8001d0c <fast_crc8_maxim_byte>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        if(RECEIVE_EXTENDED_LEN_CMD == ch) {
            self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
        } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

            const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	78fa      	ldrb	r2, [r7, #3]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d902      	bls.n	8004a86 <RawParser_dma_proceedByte+0xa2>
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	e000      	b.n	8004a88 <RawParser_dma_proceedByte+0xa4>
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6053      	str	r3, [r2, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	60bb      	str	r3, [r7, #8]
            self->m_receiveHandlePos = 0;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

            M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa8:	d803      	bhi.n	8004ab2 <RawParser_dma_proceedByte+0xce>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 8089 	bne.w	8004bc4 <RawParser_dma_proceedByte+0x1e0>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab8:	d802      	bhi.n	8004ac0 <RawParser_dma_proceedByte+0xdc>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <RawParser_dma_proceedByte+0xe0>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <RawParser_dma_proceedByte+0xe2>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	b2d9      	uxtb	r1, r3
 8004ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004acc:	9302      	str	r3, [sp, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <RawParser_dma_proceedByte+0x1ec>)
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	23cd      	movs	r3, #205	; 0xcd
 8004ad8:	4a3e      	ldr	r2, [pc, #248]	; (8004bd4 <RawParser_dma_proceedByte+0x1f0>)
 8004ada:	483f      	ldr	r0, [pc, #252]	; (8004bd8 <RawParser_dma_proceedByte+0x1f4>)
 8004adc:	f000 fc58 	bl	8005390 <__M_Warning>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	220c      	movs	r2, #12
 8004ae4:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
        }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        break;}
 8004ae8:	e06c      	b.n	8004bc4 <RawParser_dma_proceedByte+0x1e0>

        break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    case RAW_P_DMA_RECEIVE_DATA: {
        reg rx_pos = self->m_receiveHandlePos;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 8004af0:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd f905 	bl	8001d0c <fast_crc8_maxim_byte>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
#endif /* D_RAW_P_CRC_ENA */

        self->RX.data[rx_pos] = ch;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 2624 	ldr.w	r2, [r3, #1572]	; 0x624
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	701a      	strb	r2, [r3, #0]
        ++rx_pos;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	60fb      	str	r3, [r7, #12]

        if (rx_pos == self->m_receivePackLen) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d103      	bne.n	8004b32 <RawParser_dma_proceedByte+0x14e>

#ifdef D_RAW_P_CRC_ENA
            D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
            self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
            self->RX.size = self->m_receivePackLen;
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
        }

        self->m_receiveHandlePos = rx_pos;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        break;}
 8004b3a:	e044      	b.n	8004bc6 <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

        if(self->m_receiveCalcCRC == ch) {
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d109      	bne.n	8004b5c <RawParser_dma_proceedByte+0x178>
            self->RX.size = self->m_receivePackLen;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	220d      	movs	r2, #13
 8004b56:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
        self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

        break;}
 8004b5a:	e034      	b.n	8004bc6 <RawParser_dma_proceedByte+0x1e2>
            M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive CRC8 error, rx_crc: %d, calc_crc: %d", ch, self->m_receiveCalcCRC);
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	f892 2608 	ldrb.w	r2, [r2, #1544]	; 0x608
 8004b64:	9202      	str	r2, [sp, #8]
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	4b1c      	ldr	r3, [pc, #112]	; (8004bdc <RawParser_dma_proceedByte+0x1f8>)
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	f240 1323 	movw	r3, #291	; 0x123
 8004b70:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <RawParser_dma_proceedByte+0x1f0>)
 8004b72:	2101      	movs	r1, #1
 8004b74:	481a      	ldr	r0, [pc, #104]	; (8004be0 <RawParser_dma_proceedByte+0x1fc>)
 8004b76:	f000 fc0b 	bl	8005390 <__M_Warning>
            self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	220c      	movs	r2, #12
 8004b7e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        break;}
 8004b82:	e020      	b.n	8004bc6 <RawParser_dma_proceedByte+0x1e2>

#endif /* D_RAW_P_CRC_ENA */


    case RAW_P_DMA_RECEIVE_ERR:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive error, byte: %d, rx_len: %d, max_rxlen: %d", ch, self->m_receivePackLen, D_RAW_P_RX_BUF_SIZE);
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6852      	ldr	r2, [r2, #4]
 8004b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b8e:	9103      	str	r1, [sp, #12]
 8004b90:	9202      	str	r2, [sp, #8]
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <RawParser_dma_proceedByte+0x200>)
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8004b9c:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <RawParser_dma_proceedByte+0x1f0>)
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	480f      	ldr	r0, [pc, #60]	; (8004be0 <RawParser_dma_proceedByte+0x1fc>)
 8004ba2:	f000 fbf5 	bl	8005390 <__M_Warning>
        break;
 8004ba6:	e00e      	b.n	8004bc6 <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_OK:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: LAST Received OK, byte: %d is not received because no SB", ch);
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <RawParser_dma_proceedByte+0x204>)
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004bb4:	4a07      	ldr	r2, [pc, #28]	; (8004bd4 <RawParser_dma_proceedByte+0x1f0>)
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	4809      	ldr	r0, [pc, #36]	; (8004be0 <RawParser_dma_proceedByte+0x1fc>)
 8004bba:	f000 fbe9 	bl	8005390 <__M_Warning>
        break;
 8004bbe:	e002      	b.n	8004bc6 <RawParser_dma_proceedByte+0x1e2>

    default:
        break;
 8004bc0:	bf00      	nop
 8004bc2:	e000      	b.n	8004bc6 <RawParser_dma_proceedByte+0x1e2>
        break;}
 8004bc4:	bf00      	nop
    }
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	0800ea88 	.word	0x0800ea88
 8004bd4:	0800e950 	.word	0x0800e950
 8004bd8:	0800ea58 	.word	0x0800ea58
 8004bdc:	0800eae4 	.word	0x0800eae4
 8004be0:	0800ead8 	.word	0x0800ead8
 8004be4:	0800eb2c 	.word	0x0800eb2c
 8004be8:	0800eb7c 	.word	0x0800eb7c

08004bec <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid input");
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d110      	bne.n	8004c1c <RawParser_dma_proceed+0x30>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf0c      	ite	eq
 8004c00:	2301      	moveq	r3, #1
 8004c02:	2300      	movne	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	4619      	mov	r1, r3
 8004c08:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <RawParser_dma_proceed+0xec>)
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8004c10:	4a32      	ldr	r2, [pc, #200]	; (8004cdc <RawParser_dma_proceed+0xf0>)
 8004c12:	4833      	ldr	r0, [pc, #204]	; (8004ce0 <RawParser_dma_proceed+0xf4>)
 8004c14:	f000 fb9e 	bl	8005354 <__M_Error>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e059      	b.n	8004cd0 <RawParser_dma_proceed+0xe4>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	613b      	str	r3, [r7, #16]
            reg   receiveReadPos      = self->m_receiveReadPos    & (D_RAW_P_RX_BUF_SIZE - 1U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	617b      	str	r3, [r7, #20]
    self->RX.size = 0;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

//    if(receivePos_saved == receiveReadPos) { // may be needed
//        return &self->RX;
//    }

    while (receivePos_saved != receiveReadPos) {
 8004c3c:	e03b      	b.n	8004cb6 <RawParser_dma_proceed+0xca>

        const u8 ch = self->m_receiveBuffer[receiveReadPos];
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4413      	add	r3, r2
 8004c44:	3308      	adds	r3, #8
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	73fb      	strb	r3, [r7, #15]

        if (self->m_triggerSB) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 360a 	ldrb.w	r3, [r3, #1546]	; 0x60a
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d016      	beq.n	8004c82 <RawParser_dma_proceed+0x96>
            if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d106      	bne.n	8004c6c <RawParser_dma_proceed+0x80>
                RawParser_dma_proceedByte(self, ch, 0);
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2200      	movs	r2, #0
 8004c62:	4619      	mov	r1, r3
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff febd 	bl	80049e4 <RawParser_dma_proceedByte>
 8004c6a:	e005      	b.n	8004c78 <RawParser_dma_proceed+0x8c>
            } else { //{SB}{!SB} -> {SB} and newframe
                RawParser_dma_proceedByte(self, ch, 1);
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff feb6 	bl	80049e4 <RawParser_dma_proceedByte>
            }
            self->m_triggerSB = 0;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8004c80:	e00f      	b.n	8004ca2 <RawParser_dma_proceed+0xb6>
        } else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d104      	bne.n	8004c96 <RawParser_dma_proceed+0xaa>
            self->m_triggerSB = 1;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8004c94:	e005      	b.n	8004ca2 <RawParser_dma_proceed+0xb6>
        } else { //{!SB}{!SB} -> {!SB}
            RawParser_dma_proceedByte(self, ch, 0);
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fea1 	bl	80049e4 <RawParser_dma_proceedByte>
        }

        receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004caa:	617b      	str	r3, [r7, #20]

        if(self->RX.size != 0) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <RawParser_dma_proceed+0xd4>
    while (receivePos_saved != receiveReadPos) {
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d1bf      	bne.n	8004c3e <RawParser_dma_proceed+0x52>
 8004cbe:	e000      	b.n	8004cc2 <RawParser_dma_proceed+0xd6>
#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
            /* Now decode -- encoded codeword size must be passed */
            rscode_decode(&self->rs_ecc, self->RX.data, self->RX.size);
            self->RX.size -= RSCODE_NPAR;
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */
            break;
 8004cc0:	bf00      	nop
        }
    }

    self->m_receiveReadPos = receiveReadPos;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    return &self->RX;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f203 6324 	addw	r3, r3, #1572	; 0x624
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	0800ebf4 	.word	0x0800ebf4
 8004cdc:	0800e950 	.word	0x0800e950
 8004ce0:	0800ebd0 	.word	0x0800ebd0

08004ce4 <RawParser_dma_shieldFrame>:

// slow shield functions (slow & more copy)-----------------------------------------------------------------------------------------
RawParser_Frame_t* RawParser_dma_shieldFrame(RawParser_dma_t* const self, const u8* data, reg len)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af04      	add	r7, sp, #16
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_shieldFrame: No valid input");
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d110      	bne.n	8004d18 <RawParser_dma_shieldFrame+0x34>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	4619      	mov	r1, r3
 8004d04:	4b57      	ldr	r3, [pc, #348]	; (8004e64 <RawParser_dma_shieldFrame+0x180>)
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 8004d0c:	4a56      	ldr	r2, [pc, #344]	; (8004e68 <RawParser_dma_shieldFrame+0x184>)
 8004d0e:	4857      	ldr	r0, [pc, #348]	; (8004e6c <RawParser_dma_shieldFrame+0x188>)
 8004d10:	f000 fb20 	bl	8005354 <__M_Error>
 8004d14:	2300      	movs	r3, #0
 8004d16:	e0a1      	b.n	8004e5c <RawParser_dma_shieldFrame+0x178>
    M_Assert_Break((data == (u8*)NULL) || len == 0, M_EMPTY, {
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <RawParser_dma_shieldFrame+0x40>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d119      	bne.n	8004d58 <RawParser_dma_shieldFrame+0x74>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <RawParser_dma_shieldFrame+0x4c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <RawParser_dma_shieldFrame+0x50>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <RawParser_dma_shieldFrame+0x52>
 8004d34:	2300      	movs	r3, #0
 8004d36:	b2d9      	uxtb	r1, r3
 8004d38:	4b4a      	ldr	r3, [pc, #296]	; (8004e64 <RawParser_dma_shieldFrame+0x180>)
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	f240 13d3 	movw	r3, #467	; 0x1d3
 8004d40:	4a49      	ldr	r2, [pc, #292]	; (8004e68 <RawParser_dma_shieldFrame+0x184>)
 8004d42:	484b      	ldr	r0, [pc, #300]	; (8004e70 <RawParser_dma_shieldFrame+0x18c>)
 8004d44:	f000 fb06 	bl	8005354 <__M_Error>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8004d56:	e081      	b.n	8004e5c <RawParser_dma_shieldFrame+0x178>

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    RawParser_dma_startTransmittPacket(self, (len + RSCODE_NPAR));
    rs_encode_data_onlyParity(&self->rs_ecc, data, len);
#else
    RawParser_dma_startTransmittPacket(self, len);
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f892 	bl	8004e84 <RawParser_dma_startTransmittPacket>

#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    while(len--) {
 8004d60:	e073      	b.n	8004e4a <RawParser_dma_shieldFrame+0x166>
        RawParser_dma_addTxByteCRC(self, *data++);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	60ba      	str	r2, [r7, #8]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	76fb      	strb	r3, [r7, #27]

#ifdef D_RAW_P_CRC_ENA
// elementary byte adding functions with calc crc----------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_addTxByteCRC(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10e      	bne.n	8004d96 <RawParser_dma_shieldFrame+0xb2>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <RawParser_dma_shieldFrame+0x190>)
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	23a1      	movs	r3, #161	; 0xa1
 8004d8c:	4a3a      	ldr	r2, [pc, #232]	; (8004e78 <RawParser_dma_shieldFrame+0x194>)
 8004d8e:	4837      	ldr	r0, [pc, #220]	; (8004e6c <RawParser_dma_shieldFrame+0x188>)
 8004d90:	f000 fae0 	bl	8005354 <__M_Error>
 8004d94:	e059      	b.n	8004e4a <RawParser_dma_shieldFrame+0x166>
#   ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#   endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    // move to cash
    u8* const   TX_data   = self->TX.data;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004d9c:	617b      	str	r3, [r7, #20]
    reg         TX_size   = self->TX.size;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004da4:	613b      	str	r3, [r7, #16]


#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2bfd      	cmp	r3, #253	; 0xfd
 8004daa:	d113      	bne.n	8004dd4 <RawParser_dma_shieldFrame+0xf0>
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2bfd      	cmp	r3, #253	; 0xfd
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	4619      	mov	r1, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	22fd      	movs	r2, #253	; 0xfd
 8004dc0:	9202      	str	r2, [sp, #8]
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <RawParser_dma_shieldFrame+0x198>)
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	23b1      	movs	r3, #177	; 0xb1
 8004dca:	4a2b      	ldr	r2, [pc, #172]	; (8004e78 <RawParser_dma_shieldFrame+0x194>)
 8004dcc:	482c      	ldr	r0, [pc, #176]	; (8004e80 <RawParser_dma_shieldFrame+0x19c>)
 8004dce:	f000 fac1 	bl	8005354 <__M_Error>
 8004dd2:	e03a      	b.n	8004e4a <RawParser_dma_shieldFrame+0x166>
#   else
    M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */


    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004dda:	7efa      	ldrb	r2, [r7, #27]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fc ff94 	bl	8001d0c <fast_crc8_maxim_byte>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609

    TX_data[TX_size++] = byte;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	613a      	str	r2, [r7, #16]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	7efa      	ldrb	r2, [r7, #27]
 8004dfa:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	7efa      	ldrb	r2, [r7, #27]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d11d      	bne.n	8004e42 <RawParser_dma_shieldFrame+0x15e>

#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2bfd      	cmp	r3, #253	; 0xfd
 8004e0a:	d113      	bne.n	8004e34 <RawParser_dma_shieldFrame+0x150>
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2bfd      	cmp	r3, #253	; 0xfd
 8004e10:	bf0c      	ite	eq
 8004e12:	2301      	moveq	r3, #1
 8004e14:	2300      	movne	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	4619      	mov	r1, r3
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	22fd      	movs	r2, #253	; 0xfd
 8004e20:	9202      	str	r2, [sp, #8]
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <RawParser_dma_shieldFrame+0x198>)
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	23bd      	movs	r3, #189	; 0xbd
 8004e2a:	4a13      	ldr	r2, [pc, #76]	; (8004e78 <RawParser_dma_shieldFrame+0x194>)
 8004e2c:	4814      	ldr	r0, [pc, #80]	; (8004e80 <RawParser_dma_shieldFrame+0x19c>)
 8004e2e:	f000 fa91 	bl	8005354 <__M_Error>
 8004e32:	e00a      	b.n	8004e4a <RawParser_dma_shieldFrame+0x166>
#   else
        M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */

        TX_data[TX_size++] = byte;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	613a      	str	r2, [r7, #16]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	7efa      	ldrb	r2, [r7, #27]
 8004e40:	701a      	strb	r2, [r3, #0]
    }

    self->TX.size = TX_size;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    while(len--) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d186      	bne.n	8004d62 <RawParser_dma_shieldFrame+0x7e>
    for (unsigned i = 0; i < RSCODE_NPAR; ++i) {
        RawParser_dma_addTxByteCRC(self, pBytes[RSCODE_NPAR-1-i]);
    }
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return RawParser_dma_finishTransmittPacket(self);
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f91f 	bl	8005098 <RawParser_dma_finishTransmittPacket>
 8004e5a:	4603      	mov	r3, r0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	0800ec1c 	.word	0x0800ec1c
 8004e68:	0800e950 	.word	0x0800e950
 8004e6c:	0800ebd0 	.word	0x0800ebd0
 8004e70:	0800ec48 	.word	0x0800ec48
 8004e74:	0800eca4 	.word	0x0800eca4
 8004e78:	0800ec68 	.word	0x0800ec68
 8004e7c:	0800ecfc 	.word	0x0800ecfc
 8004e80:	0800ecd0 	.word	0x0800ecd0

08004e84 <RawParser_dma_startTransmittPacket>:

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
void RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen) /////////////////////////////////////////////////////
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08c      	sub	sp, #48	; 0x30
 8004e88:	af04      	add	r7, sp, #16
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input");
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10f      	bne.n	8004eb4 <RawParser_dma_startTransmittPacket+0x30>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4b70      	ldr	r3, [pc, #448]	; (8005064 <RawParser_dma_startTransmittPacket+0x1e0>)
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004eaa:	4a6f      	ldr	r2, [pc, #444]	; (8005068 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004eac:	486f      	ldr	r0, [pc, #444]	; (800506c <RawParser_dma_startTransmittPacket+0x1e8>)
 8004eae:	f000 fa51 	bl	8005354 <__M_Error>
 8004eb2:	e0d3      	b.n	800505c <RawParser_dma_startTransmittPacket+0x1d8>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    M_Assert_Break((predictedLen == 0), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length");
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10f      	bne.n	8004eda <RawParser_dma_startTransmittPacket+0x56>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4b69      	ldr	r3, [pc, #420]	; (8005070 <RawParser_dma_startTransmittPacket+0x1ec>)
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	f240 13fd 	movw	r3, #509	; 0x1fd
 8004ed0:	4a65      	ldr	r2, [pc, #404]	; (8005068 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004ed2:	4868      	ldr	r0, [pc, #416]	; (8005074 <RawParser_dma_startTransmittPacket+0x1f0>)
 8004ed4:	f000 fa3e 	bl	8005354 <__M_Error>
 8004ed8:	e0c0      	b.n	800505c <RawParser_dma_startTransmittPacket+0x1d8>

#if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE // control undefined behavior
    M_Assert_Break( ((predictedLen + 4) > (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_MAX_PROTOCOL_LEN);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2bfd      	cmp	r3, #253	; 0xfd
 8004ee0:	d914      	bls.n	8004f0c <RawParser_dma_startTransmittPacket+0x88>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	2bfd      	cmp	r3, #253	; 0xfd
 8004ee8:	bf8c      	ite	hi
 8004eea:	2301      	movhi	r3, #1
 8004eec:	2300      	movls	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	23fe      	movs	r3, #254	; 0xfe
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	4b5f      	ldr	r3, [pc, #380]	; (8005078 <RawParser_dma_startTransmittPacket+0x1f4>)
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f02:	4a59      	ldr	r2, [pc, #356]	; (8005068 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004f04:	485d      	ldr	r0, [pc, #372]	; (800507c <RawParser_dma_startTransmittPacket+0x1f8>)
 8004f06:	f000 fa25 	bl	8005354 <__M_Error>
 8004f0a:	e0a7      	b.n	800505c <RawParser_dma_startTransmittPacket+0x1d8>
    M_Assert_Warning((predictedLen > (D_RAW_P_MAX_PROTOCOL_LEN >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_MAX_PROTOCOL_LEN >> 1));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f10:	d912      	bls.n	8004f38 <RawParser_dma_startTransmittPacket+0xb4>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b7f      	cmp	r3, #127	; 0x7f
 8004f16:	bf8c      	ite	hi
 8004f18:	2301      	movhi	r3, #1
 8004f1a:	2300      	movls	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	4619      	mov	r1, r3
 8004f20:	237f      	movs	r3, #127	; 0x7f
 8004f22:	9302      	str	r3, [sp, #8]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	4b55      	ldr	r3, [pc, #340]	; (8005080 <RawParser_dma_startTransmittPacket+0x1fc>)
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	f240 2301 	movw	r3, #513	; 0x201
 8004f30:	4a4d      	ldr	r2, [pc, #308]	; (8005068 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004f32:	4854      	ldr	r0, [pc, #336]	; (8005084 <RawParser_dma_startTransmittPacket+0x200>)
 8004f34:	f000 fa2c 	bl	8005390 <__M_Warning>
    M_Assert_Warning((predictedLen > (D_RAW_P_TX_BUF_SIZE >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - buffer size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_TX_BUF_SIZE >> 1));
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */


#ifdef D_RAW_P_CRC_ENA
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	22ff      	movs	r2, #255	; 0xff
 8004f3c:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    D_RAW_P_CRC_START(self->m_transmittCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

    const u8 startByte = self->m_startByte;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	77fb      	strb	r3, [r7, #31]


    self->TX.size = 0;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    self->TX.data[self->TX.size++] = startByte;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004f5a:	1c58      	adds	r0, r3, #1
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	f8c1 0620 	str.w	r0, [r1, #1568]	; 0x620
 8004f62:	4413      	add	r3, r2
 8004f64:	7ffa      	ldrb	r2, [r7, #31]
 8004f66:	701a      	strb	r2, [r3, #0]
        RawParser_dma_addTxByteCRC(self, (u8)((predictedLen >> 8U) & 0x000000FFUL));

    } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        RawParser_dma_addTxByteCRC(self, (u8)(((predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen) & 0x000000FFUL));
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d304      	bcc.n	8004f7a <RawParser_dma_startTransmittPacket+0xf6>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	3301      	adds	r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	e001      	b.n	8004f7e <RawParser_dma_startTransmittPacket+0xfa>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	61ba      	str	r2, [r7, #24]
 8004f82:	75fb      	strb	r3, [r7, #23]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10e      	bne.n	8004fa8 <RawParser_dma_startTransmittPacket+0x124>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	4619      	mov	r1, r3
 8004f98:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <RawParser_dma_startTransmittPacket+0x204>)
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	23a1      	movs	r3, #161	; 0xa1
 8004f9e:	4a3b      	ldr	r2, [pc, #236]	; (800508c <RawParser_dma_startTransmittPacket+0x208>)
 8004fa0:	4832      	ldr	r0, [pc, #200]	; (800506c <RawParser_dma_startTransmittPacket+0x1e8>)
 8004fa2:	f000 f9d7 	bl	8005354 <__M_Error>
 8004fa6:	e059      	b.n	800505c <RawParser_dma_startTransmittPacket+0x1d8>
    u8* const   TX_data   = self->TX.data;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004fae:	613b      	str	r3, [r7, #16]
    reg         TX_size   = self->TX.size;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004fb6:	60fb      	str	r3, [r7, #12]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2bfd      	cmp	r3, #253	; 0xfd
 8004fbc:	d113      	bne.n	8004fe6 <RawParser_dma_startTransmittPacket+0x162>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2bfd      	cmp	r3, #253	; 0xfd
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	22fd      	movs	r2, #253	; 0xfd
 8004fd2:	9202      	str	r2, [sp, #8]
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <RawParser_dma_startTransmittPacket+0x20c>)
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	23b1      	movs	r3, #177	; 0xb1
 8004fdc:	4a2b      	ldr	r2, [pc, #172]	; (800508c <RawParser_dma_startTransmittPacket+0x208>)
 8004fde:	482d      	ldr	r0, [pc, #180]	; (8005094 <RawParser_dma_startTransmittPacket+0x210>)
 8004fe0:	f000 f9b8 	bl	8005354 <__M_Error>
 8004fe4:	e03a      	b.n	800505c <RawParser_dma_startTransmittPacket+0x1d8>
    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004fec:	7dfa      	ldrb	r2, [r7, #23]
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fc fe8b 	bl	8001d0c <fast_crc8_maxim_byte>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    TX_data[TX_size++] = byte;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	60fa      	str	r2, [r7, #12]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	7dfa      	ldrb	r2, [r7, #23]
 800500c:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	7dfa      	ldrb	r2, [r7, #23]
 8005014:	429a      	cmp	r2, r3
 8005016:	d11d      	bne.n	8005054 <RawParser_dma_startTransmittPacket+0x1d0>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2bfd      	cmp	r3, #253	; 0xfd
 800501c:	d113      	bne.n	8005046 <RawParser_dma_startTransmittPacket+0x1c2>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2bfd      	cmp	r3, #253	; 0xfd
 8005022:	bf0c      	ite	eq
 8005024:	2301      	moveq	r3, #1
 8005026:	2300      	movne	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	4619      	mov	r1, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	22fd      	movs	r2, #253	; 0xfd
 8005032:	9202      	str	r2, [sp, #8]
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	4b16      	ldr	r3, [pc, #88]	; (8005090 <RawParser_dma_startTransmittPacket+0x20c>)
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	23bd      	movs	r3, #189	; 0xbd
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <RawParser_dma_startTransmittPacket+0x208>)
 800503e:	4815      	ldr	r0, [pc, #84]	; (8005094 <RawParser_dma_startTransmittPacket+0x210>)
 8005040:	f000 f988 	bl	8005354 <__M_Error>
 8005044:	e00a      	b.n	800505c <RawParser_dma_startTransmittPacket+0x1d8>
        TX_data[TX_size++] = byte;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	60fa      	str	r2, [r7, #12]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	7dfa      	ldrb	r2, [r7, #23]
 8005052:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */
}
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	0800ed4c 	.word	0x0800ed4c
 8005068:	0800e950 	.word	0x0800e950
 800506c:	0800ebd0 	.word	0x0800ebd0
 8005070:	0800ed94 	.word	0x0800ed94
 8005074:	0800ed80 	.word	0x0800ed80
 8005078:	0800ee08 	.word	0x0800ee08
 800507c:	0800edd0 	.word	0x0800edd0
 8005080:	0800ee88 	.word	0x0800ee88
 8005084:	0800ee54 	.word	0x0800ee54
 8005088:	0800eca4 	.word	0x0800eca4
 800508c:	0800ec68 	.word	0x0800ec68
 8005090:	0800ecfc 	.word	0x0800ecfc
 8005094:	0800ecd0 	.word	0x0800ecd0

08005098 <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af04      	add	r7, sp, #16
 800509e:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_startTransmittPacket: No valid input");
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d110      	bne.n	80050c8 <RawParser_dma_finishTransmittPacket+0x30>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bf0c      	ite	eq
 80050ac:	2301      	moveq	r3, #1
 80050ae:	2300      	movne	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <RawParser_dma_finishTransmittPacket+0x10c>)
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	f44f 730a 	mov.w	r3, #552	; 0x228
 80050bc:	4a3a      	ldr	r2, [pc, #232]	; (80051a8 <RawParser_dma_finishTransmittPacket+0x110>)
 80050be:	483b      	ldr	r0, [pc, #236]	; (80051ac <RawParser_dma_finishTransmittPacket+0x114>)
 80050c0:	f000 f948 	bl	8005354 <__M_Error>
 80050c4:	2300      	movs	r3, #0
 80050c6:	e068      	b.n	800519a <RawParser_dma_finishTransmittPacket+0x102>
#ifdef D_RAW_P_CRC_ENA
    D_RAW_P_CRC_FINAL(self->m_transmittCalcCRC);

#   ifdef D_RAW_P_USE_CRC8

    RawParser_dma_addTxByte(self, self->m_transmittCalcCRC);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 2609 	ldrb.w	r2, [r3, #1545]	; 0x609
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	4613      	mov	r3, r2
 80050d4:	74fb      	strb	r3, [r7, #19]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid input");
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10e      	bne.n	80050fa <RawParser_dma_finishTransmittPacket+0x62>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf0c      	ite	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	2300      	movne	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	4619      	mov	r1, r3
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <RawParser_dma_finishTransmittPacket+0x118>)
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	2379      	movs	r3, #121	; 0x79
 80050f0:	4a30      	ldr	r2, [pc, #192]	; (80051b4 <RawParser_dma_finishTransmittPacket+0x11c>)
 80050f2:	482e      	ldr	r0, [pc, #184]	; (80051ac <RawParser_dma_finishTransmittPacket+0x114>)
 80050f4:	f000 f92e 	bl	8005354 <__M_Error>
 80050f8:	e04c      	b.n	8005194 <RawParser_dma_finishTransmittPacket+0xfc>
    u8* const   TX_data   = self->TX.data;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8005100:	60fb      	str	r3, [r7, #12]
    reg         TX_size   = self->TX.size;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8005108:	60bb      	str	r3, [r7, #8]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2bfd      	cmp	r3, #253	; 0xfd
 800510e:	d113      	bne.n	8005138 <RawParser_dma_finishTransmittPacket+0xa0>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2bfd      	cmp	r3, #253	; 0xfd
 8005114:	bf0c      	ite	eq
 8005116:	2301      	moveq	r3, #1
 8005118:	2300      	movne	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	4619      	mov	r1, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	3301      	adds	r3, #1
 8005122:	22fd      	movs	r2, #253	; 0xfd
 8005124:	9202      	str	r2, [sp, #8]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <RawParser_dma_finishTransmittPacket+0x120>)
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2389      	movs	r3, #137	; 0x89
 800512e:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <RawParser_dma_finishTransmittPacket+0x11c>)
 8005130:	4822      	ldr	r0, [pc, #136]	; (80051bc <RawParser_dma_finishTransmittPacket+0x124>)
 8005132:	f000 f90f 	bl	8005354 <__M_Error>
 8005136:	e02d      	b.n	8005194 <RawParser_dma_finishTransmittPacket+0xfc>
    TX_data[TX_size++] = byte;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	60ba      	str	r2, [r7, #8]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	7cfa      	ldrb	r2, [r7, #19]
 8005144:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	7cfa      	ldrb	r2, [r7, #19]
 800514c:	429a      	cmp	r2, r3
 800514e:	d11d      	bne.n	800518c <RawParser_dma_finishTransmittPacket+0xf4>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2bfd      	cmp	r3, #253	; 0xfd
 8005154:	d113      	bne.n	800517e <RawParser_dma_finishTransmittPacket+0xe6>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2bfd      	cmp	r3, #253	; 0xfd
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	4619      	mov	r1, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	3301      	adds	r3, #1
 8005168:	22fd      	movs	r2, #253	; 0xfd
 800516a:	9202      	str	r2, [sp, #8]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <RawParser_dma_finishTransmittPacket+0x120>)
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2392      	movs	r3, #146	; 0x92
 8005174:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <RawParser_dma_finishTransmittPacket+0x11c>)
 8005176:	4811      	ldr	r0, [pc, #68]	; (80051bc <RawParser_dma_finishTransmittPacket+0x124>)
 8005178:	f000 f8ec 	bl	8005354 <__M_Error>
 800517c:	e00a      	b.n	8005194 <RawParser_dma_finishTransmittPacket+0xfc>
        TX_data[TX_size++] = byte;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	60ba      	str	r2, [r7, #8]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	7cfa      	ldrb	r2, [r7, #19]
 800518a:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    RawParser_dma_addTxByte(self, (u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

    return &self->TX;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f203 631c 	addw	r3, r3, #1564	; 0x61c
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	0800ed4c 	.word	0x0800ed4c
 80051a8:	0800e950 	.word	0x0800e950
 80051ac:	0800ebd0 	.word	0x0800ebd0
 80051b0:	0800ef2c 	.word	0x0800ef2c
 80051b4:	0800ec68 	.word	0x0800ec68
 80051b8:	0800ef54 	.word	0x0800ef54
 80051bc:	0800ecd0 	.word	0x0800ecd0

080051c0 <__M_SEND_ASSERT_MSG>:

static inline void __M_SEND_ASSERT_MSG(const char* const header,
                                const char* const expr_str, const unsigned char expr,
                                const char* const file, const int line,
                                const char* const msg, va_list args)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	71fb      	strb	r3, [r7, #7]
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)

    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b5b      	cmp	r3, #91	; 0x5b
 80051d6:	d175      	bne.n	80052c4 <__M_SEND_ASSERT_MSG+0x104>
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	3302      	adds	r3, #2
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b5d      	cmp	r3, #93	; 0x5d
 80051e0:	d170      	bne.n	80052c4 <__M_SEND_ASSERT_MSG+0x104>

        int assertEna = 1;
 80051e2:	2301      	movs	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
        char* descr = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]

        switch(__M_ASSERT_DATA(msg)) {
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	3301      	adds	r3, #1
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b73      	cmp	r3, #115	; 0x73
 80051f2:	d015      	beq.n	8005220 <__M_SEND_ASSERT_MSG+0x60>
 80051f4:	2b73      	cmp	r3, #115	; 0x73
 80051f6:	dc23      	bgt.n	8005240 <__M_SEND_ASSERT_MSG+0x80>
 80051f8:	2b65      	cmp	r3, #101	; 0x65
 80051fa:	d019      	beq.n	8005230 <__M_SEND_ASSERT_MSG+0x70>
 80051fc:	2b65      	cmp	r3, #101	; 0x65
 80051fe:	dc1f      	bgt.n	8005240 <__M_SEND_ASSERT_MSG+0x80>
 8005200:	2b30      	cmp	r3, #48	; 0x30
 8005202:	f000 8095 	beq.w	8005330 <__M_SEND_ASSERT_MSG+0x170>
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d11a      	bne.n	8005240 <__M_SEND_ASSERT_MSG+0x80>

        case 'd':
            // get library info
            assertEna = va_arg(args, const int);
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	1d1a      	adds	r2, r3, #4
 800520e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	1d1a      	adds	r2, r3, #4
 8005218:	62ba      	str	r2, [r7, #40]	; 0x28
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	613b      	str	r3, [r7, #16]
            break;
 800521e:	e00f      	b.n	8005240 <__M_SEND_ASSERT_MSG+0x80>

        case 's':
            // get library info
            assertEna = 1;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	1d1a      	adds	r2, r3, #4
 8005228:	62ba      	str	r2, [r7, #40]	; 0x28
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	613b      	str	r3, [r7, #16]
            break;
 800522e:	e007      	b.n	8005240 <__M_SEND_ASSERT_MSG+0x80>

        case 'e':
            // get library info
            assertEna = va_arg(args, const int);
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	62ba      	str	r2, [r7, #40]	; 0x28
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	617b      	str	r3, [r7, #20]
            descr = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]
            break;
 800523e:	bf00      	nop

        }

#   if !defined(M_MESSAGE_ALWAYS_ENABLE)
        // send message if enabled message
        if(assertEna) {
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d076      	beq.n	8005334 <__M_SEND_ASSERT_MSG+0x174>
#   endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) */
            fprintf(stderr, "\n%s\n", header);
 8005246:	4b3d      	ldr	r3, [pc, #244]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	493c      	ldr	r1, [pc, #240]	; (8005340 <__M_SEND_ASSERT_MSG+0x180>)
 8005250:	4618      	mov	r0, r3
 8005252:	f003 fb11 	bl	8008878 <fiprintf>
            fprintf(stderr, "Library Name: %s\n", descr);
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4939      	ldr	r1, [pc, #228]	; (8005344 <__M_SEND_ASSERT_MSG+0x184>)
 8005260:	4618      	mov	r0, r3
 8005262:	f003 fb09 	bl	8008878 <fiprintf>
            fprintf(stderr, "Assert failed:\t");
 8005266:	4b35      	ldr	r3, [pc, #212]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	220f      	movs	r2, #15
 800526e:	2101      	movs	r1, #1
 8005270:	4835      	ldr	r0, [pc, #212]	; (8005348 <__M_SEND_ASSERT_MSG+0x188>)
 8005272:	f003 fbd3 	bl	8008a1c <fwrite>
            vfprintf(stderr, &msg[3], args);
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68d8      	ldr	r0, [r3, #12]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	3303      	adds	r3, #3
 8005280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005282:	4619      	mov	r1, r3
 8005284:	f003 fe90 	bl	8008fa8 <vfiprintf>
            fprintf(stderr, "\n");
 8005288:	4b2c      	ldr	r3, [pc, #176]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	4619      	mov	r1, r3
 8005290:	200a      	movs	r0, #10
 8005292:	f003 fb3b 	bl	800890c <fputc>

#   if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68d8      	ldr	r0, [r3, #12]
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	492a      	ldr	r1, [pc, #168]	; (800534c <__M_SEND_ASSERT_MSG+0x18c>)
 80052a2:	f003 fae9 	bl	8008878 <fiprintf>
#   endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#   if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 80052a6:	4b25      	ldr	r3, [pc, #148]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68d8      	ldr	r0, [r3, #12]
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	4927      	ldr	r1, [pc, #156]	; (8005350 <__M_SEND_ASSERT_MSG+0x190>)
 80052b2:	f003 fae1 	bl	8008878 <fiprintf>
#   endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */
            fflush(stderr);
 80052b6:	4b21      	ldr	r3, [pc, #132]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4618      	mov	r0, r3
 80052be:	f003 f9f3 	bl	80086a8 <fflush>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 80052c2:	e037      	b.n	8005334 <__M_SEND_ASSERT_MSG+0x174>
        (void)assertEna;
    } else {

#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

        fprintf(stderr, "\n%s\n", header);
 80052c4:	4b1d      	ldr	r3, [pc, #116]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	491c      	ldr	r1, [pc, #112]	; (8005340 <__M_SEND_ASSERT_MSG+0x180>)
 80052ce:	4618      	mov	r0, r3
 80052d0:	f003 fad2 	bl	8008878 <fiprintf>
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
        fprintf(stderr, "Assert failed:\t");
 80052d4:	4b19      	ldr	r3, [pc, #100]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	220f      	movs	r2, #15
 80052dc:	2101      	movs	r1, #1
 80052de:	481a      	ldr	r0, [pc, #104]	; (8005348 <__M_SEND_ASSERT_MSG+0x188>)
 80052e0:	f003 fb9c 	bl	8008a1c <fwrite>
        vfprintf(stderr, msg, args);
 80052e4:	4b15      	ldr	r3, [pc, #84]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ee:	4618      	mov	r0, r3
 80052f0:	f003 fe5a 	bl	8008fa8 <vfiprintf>
        fprintf(stderr, "\n");
 80052f4:	4b11      	ldr	r3, [pc, #68]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	4619      	mov	r1, r3
 80052fc:	200a      	movs	r0, #10
 80052fe:	f003 fb05 	bl	800890c <fputc>
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

#if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8005302:	4b0e      	ldr	r3, [pc, #56]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68d8      	ldr	r0, [r3, #12]
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	490f      	ldr	r1, [pc, #60]	; (800534c <__M_SEND_ASSERT_MSG+0x18c>)
 800530e:	f003 fab3 	bl	8008878 <fiprintf>
#endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68d8      	ldr	r0, [r3, #12]
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	490c      	ldr	r1, [pc, #48]	; (8005350 <__M_SEND_ASSERT_MSG+0x190>)
 800531e:	f003 faab 	bl	8008878 <fiprintf>
#endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */

        fflush(stderr);
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <__M_SEND_ASSERT_MSG+0x17c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4618      	mov	r0, r3
 800532a:	f003 f9bd 	bl	80086a8 <fflush>
 800532e:	e002      	b.n	8005336 <__M_SEND_ASSERT_MSG+0x176>
            return;
 8005330:	bf00      	nop
 8005332:	e000      	b.n	8005336 <__M_SEND_ASSERT_MSG+0x176>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8005334:	bf00      	nop
    (void)expr;
    (void)file;
    (void)line;
    (void)msg;
    (void)args;
}
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	2000000c 	.word	0x2000000c
 8005340:	0800f0a4 	.word	0x0800f0a4
 8005344:	0800f0ac 	.word	0x0800f0ac
 8005348:	0800f0c0 	.word	0x0800f0c0
 800534c:	0800f0d0 	.word	0x0800f0d0
 8005350:	0800f0ec 	.word	0x0800f0ec

08005354 <__M_Error>:

void __M_Error(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	; 0x28
 8005358:	af04      	add	r7, sp, #16
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	460b      	mov	r3, r1
 8005362:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8005364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005368:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("PROGRAMM EXIT WITH ERROR!!!", expr_str, expr, file, line, msg, args);
 800536a:	7afa      	ldrb	r2, [r7, #11]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	9302      	str	r3, [sp, #8]
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68f9      	ldr	r1, [r7, #12]
 800537c:	4803      	ldr	r0, [pc, #12]	; (800538c <__M_Error+0x38>)
 800537e:	f7ff ff1f 	bl	80051c0 <__M_SEND_ASSERT_MSG>
    va_end(args);
    //abort(); // exit programm
}
 8005382:	bf00      	nop
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	0800f104 	.word	0x0800f104

08005390 <__M_Warning>:

void __M_Warning(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af04      	add	r7, sp, #16
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	460b      	mov	r3, r1
 800539e:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 80053a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a4:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("WARNING!!!", expr_str, expr, file, line, msg, args);
 80053a6:	7afa      	ldrb	r2, [r7, #11]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	9302      	str	r3, [sp, #8]
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	4803      	ldr	r0, [pc, #12]	; (80053c8 <__M_Warning+0x38>)
 80053ba:	f7ff ff01 	bl	80051c0 <__M_SEND_ASSERT_MSG>
    va_end(args);
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	0800f120 	.word	0x0800f120

080053cc <ping_worker>:
#include <string.h>



void ping_worker(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
	static u8 counte = 0;


	memcpy(outputData, inputData, (*size));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	68f9      	ldr	r1, [r7, #12]
 80053e2:	68b8      	ldr	r0, [r7, #8]
 80053e4:	f003 fb60 	bl	8008aa8 <memcpy>
	outputData[(*size)] = counte;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	4413      	add	r3, r2
 80053f0:	4a08      	ldr	r2, [pc, #32]	; (8005414 <ping_worker+0x48>)
 80053f2:	7812      	ldrb	r2, [r2, #0]
 80053f4:	701a      	strb	r2, [r3, #0]
	++(*size);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]
	++counte;
 8005400:	4b04      	ldr	r3, [pc, #16]	; (8005414 <ping_worker+0x48>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	b2da      	uxtb	r2, r3
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <ping_worker+0x48>)
 800540a:	701a      	strb	r2, [r3, #0]
	UNUSED(maxOutBufferSize);
	UNUSED(ctx);
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	2000029c 	.word	0x2000029c

08005418 <init_stm32_communicator>:

Communicator_t comm;
extern UART_HandleTypeDef huart1;

int init_stm32_communicator(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
	int state = rawParser_dma_init(&comm.rawparser, 0x1A);
 800541e:	211a      	movs	r1, #26
 8005420:	4810      	ldr	r0, [pc, #64]	; (8005464 <init_stm32_communicator+0x4c>)
 8005422:	f7ff fa81 	bl	8004928 <rawParser_dma_init>
 8005426:	6078      	str	r0, [r7, #4]
	if(state != D_RAW_P_OK) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d001      	beq.n	8005432 <init_stm32_communicator+0x1a>
		return D_RAW_P_ERROR;
 800542e:	2300      	movs	r3, #0
 8005430:	e014      	b.n	800545c <init_stm32_communicator+0x44>
	}

	// init callback manager
	CallbackManager_init(&comm.manager);
 8005432:	480d      	ldr	r0, [pc, #52]	; (8005468 <init_stm32_communicator+0x50>)
 8005434:	f7fc fbb2 	bl	8001b9c <CallbackManager_init>
	CallbackManager_addWorker(&comm.manager, 0x00, ping_worker, NULL);
 8005438:	2300      	movs	r3, #0
 800543a:	4a0c      	ldr	r2, [pc, #48]	; (800546c <init_stm32_communicator+0x54>)
 800543c:	2100      	movs	r1, #0
 800543e:	480a      	ldr	r0, [pc, #40]	; (8005468 <init_stm32_communicator+0x50>)
 8005440:	f7fc fbe4 	bl	8001c0c <CallbackManager_addWorker>
	CallbackManager_addWorker(&comm.manager, 0xF0, entityCMD, NULL);
 8005444:	2300      	movs	r3, #0
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <init_stm32_communicator+0x58>)
 8005448:	21f0      	movs	r1, #240	; 0xf0
 800544a:	4807      	ldr	r0, [pc, #28]	; (8005468 <init_stm32_communicator+0x50>)
 800544c:	f7fc fbde 	bl	8001c0c <CallbackManager_addWorker>

	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8005450:	2201      	movs	r2, #1
 8005452:	4908      	ldr	r1, [pc, #32]	; (8005474 <init_stm32_communicator+0x5c>)
 8005454:	4808      	ldr	r0, [pc, #32]	; (8005478 <init_stm32_communicator+0x60>)
 8005456:	f002 f8a0 	bl	800759a <HAL_UART_Receive_IT>
	return state;
 800545a:	687b      	ldr	r3, [r7, #4]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	200002a0 	.word	0x200002a0
 8005468:	200008d0 	.word	0x200008d0
 800546c:	080053cd 	.word	0x080053cd
 8005470:	08001d3d 	.word	0x08001d3d
 8005474:	20000cd4 	.word	0x20000cd4
 8005478:	20000248 	.word	0x20000248

0800547c <proceedIncommingMessage>:


void proceedIncommingMessage(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af02      	add	r7, sp, #8
	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 8005482:	2201      	movs	r2, #1
 8005484:	493a      	ldr	r1, [pc, #232]	; (8005570 <proceedIncommingMessage+0xf4>)
 8005486:	483b      	ldr	r0, [pc, #236]	; (8005574 <proceedIncommingMessage+0xf8>)
 8005488:	f002 f887 	bl	800759a <HAL_UART_Receive_IT>

	// move to cash--------------------------------------------------------------
	const RawParser_Frame_t* const Rxframe = RawParser_dma_proceed(&comm.rawparser);
 800548c:	483a      	ldr	r0, [pc, #232]	; (8005578 <proceedIncommingMessage+0xfc>)
 800548e:	f7ff fbad 	bl	8004bec <RawParser_dma_proceed>
 8005492:	6178      	str	r0, [r7, #20]
	u8* const input_data 	= Rxframe->data;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	613b      	str	r3, [r7, #16]
	reg input_size 			= Rxframe->size;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	603b      	str	r3, [r7, #0]

//	if(input_size == 0) {
//		return;
//	}

	const boards_t* const board_entry_internal = board_entry;
 80054a0:	4b36      	ldr	r3, [pc, #216]	; (800557c <proceedIncommingMessage+0x100>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]

	const u8 bid 		= input_data[0];
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	72fb      	strb	r3, [r7, #11]
	const u8 cmd_id 	= input_data[1];
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	72bb      	strb	r3, [r7, #10]

	// do logic ------------------------------------------------------------------

	M_Assert_Break(((Rxframe == NULL) || (input_data == NULL) || (board_entry_internal == NULL)), M_EMPTY, return, "proceedIncommingMessage: No valid descriptors");
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <proceedIncommingMessage+0x48>
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <proceedIncommingMessage+0x48>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d114      	bne.n	80054ee <proceedIncommingMessage+0x72>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <proceedIncommingMessage+0x5a>
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <proceedIncommingMessage+0x5a>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <proceedIncommingMessage+0x5e>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <proceedIncommingMessage+0x60>
 80054da:	2300      	movs	r3, #0
 80054dc:	b2d9      	uxtb	r1, r3
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <proceedIncommingMessage+0x104>)
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	2335      	movs	r3, #53	; 0x35
 80054e4:	4a27      	ldr	r2, [pc, #156]	; (8005584 <proceedIncommingMessage+0x108>)
 80054e6:	4828      	ldr	r0, [pc, #160]	; (8005588 <proceedIncommingMessage+0x10c>)
 80054e8:	f7ff ff34 	bl	8005354 <__M_Error>
 80054ec:	e03c      	b.n	8005568 <proceedIncommingMessage+0xec>

//	// check input size and board id
	if((input_size < 2U) || (bid != board_entry_internal->boardId)) {
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d936      	bls.n	8005562 <proceedIncommingMessage+0xe6>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	7afa      	ldrb	r2, [r7, #11]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d131      	bne.n	8005562 <proceedIncommingMessage+0xe6>
		return;
	}

	// call worker
	input_size -= 2;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	3b02      	subs	r3, #2
 8005502:	603b      	str	r3, [r7, #0]
	if(!CallbackManager_proceed(&comm.manager, cmd_id, &input_data[2], &comm.outputData[2], &input_size, (D_RAW_P_TX_BUF_SIZE - 2U))) {
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1c9a      	adds	r2, r3, #2
 8005508:	7ab9      	ldrb	r1, [r7, #10]
 800550a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	463b      	mov	r3, r7
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	4b1d      	ldr	r3, [pc, #116]	; (800558c <proceedIncommingMessage+0x110>)
 8005516:	481e      	ldr	r0, [pc, #120]	; (8005590 <proceedIncommingMessage+0x114>)
 8005518:	f7fc fbaa 	bl	8001c70 <CallbackManager_proceed>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <proceedIncommingMessage+0xaa>
		input_size = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	603b      	str	r3, [r7, #0]
	}

//	// check if worker want to send packet
	if(input_size == 0) {
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01c      	beq.n	8005566 <proceedIncommingMessage+0xea>
		return;
	}

	comm.outputData[0] = bid;
 800552c:	4a12      	ldr	r2, [pc, #72]	; (8005578 <proceedIncommingMessage+0xfc>)
 800552e:	7afb      	ldrb	r3, [r7, #11]
 8005530:	f882 3a35 	strb.w	r3, [r2, #2613]	; 0xa35
	comm.outputData[1] = cmd_id;
 8005534:	4a10      	ldr	r2, [pc, #64]	; (8005578 <proceedIncommingMessage+0xfc>)
 8005536:	7abb      	ldrb	r3, [r7, #10]
 8005538:	f882 3a36 	strb.w	r3, [r2, #2614]	; 0xa36

	const RawParser_Frame_t* const Txframe = RawParser_dma_shieldFrame(&comm.rawparser, comm.outputData, (input_size + 2));
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	3302      	adds	r3, #2
 8005540:	461a      	mov	r2, r3
 8005542:	4914      	ldr	r1, [pc, #80]	; (8005594 <proceedIncommingMessage+0x118>)
 8005544:	480c      	ldr	r0, [pc, #48]	; (8005578 <proceedIncommingMessage+0xfc>)
 8005546:	f7ff fbcd 	bl	8004ce4 <RawParser_dma_shieldFrame>
 800554a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, Txframe->data, Txframe->size, 1000);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	b29a      	uxth	r2, r3
 8005556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800555a:	4806      	ldr	r0, [pc, #24]	; (8005574 <proceedIncommingMessage+0xf8>)
 800555c:	f001 ff8b 	bl	8007476 <HAL_UART_Transmit>
 8005560:	e002      	b.n	8005568 <proceedIncommingMessage+0xec>
		return;
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <proceedIncommingMessage+0xec>
		return;
 8005566:	bf00      	nop
}
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000cd4 	.word	0x20000cd4
 8005574:	20000248 	.word	0x20000248
 8005578:	200002a0 	.word	0x200002a0
 800557c:	2000028c 	.word	0x2000028c
 8005580:	0800f330 	.word	0x0800f330
 8005584:	0800f2b8 	.word	0x0800f2b8
 8005588:	0800f2e0 	.word	0x0800f2e0
 800558c:	20000cd7 	.word	0x20000cd7
 8005590:	200008d0 	.word	0x200008d0
 8005594:	20000cd5 	.word	0x20000cd5

08005598 <__io_putchar>:
#include "main.h"
#include "stm32_printf.h"

extern UART_HandleTypeDef huart1;
PUTCHAR_PROTOTYPE
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80055a0:	1d39      	adds	r1, r7, #4
 80055a2:	f04f 33ff 	mov.w	r3, #4294967295
 80055a6:	2201      	movs	r2, #1
 80055a8:	4803      	ldr	r0, [pc, #12]	; (80055b8 <__io_putchar+0x20>)
 80055aa:	f001 ff64 	bl	8007476 <HAL_UART_Transmit>
	return ch;
 80055ae:	687b      	ldr	r3, [r7, #4]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000248 	.word	0x20000248

080055bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055c0:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <HAL_Init+0x40>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a0d      	ldr	r2, [pc, #52]	; (80055fc <HAL_Init+0x40>)
 80055c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_Init+0x40>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <HAL_Init+0x40>)
 80055d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055d8:	4b08      	ldr	r3, [pc, #32]	; (80055fc <HAL_Init+0x40>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a07      	ldr	r2, [pc, #28]	; (80055fc <HAL_Init+0x40>)
 80055de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055e4:	2003      	movs	r0, #3
 80055e6:	f000 f92b 	bl	8005840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055ea:	200f      	movs	r0, #15
 80055ec:	f000 f808 	bl	8005600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055f0:	f7fb fde4 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023c00 	.word	0x40023c00

08005600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005608:	4b12      	ldr	r3, [pc, #72]	; (8005654 <HAL_InitTick+0x54>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b12      	ldr	r3, [pc, #72]	; (8005658 <HAL_InitTick+0x58>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	4619      	mov	r1, r3
 8005612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005616:	fbb3 f3f1 	udiv	r3, r3, r1
 800561a:	fbb2 f3f3 	udiv	r3, r2, r3
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f943 	bl	80058aa <HAL_SYSTICK_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e00e      	b.n	800564c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d80a      	bhi.n	800564a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005634:	2200      	movs	r2, #0
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	f000 f90b 	bl	8005856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <HAL_InitTick+0x5c>)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000000 	.word	0x20000000
 8005658:	20000008 	.word	0x20000008
 800565c:	20000004 	.word	0x20000004

08005660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_IncTick+0x20>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <HAL_IncTick+0x24>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4413      	add	r3, r2
 8005670:	4a04      	ldr	r2, [pc, #16]	; (8005684 <HAL_IncTick+0x24>)
 8005672:	6013      	str	r3, [r2, #0]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000008 	.word	0x20000008
 8005684:	20000ed8 	.word	0x20000ed8

08005688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  return uwTick;
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <HAL_GetTick+0x14>)
 800568e:	681b      	ldr	r3, [r3, #0]
}
 8005690:	4618      	mov	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000ed8 	.word	0x20000ed8

080056a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <__NVIC_SetPriorityGrouping+0x44>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056bc:	4013      	ands	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056d2:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <__NVIC_SetPriorityGrouping+0x44>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	60d3      	str	r3, [r2, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <__NVIC_GetPriorityGrouping+0x18>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	0a1b      	lsrs	r3, r3, #8
 80056f2:	f003 0307 	and.w	r3, r3, #7
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	e000ed00 	.word	0xe000ed00

08005704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	2b00      	cmp	r3, #0
 8005714:	db0b      	blt.n	800572e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	f003 021f 	and.w	r2, r3, #31
 800571c:	4907      	ldr	r1, [pc, #28]	; (800573c <__NVIC_EnableIRQ+0x38>)
 800571e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2001      	movs	r0, #1
 8005726:	fa00 f202 	lsl.w	r2, r0, r2
 800572a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e100 	.word	0xe000e100

08005740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	6039      	str	r1, [r7, #0]
 800574a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800574c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005750:	2b00      	cmp	r3, #0
 8005752:	db0a      	blt.n	800576a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	490c      	ldr	r1, [pc, #48]	; (800578c <__NVIC_SetPriority+0x4c>)
 800575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575e:	0112      	lsls	r2, r2, #4
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	440b      	add	r3, r1
 8005764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005768:	e00a      	b.n	8005780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	4908      	ldr	r1, [pc, #32]	; (8005790 <__NVIC_SetPriority+0x50>)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	3b04      	subs	r3, #4
 8005778:	0112      	lsls	r2, r2, #4
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	440b      	add	r3, r1
 800577e:	761a      	strb	r2, [r3, #24]
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000e100 	.word	0xe000e100
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	; 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f1c3 0307 	rsb	r3, r3, #7
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	bf28      	it	cs
 80057b2:	2304      	movcs	r3, #4
 80057b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d902      	bls.n	80057c4 <NVIC_EncodePriority+0x30>
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3b03      	subs	r3, #3
 80057c2:	e000      	b.n	80057c6 <NVIC_EncodePriority+0x32>
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43da      	mvns	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	401a      	ands	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057dc:	f04f 31ff 	mov.w	r1, #4294967295
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	fa01 f303 	lsl.w	r3, r1, r3
 80057e6:	43d9      	mvns	r1, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	4313      	orrs	r3, r2
         );
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	; 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3b01      	subs	r3, #1
 8005808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800580c:	d301      	bcc.n	8005812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800580e:	2301      	movs	r3, #1
 8005810:	e00f      	b.n	8005832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005812:	4a0a      	ldr	r2, [pc, #40]	; (800583c <SysTick_Config+0x40>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3b01      	subs	r3, #1
 8005818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800581a:	210f      	movs	r1, #15
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	f7ff ff8e 	bl	8005740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <SysTick_Config+0x40>)
 8005826:	2200      	movs	r2, #0
 8005828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <SysTick_Config+0x40>)
 800582c:	2207      	movs	r2, #7
 800582e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	e000e010 	.word	0xe000e010

08005840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ff29 	bl	80056a0 <__NVIC_SetPriorityGrouping>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005856:	b580      	push	{r7, lr}
 8005858:	b086      	sub	sp, #24
 800585a:	af00      	add	r7, sp, #0
 800585c:	4603      	mov	r3, r0
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005868:	f7ff ff3e 	bl	80056e8 <__NVIC_GetPriorityGrouping>
 800586c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f7ff ff8e 	bl	8005794 <NVIC_EncodePriority>
 8005878:	4602      	mov	r2, r0
 800587a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ff5d 	bl	8005740 <__NVIC_SetPriority>
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	4603      	mov	r3, r0
 8005896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ff31 	bl	8005704 <__NVIC_EnableIRQ>
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff ffa2 	bl	80057fc <SysTick_Config>
 80058b8:	4603      	mov	r3, r0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058d0:	f7ff feda 	bl	8005688 <HAL_GetTick>
 80058d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d008      	beq.n	80058f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e052      	b.n	800599a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0216 	bic.w	r2, r2, #22
 8005902:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005912:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <HAL_DMA_Abort+0x62>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0208 	bic.w	r2, r2, #8
 8005932:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005944:	e013      	b.n	800596e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005946:	f7ff fe9f 	bl	8005688 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b05      	cmp	r3, #5
 8005952:	d90c      	bls.n	800596e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2203      	movs	r2, #3
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e015      	b.n	800599a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e4      	bne.n	8005946 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005980:	223f      	movs	r2, #63	; 0x3f
 8005982:	409a      	lsls	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d004      	beq.n	80059c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2280      	movs	r2, #128	; 0x80
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e00c      	b.n	80059da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2205      	movs	r2, #5
 80059c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e16b      	b.n	8005cdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a04:	2201      	movs	r2, #1
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	f040 815a 	bne.w	8005cd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d005      	beq.n	8005a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d130      	bne.n	8005a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	2203      	movs	r2, #3
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a70:	2201      	movs	r2, #1
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 0201 	and.w	r2, r3, #1
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d017      	beq.n	8005ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d123      	bne.n	8005b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	08da      	lsrs	r2, r3, #3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3208      	adds	r2, #8
 8005aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	220f      	movs	r2, #15
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4013      	ands	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	08da      	lsrs	r2, r3, #3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3208      	adds	r2, #8
 8005b26:	69b9      	ldr	r1, [r7, #24]
 8005b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	2203      	movs	r2, #3
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 0203 	and.w	r2, r3, #3
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80b4 	beq.w	8005cd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	4b60      	ldr	r3, [pc, #384]	; (8005cf4 <HAL_GPIO_Init+0x30c>)
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	4a5f      	ldr	r2, [pc, #380]	; (8005cf4 <HAL_GPIO_Init+0x30c>)
 8005b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b7e:	4b5d      	ldr	r3, [pc, #372]	; (8005cf4 <HAL_GPIO_Init+0x30c>)
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b8a:	4a5b      	ldr	r2, [pc, #364]	; (8005cf8 <HAL_GPIO_Init+0x310>)
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	3302      	adds	r3, #2
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	220f      	movs	r2, #15
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4013      	ands	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a52      	ldr	r2, [pc, #328]	; (8005cfc <HAL_GPIO_Init+0x314>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d02b      	beq.n	8005c0e <HAL_GPIO_Init+0x226>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a51      	ldr	r2, [pc, #324]	; (8005d00 <HAL_GPIO_Init+0x318>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d025      	beq.n	8005c0a <HAL_GPIO_Init+0x222>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a50      	ldr	r2, [pc, #320]	; (8005d04 <HAL_GPIO_Init+0x31c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01f      	beq.n	8005c06 <HAL_GPIO_Init+0x21e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a4f      	ldr	r2, [pc, #316]	; (8005d08 <HAL_GPIO_Init+0x320>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d019      	beq.n	8005c02 <HAL_GPIO_Init+0x21a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a4e      	ldr	r2, [pc, #312]	; (8005d0c <HAL_GPIO_Init+0x324>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_GPIO_Init+0x216>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a4d      	ldr	r2, [pc, #308]	; (8005d10 <HAL_GPIO_Init+0x328>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00d      	beq.n	8005bfa <HAL_GPIO_Init+0x212>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a4c      	ldr	r2, [pc, #304]	; (8005d14 <HAL_GPIO_Init+0x32c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <HAL_GPIO_Init+0x20e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a4b      	ldr	r2, [pc, #300]	; (8005d18 <HAL_GPIO_Init+0x330>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <HAL_GPIO_Init+0x20a>
 8005bee:	2307      	movs	r3, #7
 8005bf0:	e00e      	b.n	8005c10 <HAL_GPIO_Init+0x228>
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	e00c      	b.n	8005c10 <HAL_GPIO_Init+0x228>
 8005bf6:	2306      	movs	r3, #6
 8005bf8:	e00a      	b.n	8005c10 <HAL_GPIO_Init+0x228>
 8005bfa:	2305      	movs	r3, #5
 8005bfc:	e008      	b.n	8005c10 <HAL_GPIO_Init+0x228>
 8005bfe:	2304      	movs	r3, #4
 8005c00:	e006      	b.n	8005c10 <HAL_GPIO_Init+0x228>
 8005c02:	2303      	movs	r3, #3
 8005c04:	e004      	b.n	8005c10 <HAL_GPIO_Init+0x228>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e002      	b.n	8005c10 <HAL_GPIO_Init+0x228>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <HAL_GPIO_Init+0x228>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	f002 0203 	and.w	r2, r2, #3
 8005c16:	0092      	lsls	r2, r2, #2
 8005c18:	4093      	lsls	r3, r2
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c20:	4935      	ldr	r1, [pc, #212]	; (8005cf8 <HAL_GPIO_Init+0x310>)
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	089b      	lsrs	r3, r3, #2
 8005c26:	3302      	adds	r3, #2
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c2e:	4b3b      	ldr	r3, [pc, #236]	; (8005d1c <HAL_GPIO_Init+0x334>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	43db      	mvns	r3, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c52:	4a32      	ldr	r2, [pc, #200]	; (8005d1c <HAL_GPIO_Init+0x334>)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c58:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <HAL_GPIO_Init+0x334>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4013      	ands	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c7c:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <HAL_GPIO_Init+0x334>)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c82:	4b26      	ldr	r3, [pc, #152]	; (8005d1c <HAL_GPIO_Init+0x334>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ca6:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <HAL_GPIO_Init+0x334>)
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <HAL_GPIO_Init+0x334>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cd0:	4a12      	ldr	r2, [pc, #72]	; (8005d1c <HAL_GPIO_Init+0x334>)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b0f      	cmp	r3, #15
 8005ce0:	f67f ae90 	bls.w	8005a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3724      	adds	r7, #36	; 0x24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	40013800 	.word	0x40013800
 8005cfc:	40020000 	.word	0x40020000
 8005d00:	40020400 	.word	0x40020400
 8005d04:	40020800 	.word	0x40020800
 8005d08:	40020c00 	.word	0x40020c00
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	40021400 	.word	0x40021400
 8005d14:	40021800 	.word	0x40021800
 8005d18:	40021c00 	.word	0x40021c00
 8005d1c:	40013c00 	.word	0x40013c00

08005d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	807b      	strh	r3, [r7, #2]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d30:	787b      	ldrb	r3, [r7, #1]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d36:	887a      	ldrh	r2, [r7, #2]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d3c:	e003      	b.n	8005d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d3e:	887b      	ldrh	r3, [r7, #2]
 8005d40:	041a      	lsls	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	619a      	str	r2, [r3, #24]
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e267      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d075      	beq.n	8005e5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d72:	4b88      	ldr	r3, [pc, #544]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d00c      	beq.n	8005d98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d7e:	4b85      	ldr	r3, [pc, #532]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d112      	bne.n	8005db0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d8a:	4b82      	ldr	r3, [pc, #520]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d96:	d10b      	bne.n	8005db0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	4b7e      	ldr	r3, [pc, #504]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d05b      	beq.n	8005e5c <HAL_RCC_OscConfig+0x108>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d157      	bne.n	8005e5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e242      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db8:	d106      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x74>
 8005dba:	4b76      	ldr	r3, [pc, #472]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a75      	ldr	r2, [pc, #468]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e01d      	b.n	8005e04 <HAL_RCC_OscConfig+0xb0>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dd0:	d10c      	bne.n	8005dec <HAL_RCC_OscConfig+0x98>
 8005dd2:	4b70      	ldr	r3, [pc, #448]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a6f      	ldr	r2, [pc, #444]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	4b6d      	ldr	r3, [pc, #436]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6c      	ldr	r2, [pc, #432]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e00b      	b.n	8005e04 <HAL_RCC_OscConfig+0xb0>
 8005dec:	4b69      	ldr	r3, [pc, #420]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a68      	ldr	r2, [pc, #416]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b66      	ldr	r3, [pc, #408]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a65      	ldr	r2, [pc, #404]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d013      	beq.n	8005e34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0c:	f7ff fc3c 	bl	8005688 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e14:	f7ff fc38 	bl	8005688 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b64      	cmp	r3, #100	; 0x64
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e207      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCC_OscConfig+0xc0>
 8005e32:	e014      	b.n	8005e5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e34:	f7ff fc28 	bl	8005688 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e3c:	f7ff fc24 	bl	8005688 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b64      	cmp	r3, #100	; 0x64
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e1f3      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4e:	4b51      	ldr	r3, [pc, #324]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0xe8>
 8005e5a:	e000      	b.n	8005e5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d063      	beq.n	8005f32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e6a:	4b4a      	ldr	r3, [pc, #296]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e76:	4b47      	ldr	r3, [pc, #284]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d11c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e82:	4b44      	ldr	r3, [pc, #272]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d116      	bne.n	8005ebc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e8e:	4b41      	ldr	r3, [pc, #260]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x152>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d001      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e1c7      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea6:	4b3b      	ldr	r3, [pc, #236]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4937      	ldr	r1, [pc, #220]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eba:	e03a      	b.n	8005f32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d020      	beq.n	8005f06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ec4:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <HAL_RCC_OscConfig+0x244>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eca:	f7ff fbdd 	bl	8005688 <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed2:	f7ff fbd9 	bl	8005688 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e1a8      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee4:	4b2b      	ldr	r3, [pc, #172]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	4925      	ldr	r1, [pc, #148]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	600b      	str	r3, [r1, #0]
 8005f04:	e015      	b.n	8005f32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f06:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <HAL_RCC_OscConfig+0x244>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7ff fbbc 	bl	8005688 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f14:	f7ff fbb8 	bl	8005688 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e187      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f26:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d036      	beq.n	8005fac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f46:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <HAL_RCC_OscConfig+0x248>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4c:	f7ff fb9c 	bl	8005688 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f54:	f7ff fb98 	bl	8005688 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e167      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f66:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <HAL_RCC_OscConfig+0x240>)
 8005f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x200>
 8005f72:	e01b      	b.n	8005fac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f74:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <HAL_RCC_OscConfig+0x248>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f7a:	f7ff fb85 	bl	8005688 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f80:	e00e      	b.n	8005fa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f82:	f7ff fb81 	bl	8005688 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d907      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e150      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
 8005f94:	40023800 	.word	0x40023800
 8005f98:	42470000 	.word	0x42470000
 8005f9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa0:	4b88      	ldr	r3, [pc, #544]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ea      	bne.n	8005f82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8097 	beq.w	80060e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fbe:	4b81      	ldr	r3, [pc, #516]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
 8005fce:	4b7d      	ldr	r3, [pc, #500]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	4a7c      	ldr	r2, [pc, #496]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fda:	4b7a      	ldr	r3, [pc, #488]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	60bb      	str	r3, [r7, #8]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fea:	4b77      	ldr	r3, [pc, #476]	; (80061c8 <HAL_RCC_OscConfig+0x474>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d118      	bne.n	8006028 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff6:	4b74      	ldr	r3, [pc, #464]	; (80061c8 <HAL_RCC_OscConfig+0x474>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a73      	ldr	r2, [pc, #460]	; (80061c8 <HAL_RCC_OscConfig+0x474>)
 8005ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006002:	f7ff fb41 	bl	8005688 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600a:	f7ff fb3d 	bl	8005688 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e10c      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601c:	4b6a      	ldr	r3, [pc, #424]	; (80061c8 <HAL_RCC_OscConfig+0x474>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d106      	bne.n	800603e <HAL_RCC_OscConfig+0x2ea>
 8006030:	4b64      	ldr	r3, [pc, #400]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	4a63      	ldr	r2, [pc, #396]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6713      	str	r3, [r2, #112]	; 0x70
 800603c:	e01c      	b.n	8006078 <HAL_RCC_OscConfig+0x324>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b05      	cmp	r3, #5
 8006044:	d10c      	bne.n	8006060 <HAL_RCC_OscConfig+0x30c>
 8006046:	4b5f      	ldr	r3, [pc, #380]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	4a5e      	ldr	r2, [pc, #376]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 800604c:	f043 0304 	orr.w	r3, r3, #4
 8006050:	6713      	str	r3, [r2, #112]	; 0x70
 8006052:	4b5c      	ldr	r3, [pc, #368]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4a5b      	ldr	r2, [pc, #364]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	6713      	str	r3, [r2, #112]	; 0x70
 800605e:	e00b      	b.n	8006078 <HAL_RCC_OscConfig+0x324>
 8006060:	4b58      	ldr	r3, [pc, #352]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006064:	4a57      	ldr	r2, [pc, #348]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	6713      	str	r3, [r2, #112]	; 0x70
 800606c:	4b55      	ldr	r3, [pc, #340]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a54      	ldr	r2, [pc, #336]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006072:	f023 0304 	bic.w	r3, r3, #4
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d015      	beq.n	80060ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006080:	f7ff fb02 	bl	8005688 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006086:	e00a      	b.n	800609e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006088:	f7ff fafe 	bl	8005688 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	; 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e0cb      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609e:	4b49      	ldr	r3, [pc, #292]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0ee      	beq.n	8006088 <HAL_RCC_OscConfig+0x334>
 80060aa:	e014      	b.n	80060d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ac:	f7ff faec 	bl	8005688 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b4:	f7ff fae8 	bl	8005688 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e0b5      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ca:	4b3e      	ldr	r3, [pc, #248]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1ee      	bne.n	80060b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d105      	bne.n	80060e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060dc:	4b39      	ldr	r3, [pc, #228]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	4a38      	ldr	r2, [pc, #224]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 80060e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80a1 	beq.w	8006234 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060f2:	4b34      	ldr	r3, [pc, #208]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 030c 	and.w	r3, r3, #12
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d05c      	beq.n	80061b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d141      	bne.n	800618a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006106:	4b31      	ldr	r3, [pc, #196]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610c:	f7ff fabc 	bl	8005688 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006114:	f7ff fab8 	bl	8005688 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e087      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006126:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f0      	bne.n	8006114 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	019b      	lsls	r3, r3, #6
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	3b01      	subs	r3, #1
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	061b      	lsls	r3, r3, #24
 8006156:	491b      	ldr	r1, [pc, #108]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 8006158:	4313      	orrs	r3, r2
 800615a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006162:	f7ff fa91 	bl	8005688 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800616a:	f7ff fa8d 	bl	8005688 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e05c      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617c:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x416>
 8006188:	e054      	b.n	8006234 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618a:	4b10      	ldr	r3, [pc, #64]	; (80061cc <HAL_RCC_OscConfig+0x478>)
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006190:	f7ff fa7a 	bl	8005688 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006198:	f7ff fa76 	bl	8005688 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e045      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061aa:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <HAL_RCC_OscConfig+0x470>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0x444>
 80061b6:	e03d      	b.n	8006234 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d107      	bne.n	80061d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e038      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40007000 	.word	0x40007000
 80061cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <HAL_RCC_OscConfig+0x4ec>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d028      	beq.n	8006230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d121      	bne.n	8006230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d11a      	bne.n	8006230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006200:	4013      	ands	r3, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006206:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006208:	4293      	cmp	r3, r2
 800620a:	d111      	bne.n	8006230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	3b01      	subs	r3, #1
 800621a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d107      	bne.n	8006230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023800 	.word	0x40023800

08006244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e0cc      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006258:	4b68      	ldr	r3, [pc, #416]	; (80063fc <HAL_RCC_ClockConfig+0x1b8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d90c      	bls.n	8006280 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006266:	4b65      	ldr	r3, [pc, #404]	; (80063fc <HAL_RCC_ClockConfig+0x1b8>)
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800626e:	4b63      	ldr	r3, [pc, #396]	; (80063fc <HAL_RCC_ClockConfig+0x1b8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d001      	beq.n	8006280 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e0b8      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d020      	beq.n	80062ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006298:	4b59      	ldr	r3, [pc, #356]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	4a58      	ldr	r2, [pc, #352]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062b0:	4b53      	ldr	r3, [pc, #332]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4a52      	ldr	r2, [pc, #328]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062bc:	4b50      	ldr	r3, [pc, #320]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	494d      	ldr	r1, [pc, #308]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d044      	beq.n	8006364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d107      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e2:	4b47      	ldr	r3, [pc, #284]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d119      	bne.n	8006322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e07f      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d003      	beq.n	8006302 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d107      	bne.n	8006312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006302:	4b3f      	ldr	r3, [pc, #252]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e06f      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006312:	4b3b      	ldr	r3, [pc, #236]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e067      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006322:	4b37      	ldr	r3, [pc, #220]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f023 0203 	bic.w	r2, r3, #3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4934      	ldr	r1, [pc, #208]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	4313      	orrs	r3, r2
 8006332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006334:	f7ff f9a8 	bl	8005688 <HAL_GetTick>
 8006338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633a:	e00a      	b.n	8006352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800633c:	f7ff f9a4 	bl	8005688 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	f241 3288 	movw	r2, #5000	; 0x1388
 800634a:	4293      	cmp	r3, r2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e04f      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006352:	4b2b      	ldr	r3, [pc, #172]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 020c 	and.w	r2, r3, #12
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	429a      	cmp	r2, r3
 8006362:	d1eb      	bne.n	800633c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006364:	4b25      	ldr	r3, [pc, #148]	; (80063fc <HAL_RCC_ClockConfig+0x1b8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d20c      	bcs.n	800638c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006372:	4b22      	ldr	r3, [pc, #136]	; (80063fc <HAL_RCC_ClockConfig+0x1b8>)
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800637a:	4b20      	ldr	r3, [pc, #128]	; (80063fc <HAL_RCC_ClockConfig+0x1b8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d001      	beq.n	800638c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e032      	b.n	80063f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4916      	ldr	r1, [pc, #88]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063b6:	4b12      	ldr	r3, [pc, #72]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	490e      	ldr	r1, [pc, #56]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063ca:	f000 f82d 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	490a      	ldr	r1, [pc, #40]	; (8006404 <HAL_RCC_ClockConfig+0x1c0>)
 80063dc:	5ccb      	ldrb	r3, [r1, r3]
 80063de:	fa22 f303 	lsr.w	r3, r2, r3
 80063e2:	4a09      	ldr	r2, [pc, #36]	; (8006408 <HAL_RCC_ClockConfig+0x1c4>)
 80063e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063e6:	4b09      	ldr	r3, [pc, #36]	; (800640c <HAL_RCC_ClockConfig+0x1c8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff f908 	bl	8005600 <HAL_InitTick>

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40023c00 	.word	0x40023c00
 8006400:	40023800 	.word	0x40023800
 8006404:	0800f360 	.word	0x0800f360
 8006408:	20000000 	.word	0x20000000
 800640c:	20000004 	.word	0x20000004

08006410 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_RCC_EnableCSS+0x14>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	bf00      	nop
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	4247004c 	.word	0x4247004c

08006428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800642c:	b094      	sub	sp, #80	; 0x50
 800642e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	647b      	str	r3, [r7, #68]	; 0x44
 8006434:	2300      	movs	r3, #0
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006438:	2300      	movs	r3, #0
 800643a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006440:	4b79      	ldr	r3, [pc, #484]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b08      	cmp	r3, #8
 800644a:	d00d      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x40>
 800644c:	2b08      	cmp	r3, #8
 800644e:	f200 80e1 	bhi.w	8006614 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x34>
 8006456:	2b04      	cmp	r3, #4
 8006458:	d003      	beq.n	8006462 <HAL_RCC_GetSysClockFreq+0x3a>
 800645a:	e0db      	b.n	8006614 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800645c:	4b73      	ldr	r3, [pc, #460]	; (800662c <HAL_RCC_GetSysClockFreq+0x204>)
 800645e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006460:	e0db      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006462:	4b72      	ldr	r3, [pc, #456]	; (800662c <HAL_RCC_GetSysClockFreq+0x204>)
 8006464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006466:	e0d8      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006468:	4b6f      	ldr	r3, [pc, #444]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006470:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006472:	4b6d      	ldr	r3, [pc, #436]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d063      	beq.n	8006546 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647e:	4b6a      	ldr	r3, [pc, #424]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	099b      	lsrs	r3, r3, #6
 8006484:	2200      	movs	r2, #0
 8006486:	63bb      	str	r3, [r7, #56]	; 0x38
 8006488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006490:	633b      	str	r3, [r7, #48]	; 0x30
 8006492:	2300      	movs	r3, #0
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
 8006496:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800649a:	4622      	mov	r2, r4
 800649c:	462b      	mov	r3, r5
 800649e:	f04f 0000 	mov.w	r0, #0
 80064a2:	f04f 0100 	mov.w	r1, #0
 80064a6:	0159      	lsls	r1, r3, #5
 80064a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064ac:	0150      	lsls	r0, r2, #5
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4621      	mov	r1, r4
 80064b4:	1a51      	subs	r1, r2, r1
 80064b6:	6139      	str	r1, [r7, #16]
 80064b8:	4629      	mov	r1, r5
 80064ba:	eb63 0301 	sbc.w	r3, r3, r1
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064cc:	4659      	mov	r1, fp
 80064ce:	018b      	lsls	r3, r1, #6
 80064d0:	4651      	mov	r1, sl
 80064d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064d6:	4651      	mov	r1, sl
 80064d8:	018a      	lsls	r2, r1, #6
 80064da:	4651      	mov	r1, sl
 80064dc:	ebb2 0801 	subs.w	r8, r2, r1
 80064e0:	4659      	mov	r1, fp
 80064e2:	eb63 0901 	sbc.w	r9, r3, r1
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064fa:	4690      	mov	r8, r2
 80064fc:	4699      	mov	r9, r3
 80064fe:	4623      	mov	r3, r4
 8006500:	eb18 0303 	adds.w	r3, r8, r3
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	462b      	mov	r3, r5
 8006508:	eb49 0303 	adc.w	r3, r9, r3
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800651a:	4629      	mov	r1, r5
 800651c:	028b      	lsls	r3, r1, #10
 800651e:	4621      	mov	r1, r4
 8006520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006524:	4621      	mov	r1, r4
 8006526:	028a      	lsls	r2, r1, #10
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652e:	2200      	movs	r2, #0
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
 8006532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006534:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006538:	f7fa fba6 	bl	8000c88 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4613      	mov	r3, r2
 8006542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006544:	e058      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006546:	4b38      	ldr	r3, [pc, #224]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	099b      	lsrs	r3, r3, #6
 800654c:	2200      	movs	r2, #0
 800654e:	4618      	mov	r0, r3
 8006550:	4611      	mov	r1, r2
 8006552:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	2300      	movs	r3, #0
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
 800655c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	f04f 0000 	mov.w	r0, #0
 8006568:	f04f 0100 	mov.w	r1, #0
 800656c:	0159      	lsls	r1, r3, #5
 800656e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006572:	0150      	lsls	r0, r2, #5
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4641      	mov	r1, r8
 800657a:	ebb2 0a01 	subs.w	sl, r2, r1
 800657e:	4649      	mov	r1, r9
 8006580:	eb63 0b01 	sbc.w	fp, r3, r1
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006590:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006594:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006598:	ebb2 040a 	subs.w	r4, r2, sl
 800659c:	eb63 050b 	sbc.w	r5, r3, fp
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	00eb      	lsls	r3, r5, #3
 80065aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ae:	00e2      	lsls	r2, r4, #3
 80065b0:	4614      	mov	r4, r2
 80065b2:	461d      	mov	r5, r3
 80065b4:	4643      	mov	r3, r8
 80065b6:	18e3      	adds	r3, r4, r3
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	464b      	mov	r3, r9
 80065bc:	eb45 0303 	adc.w	r3, r5, r3
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ce:	4629      	mov	r1, r5
 80065d0:	028b      	lsls	r3, r1, #10
 80065d2:	4621      	mov	r1, r4
 80065d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d8:	4621      	mov	r1, r4
 80065da:	028a      	lsls	r2, r1, #10
 80065dc:	4610      	mov	r0, r2
 80065de:	4619      	mov	r1, r3
 80065e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e2:	2200      	movs	r2, #0
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	61fa      	str	r2, [r7, #28]
 80065e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065ec:	f7fa fb4c 	bl	8000c88 <__aeabi_uldivmod>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4613      	mov	r3, r2
 80065f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_RCC_GetSysClockFreq+0x200>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	0c1b      	lsrs	r3, r3, #16
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	3301      	adds	r3, #1
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800660a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006612:	e002      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <HAL_RCC_GetSysClockFreq+0x204>)
 8006616:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800661a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800661c:	4618      	mov	r0, r3
 800661e:	3750      	adds	r7, #80	; 0x50
 8006620:	46bd      	mov	sp, r7
 8006622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800
 800662c:	00f42400 	.word	0x00f42400

08006630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <HAL_RCC_GetHCLKFreq+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000000 	.word	0x20000000

08006648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800664c:	f7ff fff0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0a9b      	lsrs	r3, r3, #10
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	; (800666c <HAL_RCC_GetPCLK1Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	0800f370 	.word	0x0800f370

08006670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006674:	f7ff ffdc 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	0b5b      	lsrs	r3, r3, #13
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4903      	ldr	r1, [pc, #12]	; (8006694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	0800f370 	.word	0x0800f370

08006698 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a4:	2b80      	cmp	r3, #128	; 0x80
 80066a6:	d104      	bne.n	80066b2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80066a8:	f000 f80a 	bl	80066c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80066ae:	2280      	movs	r2, #128	; 0x80
 80066b0:	701a      	strb	r2, [r3, #0]
  }
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40023800 	.word	0x40023800
 80066bc:	4002380e 	.word	0x4002380e

080066c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e041      	b.n	8006764 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fa ff0f 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3304      	adds	r3, #4
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f000 fad9 	bl	8006cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e041      	b.n	8006802 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f839 	bl	800680a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4619      	mov	r1, r3
 80067aa:	4610      	mov	r0, r2
 80067ac:	f000 fa8a 	bl	8006cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <HAL_TIM_PWM_Start+0x24>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e022      	b.n	800688a <HAL_TIM_PWM_Start+0x6a>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b04      	cmp	r3, #4
 8006848:	d109      	bne.n	800685e <HAL_TIM_PWM_Start+0x3e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b01      	cmp	r3, #1
 8006854:	bf14      	ite	ne
 8006856:	2301      	movne	r3, #1
 8006858:	2300      	moveq	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	e015      	b.n	800688a <HAL_TIM_PWM_Start+0x6a>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b08      	cmp	r3, #8
 8006862:	d109      	bne.n	8006878 <HAL_TIM_PWM_Start+0x58>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	bf14      	ite	ne
 8006870:	2301      	movne	r3, #1
 8006872:	2300      	moveq	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	e008      	b.n	800688a <HAL_TIM_PWM_Start+0x6a>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e07c      	b.n	800698c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_PWM_Start+0x82>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a0:	e013      	b.n	80068ca <HAL_TIM_PWM_Start+0xaa>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_PWM_Start+0x92>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b0:	e00b      	b.n	80068ca <HAL_TIM_PWM_Start+0xaa>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_PWM_Start+0xa2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c0:	e003      	b.n	80068ca <HAL_TIM_PWM_Start+0xaa>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2201      	movs	r2, #1
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fce0 	bl	8007298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a2d      	ldr	r2, [pc, #180]	; (8006994 <HAL_TIM_PWM_Start+0x174>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d004      	beq.n	80068ec <HAL_TIM_PWM_Start+0xcc>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2c      	ldr	r2, [pc, #176]	; (8006998 <HAL_TIM_PWM_Start+0x178>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d101      	bne.n	80068f0 <HAL_TIM_PWM_Start+0xd0>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <HAL_TIM_PWM_Start+0xd2>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a22      	ldr	r2, [pc, #136]	; (8006994 <HAL_TIM_PWM_Start+0x174>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d022      	beq.n	8006956 <HAL_TIM_PWM_Start+0x136>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006918:	d01d      	beq.n	8006956 <HAL_TIM_PWM_Start+0x136>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1f      	ldr	r2, [pc, #124]	; (800699c <HAL_TIM_PWM_Start+0x17c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d018      	beq.n	8006956 <HAL_TIM_PWM_Start+0x136>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <HAL_TIM_PWM_Start+0x180>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_TIM_PWM_Start+0x136>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <HAL_TIM_PWM_Start+0x184>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00e      	beq.n	8006956 <HAL_TIM_PWM_Start+0x136>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a16      	ldr	r2, [pc, #88]	; (8006998 <HAL_TIM_PWM_Start+0x178>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d009      	beq.n	8006956 <HAL_TIM_PWM_Start+0x136>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <HAL_TIM_PWM_Start+0x188>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_TIM_PWM_Start+0x136>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a16      	ldr	r2, [pc, #88]	; (80069ac <HAL_TIM_PWM_Start+0x18c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d111      	bne.n	800697a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b06      	cmp	r3, #6
 8006966:	d010      	beq.n	800698a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006978:	e007      	b.n	800698a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40010000 	.word	0x40010000
 8006998:	40010400 	.word	0x40010400
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40014000 	.word	0x40014000
 80069ac:	40001800 	.word	0x40001800

080069b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e0ae      	b.n	8006b2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b0c      	cmp	r3, #12
 80069da:	f200 809f 	bhi.w	8006b1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a19 	.word	0x08006a19
 80069e8:	08006b1d 	.word	0x08006b1d
 80069ec:	08006b1d 	.word	0x08006b1d
 80069f0:	08006b1d 	.word	0x08006b1d
 80069f4:	08006a59 	.word	0x08006a59
 80069f8:	08006b1d 	.word	0x08006b1d
 80069fc:	08006b1d 	.word	0x08006b1d
 8006a00:	08006b1d 	.word	0x08006b1d
 8006a04:	08006a9b 	.word	0x08006a9b
 8006a08:	08006b1d 	.word	0x08006b1d
 8006a0c:	08006b1d 	.word	0x08006b1d
 8006a10:	08006b1d 	.word	0x08006b1d
 8006a14:	08006adb 	.word	0x08006adb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f9f0 	bl	8006e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0208 	orr.w	r2, r2, #8
 8006a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699a      	ldr	r2, [r3, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0204 	bic.w	r2, r2, #4
 8006a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6999      	ldr	r1, [r3, #24]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	619a      	str	r2, [r3, #24]
      break;
 8006a56:	e064      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fa40 	bl	8006ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6999      	ldr	r1, [r3, #24]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	021a      	lsls	r2, r3, #8
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	619a      	str	r2, [r3, #24]
      break;
 8006a98:	e043      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fa95 	bl	8006fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0208 	orr.w	r2, r2, #8
 8006ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0204 	bic.w	r2, r2, #4
 8006ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69d9      	ldr	r1, [r3, #28]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	61da      	str	r2, [r3, #28]
      break;
 8006ad8:	e023      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fae9 	bl	80070b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69d9      	ldr	r1, [r3, #28]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	021a      	lsls	r2, r3, #8
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	61da      	str	r2, [r3, #28]
      break;
 8006b1a:	e002      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_TIM_ConfigClockSource+0x1c>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e0b4      	b.n	8006cba <HAL_TIM_ConfigClockSource+0x186>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b88:	d03e      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0xd4>
 8006b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8e:	f200 8087 	bhi.w	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b96:	f000 8086 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x172>
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9e:	d87f      	bhi.n	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba0:	2b70      	cmp	r3, #112	; 0x70
 8006ba2:	d01a      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0xa6>
 8006ba4:	2b70      	cmp	r3, #112	; 0x70
 8006ba6:	d87b      	bhi.n	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba8:	2b60      	cmp	r3, #96	; 0x60
 8006baa:	d050      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x11a>
 8006bac:	2b60      	cmp	r3, #96	; 0x60
 8006bae:	d877      	bhi.n	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb0:	2b50      	cmp	r3, #80	; 0x50
 8006bb2:	d03c      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0xfa>
 8006bb4:	2b50      	cmp	r3, #80	; 0x50
 8006bb6:	d873      	bhi.n	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb8:	2b40      	cmp	r3, #64	; 0x40
 8006bba:	d058      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x13a>
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d86f      	bhi.n	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b30      	cmp	r3, #48	; 0x30
 8006bc2:	d064      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x15a>
 8006bc4:	2b30      	cmp	r3, #48	; 0x30
 8006bc6:	d86b      	bhi.n	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d060      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x15a>
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d867      	bhi.n	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d05c      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x15a>
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d05a      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x15a>
 8006bd8:	e062      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6899      	ldr	r1, [r3, #8]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f000 fb35 	bl	8007258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	609a      	str	r2, [r3, #8]
      break;
 8006c06:	e04f      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	6899      	ldr	r1, [r3, #8]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f000 fb1e 	bl	8007258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c2a:	609a      	str	r2, [r3, #8]
      break;
 8006c2c:	e03c      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6859      	ldr	r1, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f000 fa92 	bl	8007164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2150      	movs	r1, #80	; 0x50
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 faeb 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006c4c:	e02c      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6859      	ldr	r1, [r3, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f000 fab1 	bl	80071c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2160      	movs	r1, #96	; 0x60
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fadb 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006c6c:	e01c      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 fa72 	bl	8007164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2140      	movs	r1, #64	; 0x40
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 facb 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e00c      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f000 fac2 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006c9e:	e003      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ca4:	e000      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a40      	ldr	r2, [pc, #256]	; (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce2:	d00f      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a3d      	ldr	r2, [pc, #244]	; (8006ddc <TIM_Base_SetConfig+0x118>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00b      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a3c      	ldr	r2, [pc, #240]	; (8006de0 <TIM_Base_SetConfig+0x11c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d007      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a3b      	ldr	r2, [pc, #236]	; (8006de4 <TIM_Base_SetConfig+0x120>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3a      	ldr	r2, [pc, #232]	; (8006de8 <TIM_Base_SetConfig+0x124>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d108      	bne.n	8006d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2f      	ldr	r2, [pc, #188]	; (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d02b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d24:	d027      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <TIM_Base_SetConfig+0x118>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d023      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2b      	ldr	r2, [pc, #172]	; (8006de0 <TIM_Base_SetConfig+0x11c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01f      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <TIM_Base_SetConfig+0x120>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d01b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <TIM_Base_SetConfig+0x124>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d017      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a28      	ldr	r2, [pc, #160]	; (8006dec <TIM_Base_SetConfig+0x128>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a27      	ldr	r2, [pc, #156]	; (8006df0 <TIM_Base_SetConfig+0x12c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a26      	ldr	r2, [pc, #152]	; (8006df4 <TIM_Base_SetConfig+0x130>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a25      	ldr	r2, [pc, #148]	; (8006df8 <TIM_Base_SetConfig+0x134>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a24      	ldr	r2, [pc, #144]	; (8006dfc <TIM_Base_SetConfig+0x138>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a23      	ldr	r2, [pc, #140]	; (8006e00 <TIM_Base_SetConfig+0x13c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d108      	bne.n	8006d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_Base_SetConfig+0xf8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a0c      	ldr	r2, [pc, #48]	; (8006de8 <TIM_Base_SetConfig+0x124>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d103      	bne.n	8006dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40010400 	.word	0x40010400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800
 8006df8:	40001800 	.word	0x40001800
 8006dfc:	40001c00 	.word	0x40001c00
 8006e00:	40002000 	.word	0x40002000

08006e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0201 	bic.w	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f023 0302 	bic.w	r3, r3, #2
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a20      	ldr	r2, [pc, #128]	; (8006edc <TIM_OC1_SetConfig+0xd8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_OC1_SetConfig+0x64>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <TIM_OC1_SetConfig+0xdc>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10c      	bne.n	8006e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0308 	bic.w	r3, r3, #8
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 0304 	bic.w	r3, r3, #4
 8006e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a15      	ldr	r2, [pc, #84]	; (8006edc <TIM_OC1_SetConfig+0xd8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <TIM_OC1_SetConfig+0x8e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a14      	ldr	r2, [pc, #80]	; (8006ee0 <TIM_OC1_SetConfig+0xdc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d111      	bne.n	8006eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	621a      	str	r2, [r3, #32]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40010400 	.word	0x40010400

08006ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0210 	bic.w	r2, r3, #16
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 0320 	bic.w	r3, r3, #32
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <TIM_OC2_SetConfig+0xe4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_OC2_SetConfig+0x68>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <TIM_OC2_SetConfig+0xe8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d10d      	bne.n	8006f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <TIM_OC2_SetConfig+0xe4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_OC2_SetConfig+0x94>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <TIM_OC2_SetConfig+0xe8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d113      	bne.n	8006fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	621a      	str	r2, [r3, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400

08006fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a21      	ldr	r2, [pc, #132]	; (80070b0 <TIM_OC3_SetConfig+0xe0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d003      	beq.n	8007036 <TIM_OC3_SetConfig+0x66>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a20      	ldr	r2, [pc, #128]	; (80070b4 <TIM_OC3_SetConfig+0xe4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d10d      	bne.n	8007052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800703c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <TIM_OC3_SetConfig+0xe0>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC3_SetConfig+0x92>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a15      	ldr	r2, [pc, #84]	; (80070b4 <TIM_OC3_SetConfig+0xe4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d113      	bne.n	800708a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40010400 	.word	0x40010400

080070b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	031b      	lsls	r3, r3, #12
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a12      	ldr	r2, [pc, #72]	; (800715c <TIM_OC4_SetConfig+0xa4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_OC4_SetConfig+0x68>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a11      	ldr	r2, [pc, #68]	; (8007160 <TIM_OC4_SetConfig+0xa8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d109      	bne.n	8007134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	019b      	lsls	r3, r3, #6
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	621a      	str	r2, [r3, #32]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40010000 	.word	0x40010000
 8007160:	40010400 	.word	0x40010400

08007164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800718e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 030a 	bic.w	r3, r3, #10
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b087      	sub	sp, #28
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0210 	bic.w	r2, r3, #16
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	031b      	lsls	r3, r3, #12
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	f043 0307 	orr.w	r3, r3, #7
 8007244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	609a      	str	r2, [r3, #8]
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	021a      	lsls	r2, r3, #8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	431a      	orrs	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2201      	movs	r2, #1
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	43db      	mvns	r3, r3
 80072ba:	401a      	ands	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	fa01 f303 	lsl.w	r3, r1, r3
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e05a      	b.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a21      	ldr	r2, [pc, #132]	; (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d022      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007348:	d01d      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d018      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1b      	ldr	r2, [pc, #108]	; (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1a      	ldr	r2, [pc, #104]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00e      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a18      	ldr	r2, [pc, #96]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d009      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a17      	ldr	r2, [pc, #92]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d10c      	bne.n	80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800738c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4313      	orrs	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	40010000 	.word	0x40010000
 80073c4:	40000400 	.word	0x40000400
 80073c8:	40000800 	.word	0x40000800
 80073cc:	40000c00 	.word	0x40000c00
 80073d0:	40010400 	.word	0x40010400
 80073d4:	40014000 	.word	0x40014000
 80073d8:	40001800 	.word	0x40001800

080073dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e03f      	b.n	800746e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d106      	bne.n	8007408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fa f90e 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2224      	movs	r2, #36	; 0x24
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800741e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fddf 	bl	8007fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695a      	ldr	r2, [r3, #20]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b08a      	sub	sp, #40	; 0x28
 800747a:	af02      	add	r7, sp, #8
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4613      	mov	r3, r2
 8007484:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b20      	cmp	r3, #32
 8007494:	d17c      	bne.n	8007590 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_UART_Transmit+0x2c>
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e075      	b.n	8007592 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_UART_Transmit+0x3e>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e06e      	b.n	8007592 <HAL_UART_Transmit+0x11c>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2221      	movs	r2, #33	; 0x21
 80074c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ca:	f7fe f8dd 	bl	8005688 <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	88fa      	ldrh	r2, [r7, #6]
 80074da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e4:	d108      	bne.n	80074f8 <HAL_UART_Transmit+0x82>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d104      	bne.n	80074f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	e003      	b.n	8007500 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007508:	e02a      	b.n	8007560 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2200      	movs	r2, #0
 8007512:	2180      	movs	r1, #128	; 0x80
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fb1f 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e036      	b.n	8007592 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10b      	bne.n	8007542 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	3302      	adds	r3, #2
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	e007      	b.n	8007552 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	781a      	ldrb	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	3301      	adds	r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1cf      	bne.n	800750a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2200      	movs	r2, #0
 8007572:	2140      	movs	r1, #64	; 0x40
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 faef 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e006      	b.n	8007592 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	e000      	b.n	8007592 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007590:	2302      	movs	r3, #2
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	4613      	mov	r3, r2
 80075a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d11d      	bne.n	80075f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <HAL_UART_Receive_IT+0x26>
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e016      	b.n	80075f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_UART_Receive_IT+0x38>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e00f      	b.n	80075f2 <HAL_UART_Receive_IT+0x58>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	461a      	mov	r2, r3
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fb24 	bl	8007c34 <UART_Start_Receive_IT>
 80075ec:	4603      	mov	r3, r0
 80075ee:	e000      	b.n	80075f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075f0:	2302      	movs	r3, #2
  }
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b0ba      	sub	sp, #232	; 0xe8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007622:	2300      	movs	r3, #0
 8007624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800762e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800763a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10f      	bne.n	8007662 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <HAL_UART_IRQHandler+0x66>
 800764e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fc07 	bl	8007e6e <UART_Receive_IT>
      return;
 8007660:	e256      	b.n	8007b10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80de 	beq.w	8007828 <HAL_UART_IRQHandler+0x22c>
 800766c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d106      	bne.n	8007686 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80d1 	beq.w	8007828 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_UART_IRQHandler+0xae>
 8007692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f043 0201 	orr.w	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ae:	f003 0304 	and.w	r3, r3, #4
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_UART_IRQHandler+0xd2>
 80076b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f043 0202 	orr.w	r2, r3, #2
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_UART_IRQHandler+0xf6>
 80076da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f043 0204 	orr.w	r2, r3, #4
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d011      	beq.n	8007722 <HAL_UART_IRQHandler+0x126>
 80076fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d105      	bne.n	8007716 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800770a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f043 0208 	orr.w	r2, r3, #8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 81ed 	beq.w	8007b06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800772c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <HAL_UART_IRQHandler+0x14e>
 8007738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb92 	bl	8007e6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007754:	2b40      	cmp	r3, #64	; 0x40
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d103      	bne.n	8007776 <HAL_UART_IRQHandler+0x17a>
 800776e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007772:	2b00      	cmp	r3, #0
 8007774:	d04f      	beq.n	8007816 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa9a 	bl	8007cb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d141      	bne.n	800780e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3314      	adds	r3, #20
 8007790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3314      	adds	r3, #20
 80077b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1d9      	bne.n	800778a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d013      	beq.n	8007806 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	4a7d      	ldr	r2, [pc, #500]	; (80079d8 <HAL_UART_IRQHandler+0x3dc>)
 80077e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe f8d9 	bl	80059a2 <HAL_DMA_Abort_IT>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d016      	beq.n	8007824 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007804:	e00e      	b.n	8007824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f990 	bl	8007b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780c:	e00a      	b.n	8007824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f98c 	bl	8007b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007814:	e006      	b.n	8007824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f988 	bl	8007b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007822:	e170      	b.n	8007b06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	bf00      	nop
    return;
 8007826:	e16e      	b.n	8007b06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	2b01      	cmp	r3, #1
 800782e:	f040 814a 	bne.w	8007ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8143 	beq.w	8007ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 813c 	beq.w	8007ac6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	60bb      	str	r3, [r7, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	60bb      	str	r3, [r7, #8]
 8007862:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b40      	cmp	r3, #64	; 0x40
 8007870:	f040 80b4 	bne.w	80079dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8140 	beq.w	8007b0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800788e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007892:	429a      	cmp	r2, r3
 8007894:	f080 8139 	bcs.w	8007b0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800789e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078aa:	f000 8088 	beq.w	80079be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	330c      	adds	r3, #12
 80078b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1d9      	bne.n	80078ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800790a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3314      	adds	r3, #20
 800791a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800791e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007922:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e1      	bne.n	80078fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3314      	adds	r3, #20
 800793c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800794c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3314      	adds	r3, #20
 8007956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800795a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800795c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007960:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007962:	e841 2300 	strex	r3, r2, [r1]
 8007966:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1e3      	bne.n	8007936 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	330c      	adds	r3, #12
 8007982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800798c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798e:	f023 0310 	bic.w	r3, r3, #16
 8007992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	330c      	adds	r3, #12
 800799c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80079a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e3      	bne.n	800797c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fd ff82 	bl	80058c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f8b6 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079d4:	e099      	b.n	8007b0a <HAL_UART_IRQHandler+0x50e>
 80079d6:	bf00      	nop
 80079d8:	08007d77 	.word	0x08007d77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 808b 	beq.w	8007b0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 8086 	beq.w	8007b0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	330c      	adds	r3, #12
 8007a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a26:	647a      	str	r2, [r7, #68]	; 0x44
 8007a28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e3      	bne.n	8007a02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3314      	adds	r3, #20
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	623b      	str	r3, [r7, #32]
   return(result);
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f023 0301 	bic.w	r3, r3, #1
 8007a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e3      	bne.n	8007a3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0310 	bic.w	r3, r3, #16
 8007a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	330c      	adds	r3, #12
 8007aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007aa4:	61fa      	str	r2, [r7, #28]
 8007aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	69b9      	ldr	r1, [r7, #24]
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e3      	bne.n	8007a80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f83e 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ac4:	e023      	b.n	8007b0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x4ea>
 8007ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f95d 	bl	8007d9e <UART_Transmit_IT>
    return;
 8007ae4:	e014      	b.n	8007b10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00e      	beq.n	8007b10 <HAL_UART_IRQHandler+0x514>
 8007af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d008      	beq.n	8007b10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f99d 	bl	8007e3e <UART_EndTransmit_IT>
    return;
 8007b04:	e004      	b.n	8007b10 <HAL_UART_IRQHandler+0x514>
    return;
 8007b06:	bf00      	nop
 8007b08:	e002      	b.n	8007b10 <HAL_UART_IRQHandler+0x514>
      return;
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <HAL_UART_IRQHandler+0x514>
      return;
 8007b0e:	bf00      	nop
  }
}
 8007b10:	37e8      	adds	r7, #232	; 0xe8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop

08007b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b090      	sub	sp, #64	; 0x40
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	4613      	mov	r3, r2
 8007b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b68:	e050      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b70:	d04c      	beq.n	8007c0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b78:	f7fd fd86 	bl	8005688 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d241      	bcs.n	8007c0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	330c      	adds	r3, #12
 8007ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ba8:	637a      	str	r2, [r7, #52]	; 0x34
 8007baa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3314      	adds	r3, #20
 8007bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	613b      	str	r3, [r7, #16]
   return(result);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3314      	adds	r3, #20
 8007bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bdc:	623a      	str	r2, [r7, #32]
 8007bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	69f9      	ldr	r1, [r7, #28]
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e5      	bne.n	8007bbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e00f      	b.n	8007c2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	4013      	ands	r3, r2
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d09f      	beq.n	8007b6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3740      	adds	r7, #64	; 0x40
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	88fa      	ldrh	r2, [r7, #6]
 8007c52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2222      	movs	r2, #34	; 0x22
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695a      	ldr	r2, [r3, #20]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0201 	orr.w	r2, r2, #1
 8007c90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0220 	orr.w	r2, r2, #32
 8007ca0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b095      	sub	sp, #84	; 0x54
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	330c      	adds	r3, #12
 8007cbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	330c      	adds	r3, #12
 8007cd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cd8:	643a      	str	r2, [r7, #64]	; 0x40
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e5      	bne.n	8007cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3314      	adds	r3, #20
 8007cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3314      	adds	r3, #20
 8007d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e5      	bne.n	8007cec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d119      	bne.n	8007d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f023 0310 	bic.w	r3, r3, #16
 8007d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d48:	61ba      	str	r2, [r7, #24]
 8007d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6979      	ldr	r1, [r7, #20]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	613b      	str	r3, [r7, #16]
   return(result);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e5      	bne.n	8007d28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d6a:	bf00      	nop
 8007d6c:	3754      	adds	r7, #84	; 0x54
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff fecb 	bl	8007b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b085      	sub	sp, #20
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b21      	cmp	r3, #33	; 0x21
 8007db0:	d13e      	bne.n	8007e30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dba:	d114      	bne.n	8007de6 <UART_Transmit_IT+0x48>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d110      	bne.n	8007de6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	1c9a      	adds	r2, r3, #2
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	621a      	str	r2, [r3, #32]
 8007de4:	e008      	b.n	8007df8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	1c59      	adds	r1, r3, #1
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6211      	str	r1, [r2, #32]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4619      	mov	r1, r3
 8007e06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10f      	bne.n	8007e2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff fe5a 	bl	8007b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b08c      	sub	sp, #48	; 0x30
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b22      	cmp	r3, #34	; 0x22
 8007e80:	f040 80ab 	bne.w	8007fda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8c:	d117      	bne.n	8007ebe <UART_Receive_IT+0x50>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d113      	bne.n	8007ebe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	1c9a      	adds	r2, r3, #2
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	629a      	str	r2, [r3, #40]	; 0x28
 8007ebc:	e026      	b.n	8007f0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed0:	d007      	beq.n	8007ee2 <UART_Receive_IT+0x74>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <UART_Receive_IT+0x82>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e008      	b.n	8007f02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d15a      	bne.n	8007fd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0220 	bic.w	r2, r2, #32
 8007f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	695a      	ldr	r2, [r3, #20]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0201 	bic.w	r2, r2, #1
 8007f4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d135      	bne.n	8007fcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	613b      	str	r3, [r7, #16]
   return(result);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f023 0310 	bic.w	r3, r3, #16
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	330c      	adds	r3, #12
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	623a      	str	r2, [r7, #32]
 8007f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	69f9      	ldr	r1, [r7, #28]
 8007f8c:	6a3a      	ldr	r2, [r7, #32]
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e5      	bne.n	8007f66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d10a      	bne.n	8007fbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7ff fdbb 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
 8007fca:	e002      	b.n	8007fd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7f9 fdb3 	bl	8001b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e002      	b.n	8007fdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e000      	b.n	8007fdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007fda:	2302      	movs	r3, #2
  }
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3730      	adds	r7, #48	; 0x30
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe8:	b0c0      	sub	sp, #256	; 0x100
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008000:	68d9      	ldr	r1, [r3, #12]
 8008002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	ea40 0301 	orr.w	r3, r0, r1
 800800c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800800e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	431a      	orrs	r2, r3
 800801c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	431a      	orrs	r2, r3
 8008024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	4313      	orrs	r3, r2
 800802c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800803c:	f021 010c 	bic.w	r1, r1, #12
 8008040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800804a:	430b      	orrs	r3, r1
 800804c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800804e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800805a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805e:	6999      	ldr	r1, [r3, #24]
 8008060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	ea40 0301 	orr.w	r3, r0, r1
 800806a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b8f      	ldr	r3, [pc, #572]	; (80082b0 <UART_SetConfig+0x2cc>)
 8008074:	429a      	cmp	r2, r3
 8008076:	d005      	beq.n	8008084 <UART_SetConfig+0xa0>
 8008078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4b8d      	ldr	r3, [pc, #564]	; (80082b4 <UART_SetConfig+0x2d0>)
 8008080:	429a      	cmp	r2, r3
 8008082:	d104      	bne.n	800808e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008084:	f7fe faf4 	bl	8006670 <HAL_RCC_GetPCLK2Freq>
 8008088:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800808c:	e003      	b.n	8008096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800808e:	f7fe fadb 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8008092:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a0:	f040 810c 	bne.w	80082bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080b6:	4622      	mov	r2, r4
 80080b8:	462b      	mov	r3, r5
 80080ba:	1891      	adds	r1, r2, r2
 80080bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80080be:	415b      	adcs	r3, r3
 80080c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080c6:	4621      	mov	r1, r4
 80080c8:	eb12 0801 	adds.w	r8, r2, r1
 80080cc:	4629      	mov	r1, r5
 80080ce:	eb43 0901 	adc.w	r9, r3, r1
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080e6:	4690      	mov	r8, r2
 80080e8:	4699      	mov	r9, r3
 80080ea:	4623      	mov	r3, r4
 80080ec:	eb18 0303 	adds.w	r3, r8, r3
 80080f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080f4:	462b      	mov	r3, r5
 80080f6:	eb49 0303 	adc.w	r3, r9, r3
 80080fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800810a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800810e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008112:	460b      	mov	r3, r1
 8008114:	18db      	adds	r3, r3, r3
 8008116:	653b      	str	r3, [r7, #80]	; 0x50
 8008118:	4613      	mov	r3, r2
 800811a:	eb42 0303 	adc.w	r3, r2, r3
 800811e:	657b      	str	r3, [r7, #84]	; 0x54
 8008120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008128:	f7f8 fdae 	bl	8000c88 <__aeabi_uldivmod>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4b61      	ldr	r3, [pc, #388]	; (80082b8 <UART_SetConfig+0x2d4>)
 8008132:	fba3 2302 	umull	r2, r3, r3, r2
 8008136:	095b      	lsrs	r3, r3, #5
 8008138:	011c      	lsls	r4, r3, #4
 800813a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800813e:	2200      	movs	r2, #0
 8008140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008144:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800814c:	4642      	mov	r2, r8
 800814e:	464b      	mov	r3, r9
 8008150:	1891      	adds	r1, r2, r2
 8008152:	64b9      	str	r1, [r7, #72]	; 0x48
 8008154:	415b      	adcs	r3, r3
 8008156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800815c:	4641      	mov	r1, r8
 800815e:	eb12 0a01 	adds.w	sl, r2, r1
 8008162:	4649      	mov	r1, r9
 8008164:	eb43 0b01 	adc.w	fp, r3, r1
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800817c:	4692      	mov	sl, r2
 800817e:	469b      	mov	fp, r3
 8008180:	4643      	mov	r3, r8
 8008182:	eb1a 0303 	adds.w	r3, sl, r3
 8008186:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800818a:	464b      	mov	r3, r9
 800818c:	eb4b 0303 	adc.w	r3, fp, r3
 8008190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081a8:	460b      	mov	r3, r1
 80081aa:	18db      	adds	r3, r3, r3
 80081ac:	643b      	str	r3, [r7, #64]	; 0x40
 80081ae:	4613      	mov	r3, r2
 80081b0:	eb42 0303 	adc.w	r3, r2, r3
 80081b4:	647b      	str	r3, [r7, #68]	; 0x44
 80081b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081be:	f7f8 fd63 	bl	8000c88 <__aeabi_uldivmod>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4611      	mov	r1, r2
 80081c8:	4b3b      	ldr	r3, [pc, #236]	; (80082b8 <UART_SetConfig+0x2d4>)
 80081ca:	fba3 2301 	umull	r2, r3, r3, r1
 80081ce:	095b      	lsrs	r3, r3, #5
 80081d0:	2264      	movs	r2, #100	; 0x64
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	1acb      	subs	r3, r1, r3
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80081de:	4b36      	ldr	r3, [pc, #216]	; (80082b8 <UART_SetConfig+0x2d4>)
 80081e0:	fba3 2302 	umull	r2, r3, r3, r2
 80081e4:	095b      	lsrs	r3, r3, #5
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081ec:	441c      	add	r4, r3
 80081ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80081fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	1891      	adds	r1, r2, r2
 8008206:	63b9      	str	r1, [r7, #56]	; 0x38
 8008208:	415b      	adcs	r3, r3
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800820c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008210:	4641      	mov	r1, r8
 8008212:	1851      	adds	r1, r2, r1
 8008214:	6339      	str	r1, [r7, #48]	; 0x30
 8008216:	4649      	mov	r1, r9
 8008218:	414b      	adcs	r3, r1
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008228:	4659      	mov	r1, fp
 800822a:	00cb      	lsls	r3, r1, #3
 800822c:	4651      	mov	r1, sl
 800822e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008232:	4651      	mov	r1, sl
 8008234:	00ca      	lsls	r2, r1, #3
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	4603      	mov	r3, r0
 800823c:	4642      	mov	r2, r8
 800823e:	189b      	adds	r3, r3, r2
 8008240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008244:	464b      	mov	r3, r9
 8008246:	460a      	mov	r2, r1
 8008248:	eb42 0303 	adc.w	r3, r2, r3
 800824c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800825c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008264:	460b      	mov	r3, r1
 8008266:	18db      	adds	r3, r3, r3
 8008268:	62bb      	str	r3, [r7, #40]	; 0x28
 800826a:	4613      	mov	r3, r2
 800826c:	eb42 0303 	adc.w	r3, r2, r3
 8008270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800827a:	f7f8 fd05 	bl	8000c88 <__aeabi_uldivmod>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <UART_SetConfig+0x2d4>)
 8008284:	fba3 1302 	umull	r1, r3, r3, r2
 8008288:	095b      	lsrs	r3, r3, #5
 800828a:	2164      	movs	r1, #100	; 0x64
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	3332      	adds	r3, #50	; 0x32
 8008296:	4a08      	ldr	r2, [pc, #32]	; (80082b8 <UART_SetConfig+0x2d4>)
 8008298:	fba2 2303 	umull	r2, r3, r2, r3
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	f003 0207 	and.w	r2, r3, #7
 80082a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4422      	add	r2, r4
 80082aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082ac:	e105      	b.n	80084ba <UART_SetConfig+0x4d6>
 80082ae:	bf00      	nop
 80082b0:	40011000 	.word	0x40011000
 80082b4:	40011400 	.word	0x40011400
 80082b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082ce:	4642      	mov	r2, r8
 80082d0:	464b      	mov	r3, r9
 80082d2:	1891      	adds	r1, r2, r2
 80082d4:	6239      	str	r1, [r7, #32]
 80082d6:	415b      	adcs	r3, r3
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
 80082da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082de:	4641      	mov	r1, r8
 80082e0:	1854      	adds	r4, r2, r1
 80082e2:	4649      	mov	r1, r9
 80082e4:	eb43 0501 	adc.w	r5, r3, r1
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	f04f 0300 	mov.w	r3, #0
 80082f0:	00eb      	lsls	r3, r5, #3
 80082f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082f6:	00e2      	lsls	r2, r4, #3
 80082f8:	4614      	mov	r4, r2
 80082fa:	461d      	mov	r5, r3
 80082fc:	4643      	mov	r3, r8
 80082fe:	18e3      	adds	r3, r4, r3
 8008300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008304:	464b      	mov	r3, r9
 8008306:	eb45 0303 	adc.w	r3, r5, r3
 800830a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800830e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800831a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800832a:	4629      	mov	r1, r5
 800832c:	008b      	lsls	r3, r1, #2
 800832e:	4621      	mov	r1, r4
 8008330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008334:	4621      	mov	r1, r4
 8008336:	008a      	lsls	r2, r1, #2
 8008338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800833c:	f7f8 fca4 	bl	8000c88 <__aeabi_uldivmod>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4b60      	ldr	r3, [pc, #384]	; (80084c8 <UART_SetConfig+0x4e4>)
 8008346:	fba3 2302 	umull	r2, r3, r3, r2
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	011c      	lsls	r4, r3, #4
 800834e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008352:	2200      	movs	r2, #0
 8008354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008358:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800835c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008360:	4642      	mov	r2, r8
 8008362:	464b      	mov	r3, r9
 8008364:	1891      	adds	r1, r2, r2
 8008366:	61b9      	str	r1, [r7, #24]
 8008368:	415b      	adcs	r3, r3
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008370:	4641      	mov	r1, r8
 8008372:	1851      	adds	r1, r2, r1
 8008374:	6139      	str	r1, [r7, #16]
 8008376:	4649      	mov	r1, r9
 8008378:	414b      	adcs	r3, r1
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008388:	4659      	mov	r1, fp
 800838a:	00cb      	lsls	r3, r1, #3
 800838c:	4651      	mov	r1, sl
 800838e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008392:	4651      	mov	r1, sl
 8008394:	00ca      	lsls	r2, r1, #3
 8008396:	4610      	mov	r0, r2
 8008398:	4619      	mov	r1, r3
 800839a:	4603      	mov	r3, r0
 800839c:	4642      	mov	r2, r8
 800839e:	189b      	adds	r3, r3, r2
 80083a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083a4:	464b      	mov	r3, r9
 80083a6:	460a      	mov	r2, r1
 80083a8:	eb42 0303 	adc.w	r3, r2, r3
 80083ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80083ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083bc:	f04f 0200 	mov.w	r2, #0
 80083c0:	f04f 0300 	mov.w	r3, #0
 80083c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083c8:	4649      	mov	r1, r9
 80083ca:	008b      	lsls	r3, r1, #2
 80083cc:	4641      	mov	r1, r8
 80083ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083d2:	4641      	mov	r1, r8
 80083d4:	008a      	lsls	r2, r1, #2
 80083d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80083da:	f7f8 fc55 	bl	8000c88 <__aeabi_uldivmod>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4b39      	ldr	r3, [pc, #228]	; (80084c8 <UART_SetConfig+0x4e4>)
 80083e4:	fba3 1302 	umull	r1, r3, r3, r2
 80083e8:	095b      	lsrs	r3, r3, #5
 80083ea:	2164      	movs	r1, #100	; 0x64
 80083ec:	fb01 f303 	mul.w	r3, r1, r3
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	3332      	adds	r3, #50	; 0x32
 80083f6:	4a34      	ldr	r2, [pc, #208]	; (80084c8 <UART_SetConfig+0x4e4>)
 80083f8:	fba2 2303 	umull	r2, r3, r2, r3
 80083fc:	095b      	lsrs	r3, r3, #5
 80083fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008402:	441c      	add	r4, r3
 8008404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008408:	2200      	movs	r2, #0
 800840a:	673b      	str	r3, [r7, #112]	; 0x70
 800840c:	677a      	str	r2, [r7, #116]	; 0x74
 800840e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008412:	4642      	mov	r2, r8
 8008414:	464b      	mov	r3, r9
 8008416:	1891      	adds	r1, r2, r2
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	415b      	adcs	r3, r3
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008422:	4641      	mov	r1, r8
 8008424:	1851      	adds	r1, r2, r1
 8008426:	6039      	str	r1, [r7, #0]
 8008428:	4649      	mov	r1, r9
 800842a:	414b      	adcs	r3, r1
 800842c:	607b      	str	r3, [r7, #4]
 800842e:	f04f 0200 	mov.w	r2, #0
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800843a:	4659      	mov	r1, fp
 800843c:	00cb      	lsls	r3, r1, #3
 800843e:	4651      	mov	r1, sl
 8008440:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008444:	4651      	mov	r1, sl
 8008446:	00ca      	lsls	r2, r1, #3
 8008448:	4610      	mov	r0, r2
 800844a:	4619      	mov	r1, r3
 800844c:	4603      	mov	r3, r0
 800844e:	4642      	mov	r2, r8
 8008450:	189b      	adds	r3, r3, r2
 8008452:	66bb      	str	r3, [r7, #104]	; 0x68
 8008454:	464b      	mov	r3, r9
 8008456:	460a      	mov	r2, r1
 8008458:	eb42 0303 	adc.w	r3, r2, r3
 800845c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800845e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	663b      	str	r3, [r7, #96]	; 0x60
 8008468:	667a      	str	r2, [r7, #100]	; 0x64
 800846a:	f04f 0200 	mov.w	r2, #0
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008476:	4649      	mov	r1, r9
 8008478:	008b      	lsls	r3, r1, #2
 800847a:	4641      	mov	r1, r8
 800847c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008480:	4641      	mov	r1, r8
 8008482:	008a      	lsls	r2, r1, #2
 8008484:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008488:	f7f8 fbfe 	bl	8000c88 <__aeabi_uldivmod>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <UART_SetConfig+0x4e4>)
 8008492:	fba3 1302 	umull	r1, r3, r3, r2
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	2164      	movs	r1, #100	; 0x64
 800849a:	fb01 f303 	mul.w	r3, r1, r3
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	3332      	adds	r3, #50	; 0x32
 80084a4:	4a08      	ldr	r2, [pc, #32]	; (80084c8 <UART_SetConfig+0x4e4>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	f003 020f 	and.w	r2, r3, #15
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4422      	add	r2, r4
 80084b8:	609a      	str	r2, [r3, #8]
}
 80084ba:	bf00      	nop
 80084bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084c0:	46bd      	mov	sp, r7
 80084c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084c6:	bf00      	nop
 80084c8:	51eb851f 	.word	0x51eb851f

080084cc <__assert_func>:
 80084cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ce:	4614      	mov	r4, r2
 80084d0:	461a      	mov	r2, r3
 80084d2:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <__assert_func+0x2c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4605      	mov	r5, r0
 80084d8:	68d8      	ldr	r0, [r3, #12]
 80084da:	b14c      	cbz	r4, 80084f0 <__assert_func+0x24>
 80084dc:	4b07      	ldr	r3, [pc, #28]	; (80084fc <__assert_func+0x30>)
 80084de:	9100      	str	r1, [sp, #0]
 80084e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084e4:	4906      	ldr	r1, [pc, #24]	; (8008500 <__assert_func+0x34>)
 80084e6:	462b      	mov	r3, r5
 80084e8:	f000 f9c6 	bl	8008878 <fiprintf>
 80084ec:	f002 fc22 	bl	800ad34 <abort>
 80084f0:	4b04      	ldr	r3, [pc, #16]	; (8008504 <__assert_func+0x38>)
 80084f2:	461c      	mov	r4, r3
 80084f4:	e7f3      	b.n	80084de <__assert_func+0x12>
 80084f6:	bf00      	nop
 80084f8:	2000000c 	.word	0x2000000c
 80084fc:	0800f4c0 	.word	0x0800f4c0
 8008500:	0800f4cd 	.word	0x0800f4cd
 8008504:	0800f4fb 	.word	0x0800f4fb

08008508 <calloc>:
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <calloc+0xc>)
 800850a:	460a      	mov	r2, r1
 800850c:	4601      	mov	r1, r0
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	f000 bafa 	b.w	8008b08 <_calloc_r>
 8008514:	2000000c 	.word	0x2000000c

08008518 <__errno>:
 8008518:	4b01      	ldr	r3, [pc, #4]	; (8008520 <__errno+0x8>)
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	2000000c 	.word	0x2000000c

08008524 <__sflush_r>:
 8008524:	898a      	ldrh	r2, [r1, #12]
 8008526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852a:	4605      	mov	r5, r0
 800852c:	0710      	lsls	r0, r2, #28
 800852e:	460c      	mov	r4, r1
 8008530:	d458      	bmi.n	80085e4 <__sflush_r+0xc0>
 8008532:	684b      	ldr	r3, [r1, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	dc05      	bgt.n	8008544 <__sflush_r+0x20>
 8008538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	dc02      	bgt.n	8008544 <__sflush_r+0x20>
 800853e:	2000      	movs	r0, #0
 8008540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008546:	2e00      	cmp	r6, #0
 8008548:	d0f9      	beq.n	800853e <__sflush_r+0x1a>
 800854a:	2300      	movs	r3, #0
 800854c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008550:	682f      	ldr	r7, [r5, #0]
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	d032      	beq.n	80085bc <__sflush_r+0x98>
 8008556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	075a      	lsls	r2, r3, #29
 800855c:	d505      	bpl.n	800856a <__sflush_r+0x46>
 800855e:	6863      	ldr	r3, [r4, #4]
 8008560:	1ac0      	subs	r0, r0, r3
 8008562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008564:	b10b      	cbz	r3, 800856a <__sflush_r+0x46>
 8008566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008568:	1ac0      	subs	r0, r0, r3
 800856a:	2300      	movs	r3, #0
 800856c:	4602      	mov	r2, r0
 800856e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008570:	6a21      	ldr	r1, [r4, #32]
 8008572:	4628      	mov	r0, r5
 8008574:	47b0      	blx	r6
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	d106      	bne.n	800858a <__sflush_r+0x66>
 800857c:	6829      	ldr	r1, [r5, #0]
 800857e:	291d      	cmp	r1, #29
 8008580:	d82c      	bhi.n	80085dc <__sflush_r+0xb8>
 8008582:	4a2a      	ldr	r2, [pc, #168]	; (800862c <__sflush_r+0x108>)
 8008584:	40ca      	lsrs	r2, r1
 8008586:	07d6      	lsls	r6, r2, #31
 8008588:	d528      	bpl.n	80085dc <__sflush_r+0xb8>
 800858a:	2200      	movs	r2, #0
 800858c:	6062      	str	r2, [r4, #4]
 800858e:	04d9      	lsls	r1, r3, #19
 8008590:	6922      	ldr	r2, [r4, #16]
 8008592:	6022      	str	r2, [r4, #0]
 8008594:	d504      	bpl.n	80085a0 <__sflush_r+0x7c>
 8008596:	1c42      	adds	r2, r0, #1
 8008598:	d101      	bne.n	800859e <__sflush_r+0x7a>
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	b903      	cbnz	r3, 80085a0 <__sflush_r+0x7c>
 800859e:	6560      	str	r0, [r4, #84]	; 0x54
 80085a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085a2:	602f      	str	r7, [r5, #0]
 80085a4:	2900      	cmp	r1, #0
 80085a6:	d0ca      	beq.n	800853e <__sflush_r+0x1a>
 80085a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085ac:	4299      	cmp	r1, r3
 80085ae:	d002      	beq.n	80085b6 <__sflush_r+0x92>
 80085b0:	4628      	mov	r0, r5
 80085b2:	f000 fabf 	bl	8008b34 <_free_r>
 80085b6:	2000      	movs	r0, #0
 80085b8:	6360      	str	r0, [r4, #52]	; 0x34
 80085ba:	e7c1      	b.n	8008540 <__sflush_r+0x1c>
 80085bc:	6a21      	ldr	r1, [r4, #32]
 80085be:	2301      	movs	r3, #1
 80085c0:	4628      	mov	r0, r5
 80085c2:	47b0      	blx	r6
 80085c4:	1c41      	adds	r1, r0, #1
 80085c6:	d1c7      	bne.n	8008558 <__sflush_r+0x34>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0c4      	beq.n	8008558 <__sflush_r+0x34>
 80085ce:	2b1d      	cmp	r3, #29
 80085d0:	d001      	beq.n	80085d6 <__sflush_r+0xb2>
 80085d2:	2b16      	cmp	r3, #22
 80085d4:	d101      	bne.n	80085da <__sflush_r+0xb6>
 80085d6:	602f      	str	r7, [r5, #0]
 80085d8:	e7b1      	b.n	800853e <__sflush_r+0x1a>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e0:	81a3      	strh	r3, [r4, #12]
 80085e2:	e7ad      	b.n	8008540 <__sflush_r+0x1c>
 80085e4:	690f      	ldr	r7, [r1, #16]
 80085e6:	2f00      	cmp	r7, #0
 80085e8:	d0a9      	beq.n	800853e <__sflush_r+0x1a>
 80085ea:	0793      	lsls	r3, r2, #30
 80085ec:	680e      	ldr	r6, [r1, #0]
 80085ee:	bf08      	it	eq
 80085f0:	694b      	ldreq	r3, [r1, #20]
 80085f2:	600f      	str	r7, [r1, #0]
 80085f4:	bf18      	it	ne
 80085f6:	2300      	movne	r3, #0
 80085f8:	eba6 0807 	sub.w	r8, r6, r7
 80085fc:	608b      	str	r3, [r1, #8]
 80085fe:	f1b8 0f00 	cmp.w	r8, #0
 8008602:	dd9c      	ble.n	800853e <__sflush_r+0x1a>
 8008604:	6a21      	ldr	r1, [r4, #32]
 8008606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008608:	4643      	mov	r3, r8
 800860a:	463a      	mov	r2, r7
 800860c:	4628      	mov	r0, r5
 800860e:	47b0      	blx	r6
 8008610:	2800      	cmp	r0, #0
 8008612:	dc06      	bgt.n	8008622 <__sflush_r+0xfe>
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	e78e      	b.n	8008540 <__sflush_r+0x1c>
 8008622:	4407      	add	r7, r0
 8008624:	eba8 0800 	sub.w	r8, r8, r0
 8008628:	e7e9      	b.n	80085fe <__sflush_r+0xda>
 800862a:	bf00      	nop
 800862c:	20400001 	.word	0x20400001

08008630 <_fflush_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	690b      	ldr	r3, [r1, #16]
 8008634:	4605      	mov	r5, r0
 8008636:	460c      	mov	r4, r1
 8008638:	b913      	cbnz	r3, 8008640 <_fflush_r+0x10>
 800863a:	2500      	movs	r5, #0
 800863c:	4628      	mov	r0, r5
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	b118      	cbz	r0, 800864a <_fflush_r+0x1a>
 8008642:	6983      	ldr	r3, [r0, #24]
 8008644:	b90b      	cbnz	r3, 800864a <_fflush_r+0x1a>
 8008646:	f000 f899 	bl	800877c <__sinit>
 800864a:	4b14      	ldr	r3, [pc, #80]	; (800869c <_fflush_r+0x6c>)
 800864c:	429c      	cmp	r4, r3
 800864e:	d11b      	bne.n	8008688 <_fflush_r+0x58>
 8008650:	686c      	ldr	r4, [r5, #4]
 8008652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0ef      	beq.n	800863a <_fflush_r+0xa>
 800865a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800865c:	07d0      	lsls	r0, r2, #31
 800865e:	d404      	bmi.n	800866a <_fflush_r+0x3a>
 8008660:	0599      	lsls	r1, r3, #22
 8008662:	d402      	bmi.n	800866a <_fflush_r+0x3a>
 8008664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008666:	f000 fa0c 	bl	8008a82 <__retarget_lock_acquire_recursive>
 800866a:	4628      	mov	r0, r5
 800866c:	4621      	mov	r1, r4
 800866e:	f7ff ff59 	bl	8008524 <__sflush_r>
 8008672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008674:	07da      	lsls	r2, r3, #31
 8008676:	4605      	mov	r5, r0
 8008678:	d4e0      	bmi.n	800863c <_fflush_r+0xc>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	059b      	lsls	r3, r3, #22
 800867e:	d4dd      	bmi.n	800863c <_fflush_r+0xc>
 8008680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008682:	f000 f9ff 	bl	8008a84 <__retarget_lock_release_recursive>
 8008686:	e7d9      	b.n	800863c <_fflush_r+0xc>
 8008688:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <_fflush_r+0x70>)
 800868a:	429c      	cmp	r4, r3
 800868c:	d101      	bne.n	8008692 <_fflush_r+0x62>
 800868e:	68ac      	ldr	r4, [r5, #8]
 8008690:	e7df      	b.n	8008652 <_fflush_r+0x22>
 8008692:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <_fflush_r+0x74>)
 8008694:	429c      	cmp	r4, r3
 8008696:	bf08      	it	eq
 8008698:	68ec      	ldreq	r4, [r5, #12]
 800869a:	e7da      	b.n	8008652 <_fflush_r+0x22>
 800869c:	0800f620 	.word	0x0800f620
 80086a0:	0800f640 	.word	0x0800f640
 80086a4:	0800f600 	.word	0x0800f600

080086a8 <fflush>:
 80086a8:	4601      	mov	r1, r0
 80086aa:	b920      	cbnz	r0, 80086b6 <fflush+0xe>
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <fflush+0x18>)
 80086ae:	4905      	ldr	r1, [pc, #20]	; (80086c4 <fflush+0x1c>)
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f000 b933 	b.w	800891c <_fwalk_reent>
 80086b6:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <fflush+0x20>)
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f7ff bfb9 	b.w	8008630 <_fflush_r>
 80086be:	bf00      	nop
 80086c0:	0800f660 	.word	0x0800f660
 80086c4:	08008631 	.word	0x08008631
 80086c8:	2000000c 	.word	0x2000000c

080086cc <std>:
 80086cc:	2300      	movs	r3, #0
 80086ce:	b510      	push	{r4, lr}
 80086d0:	4604      	mov	r4, r0
 80086d2:	e9c0 3300 	strd	r3, r3, [r0]
 80086d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086da:	6083      	str	r3, [r0, #8]
 80086dc:	8181      	strh	r1, [r0, #12]
 80086de:	6643      	str	r3, [r0, #100]	; 0x64
 80086e0:	81c2      	strh	r2, [r0, #14]
 80086e2:	6183      	str	r3, [r0, #24]
 80086e4:	4619      	mov	r1, r3
 80086e6:	2208      	movs	r2, #8
 80086e8:	305c      	adds	r0, #92	; 0x5c
 80086ea:	f000 fa05 	bl	8008af8 <memset>
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <std+0x38>)
 80086f0:	6263      	str	r3, [r4, #36]	; 0x24
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <std+0x3c>)
 80086f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80086f6:	4b05      	ldr	r3, [pc, #20]	; (800870c <std+0x40>)
 80086f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <std+0x44>)
 80086fc:	6224      	str	r4, [r4, #32]
 80086fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008700:	bd10      	pop	{r4, pc}
 8008702:	bf00      	nop
 8008704:	08009dad 	.word	0x08009dad
 8008708:	08009dcf 	.word	0x08009dcf
 800870c:	08009e07 	.word	0x08009e07
 8008710:	08009e2b 	.word	0x08009e2b

08008714 <_cleanup_r>:
 8008714:	4901      	ldr	r1, [pc, #4]	; (800871c <_cleanup_r+0x8>)
 8008716:	f000 b901 	b.w	800891c <_fwalk_reent>
 800871a:	bf00      	nop
 800871c:	08008631 	.word	0x08008631

08008720 <__sfmoreglue>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	2268      	movs	r2, #104	; 0x68
 8008724:	1e4d      	subs	r5, r1, #1
 8008726:	4355      	muls	r5, r2
 8008728:	460e      	mov	r6, r1
 800872a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800872e:	f000 fa6d 	bl	8008c0c <_malloc_r>
 8008732:	4604      	mov	r4, r0
 8008734:	b140      	cbz	r0, 8008748 <__sfmoreglue+0x28>
 8008736:	2100      	movs	r1, #0
 8008738:	e9c0 1600 	strd	r1, r6, [r0]
 800873c:	300c      	adds	r0, #12
 800873e:	60a0      	str	r0, [r4, #8]
 8008740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008744:	f000 f9d8 	bl	8008af8 <memset>
 8008748:	4620      	mov	r0, r4
 800874a:	bd70      	pop	{r4, r5, r6, pc}

0800874c <__sfp_lock_acquire>:
 800874c:	4801      	ldr	r0, [pc, #4]	; (8008754 <__sfp_lock_acquire+0x8>)
 800874e:	f000 b998 	b.w	8008a82 <__retarget_lock_acquire_recursive>
 8008752:	bf00      	nop
 8008754:	20000edd 	.word	0x20000edd

08008758 <__sfp_lock_release>:
 8008758:	4801      	ldr	r0, [pc, #4]	; (8008760 <__sfp_lock_release+0x8>)
 800875a:	f000 b993 	b.w	8008a84 <__retarget_lock_release_recursive>
 800875e:	bf00      	nop
 8008760:	20000edd 	.word	0x20000edd

08008764 <__sinit_lock_acquire>:
 8008764:	4801      	ldr	r0, [pc, #4]	; (800876c <__sinit_lock_acquire+0x8>)
 8008766:	f000 b98c 	b.w	8008a82 <__retarget_lock_acquire_recursive>
 800876a:	bf00      	nop
 800876c:	20000ede 	.word	0x20000ede

08008770 <__sinit_lock_release>:
 8008770:	4801      	ldr	r0, [pc, #4]	; (8008778 <__sinit_lock_release+0x8>)
 8008772:	f000 b987 	b.w	8008a84 <__retarget_lock_release_recursive>
 8008776:	bf00      	nop
 8008778:	20000ede 	.word	0x20000ede

0800877c <__sinit>:
 800877c:	b510      	push	{r4, lr}
 800877e:	4604      	mov	r4, r0
 8008780:	f7ff fff0 	bl	8008764 <__sinit_lock_acquire>
 8008784:	69a3      	ldr	r3, [r4, #24]
 8008786:	b11b      	cbz	r3, 8008790 <__sinit+0x14>
 8008788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800878c:	f7ff bff0 	b.w	8008770 <__sinit_lock_release>
 8008790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008794:	6523      	str	r3, [r4, #80]	; 0x50
 8008796:	4b13      	ldr	r3, [pc, #76]	; (80087e4 <__sinit+0x68>)
 8008798:	4a13      	ldr	r2, [pc, #76]	; (80087e8 <__sinit+0x6c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	62a2      	str	r2, [r4, #40]	; 0x28
 800879e:	42a3      	cmp	r3, r4
 80087a0:	bf04      	itt	eq
 80087a2:	2301      	moveq	r3, #1
 80087a4:	61a3      	streq	r3, [r4, #24]
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 f820 	bl	80087ec <__sfp>
 80087ac:	6060      	str	r0, [r4, #4]
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 f81c 	bl	80087ec <__sfp>
 80087b4:	60a0      	str	r0, [r4, #8]
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 f818 	bl	80087ec <__sfp>
 80087bc:	2200      	movs	r2, #0
 80087be:	60e0      	str	r0, [r4, #12]
 80087c0:	2104      	movs	r1, #4
 80087c2:	6860      	ldr	r0, [r4, #4]
 80087c4:	f7ff ff82 	bl	80086cc <std>
 80087c8:	68a0      	ldr	r0, [r4, #8]
 80087ca:	2201      	movs	r2, #1
 80087cc:	2109      	movs	r1, #9
 80087ce:	f7ff ff7d 	bl	80086cc <std>
 80087d2:	68e0      	ldr	r0, [r4, #12]
 80087d4:	2202      	movs	r2, #2
 80087d6:	2112      	movs	r1, #18
 80087d8:	f7ff ff78 	bl	80086cc <std>
 80087dc:	2301      	movs	r3, #1
 80087de:	61a3      	str	r3, [r4, #24]
 80087e0:	e7d2      	b.n	8008788 <__sinit+0xc>
 80087e2:	bf00      	nop
 80087e4:	0800f660 	.word	0x0800f660
 80087e8:	08008715 	.word	0x08008715

080087ec <__sfp>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	4607      	mov	r7, r0
 80087f0:	f7ff ffac 	bl	800874c <__sfp_lock_acquire>
 80087f4:	4b1e      	ldr	r3, [pc, #120]	; (8008870 <__sfp+0x84>)
 80087f6:	681e      	ldr	r6, [r3, #0]
 80087f8:	69b3      	ldr	r3, [r6, #24]
 80087fa:	b913      	cbnz	r3, 8008802 <__sfp+0x16>
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff ffbd 	bl	800877c <__sinit>
 8008802:	3648      	adds	r6, #72	; 0x48
 8008804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008808:	3b01      	subs	r3, #1
 800880a:	d503      	bpl.n	8008814 <__sfp+0x28>
 800880c:	6833      	ldr	r3, [r6, #0]
 800880e:	b30b      	cbz	r3, 8008854 <__sfp+0x68>
 8008810:	6836      	ldr	r6, [r6, #0]
 8008812:	e7f7      	b.n	8008804 <__sfp+0x18>
 8008814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008818:	b9d5      	cbnz	r5, 8008850 <__sfp+0x64>
 800881a:	4b16      	ldr	r3, [pc, #88]	; (8008874 <__sfp+0x88>)
 800881c:	60e3      	str	r3, [r4, #12]
 800881e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008822:	6665      	str	r5, [r4, #100]	; 0x64
 8008824:	f000 f92c 	bl	8008a80 <__retarget_lock_init_recursive>
 8008828:	f7ff ff96 	bl	8008758 <__sfp_lock_release>
 800882c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008834:	6025      	str	r5, [r4, #0]
 8008836:	61a5      	str	r5, [r4, #24]
 8008838:	2208      	movs	r2, #8
 800883a:	4629      	mov	r1, r5
 800883c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008840:	f000 f95a 	bl	8008af8 <memset>
 8008844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800884c:	4620      	mov	r0, r4
 800884e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008850:	3468      	adds	r4, #104	; 0x68
 8008852:	e7d9      	b.n	8008808 <__sfp+0x1c>
 8008854:	2104      	movs	r1, #4
 8008856:	4638      	mov	r0, r7
 8008858:	f7ff ff62 	bl	8008720 <__sfmoreglue>
 800885c:	4604      	mov	r4, r0
 800885e:	6030      	str	r0, [r6, #0]
 8008860:	2800      	cmp	r0, #0
 8008862:	d1d5      	bne.n	8008810 <__sfp+0x24>
 8008864:	f7ff ff78 	bl	8008758 <__sfp_lock_release>
 8008868:	230c      	movs	r3, #12
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	e7ee      	b.n	800884c <__sfp+0x60>
 800886e:	bf00      	nop
 8008870:	0800f660 	.word	0x0800f660
 8008874:	ffff0001 	.word	0xffff0001

08008878 <fiprintf>:
 8008878:	b40e      	push	{r1, r2, r3}
 800887a:	b503      	push	{r0, r1, lr}
 800887c:	4601      	mov	r1, r0
 800887e:	ab03      	add	r3, sp, #12
 8008880:	4805      	ldr	r0, [pc, #20]	; (8008898 <fiprintf+0x20>)
 8008882:	f853 2b04 	ldr.w	r2, [r3], #4
 8008886:	6800      	ldr	r0, [r0, #0]
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	f000 fa5d 	bl	8008d48 <_vfiprintf_r>
 800888e:	b002      	add	sp, #8
 8008890:	f85d eb04 	ldr.w	lr, [sp], #4
 8008894:	b003      	add	sp, #12
 8008896:	4770      	bx	lr
 8008898:	2000000c 	.word	0x2000000c

0800889c <_fputc_r>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	460e      	mov	r6, r1
 80088a0:	4614      	mov	r4, r2
 80088a2:	4605      	mov	r5, r0
 80088a4:	b118      	cbz	r0, 80088ae <_fputc_r+0x12>
 80088a6:	6983      	ldr	r3, [r0, #24]
 80088a8:	b90b      	cbnz	r3, 80088ae <_fputc_r+0x12>
 80088aa:	f7ff ff67 	bl	800877c <__sinit>
 80088ae:	4b14      	ldr	r3, [pc, #80]	; (8008900 <_fputc_r+0x64>)
 80088b0:	429c      	cmp	r4, r3
 80088b2:	d11a      	bne.n	80088ea <_fputc_r+0x4e>
 80088b4:	686c      	ldr	r4, [r5, #4]
 80088b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088b8:	07d8      	lsls	r0, r3, #31
 80088ba:	d405      	bmi.n	80088c8 <_fputc_r+0x2c>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	0599      	lsls	r1, r3, #22
 80088c0:	d402      	bmi.n	80088c8 <_fputc_r+0x2c>
 80088c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088c4:	f000 f8dd 	bl	8008a82 <__retarget_lock_acquire_recursive>
 80088c8:	4622      	mov	r2, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	4631      	mov	r1, r6
 80088ce:	f001 f9ef 	bl	8009cb0 <_putc_r>
 80088d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088d4:	07da      	lsls	r2, r3, #31
 80088d6:	4605      	mov	r5, r0
 80088d8:	d405      	bmi.n	80088e6 <_fputc_r+0x4a>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	059b      	lsls	r3, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_fputc_r+0x4a>
 80088e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e2:	f000 f8cf 	bl	8008a84 <__retarget_lock_release_recursive>
 80088e6:	4628      	mov	r0, r5
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	4b06      	ldr	r3, [pc, #24]	; (8008904 <_fputc_r+0x68>)
 80088ec:	429c      	cmp	r4, r3
 80088ee:	d101      	bne.n	80088f4 <_fputc_r+0x58>
 80088f0:	68ac      	ldr	r4, [r5, #8]
 80088f2:	e7e0      	b.n	80088b6 <_fputc_r+0x1a>
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <_fputc_r+0x6c>)
 80088f6:	429c      	cmp	r4, r3
 80088f8:	bf08      	it	eq
 80088fa:	68ec      	ldreq	r4, [r5, #12]
 80088fc:	e7db      	b.n	80088b6 <_fputc_r+0x1a>
 80088fe:	bf00      	nop
 8008900:	0800f620 	.word	0x0800f620
 8008904:	0800f640 	.word	0x0800f640
 8008908:	0800f600 	.word	0x0800f600

0800890c <fputc>:
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <fputc+0xc>)
 800890e:	460a      	mov	r2, r1
 8008910:	4601      	mov	r1, r0
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	f7ff bfc2 	b.w	800889c <_fputc_r>
 8008918:	2000000c 	.word	0x2000000c

0800891c <_fwalk_reent>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	4606      	mov	r6, r0
 8008922:	4688      	mov	r8, r1
 8008924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008928:	2700      	movs	r7, #0
 800892a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800892e:	f1b9 0901 	subs.w	r9, r9, #1
 8008932:	d505      	bpl.n	8008940 <_fwalk_reent+0x24>
 8008934:	6824      	ldr	r4, [r4, #0]
 8008936:	2c00      	cmp	r4, #0
 8008938:	d1f7      	bne.n	800892a <_fwalk_reent+0xe>
 800893a:	4638      	mov	r0, r7
 800893c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008940:	89ab      	ldrh	r3, [r5, #12]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d907      	bls.n	8008956 <_fwalk_reent+0x3a>
 8008946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800894a:	3301      	adds	r3, #1
 800894c:	d003      	beq.n	8008956 <_fwalk_reent+0x3a>
 800894e:	4629      	mov	r1, r5
 8008950:	4630      	mov	r0, r6
 8008952:	47c0      	blx	r8
 8008954:	4307      	orrs	r7, r0
 8008956:	3568      	adds	r5, #104	; 0x68
 8008958:	e7e9      	b.n	800892e <_fwalk_reent+0x12>
	...

0800895c <_fwrite_r>:
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	9c08      	ldr	r4, [sp, #32]
 8008962:	468a      	mov	sl, r1
 8008964:	4690      	mov	r8, r2
 8008966:	fb02 f903 	mul.w	r9, r2, r3
 800896a:	4605      	mov	r5, r0
 800896c:	b118      	cbz	r0, 8008976 <_fwrite_r+0x1a>
 800896e:	6983      	ldr	r3, [r0, #24]
 8008970:	b90b      	cbnz	r3, 8008976 <_fwrite_r+0x1a>
 8008972:	f7ff ff03 	bl	800877c <__sinit>
 8008976:	4b26      	ldr	r3, [pc, #152]	; (8008a10 <_fwrite_r+0xb4>)
 8008978:	429c      	cmp	r4, r3
 800897a:	d123      	bne.n	80089c4 <_fwrite_r+0x68>
 800897c:	686c      	ldr	r4, [r5, #4]
 800897e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008980:	07de      	lsls	r6, r3, #31
 8008982:	d405      	bmi.n	8008990 <_fwrite_r+0x34>
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	0598      	lsls	r0, r3, #22
 8008988:	d402      	bmi.n	8008990 <_fwrite_r+0x34>
 800898a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800898c:	f000 f879 	bl	8008a82 <__retarget_lock_acquire_recursive>
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	0719      	lsls	r1, r3, #28
 8008994:	d520      	bpl.n	80089d8 <_fwrite_r+0x7c>
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	b1f3      	cbz	r3, 80089d8 <_fwrite_r+0x7c>
 800899a:	2600      	movs	r6, #0
 800899c:	454e      	cmp	r6, r9
 800899e:	d029      	beq.n	80089f4 <_fwrite_r+0x98>
 80089a0:	68a7      	ldr	r7, [r4, #8]
 80089a2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80089a6:	3f01      	subs	r7, #1
 80089a8:	2f00      	cmp	r7, #0
 80089aa:	60a7      	str	r7, [r4, #8]
 80089ac:	da04      	bge.n	80089b8 <_fwrite_r+0x5c>
 80089ae:	69a3      	ldr	r3, [r4, #24]
 80089b0:	429f      	cmp	r7, r3
 80089b2:	db19      	blt.n	80089e8 <_fwrite_r+0x8c>
 80089b4:	290a      	cmp	r1, #10
 80089b6:	d017      	beq.n	80089e8 <_fwrite_r+0x8c>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	1c5a      	adds	r2, r3, #1
 80089bc:	6022      	str	r2, [r4, #0]
 80089be:	7019      	strb	r1, [r3, #0]
 80089c0:	3601      	adds	r6, #1
 80089c2:	e7eb      	b.n	800899c <_fwrite_r+0x40>
 80089c4:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <_fwrite_r+0xb8>)
 80089c6:	429c      	cmp	r4, r3
 80089c8:	d101      	bne.n	80089ce <_fwrite_r+0x72>
 80089ca:	68ac      	ldr	r4, [r5, #8]
 80089cc:	e7d7      	b.n	800897e <_fwrite_r+0x22>
 80089ce:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <_fwrite_r+0xbc>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	bf08      	it	eq
 80089d4:	68ec      	ldreq	r4, [r5, #12]
 80089d6:	e7d2      	b.n	800897e <_fwrite_r+0x22>
 80089d8:	4621      	mov	r1, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	f002 f93c 	bl	800ac58 <__swsetup_r>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d0da      	beq.n	800899a <_fwrite_r+0x3e>
 80089e4:	2600      	movs	r6, #0
 80089e6:	e005      	b.n	80089f4 <_fwrite_r+0x98>
 80089e8:	4622      	mov	r2, r4
 80089ea:	4628      	mov	r0, r5
 80089ec:	f002 f8d0 	bl	800ab90 <__swbuf_r>
 80089f0:	3001      	adds	r0, #1
 80089f2:	d1e5      	bne.n	80089c0 <_fwrite_r+0x64>
 80089f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f6:	07da      	lsls	r2, r3, #31
 80089f8:	d405      	bmi.n	8008a06 <_fwrite_r+0xaa>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	059b      	lsls	r3, r3, #22
 80089fe:	d402      	bmi.n	8008a06 <_fwrite_r+0xaa>
 8008a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a02:	f000 f83f 	bl	8008a84 <__retarget_lock_release_recursive>
 8008a06:	fbb6 f0f8 	udiv	r0, r6, r8
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	bf00      	nop
 8008a10:	0800f620 	.word	0x0800f620
 8008a14:	0800f640 	.word	0x0800f640
 8008a18:	0800f600 	.word	0x0800f600

08008a1c <fwrite>:
 8008a1c:	b507      	push	{r0, r1, r2, lr}
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	4613      	mov	r3, r2
 8008a22:	460a      	mov	r2, r1
 8008a24:	4601      	mov	r1, r0
 8008a26:	4803      	ldr	r0, [pc, #12]	; (8008a34 <fwrite+0x18>)
 8008a28:	6800      	ldr	r0, [r0, #0]
 8008a2a:	f7ff ff97 	bl	800895c <_fwrite_r>
 8008a2e:	b003      	add	sp, #12
 8008a30:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a34:	2000000c 	.word	0x2000000c

08008a38 <__libc_init_array>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	4d0d      	ldr	r5, [pc, #52]	; (8008a70 <__libc_init_array+0x38>)
 8008a3c:	4c0d      	ldr	r4, [pc, #52]	; (8008a74 <__libc_init_array+0x3c>)
 8008a3e:	1b64      	subs	r4, r4, r5
 8008a40:	10a4      	asrs	r4, r4, #2
 8008a42:	2600      	movs	r6, #0
 8008a44:	42a6      	cmp	r6, r4
 8008a46:	d109      	bne.n	8008a5c <__libc_init_array+0x24>
 8008a48:	4d0b      	ldr	r5, [pc, #44]	; (8008a78 <__libc_init_array+0x40>)
 8008a4a:	4c0c      	ldr	r4, [pc, #48]	; (8008a7c <__libc_init_array+0x44>)
 8008a4c:	f004 fb08 	bl	800d060 <_init>
 8008a50:	1b64      	subs	r4, r4, r5
 8008a52:	10a4      	asrs	r4, r4, #2
 8008a54:	2600      	movs	r6, #0
 8008a56:	42a6      	cmp	r6, r4
 8008a58:	d105      	bne.n	8008a66 <__libc_init_array+0x2e>
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a60:	4798      	blx	r3
 8008a62:	3601      	adds	r6, #1
 8008a64:	e7ee      	b.n	8008a44 <__libc_init_array+0xc>
 8008a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6a:	4798      	blx	r3
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	e7f2      	b.n	8008a56 <__libc_init_array+0x1e>
 8008a70:	0800f96c 	.word	0x0800f96c
 8008a74:	0800f96c 	.word	0x0800f96c
 8008a78:	0800f96c 	.word	0x0800f96c
 8008a7c:	0800f970 	.word	0x0800f970

08008a80 <__retarget_lock_init_recursive>:
 8008a80:	4770      	bx	lr

08008a82 <__retarget_lock_acquire_recursive>:
 8008a82:	4770      	bx	lr

08008a84 <__retarget_lock_release_recursive>:
 8008a84:	4770      	bx	lr
	...

08008a88 <malloc>:
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <malloc+0xc>)
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	f000 b8bd 	b.w	8008c0c <_malloc_r>
 8008a92:	bf00      	nop
 8008a94:	2000000c 	.word	0x2000000c

08008a98 <free>:
 8008a98:	4b02      	ldr	r3, [pc, #8]	; (8008aa4 <free+0xc>)
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	f000 b849 	b.w	8008b34 <_free_r>
 8008aa2:	bf00      	nop
 8008aa4:	2000000c 	.word	0x2000000c

08008aa8 <memcpy>:
 8008aa8:	440a      	add	r2, r1
 8008aaa:	4291      	cmp	r1, r2
 8008aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ab0:	d100      	bne.n	8008ab4 <memcpy+0xc>
 8008ab2:	4770      	bx	lr
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008abe:	4291      	cmp	r1, r2
 8008ac0:	d1f9      	bne.n	8008ab6 <memcpy+0xe>
 8008ac2:	bd10      	pop	{r4, pc}

08008ac4 <memmove>:
 8008ac4:	4288      	cmp	r0, r1
 8008ac6:	b510      	push	{r4, lr}
 8008ac8:	eb01 0402 	add.w	r4, r1, r2
 8008acc:	d902      	bls.n	8008ad4 <memmove+0x10>
 8008ace:	4284      	cmp	r4, r0
 8008ad0:	4623      	mov	r3, r4
 8008ad2:	d807      	bhi.n	8008ae4 <memmove+0x20>
 8008ad4:	1e43      	subs	r3, r0, #1
 8008ad6:	42a1      	cmp	r1, r4
 8008ad8:	d008      	beq.n	8008aec <memmove+0x28>
 8008ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ae2:	e7f8      	b.n	8008ad6 <memmove+0x12>
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	428a      	cmp	r2, r1
 8008aea:	d100      	bne.n	8008aee <memmove+0x2a>
 8008aec:	bd10      	pop	{r4, pc}
 8008aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008af6:	e7f7      	b.n	8008ae8 <memmove+0x24>

08008af8 <memset>:
 8008af8:	4402      	add	r2, r0
 8008afa:	4603      	mov	r3, r0
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d100      	bne.n	8008b02 <memset+0xa>
 8008b00:	4770      	bx	lr
 8008b02:	f803 1b01 	strb.w	r1, [r3], #1
 8008b06:	e7f9      	b.n	8008afc <memset+0x4>

08008b08 <_calloc_r>:
 8008b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b0a:	fba1 2402 	umull	r2, r4, r1, r2
 8008b0e:	b94c      	cbnz	r4, 8008b24 <_calloc_r+0x1c>
 8008b10:	4611      	mov	r1, r2
 8008b12:	9201      	str	r2, [sp, #4]
 8008b14:	f000 f87a 	bl	8008c0c <_malloc_r>
 8008b18:	9a01      	ldr	r2, [sp, #4]
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	b930      	cbnz	r0, 8008b2c <_calloc_r+0x24>
 8008b1e:	4628      	mov	r0, r5
 8008b20:	b003      	add	sp, #12
 8008b22:	bd30      	pop	{r4, r5, pc}
 8008b24:	220c      	movs	r2, #12
 8008b26:	6002      	str	r2, [r0, #0]
 8008b28:	2500      	movs	r5, #0
 8008b2a:	e7f8      	b.n	8008b1e <_calloc_r+0x16>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f7ff ffe3 	bl	8008af8 <memset>
 8008b32:	e7f4      	b.n	8008b1e <_calloc_r+0x16>

08008b34 <_free_r>:
 8008b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d044      	beq.n	8008bc4 <_free_r+0x90>
 8008b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3e:	9001      	str	r0, [sp, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f1a1 0404 	sub.w	r4, r1, #4
 8008b46:	bfb8      	it	lt
 8008b48:	18e4      	addlt	r4, r4, r3
 8008b4a:	f003 fb85 	bl	800c258 <__malloc_lock>
 8008b4e:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <_free_r+0x94>)
 8008b50:	9801      	ldr	r0, [sp, #4]
 8008b52:	6813      	ldr	r3, [r2, #0]
 8008b54:	b933      	cbnz	r3, 8008b64 <_free_r+0x30>
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6014      	str	r4, [r2, #0]
 8008b5a:	b003      	add	sp, #12
 8008b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b60:	f003 bb80 	b.w	800c264 <__malloc_unlock>
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d908      	bls.n	8008b7a <_free_r+0x46>
 8008b68:	6825      	ldr	r5, [r4, #0]
 8008b6a:	1961      	adds	r1, r4, r5
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf01      	itttt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	1949      	addeq	r1, r1, r5
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	e7ed      	b.n	8008b56 <_free_r+0x22>
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b10b      	cbz	r3, 8008b84 <_free_r+0x50>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d9fa      	bls.n	8008b7a <_free_r+0x46>
 8008b84:	6811      	ldr	r1, [r2, #0]
 8008b86:	1855      	adds	r5, r2, r1
 8008b88:	42a5      	cmp	r5, r4
 8008b8a:	d10b      	bne.n	8008ba4 <_free_r+0x70>
 8008b8c:	6824      	ldr	r4, [r4, #0]
 8008b8e:	4421      	add	r1, r4
 8008b90:	1854      	adds	r4, r2, r1
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	6011      	str	r1, [r2, #0]
 8008b96:	d1e0      	bne.n	8008b5a <_free_r+0x26>
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	6053      	str	r3, [r2, #4]
 8008b9e:	4421      	add	r1, r4
 8008ba0:	6011      	str	r1, [r2, #0]
 8008ba2:	e7da      	b.n	8008b5a <_free_r+0x26>
 8008ba4:	d902      	bls.n	8008bac <_free_r+0x78>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	6003      	str	r3, [r0, #0]
 8008baa:	e7d6      	b.n	8008b5a <_free_r+0x26>
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	1961      	adds	r1, r4, r5
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf04      	itt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	bf04      	itt	eq
 8008bbc:	1949      	addeq	r1, r1, r5
 8008bbe:	6021      	streq	r1, [r4, #0]
 8008bc0:	6054      	str	r4, [r2, #4]
 8008bc2:	e7ca      	b.n	8008b5a <_free_r+0x26>
 8008bc4:	b003      	add	sp, #12
 8008bc6:	bd30      	pop	{r4, r5, pc}
 8008bc8:	20000ee0 	.word	0x20000ee0

08008bcc <sbrk_aligned>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4e0e      	ldr	r6, [pc, #56]	; (8008c08 <sbrk_aligned+0x3c>)
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	6831      	ldr	r1, [r6, #0]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b911      	cbnz	r1, 8008bde <sbrk_aligned+0x12>
 8008bd8:	f001 f8b2 	bl	8009d40 <_sbrk_r>
 8008bdc:	6030      	str	r0, [r6, #0]
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f001 f8ad 	bl	8009d40 <_sbrk_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d00a      	beq.n	8008c00 <sbrk_aligned+0x34>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d007      	beq.n	8008c04 <sbrk_aligned+0x38>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f001 f8a2 	bl	8009d40 <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d101      	bne.n	8008c04 <sbrk_aligned+0x38>
 8008c00:	f04f 34ff 	mov.w	r4, #4294967295
 8008c04:	4620      	mov	r0, r4
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	20000ee4 	.word	0x20000ee4

08008c0c <_malloc_r>:
 8008c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	1ccd      	adds	r5, r1, #3
 8008c12:	f025 0503 	bic.w	r5, r5, #3
 8008c16:	3508      	adds	r5, #8
 8008c18:	2d0c      	cmp	r5, #12
 8008c1a:	bf38      	it	cc
 8008c1c:	250c      	movcc	r5, #12
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	4607      	mov	r7, r0
 8008c22:	db01      	blt.n	8008c28 <_malloc_r+0x1c>
 8008c24:	42a9      	cmp	r1, r5
 8008c26:	d905      	bls.n	8008c34 <_malloc_r+0x28>
 8008c28:	230c      	movs	r3, #12
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	4630      	mov	r0, r6
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	4e2e      	ldr	r6, [pc, #184]	; (8008cf0 <_malloc_r+0xe4>)
 8008c36:	f003 fb0f 	bl	800c258 <__malloc_lock>
 8008c3a:	6833      	ldr	r3, [r6, #0]
 8008c3c:	461c      	mov	r4, r3
 8008c3e:	bb34      	cbnz	r4, 8008c8e <_malloc_r+0x82>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4638      	mov	r0, r7
 8008c44:	f7ff ffc2 	bl	8008bcc <sbrk_aligned>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	d14d      	bne.n	8008cea <_malloc_r+0xde>
 8008c4e:	6834      	ldr	r4, [r6, #0]
 8008c50:	4626      	mov	r6, r4
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	d140      	bne.n	8008cd8 <_malloc_r+0xcc>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	eb04 0803 	add.w	r8, r4, r3
 8008c60:	f001 f86e 	bl	8009d40 <_sbrk_r>
 8008c64:	4580      	cmp	r8, r0
 8008c66:	d13a      	bne.n	8008cde <_malloc_r+0xd2>
 8008c68:	6821      	ldr	r1, [r4, #0]
 8008c6a:	3503      	adds	r5, #3
 8008c6c:	1a6d      	subs	r5, r5, r1
 8008c6e:	f025 0503 	bic.w	r5, r5, #3
 8008c72:	3508      	adds	r5, #8
 8008c74:	2d0c      	cmp	r5, #12
 8008c76:	bf38      	it	cc
 8008c78:	250c      	movcc	r5, #12
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff ffa5 	bl	8008bcc <sbrk_aligned>
 8008c82:	3001      	adds	r0, #1
 8008c84:	d02b      	beq.n	8008cde <_malloc_r+0xd2>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	442b      	add	r3, r5
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	e00e      	b.n	8008cac <_malloc_r+0xa0>
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	1b52      	subs	r2, r2, r5
 8008c92:	d41e      	bmi.n	8008cd2 <_malloc_r+0xc6>
 8008c94:	2a0b      	cmp	r2, #11
 8008c96:	d916      	bls.n	8008cc6 <_malloc_r+0xba>
 8008c98:	1961      	adds	r1, r4, r5
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	6025      	str	r5, [r4, #0]
 8008c9e:	bf18      	it	ne
 8008ca0:	6059      	strne	r1, [r3, #4]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	bf08      	it	eq
 8008ca6:	6031      	streq	r1, [r6, #0]
 8008ca8:	5162      	str	r2, [r4, r5]
 8008caa:	604b      	str	r3, [r1, #4]
 8008cac:	4638      	mov	r0, r7
 8008cae:	f104 060b 	add.w	r6, r4, #11
 8008cb2:	f003 fad7 	bl	800c264 <__malloc_unlock>
 8008cb6:	f026 0607 	bic.w	r6, r6, #7
 8008cba:	1d23      	adds	r3, r4, #4
 8008cbc:	1af2      	subs	r2, r6, r3
 8008cbe:	d0b6      	beq.n	8008c2e <_malloc_r+0x22>
 8008cc0:	1b9b      	subs	r3, r3, r6
 8008cc2:	50a3      	str	r3, [r4, r2]
 8008cc4:	e7b3      	b.n	8008c2e <_malloc_r+0x22>
 8008cc6:	6862      	ldr	r2, [r4, #4]
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	bf0c      	ite	eq
 8008ccc:	6032      	streq	r2, [r6, #0]
 8008cce:	605a      	strne	r2, [r3, #4]
 8008cd0:	e7ec      	b.n	8008cac <_malloc_r+0xa0>
 8008cd2:	4623      	mov	r3, r4
 8008cd4:	6864      	ldr	r4, [r4, #4]
 8008cd6:	e7b2      	b.n	8008c3e <_malloc_r+0x32>
 8008cd8:	4634      	mov	r4, r6
 8008cda:	6876      	ldr	r6, [r6, #4]
 8008cdc:	e7b9      	b.n	8008c52 <_malloc_r+0x46>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f003 fabe 	bl	800c264 <__malloc_unlock>
 8008ce8:	e7a1      	b.n	8008c2e <_malloc_r+0x22>
 8008cea:	6025      	str	r5, [r4, #0]
 8008cec:	e7de      	b.n	8008cac <_malloc_r+0xa0>
 8008cee:	bf00      	nop
 8008cf0:	20000ee0 	.word	0x20000ee0

08008cf4 <__sfputc_r>:
 8008cf4:	6893      	ldr	r3, [r2, #8]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	b410      	push	{r4}
 8008cfc:	6093      	str	r3, [r2, #8]
 8008cfe:	da08      	bge.n	8008d12 <__sfputc_r+0x1e>
 8008d00:	6994      	ldr	r4, [r2, #24]
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	db01      	blt.n	8008d0a <__sfputc_r+0x16>
 8008d06:	290a      	cmp	r1, #10
 8008d08:	d103      	bne.n	8008d12 <__sfputc_r+0x1e>
 8008d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d0e:	f001 bf3f 	b.w	800ab90 <__swbuf_r>
 8008d12:	6813      	ldr	r3, [r2, #0]
 8008d14:	1c58      	adds	r0, r3, #1
 8008d16:	6010      	str	r0, [r2, #0]
 8008d18:	7019      	strb	r1, [r3, #0]
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <__sfputs_r>:
 8008d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d24:	4606      	mov	r6, r0
 8008d26:	460f      	mov	r7, r1
 8008d28:	4614      	mov	r4, r2
 8008d2a:	18d5      	adds	r5, r2, r3
 8008d2c:	42ac      	cmp	r4, r5
 8008d2e:	d101      	bne.n	8008d34 <__sfputs_r+0x12>
 8008d30:	2000      	movs	r0, #0
 8008d32:	e007      	b.n	8008d44 <__sfputs_r+0x22>
 8008d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d38:	463a      	mov	r2, r7
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7ff ffda 	bl	8008cf4 <__sfputc_r>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d1f3      	bne.n	8008d2c <__sfputs_r+0xa>
 8008d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d48 <_vfiprintf_r>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	b09d      	sub	sp, #116	; 0x74
 8008d50:	4614      	mov	r4, r2
 8008d52:	4698      	mov	r8, r3
 8008d54:	4606      	mov	r6, r0
 8008d56:	b118      	cbz	r0, 8008d60 <_vfiprintf_r+0x18>
 8008d58:	6983      	ldr	r3, [r0, #24]
 8008d5a:	b90b      	cbnz	r3, 8008d60 <_vfiprintf_r+0x18>
 8008d5c:	f7ff fd0e 	bl	800877c <__sinit>
 8008d60:	4b89      	ldr	r3, [pc, #548]	; (8008f88 <_vfiprintf_r+0x240>)
 8008d62:	429d      	cmp	r5, r3
 8008d64:	d11b      	bne.n	8008d9e <_vfiprintf_r+0x56>
 8008d66:	6875      	ldr	r5, [r6, #4]
 8008d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d6a:	07d9      	lsls	r1, r3, #31
 8008d6c:	d405      	bmi.n	8008d7a <_vfiprintf_r+0x32>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	059a      	lsls	r2, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_vfiprintf_r+0x32>
 8008d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d76:	f7ff fe84 	bl	8008a82 <__retarget_lock_acquire_recursive>
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	071b      	lsls	r3, r3, #28
 8008d7e:	d501      	bpl.n	8008d84 <_vfiprintf_r+0x3c>
 8008d80:	692b      	ldr	r3, [r5, #16]
 8008d82:	b9eb      	cbnz	r3, 8008dc0 <_vfiprintf_r+0x78>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4630      	mov	r0, r6
 8008d88:	f001 ff66 	bl	800ac58 <__swsetup_r>
 8008d8c:	b1c0      	cbz	r0, 8008dc0 <_vfiprintf_r+0x78>
 8008d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d90:	07dc      	lsls	r4, r3, #31
 8008d92:	d50e      	bpl.n	8008db2 <_vfiprintf_r+0x6a>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	b01d      	add	sp, #116	; 0x74
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	4b7b      	ldr	r3, [pc, #492]	; (8008f8c <_vfiprintf_r+0x244>)
 8008da0:	429d      	cmp	r5, r3
 8008da2:	d101      	bne.n	8008da8 <_vfiprintf_r+0x60>
 8008da4:	68b5      	ldr	r5, [r6, #8]
 8008da6:	e7df      	b.n	8008d68 <_vfiprintf_r+0x20>
 8008da8:	4b79      	ldr	r3, [pc, #484]	; (8008f90 <_vfiprintf_r+0x248>)
 8008daa:	429d      	cmp	r5, r3
 8008dac:	bf08      	it	eq
 8008dae:	68f5      	ldreq	r5, [r6, #12]
 8008db0:	e7da      	b.n	8008d68 <_vfiprintf_r+0x20>
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	0598      	lsls	r0, r3, #22
 8008db6:	d4ed      	bmi.n	8008d94 <_vfiprintf_r+0x4c>
 8008db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dba:	f7ff fe63 	bl	8008a84 <__retarget_lock_release_recursive>
 8008dbe:	e7e9      	b.n	8008d94 <_vfiprintf_r+0x4c>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc4:	2320      	movs	r3, #32
 8008dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dce:	2330      	movs	r3, #48	; 0x30
 8008dd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f94 <_vfiprintf_r+0x24c>
 8008dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dd8:	f04f 0901 	mov.w	r9, #1
 8008ddc:	4623      	mov	r3, r4
 8008dde:	469a      	mov	sl, r3
 8008de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de4:	b10a      	cbz	r2, 8008dea <_vfiprintf_r+0xa2>
 8008de6:	2a25      	cmp	r2, #37	; 0x25
 8008de8:	d1f9      	bne.n	8008dde <_vfiprintf_r+0x96>
 8008dea:	ebba 0b04 	subs.w	fp, sl, r4
 8008dee:	d00b      	beq.n	8008e08 <_vfiprintf_r+0xc0>
 8008df0:	465b      	mov	r3, fp
 8008df2:	4622      	mov	r2, r4
 8008df4:	4629      	mov	r1, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7ff ff93 	bl	8008d22 <__sfputs_r>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f000 80aa 	beq.w	8008f56 <_vfiprintf_r+0x20e>
 8008e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e04:	445a      	add	r2, fp
 8008e06:	9209      	str	r2, [sp, #36]	; 0x24
 8008e08:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 80a2 	beq.w	8008f56 <_vfiprintf_r+0x20e>
 8008e12:	2300      	movs	r3, #0
 8008e14:	f04f 32ff 	mov.w	r2, #4294967295
 8008e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e1c:	f10a 0a01 	add.w	sl, sl, #1
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	9307      	str	r3, [sp, #28]
 8008e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e28:	931a      	str	r3, [sp, #104]	; 0x68
 8008e2a:	4654      	mov	r4, sl
 8008e2c:	2205      	movs	r2, #5
 8008e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e32:	4858      	ldr	r0, [pc, #352]	; (8008f94 <_vfiprintf_r+0x24c>)
 8008e34:	f7f7 f9d4 	bl	80001e0 <memchr>
 8008e38:	9a04      	ldr	r2, [sp, #16]
 8008e3a:	b9d8      	cbnz	r0, 8008e74 <_vfiprintf_r+0x12c>
 8008e3c:	06d1      	lsls	r1, r2, #27
 8008e3e:	bf44      	itt	mi
 8008e40:	2320      	movmi	r3, #32
 8008e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e46:	0713      	lsls	r3, r2, #28
 8008e48:	bf44      	itt	mi
 8008e4a:	232b      	movmi	r3, #43	; 0x2b
 8008e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e50:	f89a 3000 	ldrb.w	r3, [sl]
 8008e54:	2b2a      	cmp	r3, #42	; 0x2a
 8008e56:	d015      	beq.n	8008e84 <_vfiprintf_r+0x13c>
 8008e58:	9a07      	ldr	r2, [sp, #28]
 8008e5a:	4654      	mov	r4, sl
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f04f 0c0a 	mov.w	ip, #10
 8008e62:	4621      	mov	r1, r4
 8008e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e68:	3b30      	subs	r3, #48	; 0x30
 8008e6a:	2b09      	cmp	r3, #9
 8008e6c:	d94e      	bls.n	8008f0c <_vfiprintf_r+0x1c4>
 8008e6e:	b1b0      	cbz	r0, 8008e9e <_vfiprintf_r+0x156>
 8008e70:	9207      	str	r2, [sp, #28]
 8008e72:	e014      	b.n	8008e9e <_vfiprintf_r+0x156>
 8008e74:	eba0 0308 	sub.w	r3, r0, r8
 8008e78:	fa09 f303 	lsl.w	r3, r9, r3
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	9304      	str	r3, [sp, #16]
 8008e80:	46a2      	mov	sl, r4
 8008e82:	e7d2      	b.n	8008e2a <_vfiprintf_r+0xe2>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	1d19      	adds	r1, r3, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	9103      	str	r1, [sp, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bfbb      	ittet	lt
 8008e90:	425b      	neglt	r3, r3
 8008e92:	f042 0202 	orrlt.w	r2, r2, #2
 8008e96:	9307      	strge	r3, [sp, #28]
 8008e98:	9307      	strlt	r3, [sp, #28]
 8008e9a:	bfb8      	it	lt
 8008e9c:	9204      	strlt	r2, [sp, #16]
 8008e9e:	7823      	ldrb	r3, [r4, #0]
 8008ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ea2:	d10c      	bne.n	8008ebe <_vfiprintf_r+0x176>
 8008ea4:	7863      	ldrb	r3, [r4, #1]
 8008ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea8:	d135      	bne.n	8008f16 <_vfiprintf_r+0x1ce>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	9203      	str	r2, [sp, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfb8      	it	lt
 8008eb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eba:	3402      	adds	r4, #2
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fa4 <_vfiprintf_r+0x25c>
 8008ec2:	7821      	ldrb	r1, [r4, #0]
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	4650      	mov	r0, sl
 8008ec8:	f7f7 f98a 	bl	80001e0 <memchr>
 8008ecc:	b140      	cbz	r0, 8008ee0 <_vfiprintf_r+0x198>
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	eba0 000a 	sub.w	r0, r0, sl
 8008ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ed8:	9b04      	ldr	r3, [sp, #16]
 8008eda:	4303      	orrs	r3, r0
 8008edc:	3401      	adds	r4, #1
 8008ede:	9304      	str	r3, [sp, #16]
 8008ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee4:	482c      	ldr	r0, [pc, #176]	; (8008f98 <_vfiprintf_r+0x250>)
 8008ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eea:	2206      	movs	r2, #6
 8008eec:	f7f7 f978 	bl	80001e0 <memchr>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d03f      	beq.n	8008f74 <_vfiprintf_r+0x22c>
 8008ef4:	4b29      	ldr	r3, [pc, #164]	; (8008f9c <_vfiprintf_r+0x254>)
 8008ef6:	bb1b      	cbnz	r3, 8008f40 <_vfiprintf_r+0x1f8>
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	3307      	adds	r3, #7
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	3308      	adds	r3, #8
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f06:	443b      	add	r3, r7
 8008f08:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0a:	e767      	b.n	8008ddc <_vfiprintf_r+0x94>
 8008f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f10:	460c      	mov	r4, r1
 8008f12:	2001      	movs	r0, #1
 8008f14:	e7a5      	b.n	8008e62 <_vfiprintf_r+0x11a>
 8008f16:	2300      	movs	r3, #0
 8008f18:	3401      	adds	r4, #1
 8008f1a:	9305      	str	r3, [sp, #20]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	f04f 0c0a 	mov.w	ip, #10
 8008f22:	4620      	mov	r0, r4
 8008f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f28:	3a30      	subs	r2, #48	; 0x30
 8008f2a:	2a09      	cmp	r2, #9
 8008f2c:	d903      	bls.n	8008f36 <_vfiprintf_r+0x1ee>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0c5      	beq.n	8008ebe <_vfiprintf_r+0x176>
 8008f32:	9105      	str	r1, [sp, #20]
 8008f34:	e7c3      	b.n	8008ebe <_vfiprintf_r+0x176>
 8008f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e7f0      	b.n	8008f22 <_vfiprintf_r+0x1da>
 8008f40:	ab03      	add	r3, sp, #12
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	462a      	mov	r2, r5
 8008f46:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <_vfiprintf_r+0x258>)
 8008f48:	a904      	add	r1, sp, #16
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f000 f8d6 	bl	80090fc <_printf_float>
 8008f50:	4607      	mov	r7, r0
 8008f52:	1c78      	adds	r0, r7, #1
 8008f54:	d1d6      	bne.n	8008f04 <_vfiprintf_r+0x1bc>
 8008f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f58:	07d9      	lsls	r1, r3, #31
 8008f5a:	d405      	bmi.n	8008f68 <_vfiprintf_r+0x220>
 8008f5c:	89ab      	ldrh	r3, [r5, #12]
 8008f5e:	059a      	lsls	r2, r3, #22
 8008f60:	d402      	bmi.n	8008f68 <_vfiprintf_r+0x220>
 8008f62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f64:	f7ff fd8e 	bl	8008a84 <__retarget_lock_release_recursive>
 8008f68:	89ab      	ldrh	r3, [r5, #12]
 8008f6a:	065b      	lsls	r3, r3, #25
 8008f6c:	f53f af12 	bmi.w	8008d94 <_vfiprintf_r+0x4c>
 8008f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f72:	e711      	b.n	8008d98 <_vfiprintf_r+0x50>
 8008f74:	ab03      	add	r3, sp, #12
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <_vfiprintf_r+0x258>)
 8008f7c:	a904      	add	r1, sp, #16
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 fb60 	bl	8009644 <_printf_i>
 8008f84:	e7e4      	b.n	8008f50 <_vfiprintf_r+0x208>
 8008f86:	bf00      	nop
 8008f88:	0800f620 	.word	0x0800f620
 8008f8c:	0800f640 	.word	0x0800f640
 8008f90:	0800f600 	.word	0x0800f600
 8008f94:	0800f664 	.word	0x0800f664
 8008f98:	0800f66e 	.word	0x0800f66e
 8008f9c:	080090fd 	.word	0x080090fd
 8008fa0:	08008d23 	.word	0x08008d23
 8008fa4:	0800f66a 	.word	0x0800f66a

08008fa8 <vfiprintf>:
 8008fa8:	4613      	mov	r3, r2
 8008faa:	460a      	mov	r2, r1
 8008fac:	4601      	mov	r1, r0
 8008fae:	4802      	ldr	r0, [pc, #8]	; (8008fb8 <vfiprintf+0x10>)
 8008fb0:	6800      	ldr	r0, [r0, #0]
 8008fb2:	f7ff bec9 	b.w	8008d48 <_vfiprintf_r>
 8008fb6:	bf00      	nop
 8008fb8:	2000000c 	.word	0x2000000c

08008fbc <__cvt>:
 8008fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	ec55 4b10 	vmov	r4, r5, d0
 8008fc4:	2d00      	cmp	r5, #0
 8008fc6:	460e      	mov	r6, r1
 8008fc8:	4619      	mov	r1, r3
 8008fca:	462b      	mov	r3, r5
 8008fcc:	bfbb      	ittet	lt
 8008fce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fd2:	461d      	movlt	r5, r3
 8008fd4:	2300      	movge	r3, #0
 8008fd6:	232d      	movlt	r3, #45	; 0x2d
 8008fd8:	700b      	strb	r3, [r1, #0]
 8008fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fe0:	4691      	mov	r9, r2
 8008fe2:	f023 0820 	bic.w	r8, r3, #32
 8008fe6:	bfbc      	itt	lt
 8008fe8:	4622      	movlt	r2, r4
 8008fea:	4614      	movlt	r4, r2
 8008fec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ff0:	d005      	beq.n	8008ffe <__cvt+0x42>
 8008ff2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ff6:	d100      	bne.n	8008ffa <__cvt+0x3e>
 8008ff8:	3601      	adds	r6, #1
 8008ffa:	2102      	movs	r1, #2
 8008ffc:	e000      	b.n	8009000 <__cvt+0x44>
 8008ffe:	2103      	movs	r1, #3
 8009000:	ab03      	add	r3, sp, #12
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	ab02      	add	r3, sp, #8
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	ec45 4b10 	vmov	d0, r4, r5
 800900c:	4653      	mov	r3, sl
 800900e:	4632      	mov	r2, r6
 8009010:	f001 ff36 	bl	800ae80 <_dtoa_r>
 8009014:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009018:	4607      	mov	r7, r0
 800901a:	d102      	bne.n	8009022 <__cvt+0x66>
 800901c:	f019 0f01 	tst.w	r9, #1
 8009020:	d022      	beq.n	8009068 <__cvt+0xac>
 8009022:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009026:	eb07 0906 	add.w	r9, r7, r6
 800902a:	d110      	bne.n	800904e <__cvt+0x92>
 800902c:	783b      	ldrb	r3, [r7, #0]
 800902e:	2b30      	cmp	r3, #48	; 0x30
 8009030:	d10a      	bne.n	8009048 <__cvt+0x8c>
 8009032:	2200      	movs	r2, #0
 8009034:	2300      	movs	r3, #0
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	f7f7 fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800903e:	b918      	cbnz	r0, 8009048 <__cvt+0x8c>
 8009040:	f1c6 0601 	rsb	r6, r6, #1
 8009044:	f8ca 6000 	str.w	r6, [sl]
 8009048:	f8da 3000 	ldr.w	r3, [sl]
 800904c:	4499      	add	r9, r3
 800904e:	2200      	movs	r2, #0
 8009050:	2300      	movs	r3, #0
 8009052:	4620      	mov	r0, r4
 8009054:	4629      	mov	r1, r5
 8009056:	f7f7 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800905a:	b108      	cbz	r0, 8009060 <__cvt+0xa4>
 800905c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009060:	2230      	movs	r2, #48	; 0x30
 8009062:	9b03      	ldr	r3, [sp, #12]
 8009064:	454b      	cmp	r3, r9
 8009066:	d307      	bcc.n	8009078 <__cvt+0xbc>
 8009068:	9b03      	ldr	r3, [sp, #12]
 800906a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800906c:	1bdb      	subs	r3, r3, r7
 800906e:	4638      	mov	r0, r7
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	b004      	add	sp, #16
 8009074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009078:	1c59      	adds	r1, r3, #1
 800907a:	9103      	str	r1, [sp, #12]
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	e7f0      	b.n	8009062 <__cvt+0xa6>

08009080 <__exponent>:
 8009080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009082:	4603      	mov	r3, r0
 8009084:	2900      	cmp	r1, #0
 8009086:	bfb8      	it	lt
 8009088:	4249      	neglt	r1, r1
 800908a:	f803 2b02 	strb.w	r2, [r3], #2
 800908e:	bfb4      	ite	lt
 8009090:	222d      	movlt	r2, #45	; 0x2d
 8009092:	222b      	movge	r2, #43	; 0x2b
 8009094:	2909      	cmp	r1, #9
 8009096:	7042      	strb	r2, [r0, #1]
 8009098:	dd2a      	ble.n	80090f0 <__exponent+0x70>
 800909a:	f10d 0407 	add.w	r4, sp, #7
 800909e:	46a4      	mov	ip, r4
 80090a0:	270a      	movs	r7, #10
 80090a2:	46a6      	mov	lr, r4
 80090a4:	460a      	mov	r2, r1
 80090a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80090aa:	fb07 1516 	mls	r5, r7, r6, r1
 80090ae:	3530      	adds	r5, #48	; 0x30
 80090b0:	2a63      	cmp	r2, #99	; 0x63
 80090b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80090b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090ba:	4631      	mov	r1, r6
 80090bc:	dcf1      	bgt.n	80090a2 <__exponent+0x22>
 80090be:	3130      	adds	r1, #48	; 0x30
 80090c0:	f1ae 0502 	sub.w	r5, lr, #2
 80090c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090c8:	1c44      	adds	r4, r0, #1
 80090ca:	4629      	mov	r1, r5
 80090cc:	4561      	cmp	r1, ip
 80090ce:	d30a      	bcc.n	80090e6 <__exponent+0x66>
 80090d0:	f10d 0209 	add.w	r2, sp, #9
 80090d4:	eba2 020e 	sub.w	r2, r2, lr
 80090d8:	4565      	cmp	r5, ip
 80090da:	bf88      	it	hi
 80090dc:	2200      	movhi	r2, #0
 80090de:	4413      	add	r3, r2
 80090e0:	1a18      	subs	r0, r3, r0
 80090e2:	b003      	add	sp, #12
 80090e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090ee:	e7ed      	b.n	80090cc <__exponent+0x4c>
 80090f0:	2330      	movs	r3, #48	; 0x30
 80090f2:	3130      	adds	r1, #48	; 0x30
 80090f4:	7083      	strb	r3, [r0, #2]
 80090f6:	70c1      	strb	r1, [r0, #3]
 80090f8:	1d03      	adds	r3, r0, #4
 80090fa:	e7f1      	b.n	80090e0 <__exponent+0x60>

080090fc <_printf_float>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	ed2d 8b02 	vpush	{d8}
 8009104:	b08d      	sub	sp, #52	; 0x34
 8009106:	460c      	mov	r4, r1
 8009108:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800910c:	4616      	mov	r6, r2
 800910e:	461f      	mov	r7, r3
 8009110:	4605      	mov	r5, r0
 8009112:	f003 f813 	bl	800c13c <_localeconv_r>
 8009116:	f8d0 a000 	ldr.w	sl, [r0]
 800911a:	4650      	mov	r0, sl
 800911c:	f7f7 f858 	bl	80001d0 <strlen>
 8009120:	2300      	movs	r3, #0
 8009122:	930a      	str	r3, [sp, #40]	; 0x28
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	9305      	str	r3, [sp, #20]
 8009128:	f8d8 3000 	ldr.w	r3, [r8]
 800912c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009130:	3307      	adds	r3, #7
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	f103 0208 	add.w	r2, r3, #8
 800913a:	f8c8 2000 	str.w	r2, [r8]
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009146:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800914a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800914e:	9307      	str	r3, [sp, #28]
 8009150:	f8cd 8018 	str.w	r8, [sp, #24]
 8009154:	ee08 0a10 	vmov	s16, r0
 8009158:	4b9f      	ldr	r3, [pc, #636]	; (80093d8 <_printf_float+0x2dc>)
 800915a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800915e:	f04f 32ff 	mov.w	r2, #4294967295
 8009162:	f7f7 fce3 	bl	8000b2c <__aeabi_dcmpun>
 8009166:	bb88      	cbnz	r0, 80091cc <_printf_float+0xd0>
 8009168:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800916c:	4b9a      	ldr	r3, [pc, #616]	; (80093d8 <_printf_float+0x2dc>)
 800916e:	f04f 32ff 	mov.w	r2, #4294967295
 8009172:	f7f7 fcbd 	bl	8000af0 <__aeabi_dcmple>
 8009176:	bb48      	cbnz	r0, 80091cc <_printf_float+0xd0>
 8009178:	2200      	movs	r2, #0
 800917a:	2300      	movs	r3, #0
 800917c:	4640      	mov	r0, r8
 800917e:	4649      	mov	r1, r9
 8009180:	f7f7 fcac 	bl	8000adc <__aeabi_dcmplt>
 8009184:	b110      	cbz	r0, 800918c <_printf_float+0x90>
 8009186:	232d      	movs	r3, #45	; 0x2d
 8009188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800918c:	4b93      	ldr	r3, [pc, #588]	; (80093dc <_printf_float+0x2e0>)
 800918e:	4894      	ldr	r0, [pc, #592]	; (80093e0 <_printf_float+0x2e4>)
 8009190:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009194:	bf94      	ite	ls
 8009196:	4698      	movls	r8, r3
 8009198:	4680      	movhi	r8, r0
 800919a:	2303      	movs	r3, #3
 800919c:	6123      	str	r3, [r4, #16]
 800919e:	9b05      	ldr	r3, [sp, #20]
 80091a0:	f023 0204 	bic.w	r2, r3, #4
 80091a4:	6022      	str	r2, [r4, #0]
 80091a6:	f04f 0900 	mov.w	r9, #0
 80091aa:	9700      	str	r7, [sp, #0]
 80091ac:	4633      	mov	r3, r6
 80091ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80091b0:	4621      	mov	r1, r4
 80091b2:	4628      	mov	r0, r5
 80091b4:	f000 f9d8 	bl	8009568 <_printf_common>
 80091b8:	3001      	adds	r0, #1
 80091ba:	f040 8090 	bne.w	80092de <_printf_float+0x1e2>
 80091be:	f04f 30ff 	mov.w	r0, #4294967295
 80091c2:	b00d      	add	sp, #52	; 0x34
 80091c4:	ecbd 8b02 	vpop	{d8}
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	f7f7 fcaa 	bl	8000b2c <__aeabi_dcmpun>
 80091d8:	b140      	cbz	r0, 80091ec <_printf_float+0xf0>
 80091da:	464b      	mov	r3, r9
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bfbc      	itt	lt
 80091e0:	232d      	movlt	r3, #45	; 0x2d
 80091e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091e6:	487f      	ldr	r0, [pc, #508]	; (80093e4 <_printf_float+0x2e8>)
 80091e8:	4b7f      	ldr	r3, [pc, #508]	; (80093e8 <_printf_float+0x2ec>)
 80091ea:	e7d1      	b.n	8009190 <_printf_float+0x94>
 80091ec:	6863      	ldr	r3, [r4, #4]
 80091ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091f2:	9206      	str	r2, [sp, #24]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	d13f      	bne.n	8009278 <_printf_float+0x17c>
 80091f8:	2306      	movs	r3, #6
 80091fa:	6063      	str	r3, [r4, #4]
 80091fc:	9b05      	ldr	r3, [sp, #20]
 80091fe:	6861      	ldr	r1, [r4, #4]
 8009200:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009204:	2300      	movs	r3, #0
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	ab0a      	add	r3, sp, #40	; 0x28
 800920a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800920e:	ab09      	add	r3, sp, #36	; 0x24
 8009210:	ec49 8b10 	vmov	d0, r8, r9
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	6022      	str	r2, [r4, #0]
 8009218:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800921c:	4628      	mov	r0, r5
 800921e:	f7ff fecd 	bl	8008fbc <__cvt>
 8009222:	9b06      	ldr	r3, [sp, #24]
 8009224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009226:	2b47      	cmp	r3, #71	; 0x47
 8009228:	4680      	mov	r8, r0
 800922a:	d108      	bne.n	800923e <_printf_float+0x142>
 800922c:	1cc8      	adds	r0, r1, #3
 800922e:	db02      	blt.n	8009236 <_printf_float+0x13a>
 8009230:	6863      	ldr	r3, [r4, #4]
 8009232:	4299      	cmp	r1, r3
 8009234:	dd41      	ble.n	80092ba <_printf_float+0x1be>
 8009236:	f1ab 0b02 	sub.w	fp, fp, #2
 800923a:	fa5f fb8b 	uxtb.w	fp, fp
 800923e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009242:	d820      	bhi.n	8009286 <_printf_float+0x18a>
 8009244:	3901      	subs	r1, #1
 8009246:	465a      	mov	r2, fp
 8009248:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800924c:	9109      	str	r1, [sp, #36]	; 0x24
 800924e:	f7ff ff17 	bl	8009080 <__exponent>
 8009252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009254:	1813      	adds	r3, r2, r0
 8009256:	2a01      	cmp	r2, #1
 8009258:	4681      	mov	r9, r0
 800925a:	6123      	str	r3, [r4, #16]
 800925c:	dc02      	bgt.n	8009264 <_printf_float+0x168>
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	07d2      	lsls	r2, r2, #31
 8009262:	d501      	bpl.n	8009268 <_printf_float+0x16c>
 8009264:	3301      	adds	r3, #1
 8009266:	6123      	str	r3, [r4, #16]
 8009268:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800926c:	2b00      	cmp	r3, #0
 800926e:	d09c      	beq.n	80091aa <_printf_float+0xae>
 8009270:	232d      	movs	r3, #45	; 0x2d
 8009272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009276:	e798      	b.n	80091aa <_printf_float+0xae>
 8009278:	9a06      	ldr	r2, [sp, #24]
 800927a:	2a47      	cmp	r2, #71	; 0x47
 800927c:	d1be      	bne.n	80091fc <_printf_float+0x100>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1bc      	bne.n	80091fc <_printf_float+0x100>
 8009282:	2301      	movs	r3, #1
 8009284:	e7b9      	b.n	80091fa <_printf_float+0xfe>
 8009286:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800928a:	d118      	bne.n	80092be <_printf_float+0x1c2>
 800928c:	2900      	cmp	r1, #0
 800928e:	6863      	ldr	r3, [r4, #4]
 8009290:	dd0b      	ble.n	80092aa <_printf_float+0x1ae>
 8009292:	6121      	str	r1, [r4, #16]
 8009294:	b913      	cbnz	r3, 800929c <_printf_float+0x1a0>
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	07d0      	lsls	r0, r2, #31
 800929a:	d502      	bpl.n	80092a2 <_printf_float+0x1a6>
 800929c:	3301      	adds	r3, #1
 800929e:	440b      	add	r3, r1
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80092a4:	f04f 0900 	mov.w	r9, #0
 80092a8:	e7de      	b.n	8009268 <_printf_float+0x16c>
 80092aa:	b913      	cbnz	r3, 80092b2 <_printf_float+0x1b6>
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	07d2      	lsls	r2, r2, #31
 80092b0:	d501      	bpl.n	80092b6 <_printf_float+0x1ba>
 80092b2:	3302      	adds	r3, #2
 80092b4:	e7f4      	b.n	80092a0 <_printf_float+0x1a4>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e7f2      	b.n	80092a0 <_printf_float+0x1a4>
 80092ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c0:	4299      	cmp	r1, r3
 80092c2:	db05      	blt.n	80092d0 <_printf_float+0x1d4>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	6121      	str	r1, [r4, #16]
 80092c8:	07d8      	lsls	r0, r3, #31
 80092ca:	d5ea      	bpl.n	80092a2 <_printf_float+0x1a6>
 80092cc:	1c4b      	adds	r3, r1, #1
 80092ce:	e7e7      	b.n	80092a0 <_printf_float+0x1a4>
 80092d0:	2900      	cmp	r1, #0
 80092d2:	bfd4      	ite	le
 80092d4:	f1c1 0202 	rsble	r2, r1, #2
 80092d8:	2201      	movgt	r2, #1
 80092da:	4413      	add	r3, r2
 80092dc:	e7e0      	b.n	80092a0 <_printf_float+0x1a4>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	055a      	lsls	r2, r3, #21
 80092e2:	d407      	bmi.n	80092f4 <_printf_float+0x1f8>
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	4642      	mov	r2, r8
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	d12c      	bne.n	800934c <_printf_float+0x250>
 80092f2:	e764      	b.n	80091be <_printf_float+0xc2>
 80092f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092f8:	f240 80e0 	bls.w	80094bc <_printf_float+0x3c0>
 80092fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009300:	2200      	movs	r2, #0
 8009302:	2300      	movs	r3, #0
 8009304:	f7f7 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009308:	2800      	cmp	r0, #0
 800930a:	d034      	beq.n	8009376 <_printf_float+0x27a>
 800930c:	4a37      	ldr	r2, [pc, #220]	; (80093ec <_printf_float+0x2f0>)
 800930e:	2301      	movs	r3, #1
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af51 	beq.w	80091be <_printf_float+0xc2>
 800931c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009320:	429a      	cmp	r2, r3
 8009322:	db02      	blt.n	800932a <_printf_float+0x22e>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	07d8      	lsls	r0, r3, #31
 8009328:	d510      	bpl.n	800934c <_printf_float+0x250>
 800932a:	ee18 3a10 	vmov	r3, s16
 800932e:	4652      	mov	r2, sl
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f af41 	beq.w	80091be <_printf_float+0xc2>
 800933c:	f04f 0800 	mov.w	r8, #0
 8009340:	f104 091a 	add.w	r9, r4, #26
 8009344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009346:	3b01      	subs	r3, #1
 8009348:	4543      	cmp	r3, r8
 800934a:	dc09      	bgt.n	8009360 <_printf_float+0x264>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	079b      	lsls	r3, r3, #30
 8009350:	f100 8105 	bmi.w	800955e <_printf_float+0x462>
 8009354:	68e0      	ldr	r0, [r4, #12]
 8009356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009358:	4298      	cmp	r0, r3
 800935a:	bfb8      	it	lt
 800935c:	4618      	movlt	r0, r3
 800935e:	e730      	b.n	80091c2 <_printf_float+0xc6>
 8009360:	2301      	movs	r3, #1
 8009362:	464a      	mov	r2, r9
 8009364:	4631      	mov	r1, r6
 8009366:	4628      	mov	r0, r5
 8009368:	47b8      	blx	r7
 800936a:	3001      	adds	r0, #1
 800936c:	f43f af27 	beq.w	80091be <_printf_float+0xc2>
 8009370:	f108 0801 	add.w	r8, r8, #1
 8009374:	e7e6      	b.n	8009344 <_printf_float+0x248>
 8009376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc39      	bgt.n	80093f0 <_printf_float+0x2f4>
 800937c:	4a1b      	ldr	r2, [pc, #108]	; (80093ec <_printf_float+0x2f0>)
 800937e:	2301      	movs	r3, #1
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f af19 	beq.w	80091be <_printf_float+0xc2>
 800938c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009390:	4313      	orrs	r3, r2
 8009392:	d102      	bne.n	800939a <_printf_float+0x29e>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	07d9      	lsls	r1, r3, #31
 8009398:	d5d8      	bpl.n	800934c <_printf_float+0x250>
 800939a:	ee18 3a10 	vmov	r3, s16
 800939e:	4652      	mov	r2, sl
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f af09 	beq.w	80091be <_printf_float+0xc2>
 80093ac:	f04f 0900 	mov.w	r9, #0
 80093b0:	f104 0a1a 	add.w	sl, r4, #26
 80093b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b6:	425b      	negs	r3, r3
 80093b8:	454b      	cmp	r3, r9
 80093ba:	dc01      	bgt.n	80093c0 <_printf_float+0x2c4>
 80093bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093be:	e792      	b.n	80092e6 <_printf_float+0x1ea>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4652      	mov	r2, sl
 80093c4:	4631      	mov	r1, r6
 80093c6:	4628      	mov	r0, r5
 80093c8:	47b8      	blx	r7
 80093ca:	3001      	adds	r0, #1
 80093cc:	f43f aef7 	beq.w	80091be <_printf_float+0xc2>
 80093d0:	f109 0901 	add.w	r9, r9, #1
 80093d4:	e7ee      	b.n	80093b4 <_printf_float+0x2b8>
 80093d6:	bf00      	nop
 80093d8:	7fefffff 	.word	0x7fefffff
 80093dc:	0800f675 	.word	0x0800f675
 80093e0:	0800f679 	.word	0x0800f679
 80093e4:	0800f681 	.word	0x0800f681
 80093e8:	0800f67d 	.word	0x0800f67d
 80093ec:	0800f685 	.word	0x0800f685
 80093f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093f4:	429a      	cmp	r2, r3
 80093f6:	bfa8      	it	ge
 80093f8:	461a      	movge	r2, r3
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	4691      	mov	r9, r2
 80093fe:	dc37      	bgt.n	8009470 <_printf_float+0x374>
 8009400:	f04f 0b00 	mov.w	fp, #0
 8009404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009408:	f104 021a 	add.w	r2, r4, #26
 800940c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800940e:	9305      	str	r3, [sp, #20]
 8009410:	eba3 0309 	sub.w	r3, r3, r9
 8009414:	455b      	cmp	r3, fp
 8009416:	dc33      	bgt.n	8009480 <_printf_float+0x384>
 8009418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800941c:	429a      	cmp	r2, r3
 800941e:	db3b      	blt.n	8009498 <_printf_float+0x39c>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	07da      	lsls	r2, r3, #31
 8009424:	d438      	bmi.n	8009498 <_printf_float+0x39c>
 8009426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009428:	9a05      	ldr	r2, [sp, #20]
 800942a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800942c:	1a9a      	subs	r2, r3, r2
 800942e:	eba3 0901 	sub.w	r9, r3, r1
 8009432:	4591      	cmp	r9, r2
 8009434:	bfa8      	it	ge
 8009436:	4691      	movge	r9, r2
 8009438:	f1b9 0f00 	cmp.w	r9, #0
 800943c:	dc35      	bgt.n	80094aa <_printf_float+0x3ae>
 800943e:	f04f 0800 	mov.w	r8, #0
 8009442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009446:	f104 0a1a 	add.w	sl, r4, #26
 800944a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	eba3 0309 	sub.w	r3, r3, r9
 8009454:	4543      	cmp	r3, r8
 8009456:	f77f af79 	ble.w	800934c <_printf_float+0x250>
 800945a:	2301      	movs	r3, #1
 800945c:	4652      	mov	r2, sl
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f aeaa 	beq.w	80091be <_printf_float+0xc2>
 800946a:	f108 0801 	add.w	r8, r8, #1
 800946e:	e7ec      	b.n	800944a <_printf_float+0x34e>
 8009470:	4613      	mov	r3, r2
 8009472:	4631      	mov	r1, r6
 8009474:	4642      	mov	r2, r8
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	d1c0      	bne.n	8009400 <_printf_float+0x304>
 800947e:	e69e      	b.n	80091be <_printf_float+0xc2>
 8009480:	2301      	movs	r3, #1
 8009482:	4631      	mov	r1, r6
 8009484:	4628      	mov	r0, r5
 8009486:	9205      	str	r2, [sp, #20]
 8009488:	47b8      	blx	r7
 800948a:	3001      	adds	r0, #1
 800948c:	f43f ae97 	beq.w	80091be <_printf_float+0xc2>
 8009490:	9a05      	ldr	r2, [sp, #20]
 8009492:	f10b 0b01 	add.w	fp, fp, #1
 8009496:	e7b9      	b.n	800940c <_printf_float+0x310>
 8009498:	ee18 3a10 	vmov	r3, s16
 800949c:	4652      	mov	r2, sl
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b8      	blx	r7
 80094a4:	3001      	adds	r0, #1
 80094a6:	d1be      	bne.n	8009426 <_printf_float+0x32a>
 80094a8:	e689      	b.n	80091be <_printf_float+0xc2>
 80094aa:	9a05      	ldr	r2, [sp, #20]
 80094ac:	464b      	mov	r3, r9
 80094ae:	4442      	add	r2, r8
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	d1c1      	bne.n	800943e <_printf_float+0x342>
 80094ba:	e680      	b.n	80091be <_printf_float+0xc2>
 80094bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094be:	2a01      	cmp	r2, #1
 80094c0:	dc01      	bgt.n	80094c6 <_printf_float+0x3ca>
 80094c2:	07db      	lsls	r3, r3, #31
 80094c4:	d538      	bpl.n	8009538 <_printf_float+0x43c>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4642      	mov	r2, r8
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	f43f ae74 	beq.w	80091be <_printf_float+0xc2>
 80094d6:	ee18 3a10 	vmov	r3, s16
 80094da:	4652      	mov	r2, sl
 80094dc:	4631      	mov	r1, r6
 80094de:	4628      	mov	r0, r5
 80094e0:	47b8      	blx	r7
 80094e2:	3001      	adds	r0, #1
 80094e4:	f43f ae6b 	beq.w	80091be <_printf_float+0xc2>
 80094e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094ec:	2200      	movs	r2, #0
 80094ee:	2300      	movs	r3, #0
 80094f0:	f7f7 faea 	bl	8000ac8 <__aeabi_dcmpeq>
 80094f4:	b9d8      	cbnz	r0, 800952e <_printf_float+0x432>
 80094f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f8:	f108 0201 	add.w	r2, r8, #1
 80094fc:	3b01      	subs	r3, #1
 80094fe:	4631      	mov	r1, r6
 8009500:	4628      	mov	r0, r5
 8009502:	47b8      	blx	r7
 8009504:	3001      	adds	r0, #1
 8009506:	d10e      	bne.n	8009526 <_printf_float+0x42a>
 8009508:	e659      	b.n	80091be <_printf_float+0xc2>
 800950a:	2301      	movs	r3, #1
 800950c:	4652      	mov	r2, sl
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	f43f ae52 	beq.w	80091be <_printf_float+0xc2>
 800951a:	f108 0801 	add.w	r8, r8, #1
 800951e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009520:	3b01      	subs	r3, #1
 8009522:	4543      	cmp	r3, r8
 8009524:	dcf1      	bgt.n	800950a <_printf_float+0x40e>
 8009526:	464b      	mov	r3, r9
 8009528:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800952c:	e6dc      	b.n	80092e8 <_printf_float+0x1ec>
 800952e:	f04f 0800 	mov.w	r8, #0
 8009532:	f104 0a1a 	add.w	sl, r4, #26
 8009536:	e7f2      	b.n	800951e <_printf_float+0x422>
 8009538:	2301      	movs	r3, #1
 800953a:	4642      	mov	r2, r8
 800953c:	e7df      	b.n	80094fe <_printf_float+0x402>
 800953e:	2301      	movs	r3, #1
 8009540:	464a      	mov	r2, r9
 8009542:	4631      	mov	r1, r6
 8009544:	4628      	mov	r0, r5
 8009546:	47b8      	blx	r7
 8009548:	3001      	adds	r0, #1
 800954a:	f43f ae38 	beq.w	80091be <_printf_float+0xc2>
 800954e:	f108 0801 	add.w	r8, r8, #1
 8009552:	68e3      	ldr	r3, [r4, #12]
 8009554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009556:	1a5b      	subs	r3, r3, r1
 8009558:	4543      	cmp	r3, r8
 800955a:	dcf0      	bgt.n	800953e <_printf_float+0x442>
 800955c:	e6fa      	b.n	8009354 <_printf_float+0x258>
 800955e:	f04f 0800 	mov.w	r8, #0
 8009562:	f104 0919 	add.w	r9, r4, #25
 8009566:	e7f4      	b.n	8009552 <_printf_float+0x456>

08009568 <_printf_common>:
 8009568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800956c:	4616      	mov	r6, r2
 800956e:	4699      	mov	r9, r3
 8009570:	688a      	ldr	r2, [r1, #8]
 8009572:	690b      	ldr	r3, [r1, #16]
 8009574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009578:	4293      	cmp	r3, r2
 800957a:	bfb8      	it	lt
 800957c:	4613      	movlt	r3, r2
 800957e:	6033      	str	r3, [r6, #0]
 8009580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009584:	4607      	mov	r7, r0
 8009586:	460c      	mov	r4, r1
 8009588:	b10a      	cbz	r2, 800958e <_printf_common+0x26>
 800958a:	3301      	adds	r3, #1
 800958c:	6033      	str	r3, [r6, #0]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	0699      	lsls	r1, r3, #26
 8009592:	bf42      	ittt	mi
 8009594:	6833      	ldrmi	r3, [r6, #0]
 8009596:	3302      	addmi	r3, #2
 8009598:	6033      	strmi	r3, [r6, #0]
 800959a:	6825      	ldr	r5, [r4, #0]
 800959c:	f015 0506 	ands.w	r5, r5, #6
 80095a0:	d106      	bne.n	80095b0 <_printf_common+0x48>
 80095a2:	f104 0a19 	add.w	sl, r4, #25
 80095a6:	68e3      	ldr	r3, [r4, #12]
 80095a8:	6832      	ldr	r2, [r6, #0]
 80095aa:	1a9b      	subs	r3, r3, r2
 80095ac:	42ab      	cmp	r3, r5
 80095ae:	dc26      	bgt.n	80095fe <_printf_common+0x96>
 80095b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095b4:	1e13      	subs	r3, r2, #0
 80095b6:	6822      	ldr	r2, [r4, #0]
 80095b8:	bf18      	it	ne
 80095ba:	2301      	movne	r3, #1
 80095bc:	0692      	lsls	r2, r2, #26
 80095be:	d42b      	bmi.n	8009618 <_printf_common+0xb0>
 80095c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095c4:	4649      	mov	r1, r9
 80095c6:	4638      	mov	r0, r7
 80095c8:	47c0      	blx	r8
 80095ca:	3001      	adds	r0, #1
 80095cc:	d01e      	beq.n	800960c <_printf_common+0xa4>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	68e5      	ldr	r5, [r4, #12]
 80095d2:	6832      	ldr	r2, [r6, #0]
 80095d4:	f003 0306 	and.w	r3, r3, #6
 80095d8:	2b04      	cmp	r3, #4
 80095da:	bf08      	it	eq
 80095dc:	1aad      	subeq	r5, r5, r2
 80095de:	68a3      	ldr	r3, [r4, #8]
 80095e0:	6922      	ldr	r2, [r4, #16]
 80095e2:	bf0c      	ite	eq
 80095e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095e8:	2500      	movne	r5, #0
 80095ea:	4293      	cmp	r3, r2
 80095ec:	bfc4      	itt	gt
 80095ee:	1a9b      	subgt	r3, r3, r2
 80095f0:	18ed      	addgt	r5, r5, r3
 80095f2:	2600      	movs	r6, #0
 80095f4:	341a      	adds	r4, #26
 80095f6:	42b5      	cmp	r5, r6
 80095f8:	d11a      	bne.n	8009630 <_printf_common+0xc8>
 80095fa:	2000      	movs	r0, #0
 80095fc:	e008      	b.n	8009610 <_printf_common+0xa8>
 80095fe:	2301      	movs	r3, #1
 8009600:	4652      	mov	r2, sl
 8009602:	4649      	mov	r1, r9
 8009604:	4638      	mov	r0, r7
 8009606:	47c0      	blx	r8
 8009608:	3001      	adds	r0, #1
 800960a:	d103      	bne.n	8009614 <_printf_common+0xac>
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009614:	3501      	adds	r5, #1
 8009616:	e7c6      	b.n	80095a6 <_printf_common+0x3e>
 8009618:	18e1      	adds	r1, r4, r3
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	2030      	movs	r0, #48	; 0x30
 800961e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009622:	4422      	add	r2, r4
 8009624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800962c:	3302      	adds	r3, #2
 800962e:	e7c7      	b.n	80095c0 <_printf_common+0x58>
 8009630:	2301      	movs	r3, #1
 8009632:	4622      	mov	r2, r4
 8009634:	4649      	mov	r1, r9
 8009636:	4638      	mov	r0, r7
 8009638:	47c0      	blx	r8
 800963a:	3001      	adds	r0, #1
 800963c:	d0e6      	beq.n	800960c <_printf_common+0xa4>
 800963e:	3601      	adds	r6, #1
 8009640:	e7d9      	b.n	80095f6 <_printf_common+0x8e>
	...

08009644 <_printf_i>:
 8009644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009648:	7e0f      	ldrb	r7, [r1, #24]
 800964a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800964c:	2f78      	cmp	r7, #120	; 0x78
 800964e:	4691      	mov	r9, r2
 8009650:	4680      	mov	r8, r0
 8009652:	460c      	mov	r4, r1
 8009654:	469a      	mov	sl, r3
 8009656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800965a:	d807      	bhi.n	800966c <_printf_i+0x28>
 800965c:	2f62      	cmp	r7, #98	; 0x62
 800965e:	d80a      	bhi.n	8009676 <_printf_i+0x32>
 8009660:	2f00      	cmp	r7, #0
 8009662:	f000 80d8 	beq.w	8009816 <_printf_i+0x1d2>
 8009666:	2f58      	cmp	r7, #88	; 0x58
 8009668:	f000 80a3 	beq.w	80097b2 <_printf_i+0x16e>
 800966c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009674:	e03a      	b.n	80096ec <_printf_i+0xa8>
 8009676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800967a:	2b15      	cmp	r3, #21
 800967c:	d8f6      	bhi.n	800966c <_printf_i+0x28>
 800967e:	a101      	add	r1, pc, #4	; (adr r1, 8009684 <_printf_i+0x40>)
 8009680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009684:	080096dd 	.word	0x080096dd
 8009688:	080096f1 	.word	0x080096f1
 800968c:	0800966d 	.word	0x0800966d
 8009690:	0800966d 	.word	0x0800966d
 8009694:	0800966d 	.word	0x0800966d
 8009698:	0800966d 	.word	0x0800966d
 800969c:	080096f1 	.word	0x080096f1
 80096a0:	0800966d 	.word	0x0800966d
 80096a4:	0800966d 	.word	0x0800966d
 80096a8:	0800966d 	.word	0x0800966d
 80096ac:	0800966d 	.word	0x0800966d
 80096b0:	080097fd 	.word	0x080097fd
 80096b4:	08009721 	.word	0x08009721
 80096b8:	080097df 	.word	0x080097df
 80096bc:	0800966d 	.word	0x0800966d
 80096c0:	0800966d 	.word	0x0800966d
 80096c4:	0800981f 	.word	0x0800981f
 80096c8:	0800966d 	.word	0x0800966d
 80096cc:	08009721 	.word	0x08009721
 80096d0:	0800966d 	.word	0x0800966d
 80096d4:	0800966d 	.word	0x0800966d
 80096d8:	080097e7 	.word	0x080097e7
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	1d1a      	adds	r2, r3, #4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	602a      	str	r2, [r5, #0]
 80096e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096ec:	2301      	movs	r3, #1
 80096ee:	e0a3      	b.n	8009838 <_printf_i+0x1f4>
 80096f0:	6820      	ldr	r0, [r4, #0]
 80096f2:	6829      	ldr	r1, [r5, #0]
 80096f4:	0606      	lsls	r6, r0, #24
 80096f6:	f101 0304 	add.w	r3, r1, #4
 80096fa:	d50a      	bpl.n	8009712 <_printf_i+0xce>
 80096fc:	680e      	ldr	r6, [r1, #0]
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	2e00      	cmp	r6, #0
 8009702:	da03      	bge.n	800970c <_printf_i+0xc8>
 8009704:	232d      	movs	r3, #45	; 0x2d
 8009706:	4276      	negs	r6, r6
 8009708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800970c:	485e      	ldr	r0, [pc, #376]	; (8009888 <_printf_i+0x244>)
 800970e:	230a      	movs	r3, #10
 8009710:	e019      	b.n	8009746 <_printf_i+0x102>
 8009712:	680e      	ldr	r6, [r1, #0]
 8009714:	602b      	str	r3, [r5, #0]
 8009716:	f010 0f40 	tst.w	r0, #64	; 0x40
 800971a:	bf18      	it	ne
 800971c:	b236      	sxthne	r6, r6
 800971e:	e7ef      	b.n	8009700 <_printf_i+0xbc>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	6820      	ldr	r0, [r4, #0]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	6029      	str	r1, [r5, #0]
 8009728:	0601      	lsls	r1, r0, #24
 800972a:	d501      	bpl.n	8009730 <_printf_i+0xec>
 800972c:	681e      	ldr	r6, [r3, #0]
 800972e:	e002      	b.n	8009736 <_printf_i+0xf2>
 8009730:	0646      	lsls	r6, r0, #25
 8009732:	d5fb      	bpl.n	800972c <_printf_i+0xe8>
 8009734:	881e      	ldrh	r6, [r3, #0]
 8009736:	4854      	ldr	r0, [pc, #336]	; (8009888 <_printf_i+0x244>)
 8009738:	2f6f      	cmp	r7, #111	; 0x6f
 800973a:	bf0c      	ite	eq
 800973c:	2308      	moveq	r3, #8
 800973e:	230a      	movne	r3, #10
 8009740:	2100      	movs	r1, #0
 8009742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009746:	6865      	ldr	r5, [r4, #4]
 8009748:	60a5      	str	r5, [r4, #8]
 800974a:	2d00      	cmp	r5, #0
 800974c:	bfa2      	ittt	ge
 800974e:	6821      	ldrge	r1, [r4, #0]
 8009750:	f021 0104 	bicge.w	r1, r1, #4
 8009754:	6021      	strge	r1, [r4, #0]
 8009756:	b90e      	cbnz	r6, 800975c <_printf_i+0x118>
 8009758:	2d00      	cmp	r5, #0
 800975a:	d04d      	beq.n	80097f8 <_printf_i+0x1b4>
 800975c:	4615      	mov	r5, r2
 800975e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009762:	fb03 6711 	mls	r7, r3, r1, r6
 8009766:	5dc7      	ldrb	r7, [r0, r7]
 8009768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800976c:	4637      	mov	r7, r6
 800976e:	42bb      	cmp	r3, r7
 8009770:	460e      	mov	r6, r1
 8009772:	d9f4      	bls.n	800975e <_printf_i+0x11a>
 8009774:	2b08      	cmp	r3, #8
 8009776:	d10b      	bne.n	8009790 <_printf_i+0x14c>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	07de      	lsls	r6, r3, #31
 800977c:	d508      	bpl.n	8009790 <_printf_i+0x14c>
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	6861      	ldr	r1, [r4, #4]
 8009782:	4299      	cmp	r1, r3
 8009784:	bfde      	ittt	le
 8009786:	2330      	movle	r3, #48	; 0x30
 8009788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800978c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009790:	1b52      	subs	r2, r2, r5
 8009792:	6122      	str	r2, [r4, #16]
 8009794:	f8cd a000 	str.w	sl, [sp]
 8009798:	464b      	mov	r3, r9
 800979a:	aa03      	add	r2, sp, #12
 800979c:	4621      	mov	r1, r4
 800979e:	4640      	mov	r0, r8
 80097a0:	f7ff fee2 	bl	8009568 <_printf_common>
 80097a4:	3001      	adds	r0, #1
 80097a6:	d14c      	bne.n	8009842 <_printf_i+0x1fe>
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	b004      	add	sp, #16
 80097ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b2:	4835      	ldr	r0, [pc, #212]	; (8009888 <_printf_i+0x244>)
 80097b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097b8:	6829      	ldr	r1, [r5, #0]
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80097c0:	6029      	str	r1, [r5, #0]
 80097c2:	061d      	lsls	r5, r3, #24
 80097c4:	d514      	bpl.n	80097f0 <_printf_i+0x1ac>
 80097c6:	07df      	lsls	r7, r3, #31
 80097c8:	bf44      	itt	mi
 80097ca:	f043 0320 	orrmi.w	r3, r3, #32
 80097ce:	6023      	strmi	r3, [r4, #0]
 80097d0:	b91e      	cbnz	r6, 80097da <_printf_i+0x196>
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	f023 0320 	bic.w	r3, r3, #32
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	2310      	movs	r3, #16
 80097dc:	e7b0      	b.n	8009740 <_printf_i+0xfc>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	f043 0320 	orr.w	r3, r3, #32
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	2378      	movs	r3, #120	; 0x78
 80097e8:	4828      	ldr	r0, [pc, #160]	; (800988c <_printf_i+0x248>)
 80097ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097ee:	e7e3      	b.n	80097b8 <_printf_i+0x174>
 80097f0:	0659      	lsls	r1, r3, #25
 80097f2:	bf48      	it	mi
 80097f4:	b2b6      	uxthmi	r6, r6
 80097f6:	e7e6      	b.n	80097c6 <_printf_i+0x182>
 80097f8:	4615      	mov	r5, r2
 80097fa:	e7bb      	b.n	8009774 <_printf_i+0x130>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	6826      	ldr	r6, [r4, #0]
 8009800:	6961      	ldr	r1, [r4, #20]
 8009802:	1d18      	adds	r0, r3, #4
 8009804:	6028      	str	r0, [r5, #0]
 8009806:	0635      	lsls	r5, r6, #24
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	d501      	bpl.n	8009810 <_printf_i+0x1cc>
 800980c:	6019      	str	r1, [r3, #0]
 800980e:	e002      	b.n	8009816 <_printf_i+0x1d2>
 8009810:	0670      	lsls	r0, r6, #25
 8009812:	d5fb      	bpl.n	800980c <_printf_i+0x1c8>
 8009814:	8019      	strh	r1, [r3, #0]
 8009816:	2300      	movs	r3, #0
 8009818:	6123      	str	r3, [r4, #16]
 800981a:	4615      	mov	r5, r2
 800981c:	e7ba      	b.n	8009794 <_printf_i+0x150>
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	1d1a      	adds	r2, r3, #4
 8009822:	602a      	str	r2, [r5, #0]
 8009824:	681d      	ldr	r5, [r3, #0]
 8009826:	6862      	ldr	r2, [r4, #4]
 8009828:	2100      	movs	r1, #0
 800982a:	4628      	mov	r0, r5
 800982c:	f7f6 fcd8 	bl	80001e0 <memchr>
 8009830:	b108      	cbz	r0, 8009836 <_printf_i+0x1f2>
 8009832:	1b40      	subs	r0, r0, r5
 8009834:	6060      	str	r0, [r4, #4]
 8009836:	6863      	ldr	r3, [r4, #4]
 8009838:	6123      	str	r3, [r4, #16]
 800983a:	2300      	movs	r3, #0
 800983c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009840:	e7a8      	b.n	8009794 <_printf_i+0x150>
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	462a      	mov	r2, r5
 8009846:	4649      	mov	r1, r9
 8009848:	4640      	mov	r0, r8
 800984a:	47d0      	blx	sl
 800984c:	3001      	adds	r0, #1
 800984e:	d0ab      	beq.n	80097a8 <_printf_i+0x164>
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	079b      	lsls	r3, r3, #30
 8009854:	d413      	bmi.n	800987e <_printf_i+0x23a>
 8009856:	68e0      	ldr	r0, [r4, #12]
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	4298      	cmp	r0, r3
 800985c:	bfb8      	it	lt
 800985e:	4618      	movlt	r0, r3
 8009860:	e7a4      	b.n	80097ac <_printf_i+0x168>
 8009862:	2301      	movs	r3, #1
 8009864:	4632      	mov	r2, r6
 8009866:	4649      	mov	r1, r9
 8009868:	4640      	mov	r0, r8
 800986a:	47d0      	blx	sl
 800986c:	3001      	adds	r0, #1
 800986e:	d09b      	beq.n	80097a8 <_printf_i+0x164>
 8009870:	3501      	adds	r5, #1
 8009872:	68e3      	ldr	r3, [r4, #12]
 8009874:	9903      	ldr	r1, [sp, #12]
 8009876:	1a5b      	subs	r3, r3, r1
 8009878:	42ab      	cmp	r3, r5
 800987a:	dcf2      	bgt.n	8009862 <_printf_i+0x21e>
 800987c:	e7eb      	b.n	8009856 <_printf_i+0x212>
 800987e:	2500      	movs	r5, #0
 8009880:	f104 0619 	add.w	r6, r4, #25
 8009884:	e7f5      	b.n	8009872 <_printf_i+0x22e>
 8009886:	bf00      	nop
 8009888:	0800f687 	.word	0x0800f687
 800988c:	0800f698 	.word	0x0800f698

08009890 <_scanf_float>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	b087      	sub	sp, #28
 8009896:	4617      	mov	r7, r2
 8009898:	9303      	str	r3, [sp, #12]
 800989a:	688b      	ldr	r3, [r1, #8]
 800989c:	1e5a      	subs	r2, r3, #1
 800989e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80098a2:	bf83      	ittte	hi
 80098a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80098a8:	195b      	addhi	r3, r3, r5
 80098aa:	9302      	strhi	r3, [sp, #8]
 80098ac:	2300      	movls	r3, #0
 80098ae:	bf86      	itte	hi
 80098b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80098b4:	608b      	strhi	r3, [r1, #8]
 80098b6:	9302      	strls	r3, [sp, #8]
 80098b8:	680b      	ldr	r3, [r1, #0]
 80098ba:	468b      	mov	fp, r1
 80098bc:	2500      	movs	r5, #0
 80098be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80098c2:	f84b 3b1c 	str.w	r3, [fp], #28
 80098c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80098ca:	4680      	mov	r8, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	465e      	mov	r6, fp
 80098d0:	46aa      	mov	sl, r5
 80098d2:	46a9      	mov	r9, r5
 80098d4:	9501      	str	r5, [sp, #4]
 80098d6:	68a2      	ldr	r2, [r4, #8]
 80098d8:	b152      	cbz	r2, 80098f0 <_scanf_float+0x60>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b4e      	cmp	r3, #78	; 0x4e
 80098e0:	d864      	bhi.n	80099ac <_scanf_float+0x11c>
 80098e2:	2b40      	cmp	r3, #64	; 0x40
 80098e4:	d83c      	bhi.n	8009960 <_scanf_float+0xd0>
 80098e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80098ea:	b2c8      	uxtb	r0, r1
 80098ec:	280e      	cmp	r0, #14
 80098ee:	d93a      	bls.n	8009966 <_scanf_float+0xd6>
 80098f0:	f1b9 0f00 	cmp.w	r9, #0
 80098f4:	d003      	beq.n	80098fe <_scanf_float+0x6e>
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009902:	f1ba 0f01 	cmp.w	sl, #1
 8009906:	f200 8113 	bhi.w	8009b30 <_scanf_float+0x2a0>
 800990a:	455e      	cmp	r6, fp
 800990c:	f200 8105 	bhi.w	8009b1a <_scanf_float+0x28a>
 8009910:	2501      	movs	r5, #1
 8009912:	4628      	mov	r0, r5
 8009914:	b007      	add	sp, #28
 8009916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800991e:	2a0d      	cmp	r2, #13
 8009920:	d8e6      	bhi.n	80098f0 <_scanf_float+0x60>
 8009922:	a101      	add	r1, pc, #4	; (adr r1, 8009928 <_scanf_float+0x98>)
 8009924:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009928:	08009a67 	.word	0x08009a67
 800992c:	080098f1 	.word	0x080098f1
 8009930:	080098f1 	.word	0x080098f1
 8009934:	080098f1 	.word	0x080098f1
 8009938:	08009ac7 	.word	0x08009ac7
 800993c:	08009a9f 	.word	0x08009a9f
 8009940:	080098f1 	.word	0x080098f1
 8009944:	080098f1 	.word	0x080098f1
 8009948:	08009a75 	.word	0x08009a75
 800994c:	080098f1 	.word	0x080098f1
 8009950:	080098f1 	.word	0x080098f1
 8009954:	080098f1 	.word	0x080098f1
 8009958:	080098f1 	.word	0x080098f1
 800995c:	08009a2d 	.word	0x08009a2d
 8009960:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009964:	e7db      	b.n	800991e <_scanf_float+0x8e>
 8009966:	290e      	cmp	r1, #14
 8009968:	d8c2      	bhi.n	80098f0 <_scanf_float+0x60>
 800996a:	a001      	add	r0, pc, #4	; (adr r0, 8009970 <_scanf_float+0xe0>)
 800996c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009970:	08009a1f 	.word	0x08009a1f
 8009974:	080098f1 	.word	0x080098f1
 8009978:	08009a1f 	.word	0x08009a1f
 800997c:	08009ab3 	.word	0x08009ab3
 8009980:	080098f1 	.word	0x080098f1
 8009984:	080099cd 	.word	0x080099cd
 8009988:	08009a09 	.word	0x08009a09
 800998c:	08009a09 	.word	0x08009a09
 8009990:	08009a09 	.word	0x08009a09
 8009994:	08009a09 	.word	0x08009a09
 8009998:	08009a09 	.word	0x08009a09
 800999c:	08009a09 	.word	0x08009a09
 80099a0:	08009a09 	.word	0x08009a09
 80099a4:	08009a09 	.word	0x08009a09
 80099a8:	08009a09 	.word	0x08009a09
 80099ac:	2b6e      	cmp	r3, #110	; 0x6e
 80099ae:	d809      	bhi.n	80099c4 <_scanf_float+0x134>
 80099b0:	2b60      	cmp	r3, #96	; 0x60
 80099b2:	d8b2      	bhi.n	800991a <_scanf_float+0x8a>
 80099b4:	2b54      	cmp	r3, #84	; 0x54
 80099b6:	d077      	beq.n	8009aa8 <_scanf_float+0x218>
 80099b8:	2b59      	cmp	r3, #89	; 0x59
 80099ba:	d199      	bne.n	80098f0 <_scanf_float+0x60>
 80099bc:	2d07      	cmp	r5, #7
 80099be:	d197      	bne.n	80098f0 <_scanf_float+0x60>
 80099c0:	2508      	movs	r5, #8
 80099c2:	e029      	b.n	8009a18 <_scanf_float+0x188>
 80099c4:	2b74      	cmp	r3, #116	; 0x74
 80099c6:	d06f      	beq.n	8009aa8 <_scanf_float+0x218>
 80099c8:	2b79      	cmp	r3, #121	; 0x79
 80099ca:	e7f6      	b.n	80099ba <_scanf_float+0x12a>
 80099cc:	6821      	ldr	r1, [r4, #0]
 80099ce:	05c8      	lsls	r0, r1, #23
 80099d0:	d51a      	bpl.n	8009a08 <_scanf_float+0x178>
 80099d2:	9b02      	ldr	r3, [sp, #8]
 80099d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80099d8:	6021      	str	r1, [r4, #0]
 80099da:	f109 0901 	add.w	r9, r9, #1
 80099de:	b11b      	cbz	r3, 80099e8 <_scanf_float+0x158>
 80099e0:	3b01      	subs	r3, #1
 80099e2:	3201      	adds	r2, #1
 80099e4:	9302      	str	r3, [sp, #8]
 80099e6:	60a2      	str	r2, [r4, #8]
 80099e8:	68a3      	ldr	r3, [r4, #8]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	60a3      	str	r3, [r4, #8]
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	3301      	adds	r3, #1
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	607b      	str	r3, [r7, #4]
 80099fc:	f340 8084 	ble.w	8009b08 <_scanf_float+0x278>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	3301      	adds	r3, #1
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	e766      	b.n	80098d6 <_scanf_float+0x46>
 8009a08:	eb1a 0f05 	cmn.w	sl, r5
 8009a0c:	f47f af70 	bne.w	80098f0 <_scanf_float+0x60>
 8009a10:	6822      	ldr	r2, [r4, #0]
 8009a12:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009a16:	6022      	str	r2, [r4, #0]
 8009a18:	f806 3b01 	strb.w	r3, [r6], #1
 8009a1c:	e7e4      	b.n	80099e8 <_scanf_float+0x158>
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	0610      	lsls	r0, r2, #24
 8009a22:	f57f af65 	bpl.w	80098f0 <_scanf_float+0x60>
 8009a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a2a:	e7f4      	b.n	8009a16 <_scanf_float+0x186>
 8009a2c:	f1ba 0f00 	cmp.w	sl, #0
 8009a30:	d10e      	bne.n	8009a50 <_scanf_float+0x1c0>
 8009a32:	f1b9 0f00 	cmp.w	r9, #0
 8009a36:	d10e      	bne.n	8009a56 <_scanf_float+0x1c6>
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a42:	d108      	bne.n	8009a56 <_scanf_float+0x1c6>
 8009a44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a48:	6022      	str	r2, [r4, #0]
 8009a4a:	f04f 0a01 	mov.w	sl, #1
 8009a4e:	e7e3      	b.n	8009a18 <_scanf_float+0x188>
 8009a50:	f1ba 0f02 	cmp.w	sl, #2
 8009a54:	d055      	beq.n	8009b02 <_scanf_float+0x272>
 8009a56:	2d01      	cmp	r5, #1
 8009a58:	d002      	beq.n	8009a60 <_scanf_float+0x1d0>
 8009a5a:	2d04      	cmp	r5, #4
 8009a5c:	f47f af48 	bne.w	80098f0 <_scanf_float+0x60>
 8009a60:	3501      	adds	r5, #1
 8009a62:	b2ed      	uxtb	r5, r5
 8009a64:	e7d8      	b.n	8009a18 <_scanf_float+0x188>
 8009a66:	f1ba 0f01 	cmp.w	sl, #1
 8009a6a:	f47f af41 	bne.w	80098f0 <_scanf_float+0x60>
 8009a6e:	f04f 0a02 	mov.w	sl, #2
 8009a72:	e7d1      	b.n	8009a18 <_scanf_float+0x188>
 8009a74:	b97d      	cbnz	r5, 8009a96 <_scanf_float+0x206>
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	f47f af3c 	bne.w	80098f6 <_scanf_float+0x66>
 8009a7e:	6822      	ldr	r2, [r4, #0]
 8009a80:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a88:	f47f af39 	bne.w	80098fe <_scanf_float+0x6e>
 8009a8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a90:	6022      	str	r2, [r4, #0]
 8009a92:	2501      	movs	r5, #1
 8009a94:	e7c0      	b.n	8009a18 <_scanf_float+0x188>
 8009a96:	2d03      	cmp	r5, #3
 8009a98:	d0e2      	beq.n	8009a60 <_scanf_float+0x1d0>
 8009a9a:	2d05      	cmp	r5, #5
 8009a9c:	e7de      	b.n	8009a5c <_scanf_float+0x1cc>
 8009a9e:	2d02      	cmp	r5, #2
 8009aa0:	f47f af26 	bne.w	80098f0 <_scanf_float+0x60>
 8009aa4:	2503      	movs	r5, #3
 8009aa6:	e7b7      	b.n	8009a18 <_scanf_float+0x188>
 8009aa8:	2d06      	cmp	r5, #6
 8009aaa:	f47f af21 	bne.w	80098f0 <_scanf_float+0x60>
 8009aae:	2507      	movs	r5, #7
 8009ab0:	e7b2      	b.n	8009a18 <_scanf_float+0x188>
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	0591      	lsls	r1, r2, #22
 8009ab6:	f57f af1b 	bpl.w	80098f0 <_scanf_float+0x60>
 8009aba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ac4:	e7a8      	b.n	8009a18 <_scanf_float+0x188>
 8009ac6:	6822      	ldr	r2, [r4, #0]
 8009ac8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009acc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009ad0:	d006      	beq.n	8009ae0 <_scanf_float+0x250>
 8009ad2:	0550      	lsls	r0, r2, #21
 8009ad4:	f57f af0c 	bpl.w	80098f0 <_scanf_float+0x60>
 8009ad8:	f1b9 0f00 	cmp.w	r9, #0
 8009adc:	f43f af0f 	beq.w	80098fe <_scanf_float+0x6e>
 8009ae0:	0591      	lsls	r1, r2, #22
 8009ae2:	bf58      	it	pl
 8009ae4:	9901      	ldrpl	r1, [sp, #4]
 8009ae6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009aea:	bf58      	it	pl
 8009aec:	eba9 0101 	subpl.w	r1, r9, r1
 8009af0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009af4:	bf58      	it	pl
 8009af6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009afa:	6022      	str	r2, [r4, #0]
 8009afc:	f04f 0900 	mov.w	r9, #0
 8009b00:	e78a      	b.n	8009a18 <_scanf_float+0x188>
 8009b02:	f04f 0a03 	mov.w	sl, #3
 8009b06:	e787      	b.n	8009a18 <_scanf_float+0x188>
 8009b08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	4640      	mov	r0, r8
 8009b10:	4798      	blx	r3
 8009b12:	2800      	cmp	r0, #0
 8009b14:	f43f aedf 	beq.w	80098d6 <_scanf_float+0x46>
 8009b18:	e6ea      	b.n	80098f0 <_scanf_float+0x60>
 8009b1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b22:	463a      	mov	r2, r7
 8009b24:	4640      	mov	r0, r8
 8009b26:	4798      	blx	r3
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	6123      	str	r3, [r4, #16]
 8009b2e:	e6ec      	b.n	800990a <_scanf_float+0x7a>
 8009b30:	1e6b      	subs	r3, r5, #1
 8009b32:	2b06      	cmp	r3, #6
 8009b34:	d825      	bhi.n	8009b82 <_scanf_float+0x2f2>
 8009b36:	2d02      	cmp	r5, #2
 8009b38:	d836      	bhi.n	8009ba8 <_scanf_float+0x318>
 8009b3a:	455e      	cmp	r6, fp
 8009b3c:	f67f aee8 	bls.w	8009910 <_scanf_float+0x80>
 8009b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b48:	463a      	mov	r2, r7
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4798      	blx	r3
 8009b4e:	6923      	ldr	r3, [r4, #16]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	e7f1      	b.n	8009b3a <_scanf_float+0x2aa>
 8009b56:	9802      	ldr	r0, [sp, #8]
 8009b58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b5c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009b60:	9002      	str	r0, [sp, #8]
 8009b62:	463a      	mov	r2, r7
 8009b64:	4640      	mov	r0, r8
 8009b66:	4798      	blx	r3
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b72:	fa5f fa8a 	uxtb.w	sl, sl
 8009b76:	f1ba 0f02 	cmp.w	sl, #2
 8009b7a:	d1ec      	bne.n	8009b56 <_scanf_float+0x2c6>
 8009b7c:	3d03      	subs	r5, #3
 8009b7e:	b2ed      	uxtb	r5, r5
 8009b80:	1b76      	subs	r6, r6, r5
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	05da      	lsls	r2, r3, #23
 8009b86:	d52f      	bpl.n	8009be8 <_scanf_float+0x358>
 8009b88:	055b      	lsls	r3, r3, #21
 8009b8a:	d510      	bpl.n	8009bae <_scanf_float+0x31e>
 8009b8c:	455e      	cmp	r6, fp
 8009b8e:	f67f aebf 	bls.w	8009910 <_scanf_float+0x80>
 8009b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b9a:	463a      	mov	r2, r7
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	4798      	blx	r3
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	6123      	str	r3, [r4, #16]
 8009ba6:	e7f1      	b.n	8009b8c <_scanf_float+0x2fc>
 8009ba8:	46aa      	mov	sl, r5
 8009baa:	9602      	str	r6, [sp, #8]
 8009bac:	e7df      	b.n	8009b6e <_scanf_float+0x2de>
 8009bae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	2965      	cmp	r1, #101	; 0x65
 8009bb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bba:	f106 35ff 	add.w	r5, r6, #4294967295
 8009bbe:	6123      	str	r3, [r4, #16]
 8009bc0:	d00c      	beq.n	8009bdc <_scanf_float+0x34c>
 8009bc2:	2945      	cmp	r1, #69	; 0x45
 8009bc4:	d00a      	beq.n	8009bdc <_scanf_float+0x34c>
 8009bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bca:	463a      	mov	r2, r7
 8009bcc:	4640      	mov	r0, r8
 8009bce:	4798      	blx	r3
 8009bd0:	6923      	ldr	r3, [r4, #16]
 8009bd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	1eb5      	subs	r5, r6, #2
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009be0:	463a      	mov	r2, r7
 8009be2:	4640      	mov	r0, r8
 8009be4:	4798      	blx	r3
 8009be6:	462e      	mov	r6, r5
 8009be8:	6825      	ldr	r5, [r4, #0]
 8009bea:	f015 0510 	ands.w	r5, r5, #16
 8009bee:	d159      	bne.n	8009ca4 <_scanf_float+0x414>
 8009bf0:	7035      	strb	r5, [r6, #0]
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bfc:	d11b      	bne.n	8009c36 <_scanf_float+0x3a6>
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	454b      	cmp	r3, r9
 8009c02:	eba3 0209 	sub.w	r2, r3, r9
 8009c06:	d123      	bne.n	8009c50 <_scanf_float+0x3c0>
 8009c08:	2200      	movs	r2, #0
 8009c0a:	4659      	mov	r1, fp
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	f000 ff35 	bl	800aa7c <_strtod_r>
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	f012 0f02 	tst.w	r2, #2
 8009c1a:	ec57 6b10 	vmov	r6, r7, d0
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	d021      	beq.n	8009c66 <_scanf_float+0x3d6>
 8009c22:	9903      	ldr	r1, [sp, #12]
 8009c24:	1d1a      	adds	r2, r3, #4
 8009c26:	600a      	str	r2, [r1, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	e9c3 6700 	strd	r6, r7, [r3]
 8009c2e:	68e3      	ldr	r3, [r4, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	60e3      	str	r3, [r4, #12]
 8009c34:	e66d      	b.n	8009912 <_scanf_float+0x82>
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0e5      	beq.n	8009c08 <_scanf_float+0x378>
 8009c3c:	9905      	ldr	r1, [sp, #20]
 8009c3e:	230a      	movs	r3, #10
 8009c40:	462a      	mov	r2, r5
 8009c42:	3101      	adds	r1, #1
 8009c44:	4640      	mov	r0, r8
 8009c46:	f000 ffa1 	bl	800ab8c <_strtol_r>
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	9e05      	ldr	r6, [sp, #20]
 8009c4e:	1ac2      	subs	r2, r0, r3
 8009c50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009c54:	429e      	cmp	r6, r3
 8009c56:	bf28      	it	cs
 8009c58:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009c5c:	4912      	ldr	r1, [pc, #72]	; (8009ca8 <_scanf_float+0x418>)
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f000 f884 	bl	8009d6c <siprintf>
 8009c64:	e7d0      	b.n	8009c08 <_scanf_float+0x378>
 8009c66:	9903      	ldr	r1, [sp, #12]
 8009c68:	f012 0f04 	tst.w	r2, #4
 8009c6c:	f103 0204 	add.w	r2, r3, #4
 8009c70:	600a      	str	r2, [r1, #0]
 8009c72:	d1d9      	bne.n	8009c28 <_scanf_float+0x398>
 8009c74:	f8d3 8000 	ldr.w	r8, [r3]
 8009c78:	ee10 2a10 	vmov	r2, s0
 8009c7c:	ee10 0a10 	vmov	r0, s0
 8009c80:	463b      	mov	r3, r7
 8009c82:	4639      	mov	r1, r7
 8009c84:	f7f6 ff52 	bl	8000b2c <__aeabi_dcmpun>
 8009c88:	b128      	cbz	r0, 8009c96 <_scanf_float+0x406>
 8009c8a:	4808      	ldr	r0, [pc, #32]	; (8009cac <_scanf_float+0x41c>)
 8009c8c:	f000 f868 	bl	8009d60 <nanf>
 8009c90:	ed88 0a00 	vstr	s0, [r8]
 8009c94:	e7cb      	b.n	8009c2e <_scanf_float+0x39e>
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 ffa5 	bl	8000be8 <__aeabi_d2f>
 8009c9e:	f8c8 0000 	str.w	r0, [r8]
 8009ca2:	e7c4      	b.n	8009c2e <_scanf_float+0x39e>
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	e634      	b.n	8009912 <_scanf_float+0x82>
 8009ca8:	0800f6a9 	.word	0x0800f6a9
 8009cac:	0800f4fb 	.word	0x0800f4fb

08009cb0 <_putc_r>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	460d      	mov	r5, r1
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	b118      	cbz	r0, 8009cc2 <_putc_r+0x12>
 8009cba:	6983      	ldr	r3, [r0, #24]
 8009cbc:	b90b      	cbnz	r3, 8009cc2 <_putc_r+0x12>
 8009cbe:	f7fe fd5d 	bl	800877c <__sinit>
 8009cc2:	4b1c      	ldr	r3, [pc, #112]	; (8009d34 <_putc_r+0x84>)
 8009cc4:	429c      	cmp	r4, r3
 8009cc6:	d124      	bne.n	8009d12 <_putc_r+0x62>
 8009cc8:	6874      	ldr	r4, [r6, #4]
 8009cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ccc:	07d8      	lsls	r0, r3, #31
 8009cce:	d405      	bmi.n	8009cdc <_putc_r+0x2c>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	0599      	lsls	r1, r3, #22
 8009cd4:	d402      	bmi.n	8009cdc <_putc_r+0x2c>
 8009cd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cd8:	f7fe fed3 	bl	8008a82 <__retarget_lock_acquire_recursive>
 8009cdc:	68a3      	ldr	r3, [r4, #8]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	60a3      	str	r3, [r4, #8]
 8009ce4:	da05      	bge.n	8009cf2 <_putc_r+0x42>
 8009ce6:	69a2      	ldr	r2, [r4, #24]
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	db1c      	blt.n	8009d26 <_putc_r+0x76>
 8009cec:	b2eb      	uxtb	r3, r5
 8009cee:	2b0a      	cmp	r3, #10
 8009cf0:	d019      	beq.n	8009d26 <_putc_r+0x76>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	6022      	str	r2, [r4, #0]
 8009cf8:	701d      	strb	r5, [r3, #0]
 8009cfa:	b2ed      	uxtb	r5, r5
 8009cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cfe:	07da      	lsls	r2, r3, #31
 8009d00:	d405      	bmi.n	8009d0e <_putc_r+0x5e>
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	059b      	lsls	r3, r3, #22
 8009d06:	d402      	bmi.n	8009d0e <_putc_r+0x5e>
 8009d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d0a:	f7fe febb 	bl	8008a84 <__retarget_lock_release_recursive>
 8009d0e:	4628      	mov	r0, r5
 8009d10:	bd70      	pop	{r4, r5, r6, pc}
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <_putc_r+0x88>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	d101      	bne.n	8009d1c <_putc_r+0x6c>
 8009d18:	68b4      	ldr	r4, [r6, #8]
 8009d1a:	e7d6      	b.n	8009cca <_putc_r+0x1a>
 8009d1c:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <_putc_r+0x8c>)
 8009d1e:	429c      	cmp	r4, r3
 8009d20:	bf08      	it	eq
 8009d22:	68f4      	ldreq	r4, [r6, #12]
 8009d24:	e7d1      	b.n	8009cca <_putc_r+0x1a>
 8009d26:	4629      	mov	r1, r5
 8009d28:	4622      	mov	r2, r4
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f000 ff30 	bl	800ab90 <__swbuf_r>
 8009d30:	4605      	mov	r5, r0
 8009d32:	e7e3      	b.n	8009cfc <_putc_r+0x4c>
 8009d34:	0800f620 	.word	0x0800f620
 8009d38:	0800f640 	.word	0x0800f640
 8009d3c:	0800f600 	.word	0x0800f600

08009d40 <_sbrk_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4d06      	ldr	r5, [pc, #24]	; (8009d5c <_sbrk_r+0x1c>)
 8009d44:	2300      	movs	r3, #0
 8009d46:	4604      	mov	r4, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	602b      	str	r3, [r5, #0]
 8009d4c:	f7f7 fb24 	bl	8001398 <_sbrk>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_sbrk_r+0x1a>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_sbrk_r+0x1a>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	20000ee8 	.word	0x20000ee8

08009d60 <nanf>:
 8009d60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d68 <nanf+0x8>
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	7fc00000 	.word	0x7fc00000

08009d6c <siprintf>:
 8009d6c:	b40e      	push	{r1, r2, r3}
 8009d6e:	b500      	push	{lr}
 8009d70:	b09c      	sub	sp, #112	; 0x70
 8009d72:	ab1d      	add	r3, sp, #116	; 0x74
 8009d74:	9002      	str	r0, [sp, #8]
 8009d76:	9006      	str	r0, [sp, #24]
 8009d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d7c:	4809      	ldr	r0, [pc, #36]	; (8009da4 <siprintf+0x38>)
 8009d7e:	9107      	str	r1, [sp, #28]
 8009d80:	9104      	str	r1, [sp, #16]
 8009d82:	4909      	ldr	r1, [pc, #36]	; (8009da8 <siprintf+0x3c>)
 8009d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d88:	9105      	str	r1, [sp, #20]
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	a902      	add	r1, sp, #8
 8009d90:	f002 ffba 	bl	800cd08 <_svfiprintf_r>
 8009d94:	9b02      	ldr	r3, [sp, #8]
 8009d96:	2200      	movs	r2, #0
 8009d98:	701a      	strb	r2, [r3, #0]
 8009d9a:	b01c      	add	sp, #112	; 0x70
 8009d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009da0:	b003      	add	sp, #12
 8009da2:	4770      	bx	lr
 8009da4:	2000000c 	.word	0x2000000c
 8009da8:	ffff0208 	.word	0xffff0208

08009dac <__sread>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	460c      	mov	r4, r1
 8009db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db4:	f003 f8a8 	bl	800cf08 <_read_r>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	bfab      	itete	ge
 8009dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc0:	181b      	addge	r3, r3, r0
 8009dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dc6:	bfac      	ite	ge
 8009dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dca:	81a3      	strhlt	r3, [r4, #12]
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <__swrite>:
 8009dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd2:	461f      	mov	r7, r3
 8009dd4:	898b      	ldrh	r3, [r1, #12]
 8009dd6:	05db      	lsls	r3, r3, #23
 8009dd8:	4605      	mov	r5, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	4616      	mov	r6, r2
 8009dde:	d505      	bpl.n	8009dec <__swrite+0x1e>
 8009de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de4:	2302      	movs	r3, #2
 8009de6:	2200      	movs	r2, #0
 8009de8:	f002 f9ac 	bl	800c144 <_lseek_r>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e02:	f000 bf17 	b.w	800ac34 <_write_r>

08009e06 <__sseek>:
 8009e06:	b510      	push	{r4, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0e:	f002 f999 	bl	800c144 <_lseek_r>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	bf15      	itete	ne
 8009e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e22:	81a3      	strheq	r3, [r4, #12]
 8009e24:	bf18      	it	ne
 8009e26:	81a3      	strhne	r3, [r4, #12]
 8009e28:	bd10      	pop	{r4, pc}

08009e2a <__sclose>:
 8009e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2e:	f000 bf89 	b.w	800ad44 <_close_r>

08009e32 <sulp>:
 8009e32:	b570      	push	{r4, r5, r6, lr}
 8009e34:	4604      	mov	r4, r0
 8009e36:	460d      	mov	r5, r1
 8009e38:	ec45 4b10 	vmov	d0, r4, r5
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	f002 fd89 	bl	800c954 <__ulp>
 8009e42:	ec51 0b10 	vmov	r0, r1, d0
 8009e46:	b17e      	cbz	r6, 8009e68 <sulp+0x36>
 8009e48:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dd09      	ble.n	8009e68 <sulp+0x36>
 8009e54:	051b      	lsls	r3, r3, #20
 8009e56:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e5a:	2400      	movs	r4, #0
 8009e5c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009e60:	4622      	mov	r2, r4
 8009e62:	462b      	mov	r3, r5
 8009e64:	f7f6 fbc8 	bl	80005f8 <__aeabi_dmul>
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
 8009e6a:	0000      	movs	r0, r0
 8009e6c:	0000      	movs	r0, r0
	...

08009e70 <_strtod_l>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	ed2d 8b02 	vpush	{d8}
 8009e78:	b09d      	sub	sp, #116	; 0x74
 8009e7a:	461f      	mov	r7, r3
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9318      	str	r3, [sp, #96]	; 0x60
 8009e80:	4ba2      	ldr	r3, [pc, #648]	; (800a10c <_strtod_l+0x29c>)
 8009e82:	9213      	str	r2, [sp, #76]	; 0x4c
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	9305      	str	r3, [sp, #20]
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	4688      	mov	r8, r1
 8009e8e:	f7f6 f99f 	bl	80001d0 <strlen>
 8009e92:	f04f 0a00 	mov.w	sl, #0
 8009e96:	4605      	mov	r5, r0
 8009e98:	f04f 0b00 	mov.w	fp, #0
 8009e9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ea2:	781a      	ldrb	r2, [r3, #0]
 8009ea4:	2a2b      	cmp	r2, #43	; 0x2b
 8009ea6:	d04e      	beq.n	8009f46 <_strtod_l+0xd6>
 8009ea8:	d83b      	bhi.n	8009f22 <_strtod_l+0xb2>
 8009eaa:	2a0d      	cmp	r2, #13
 8009eac:	d834      	bhi.n	8009f18 <_strtod_l+0xa8>
 8009eae:	2a08      	cmp	r2, #8
 8009eb0:	d834      	bhi.n	8009f1c <_strtod_l+0xac>
 8009eb2:	2a00      	cmp	r2, #0
 8009eb4:	d03e      	beq.n	8009f34 <_strtod_l+0xc4>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8009eba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009ebc:	7833      	ldrb	r3, [r6, #0]
 8009ebe:	2b30      	cmp	r3, #48	; 0x30
 8009ec0:	f040 80b0 	bne.w	800a024 <_strtod_l+0x1b4>
 8009ec4:	7873      	ldrb	r3, [r6, #1]
 8009ec6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009eca:	2b58      	cmp	r3, #88	; 0x58
 8009ecc:	d168      	bne.n	8009fa0 <_strtod_l+0x130>
 8009ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	ab18      	add	r3, sp, #96	; 0x60
 8009ed4:	9702      	str	r7, [sp, #8]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	4a8d      	ldr	r2, [pc, #564]	; (800a110 <_strtod_l+0x2a0>)
 8009eda:	ab19      	add	r3, sp, #100	; 0x64
 8009edc:	a917      	add	r1, sp, #92	; 0x5c
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f001 fe24 	bl	800bb2c <__gethex>
 8009ee4:	f010 0707 	ands.w	r7, r0, #7
 8009ee8:	4605      	mov	r5, r0
 8009eea:	d005      	beq.n	8009ef8 <_strtod_l+0x88>
 8009eec:	2f06      	cmp	r7, #6
 8009eee:	d12c      	bne.n	8009f4a <_strtod_l+0xda>
 8009ef0:	3601      	adds	r6, #1
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9617      	str	r6, [sp, #92]	; 0x5c
 8009ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f040 8590 	bne.w	800aa20 <_strtod_l+0xbb0>
 8009f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f02:	b1eb      	cbz	r3, 8009f40 <_strtod_l+0xd0>
 8009f04:	4652      	mov	r2, sl
 8009f06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f0a:	ec43 2b10 	vmov	d0, r2, r3
 8009f0e:	b01d      	add	sp, #116	; 0x74
 8009f10:	ecbd 8b02 	vpop	{d8}
 8009f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f18:	2a20      	cmp	r2, #32
 8009f1a:	d1cc      	bne.n	8009eb6 <_strtod_l+0x46>
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f20:	e7be      	b.n	8009ea0 <_strtod_l+0x30>
 8009f22:	2a2d      	cmp	r2, #45	; 0x2d
 8009f24:	d1c7      	bne.n	8009eb6 <_strtod_l+0x46>
 8009f26:	2201      	movs	r2, #1
 8009f28:	920a      	str	r2, [sp, #40]	; 0x28
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f2e:	785b      	ldrb	r3, [r3, #1]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1c2      	bne.n	8009eba <_strtod_l+0x4a>
 8009f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f040 856e 	bne.w	800aa1c <_strtod_l+0xbac>
 8009f40:	4652      	mov	r2, sl
 8009f42:	465b      	mov	r3, fp
 8009f44:	e7e1      	b.n	8009f0a <_strtod_l+0x9a>
 8009f46:	2200      	movs	r2, #0
 8009f48:	e7ee      	b.n	8009f28 <_strtod_l+0xb8>
 8009f4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f4c:	b13a      	cbz	r2, 8009f5e <_strtod_l+0xee>
 8009f4e:	2135      	movs	r1, #53	; 0x35
 8009f50:	a81a      	add	r0, sp, #104	; 0x68
 8009f52:	f002 fe0a 	bl	800cb6a <__copybits>
 8009f56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f002 f9c9 	bl	800c2f0 <_Bfree>
 8009f5e:	3f01      	subs	r7, #1
 8009f60:	2f04      	cmp	r7, #4
 8009f62:	d806      	bhi.n	8009f72 <_strtod_l+0x102>
 8009f64:	e8df f007 	tbb	[pc, r7]
 8009f68:	1714030a 	.word	0x1714030a
 8009f6c:	0a          	.byte	0x0a
 8009f6d:	00          	.byte	0x00
 8009f6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009f72:	0728      	lsls	r0, r5, #28
 8009f74:	d5c0      	bpl.n	8009ef8 <_strtod_l+0x88>
 8009f76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009f7a:	e7bd      	b.n	8009ef8 <_strtod_l+0x88>
 8009f7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009f80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f8e:	e7f0      	b.n	8009f72 <_strtod_l+0x102>
 8009f90:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a114 <_strtod_l+0x2a4>
 8009f94:	e7ed      	b.n	8009f72 <_strtod_l+0x102>
 8009f96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009f9a:	f04f 3aff 	mov.w	sl, #4294967295
 8009f9e:	e7e8      	b.n	8009f72 <_strtod_l+0x102>
 8009fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fa2:	1c5a      	adds	r2, r3, #1
 8009fa4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009fa6:	785b      	ldrb	r3, [r3, #1]
 8009fa8:	2b30      	cmp	r3, #48	; 0x30
 8009faa:	d0f9      	beq.n	8009fa0 <_strtod_l+0x130>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d0a3      	beq.n	8009ef8 <_strtod_l+0x88>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	f04f 0900 	mov.w	r9, #0
 8009fb6:	9304      	str	r3, [sp, #16]
 8009fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fba:	9308      	str	r3, [sp, #32]
 8009fbc:	f8cd 901c 	str.w	r9, [sp, #28]
 8009fc0:	464f      	mov	r7, r9
 8009fc2:	220a      	movs	r2, #10
 8009fc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009fc6:	7806      	ldrb	r6, [r0, #0]
 8009fc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009fcc:	b2d9      	uxtb	r1, r3
 8009fce:	2909      	cmp	r1, #9
 8009fd0:	d92a      	bls.n	800a028 <_strtod_l+0x1b8>
 8009fd2:	9905      	ldr	r1, [sp, #20]
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	f002 fff7 	bl	800cfc8 <strncmp>
 8009fda:	b398      	cbz	r0, 800a044 <_strtod_l+0x1d4>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	4632      	mov	r2, r6
 8009fe0:	463d      	mov	r5, r7
 8009fe2:	9005      	str	r0, [sp, #20]
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2a65      	cmp	r2, #101	; 0x65
 8009fe8:	d001      	beq.n	8009fee <_strtod_l+0x17e>
 8009fea:	2a45      	cmp	r2, #69	; 0x45
 8009fec:	d118      	bne.n	800a020 <_strtod_l+0x1b0>
 8009fee:	b91d      	cbnz	r5, 8009ff8 <_strtod_l+0x188>
 8009ff0:	9a04      	ldr	r2, [sp, #16]
 8009ff2:	4302      	orrs	r2, r0
 8009ff4:	d09e      	beq.n	8009f34 <_strtod_l+0xc4>
 8009ff6:	2500      	movs	r5, #0
 8009ff8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009ffc:	f108 0201 	add.w	r2, r8, #1
 800a000:	9217      	str	r2, [sp, #92]	; 0x5c
 800a002:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a006:	2a2b      	cmp	r2, #43	; 0x2b
 800a008:	d075      	beq.n	800a0f6 <_strtod_l+0x286>
 800a00a:	2a2d      	cmp	r2, #45	; 0x2d
 800a00c:	d07b      	beq.n	800a106 <_strtod_l+0x296>
 800a00e:	f04f 0c00 	mov.w	ip, #0
 800a012:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a016:	2909      	cmp	r1, #9
 800a018:	f240 8082 	bls.w	800a120 <_strtod_l+0x2b0>
 800a01c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a020:	2600      	movs	r6, #0
 800a022:	e09d      	b.n	800a160 <_strtod_l+0x2f0>
 800a024:	2300      	movs	r3, #0
 800a026:	e7c4      	b.n	8009fb2 <_strtod_l+0x142>
 800a028:	2f08      	cmp	r7, #8
 800a02a:	bfd8      	it	le
 800a02c:	9907      	ldrle	r1, [sp, #28]
 800a02e:	f100 0001 	add.w	r0, r0, #1
 800a032:	bfda      	itte	le
 800a034:	fb02 3301 	mlale	r3, r2, r1, r3
 800a038:	9307      	strle	r3, [sp, #28]
 800a03a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a03e:	3701      	adds	r7, #1
 800a040:	9017      	str	r0, [sp, #92]	; 0x5c
 800a042:	e7bf      	b.n	8009fc4 <_strtod_l+0x154>
 800a044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a046:	195a      	adds	r2, r3, r5
 800a048:	9217      	str	r2, [sp, #92]	; 0x5c
 800a04a:	5d5a      	ldrb	r2, [r3, r5]
 800a04c:	2f00      	cmp	r7, #0
 800a04e:	d037      	beq.n	800a0c0 <_strtod_l+0x250>
 800a050:	9005      	str	r0, [sp, #20]
 800a052:	463d      	mov	r5, r7
 800a054:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a058:	2b09      	cmp	r3, #9
 800a05a:	d912      	bls.n	800a082 <_strtod_l+0x212>
 800a05c:	2301      	movs	r3, #1
 800a05e:	e7c2      	b.n	8009fe6 <_strtod_l+0x176>
 800a060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	9217      	str	r2, [sp, #92]	; 0x5c
 800a066:	785a      	ldrb	r2, [r3, #1]
 800a068:	3001      	adds	r0, #1
 800a06a:	2a30      	cmp	r2, #48	; 0x30
 800a06c:	d0f8      	beq.n	800a060 <_strtod_l+0x1f0>
 800a06e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a072:	2b08      	cmp	r3, #8
 800a074:	f200 84d9 	bhi.w	800aa2a <_strtod_l+0xbba>
 800a078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a07a:	9005      	str	r0, [sp, #20]
 800a07c:	2000      	movs	r0, #0
 800a07e:	9308      	str	r3, [sp, #32]
 800a080:	4605      	mov	r5, r0
 800a082:	3a30      	subs	r2, #48	; 0x30
 800a084:	f100 0301 	add.w	r3, r0, #1
 800a088:	d014      	beq.n	800a0b4 <_strtod_l+0x244>
 800a08a:	9905      	ldr	r1, [sp, #20]
 800a08c:	4419      	add	r1, r3
 800a08e:	9105      	str	r1, [sp, #20]
 800a090:	462b      	mov	r3, r5
 800a092:	eb00 0e05 	add.w	lr, r0, r5
 800a096:	210a      	movs	r1, #10
 800a098:	4573      	cmp	r3, lr
 800a09a:	d113      	bne.n	800a0c4 <_strtod_l+0x254>
 800a09c:	182b      	adds	r3, r5, r0
 800a09e:	2b08      	cmp	r3, #8
 800a0a0:	f105 0501 	add.w	r5, r5, #1
 800a0a4:	4405      	add	r5, r0
 800a0a6:	dc1c      	bgt.n	800a0e2 <_strtod_l+0x272>
 800a0a8:	9907      	ldr	r1, [sp, #28]
 800a0aa:	230a      	movs	r3, #10
 800a0ac:	fb03 2301 	mla	r3, r3, r1, r2
 800a0b0:	9307      	str	r3, [sp, #28]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0b6:	1c51      	adds	r1, r2, #1
 800a0b8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a0ba:	7852      	ldrb	r2, [r2, #1]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	e7c9      	b.n	800a054 <_strtod_l+0x1e4>
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	e7d2      	b.n	800a06a <_strtod_l+0x1fa>
 800a0c4:	2b08      	cmp	r3, #8
 800a0c6:	dc04      	bgt.n	800a0d2 <_strtod_l+0x262>
 800a0c8:	9e07      	ldr	r6, [sp, #28]
 800a0ca:	434e      	muls	r6, r1
 800a0cc:	9607      	str	r6, [sp, #28]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	e7e2      	b.n	800a098 <_strtod_l+0x228>
 800a0d2:	f103 0c01 	add.w	ip, r3, #1
 800a0d6:	f1bc 0f10 	cmp.w	ip, #16
 800a0da:	bfd8      	it	le
 800a0dc:	fb01 f909 	mulle.w	r9, r1, r9
 800a0e0:	e7f5      	b.n	800a0ce <_strtod_l+0x25e>
 800a0e2:	2d10      	cmp	r5, #16
 800a0e4:	bfdc      	itt	le
 800a0e6:	230a      	movle	r3, #10
 800a0e8:	fb03 2909 	mlale	r9, r3, r9, r2
 800a0ec:	e7e1      	b.n	800a0b2 <_strtod_l+0x242>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9305      	str	r3, [sp, #20]
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e77c      	b.n	8009ff0 <_strtod_l+0x180>
 800a0f6:	f04f 0c00 	mov.w	ip, #0
 800a0fa:	f108 0202 	add.w	r2, r8, #2
 800a0fe:	9217      	str	r2, [sp, #92]	; 0x5c
 800a100:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a104:	e785      	b.n	800a012 <_strtod_l+0x1a2>
 800a106:	f04f 0c01 	mov.w	ip, #1
 800a10a:	e7f6      	b.n	800a0fa <_strtod_l+0x28a>
 800a10c:	0800f7f8 	.word	0x0800f7f8
 800a110:	0800f6b0 	.word	0x0800f6b0
 800a114:	7ff00000 	.word	0x7ff00000
 800a118:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a11a:	1c51      	adds	r1, r2, #1
 800a11c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a11e:	7852      	ldrb	r2, [r2, #1]
 800a120:	2a30      	cmp	r2, #48	; 0x30
 800a122:	d0f9      	beq.n	800a118 <_strtod_l+0x2a8>
 800a124:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a128:	2908      	cmp	r1, #8
 800a12a:	f63f af79 	bhi.w	800a020 <_strtod_l+0x1b0>
 800a12e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a132:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a134:	9206      	str	r2, [sp, #24]
 800a136:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a138:	1c51      	adds	r1, r2, #1
 800a13a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a13c:	7852      	ldrb	r2, [r2, #1]
 800a13e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a142:	2e09      	cmp	r6, #9
 800a144:	d937      	bls.n	800a1b6 <_strtod_l+0x346>
 800a146:	9e06      	ldr	r6, [sp, #24]
 800a148:	1b89      	subs	r1, r1, r6
 800a14a:	2908      	cmp	r1, #8
 800a14c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a150:	dc02      	bgt.n	800a158 <_strtod_l+0x2e8>
 800a152:	4576      	cmp	r6, lr
 800a154:	bfa8      	it	ge
 800a156:	4676      	movge	r6, lr
 800a158:	f1bc 0f00 	cmp.w	ip, #0
 800a15c:	d000      	beq.n	800a160 <_strtod_l+0x2f0>
 800a15e:	4276      	negs	r6, r6
 800a160:	2d00      	cmp	r5, #0
 800a162:	d14d      	bne.n	800a200 <_strtod_l+0x390>
 800a164:	9904      	ldr	r1, [sp, #16]
 800a166:	4301      	orrs	r1, r0
 800a168:	f47f aec6 	bne.w	8009ef8 <_strtod_l+0x88>
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f47f aee1 	bne.w	8009f34 <_strtod_l+0xc4>
 800a172:	2a69      	cmp	r2, #105	; 0x69
 800a174:	d027      	beq.n	800a1c6 <_strtod_l+0x356>
 800a176:	dc24      	bgt.n	800a1c2 <_strtod_l+0x352>
 800a178:	2a49      	cmp	r2, #73	; 0x49
 800a17a:	d024      	beq.n	800a1c6 <_strtod_l+0x356>
 800a17c:	2a4e      	cmp	r2, #78	; 0x4e
 800a17e:	f47f aed9 	bne.w	8009f34 <_strtod_l+0xc4>
 800a182:	499f      	ldr	r1, [pc, #636]	; (800a400 <_strtod_l+0x590>)
 800a184:	a817      	add	r0, sp, #92	; 0x5c
 800a186:	f001 ff29 	bl	800bfdc <__match>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	f43f aed2 	beq.w	8009f34 <_strtod_l+0xc4>
 800a190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b28      	cmp	r3, #40	; 0x28
 800a196:	d12d      	bne.n	800a1f4 <_strtod_l+0x384>
 800a198:	499a      	ldr	r1, [pc, #616]	; (800a404 <_strtod_l+0x594>)
 800a19a:	aa1a      	add	r2, sp, #104	; 0x68
 800a19c:	a817      	add	r0, sp, #92	; 0x5c
 800a19e:	f001 ff31 	bl	800c004 <__hexnan>
 800a1a2:	2805      	cmp	r0, #5
 800a1a4:	d126      	bne.n	800a1f4 <_strtod_l+0x384>
 800a1a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a1ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a1b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a1b4:	e6a0      	b.n	8009ef8 <_strtod_l+0x88>
 800a1b6:	210a      	movs	r1, #10
 800a1b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a1bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a1c0:	e7b9      	b.n	800a136 <_strtod_l+0x2c6>
 800a1c2:	2a6e      	cmp	r2, #110	; 0x6e
 800a1c4:	e7db      	b.n	800a17e <_strtod_l+0x30e>
 800a1c6:	4990      	ldr	r1, [pc, #576]	; (800a408 <_strtod_l+0x598>)
 800a1c8:	a817      	add	r0, sp, #92	; 0x5c
 800a1ca:	f001 ff07 	bl	800bfdc <__match>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f aeb0 	beq.w	8009f34 <_strtod_l+0xc4>
 800a1d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1d6:	498d      	ldr	r1, [pc, #564]	; (800a40c <_strtod_l+0x59c>)
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	a817      	add	r0, sp, #92	; 0x5c
 800a1dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1de:	f001 fefd 	bl	800bfdc <__match>
 800a1e2:	b910      	cbnz	r0, 800a1ea <_strtod_l+0x37a>
 800a1e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a41c <_strtod_l+0x5ac>
 800a1ee:	f04f 0a00 	mov.w	sl, #0
 800a1f2:	e681      	b.n	8009ef8 <_strtod_l+0x88>
 800a1f4:	4886      	ldr	r0, [pc, #536]	; (800a410 <_strtod_l+0x5a0>)
 800a1f6:	f002 fe9b 	bl	800cf30 <nan>
 800a1fa:	ec5b ab10 	vmov	sl, fp, d0
 800a1fe:	e67b      	b.n	8009ef8 <_strtod_l+0x88>
 800a200:	9b05      	ldr	r3, [sp, #20]
 800a202:	9807      	ldr	r0, [sp, #28]
 800a204:	1af3      	subs	r3, r6, r3
 800a206:	2f00      	cmp	r7, #0
 800a208:	bf08      	it	eq
 800a20a:	462f      	moveq	r7, r5
 800a20c:	2d10      	cmp	r5, #16
 800a20e:	9306      	str	r3, [sp, #24]
 800a210:	46a8      	mov	r8, r5
 800a212:	bfa8      	it	ge
 800a214:	f04f 0810 	movge.w	r8, #16
 800a218:	f7f6 f974 	bl	8000504 <__aeabi_ui2d>
 800a21c:	2d09      	cmp	r5, #9
 800a21e:	4682      	mov	sl, r0
 800a220:	468b      	mov	fp, r1
 800a222:	dd13      	ble.n	800a24c <_strtod_l+0x3dc>
 800a224:	4b7b      	ldr	r3, [pc, #492]	; (800a414 <_strtod_l+0x5a4>)
 800a226:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a22a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a22e:	f7f6 f9e3 	bl	80005f8 <__aeabi_dmul>
 800a232:	4682      	mov	sl, r0
 800a234:	4648      	mov	r0, r9
 800a236:	468b      	mov	fp, r1
 800a238:	f7f6 f964 	bl	8000504 <__aeabi_ui2d>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4650      	mov	r0, sl
 800a242:	4659      	mov	r1, fp
 800a244:	f7f6 f822 	bl	800028c <__adddf3>
 800a248:	4682      	mov	sl, r0
 800a24a:	468b      	mov	fp, r1
 800a24c:	2d0f      	cmp	r5, #15
 800a24e:	dc38      	bgt.n	800a2c2 <_strtod_l+0x452>
 800a250:	9b06      	ldr	r3, [sp, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f43f ae50 	beq.w	8009ef8 <_strtod_l+0x88>
 800a258:	dd24      	ble.n	800a2a4 <_strtod_l+0x434>
 800a25a:	2b16      	cmp	r3, #22
 800a25c:	dc0b      	bgt.n	800a276 <_strtod_l+0x406>
 800a25e:	496d      	ldr	r1, [pc, #436]	; (800a414 <_strtod_l+0x5a4>)
 800a260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a264:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a268:	4652      	mov	r2, sl
 800a26a:	465b      	mov	r3, fp
 800a26c:	f7f6 f9c4 	bl	80005f8 <__aeabi_dmul>
 800a270:	4682      	mov	sl, r0
 800a272:	468b      	mov	fp, r1
 800a274:	e640      	b.n	8009ef8 <_strtod_l+0x88>
 800a276:	9a06      	ldr	r2, [sp, #24]
 800a278:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a27c:	4293      	cmp	r3, r2
 800a27e:	db20      	blt.n	800a2c2 <_strtod_l+0x452>
 800a280:	4c64      	ldr	r4, [pc, #400]	; (800a414 <_strtod_l+0x5a4>)
 800a282:	f1c5 050f 	rsb	r5, r5, #15
 800a286:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a28a:	4652      	mov	r2, sl
 800a28c:	465b      	mov	r3, fp
 800a28e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a292:	f7f6 f9b1 	bl	80005f8 <__aeabi_dmul>
 800a296:	9b06      	ldr	r3, [sp, #24]
 800a298:	1b5d      	subs	r5, r3, r5
 800a29a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a29e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2a2:	e7e3      	b.n	800a26c <_strtod_l+0x3fc>
 800a2a4:	9b06      	ldr	r3, [sp, #24]
 800a2a6:	3316      	adds	r3, #22
 800a2a8:	db0b      	blt.n	800a2c2 <_strtod_l+0x452>
 800a2aa:	9b05      	ldr	r3, [sp, #20]
 800a2ac:	1b9e      	subs	r6, r3, r6
 800a2ae:	4b59      	ldr	r3, [pc, #356]	; (800a414 <_strtod_l+0x5a4>)
 800a2b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a2b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2b8:	4650      	mov	r0, sl
 800a2ba:	4659      	mov	r1, fp
 800a2bc:	f7f6 fac6 	bl	800084c <__aeabi_ddiv>
 800a2c0:	e7d6      	b.n	800a270 <_strtod_l+0x400>
 800a2c2:	9b06      	ldr	r3, [sp, #24]
 800a2c4:	eba5 0808 	sub.w	r8, r5, r8
 800a2c8:	4498      	add	r8, r3
 800a2ca:	f1b8 0f00 	cmp.w	r8, #0
 800a2ce:	dd74      	ble.n	800a3ba <_strtod_l+0x54a>
 800a2d0:	f018 030f 	ands.w	r3, r8, #15
 800a2d4:	d00a      	beq.n	800a2ec <_strtod_l+0x47c>
 800a2d6:	494f      	ldr	r1, [pc, #316]	; (800a414 <_strtod_l+0x5a4>)
 800a2d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2dc:	4652      	mov	r2, sl
 800a2de:	465b      	mov	r3, fp
 800a2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2e4:	f7f6 f988 	bl	80005f8 <__aeabi_dmul>
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	468b      	mov	fp, r1
 800a2ec:	f038 080f 	bics.w	r8, r8, #15
 800a2f0:	d04f      	beq.n	800a392 <_strtod_l+0x522>
 800a2f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a2f6:	dd22      	ble.n	800a33e <_strtod_l+0x4ce>
 800a2f8:	2500      	movs	r5, #0
 800a2fa:	462e      	mov	r6, r5
 800a2fc:	9507      	str	r5, [sp, #28]
 800a2fe:	9505      	str	r5, [sp, #20]
 800a300:	2322      	movs	r3, #34	; 0x22
 800a302:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a41c <_strtod_l+0x5ac>
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	f04f 0a00 	mov.w	sl, #0
 800a30c:	9b07      	ldr	r3, [sp, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f43f adf2 	beq.w	8009ef8 <_strtod_l+0x88>
 800a314:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a316:	4620      	mov	r0, r4
 800a318:	f001 ffea 	bl	800c2f0 <_Bfree>
 800a31c:	9905      	ldr	r1, [sp, #20]
 800a31e:	4620      	mov	r0, r4
 800a320:	f001 ffe6 	bl	800c2f0 <_Bfree>
 800a324:	4631      	mov	r1, r6
 800a326:	4620      	mov	r0, r4
 800a328:	f001 ffe2 	bl	800c2f0 <_Bfree>
 800a32c:	9907      	ldr	r1, [sp, #28]
 800a32e:	4620      	mov	r0, r4
 800a330:	f001 ffde 	bl	800c2f0 <_Bfree>
 800a334:	4629      	mov	r1, r5
 800a336:	4620      	mov	r0, r4
 800a338:	f001 ffda 	bl	800c2f0 <_Bfree>
 800a33c:	e5dc      	b.n	8009ef8 <_strtod_l+0x88>
 800a33e:	4b36      	ldr	r3, [pc, #216]	; (800a418 <_strtod_l+0x5a8>)
 800a340:	9304      	str	r3, [sp, #16]
 800a342:	2300      	movs	r3, #0
 800a344:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a348:	4650      	mov	r0, sl
 800a34a:	4659      	mov	r1, fp
 800a34c:	4699      	mov	r9, r3
 800a34e:	f1b8 0f01 	cmp.w	r8, #1
 800a352:	dc21      	bgt.n	800a398 <_strtod_l+0x528>
 800a354:	b10b      	cbz	r3, 800a35a <_strtod_l+0x4ea>
 800a356:	4682      	mov	sl, r0
 800a358:	468b      	mov	fp, r1
 800a35a:	4b2f      	ldr	r3, [pc, #188]	; (800a418 <_strtod_l+0x5a8>)
 800a35c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a360:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a364:	4652      	mov	r2, sl
 800a366:	465b      	mov	r3, fp
 800a368:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a36c:	f7f6 f944 	bl	80005f8 <__aeabi_dmul>
 800a370:	4b2a      	ldr	r3, [pc, #168]	; (800a41c <_strtod_l+0x5ac>)
 800a372:	460a      	mov	r2, r1
 800a374:	400b      	ands	r3, r1
 800a376:	492a      	ldr	r1, [pc, #168]	; (800a420 <_strtod_l+0x5b0>)
 800a378:	428b      	cmp	r3, r1
 800a37a:	4682      	mov	sl, r0
 800a37c:	d8bc      	bhi.n	800a2f8 <_strtod_l+0x488>
 800a37e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a382:	428b      	cmp	r3, r1
 800a384:	bf86      	itte	hi
 800a386:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a424 <_strtod_l+0x5b4>
 800a38a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a38e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a392:	2300      	movs	r3, #0
 800a394:	9304      	str	r3, [sp, #16]
 800a396:	e084      	b.n	800a4a2 <_strtod_l+0x632>
 800a398:	f018 0f01 	tst.w	r8, #1
 800a39c:	d005      	beq.n	800a3aa <_strtod_l+0x53a>
 800a39e:	9b04      	ldr	r3, [sp, #16]
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f7f6 f928 	bl	80005f8 <__aeabi_dmul>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	9a04      	ldr	r2, [sp, #16]
 800a3ac:	3208      	adds	r2, #8
 800a3ae:	f109 0901 	add.w	r9, r9, #1
 800a3b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3b6:	9204      	str	r2, [sp, #16]
 800a3b8:	e7c9      	b.n	800a34e <_strtod_l+0x4de>
 800a3ba:	d0ea      	beq.n	800a392 <_strtod_l+0x522>
 800a3bc:	f1c8 0800 	rsb	r8, r8, #0
 800a3c0:	f018 020f 	ands.w	r2, r8, #15
 800a3c4:	d00a      	beq.n	800a3dc <_strtod_l+0x56c>
 800a3c6:	4b13      	ldr	r3, [pc, #76]	; (800a414 <_strtod_l+0x5a4>)
 800a3c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	4659      	mov	r1, fp
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f7f6 fa3a 	bl	800084c <__aeabi_ddiv>
 800a3d8:	4682      	mov	sl, r0
 800a3da:	468b      	mov	fp, r1
 800a3dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a3e0:	d0d7      	beq.n	800a392 <_strtod_l+0x522>
 800a3e2:	f1b8 0f1f 	cmp.w	r8, #31
 800a3e6:	dd1f      	ble.n	800a428 <_strtod_l+0x5b8>
 800a3e8:	2500      	movs	r5, #0
 800a3ea:	462e      	mov	r6, r5
 800a3ec:	9507      	str	r5, [sp, #28]
 800a3ee:	9505      	str	r5, [sp, #20]
 800a3f0:	2322      	movs	r3, #34	; 0x22
 800a3f2:	f04f 0a00 	mov.w	sl, #0
 800a3f6:	f04f 0b00 	mov.w	fp, #0
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	e786      	b.n	800a30c <_strtod_l+0x49c>
 800a3fe:	bf00      	nop
 800a400:	0800f682 	.word	0x0800f682
 800a404:	0800f6c4 	.word	0x0800f6c4
 800a408:	0800f67a 	.word	0x0800f67a
 800a40c:	0800f703 	.word	0x0800f703
 800a410:	0800f4fb 	.word	0x0800f4fb
 800a414:	0800f890 	.word	0x0800f890
 800a418:	0800f868 	.word	0x0800f868
 800a41c:	7ff00000 	.word	0x7ff00000
 800a420:	7ca00000 	.word	0x7ca00000
 800a424:	7fefffff 	.word	0x7fefffff
 800a428:	f018 0310 	ands.w	r3, r8, #16
 800a42c:	bf18      	it	ne
 800a42e:	236a      	movne	r3, #106	; 0x6a
 800a430:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a7e0 <_strtod_l+0x970>
 800a434:	9304      	str	r3, [sp, #16]
 800a436:	4650      	mov	r0, sl
 800a438:	4659      	mov	r1, fp
 800a43a:	2300      	movs	r3, #0
 800a43c:	f018 0f01 	tst.w	r8, #1
 800a440:	d004      	beq.n	800a44c <_strtod_l+0x5dc>
 800a442:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a446:	f7f6 f8d7 	bl	80005f8 <__aeabi_dmul>
 800a44a:	2301      	movs	r3, #1
 800a44c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a450:	f109 0908 	add.w	r9, r9, #8
 800a454:	d1f2      	bne.n	800a43c <_strtod_l+0x5cc>
 800a456:	b10b      	cbz	r3, 800a45c <_strtod_l+0x5ec>
 800a458:	4682      	mov	sl, r0
 800a45a:	468b      	mov	fp, r1
 800a45c:	9b04      	ldr	r3, [sp, #16]
 800a45e:	b1c3      	cbz	r3, 800a492 <_strtod_l+0x622>
 800a460:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a464:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a468:	2b00      	cmp	r3, #0
 800a46a:	4659      	mov	r1, fp
 800a46c:	dd11      	ble.n	800a492 <_strtod_l+0x622>
 800a46e:	2b1f      	cmp	r3, #31
 800a470:	f340 8124 	ble.w	800a6bc <_strtod_l+0x84c>
 800a474:	2b34      	cmp	r3, #52	; 0x34
 800a476:	bfde      	ittt	le
 800a478:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a47c:	f04f 33ff 	movle.w	r3, #4294967295
 800a480:	fa03 f202 	lslle.w	r2, r3, r2
 800a484:	f04f 0a00 	mov.w	sl, #0
 800a488:	bfcc      	ite	gt
 800a48a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a48e:	ea02 0b01 	andle.w	fp, r2, r1
 800a492:	2200      	movs	r2, #0
 800a494:	2300      	movs	r3, #0
 800a496:	4650      	mov	r0, sl
 800a498:	4659      	mov	r1, fp
 800a49a:	f7f6 fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d1a2      	bne.n	800a3e8 <_strtod_l+0x578>
 800a4a2:	9b07      	ldr	r3, [sp, #28]
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	9908      	ldr	r1, [sp, #32]
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	463a      	mov	r2, r7
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f001 ff87 	bl	800c3c0 <__s2b>
 800a4b2:	9007      	str	r0, [sp, #28]
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f43f af1f 	beq.w	800a2f8 <_strtod_l+0x488>
 800a4ba:	9b05      	ldr	r3, [sp, #20]
 800a4bc:	1b9e      	subs	r6, r3, r6
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bfb4      	ite	lt
 800a4c4:	4633      	movlt	r3, r6
 800a4c6:	2300      	movge	r3, #0
 800a4c8:	930c      	str	r3, [sp, #48]	; 0x30
 800a4ca:	9b06      	ldr	r3, [sp, #24]
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a4d2:	9312      	str	r3, [sp, #72]	; 0x48
 800a4d4:	462e      	mov	r6, r5
 800a4d6:	9b07      	ldr	r3, [sp, #28]
 800a4d8:	4620      	mov	r0, r4
 800a4da:	6859      	ldr	r1, [r3, #4]
 800a4dc:	f001 fec8 	bl	800c270 <_Balloc>
 800a4e0:	9005      	str	r0, [sp, #20]
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	f43f af0c 	beq.w	800a300 <_strtod_l+0x490>
 800a4e8:	9b07      	ldr	r3, [sp, #28]
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	3202      	adds	r2, #2
 800a4ee:	f103 010c 	add.w	r1, r3, #12
 800a4f2:	0092      	lsls	r2, r2, #2
 800a4f4:	300c      	adds	r0, #12
 800a4f6:	f7fe fad7 	bl	8008aa8 <memcpy>
 800a4fa:	ec4b ab10 	vmov	d0, sl, fp
 800a4fe:	aa1a      	add	r2, sp, #104	; 0x68
 800a500:	a919      	add	r1, sp, #100	; 0x64
 800a502:	4620      	mov	r0, r4
 800a504:	f002 faa2 	bl	800ca4c <__d2b>
 800a508:	ec4b ab18 	vmov	d8, sl, fp
 800a50c:	9018      	str	r0, [sp, #96]	; 0x60
 800a50e:	2800      	cmp	r0, #0
 800a510:	f43f aef6 	beq.w	800a300 <_strtod_l+0x490>
 800a514:	2101      	movs	r1, #1
 800a516:	4620      	mov	r0, r4
 800a518:	f001 ffec 	bl	800c4f4 <__i2b>
 800a51c:	4606      	mov	r6, r0
 800a51e:	2800      	cmp	r0, #0
 800a520:	f43f aeee 	beq.w	800a300 <_strtod_l+0x490>
 800a524:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a526:	9904      	ldr	r1, [sp, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bfab      	itete	ge
 800a52c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a52e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a530:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a532:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a536:	bfac      	ite	ge
 800a538:	eb03 0902 	addge.w	r9, r3, r2
 800a53c:	1ad7      	sublt	r7, r2, r3
 800a53e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a540:	eba3 0801 	sub.w	r8, r3, r1
 800a544:	4490      	add	r8, r2
 800a546:	4ba1      	ldr	r3, [pc, #644]	; (800a7cc <_strtod_l+0x95c>)
 800a548:	f108 38ff 	add.w	r8, r8, #4294967295
 800a54c:	4598      	cmp	r8, r3
 800a54e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a552:	f280 80c7 	bge.w	800a6e4 <_strtod_l+0x874>
 800a556:	eba3 0308 	sub.w	r3, r3, r8
 800a55a:	2b1f      	cmp	r3, #31
 800a55c:	eba2 0203 	sub.w	r2, r2, r3
 800a560:	f04f 0101 	mov.w	r1, #1
 800a564:	f300 80b1 	bgt.w	800a6ca <_strtod_l+0x85a>
 800a568:	fa01 f303 	lsl.w	r3, r1, r3
 800a56c:	930d      	str	r3, [sp, #52]	; 0x34
 800a56e:	2300      	movs	r3, #0
 800a570:	9308      	str	r3, [sp, #32]
 800a572:	eb09 0802 	add.w	r8, r9, r2
 800a576:	9b04      	ldr	r3, [sp, #16]
 800a578:	45c1      	cmp	r9, r8
 800a57a:	4417      	add	r7, r2
 800a57c:	441f      	add	r7, r3
 800a57e:	464b      	mov	r3, r9
 800a580:	bfa8      	it	ge
 800a582:	4643      	movge	r3, r8
 800a584:	42bb      	cmp	r3, r7
 800a586:	bfa8      	it	ge
 800a588:	463b      	movge	r3, r7
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfc2      	ittt	gt
 800a58e:	eba8 0803 	subgt.w	r8, r8, r3
 800a592:	1aff      	subgt	r7, r7, r3
 800a594:	eba9 0903 	subgt.w	r9, r9, r3
 800a598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dd17      	ble.n	800a5ce <_strtod_l+0x75e>
 800a59e:	4631      	mov	r1, r6
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f002 f866 	bl	800c674 <__pow5mult>
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f43f aea8 	beq.w	800a300 <_strtod_l+0x490>
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f001 ffb3 	bl	800c520 <__multiply>
 800a5ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f43f ae9f 	beq.w	800a300 <_strtod_l+0x490>
 800a5c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f001 fe93 	bl	800c2f0 <_Bfree>
 800a5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5cc:	9318      	str	r3, [sp, #96]	; 0x60
 800a5ce:	f1b8 0f00 	cmp.w	r8, #0
 800a5d2:	f300 808c 	bgt.w	800a6ee <_strtod_l+0x87e>
 800a5d6:	9b06      	ldr	r3, [sp, #24]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dd08      	ble.n	800a5ee <_strtod_l+0x77e>
 800a5dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5de:	9905      	ldr	r1, [sp, #20]
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f002 f847 	bl	800c674 <__pow5mult>
 800a5e6:	9005      	str	r0, [sp, #20]
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	f43f ae89 	beq.w	800a300 <_strtod_l+0x490>
 800a5ee:	2f00      	cmp	r7, #0
 800a5f0:	dd08      	ble.n	800a604 <_strtod_l+0x794>
 800a5f2:	9905      	ldr	r1, [sp, #20]
 800a5f4:	463a      	mov	r2, r7
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f002 f896 	bl	800c728 <__lshift>
 800a5fc:	9005      	str	r0, [sp, #20]
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f43f ae7e 	beq.w	800a300 <_strtod_l+0x490>
 800a604:	f1b9 0f00 	cmp.w	r9, #0
 800a608:	dd08      	ble.n	800a61c <_strtod_l+0x7ac>
 800a60a:	4631      	mov	r1, r6
 800a60c:	464a      	mov	r2, r9
 800a60e:	4620      	mov	r0, r4
 800a610:	f002 f88a 	bl	800c728 <__lshift>
 800a614:	4606      	mov	r6, r0
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f ae72 	beq.w	800a300 <_strtod_l+0x490>
 800a61c:	9a05      	ldr	r2, [sp, #20]
 800a61e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a620:	4620      	mov	r0, r4
 800a622:	f002 f90d 	bl	800c840 <__mdiff>
 800a626:	4605      	mov	r5, r0
 800a628:	2800      	cmp	r0, #0
 800a62a:	f43f ae69 	beq.w	800a300 <_strtod_l+0x490>
 800a62e:	68c3      	ldr	r3, [r0, #12]
 800a630:	930b      	str	r3, [sp, #44]	; 0x2c
 800a632:	2300      	movs	r3, #0
 800a634:	60c3      	str	r3, [r0, #12]
 800a636:	4631      	mov	r1, r6
 800a638:	f002 f8e6 	bl	800c808 <__mcmp>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	da60      	bge.n	800a702 <_strtod_l+0x892>
 800a640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a642:	ea53 030a 	orrs.w	r3, r3, sl
 800a646:	f040 8082 	bne.w	800a74e <_strtod_l+0x8de>
 800a64a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d17d      	bne.n	800a74e <_strtod_l+0x8de>
 800a652:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a656:	0d1b      	lsrs	r3, r3, #20
 800a658:	051b      	lsls	r3, r3, #20
 800a65a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a65e:	d976      	bls.n	800a74e <_strtod_l+0x8de>
 800a660:	696b      	ldr	r3, [r5, #20]
 800a662:	b913      	cbnz	r3, 800a66a <_strtod_l+0x7fa>
 800a664:	692b      	ldr	r3, [r5, #16]
 800a666:	2b01      	cmp	r3, #1
 800a668:	dd71      	ble.n	800a74e <_strtod_l+0x8de>
 800a66a:	4629      	mov	r1, r5
 800a66c:	2201      	movs	r2, #1
 800a66e:	4620      	mov	r0, r4
 800a670:	f002 f85a 	bl	800c728 <__lshift>
 800a674:	4631      	mov	r1, r6
 800a676:	4605      	mov	r5, r0
 800a678:	f002 f8c6 	bl	800c808 <__mcmp>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	dd66      	ble.n	800a74e <_strtod_l+0x8de>
 800a680:	9904      	ldr	r1, [sp, #16]
 800a682:	4a53      	ldr	r2, [pc, #332]	; (800a7d0 <_strtod_l+0x960>)
 800a684:	465b      	mov	r3, fp
 800a686:	2900      	cmp	r1, #0
 800a688:	f000 8081 	beq.w	800a78e <_strtod_l+0x91e>
 800a68c:	ea02 010b 	and.w	r1, r2, fp
 800a690:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a694:	dc7b      	bgt.n	800a78e <_strtod_l+0x91e>
 800a696:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a69a:	f77f aea9 	ble.w	800a3f0 <_strtod_l+0x580>
 800a69e:	4b4d      	ldr	r3, [pc, #308]	; (800a7d4 <_strtod_l+0x964>)
 800a6a0:	4650      	mov	r0, sl
 800a6a2:	4659      	mov	r1, fp
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f7f5 ffa7 	bl	80005f8 <__aeabi_dmul>
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4303      	orrs	r3, r0
 800a6ae:	bf08      	it	eq
 800a6b0:	2322      	moveq	r3, #34	; 0x22
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	468b      	mov	fp, r1
 800a6b6:	bf08      	it	eq
 800a6b8:	6023      	streq	r3, [r4, #0]
 800a6ba:	e62b      	b.n	800a314 <_strtod_l+0x4a4>
 800a6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c4:	ea03 0a0a 	and.w	sl, r3, sl
 800a6c8:	e6e3      	b.n	800a492 <_strtod_l+0x622>
 800a6ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a6ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a6d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a6d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a6da:	fa01 f308 	lsl.w	r3, r1, r8
 800a6de:	9308      	str	r3, [sp, #32]
 800a6e0:	910d      	str	r1, [sp, #52]	; 0x34
 800a6e2:	e746      	b.n	800a572 <_strtod_l+0x702>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	9308      	str	r3, [sp, #32]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a6ec:	e741      	b.n	800a572 <_strtod_l+0x702>
 800a6ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f002 f818 	bl	800c728 <__lshift>
 800a6f8:	9018      	str	r0, [sp, #96]	; 0x60
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	f47f af6b 	bne.w	800a5d6 <_strtod_l+0x766>
 800a700:	e5fe      	b.n	800a300 <_strtod_l+0x490>
 800a702:	465f      	mov	r7, fp
 800a704:	d16e      	bne.n	800a7e4 <_strtod_l+0x974>
 800a706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a708:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a70c:	b342      	cbz	r2, 800a760 <_strtod_l+0x8f0>
 800a70e:	4a32      	ldr	r2, [pc, #200]	; (800a7d8 <_strtod_l+0x968>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d128      	bne.n	800a766 <_strtod_l+0x8f6>
 800a714:	9b04      	ldr	r3, [sp, #16]
 800a716:	4651      	mov	r1, sl
 800a718:	b1eb      	cbz	r3, 800a756 <_strtod_l+0x8e6>
 800a71a:	4b2d      	ldr	r3, [pc, #180]	; (800a7d0 <_strtod_l+0x960>)
 800a71c:	403b      	ands	r3, r7
 800a71e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a722:	f04f 32ff 	mov.w	r2, #4294967295
 800a726:	d819      	bhi.n	800a75c <_strtod_l+0x8ec>
 800a728:	0d1b      	lsrs	r3, r3, #20
 800a72a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a72e:	fa02 f303 	lsl.w	r3, r2, r3
 800a732:	4299      	cmp	r1, r3
 800a734:	d117      	bne.n	800a766 <_strtod_l+0x8f6>
 800a736:	4b29      	ldr	r3, [pc, #164]	; (800a7dc <_strtod_l+0x96c>)
 800a738:	429f      	cmp	r7, r3
 800a73a:	d102      	bne.n	800a742 <_strtod_l+0x8d2>
 800a73c:	3101      	adds	r1, #1
 800a73e:	f43f addf 	beq.w	800a300 <_strtod_l+0x490>
 800a742:	4b23      	ldr	r3, [pc, #140]	; (800a7d0 <_strtod_l+0x960>)
 800a744:	403b      	ands	r3, r7
 800a746:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a74a:	f04f 0a00 	mov.w	sl, #0
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1a4      	bne.n	800a69e <_strtod_l+0x82e>
 800a754:	e5de      	b.n	800a314 <_strtod_l+0x4a4>
 800a756:	f04f 33ff 	mov.w	r3, #4294967295
 800a75a:	e7ea      	b.n	800a732 <_strtod_l+0x8c2>
 800a75c:	4613      	mov	r3, r2
 800a75e:	e7e8      	b.n	800a732 <_strtod_l+0x8c2>
 800a760:	ea53 030a 	orrs.w	r3, r3, sl
 800a764:	d08c      	beq.n	800a680 <_strtod_l+0x810>
 800a766:	9b08      	ldr	r3, [sp, #32]
 800a768:	b1db      	cbz	r3, 800a7a2 <_strtod_l+0x932>
 800a76a:	423b      	tst	r3, r7
 800a76c:	d0ef      	beq.n	800a74e <_strtod_l+0x8de>
 800a76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a770:	9a04      	ldr	r2, [sp, #16]
 800a772:	4650      	mov	r0, sl
 800a774:	4659      	mov	r1, fp
 800a776:	b1c3      	cbz	r3, 800a7aa <_strtod_l+0x93a>
 800a778:	f7ff fb5b 	bl	8009e32 <sulp>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	ec51 0b18 	vmov	r0, r1, d8
 800a784:	f7f5 fd82 	bl	800028c <__adddf3>
 800a788:	4682      	mov	sl, r0
 800a78a:	468b      	mov	fp, r1
 800a78c:	e7df      	b.n	800a74e <_strtod_l+0x8de>
 800a78e:	4013      	ands	r3, r2
 800a790:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a794:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a798:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a79c:	f04f 3aff 	mov.w	sl, #4294967295
 800a7a0:	e7d5      	b.n	800a74e <_strtod_l+0x8de>
 800a7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7a4:	ea13 0f0a 	tst.w	r3, sl
 800a7a8:	e7e0      	b.n	800a76c <_strtod_l+0x8fc>
 800a7aa:	f7ff fb42 	bl	8009e32 <sulp>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	ec51 0b18 	vmov	r0, r1, d8
 800a7b6:	f7f5 fd67 	bl	8000288 <__aeabi_dsub>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4682      	mov	sl, r0
 800a7c0:	468b      	mov	fp, r1
 800a7c2:	f7f6 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0c1      	beq.n	800a74e <_strtod_l+0x8de>
 800a7ca:	e611      	b.n	800a3f0 <_strtod_l+0x580>
 800a7cc:	fffffc02 	.word	0xfffffc02
 800a7d0:	7ff00000 	.word	0x7ff00000
 800a7d4:	39500000 	.word	0x39500000
 800a7d8:	000fffff 	.word	0x000fffff
 800a7dc:	7fefffff 	.word	0x7fefffff
 800a7e0:	0800f6d8 	.word	0x0800f6d8
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f002 f98c 	bl	800cb04 <__ratio>
 800a7ec:	ec59 8b10 	vmov	r8, r9, d0
 800a7f0:	ee10 0a10 	vmov	r0, s0
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	f7f6 f978 	bl	8000af0 <__aeabi_dcmple>
 800a800:	2800      	cmp	r0, #0
 800a802:	d07a      	beq.n	800a8fa <_strtod_l+0xa8a>
 800a804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d04a      	beq.n	800a8a0 <_strtod_l+0xa30>
 800a80a:	4b95      	ldr	r3, [pc, #596]	; (800aa60 <_strtod_l+0xbf0>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a812:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800aa60 <_strtod_l+0xbf0>
 800a816:	f04f 0800 	mov.w	r8, #0
 800a81a:	4b92      	ldr	r3, [pc, #584]	; (800aa64 <_strtod_l+0xbf4>)
 800a81c:	403b      	ands	r3, r7
 800a81e:	930d      	str	r3, [sp, #52]	; 0x34
 800a820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a822:	4b91      	ldr	r3, [pc, #580]	; (800aa68 <_strtod_l+0xbf8>)
 800a824:	429a      	cmp	r2, r3
 800a826:	f040 80b0 	bne.w	800a98a <_strtod_l+0xb1a>
 800a82a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a82e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a832:	ec4b ab10 	vmov	d0, sl, fp
 800a836:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a83a:	f002 f88b 	bl	800c954 <__ulp>
 800a83e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a842:	ec53 2b10 	vmov	r2, r3, d0
 800a846:	f7f5 fed7 	bl	80005f8 <__aeabi_dmul>
 800a84a:	4652      	mov	r2, sl
 800a84c:	465b      	mov	r3, fp
 800a84e:	f7f5 fd1d 	bl	800028c <__adddf3>
 800a852:	460b      	mov	r3, r1
 800a854:	4983      	ldr	r1, [pc, #524]	; (800aa64 <_strtod_l+0xbf4>)
 800a856:	4a85      	ldr	r2, [pc, #532]	; (800aa6c <_strtod_l+0xbfc>)
 800a858:	4019      	ands	r1, r3
 800a85a:	4291      	cmp	r1, r2
 800a85c:	4682      	mov	sl, r0
 800a85e:	d960      	bls.n	800a922 <_strtod_l+0xab2>
 800a860:	ee18 3a90 	vmov	r3, s17
 800a864:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a868:	4293      	cmp	r3, r2
 800a86a:	d104      	bne.n	800a876 <_strtod_l+0xa06>
 800a86c:	ee18 3a10 	vmov	r3, s16
 800a870:	3301      	adds	r3, #1
 800a872:	f43f ad45 	beq.w	800a300 <_strtod_l+0x490>
 800a876:	f8df b200 	ldr.w	fp, [pc, #512]	; 800aa78 <_strtod_l+0xc08>
 800a87a:	f04f 3aff 	mov.w	sl, #4294967295
 800a87e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a880:	4620      	mov	r0, r4
 800a882:	f001 fd35 	bl	800c2f0 <_Bfree>
 800a886:	9905      	ldr	r1, [sp, #20]
 800a888:	4620      	mov	r0, r4
 800a88a:	f001 fd31 	bl	800c2f0 <_Bfree>
 800a88e:	4631      	mov	r1, r6
 800a890:	4620      	mov	r0, r4
 800a892:	f001 fd2d 	bl	800c2f0 <_Bfree>
 800a896:	4629      	mov	r1, r5
 800a898:	4620      	mov	r0, r4
 800a89a:	f001 fd29 	bl	800c2f0 <_Bfree>
 800a89e:	e61a      	b.n	800a4d6 <_strtod_l+0x666>
 800a8a0:	f1ba 0f00 	cmp.w	sl, #0
 800a8a4:	d11b      	bne.n	800a8de <_strtod_l+0xa6e>
 800a8a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8aa:	b9f3      	cbnz	r3, 800a8ea <_strtod_l+0xa7a>
 800a8ac:	4b6c      	ldr	r3, [pc, #432]	; (800aa60 <_strtod_l+0xbf0>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	f7f6 f912 	bl	8000adc <__aeabi_dcmplt>
 800a8b8:	b9d0      	cbnz	r0, 800a8f0 <_strtod_l+0xa80>
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4649      	mov	r1, r9
 800a8be:	4b6c      	ldr	r3, [pc, #432]	; (800aa70 <_strtod_l+0xc00>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f7f5 fe99 	bl	80005f8 <__aeabi_dmul>
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	4689      	mov	r9, r1
 800a8ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a8ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a8d2:	9315      	str	r3, [sp, #84]	; 0x54
 800a8d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a8d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a8dc:	e79d      	b.n	800a81a <_strtod_l+0x9aa>
 800a8de:	f1ba 0f01 	cmp.w	sl, #1
 800a8e2:	d102      	bne.n	800a8ea <_strtod_l+0xa7a>
 800a8e4:	2f00      	cmp	r7, #0
 800a8e6:	f43f ad83 	beq.w	800a3f0 <_strtod_l+0x580>
 800a8ea:	4b62      	ldr	r3, [pc, #392]	; (800aa74 <_strtod_l+0xc04>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	e78e      	b.n	800a80e <_strtod_l+0x99e>
 800a8f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800aa70 <_strtod_l+0xc00>
 800a8f4:	f04f 0800 	mov.w	r8, #0
 800a8f8:	e7e7      	b.n	800a8ca <_strtod_l+0xa5a>
 800a8fa:	4b5d      	ldr	r3, [pc, #372]	; (800aa70 <_strtod_l+0xc00>)
 800a8fc:	4640      	mov	r0, r8
 800a8fe:	4649      	mov	r1, r9
 800a900:	2200      	movs	r2, #0
 800a902:	f7f5 fe79 	bl	80005f8 <__aeabi_dmul>
 800a906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a908:	4680      	mov	r8, r0
 800a90a:	4689      	mov	r9, r1
 800a90c:	b933      	cbnz	r3, 800a91c <_strtod_l+0xaac>
 800a90e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a912:	900e      	str	r0, [sp, #56]	; 0x38
 800a914:	930f      	str	r3, [sp, #60]	; 0x3c
 800a916:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a91a:	e7dd      	b.n	800a8d8 <_strtod_l+0xa68>
 800a91c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a920:	e7f9      	b.n	800a916 <_strtod_l+0xaa6>
 800a922:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a926:	9b04      	ldr	r3, [sp, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1a8      	bne.n	800a87e <_strtod_l+0xa0e>
 800a92c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a932:	0d1b      	lsrs	r3, r3, #20
 800a934:	051b      	lsls	r3, r3, #20
 800a936:	429a      	cmp	r2, r3
 800a938:	d1a1      	bne.n	800a87e <_strtod_l+0xa0e>
 800a93a:	4640      	mov	r0, r8
 800a93c:	4649      	mov	r1, r9
 800a93e:	f7f6 f9bb 	bl	8000cb8 <__aeabi_d2lz>
 800a942:	f7f5 fe2b 	bl	800059c <__aeabi_l2d>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4640      	mov	r0, r8
 800a94c:	4649      	mov	r1, r9
 800a94e:	f7f5 fc9b 	bl	8000288 <__aeabi_dsub>
 800a952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a958:	ea43 030a 	orr.w	r3, r3, sl
 800a95c:	4313      	orrs	r3, r2
 800a95e:	4680      	mov	r8, r0
 800a960:	4689      	mov	r9, r1
 800a962:	d055      	beq.n	800aa10 <_strtod_l+0xba0>
 800a964:	a336      	add	r3, pc, #216	; (adr r3, 800aa40 <_strtod_l+0xbd0>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	f7f6 f8b7 	bl	8000adc <__aeabi_dcmplt>
 800a96e:	2800      	cmp	r0, #0
 800a970:	f47f acd0 	bne.w	800a314 <_strtod_l+0x4a4>
 800a974:	a334      	add	r3, pc, #208	; (adr r3, 800aa48 <_strtod_l+0xbd8>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	4640      	mov	r0, r8
 800a97c:	4649      	mov	r1, r9
 800a97e:	f7f6 f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 800a982:	2800      	cmp	r0, #0
 800a984:	f43f af7b 	beq.w	800a87e <_strtod_l+0xa0e>
 800a988:	e4c4      	b.n	800a314 <_strtod_l+0x4a4>
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	b333      	cbz	r3, 800a9dc <_strtod_l+0xb6c>
 800a98e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a990:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a994:	d822      	bhi.n	800a9dc <_strtod_l+0xb6c>
 800a996:	a32e      	add	r3, pc, #184	; (adr r3, 800aa50 <_strtod_l+0xbe0>)
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	4640      	mov	r0, r8
 800a99e:	4649      	mov	r1, r9
 800a9a0:	f7f6 f8a6 	bl	8000af0 <__aeabi_dcmple>
 800a9a4:	b1a0      	cbz	r0, 800a9d0 <_strtod_l+0xb60>
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	f7f6 f8fd 	bl	8000ba8 <__aeabi_d2uiz>
 800a9ae:	2801      	cmp	r0, #1
 800a9b0:	bf38      	it	cc
 800a9b2:	2001      	movcc	r0, #1
 800a9b4:	f7f5 fda6 	bl	8000504 <__aeabi_ui2d>
 800a9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ba:	4680      	mov	r8, r0
 800a9bc:	4689      	mov	r9, r1
 800a9be:	bb23      	cbnz	r3, 800aa0a <_strtod_l+0xb9a>
 800a9c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9c4:	9010      	str	r0, [sp, #64]	; 0x40
 800a9c6:	9311      	str	r3, [sp, #68]	; 0x44
 800a9c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a9d8:	1a9b      	subs	r3, r3, r2
 800a9da:	9309      	str	r3, [sp, #36]	; 0x24
 800a9dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9e0:	eeb0 0a48 	vmov.f32	s0, s16
 800a9e4:	eef0 0a68 	vmov.f32	s1, s17
 800a9e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9ec:	f001 ffb2 	bl	800c954 <__ulp>
 800a9f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9f4:	ec53 2b10 	vmov	r2, r3, d0
 800a9f8:	f7f5 fdfe 	bl	80005f8 <__aeabi_dmul>
 800a9fc:	ec53 2b18 	vmov	r2, r3, d8
 800aa00:	f7f5 fc44 	bl	800028c <__adddf3>
 800aa04:	4682      	mov	sl, r0
 800aa06:	468b      	mov	fp, r1
 800aa08:	e78d      	b.n	800a926 <_strtod_l+0xab6>
 800aa0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800aa0e:	e7db      	b.n	800a9c8 <_strtod_l+0xb58>
 800aa10:	a311      	add	r3, pc, #68	; (adr r3, 800aa58 <_strtod_l+0xbe8>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	f7f6 f861 	bl	8000adc <__aeabi_dcmplt>
 800aa1a:	e7b2      	b.n	800a982 <_strtod_l+0xb12>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa24:	6013      	str	r3, [r2, #0]
 800aa26:	f7ff ba6b 	b.w	8009f00 <_strtod_l+0x90>
 800aa2a:	2a65      	cmp	r2, #101	; 0x65
 800aa2c:	f43f ab5f 	beq.w	800a0ee <_strtod_l+0x27e>
 800aa30:	2a45      	cmp	r2, #69	; 0x45
 800aa32:	f43f ab5c 	beq.w	800a0ee <_strtod_l+0x27e>
 800aa36:	2301      	movs	r3, #1
 800aa38:	f7ff bb94 	b.w	800a164 <_strtod_l+0x2f4>
 800aa3c:	f3af 8000 	nop.w
 800aa40:	94a03595 	.word	0x94a03595
 800aa44:	3fdfffff 	.word	0x3fdfffff
 800aa48:	35afe535 	.word	0x35afe535
 800aa4c:	3fe00000 	.word	0x3fe00000
 800aa50:	ffc00000 	.word	0xffc00000
 800aa54:	41dfffff 	.word	0x41dfffff
 800aa58:	94a03595 	.word	0x94a03595
 800aa5c:	3fcfffff 	.word	0x3fcfffff
 800aa60:	3ff00000 	.word	0x3ff00000
 800aa64:	7ff00000 	.word	0x7ff00000
 800aa68:	7fe00000 	.word	0x7fe00000
 800aa6c:	7c9fffff 	.word	0x7c9fffff
 800aa70:	3fe00000 	.word	0x3fe00000
 800aa74:	bff00000 	.word	0xbff00000
 800aa78:	7fefffff 	.word	0x7fefffff

0800aa7c <_strtod_r>:
 800aa7c:	4b01      	ldr	r3, [pc, #4]	; (800aa84 <_strtod_r+0x8>)
 800aa7e:	f7ff b9f7 	b.w	8009e70 <_strtod_l>
 800aa82:	bf00      	nop
 800aa84:	20000074 	.word	0x20000074

0800aa88 <_strtol_l.constprop.0>:
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8e:	d001      	beq.n	800aa94 <_strtol_l.constprop.0+0xc>
 800aa90:	2b24      	cmp	r3, #36	; 0x24
 800aa92:	d906      	bls.n	800aaa2 <_strtol_l.constprop.0+0x1a>
 800aa94:	f7fd fd40 	bl	8008518 <__errno>
 800aa98:	2316      	movs	r3, #22
 800aa9a:	6003      	str	r3, [r0, #0]
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ab88 <_strtol_l.constprop.0+0x100>
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	462e      	mov	r6, r5
 800aaaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaae:	f814 700c 	ldrb.w	r7, [r4, ip]
 800aab2:	f017 0708 	ands.w	r7, r7, #8
 800aab6:	d1f7      	bne.n	800aaa8 <_strtol_l.constprop.0+0x20>
 800aab8:	2c2d      	cmp	r4, #45	; 0x2d
 800aaba:	d132      	bne.n	800ab22 <_strtol_l.constprop.0+0x9a>
 800aabc:	782c      	ldrb	r4, [r5, #0]
 800aabe:	2701      	movs	r7, #1
 800aac0:	1cb5      	adds	r5, r6, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d05b      	beq.n	800ab7e <_strtol_l.constprop.0+0xf6>
 800aac6:	2b10      	cmp	r3, #16
 800aac8:	d109      	bne.n	800aade <_strtol_l.constprop.0+0x56>
 800aaca:	2c30      	cmp	r4, #48	; 0x30
 800aacc:	d107      	bne.n	800aade <_strtol_l.constprop.0+0x56>
 800aace:	782c      	ldrb	r4, [r5, #0]
 800aad0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aad4:	2c58      	cmp	r4, #88	; 0x58
 800aad6:	d14d      	bne.n	800ab74 <_strtol_l.constprop.0+0xec>
 800aad8:	786c      	ldrb	r4, [r5, #1]
 800aada:	2310      	movs	r3, #16
 800aadc:	3502      	adds	r5, #2
 800aade:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aae2:	f108 38ff 	add.w	r8, r8, #4294967295
 800aae6:	f04f 0c00 	mov.w	ip, #0
 800aaea:	fbb8 f9f3 	udiv	r9, r8, r3
 800aaee:	4666      	mov	r6, ip
 800aaf0:	fb03 8a19 	mls	sl, r3, r9, r8
 800aaf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aaf8:	f1be 0f09 	cmp.w	lr, #9
 800aafc:	d816      	bhi.n	800ab2c <_strtol_l.constprop.0+0xa4>
 800aafe:	4674      	mov	r4, lr
 800ab00:	42a3      	cmp	r3, r4
 800ab02:	dd24      	ble.n	800ab4e <_strtol_l.constprop.0+0xc6>
 800ab04:	f1bc 0f00 	cmp.w	ip, #0
 800ab08:	db1e      	blt.n	800ab48 <_strtol_l.constprop.0+0xc0>
 800ab0a:	45b1      	cmp	r9, r6
 800ab0c:	d31c      	bcc.n	800ab48 <_strtol_l.constprop.0+0xc0>
 800ab0e:	d101      	bne.n	800ab14 <_strtol_l.constprop.0+0x8c>
 800ab10:	45a2      	cmp	sl, r4
 800ab12:	db19      	blt.n	800ab48 <_strtol_l.constprop.0+0xc0>
 800ab14:	fb06 4603 	mla	r6, r6, r3, r4
 800ab18:	f04f 0c01 	mov.w	ip, #1
 800ab1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab20:	e7e8      	b.n	800aaf4 <_strtol_l.constprop.0+0x6c>
 800ab22:	2c2b      	cmp	r4, #43	; 0x2b
 800ab24:	bf04      	itt	eq
 800ab26:	782c      	ldrbeq	r4, [r5, #0]
 800ab28:	1cb5      	addeq	r5, r6, #2
 800ab2a:	e7ca      	b.n	800aac2 <_strtol_l.constprop.0+0x3a>
 800ab2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ab30:	f1be 0f19 	cmp.w	lr, #25
 800ab34:	d801      	bhi.n	800ab3a <_strtol_l.constprop.0+0xb2>
 800ab36:	3c37      	subs	r4, #55	; 0x37
 800ab38:	e7e2      	b.n	800ab00 <_strtol_l.constprop.0+0x78>
 800ab3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ab3e:	f1be 0f19 	cmp.w	lr, #25
 800ab42:	d804      	bhi.n	800ab4e <_strtol_l.constprop.0+0xc6>
 800ab44:	3c57      	subs	r4, #87	; 0x57
 800ab46:	e7db      	b.n	800ab00 <_strtol_l.constprop.0+0x78>
 800ab48:	f04f 3cff 	mov.w	ip, #4294967295
 800ab4c:	e7e6      	b.n	800ab1c <_strtol_l.constprop.0+0x94>
 800ab4e:	f1bc 0f00 	cmp.w	ip, #0
 800ab52:	da05      	bge.n	800ab60 <_strtol_l.constprop.0+0xd8>
 800ab54:	2322      	movs	r3, #34	; 0x22
 800ab56:	6003      	str	r3, [r0, #0]
 800ab58:	4646      	mov	r6, r8
 800ab5a:	b942      	cbnz	r2, 800ab6e <_strtol_l.constprop.0+0xe6>
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	e79e      	b.n	800aa9e <_strtol_l.constprop.0+0x16>
 800ab60:	b107      	cbz	r7, 800ab64 <_strtol_l.constprop.0+0xdc>
 800ab62:	4276      	negs	r6, r6
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	d0f9      	beq.n	800ab5c <_strtol_l.constprop.0+0xd4>
 800ab68:	f1bc 0f00 	cmp.w	ip, #0
 800ab6c:	d000      	beq.n	800ab70 <_strtol_l.constprop.0+0xe8>
 800ab6e:	1e69      	subs	r1, r5, #1
 800ab70:	6011      	str	r1, [r2, #0]
 800ab72:	e7f3      	b.n	800ab5c <_strtol_l.constprop.0+0xd4>
 800ab74:	2430      	movs	r4, #48	; 0x30
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1b1      	bne.n	800aade <_strtol_l.constprop.0+0x56>
 800ab7a:	2308      	movs	r3, #8
 800ab7c:	e7af      	b.n	800aade <_strtol_l.constprop.0+0x56>
 800ab7e:	2c30      	cmp	r4, #48	; 0x30
 800ab80:	d0a5      	beq.n	800aace <_strtol_l.constprop.0+0x46>
 800ab82:	230a      	movs	r3, #10
 800ab84:	e7ab      	b.n	800aade <_strtol_l.constprop.0+0x56>
 800ab86:	bf00      	nop
 800ab88:	0800f4fd 	.word	0x0800f4fd

0800ab8c <_strtol_r>:
 800ab8c:	f7ff bf7c 	b.w	800aa88 <_strtol_l.constprop.0>

0800ab90 <__swbuf_r>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	460e      	mov	r6, r1
 800ab94:	4614      	mov	r4, r2
 800ab96:	4605      	mov	r5, r0
 800ab98:	b118      	cbz	r0, 800aba2 <__swbuf_r+0x12>
 800ab9a:	6983      	ldr	r3, [r0, #24]
 800ab9c:	b90b      	cbnz	r3, 800aba2 <__swbuf_r+0x12>
 800ab9e:	f7fd fded 	bl	800877c <__sinit>
 800aba2:	4b21      	ldr	r3, [pc, #132]	; (800ac28 <__swbuf_r+0x98>)
 800aba4:	429c      	cmp	r4, r3
 800aba6:	d12b      	bne.n	800ac00 <__swbuf_r+0x70>
 800aba8:	686c      	ldr	r4, [r5, #4]
 800abaa:	69a3      	ldr	r3, [r4, #24]
 800abac:	60a3      	str	r3, [r4, #8]
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	071a      	lsls	r2, r3, #28
 800abb2:	d52f      	bpl.n	800ac14 <__swbuf_r+0x84>
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	b36b      	cbz	r3, 800ac14 <__swbuf_r+0x84>
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	6820      	ldr	r0, [r4, #0]
 800abbc:	1ac0      	subs	r0, r0, r3
 800abbe:	6963      	ldr	r3, [r4, #20]
 800abc0:	b2f6      	uxtb	r6, r6
 800abc2:	4283      	cmp	r3, r0
 800abc4:	4637      	mov	r7, r6
 800abc6:	dc04      	bgt.n	800abd2 <__swbuf_r+0x42>
 800abc8:	4621      	mov	r1, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	f7fd fd30 	bl	8008630 <_fflush_r>
 800abd0:	bb30      	cbnz	r0, 800ac20 <__swbuf_r+0x90>
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	60a3      	str	r3, [r4, #8]
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	701e      	strb	r6, [r3, #0]
 800abe0:	6963      	ldr	r3, [r4, #20]
 800abe2:	3001      	adds	r0, #1
 800abe4:	4283      	cmp	r3, r0
 800abe6:	d004      	beq.n	800abf2 <__swbuf_r+0x62>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	07db      	lsls	r3, r3, #31
 800abec:	d506      	bpl.n	800abfc <__swbuf_r+0x6c>
 800abee:	2e0a      	cmp	r6, #10
 800abf0:	d104      	bne.n	800abfc <__swbuf_r+0x6c>
 800abf2:	4621      	mov	r1, r4
 800abf4:	4628      	mov	r0, r5
 800abf6:	f7fd fd1b 	bl	8008630 <_fflush_r>
 800abfa:	b988      	cbnz	r0, 800ac20 <__swbuf_r+0x90>
 800abfc:	4638      	mov	r0, r7
 800abfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <__swbuf_r+0x9c>)
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d101      	bne.n	800ac0a <__swbuf_r+0x7a>
 800ac06:	68ac      	ldr	r4, [r5, #8]
 800ac08:	e7cf      	b.n	800abaa <__swbuf_r+0x1a>
 800ac0a:	4b09      	ldr	r3, [pc, #36]	; (800ac30 <__swbuf_r+0xa0>)
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	bf08      	it	eq
 800ac10:	68ec      	ldreq	r4, [r5, #12]
 800ac12:	e7ca      	b.n	800abaa <__swbuf_r+0x1a>
 800ac14:	4621      	mov	r1, r4
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 f81e 	bl	800ac58 <__swsetup_r>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d0cb      	beq.n	800abb8 <__swbuf_r+0x28>
 800ac20:	f04f 37ff 	mov.w	r7, #4294967295
 800ac24:	e7ea      	b.n	800abfc <__swbuf_r+0x6c>
 800ac26:	bf00      	nop
 800ac28:	0800f620 	.word	0x0800f620
 800ac2c:	0800f640 	.word	0x0800f640
 800ac30:	0800f600 	.word	0x0800f600

0800ac34 <_write_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4d07      	ldr	r5, [pc, #28]	; (800ac54 <_write_r+0x20>)
 800ac38:	4604      	mov	r4, r0
 800ac3a:	4608      	mov	r0, r1
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	2200      	movs	r2, #0
 800ac40:	602a      	str	r2, [r5, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	f7f6 fb57 	bl	80012f6 <_write>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d102      	bne.n	800ac52 <_write_r+0x1e>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	b103      	cbz	r3, 800ac52 <_write_r+0x1e>
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	20000ee8 	.word	0x20000ee8

0800ac58 <__swsetup_r>:
 800ac58:	4b32      	ldr	r3, [pc, #200]	; (800ad24 <__swsetup_r+0xcc>)
 800ac5a:	b570      	push	{r4, r5, r6, lr}
 800ac5c:	681d      	ldr	r5, [r3, #0]
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460c      	mov	r4, r1
 800ac62:	b125      	cbz	r5, 800ac6e <__swsetup_r+0x16>
 800ac64:	69ab      	ldr	r3, [r5, #24]
 800ac66:	b913      	cbnz	r3, 800ac6e <__swsetup_r+0x16>
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f7fd fd87 	bl	800877c <__sinit>
 800ac6e:	4b2e      	ldr	r3, [pc, #184]	; (800ad28 <__swsetup_r+0xd0>)
 800ac70:	429c      	cmp	r4, r3
 800ac72:	d10f      	bne.n	800ac94 <__swsetup_r+0x3c>
 800ac74:	686c      	ldr	r4, [r5, #4]
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac7c:	0719      	lsls	r1, r3, #28
 800ac7e:	d42c      	bmi.n	800acda <__swsetup_r+0x82>
 800ac80:	06dd      	lsls	r5, r3, #27
 800ac82:	d411      	bmi.n	800aca8 <__swsetup_r+0x50>
 800ac84:	2309      	movs	r3, #9
 800ac86:	6033      	str	r3, [r6, #0]
 800ac88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac8c:	81a3      	strh	r3, [r4, #12]
 800ac8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac92:	e03e      	b.n	800ad12 <__swsetup_r+0xba>
 800ac94:	4b25      	ldr	r3, [pc, #148]	; (800ad2c <__swsetup_r+0xd4>)
 800ac96:	429c      	cmp	r4, r3
 800ac98:	d101      	bne.n	800ac9e <__swsetup_r+0x46>
 800ac9a:	68ac      	ldr	r4, [r5, #8]
 800ac9c:	e7eb      	b.n	800ac76 <__swsetup_r+0x1e>
 800ac9e:	4b24      	ldr	r3, [pc, #144]	; (800ad30 <__swsetup_r+0xd8>)
 800aca0:	429c      	cmp	r4, r3
 800aca2:	bf08      	it	eq
 800aca4:	68ec      	ldreq	r4, [r5, #12]
 800aca6:	e7e6      	b.n	800ac76 <__swsetup_r+0x1e>
 800aca8:	0758      	lsls	r0, r3, #29
 800acaa:	d512      	bpl.n	800acd2 <__swsetup_r+0x7a>
 800acac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acae:	b141      	cbz	r1, 800acc2 <__swsetup_r+0x6a>
 800acb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb4:	4299      	cmp	r1, r3
 800acb6:	d002      	beq.n	800acbe <__swsetup_r+0x66>
 800acb8:	4630      	mov	r0, r6
 800acba:	f7fd ff3b 	bl	8008b34 <_free_r>
 800acbe:	2300      	movs	r3, #0
 800acc0:	6363      	str	r3, [r4, #52]	; 0x34
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	2300      	movs	r3, #0
 800accc:	6063      	str	r3, [r4, #4]
 800acce:	6923      	ldr	r3, [r4, #16]
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	f043 0308 	orr.w	r3, r3, #8
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	b94b      	cbnz	r3, 800acf2 <__swsetup_r+0x9a>
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ace4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace8:	d003      	beq.n	800acf2 <__swsetup_r+0x9a>
 800acea:	4621      	mov	r1, r4
 800acec:	4630      	mov	r0, r6
 800acee:	f001 fa61 	bl	800c1b4 <__smakebuf_r>
 800acf2:	89a0      	ldrh	r0, [r4, #12]
 800acf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acf8:	f010 0301 	ands.w	r3, r0, #1
 800acfc:	d00a      	beq.n	800ad14 <__swsetup_r+0xbc>
 800acfe:	2300      	movs	r3, #0
 800ad00:	60a3      	str	r3, [r4, #8]
 800ad02:	6963      	ldr	r3, [r4, #20]
 800ad04:	425b      	negs	r3, r3
 800ad06:	61a3      	str	r3, [r4, #24]
 800ad08:	6923      	ldr	r3, [r4, #16]
 800ad0a:	b943      	cbnz	r3, 800ad1e <__swsetup_r+0xc6>
 800ad0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad10:	d1ba      	bne.n	800ac88 <__swsetup_r+0x30>
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	0781      	lsls	r1, r0, #30
 800ad16:	bf58      	it	pl
 800ad18:	6963      	ldrpl	r3, [r4, #20]
 800ad1a:	60a3      	str	r3, [r4, #8]
 800ad1c:	e7f4      	b.n	800ad08 <__swsetup_r+0xb0>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	e7f7      	b.n	800ad12 <__swsetup_r+0xba>
 800ad22:	bf00      	nop
 800ad24:	2000000c 	.word	0x2000000c
 800ad28:	0800f620 	.word	0x0800f620
 800ad2c:	0800f640 	.word	0x0800f640
 800ad30:	0800f600 	.word	0x0800f600

0800ad34 <abort>:
 800ad34:	b508      	push	{r3, lr}
 800ad36:	2006      	movs	r0, #6
 800ad38:	f002 f92a 	bl	800cf90 <raise>
 800ad3c:	2001      	movs	r0, #1
 800ad3e:	f7f6 fab3 	bl	80012a8 <_exit>
	...

0800ad44 <_close_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d06      	ldr	r5, [pc, #24]	; (800ad60 <_close_r+0x1c>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7f6 faed 	bl	800132e <_close>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_close_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_close_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	20000ee8 	.word	0x20000ee8

0800ad64 <quorem>:
 800ad64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	6903      	ldr	r3, [r0, #16]
 800ad6a:	690c      	ldr	r4, [r1, #16]
 800ad6c:	42a3      	cmp	r3, r4
 800ad6e:	4607      	mov	r7, r0
 800ad70:	f2c0 8081 	blt.w	800ae76 <quorem+0x112>
 800ad74:	3c01      	subs	r4, #1
 800ad76:	f101 0814 	add.w	r8, r1, #20
 800ad7a:	f100 0514 	add.w	r5, r0, #20
 800ad7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad9c:	d331      	bcc.n	800ae02 <quorem+0x9e>
 800ad9e:	f04f 0e00 	mov.w	lr, #0
 800ada2:	4640      	mov	r0, r8
 800ada4:	46ac      	mov	ip, r5
 800ada6:	46f2      	mov	sl, lr
 800ada8:	f850 2b04 	ldr.w	r2, [r0], #4
 800adac:	b293      	uxth	r3, r2
 800adae:	fb06 e303 	mla	r3, r6, r3, lr
 800adb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	ebaa 0303 	sub.w	r3, sl, r3
 800adbc:	f8dc a000 	ldr.w	sl, [ip]
 800adc0:	0c12      	lsrs	r2, r2, #16
 800adc2:	fa13 f38a 	uxtah	r3, r3, sl
 800adc6:	fb06 e202 	mla	r2, r6, r2, lr
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	9b00      	ldr	r3, [sp, #0]
 800adce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800add2:	b292      	uxth	r2, r2
 800add4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800add8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800addc:	f8bd 3000 	ldrh.w	r3, [sp]
 800ade0:	4581      	cmp	r9, r0
 800ade2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ade6:	f84c 3b04 	str.w	r3, [ip], #4
 800adea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adee:	d2db      	bcs.n	800ada8 <quorem+0x44>
 800adf0:	f855 300b 	ldr.w	r3, [r5, fp]
 800adf4:	b92b      	cbnz	r3, 800ae02 <quorem+0x9e>
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	3b04      	subs	r3, #4
 800adfa:	429d      	cmp	r5, r3
 800adfc:	461a      	mov	r2, r3
 800adfe:	d32e      	bcc.n	800ae5e <quorem+0xfa>
 800ae00:	613c      	str	r4, [r7, #16]
 800ae02:	4638      	mov	r0, r7
 800ae04:	f001 fd00 	bl	800c808 <__mcmp>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	db24      	blt.n	800ae56 <quorem+0xf2>
 800ae0c:	3601      	adds	r6, #1
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f04f 0c00 	mov.w	ip, #0
 800ae14:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae18:	f8d0 e000 	ldr.w	lr, [r0]
 800ae1c:	b293      	uxth	r3, r2
 800ae1e:	ebac 0303 	sub.w	r3, ip, r3
 800ae22:	0c12      	lsrs	r2, r2, #16
 800ae24:	fa13 f38e 	uxtah	r3, r3, lr
 800ae28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae36:	45c1      	cmp	r9, r8
 800ae38:	f840 3b04 	str.w	r3, [r0], #4
 800ae3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae40:	d2e8      	bcs.n	800ae14 <quorem+0xb0>
 800ae42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae4a:	b922      	cbnz	r2, 800ae56 <quorem+0xf2>
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	429d      	cmp	r5, r3
 800ae50:	461a      	mov	r2, r3
 800ae52:	d30a      	bcc.n	800ae6a <quorem+0x106>
 800ae54:	613c      	str	r4, [r7, #16]
 800ae56:	4630      	mov	r0, r6
 800ae58:	b003      	add	sp, #12
 800ae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5e:	6812      	ldr	r2, [r2, #0]
 800ae60:	3b04      	subs	r3, #4
 800ae62:	2a00      	cmp	r2, #0
 800ae64:	d1cc      	bne.n	800ae00 <quorem+0x9c>
 800ae66:	3c01      	subs	r4, #1
 800ae68:	e7c7      	b.n	800adfa <quorem+0x96>
 800ae6a:	6812      	ldr	r2, [r2, #0]
 800ae6c:	3b04      	subs	r3, #4
 800ae6e:	2a00      	cmp	r2, #0
 800ae70:	d1f0      	bne.n	800ae54 <quorem+0xf0>
 800ae72:	3c01      	subs	r4, #1
 800ae74:	e7eb      	b.n	800ae4e <quorem+0xea>
 800ae76:	2000      	movs	r0, #0
 800ae78:	e7ee      	b.n	800ae58 <quorem+0xf4>
 800ae7a:	0000      	movs	r0, r0
 800ae7c:	0000      	movs	r0, r0
	...

0800ae80 <_dtoa_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	ed2d 8b04 	vpush	{d8-d9}
 800ae88:	ec57 6b10 	vmov	r6, r7, d0
 800ae8c:	b093      	sub	sp, #76	; 0x4c
 800ae8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae94:	9106      	str	r1, [sp, #24]
 800ae96:	ee10 aa10 	vmov	sl, s0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae9e:	930c      	str	r3, [sp, #48]	; 0x30
 800aea0:	46bb      	mov	fp, r7
 800aea2:	b975      	cbnz	r5, 800aec2 <_dtoa_r+0x42>
 800aea4:	2010      	movs	r0, #16
 800aea6:	f7fd fdef 	bl	8008a88 <malloc>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	6260      	str	r0, [r4, #36]	; 0x24
 800aeae:	b920      	cbnz	r0, 800aeba <_dtoa_r+0x3a>
 800aeb0:	4ba7      	ldr	r3, [pc, #668]	; (800b150 <_dtoa_r+0x2d0>)
 800aeb2:	21ea      	movs	r1, #234	; 0xea
 800aeb4:	48a7      	ldr	r0, [pc, #668]	; (800b154 <_dtoa_r+0x2d4>)
 800aeb6:	f7fd fb09 	bl	80084cc <__assert_func>
 800aeba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aebe:	6005      	str	r5, [r0, #0]
 800aec0:	60c5      	str	r5, [r0, #12]
 800aec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aec4:	6819      	ldr	r1, [r3, #0]
 800aec6:	b151      	cbz	r1, 800aede <_dtoa_r+0x5e>
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	604a      	str	r2, [r1, #4]
 800aecc:	2301      	movs	r3, #1
 800aece:	4093      	lsls	r3, r2
 800aed0:	608b      	str	r3, [r1, #8]
 800aed2:	4620      	mov	r0, r4
 800aed4:	f001 fa0c 	bl	800c2f0 <_Bfree>
 800aed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	1e3b      	subs	r3, r7, #0
 800aee0:	bfaa      	itet	ge
 800aee2:	2300      	movge	r3, #0
 800aee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aee8:	f8c8 3000 	strge.w	r3, [r8]
 800aeec:	4b9a      	ldr	r3, [pc, #616]	; (800b158 <_dtoa_r+0x2d8>)
 800aeee:	bfbc      	itt	lt
 800aef0:	2201      	movlt	r2, #1
 800aef2:	f8c8 2000 	strlt.w	r2, [r8]
 800aef6:	ea33 030b 	bics.w	r3, r3, fp
 800aefa:	d11b      	bne.n	800af34 <_dtoa_r+0xb4>
 800aefc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aefe:	f242 730f 	movw	r3, #9999	; 0x270f
 800af02:	6013      	str	r3, [r2, #0]
 800af04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af08:	4333      	orrs	r3, r6
 800af0a:	f000 8592 	beq.w	800ba32 <_dtoa_r+0xbb2>
 800af0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af10:	b963      	cbnz	r3, 800af2c <_dtoa_r+0xac>
 800af12:	4b92      	ldr	r3, [pc, #584]	; (800b15c <_dtoa_r+0x2dc>)
 800af14:	e022      	b.n	800af5c <_dtoa_r+0xdc>
 800af16:	4b92      	ldr	r3, [pc, #584]	; (800b160 <_dtoa_r+0x2e0>)
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	3308      	adds	r3, #8
 800af1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	9801      	ldr	r0, [sp, #4]
 800af22:	b013      	add	sp, #76	; 0x4c
 800af24:	ecbd 8b04 	vpop	{d8-d9}
 800af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2c:	4b8b      	ldr	r3, [pc, #556]	; (800b15c <_dtoa_r+0x2dc>)
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	3303      	adds	r3, #3
 800af32:	e7f3      	b.n	800af1c <_dtoa_r+0x9c>
 800af34:	2200      	movs	r2, #0
 800af36:	2300      	movs	r3, #0
 800af38:	4650      	mov	r0, sl
 800af3a:	4659      	mov	r1, fp
 800af3c:	f7f5 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800af40:	ec4b ab19 	vmov	d9, sl, fp
 800af44:	4680      	mov	r8, r0
 800af46:	b158      	cbz	r0, 800af60 <_dtoa_r+0xe0>
 800af48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af4a:	2301      	movs	r3, #1
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 856b 	beq.w	800ba2c <_dtoa_r+0xbac>
 800af56:	4883      	ldr	r0, [pc, #524]	; (800b164 <_dtoa_r+0x2e4>)
 800af58:	6018      	str	r0, [r3, #0]
 800af5a:	1e43      	subs	r3, r0, #1
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	e7df      	b.n	800af20 <_dtoa_r+0xa0>
 800af60:	ec4b ab10 	vmov	d0, sl, fp
 800af64:	aa10      	add	r2, sp, #64	; 0x40
 800af66:	a911      	add	r1, sp, #68	; 0x44
 800af68:	4620      	mov	r0, r4
 800af6a:	f001 fd6f 	bl	800ca4c <__d2b>
 800af6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800af72:	ee08 0a10 	vmov	s16, r0
 800af76:	2d00      	cmp	r5, #0
 800af78:	f000 8084 	beq.w	800b084 <_dtoa_r+0x204>
 800af7c:	ee19 3a90 	vmov	r3, s19
 800af80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af88:	4656      	mov	r6, sl
 800af8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800af96:	4b74      	ldr	r3, [pc, #464]	; (800b168 <_dtoa_r+0x2e8>)
 800af98:	2200      	movs	r2, #0
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 f973 	bl	8000288 <__aeabi_dsub>
 800afa2:	a365      	add	r3, pc, #404	; (adr r3, 800b138 <_dtoa_r+0x2b8>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 fb26 	bl	80005f8 <__aeabi_dmul>
 800afac:	a364      	add	r3, pc, #400	; (adr r3, 800b140 <_dtoa_r+0x2c0>)
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	f7f5 f96b 	bl	800028c <__adddf3>
 800afb6:	4606      	mov	r6, r0
 800afb8:	4628      	mov	r0, r5
 800afba:	460f      	mov	r7, r1
 800afbc:	f7f5 fab2 	bl	8000524 <__aeabi_i2d>
 800afc0:	a361      	add	r3, pc, #388	; (adr r3, 800b148 <_dtoa_r+0x2c8>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 fb17 	bl	80005f8 <__aeabi_dmul>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4630      	mov	r0, r6
 800afd0:	4639      	mov	r1, r7
 800afd2:	f7f5 f95b 	bl	800028c <__adddf3>
 800afd6:	4606      	mov	r6, r0
 800afd8:	460f      	mov	r7, r1
 800afda:	f7f5 fdbd 	bl	8000b58 <__aeabi_d2iz>
 800afde:	2200      	movs	r2, #0
 800afe0:	9000      	str	r0, [sp, #0]
 800afe2:	2300      	movs	r3, #0
 800afe4:	4630      	mov	r0, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	f7f5 fd78 	bl	8000adc <__aeabi_dcmplt>
 800afec:	b150      	cbz	r0, 800b004 <_dtoa_r+0x184>
 800afee:	9800      	ldr	r0, [sp, #0]
 800aff0:	f7f5 fa98 	bl	8000524 <__aeabi_i2d>
 800aff4:	4632      	mov	r2, r6
 800aff6:	463b      	mov	r3, r7
 800aff8:	f7f5 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 800affc:	b910      	cbnz	r0, 800b004 <_dtoa_r+0x184>
 800affe:	9b00      	ldr	r3, [sp, #0]
 800b000:	3b01      	subs	r3, #1
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	9b00      	ldr	r3, [sp, #0]
 800b006:	2b16      	cmp	r3, #22
 800b008:	d85a      	bhi.n	800b0c0 <_dtoa_r+0x240>
 800b00a:	9a00      	ldr	r2, [sp, #0]
 800b00c:	4b57      	ldr	r3, [pc, #348]	; (800b16c <_dtoa_r+0x2ec>)
 800b00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	ec51 0b19 	vmov	r0, r1, d9
 800b01a:	f7f5 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800b01e:	2800      	cmp	r0, #0
 800b020:	d050      	beq.n	800b0c4 <_dtoa_r+0x244>
 800b022:	9b00      	ldr	r3, [sp, #0]
 800b024:	3b01      	subs	r3, #1
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	2300      	movs	r3, #0
 800b02a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b02e:	1b5d      	subs	r5, r3, r5
 800b030:	1e6b      	subs	r3, r5, #1
 800b032:	9305      	str	r3, [sp, #20]
 800b034:	bf45      	ittet	mi
 800b036:	f1c5 0301 	rsbmi	r3, r5, #1
 800b03a:	9304      	strmi	r3, [sp, #16]
 800b03c:	2300      	movpl	r3, #0
 800b03e:	2300      	movmi	r3, #0
 800b040:	bf4c      	ite	mi
 800b042:	9305      	strmi	r3, [sp, #20]
 800b044:	9304      	strpl	r3, [sp, #16]
 800b046:	9b00      	ldr	r3, [sp, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	db3d      	blt.n	800b0c8 <_dtoa_r+0x248>
 800b04c:	9b05      	ldr	r3, [sp, #20]
 800b04e:	9a00      	ldr	r2, [sp, #0]
 800b050:	920a      	str	r2, [sp, #40]	; 0x28
 800b052:	4413      	add	r3, r2
 800b054:	9305      	str	r3, [sp, #20]
 800b056:	2300      	movs	r3, #0
 800b058:	9307      	str	r3, [sp, #28]
 800b05a:	9b06      	ldr	r3, [sp, #24]
 800b05c:	2b09      	cmp	r3, #9
 800b05e:	f200 8089 	bhi.w	800b174 <_dtoa_r+0x2f4>
 800b062:	2b05      	cmp	r3, #5
 800b064:	bfc4      	itt	gt
 800b066:	3b04      	subgt	r3, #4
 800b068:	9306      	strgt	r3, [sp, #24]
 800b06a:	9b06      	ldr	r3, [sp, #24]
 800b06c:	f1a3 0302 	sub.w	r3, r3, #2
 800b070:	bfcc      	ite	gt
 800b072:	2500      	movgt	r5, #0
 800b074:	2501      	movle	r5, #1
 800b076:	2b03      	cmp	r3, #3
 800b078:	f200 8087 	bhi.w	800b18a <_dtoa_r+0x30a>
 800b07c:	e8df f003 	tbb	[pc, r3]
 800b080:	59383a2d 	.word	0x59383a2d
 800b084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b088:	441d      	add	r5, r3
 800b08a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b08e:	2b20      	cmp	r3, #32
 800b090:	bfc1      	itttt	gt
 800b092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b09a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b09e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0a2:	bfda      	itte	le
 800b0a4:	f1c3 0320 	rsble	r3, r3, #32
 800b0a8:	fa06 f003 	lslle.w	r0, r6, r3
 800b0ac:	4318      	orrgt	r0, r3
 800b0ae:	f7f5 fa29 	bl	8000504 <__aeabi_ui2d>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b0ba:	3d01      	subs	r5, #1
 800b0bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b0be:	e76a      	b.n	800af96 <_dtoa_r+0x116>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e7b2      	b.n	800b02a <_dtoa_r+0x1aa>
 800b0c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0c6:	e7b1      	b.n	800b02c <_dtoa_r+0x1ac>
 800b0c8:	9b04      	ldr	r3, [sp, #16]
 800b0ca:	9a00      	ldr	r2, [sp, #0]
 800b0cc:	1a9b      	subs	r3, r3, r2
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	4253      	negs	r3, r2
 800b0d2:	9307      	str	r3, [sp, #28]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0d8:	e7bf      	b.n	800b05a <_dtoa_r+0x1da>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9308      	str	r3, [sp, #32]
 800b0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dc55      	bgt.n	800b190 <_dtoa_r+0x310>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b0ee:	e00c      	b.n	800b10a <_dtoa_r+0x28a>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e7f3      	b.n	800b0dc <_dtoa_r+0x25c>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0f8:	9308      	str	r3, [sp, #32]
 800b0fa:	9b00      	ldr	r3, [sp, #0]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	9302      	str	r3, [sp, #8]
 800b100:	3301      	adds	r3, #1
 800b102:	2b01      	cmp	r3, #1
 800b104:	9303      	str	r3, [sp, #12]
 800b106:	bfb8      	it	lt
 800b108:	2301      	movlt	r3, #1
 800b10a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b10c:	2200      	movs	r2, #0
 800b10e:	6042      	str	r2, [r0, #4]
 800b110:	2204      	movs	r2, #4
 800b112:	f102 0614 	add.w	r6, r2, #20
 800b116:	429e      	cmp	r6, r3
 800b118:	6841      	ldr	r1, [r0, #4]
 800b11a:	d93d      	bls.n	800b198 <_dtoa_r+0x318>
 800b11c:	4620      	mov	r0, r4
 800b11e:	f001 f8a7 	bl	800c270 <_Balloc>
 800b122:	9001      	str	r0, [sp, #4]
 800b124:	2800      	cmp	r0, #0
 800b126:	d13b      	bne.n	800b1a0 <_dtoa_r+0x320>
 800b128:	4b11      	ldr	r3, [pc, #68]	; (800b170 <_dtoa_r+0x2f0>)
 800b12a:	4602      	mov	r2, r0
 800b12c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b130:	e6c0      	b.n	800aeb4 <_dtoa_r+0x34>
 800b132:	2301      	movs	r3, #1
 800b134:	e7df      	b.n	800b0f6 <_dtoa_r+0x276>
 800b136:	bf00      	nop
 800b138:	636f4361 	.word	0x636f4361
 800b13c:	3fd287a7 	.word	0x3fd287a7
 800b140:	8b60c8b3 	.word	0x8b60c8b3
 800b144:	3fc68a28 	.word	0x3fc68a28
 800b148:	509f79fb 	.word	0x509f79fb
 800b14c:	3fd34413 	.word	0x3fd34413
 800b150:	0800f70d 	.word	0x0800f70d
 800b154:	0800f724 	.word	0x0800f724
 800b158:	7ff00000 	.word	0x7ff00000
 800b15c:	0800f709 	.word	0x0800f709
 800b160:	0800f700 	.word	0x0800f700
 800b164:	0800f686 	.word	0x0800f686
 800b168:	3ff80000 	.word	0x3ff80000
 800b16c:	0800f890 	.word	0x0800f890
 800b170:	0800f77f 	.word	0x0800f77f
 800b174:	2501      	movs	r5, #1
 800b176:	2300      	movs	r3, #0
 800b178:	9306      	str	r3, [sp, #24]
 800b17a:	9508      	str	r5, [sp, #32]
 800b17c:	f04f 33ff 	mov.w	r3, #4294967295
 800b180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b184:	2200      	movs	r2, #0
 800b186:	2312      	movs	r3, #18
 800b188:	e7b0      	b.n	800b0ec <_dtoa_r+0x26c>
 800b18a:	2301      	movs	r3, #1
 800b18c:	9308      	str	r3, [sp, #32]
 800b18e:	e7f5      	b.n	800b17c <_dtoa_r+0x2fc>
 800b190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b196:	e7b8      	b.n	800b10a <_dtoa_r+0x28a>
 800b198:	3101      	adds	r1, #1
 800b19a:	6041      	str	r1, [r0, #4]
 800b19c:	0052      	lsls	r2, r2, #1
 800b19e:	e7b8      	b.n	800b112 <_dtoa_r+0x292>
 800b1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a2:	9a01      	ldr	r2, [sp, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	2b0e      	cmp	r3, #14
 800b1aa:	f200 809d 	bhi.w	800b2e8 <_dtoa_r+0x468>
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	f000 809a 	beq.w	800b2e8 <_dtoa_r+0x468>
 800b1b4:	9b00      	ldr	r3, [sp, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dd32      	ble.n	800b220 <_dtoa_r+0x3a0>
 800b1ba:	4ab7      	ldr	r2, [pc, #732]	; (800b498 <_dtoa_r+0x618>)
 800b1bc:	f003 030f 	and.w	r3, r3, #15
 800b1c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1c8:	9b00      	ldr	r3, [sp, #0]
 800b1ca:	05d8      	lsls	r0, r3, #23
 800b1cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b1d0:	d516      	bpl.n	800b200 <_dtoa_r+0x380>
 800b1d2:	4bb2      	ldr	r3, [pc, #712]	; (800b49c <_dtoa_r+0x61c>)
 800b1d4:	ec51 0b19 	vmov	r0, r1, d9
 800b1d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1dc:	f7f5 fb36 	bl	800084c <__aeabi_ddiv>
 800b1e0:	f007 070f 	and.w	r7, r7, #15
 800b1e4:	4682      	mov	sl, r0
 800b1e6:	468b      	mov	fp, r1
 800b1e8:	2503      	movs	r5, #3
 800b1ea:	4eac      	ldr	r6, [pc, #688]	; (800b49c <_dtoa_r+0x61c>)
 800b1ec:	b957      	cbnz	r7, 800b204 <_dtoa_r+0x384>
 800b1ee:	4642      	mov	r2, r8
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	4659      	mov	r1, fp
 800b1f6:	f7f5 fb29 	bl	800084c <__aeabi_ddiv>
 800b1fa:	4682      	mov	sl, r0
 800b1fc:	468b      	mov	fp, r1
 800b1fe:	e028      	b.n	800b252 <_dtoa_r+0x3d2>
 800b200:	2502      	movs	r5, #2
 800b202:	e7f2      	b.n	800b1ea <_dtoa_r+0x36a>
 800b204:	07f9      	lsls	r1, r7, #31
 800b206:	d508      	bpl.n	800b21a <_dtoa_r+0x39a>
 800b208:	4640      	mov	r0, r8
 800b20a:	4649      	mov	r1, r9
 800b20c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b210:	f7f5 f9f2 	bl	80005f8 <__aeabi_dmul>
 800b214:	3501      	adds	r5, #1
 800b216:	4680      	mov	r8, r0
 800b218:	4689      	mov	r9, r1
 800b21a:	107f      	asrs	r7, r7, #1
 800b21c:	3608      	adds	r6, #8
 800b21e:	e7e5      	b.n	800b1ec <_dtoa_r+0x36c>
 800b220:	f000 809b 	beq.w	800b35a <_dtoa_r+0x4da>
 800b224:	9b00      	ldr	r3, [sp, #0]
 800b226:	4f9d      	ldr	r7, [pc, #628]	; (800b49c <_dtoa_r+0x61c>)
 800b228:	425e      	negs	r6, r3
 800b22a:	4b9b      	ldr	r3, [pc, #620]	; (800b498 <_dtoa_r+0x618>)
 800b22c:	f006 020f 	and.w	r2, r6, #15
 800b230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	ec51 0b19 	vmov	r0, r1, d9
 800b23c:	f7f5 f9dc 	bl	80005f8 <__aeabi_dmul>
 800b240:	1136      	asrs	r6, r6, #4
 800b242:	4682      	mov	sl, r0
 800b244:	468b      	mov	fp, r1
 800b246:	2300      	movs	r3, #0
 800b248:	2502      	movs	r5, #2
 800b24a:	2e00      	cmp	r6, #0
 800b24c:	d17a      	bne.n	800b344 <_dtoa_r+0x4c4>
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1d3      	bne.n	800b1fa <_dtoa_r+0x37a>
 800b252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 8082 	beq.w	800b35e <_dtoa_r+0x4de>
 800b25a:	4b91      	ldr	r3, [pc, #580]	; (800b4a0 <_dtoa_r+0x620>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	4650      	mov	r0, sl
 800b260:	4659      	mov	r1, fp
 800b262:	f7f5 fc3b 	bl	8000adc <__aeabi_dcmplt>
 800b266:	2800      	cmp	r0, #0
 800b268:	d079      	beq.n	800b35e <_dtoa_r+0x4de>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d076      	beq.n	800b35e <_dtoa_r+0x4de>
 800b270:	9b02      	ldr	r3, [sp, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	dd36      	ble.n	800b2e4 <_dtoa_r+0x464>
 800b276:	9b00      	ldr	r3, [sp, #0]
 800b278:	4650      	mov	r0, sl
 800b27a:	4659      	mov	r1, fp
 800b27c:	1e5f      	subs	r7, r3, #1
 800b27e:	2200      	movs	r2, #0
 800b280:	4b88      	ldr	r3, [pc, #544]	; (800b4a4 <_dtoa_r+0x624>)
 800b282:	f7f5 f9b9 	bl	80005f8 <__aeabi_dmul>
 800b286:	9e02      	ldr	r6, [sp, #8]
 800b288:	4682      	mov	sl, r0
 800b28a:	468b      	mov	fp, r1
 800b28c:	3501      	adds	r5, #1
 800b28e:	4628      	mov	r0, r5
 800b290:	f7f5 f948 	bl	8000524 <__aeabi_i2d>
 800b294:	4652      	mov	r2, sl
 800b296:	465b      	mov	r3, fp
 800b298:	f7f5 f9ae 	bl	80005f8 <__aeabi_dmul>
 800b29c:	4b82      	ldr	r3, [pc, #520]	; (800b4a8 <_dtoa_r+0x628>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f7f4 fff4 	bl	800028c <__adddf3>
 800b2a4:	46d0      	mov	r8, sl
 800b2a6:	46d9      	mov	r9, fp
 800b2a8:	4682      	mov	sl, r0
 800b2aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b2ae:	2e00      	cmp	r6, #0
 800b2b0:	d158      	bne.n	800b364 <_dtoa_r+0x4e4>
 800b2b2:	4b7e      	ldr	r3, [pc, #504]	; (800b4ac <_dtoa_r+0x62c>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	4649      	mov	r1, r9
 800b2ba:	f7f4 ffe5 	bl	8000288 <__aeabi_dsub>
 800b2be:	4652      	mov	r2, sl
 800b2c0:	465b      	mov	r3, fp
 800b2c2:	4680      	mov	r8, r0
 800b2c4:	4689      	mov	r9, r1
 800b2c6:	f7f5 fc27 	bl	8000b18 <__aeabi_dcmpgt>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f040 8295 	bne.w	800b7fa <_dtoa_r+0x97a>
 800b2d0:	4652      	mov	r2, sl
 800b2d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	4649      	mov	r1, r9
 800b2da:	f7f5 fbff 	bl	8000adc <__aeabi_dcmplt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f040 8289 	bne.w	800b7f6 <_dtoa_r+0x976>
 800b2e4:	ec5b ab19 	vmov	sl, fp, d9
 800b2e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f2c0 8148 	blt.w	800b580 <_dtoa_r+0x700>
 800b2f0:	9a00      	ldr	r2, [sp, #0]
 800b2f2:	2a0e      	cmp	r2, #14
 800b2f4:	f300 8144 	bgt.w	800b580 <_dtoa_r+0x700>
 800b2f8:	4b67      	ldr	r3, [pc, #412]	; (800b498 <_dtoa_r+0x618>)
 800b2fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b304:	2b00      	cmp	r3, #0
 800b306:	f280 80d5 	bge.w	800b4b4 <_dtoa_r+0x634>
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f300 80d1 	bgt.w	800b4b4 <_dtoa_r+0x634>
 800b312:	f040 826f 	bne.w	800b7f4 <_dtoa_r+0x974>
 800b316:	4b65      	ldr	r3, [pc, #404]	; (800b4ac <_dtoa_r+0x62c>)
 800b318:	2200      	movs	r2, #0
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	f7f5 f96b 	bl	80005f8 <__aeabi_dmul>
 800b322:	4652      	mov	r2, sl
 800b324:	465b      	mov	r3, fp
 800b326:	f7f5 fbed 	bl	8000b04 <__aeabi_dcmpge>
 800b32a:	9e03      	ldr	r6, [sp, #12]
 800b32c:	4637      	mov	r7, r6
 800b32e:	2800      	cmp	r0, #0
 800b330:	f040 8245 	bne.w	800b7be <_dtoa_r+0x93e>
 800b334:	9d01      	ldr	r5, [sp, #4]
 800b336:	2331      	movs	r3, #49	; 0x31
 800b338:	f805 3b01 	strb.w	r3, [r5], #1
 800b33c:	9b00      	ldr	r3, [sp, #0]
 800b33e:	3301      	adds	r3, #1
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	e240      	b.n	800b7c6 <_dtoa_r+0x946>
 800b344:	07f2      	lsls	r2, r6, #31
 800b346:	d505      	bpl.n	800b354 <_dtoa_r+0x4d4>
 800b348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b34c:	f7f5 f954 	bl	80005f8 <__aeabi_dmul>
 800b350:	3501      	adds	r5, #1
 800b352:	2301      	movs	r3, #1
 800b354:	1076      	asrs	r6, r6, #1
 800b356:	3708      	adds	r7, #8
 800b358:	e777      	b.n	800b24a <_dtoa_r+0x3ca>
 800b35a:	2502      	movs	r5, #2
 800b35c:	e779      	b.n	800b252 <_dtoa_r+0x3d2>
 800b35e:	9f00      	ldr	r7, [sp, #0]
 800b360:	9e03      	ldr	r6, [sp, #12]
 800b362:	e794      	b.n	800b28e <_dtoa_r+0x40e>
 800b364:	9901      	ldr	r1, [sp, #4]
 800b366:	4b4c      	ldr	r3, [pc, #304]	; (800b498 <_dtoa_r+0x618>)
 800b368:	4431      	add	r1, r6
 800b36a:	910d      	str	r1, [sp, #52]	; 0x34
 800b36c:	9908      	ldr	r1, [sp, #32]
 800b36e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b376:	2900      	cmp	r1, #0
 800b378:	d043      	beq.n	800b402 <_dtoa_r+0x582>
 800b37a:	494d      	ldr	r1, [pc, #308]	; (800b4b0 <_dtoa_r+0x630>)
 800b37c:	2000      	movs	r0, #0
 800b37e:	f7f5 fa65 	bl	800084c <__aeabi_ddiv>
 800b382:	4652      	mov	r2, sl
 800b384:	465b      	mov	r3, fp
 800b386:	f7f4 ff7f 	bl	8000288 <__aeabi_dsub>
 800b38a:	9d01      	ldr	r5, [sp, #4]
 800b38c:	4682      	mov	sl, r0
 800b38e:	468b      	mov	fp, r1
 800b390:	4649      	mov	r1, r9
 800b392:	4640      	mov	r0, r8
 800b394:	f7f5 fbe0 	bl	8000b58 <__aeabi_d2iz>
 800b398:	4606      	mov	r6, r0
 800b39a:	f7f5 f8c3 	bl	8000524 <__aeabi_i2d>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f4 ff6f 	bl	8000288 <__aeabi_dsub>
 800b3aa:	3630      	adds	r6, #48	; 0x30
 800b3ac:	f805 6b01 	strb.w	r6, [r5], #1
 800b3b0:	4652      	mov	r2, sl
 800b3b2:	465b      	mov	r3, fp
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	4689      	mov	r9, r1
 800b3b8:	f7f5 fb90 	bl	8000adc <__aeabi_dcmplt>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d163      	bne.n	800b488 <_dtoa_r+0x608>
 800b3c0:	4642      	mov	r2, r8
 800b3c2:	464b      	mov	r3, r9
 800b3c4:	4936      	ldr	r1, [pc, #216]	; (800b4a0 <_dtoa_r+0x620>)
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	f7f4 ff5e 	bl	8000288 <__aeabi_dsub>
 800b3cc:	4652      	mov	r2, sl
 800b3ce:	465b      	mov	r3, fp
 800b3d0:	f7f5 fb84 	bl	8000adc <__aeabi_dcmplt>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	f040 80b5 	bne.w	800b544 <_dtoa_r+0x6c4>
 800b3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3dc:	429d      	cmp	r5, r3
 800b3de:	d081      	beq.n	800b2e4 <_dtoa_r+0x464>
 800b3e0:	4b30      	ldr	r3, [pc, #192]	; (800b4a4 <_dtoa_r+0x624>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	4659      	mov	r1, fp
 800b3e8:	f7f5 f906 	bl	80005f8 <__aeabi_dmul>
 800b3ec:	4b2d      	ldr	r3, [pc, #180]	; (800b4a4 <_dtoa_r+0x624>)
 800b3ee:	4682      	mov	sl, r0
 800b3f0:	468b      	mov	fp, r1
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f7f5 f8fe 	bl	80005f8 <__aeabi_dmul>
 800b3fc:	4680      	mov	r8, r0
 800b3fe:	4689      	mov	r9, r1
 800b400:	e7c6      	b.n	800b390 <_dtoa_r+0x510>
 800b402:	4650      	mov	r0, sl
 800b404:	4659      	mov	r1, fp
 800b406:	f7f5 f8f7 	bl	80005f8 <__aeabi_dmul>
 800b40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b40c:	9d01      	ldr	r5, [sp, #4]
 800b40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b410:	4682      	mov	sl, r0
 800b412:	468b      	mov	fp, r1
 800b414:	4649      	mov	r1, r9
 800b416:	4640      	mov	r0, r8
 800b418:	f7f5 fb9e 	bl	8000b58 <__aeabi_d2iz>
 800b41c:	4606      	mov	r6, r0
 800b41e:	f7f5 f881 	bl	8000524 <__aeabi_i2d>
 800b422:	3630      	adds	r6, #48	; 0x30
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4640      	mov	r0, r8
 800b42a:	4649      	mov	r1, r9
 800b42c:	f7f4 ff2c 	bl	8000288 <__aeabi_dsub>
 800b430:	f805 6b01 	strb.w	r6, [r5], #1
 800b434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b436:	429d      	cmp	r5, r3
 800b438:	4680      	mov	r8, r0
 800b43a:	4689      	mov	r9, r1
 800b43c:	f04f 0200 	mov.w	r2, #0
 800b440:	d124      	bne.n	800b48c <_dtoa_r+0x60c>
 800b442:	4b1b      	ldr	r3, [pc, #108]	; (800b4b0 <_dtoa_r+0x630>)
 800b444:	4650      	mov	r0, sl
 800b446:	4659      	mov	r1, fp
 800b448:	f7f4 ff20 	bl	800028c <__adddf3>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4640      	mov	r0, r8
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 fb60 	bl	8000b18 <__aeabi_dcmpgt>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d173      	bne.n	800b544 <_dtoa_r+0x6c4>
 800b45c:	4652      	mov	r2, sl
 800b45e:	465b      	mov	r3, fp
 800b460:	4913      	ldr	r1, [pc, #76]	; (800b4b0 <_dtoa_r+0x630>)
 800b462:	2000      	movs	r0, #0
 800b464:	f7f4 ff10 	bl	8000288 <__aeabi_dsub>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4640      	mov	r0, r8
 800b46e:	4649      	mov	r1, r9
 800b470:	f7f5 fb34 	bl	8000adc <__aeabi_dcmplt>
 800b474:	2800      	cmp	r0, #0
 800b476:	f43f af35 	beq.w	800b2e4 <_dtoa_r+0x464>
 800b47a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b47c:	1e6b      	subs	r3, r5, #1
 800b47e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b484:	2b30      	cmp	r3, #48	; 0x30
 800b486:	d0f8      	beq.n	800b47a <_dtoa_r+0x5fa>
 800b488:	9700      	str	r7, [sp, #0]
 800b48a:	e049      	b.n	800b520 <_dtoa_r+0x6a0>
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <_dtoa_r+0x624>)
 800b48e:	f7f5 f8b3 	bl	80005f8 <__aeabi_dmul>
 800b492:	4680      	mov	r8, r0
 800b494:	4689      	mov	r9, r1
 800b496:	e7bd      	b.n	800b414 <_dtoa_r+0x594>
 800b498:	0800f890 	.word	0x0800f890
 800b49c:	0800f868 	.word	0x0800f868
 800b4a0:	3ff00000 	.word	0x3ff00000
 800b4a4:	40240000 	.word	0x40240000
 800b4a8:	401c0000 	.word	0x401c0000
 800b4ac:	40140000 	.word	0x40140000
 800b4b0:	3fe00000 	.word	0x3fe00000
 800b4b4:	9d01      	ldr	r5, [sp, #4]
 800b4b6:	4656      	mov	r6, sl
 800b4b8:	465f      	mov	r7, fp
 800b4ba:	4642      	mov	r2, r8
 800b4bc:	464b      	mov	r3, r9
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f5 f9c3 	bl	800084c <__aeabi_ddiv>
 800b4c6:	f7f5 fb47 	bl	8000b58 <__aeabi_d2iz>
 800b4ca:	4682      	mov	sl, r0
 800b4cc:	f7f5 f82a 	bl	8000524 <__aeabi_i2d>
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	f7f5 f890 	bl	80005f8 <__aeabi_dmul>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4639      	mov	r1, r7
 800b4e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b4e4:	f7f4 fed0 	bl	8000288 <__aeabi_dsub>
 800b4e8:	f805 6b01 	strb.w	r6, [r5], #1
 800b4ec:	9e01      	ldr	r6, [sp, #4]
 800b4ee:	9f03      	ldr	r7, [sp, #12]
 800b4f0:	1bae      	subs	r6, r5, r6
 800b4f2:	42b7      	cmp	r7, r6
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	d135      	bne.n	800b566 <_dtoa_r+0x6e6>
 800b4fa:	f7f4 fec7 	bl	800028c <__adddf3>
 800b4fe:	4642      	mov	r2, r8
 800b500:	464b      	mov	r3, r9
 800b502:	4606      	mov	r6, r0
 800b504:	460f      	mov	r7, r1
 800b506:	f7f5 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800b50a:	b9d0      	cbnz	r0, 800b542 <_dtoa_r+0x6c2>
 800b50c:	4642      	mov	r2, r8
 800b50e:	464b      	mov	r3, r9
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b518:	b110      	cbz	r0, 800b520 <_dtoa_r+0x6a0>
 800b51a:	f01a 0f01 	tst.w	sl, #1
 800b51e:	d110      	bne.n	800b542 <_dtoa_r+0x6c2>
 800b520:	4620      	mov	r0, r4
 800b522:	ee18 1a10 	vmov	r1, s16
 800b526:	f000 fee3 	bl	800c2f0 <_Bfree>
 800b52a:	2300      	movs	r3, #0
 800b52c:	9800      	ldr	r0, [sp, #0]
 800b52e:	702b      	strb	r3, [r5, #0]
 800b530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b532:	3001      	adds	r0, #1
 800b534:	6018      	str	r0, [r3, #0]
 800b536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f43f acf1 	beq.w	800af20 <_dtoa_r+0xa0>
 800b53e:	601d      	str	r5, [r3, #0]
 800b540:	e4ee      	b.n	800af20 <_dtoa_r+0xa0>
 800b542:	9f00      	ldr	r7, [sp, #0]
 800b544:	462b      	mov	r3, r5
 800b546:	461d      	mov	r5, r3
 800b548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b54c:	2a39      	cmp	r2, #57	; 0x39
 800b54e:	d106      	bne.n	800b55e <_dtoa_r+0x6de>
 800b550:	9a01      	ldr	r2, [sp, #4]
 800b552:	429a      	cmp	r2, r3
 800b554:	d1f7      	bne.n	800b546 <_dtoa_r+0x6c6>
 800b556:	9901      	ldr	r1, [sp, #4]
 800b558:	2230      	movs	r2, #48	; 0x30
 800b55a:	3701      	adds	r7, #1
 800b55c:	700a      	strb	r2, [r1, #0]
 800b55e:	781a      	ldrb	r2, [r3, #0]
 800b560:	3201      	adds	r2, #1
 800b562:	701a      	strb	r2, [r3, #0]
 800b564:	e790      	b.n	800b488 <_dtoa_r+0x608>
 800b566:	4ba6      	ldr	r3, [pc, #664]	; (800b800 <_dtoa_r+0x980>)
 800b568:	2200      	movs	r2, #0
 800b56a:	f7f5 f845 	bl	80005f8 <__aeabi_dmul>
 800b56e:	2200      	movs	r2, #0
 800b570:	2300      	movs	r3, #0
 800b572:	4606      	mov	r6, r0
 800b574:	460f      	mov	r7, r1
 800b576:	f7f5 faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d09d      	beq.n	800b4ba <_dtoa_r+0x63a>
 800b57e:	e7cf      	b.n	800b520 <_dtoa_r+0x6a0>
 800b580:	9a08      	ldr	r2, [sp, #32]
 800b582:	2a00      	cmp	r2, #0
 800b584:	f000 80d7 	beq.w	800b736 <_dtoa_r+0x8b6>
 800b588:	9a06      	ldr	r2, [sp, #24]
 800b58a:	2a01      	cmp	r2, #1
 800b58c:	f300 80ba 	bgt.w	800b704 <_dtoa_r+0x884>
 800b590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b592:	2a00      	cmp	r2, #0
 800b594:	f000 80b2 	beq.w	800b6fc <_dtoa_r+0x87c>
 800b598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b59c:	9e07      	ldr	r6, [sp, #28]
 800b59e:	9d04      	ldr	r5, [sp, #16]
 800b5a0:	9a04      	ldr	r2, [sp, #16]
 800b5a2:	441a      	add	r2, r3
 800b5a4:	9204      	str	r2, [sp, #16]
 800b5a6:	9a05      	ldr	r2, [sp, #20]
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	441a      	add	r2, r3
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	9205      	str	r2, [sp, #20]
 800b5b0:	f000 ffa0 	bl	800c4f4 <__i2b>
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	2d00      	cmp	r5, #0
 800b5b8:	dd0c      	ble.n	800b5d4 <_dtoa_r+0x754>
 800b5ba:	9b05      	ldr	r3, [sp, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	dd09      	ble.n	800b5d4 <_dtoa_r+0x754>
 800b5c0:	42ab      	cmp	r3, r5
 800b5c2:	9a04      	ldr	r2, [sp, #16]
 800b5c4:	bfa8      	it	ge
 800b5c6:	462b      	movge	r3, r5
 800b5c8:	1ad2      	subs	r2, r2, r3
 800b5ca:	9204      	str	r2, [sp, #16]
 800b5cc:	9a05      	ldr	r2, [sp, #20]
 800b5ce:	1aed      	subs	r5, r5, r3
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	9305      	str	r3, [sp, #20]
 800b5d4:	9b07      	ldr	r3, [sp, #28]
 800b5d6:	b31b      	cbz	r3, 800b620 <_dtoa_r+0x7a0>
 800b5d8:	9b08      	ldr	r3, [sp, #32]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 80af 	beq.w	800b73e <_dtoa_r+0x8be>
 800b5e0:	2e00      	cmp	r6, #0
 800b5e2:	dd13      	ble.n	800b60c <_dtoa_r+0x78c>
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f001 f843 	bl	800c674 <__pow5mult>
 800b5ee:	ee18 2a10 	vmov	r2, s16
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	4607      	mov	r7, r0
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 ff92 	bl	800c520 <__multiply>
 800b5fc:	ee18 1a10 	vmov	r1, s16
 800b600:	4680      	mov	r8, r0
 800b602:	4620      	mov	r0, r4
 800b604:	f000 fe74 	bl	800c2f0 <_Bfree>
 800b608:	ee08 8a10 	vmov	s16, r8
 800b60c:	9b07      	ldr	r3, [sp, #28]
 800b60e:	1b9a      	subs	r2, r3, r6
 800b610:	d006      	beq.n	800b620 <_dtoa_r+0x7a0>
 800b612:	ee18 1a10 	vmov	r1, s16
 800b616:	4620      	mov	r0, r4
 800b618:	f001 f82c 	bl	800c674 <__pow5mult>
 800b61c:	ee08 0a10 	vmov	s16, r0
 800b620:	2101      	movs	r1, #1
 800b622:	4620      	mov	r0, r4
 800b624:	f000 ff66 	bl	800c4f4 <__i2b>
 800b628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	4606      	mov	r6, r0
 800b62e:	f340 8088 	ble.w	800b742 <_dtoa_r+0x8c2>
 800b632:	461a      	mov	r2, r3
 800b634:	4601      	mov	r1, r0
 800b636:	4620      	mov	r0, r4
 800b638:	f001 f81c 	bl	800c674 <__pow5mult>
 800b63c:	9b06      	ldr	r3, [sp, #24]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	4606      	mov	r6, r0
 800b642:	f340 8081 	ble.w	800b748 <_dtoa_r+0x8c8>
 800b646:	f04f 0800 	mov.w	r8, #0
 800b64a:	6933      	ldr	r3, [r6, #16]
 800b64c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b650:	6918      	ldr	r0, [r3, #16]
 800b652:	f000 feff 	bl	800c454 <__hi0bits>
 800b656:	f1c0 0020 	rsb	r0, r0, #32
 800b65a:	9b05      	ldr	r3, [sp, #20]
 800b65c:	4418      	add	r0, r3
 800b65e:	f010 001f 	ands.w	r0, r0, #31
 800b662:	f000 8092 	beq.w	800b78a <_dtoa_r+0x90a>
 800b666:	f1c0 0320 	rsb	r3, r0, #32
 800b66a:	2b04      	cmp	r3, #4
 800b66c:	f340 808a 	ble.w	800b784 <_dtoa_r+0x904>
 800b670:	f1c0 001c 	rsb	r0, r0, #28
 800b674:	9b04      	ldr	r3, [sp, #16]
 800b676:	4403      	add	r3, r0
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	9b05      	ldr	r3, [sp, #20]
 800b67c:	4403      	add	r3, r0
 800b67e:	4405      	add	r5, r0
 800b680:	9305      	str	r3, [sp, #20]
 800b682:	9b04      	ldr	r3, [sp, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	dd07      	ble.n	800b698 <_dtoa_r+0x818>
 800b688:	ee18 1a10 	vmov	r1, s16
 800b68c:	461a      	mov	r2, r3
 800b68e:	4620      	mov	r0, r4
 800b690:	f001 f84a 	bl	800c728 <__lshift>
 800b694:	ee08 0a10 	vmov	s16, r0
 800b698:	9b05      	ldr	r3, [sp, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	dd05      	ble.n	800b6aa <_dtoa_r+0x82a>
 800b69e:	4631      	mov	r1, r6
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f001 f840 	bl	800c728 <__lshift>
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d06e      	beq.n	800b78e <_dtoa_r+0x90e>
 800b6b0:	ee18 0a10 	vmov	r0, s16
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	f001 f8a7 	bl	800c808 <__mcmp>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	da67      	bge.n	800b78e <_dtoa_r+0x90e>
 800b6be:	9b00      	ldr	r3, [sp, #0]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	ee18 1a10 	vmov	r1, s16
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	220a      	movs	r2, #10
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f000 fe31 	bl	800c334 <__multadd>
 800b6d2:	9b08      	ldr	r3, [sp, #32]
 800b6d4:	ee08 0a10 	vmov	s16, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 81b1 	beq.w	800ba40 <_dtoa_r+0xbc0>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	220a      	movs	r2, #10
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f000 fe25 	bl	800c334 <__multadd>
 800b6ea:	9b02      	ldr	r3, [sp, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	f300 808e 	bgt.w	800b810 <_dtoa_r+0x990>
 800b6f4:	9b06      	ldr	r3, [sp, #24]
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	dc51      	bgt.n	800b79e <_dtoa_r+0x91e>
 800b6fa:	e089      	b.n	800b810 <_dtoa_r+0x990>
 800b6fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b702:	e74b      	b.n	800b59c <_dtoa_r+0x71c>
 800b704:	9b03      	ldr	r3, [sp, #12]
 800b706:	1e5e      	subs	r6, r3, #1
 800b708:	9b07      	ldr	r3, [sp, #28]
 800b70a:	42b3      	cmp	r3, r6
 800b70c:	bfbf      	itttt	lt
 800b70e:	9b07      	ldrlt	r3, [sp, #28]
 800b710:	9607      	strlt	r6, [sp, #28]
 800b712:	1af2      	sublt	r2, r6, r3
 800b714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b716:	bfb6      	itet	lt
 800b718:	189b      	addlt	r3, r3, r2
 800b71a:	1b9e      	subge	r6, r3, r6
 800b71c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	bfb8      	it	lt
 800b722:	2600      	movlt	r6, #0
 800b724:	2b00      	cmp	r3, #0
 800b726:	bfb7      	itett	lt
 800b728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b72c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b730:	1a9d      	sublt	r5, r3, r2
 800b732:	2300      	movlt	r3, #0
 800b734:	e734      	b.n	800b5a0 <_dtoa_r+0x720>
 800b736:	9e07      	ldr	r6, [sp, #28]
 800b738:	9d04      	ldr	r5, [sp, #16]
 800b73a:	9f08      	ldr	r7, [sp, #32]
 800b73c:	e73b      	b.n	800b5b6 <_dtoa_r+0x736>
 800b73e:	9a07      	ldr	r2, [sp, #28]
 800b740:	e767      	b.n	800b612 <_dtoa_r+0x792>
 800b742:	9b06      	ldr	r3, [sp, #24]
 800b744:	2b01      	cmp	r3, #1
 800b746:	dc18      	bgt.n	800b77a <_dtoa_r+0x8fa>
 800b748:	f1ba 0f00 	cmp.w	sl, #0
 800b74c:	d115      	bne.n	800b77a <_dtoa_r+0x8fa>
 800b74e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b752:	b993      	cbnz	r3, 800b77a <_dtoa_r+0x8fa>
 800b754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b758:	0d1b      	lsrs	r3, r3, #20
 800b75a:	051b      	lsls	r3, r3, #20
 800b75c:	b183      	cbz	r3, 800b780 <_dtoa_r+0x900>
 800b75e:	9b04      	ldr	r3, [sp, #16]
 800b760:	3301      	adds	r3, #1
 800b762:	9304      	str	r3, [sp, #16]
 800b764:	9b05      	ldr	r3, [sp, #20]
 800b766:	3301      	adds	r3, #1
 800b768:	9305      	str	r3, [sp, #20]
 800b76a:	f04f 0801 	mov.w	r8, #1
 800b76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b770:	2b00      	cmp	r3, #0
 800b772:	f47f af6a 	bne.w	800b64a <_dtoa_r+0x7ca>
 800b776:	2001      	movs	r0, #1
 800b778:	e76f      	b.n	800b65a <_dtoa_r+0x7da>
 800b77a:	f04f 0800 	mov.w	r8, #0
 800b77e:	e7f6      	b.n	800b76e <_dtoa_r+0x8ee>
 800b780:	4698      	mov	r8, r3
 800b782:	e7f4      	b.n	800b76e <_dtoa_r+0x8ee>
 800b784:	f43f af7d 	beq.w	800b682 <_dtoa_r+0x802>
 800b788:	4618      	mov	r0, r3
 800b78a:	301c      	adds	r0, #28
 800b78c:	e772      	b.n	800b674 <_dtoa_r+0x7f4>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	dc37      	bgt.n	800b804 <_dtoa_r+0x984>
 800b794:	9b06      	ldr	r3, [sp, #24]
 800b796:	2b02      	cmp	r3, #2
 800b798:	dd34      	ble.n	800b804 <_dtoa_r+0x984>
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	9302      	str	r3, [sp, #8]
 800b79e:	9b02      	ldr	r3, [sp, #8]
 800b7a0:	b96b      	cbnz	r3, 800b7be <_dtoa_r+0x93e>
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	2205      	movs	r2, #5
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 fdc4 	bl	800c334 <__multadd>
 800b7ac:	4601      	mov	r1, r0
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	ee18 0a10 	vmov	r0, s16
 800b7b4:	f001 f828 	bl	800c808 <__mcmp>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	f73f adbb 	bgt.w	800b334 <_dtoa_r+0x4b4>
 800b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c0:	9d01      	ldr	r5, [sp, #4]
 800b7c2:	43db      	mvns	r3, r3
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	f04f 0800 	mov.w	r8, #0
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 fd8f 	bl	800c2f0 <_Bfree>
 800b7d2:	2f00      	cmp	r7, #0
 800b7d4:	f43f aea4 	beq.w	800b520 <_dtoa_r+0x6a0>
 800b7d8:	f1b8 0f00 	cmp.w	r8, #0
 800b7dc:	d005      	beq.n	800b7ea <_dtoa_r+0x96a>
 800b7de:	45b8      	cmp	r8, r7
 800b7e0:	d003      	beq.n	800b7ea <_dtoa_r+0x96a>
 800b7e2:	4641      	mov	r1, r8
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f000 fd83 	bl	800c2f0 <_Bfree>
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fd7f 	bl	800c2f0 <_Bfree>
 800b7f2:	e695      	b.n	800b520 <_dtoa_r+0x6a0>
 800b7f4:	2600      	movs	r6, #0
 800b7f6:	4637      	mov	r7, r6
 800b7f8:	e7e1      	b.n	800b7be <_dtoa_r+0x93e>
 800b7fa:	9700      	str	r7, [sp, #0]
 800b7fc:	4637      	mov	r7, r6
 800b7fe:	e599      	b.n	800b334 <_dtoa_r+0x4b4>
 800b800:	40240000 	.word	0x40240000
 800b804:	9b08      	ldr	r3, [sp, #32]
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 80ca 	beq.w	800b9a0 <_dtoa_r+0xb20>
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	9302      	str	r3, [sp, #8]
 800b810:	2d00      	cmp	r5, #0
 800b812:	dd05      	ble.n	800b820 <_dtoa_r+0x9a0>
 800b814:	4639      	mov	r1, r7
 800b816:	462a      	mov	r2, r5
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 ff85 	bl	800c728 <__lshift>
 800b81e:	4607      	mov	r7, r0
 800b820:	f1b8 0f00 	cmp.w	r8, #0
 800b824:	d05b      	beq.n	800b8de <_dtoa_r+0xa5e>
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	4620      	mov	r0, r4
 800b82a:	f000 fd21 	bl	800c270 <_Balloc>
 800b82e:	4605      	mov	r5, r0
 800b830:	b928      	cbnz	r0, 800b83e <_dtoa_r+0x9be>
 800b832:	4b87      	ldr	r3, [pc, #540]	; (800ba50 <_dtoa_r+0xbd0>)
 800b834:	4602      	mov	r2, r0
 800b836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b83a:	f7ff bb3b 	b.w	800aeb4 <_dtoa_r+0x34>
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	3202      	adds	r2, #2
 800b842:	0092      	lsls	r2, r2, #2
 800b844:	f107 010c 	add.w	r1, r7, #12
 800b848:	300c      	adds	r0, #12
 800b84a:	f7fd f92d 	bl	8008aa8 <memcpy>
 800b84e:	2201      	movs	r2, #1
 800b850:	4629      	mov	r1, r5
 800b852:	4620      	mov	r0, r4
 800b854:	f000 ff68 	bl	800c728 <__lshift>
 800b858:	9b01      	ldr	r3, [sp, #4]
 800b85a:	f103 0901 	add.w	r9, r3, #1
 800b85e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b862:	4413      	add	r3, r2
 800b864:	9305      	str	r3, [sp, #20]
 800b866:	f00a 0301 	and.w	r3, sl, #1
 800b86a:	46b8      	mov	r8, r7
 800b86c:	9304      	str	r3, [sp, #16]
 800b86e:	4607      	mov	r7, r0
 800b870:	4631      	mov	r1, r6
 800b872:	ee18 0a10 	vmov	r0, s16
 800b876:	f7ff fa75 	bl	800ad64 <quorem>
 800b87a:	4641      	mov	r1, r8
 800b87c:	9002      	str	r0, [sp, #8]
 800b87e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b882:	ee18 0a10 	vmov	r0, s16
 800b886:	f000 ffbf 	bl	800c808 <__mcmp>
 800b88a:	463a      	mov	r2, r7
 800b88c:	9003      	str	r0, [sp, #12]
 800b88e:	4631      	mov	r1, r6
 800b890:	4620      	mov	r0, r4
 800b892:	f000 ffd5 	bl	800c840 <__mdiff>
 800b896:	68c2      	ldr	r2, [r0, #12]
 800b898:	f109 3bff 	add.w	fp, r9, #4294967295
 800b89c:	4605      	mov	r5, r0
 800b89e:	bb02      	cbnz	r2, 800b8e2 <_dtoa_r+0xa62>
 800b8a0:	4601      	mov	r1, r0
 800b8a2:	ee18 0a10 	vmov	r0, s16
 800b8a6:	f000 ffaf 	bl	800c808 <__mcmp>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	9207      	str	r2, [sp, #28]
 800b8b2:	f000 fd1d 	bl	800c2f0 <_Bfree>
 800b8b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b8ba:	ea43 0102 	orr.w	r1, r3, r2
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	464d      	mov	r5, r9
 800b8c4:	d10f      	bne.n	800b8e6 <_dtoa_r+0xa66>
 800b8c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8ca:	d02a      	beq.n	800b922 <_dtoa_r+0xaa2>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dd02      	ble.n	800b8d8 <_dtoa_r+0xa58>
 800b8d2:	9b02      	ldr	r3, [sp, #8]
 800b8d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b8d8:	f88b a000 	strb.w	sl, [fp]
 800b8dc:	e775      	b.n	800b7ca <_dtoa_r+0x94a>
 800b8de:	4638      	mov	r0, r7
 800b8e0:	e7ba      	b.n	800b858 <_dtoa_r+0x9d8>
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	e7e2      	b.n	800b8ac <_dtoa_r+0xa2c>
 800b8e6:	9b03      	ldr	r3, [sp, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db04      	blt.n	800b8f6 <_dtoa_r+0xa76>
 800b8ec:	9906      	ldr	r1, [sp, #24]
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	9904      	ldr	r1, [sp, #16]
 800b8f2:	430b      	orrs	r3, r1
 800b8f4:	d122      	bne.n	800b93c <_dtoa_r+0xabc>
 800b8f6:	2a00      	cmp	r2, #0
 800b8f8:	ddee      	ble.n	800b8d8 <_dtoa_r+0xa58>
 800b8fa:	ee18 1a10 	vmov	r1, s16
 800b8fe:	2201      	movs	r2, #1
 800b900:	4620      	mov	r0, r4
 800b902:	f000 ff11 	bl	800c728 <__lshift>
 800b906:	4631      	mov	r1, r6
 800b908:	ee08 0a10 	vmov	s16, r0
 800b90c:	f000 ff7c 	bl	800c808 <__mcmp>
 800b910:	2800      	cmp	r0, #0
 800b912:	dc03      	bgt.n	800b91c <_dtoa_r+0xa9c>
 800b914:	d1e0      	bne.n	800b8d8 <_dtoa_r+0xa58>
 800b916:	f01a 0f01 	tst.w	sl, #1
 800b91a:	d0dd      	beq.n	800b8d8 <_dtoa_r+0xa58>
 800b91c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b920:	d1d7      	bne.n	800b8d2 <_dtoa_r+0xa52>
 800b922:	2339      	movs	r3, #57	; 0x39
 800b924:	f88b 3000 	strb.w	r3, [fp]
 800b928:	462b      	mov	r3, r5
 800b92a:	461d      	mov	r5, r3
 800b92c:	3b01      	subs	r3, #1
 800b92e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b932:	2a39      	cmp	r2, #57	; 0x39
 800b934:	d071      	beq.n	800ba1a <_dtoa_r+0xb9a>
 800b936:	3201      	adds	r2, #1
 800b938:	701a      	strb	r2, [r3, #0]
 800b93a:	e746      	b.n	800b7ca <_dtoa_r+0x94a>
 800b93c:	2a00      	cmp	r2, #0
 800b93e:	dd07      	ble.n	800b950 <_dtoa_r+0xad0>
 800b940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b944:	d0ed      	beq.n	800b922 <_dtoa_r+0xaa2>
 800b946:	f10a 0301 	add.w	r3, sl, #1
 800b94a:	f88b 3000 	strb.w	r3, [fp]
 800b94e:	e73c      	b.n	800b7ca <_dtoa_r+0x94a>
 800b950:	9b05      	ldr	r3, [sp, #20]
 800b952:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b956:	4599      	cmp	r9, r3
 800b958:	d047      	beq.n	800b9ea <_dtoa_r+0xb6a>
 800b95a:	ee18 1a10 	vmov	r1, s16
 800b95e:	2300      	movs	r3, #0
 800b960:	220a      	movs	r2, #10
 800b962:	4620      	mov	r0, r4
 800b964:	f000 fce6 	bl	800c334 <__multadd>
 800b968:	45b8      	cmp	r8, r7
 800b96a:	ee08 0a10 	vmov	s16, r0
 800b96e:	f04f 0300 	mov.w	r3, #0
 800b972:	f04f 020a 	mov.w	r2, #10
 800b976:	4641      	mov	r1, r8
 800b978:	4620      	mov	r0, r4
 800b97a:	d106      	bne.n	800b98a <_dtoa_r+0xb0a>
 800b97c:	f000 fcda 	bl	800c334 <__multadd>
 800b980:	4680      	mov	r8, r0
 800b982:	4607      	mov	r7, r0
 800b984:	f109 0901 	add.w	r9, r9, #1
 800b988:	e772      	b.n	800b870 <_dtoa_r+0x9f0>
 800b98a:	f000 fcd3 	bl	800c334 <__multadd>
 800b98e:	4639      	mov	r1, r7
 800b990:	4680      	mov	r8, r0
 800b992:	2300      	movs	r3, #0
 800b994:	220a      	movs	r2, #10
 800b996:	4620      	mov	r0, r4
 800b998:	f000 fccc 	bl	800c334 <__multadd>
 800b99c:	4607      	mov	r7, r0
 800b99e:	e7f1      	b.n	800b984 <_dtoa_r+0xb04>
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	9302      	str	r3, [sp, #8]
 800b9a4:	9d01      	ldr	r5, [sp, #4]
 800b9a6:	ee18 0a10 	vmov	r0, s16
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	f7ff f9da 	bl	800ad64 <quorem>
 800b9b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	f805 ab01 	strb.w	sl, [r5], #1
 800b9ba:	1aea      	subs	r2, r5, r3
 800b9bc:	9b02      	ldr	r3, [sp, #8]
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	dd09      	ble.n	800b9d6 <_dtoa_r+0xb56>
 800b9c2:	ee18 1a10 	vmov	r1, s16
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	220a      	movs	r2, #10
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f000 fcb2 	bl	800c334 <__multadd>
 800b9d0:	ee08 0a10 	vmov	s16, r0
 800b9d4:	e7e7      	b.n	800b9a6 <_dtoa_r+0xb26>
 800b9d6:	9b02      	ldr	r3, [sp, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	bfc8      	it	gt
 800b9dc:	461d      	movgt	r5, r3
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	bfd8      	it	le
 800b9e2:	2501      	movle	r5, #1
 800b9e4:	441d      	add	r5, r3
 800b9e6:	f04f 0800 	mov.w	r8, #0
 800b9ea:	ee18 1a10 	vmov	r1, s16
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f000 fe99 	bl	800c728 <__lshift>
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	ee08 0a10 	vmov	s16, r0
 800b9fc:	f000 ff04 	bl	800c808 <__mcmp>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	dc91      	bgt.n	800b928 <_dtoa_r+0xaa8>
 800ba04:	d102      	bne.n	800ba0c <_dtoa_r+0xb8c>
 800ba06:	f01a 0f01 	tst.w	sl, #1
 800ba0a:	d18d      	bne.n	800b928 <_dtoa_r+0xaa8>
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	461d      	mov	r5, r3
 800ba10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba14:	2a30      	cmp	r2, #48	; 0x30
 800ba16:	d0fa      	beq.n	800ba0e <_dtoa_r+0xb8e>
 800ba18:	e6d7      	b.n	800b7ca <_dtoa_r+0x94a>
 800ba1a:	9a01      	ldr	r2, [sp, #4]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d184      	bne.n	800b92a <_dtoa_r+0xaaa>
 800ba20:	9b00      	ldr	r3, [sp, #0]
 800ba22:	3301      	adds	r3, #1
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	2331      	movs	r3, #49	; 0x31
 800ba28:	7013      	strb	r3, [r2, #0]
 800ba2a:	e6ce      	b.n	800b7ca <_dtoa_r+0x94a>
 800ba2c:	4b09      	ldr	r3, [pc, #36]	; (800ba54 <_dtoa_r+0xbd4>)
 800ba2e:	f7ff ba95 	b.w	800af5c <_dtoa_r+0xdc>
 800ba32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f47f aa6e 	bne.w	800af16 <_dtoa_r+0x96>
 800ba3a:	4b07      	ldr	r3, [pc, #28]	; (800ba58 <_dtoa_r+0xbd8>)
 800ba3c:	f7ff ba8e 	b.w	800af5c <_dtoa_r+0xdc>
 800ba40:	9b02      	ldr	r3, [sp, #8]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	dcae      	bgt.n	800b9a4 <_dtoa_r+0xb24>
 800ba46:	9b06      	ldr	r3, [sp, #24]
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	f73f aea8 	bgt.w	800b79e <_dtoa_r+0x91e>
 800ba4e:	e7a9      	b.n	800b9a4 <_dtoa_r+0xb24>
 800ba50:	0800f77f 	.word	0x0800f77f
 800ba54:	0800f685 	.word	0x0800f685
 800ba58:	0800f700 	.word	0x0800f700

0800ba5c <rshift>:
 800ba5c:	6903      	ldr	r3, [r0, #16]
 800ba5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba6a:	f100 0414 	add.w	r4, r0, #20
 800ba6e:	dd45      	ble.n	800bafc <rshift+0xa0>
 800ba70:	f011 011f 	ands.w	r1, r1, #31
 800ba74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba7c:	d10c      	bne.n	800ba98 <rshift+0x3c>
 800ba7e:	f100 0710 	add.w	r7, r0, #16
 800ba82:	4629      	mov	r1, r5
 800ba84:	42b1      	cmp	r1, r6
 800ba86:	d334      	bcc.n	800baf2 <rshift+0x96>
 800ba88:	1a9b      	subs	r3, r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	1eea      	subs	r2, r5, #3
 800ba8e:	4296      	cmp	r6, r2
 800ba90:	bf38      	it	cc
 800ba92:	2300      	movcc	r3, #0
 800ba94:	4423      	add	r3, r4
 800ba96:	e015      	b.n	800bac4 <rshift+0x68>
 800ba98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba9c:	f1c1 0820 	rsb	r8, r1, #32
 800baa0:	40cf      	lsrs	r7, r1
 800baa2:	f105 0e04 	add.w	lr, r5, #4
 800baa6:	46a1      	mov	r9, r4
 800baa8:	4576      	cmp	r6, lr
 800baaa:	46f4      	mov	ip, lr
 800baac:	d815      	bhi.n	800bada <rshift+0x7e>
 800baae:	1a9a      	subs	r2, r3, r2
 800bab0:	0092      	lsls	r2, r2, #2
 800bab2:	3a04      	subs	r2, #4
 800bab4:	3501      	adds	r5, #1
 800bab6:	42ae      	cmp	r6, r5
 800bab8:	bf38      	it	cc
 800baba:	2200      	movcc	r2, #0
 800babc:	18a3      	adds	r3, r4, r2
 800babe:	50a7      	str	r7, [r4, r2]
 800bac0:	b107      	cbz	r7, 800bac4 <rshift+0x68>
 800bac2:	3304      	adds	r3, #4
 800bac4:	1b1a      	subs	r2, r3, r4
 800bac6:	42a3      	cmp	r3, r4
 800bac8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bacc:	bf08      	it	eq
 800bace:	2300      	moveq	r3, #0
 800bad0:	6102      	str	r2, [r0, #16]
 800bad2:	bf08      	it	eq
 800bad4:	6143      	streq	r3, [r0, #20]
 800bad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bada:	f8dc c000 	ldr.w	ip, [ip]
 800bade:	fa0c fc08 	lsl.w	ip, ip, r8
 800bae2:	ea4c 0707 	orr.w	r7, ip, r7
 800bae6:	f849 7b04 	str.w	r7, [r9], #4
 800baea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800baee:	40cf      	lsrs	r7, r1
 800baf0:	e7da      	b.n	800baa8 <rshift+0x4c>
 800baf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800baf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800bafa:	e7c3      	b.n	800ba84 <rshift+0x28>
 800bafc:	4623      	mov	r3, r4
 800bafe:	e7e1      	b.n	800bac4 <rshift+0x68>

0800bb00 <__hexdig_fun>:
 800bb00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	d802      	bhi.n	800bb0e <__hexdig_fun+0xe>
 800bb08:	3820      	subs	r0, #32
 800bb0a:	b2c0      	uxtb	r0, r0
 800bb0c:	4770      	bx	lr
 800bb0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb12:	2b05      	cmp	r3, #5
 800bb14:	d801      	bhi.n	800bb1a <__hexdig_fun+0x1a>
 800bb16:	3847      	subs	r0, #71	; 0x47
 800bb18:	e7f7      	b.n	800bb0a <__hexdig_fun+0xa>
 800bb1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb1e:	2b05      	cmp	r3, #5
 800bb20:	d801      	bhi.n	800bb26 <__hexdig_fun+0x26>
 800bb22:	3827      	subs	r0, #39	; 0x27
 800bb24:	e7f1      	b.n	800bb0a <__hexdig_fun+0xa>
 800bb26:	2000      	movs	r0, #0
 800bb28:	4770      	bx	lr
	...

0800bb2c <__gethex>:
 800bb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	ed2d 8b02 	vpush	{d8}
 800bb34:	b089      	sub	sp, #36	; 0x24
 800bb36:	ee08 0a10 	vmov	s16, r0
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	4bb4      	ldr	r3, [pc, #720]	; (800be10 <__gethex+0x2e4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	4618      	mov	r0, r3
 800bb44:	468b      	mov	fp, r1
 800bb46:	4690      	mov	r8, r2
 800bb48:	f7f4 fb42 	bl	80001d0 <strlen>
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	f8db 2000 	ldr.w	r2, [fp]
 800bb52:	4403      	add	r3, r0
 800bb54:	4682      	mov	sl, r0
 800bb56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bb5a:	9305      	str	r3, [sp, #20]
 800bb5c:	1c93      	adds	r3, r2, #2
 800bb5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb66:	32fe      	adds	r2, #254	; 0xfe
 800bb68:	18d1      	adds	r1, r2, r3
 800bb6a:	461f      	mov	r7, r3
 800bb6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb70:	9100      	str	r1, [sp, #0]
 800bb72:	2830      	cmp	r0, #48	; 0x30
 800bb74:	d0f8      	beq.n	800bb68 <__gethex+0x3c>
 800bb76:	f7ff ffc3 	bl	800bb00 <__hexdig_fun>
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d13a      	bne.n	800bbf6 <__gethex+0xca>
 800bb80:	9901      	ldr	r1, [sp, #4]
 800bb82:	4652      	mov	r2, sl
 800bb84:	4638      	mov	r0, r7
 800bb86:	f001 fa1f 	bl	800cfc8 <strncmp>
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d168      	bne.n	800bc62 <__gethex+0x136>
 800bb90:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bb94:	eb07 060a 	add.w	r6, r7, sl
 800bb98:	f7ff ffb2 	bl	800bb00 <__hexdig_fun>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d062      	beq.n	800bc66 <__gethex+0x13a>
 800bba0:	4633      	mov	r3, r6
 800bba2:	7818      	ldrb	r0, [r3, #0]
 800bba4:	2830      	cmp	r0, #48	; 0x30
 800bba6:	461f      	mov	r7, r3
 800bba8:	f103 0301 	add.w	r3, r3, #1
 800bbac:	d0f9      	beq.n	800bba2 <__gethex+0x76>
 800bbae:	f7ff ffa7 	bl	800bb00 <__hexdig_fun>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	fab0 f480 	clz	r4, r0
 800bbb8:	0964      	lsrs	r4, r4, #5
 800bbba:	4635      	mov	r5, r6
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	463a      	mov	r2, r7
 800bbc0:	4616      	mov	r6, r2
 800bbc2:	3201      	adds	r2, #1
 800bbc4:	7830      	ldrb	r0, [r6, #0]
 800bbc6:	f7ff ff9b 	bl	800bb00 <__hexdig_fun>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d1f8      	bne.n	800bbc0 <__gethex+0x94>
 800bbce:	9901      	ldr	r1, [sp, #4]
 800bbd0:	4652      	mov	r2, sl
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f001 f9f8 	bl	800cfc8 <strncmp>
 800bbd8:	b980      	cbnz	r0, 800bbfc <__gethex+0xd0>
 800bbda:	b94d      	cbnz	r5, 800bbf0 <__gethex+0xc4>
 800bbdc:	eb06 050a 	add.w	r5, r6, sl
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4616      	mov	r6, r2
 800bbe4:	3201      	adds	r2, #1
 800bbe6:	7830      	ldrb	r0, [r6, #0]
 800bbe8:	f7ff ff8a 	bl	800bb00 <__hexdig_fun>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d1f8      	bne.n	800bbe2 <__gethex+0xb6>
 800bbf0:	1bad      	subs	r5, r5, r6
 800bbf2:	00ad      	lsls	r5, r5, #2
 800bbf4:	e004      	b.n	800bc00 <__gethex+0xd4>
 800bbf6:	2400      	movs	r4, #0
 800bbf8:	4625      	mov	r5, r4
 800bbfa:	e7e0      	b.n	800bbbe <__gethex+0x92>
 800bbfc:	2d00      	cmp	r5, #0
 800bbfe:	d1f7      	bne.n	800bbf0 <__gethex+0xc4>
 800bc00:	7833      	ldrb	r3, [r6, #0]
 800bc02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc06:	2b50      	cmp	r3, #80	; 0x50
 800bc08:	d13b      	bne.n	800bc82 <__gethex+0x156>
 800bc0a:	7873      	ldrb	r3, [r6, #1]
 800bc0c:	2b2b      	cmp	r3, #43	; 0x2b
 800bc0e:	d02c      	beq.n	800bc6a <__gethex+0x13e>
 800bc10:	2b2d      	cmp	r3, #45	; 0x2d
 800bc12:	d02e      	beq.n	800bc72 <__gethex+0x146>
 800bc14:	1c71      	adds	r1, r6, #1
 800bc16:	f04f 0900 	mov.w	r9, #0
 800bc1a:	7808      	ldrb	r0, [r1, #0]
 800bc1c:	f7ff ff70 	bl	800bb00 <__hexdig_fun>
 800bc20:	1e43      	subs	r3, r0, #1
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	2b18      	cmp	r3, #24
 800bc26:	d82c      	bhi.n	800bc82 <__gethex+0x156>
 800bc28:	f1a0 0210 	sub.w	r2, r0, #16
 800bc2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc30:	f7ff ff66 	bl	800bb00 <__hexdig_fun>
 800bc34:	1e43      	subs	r3, r0, #1
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b18      	cmp	r3, #24
 800bc3a:	d91d      	bls.n	800bc78 <__gethex+0x14c>
 800bc3c:	f1b9 0f00 	cmp.w	r9, #0
 800bc40:	d000      	beq.n	800bc44 <__gethex+0x118>
 800bc42:	4252      	negs	r2, r2
 800bc44:	4415      	add	r5, r2
 800bc46:	f8cb 1000 	str.w	r1, [fp]
 800bc4a:	b1e4      	cbz	r4, 800bc86 <__gethex+0x15a>
 800bc4c:	9b00      	ldr	r3, [sp, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bf14      	ite	ne
 800bc52:	2700      	movne	r7, #0
 800bc54:	2706      	moveq	r7, #6
 800bc56:	4638      	mov	r0, r7
 800bc58:	b009      	add	sp, #36	; 0x24
 800bc5a:	ecbd 8b02 	vpop	{d8}
 800bc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc62:	463e      	mov	r6, r7
 800bc64:	4625      	mov	r5, r4
 800bc66:	2401      	movs	r4, #1
 800bc68:	e7ca      	b.n	800bc00 <__gethex+0xd4>
 800bc6a:	f04f 0900 	mov.w	r9, #0
 800bc6e:	1cb1      	adds	r1, r6, #2
 800bc70:	e7d3      	b.n	800bc1a <__gethex+0xee>
 800bc72:	f04f 0901 	mov.w	r9, #1
 800bc76:	e7fa      	b.n	800bc6e <__gethex+0x142>
 800bc78:	230a      	movs	r3, #10
 800bc7a:	fb03 0202 	mla	r2, r3, r2, r0
 800bc7e:	3a10      	subs	r2, #16
 800bc80:	e7d4      	b.n	800bc2c <__gethex+0x100>
 800bc82:	4631      	mov	r1, r6
 800bc84:	e7df      	b.n	800bc46 <__gethex+0x11a>
 800bc86:	1bf3      	subs	r3, r6, r7
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	2b07      	cmp	r3, #7
 800bc8e:	dc0b      	bgt.n	800bca8 <__gethex+0x17c>
 800bc90:	ee18 0a10 	vmov	r0, s16
 800bc94:	f000 faec 	bl	800c270 <_Balloc>
 800bc98:	4604      	mov	r4, r0
 800bc9a:	b940      	cbnz	r0, 800bcae <__gethex+0x182>
 800bc9c:	4b5d      	ldr	r3, [pc, #372]	; (800be14 <__gethex+0x2e8>)
 800bc9e:	4602      	mov	r2, r0
 800bca0:	21de      	movs	r1, #222	; 0xde
 800bca2:	485d      	ldr	r0, [pc, #372]	; (800be18 <__gethex+0x2ec>)
 800bca4:	f7fc fc12 	bl	80084cc <__assert_func>
 800bca8:	3101      	adds	r1, #1
 800bcaa:	105b      	asrs	r3, r3, #1
 800bcac:	e7ee      	b.n	800bc8c <__gethex+0x160>
 800bcae:	f100 0914 	add.w	r9, r0, #20
 800bcb2:	f04f 0b00 	mov.w	fp, #0
 800bcb6:	f1ca 0301 	rsb	r3, sl, #1
 800bcba:	f8cd 9008 	str.w	r9, [sp, #8]
 800bcbe:	f8cd b000 	str.w	fp, [sp]
 800bcc2:	9306      	str	r3, [sp, #24]
 800bcc4:	42b7      	cmp	r7, r6
 800bcc6:	d340      	bcc.n	800bd4a <__gethex+0x21e>
 800bcc8:	9802      	ldr	r0, [sp, #8]
 800bcca:	9b00      	ldr	r3, [sp, #0]
 800bccc:	f840 3b04 	str.w	r3, [r0], #4
 800bcd0:	eba0 0009 	sub.w	r0, r0, r9
 800bcd4:	1080      	asrs	r0, r0, #2
 800bcd6:	0146      	lsls	r6, r0, #5
 800bcd8:	6120      	str	r0, [r4, #16]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 fbba 	bl	800c454 <__hi0bits>
 800bce0:	1a30      	subs	r0, r6, r0
 800bce2:	f8d8 6000 	ldr.w	r6, [r8]
 800bce6:	42b0      	cmp	r0, r6
 800bce8:	dd63      	ble.n	800bdb2 <__gethex+0x286>
 800bcea:	1b87      	subs	r7, r0, r6
 800bcec:	4639      	mov	r1, r7
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 ff5e 	bl	800cbb0 <__any_on>
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	b1a8      	cbz	r0, 800bd24 <__gethex+0x1f8>
 800bcf8:	1e7b      	subs	r3, r7, #1
 800bcfa:	1159      	asrs	r1, r3, #5
 800bcfc:	f003 021f 	and.w	r2, r3, #31
 800bd00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bd04:	f04f 0a01 	mov.w	sl, #1
 800bd08:	fa0a f202 	lsl.w	r2, sl, r2
 800bd0c:	420a      	tst	r2, r1
 800bd0e:	d009      	beq.n	800bd24 <__gethex+0x1f8>
 800bd10:	4553      	cmp	r3, sl
 800bd12:	dd05      	ble.n	800bd20 <__gethex+0x1f4>
 800bd14:	1eb9      	subs	r1, r7, #2
 800bd16:	4620      	mov	r0, r4
 800bd18:	f000 ff4a 	bl	800cbb0 <__any_on>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d145      	bne.n	800bdac <__gethex+0x280>
 800bd20:	f04f 0a02 	mov.w	sl, #2
 800bd24:	4639      	mov	r1, r7
 800bd26:	4620      	mov	r0, r4
 800bd28:	f7ff fe98 	bl	800ba5c <rshift>
 800bd2c:	443d      	add	r5, r7
 800bd2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd32:	42ab      	cmp	r3, r5
 800bd34:	da4c      	bge.n	800bdd0 <__gethex+0x2a4>
 800bd36:	ee18 0a10 	vmov	r0, s16
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	f000 fad8 	bl	800c2f0 <_Bfree>
 800bd40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd42:	2300      	movs	r3, #0
 800bd44:	6013      	str	r3, [r2, #0]
 800bd46:	27a3      	movs	r7, #163	; 0xa3
 800bd48:	e785      	b.n	800bc56 <__gethex+0x12a>
 800bd4a:	1e73      	subs	r3, r6, #1
 800bd4c:	9a05      	ldr	r2, [sp, #20]
 800bd4e:	9303      	str	r3, [sp, #12]
 800bd50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d019      	beq.n	800bd8c <__gethex+0x260>
 800bd58:	f1bb 0f20 	cmp.w	fp, #32
 800bd5c:	d107      	bne.n	800bd6e <__gethex+0x242>
 800bd5e:	9b02      	ldr	r3, [sp, #8]
 800bd60:	9a00      	ldr	r2, [sp, #0]
 800bd62:	f843 2b04 	str.w	r2, [r3], #4
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	469b      	mov	fp, r3
 800bd6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bd72:	f7ff fec5 	bl	800bb00 <__hexdig_fun>
 800bd76:	9b00      	ldr	r3, [sp, #0]
 800bd78:	f000 000f 	and.w	r0, r0, #15
 800bd7c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bd80:	4303      	orrs	r3, r0
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	f10b 0b04 	add.w	fp, fp, #4
 800bd88:	9b03      	ldr	r3, [sp, #12]
 800bd8a:	e00d      	b.n	800bda8 <__gethex+0x27c>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	9a06      	ldr	r2, [sp, #24]
 800bd90:	4413      	add	r3, r2
 800bd92:	42bb      	cmp	r3, r7
 800bd94:	d3e0      	bcc.n	800bd58 <__gethex+0x22c>
 800bd96:	4618      	mov	r0, r3
 800bd98:	9901      	ldr	r1, [sp, #4]
 800bd9a:	9307      	str	r3, [sp, #28]
 800bd9c:	4652      	mov	r2, sl
 800bd9e:	f001 f913 	bl	800cfc8 <strncmp>
 800bda2:	9b07      	ldr	r3, [sp, #28]
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d1d7      	bne.n	800bd58 <__gethex+0x22c>
 800bda8:	461e      	mov	r6, r3
 800bdaa:	e78b      	b.n	800bcc4 <__gethex+0x198>
 800bdac:	f04f 0a03 	mov.w	sl, #3
 800bdb0:	e7b8      	b.n	800bd24 <__gethex+0x1f8>
 800bdb2:	da0a      	bge.n	800bdca <__gethex+0x29e>
 800bdb4:	1a37      	subs	r7, r6, r0
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	ee18 0a10 	vmov	r0, s16
 800bdbc:	463a      	mov	r2, r7
 800bdbe:	f000 fcb3 	bl	800c728 <__lshift>
 800bdc2:	1bed      	subs	r5, r5, r7
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	f100 0914 	add.w	r9, r0, #20
 800bdca:	f04f 0a00 	mov.w	sl, #0
 800bdce:	e7ae      	b.n	800bd2e <__gethex+0x202>
 800bdd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bdd4:	42a8      	cmp	r0, r5
 800bdd6:	dd72      	ble.n	800bebe <__gethex+0x392>
 800bdd8:	1b45      	subs	r5, r0, r5
 800bdda:	42ae      	cmp	r6, r5
 800bddc:	dc36      	bgt.n	800be4c <__gethex+0x320>
 800bdde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d02a      	beq.n	800be3c <__gethex+0x310>
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d02c      	beq.n	800be44 <__gethex+0x318>
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d11c      	bne.n	800be28 <__gethex+0x2fc>
 800bdee:	42ae      	cmp	r6, r5
 800bdf0:	d11a      	bne.n	800be28 <__gethex+0x2fc>
 800bdf2:	2e01      	cmp	r6, #1
 800bdf4:	d112      	bne.n	800be1c <__gethex+0x2f0>
 800bdf6:	9a04      	ldr	r2, [sp, #16]
 800bdf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	2301      	movs	r3, #1
 800be00:	6123      	str	r3, [r4, #16]
 800be02:	f8c9 3000 	str.w	r3, [r9]
 800be06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be08:	2762      	movs	r7, #98	; 0x62
 800be0a:	601c      	str	r4, [r3, #0]
 800be0c:	e723      	b.n	800bc56 <__gethex+0x12a>
 800be0e:	bf00      	nop
 800be10:	0800f7f8 	.word	0x0800f7f8
 800be14:	0800f77f 	.word	0x0800f77f
 800be18:	0800f790 	.word	0x0800f790
 800be1c:	1e71      	subs	r1, r6, #1
 800be1e:	4620      	mov	r0, r4
 800be20:	f000 fec6 	bl	800cbb0 <__any_on>
 800be24:	2800      	cmp	r0, #0
 800be26:	d1e6      	bne.n	800bdf6 <__gethex+0x2ca>
 800be28:	ee18 0a10 	vmov	r0, s16
 800be2c:	4621      	mov	r1, r4
 800be2e:	f000 fa5f 	bl	800c2f0 <_Bfree>
 800be32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be34:	2300      	movs	r3, #0
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	2750      	movs	r7, #80	; 0x50
 800be3a:	e70c      	b.n	800bc56 <__gethex+0x12a>
 800be3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1f2      	bne.n	800be28 <__gethex+0x2fc>
 800be42:	e7d8      	b.n	800bdf6 <__gethex+0x2ca>
 800be44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1d5      	bne.n	800bdf6 <__gethex+0x2ca>
 800be4a:	e7ed      	b.n	800be28 <__gethex+0x2fc>
 800be4c:	1e6f      	subs	r7, r5, #1
 800be4e:	f1ba 0f00 	cmp.w	sl, #0
 800be52:	d131      	bne.n	800beb8 <__gethex+0x38c>
 800be54:	b127      	cbz	r7, 800be60 <__gethex+0x334>
 800be56:	4639      	mov	r1, r7
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 fea9 	bl	800cbb0 <__any_on>
 800be5e:	4682      	mov	sl, r0
 800be60:	117b      	asrs	r3, r7, #5
 800be62:	2101      	movs	r1, #1
 800be64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800be68:	f007 071f 	and.w	r7, r7, #31
 800be6c:	fa01 f707 	lsl.w	r7, r1, r7
 800be70:	421f      	tst	r7, r3
 800be72:	4629      	mov	r1, r5
 800be74:	4620      	mov	r0, r4
 800be76:	bf18      	it	ne
 800be78:	f04a 0a02 	orrne.w	sl, sl, #2
 800be7c:	1b76      	subs	r6, r6, r5
 800be7e:	f7ff fded 	bl	800ba5c <rshift>
 800be82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be86:	2702      	movs	r7, #2
 800be88:	f1ba 0f00 	cmp.w	sl, #0
 800be8c:	d048      	beq.n	800bf20 <__gethex+0x3f4>
 800be8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be92:	2b02      	cmp	r3, #2
 800be94:	d015      	beq.n	800bec2 <__gethex+0x396>
 800be96:	2b03      	cmp	r3, #3
 800be98:	d017      	beq.n	800beca <__gethex+0x39e>
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d109      	bne.n	800beb2 <__gethex+0x386>
 800be9e:	f01a 0f02 	tst.w	sl, #2
 800bea2:	d006      	beq.n	800beb2 <__gethex+0x386>
 800bea4:	f8d9 0000 	ldr.w	r0, [r9]
 800bea8:	ea4a 0a00 	orr.w	sl, sl, r0
 800beac:	f01a 0f01 	tst.w	sl, #1
 800beb0:	d10e      	bne.n	800bed0 <__gethex+0x3a4>
 800beb2:	f047 0710 	orr.w	r7, r7, #16
 800beb6:	e033      	b.n	800bf20 <__gethex+0x3f4>
 800beb8:	f04f 0a01 	mov.w	sl, #1
 800bebc:	e7d0      	b.n	800be60 <__gethex+0x334>
 800bebe:	2701      	movs	r7, #1
 800bec0:	e7e2      	b.n	800be88 <__gethex+0x35c>
 800bec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bec4:	f1c3 0301 	rsb	r3, r3, #1
 800bec8:	9315      	str	r3, [sp, #84]	; 0x54
 800beca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800becc:	2b00      	cmp	r3, #0
 800bece:	d0f0      	beq.n	800beb2 <__gethex+0x386>
 800bed0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bed4:	f104 0314 	add.w	r3, r4, #20
 800bed8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bedc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bee0:	f04f 0c00 	mov.w	ip, #0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800beee:	d01c      	beq.n	800bf2a <__gethex+0x3fe>
 800bef0:	3201      	adds	r2, #1
 800bef2:	6002      	str	r2, [r0, #0]
 800bef4:	2f02      	cmp	r7, #2
 800bef6:	f104 0314 	add.w	r3, r4, #20
 800befa:	d13f      	bne.n	800bf7c <__gethex+0x450>
 800befc:	f8d8 2000 	ldr.w	r2, [r8]
 800bf00:	3a01      	subs	r2, #1
 800bf02:	42b2      	cmp	r2, r6
 800bf04:	d10a      	bne.n	800bf1c <__gethex+0x3f0>
 800bf06:	1171      	asrs	r1, r6, #5
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf0e:	f006 061f 	and.w	r6, r6, #31
 800bf12:	fa02 f606 	lsl.w	r6, r2, r6
 800bf16:	421e      	tst	r6, r3
 800bf18:	bf18      	it	ne
 800bf1a:	4617      	movne	r7, r2
 800bf1c:	f047 0720 	orr.w	r7, r7, #32
 800bf20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf22:	601c      	str	r4, [r3, #0]
 800bf24:	9b04      	ldr	r3, [sp, #16]
 800bf26:	601d      	str	r5, [r3, #0]
 800bf28:	e695      	b.n	800bc56 <__gethex+0x12a>
 800bf2a:	4299      	cmp	r1, r3
 800bf2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf30:	d8d8      	bhi.n	800bee4 <__gethex+0x3b8>
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	459b      	cmp	fp, r3
 800bf36:	db19      	blt.n	800bf6c <__gethex+0x440>
 800bf38:	6861      	ldr	r1, [r4, #4]
 800bf3a:	ee18 0a10 	vmov	r0, s16
 800bf3e:	3101      	adds	r1, #1
 800bf40:	f000 f996 	bl	800c270 <_Balloc>
 800bf44:	4681      	mov	r9, r0
 800bf46:	b918      	cbnz	r0, 800bf50 <__gethex+0x424>
 800bf48:	4b1a      	ldr	r3, [pc, #104]	; (800bfb4 <__gethex+0x488>)
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	2184      	movs	r1, #132	; 0x84
 800bf4e:	e6a8      	b.n	800bca2 <__gethex+0x176>
 800bf50:	6922      	ldr	r2, [r4, #16]
 800bf52:	3202      	adds	r2, #2
 800bf54:	f104 010c 	add.w	r1, r4, #12
 800bf58:	0092      	lsls	r2, r2, #2
 800bf5a:	300c      	adds	r0, #12
 800bf5c:	f7fc fda4 	bl	8008aa8 <memcpy>
 800bf60:	4621      	mov	r1, r4
 800bf62:	ee18 0a10 	vmov	r0, s16
 800bf66:	f000 f9c3 	bl	800c2f0 <_Bfree>
 800bf6a:	464c      	mov	r4, r9
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf74:	6122      	str	r2, [r4, #16]
 800bf76:	2201      	movs	r2, #1
 800bf78:	615a      	str	r2, [r3, #20]
 800bf7a:	e7bb      	b.n	800bef4 <__gethex+0x3c8>
 800bf7c:	6922      	ldr	r2, [r4, #16]
 800bf7e:	455a      	cmp	r2, fp
 800bf80:	dd0b      	ble.n	800bf9a <__gethex+0x46e>
 800bf82:	2101      	movs	r1, #1
 800bf84:	4620      	mov	r0, r4
 800bf86:	f7ff fd69 	bl	800ba5c <rshift>
 800bf8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf8e:	3501      	adds	r5, #1
 800bf90:	42ab      	cmp	r3, r5
 800bf92:	f6ff aed0 	blt.w	800bd36 <__gethex+0x20a>
 800bf96:	2701      	movs	r7, #1
 800bf98:	e7c0      	b.n	800bf1c <__gethex+0x3f0>
 800bf9a:	f016 061f 	ands.w	r6, r6, #31
 800bf9e:	d0fa      	beq.n	800bf96 <__gethex+0x46a>
 800bfa0:	4453      	add	r3, sl
 800bfa2:	f1c6 0620 	rsb	r6, r6, #32
 800bfa6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bfaa:	f000 fa53 	bl	800c454 <__hi0bits>
 800bfae:	42b0      	cmp	r0, r6
 800bfb0:	dbe7      	blt.n	800bf82 <__gethex+0x456>
 800bfb2:	e7f0      	b.n	800bf96 <__gethex+0x46a>
 800bfb4:	0800f77f 	.word	0x0800f77f

0800bfb8 <L_shift>:
 800bfb8:	f1c2 0208 	rsb	r2, r2, #8
 800bfbc:	0092      	lsls	r2, r2, #2
 800bfbe:	b570      	push	{r4, r5, r6, lr}
 800bfc0:	f1c2 0620 	rsb	r6, r2, #32
 800bfc4:	6843      	ldr	r3, [r0, #4]
 800bfc6:	6804      	ldr	r4, [r0, #0]
 800bfc8:	fa03 f506 	lsl.w	r5, r3, r6
 800bfcc:	432c      	orrs	r4, r5
 800bfce:	40d3      	lsrs	r3, r2
 800bfd0:	6004      	str	r4, [r0, #0]
 800bfd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfd6:	4288      	cmp	r0, r1
 800bfd8:	d3f4      	bcc.n	800bfc4 <L_shift+0xc>
 800bfda:	bd70      	pop	{r4, r5, r6, pc}

0800bfdc <__match>:
 800bfdc:	b530      	push	{r4, r5, lr}
 800bfde:	6803      	ldr	r3, [r0, #0]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe6:	b914      	cbnz	r4, 800bfee <__match+0x12>
 800bfe8:	6003      	str	r3, [r0, #0]
 800bfea:	2001      	movs	r0, #1
 800bfec:	bd30      	pop	{r4, r5, pc}
 800bfee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bff2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bff6:	2d19      	cmp	r5, #25
 800bff8:	bf98      	it	ls
 800bffa:	3220      	addls	r2, #32
 800bffc:	42a2      	cmp	r2, r4
 800bffe:	d0f0      	beq.n	800bfe2 <__match+0x6>
 800c000:	2000      	movs	r0, #0
 800c002:	e7f3      	b.n	800bfec <__match+0x10>

0800c004 <__hexnan>:
 800c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	680b      	ldr	r3, [r1, #0]
 800c00a:	115e      	asrs	r6, r3, #5
 800c00c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c010:	f013 031f 	ands.w	r3, r3, #31
 800c014:	b087      	sub	sp, #28
 800c016:	bf18      	it	ne
 800c018:	3604      	addne	r6, #4
 800c01a:	2500      	movs	r5, #0
 800c01c:	1f37      	subs	r7, r6, #4
 800c01e:	4690      	mov	r8, r2
 800c020:	6802      	ldr	r2, [r0, #0]
 800c022:	9301      	str	r3, [sp, #4]
 800c024:	4682      	mov	sl, r0
 800c026:	f846 5c04 	str.w	r5, [r6, #-4]
 800c02a:	46b9      	mov	r9, r7
 800c02c:	463c      	mov	r4, r7
 800c02e:	9502      	str	r5, [sp, #8]
 800c030:	46ab      	mov	fp, r5
 800c032:	7851      	ldrb	r1, [r2, #1]
 800c034:	1c53      	adds	r3, r2, #1
 800c036:	9303      	str	r3, [sp, #12]
 800c038:	b341      	cbz	r1, 800c08c <__hexnan+0x88>
 800c03a:	4608      	mov	r0, r1
 800c03c:	9205      	str	r2, [sp, #20]
 800c03e:	9104      	str	r1, [sp, #16]
 800c040:	f7ff fd5e 	bl	800bb00 <__hexdig_fun>
 800c044:	2800      	cmp	r0, #0
 800c046:	d14f      	bne.n	800c0e8 <__hexnan+0xe4>
 800c048:	9904      	ldr	r1, [sp, #16]
 800c04a:	9a05      	ldr	r2, [sp, #20]
 800c04c:	2920      	cmp	r1, #32
 800c04e:	d818      	bhi.n	800c082 <__hexnan+0x7e>
 800c050:	9b02      	ldr	r3, [sp, #8]
 800c052:	459b      	cmp	fp, r3
 800c054:	dd13      	ble.n	800c07e <__hexnan+0x7a>
 800c056:	454c      	cmp	r4, r9
 800c058:	d206      	bcs.n	800c068 <__hexnan+0x64>
 800c05a:	2d07      	cmp	r5, #7
 800c05c:	dc04      	bgt.n	800c068 <__hexnan+0x64>
 800c05e:	462a      	mov	r2, r5
 800c060:	4649      	mov	r1, r9
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff ffa8 	bl	800bfb8 <L_shift>
 800c068:	4544      	cmp	r4, r8
 800c06a:	d950      	bls.n	800c10e <__hexnan+0x10a>
 800c06c:	2300      	movs	r3, #0
 800c06e:	f1a4 0904 	sub.w	r9, r4, #4
 800c072:	f844 3c04 	str.w	r3, [r4, #-4]
 800c076:	f8cd b008 	str.w	fp, [sp, #8]
 800c07a:	464c      	mov	r4, r9
 800c07c:	461d      	mov	r5, r3
 800c07e:	9a03      	ldr	r2, [sp, #12]
 800c080:	e7d7      	b.n	800c032 <__hexnan+0x2e>
 800c082:	2929      	cmp	r1, #41	; 0x29
 800c084:	d156      	bne.n	800c134 <__hexnan+0x130>
 800c086:	3202      	adds	r2, #2
 800c088:	f8ca 2000 	str.w	r2, [sl]
 800c08c:	f1bb 0f00 	cmp.w	fp, #0
 800c090:	d050      	beq.n	800c134 <__hexnan+0x130>
 800c092:	454c      	cmp	r4, r9
 800c094:	d206      	bcs.n	800c0a4 <__hexnan+0xa0>
 800c096:	2d07      	cmp	r5, #7
 800c098:	dc04      	bgt.n	800c0a4 <__hexnan+0xa0>
 800c09a:	462a      	mov	r2, r5
 800c09c:	4649      	mov	r1, r9
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f7ff ff8a 	bl	800bfb8 <L_shift>
 800c0a4:	4544      	cmp	r4, r8
 800c0a6:	d934      	bls.n	800c112 <__hexnan+0x10e>
 800c0a8:	f1a8 0204 	sub.w	r2, r8, #4
 800c0ac:	4623      	mov	r3, r4
 800c0ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0b6:	429f      	cmp	r7, r3
 800c0b8:	d2f9      	bcs.n	800c0ae <__hexnan+0xaa>
 800c0ba:	1b3b      	subs	r3, r7, r4
 800c0bc:	f023 0303 	bic.w	r3, r3, #3
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	3401      	adds	r4, #1
 800c0c4:	3e03      	subs	r6, #3
 800c0c6:	42b4      	cmp	r4, r6
 800c0c8:	bf88      	it	hi
 800c0ca:	2304      	movhi	r3, #4
 800c0cc:	4443      	add	r3, r8
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f843 2b04 	str.w	r2, [r3], #4
 800c0d4:	429f      	cmp	r7, r3
 800c0d6:	d2fb      	bcs.n	800c0d0 <__hexnan+0xcc>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	b91b      	cbnz	r3, 800c0e4 <__hexnan+0xe0>
 800c0dc:	4547      	cmp	r7, r8
 800c0de:	d127      	bne.n	800c130 <__hexnan+0x12c>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	603b      	str	r3, [r7, #0]
 800c0e4:	2005      	movs	r0, #5
 800c0e6:	e026      	b.n	800c136 <__hexnan+0x132>
 800c0e8:	3501      	adds	r5, #1
 800c0ea:	2d08      	cmp	r5, #8
 800c0ec:	f10b 0b01 	add.w	fp, fp, #1
 800c0f0:	dd06      	ble.n	800c100 <__hexnan+0xfc>
 800c0f2:	4544      	cmp	r4, r8
 800c0f4:	d9c3      	bls.n	800c07e <__hexnan+0x7a>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0fc:	2501      	movs	r5, #1
 800c0fe:	3c04      	subs	r4, #4
 800c100:	6822      	ldr	r2, [r4, #0]
 800c102:	f000 000f 	and.w	r0, r0, #15
 800c106:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c10a:	6022      	str	r2, [r4, #0]
 800c10c:	e7b7      	b.n	800c07e <__hexnan+0x7a>
 800c10e:	2508      	movs	r5, #8
 800c110:	e7b5      	b.n	800c07e <__hexnan+0x7a>
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0df      	beq.n	800c0d8 <__hexnan+0xd4>
 800c118:	f04f 32ff 	mov.w	r2, #4294967295
 800c11c:	f1c3 0320 	rsb	r3, r3, #32
 800c120:	fa22 f303 	lsr.w	r3, r2, r3
 800c124:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c128:	401a      	ands	r2, r3
 800c12a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c12e:	e7d3      	b.n	800c0d8 <__hexnan+0xd4>
 800c130:	3f04      	subs	r7, #4
 800c132:	e7d1      	b.n	800c0d8 <__hexnan+0xd4>
 800c134:	2004      	movs	r0, #4
 800c136:	b007      	add	sp, #28
 800c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c13c <_localeconv_r>:
 800c13c:	4800      	ldr	r0, [pc, #0]	; (800c140 <_localeconv_r+0x4>)
 800c13e:	4770      	bx	lr
 800c140:	20000164 	.word	0x20000164

0800c144 <_lseek_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	4d07      	ldr	r5, [pc, #28]	; (800c164 <_lseek_r+0x20>)
 800c148:	4604      	mov	r4, r0
 800c14a:	4608      	mov	r0, r1
 800c14c:	4611      	mov	r1, r2
 800c14e:	2200      	movs	r2, #0
 800c150:	602a      	str	r2, [r5, #0]
 800c152:	461a      	mov	r2, r3
 800c154:	f7f5 f912 	bl	800137c <_lseek>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_lseek_r+0x1e>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_lseek_r+0x1e>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	20000ee8 	.word	0x20000ee8

0800c168 <__swhatbuf_r>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	460e      	mov	r6, r1
 800c16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c170:	2900      	cmp	r1, #0
 800c172:	b096      	sub	sp, #88	; 0x58
 800c174:	4614      	mov	r4, r2
 800c176:	461d      	mov	r5, r3
 800c178:	da08      	bge.n	800c18c <__swhatbuf_r+0x24>
 800c17a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	602a      	str	r2, [r5, #0]
 800c182:	061a      	lsls	r2, r3, #24
 800c184:	d410      	bmi.n	800c1a8 <__swhatbuf_r+0x40>
 800c186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c18a:	e00e      	b.n	800c1aa <__swhatbuf_r+0x42>
 800c18c:	466a      	mov	r2, sp
 800c18e:	f000 ff3d 	bl	800d00c <_fstat_r>
 800c192:	2800      	cmp	r0, #0
 800c194:	dbf1      	blt.n	800c17a <__swhatbuf_r+0x12>
 800c196:	9a01      	ldr	r2, [sp, #4]
 800c198:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c19c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1a0:	425a      	negs	r2, r3
 800c1a2:	415a      	adcs	r2, r3
 800c1a4:	602a      	str	r2, [r5, #0]
 800c1a6:	e7ee      	b.n	800c186 <__swhatbuf_r+0x1e>
 800c1a8:	2340      	movs	r3, #64	; 0x40
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	b016      	add	sp, #88	; 0x58
 800c1b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1b4 <__smakebuf_r>:
 800c1b4:	898b      	ldrh	r3, [r1, #12]
 800c1b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1b8:	079d      	lsls	r5, r3, #30
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460c      	mov	r4, r1
 800c1be:	d507      	bpl.n	800c1d0 <__smakebuf_r+0x1c>
 800c1c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	6163      	str	r3, [r4, #20]
 800c1cc:	b002      	add	sp, #8
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	ab01      	add	r3, sp, #4
 800c1d2:	466a      	mov	r2, sp
 800c1d4:	f7ff ffc8 	bl	800c168 <__swhatbuf_r>
 800c1d8:	9900      	ldr	r1, [sp, #0]
 800c1da:	4605      	mov	r5, r0
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7fc fd15 	bl	8008c0c <_malloc_r>
 800c1e2:	b948      	cbnz	r0, 800c1f8 <__smakebuf_r+0x44>
 800c1e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e8:	059a      	lsls	r2, r3, #22
 800c1ea:	d4ef      	bmi.n	800c1cc <__smakebuf_r+0x18>
 800c1ec:	f023 0303 	bic.w	r3, r3, #3
 800c1f0:	f043 0302 	orr.w	r3, r3, #2
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	e7e3      	b.n	800c1c0 <__smakebuf_r+0xc>
 800c1f8:	4b0d      	ldr	r3, [pc, #52]	; (800c230 <__smakebuf_r+0x7c>)
 800c1fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	6020      	str	r0, [r4, #0]
 800c200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	9b00      	ldr	r3, [sp, #0]
 800c208:	6163      	str	r3, [r4, #20]
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	6120      	str	r0, [r4, #16]
 800c20e:	b15b      	cbz	r3, 800c228 <__smakebuf_r+0x74>
 800c210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c214:	4630      	mov	r0, r6
 800c216:	f000 ff0b 	bl	800d030 <_isatty_r>
 800c21a:	b128      	cbz	r0, 800c228 <__smakebuf_r+0x74>
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	f023 0303 	bic.w	r3, r3, #3
 800c222:	f043 0301 	orr.w	r3, r3, #1
 800c226:	81a3      	strh	r3, [r4, #12]
 800c228:	89a0      	ldrh	r0, [r4, #12]
 800c22a:	4305      	orrs	r5, r0
 800c22c:	81a5      	strh	r5, [r4, #12]
 800c22e:	e7cd      	b.n	800c1cc <__smakebuf_r+0x18>
 800c230:	08008715 	.word	0x08008715

0800c234 <__ascii_mbtowc>:
 800c234:	b082      	sub	sp, #8
 800c236:	b901      	cbnz	r1, 800c23a <__ascii_mbtowc+0x6>
 800c238:	a901      	add	r1, sp, #4
 800c23a:	b142      	cbz	r2, 800c24e <__ascii_mbtowc+0x1a>
 800c23c:	b14b      	cbz	r3, 800c252 <__ascii_mbtowc+0x1e>
 800c23e:	7813      	ldrb	r3, [r2, #0]
 800c240:	600b      	str	r3, [r1, #0]
 800c242:	7812      	ldrb	r2, [r2, #0]
 800c244:	1e10      	subs	r0, r2, #0
 800c246:	bf18      	it	ne
 800c248:	2001      	movne	r0, #1
 800c24a:	b002      	add	sp, #8
 800c24c:	4770      	bx	lr
 800c24e:	4610      	mov	r0, r2
 800c250:	e7fb      	b.n	800c24a <__ascii_mbtowc+0x16>
 800c252:	f06f 0001 	mvn.w	r0, #1
 800c256:	e7f8      	b.n	800c24a <__ascii_mbtowc+0x16>

0800c258 <__malloc_lock>:
 800c258:	4801      	ldr	r0, [pc, #4]	; (800c260 <__malloc_lock+0x8>)
 800c25a:	f7fc bc12 	b.w	8008a82 <__retarget_lock_acquire_recursive>
 800c25e:	bf00      	nop
 800c260:	20000edc 	.word	0x20000edc

0800c264 <__malloc_unlock>:
 800c264:	4801      	ldr	r0, [pc, #4]	; (800c26c <__malloc_unlock+0x8>)
 800c266:	f7fc bc0d 	b.w	8008a84 <__retarget_lock_release_recursive>
 800c26a:	bf00      	nop
 800c26c:	20000edc 	.word	0x20000edc

0800c270 <_Balloc>:
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c274:	4604      	mov	r4, r0
 800c276:	460d      	mov	r5, r1
 800c278:	b976      	cbnz	r6, 800c298 <_Balloc+0x28>
 800c27a:	2010      	movs	r0, #16
 800c27c:	f7fc fc04 	bl	8008a88 <malloc>
 800c280:	4602      	mov	r2, r0
 800c282:	6260      	str	r0, [r4, #36]	; 0x24
 800c284:	b920      	cbnz	r0, 800c290 <_Balloc+0x20>
 800c286:	4b18      	ldr	r3, [pc, #96]	; (800c2e8 <_Balloc+0x78>)
 800c288:	4818      	ldr	r0, [pc, #96]	; (800c2ec <_Balloc+0x7c>)
 800c28a:	2166      	movs	r1, #102	; 0x66
 800c28c:	f7fc f91e 	bl	80084cc <__assert_func>
 800c290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c294:	6006      	str	r6, [r0, #0]
 800c296:	60c6      	str	r6, [r0, #12]
 800c298:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c29a:	68f3      	ldr	r3, [r6, #12]
 800c29c:	b183      	cbz	r3, 800c2c0 <_Balloc+0x50>
 800c29e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2a6:	b9b8      	cbnz	r0, 800c2d8 <_Balloc+0x68>
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	fa01 f605 	lsl.w	r6, r1, r5
 800c2ae:	1d72      	adds	r2, r6, #5
 800c2b0:	0092      	lsls	r2, r2, #2
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f7fc fc28 	bl	8008b08 <_calloc_r>
 800c2b8:	b160      	cbz	r0, 800c2d4 <_Balloc+0x64>
 800c2ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2be:	e00e      	b.n	800c2de <_Balloc+0x6e>
 800c2c0:	2221      	movs	r2, #33	; 0x21
 800c2c2:	2104      	movs	r1, #4
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f7fc fc1f 	bl	8008b08 <_calloc_r>
 800c2ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2cc:	60f0      	str	r0, [r6, #12]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e4      	bne.n	800c29e <_Balloc+0x2e>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
 800c2d8:	6802      	ldr	r2, [r0, #0]
 800c2da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2e4:	e7f7      	b.n	800c2d6 <_Balloc+0x66>
 800c2e6:	bf00      	nop
 800c2e8:	0800f70d 	.word	0x0800f70d
 800c2ec:	0800f80c 	.word	0x0800f80c

0800c2f0 <_Bfree>:
 800c2f0:	b570      	push	{r4, r5, r6, lr}
 800c2f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	b976      	cbnz	r6, 800c318 <_Bfree+0x28>
 800c2fa:	2010      	movs	r0, #16
 800c2fc:	f7fc fbc4 	bl	8008a88 <malloc>
 800c300:	4602      	mov	r2, r0
 800c302:	6268      	str	r0, [r5, #36]	; 0x24
 800c304:	b920      	cbnz	r0, 800c310 <_Bfree+0x20>
 800c306:	4b09      	ldr	r3, [pc, #36]	; (800c32c <_Bfree+0x3c>)
 800c308:	4809      	ldr	r0, [pc, #36]	; (800c330 <_Bfree+0x40>)
 800c30a:	218a      	movs	r1, #138	; 0x8a
 800c30c:	f7fc f8de 	bl	80084cc <__assert_func>
 800c310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c314:	6006      	str	r6, [r0, #0]
 800c316:	60c6      	str	r6, [r0, #12]
 800c318:	b13c      	cbz	r4, 800c32a <_Bfree+0x3a>
 800c31a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c31c:	6862      	ldr	r2, [r4, #4]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c324:	6021      	str	r1, [r4, #0]
 800c326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c32a:	bd70      	pop	{r4, r5, r6, pc}
 800c32c:	0800f70d 	.word	0x0800f70d
 800c330:	0800f80c 	.word	0x0800f80c

0800c334 <__multadd>:
 800c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c338:	690d      	ldr	r5, [r1, #16]
 800c33a:	4607      	mov	r7, r0
 800c33c:	460c      	mov	r4, r1
 800c33e:	461e      	mov	r6, r3
 800c340:	f101 0c14 	add.w	ip, r1, #20
 800c344:	2000      	movs	r0, #0
 800c346:	f8dc 3000 	ldr.w	r3, [ip]
 800c34a:	b299      	uxth	r1, r3
 800c34c:	fb02 6101 	mla	r1, r2, r1, r6
 800c350:	0c1e      	lsrs	r6, r3, #16
 800c352:	0c0b      	lsrs	r3, r1, #16
 800c354:	fb02 3306 	mla	r3, r2, r6, r3
 800c358:	b289      	uxth	r1, r1
 800c35a:	3001      	adds	r0, #1
 800c35c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c360:	4285      	cmp	r5, r0
 800c362:	f84c 1b04 	str.w	r1, [ip], #4
 800c366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c36a:	dcec      	bgt.n	800c346 <__multadd+0x12>
 800c36c:	b30e      	cbz	r6, 800c3b2 <__multadd+0x7e>
 800c36e:	68a3      	ldr	r3, [r4, #8]
 800c370:	42ab      	cmp	r3, r5
 800c372:	dc19      	bgt.n	800c3a8 <__multadd+0x74>
 800c374:	6861      	ldr	r1, [r4, #4]
 800c376:	4638      	mov	r0, r7
 800c378:	3101      	adds	r1, #1
 800c37a:	f7ff ff79 	bl	800c270 <_Balloc>
 800c37e:	4680      	mov	r8, r0
 800c380:	b928      	cbnz	r0, 800c38e <__multadd+0x5a>
 800c382:	4602      	mov	r2, r0
 800c384:	4b0c      	ldr	r3, [pc, #48]	; (800c3b8 <__multadd+0x84>)
 800c386:	480d      	ldr	r0, [pc, #52]	; (800c3bc <__multadd+0x88>)
 800c388:	21b5      	movs	r1, #181	; 0xb5
 800c38a:	f7fc f89f 	bl	80084cc <__assert_func>
 800c38e:	6922      	ldr	r2, [r4, #16]
 800c390:	3202      	adds	r2, #2
 800c392:	f104 010c 	add.w	r1, r4, #12
 800c396:	0092      	lsls	r2, r2, #2
 800c398:	300c      	adds	r0, #12
 800c39a:	f7fc fb85 	bl	8008aa8 <memcpy>
 800c39e:	4621      	mov	r1, r4
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	f7ff ffa5 	bl	800c2f0 <_Bfree>
 800c3a6:	4644      	mov	r4, r8
 800c3a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3ac:	3501      	adds	r5, #1
 800c3ae:	615e      	str	r6, [r3, #20]
 800c3b0:	6125      	str	r5, [r4, #16]
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b8:	0800f77f 	.word	0x0800f77f
 800c3bc:	0800f80c 	.word	0x0800f80c

0800c3c0 <__s2b>:
 800c3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	4615      	mov	r5, r2
 800c3c8:	461f      	mov	r7, r3
 800c3ca:	2209      	movs	r2, #9
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	db09      	blt.n	800c3f0 <__s2b+0x30>
 800c3dc:	4630      	mov	r0, r6
 800c3de:	f7ff ff47 	bl	800c270 <_Balloc>
 800c3e2:	b940      	cbnz	r0, 800c3f6 <__s2b+0x36>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	4b19      	ldr	r3, [pc, #100]	; (800c44c <__s2b+0x8c>)
 800c3e8:	4819      	ldr	r0, [pc, #100]	; (800c450 <__s2b+0x90>)
 800c3ea:	21ce      	movs	r1, #206	; 0xce
 800c3ec:	f7fc f86e 	bl	80084cc <__assert_func>
 800c3f0:	0052      	lsls	r2, r2, #1
 800c3f2:	3101      	adds	r1, #1
 800c3f4:	e7f0      	b.n	800c3d8 <__s2b+0x18>
 800c3f6:	9b08      	ldr	r3, [sp, #32]
 800c3f8:	6143      	str	r3, [r0, #20]
 800c3fa:	2d09      	cmp	r5, #9
 800c3fc:	f04f 0301 	mov.w	r3, #1
 800c400:	6103      	str	r3, [r0, #16]
 800c402:	dd16      	ble.n	800c432 <__s2b+0x72>
 800c404:	f104 0909 	add.w	r9, r4, #9
 800c408:	46c8      	mov	r8, r9
 800c40a:	442c      	add	r4, r5
 800c40c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c410:	4601      	mov	r1, r0
 800c412:	3b30      	subs	r3, #48	; 0x30
 800c414:	220a      	movs	r2, #10
 800c416:	4630      	mov	r0, r6
 800c418:	f7ff ff8c 	bl	800c334 <__multadd>
 800c41c:	45a0      	cmp	r8, r4
 800c41e:	d1f5      	bne.n	800c40c <__s2b+0x4c>
 800c420:	f1a5 0408 	sub.w	r4, r5, #8
 800c424:	444c      	add	r4, r9
 800c426:	1b2d      	subs	r5, r5, r4
 800c428:	1963      	adds	r3, r4, r5
 800c42a:	42bb      	cmp	r3, r7
 800c42c:	db04      	blt.n	800c438 <__s2b+0x78>
 800c42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c432:	340a      	adds	r4, #10
 800c434:	2509      	movs	r5, #9
 800c436:	e7f6      	b.n	800c426 <__s2b+0x66>
 800c438:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c43c:	4601      	mov	r1, r0
 800c43e:	3b30      	subs	r3, #48	; 0x30
 800c440:	220a      	movs	r2, #10
 800c442:	4630      	mov	r0, r6
 800c444:	f7ff ff76 	bl	800c334 <__multadd>
 800c448:	e7ee      	b.n	800c428 <__s2b+0x68>
 800c44a:	bf00      	nop
 800c44c:	0800f77f 	.word	0x0800f77f
 800c450:	0800f80c 	.word	0x0800f80c

0800c454 <__hi0bits>:
 800c454:	0c03      	lsrs	r3, r0, #16
 800c456:	041b      	lsls	r3, r3, #16
 800c458:	b9d3      	cbnz	r3, 800c490 <__hi0bits+0x3c>
 800c45a:	0400      	lsls	r0, r0, #16
 800c45c:	2310      	movs	r3, #16
 800c45e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c462:	bf04      	itt	eq
 800c464:	0200      	lsleq	r0, r0, #8
 800c466:	3308      	addeq	r3, #8
 800c468:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c46c:	bf04      	itt	eq
 800c46e:	0100      	lsleq	r0, r0, #4
 800c470:	3304      	addeq	r3, #4
 800c472:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c476:	bf04      	itt	eq
 800c478:	0080      	lsleq	r0, r0, #2
 800c47a:	3302      	addeq	r3, #2
 800c47c:	2800      	cmp	r0, #0
 800c47e:	db05      	blt.n	800c48c <__hi0bits+0x38>
 800c480:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c484:	f103 0301 	add.w	r3, r3, #1
 800c488:	bf08      	it	eq
 800c48a:	2320      	moveq	r3, #32
 800c48c:	4618      	mov	r0, r3
 800c48e:	4770      	bx	lr
 800c490:	2300      	movs	r3, #0
 800c492:	e7e4      	b.n	800c45e <__hi0bits+0xa>

0800c494 <__lo0bits>:
 800c494:	6803      	ldr	r3, [r0, #0]
 800c496:	f013 0207 	ands.w	r2, r3, #7
 800c49a:	4601      	mov	r1, r0
 800c49c:	d00b      	beq.n	800c4b6 <__lo0bits+0x22>
 800c49e:	07da      	lsls	r2, r3, #31
 800c4a0:	d423      	bmi.n	800c4ea <__lo0bits+0x56>
 800c4a2:	0798      	lsls	r0, r3, #30
 800c4a4:	bf49      	itett	mi
 800c4a6:	085b      	lsrmi	r3, r3, #1
 800c4a8:	089b      	lsrpl	r3, r3, #2
 800c4aa:	2001      	movmi	r0, #1
 800c4ac:	600b      	strmi	r3, [r1, #0]
 800c4ae:	bf5c      	itt	pl
 800c4b0:	600b      	strpl	r3, [r1, #0]
 800c4b2:	2002      	movpl	r0, #2
 800c4b4:	4770      	bx	lr
 800c4b6:	b298      	uxth	r0, r3
 800c4b8:	b9a8      	cbnz	r0, 800c4e6 <__lo0bits+0x52>
 800c4ba:	0c1b      	lsrs	r3, r3, #16
 800c4bc:	2010      	movs	r0, #16
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	b90a      	cbnz	r2, 800c4c6 <__lo0bits+0x32>
 800c4c2:	3008      	adds	r0, #8
 800c4c4:	0a1b      	lsrs	r3, r3, #8
 800c4c6:	071a      	lsls	r2, r3, #28
 800c4c8:	bf04      	itt	eq
 800c4ca:	091b      	lsreq	r3, r3, #4
 800c4cc:	3004      	addeq	r0, #4
 800c4ce:	079a      	lsls	r2, r3, #30
 800c4d0:	bf04      	itt	eq
 800c4d2:	089b      	lsreq	r3, r3, #2
 800c4d4:	3002      	addeq	r0, #2
 800c4d6:	07da      	lsls	r2, r3, #31
 800c4d8:	d403      	bmi.n	800c4e2 <__lo0bits+0x4e>
 800c4da:	085b      	lsrs	r3, r3, #1
 800c4dc:	f100 0001 	add.w	r0, r0, #1
 800c4e0:	d005      	beq.n	800c4ee <__lo0bits+0x5a>
 800c4e2:	600b      	str	r3, [r1, #0]
 800c4e4:	4770      	bx	lr
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	e7e9      	b.n	800c4be <__lo0bits+0x2a>
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	4770      	bx	lr
 800c4ee:	2020      	movs	r0, #32
 800c4f0:	4770      	bx	lr
	...

0800c4f4 <__i2b>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	f7ff feb9 	bl	800c270 <_Balloc>
 800c4fe:	4602      	mov	r2, r0
 800c500:	b928      	cbnz	r0, 800c50e <__i2b+0x1a>
 800c502:	4b05      	ldr	r3, [pc, #20]	; (800c518 <__i2b+0x24>)
 800c504:	4805      	ldr	r0, [pc, #20]	; (800c51c <__i2b+0x28>)
 800c506:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c50a:	f7fb ffdf 	bl	80084cc <__assert_func>
 800c50e:	2301      	movs	r3, #1
 800c510:	6144      	str	r4, [r0, #20]
 800c512:	6103      	str	r3, [r0, #16]
 800c514:	bd10      	pop	{r4, pc}
 800c516:	bf00      	nop
 800c518:	0800f77f 	.word	0x0800f77f
 800c51c:	0800f80c 	.word	0x0800f80c

0800c520 <__multiply>:
 800c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c524:	4691      	mov	r9, r2
 800c526:	690a      	ldr	r2, [r1, #16]
 800c528:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	bfb8      	it	lt
 800c530:	460b      	movlt	r3, r1
 800c532:	460c      	mov	r4, r1
 800c534:	bfbc      	itt	lt
 800c536:	464c      	movlt	r4, r9
 800c538:	4699      	movlt	r9, r3
 800c53a:	6927      	ldr	r7, [r4, #16]
 800c53c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c540:	68a3      	ldr	r3, [r4, #8]
 800c542:	6861      	ldr	r1, [r4, #4]
 800c544:	eb07 060a 	add.w	r6, r7, sl
 800c548:	42b3      	cmp	r3, r6
 800c54a:	b085      	sub	sp, #20
 800c54c:	bfb8      	it	lt
 800c54e:	3101      	addlt	r1, #1
 800c550:	f7ff fe8e 	bl	800c270 <_Balloc>
 800c554:	b930      	cbnz	r0, 800c564 <__multiply+0x44>
 800c556:	4602      	mov	r2, r0
 800c558:	4b44      	ldr	r3, [pc, #272]	; (800c66c <__multiply+0x14c>)
 800c55a:	4845      	ldr	r0, [pc, #276]	; (800c670 <__multiply+0x150>)
 800c55c:	f240 115d 	movw	r1, #349	; 0x15d
 800c560:	f7fb ffb4 	bl	80084cc <__assert_func>
 800c564:	f100 0514 	add.w	r5, r0, #20
 800c568:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c56c:	462b      	mov	r3, r5
 800c56e:	2200      	movs	r2, #0
 800c570:	4543      	cmp	r3, r8
 800c572:	d321      	bcc.n	800c5b8 <__multiply+0x98>
 800c574:	f104 0314 	add.w	r3, r4, #20
 800c578:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c57c:	f109 0314 	add.w	r3, r9, #20
 800c580:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c584:	9202      	str	r2, [sp, #8]
 800c586:	1b3a      	subs	r2, r7, r4
 800c588:	3a15      	subs	r2, #21
 800c58a:	f022 0203 	bic.w	r2, r2, #3
 800c58e:	3204      	adds	r2, #4
 800c590:	f104 0115 	add.w	r1, r4, #21
 800c594:	428f      	cmp	r7, r1
 800c596:	bf38      	it	cc
 800c598:	2204      	movcc	r2, #4
 800c59a:	9201      	str	r2, [sp, #4]
 800c59c:	9a02      	ldr	r2, [sp, #8]
 800c59e:	9303      	str	r3, [sp, #12]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d80c      	bhi.n	800c5be <__multiply+0x9e>
 800c5a4:	2e00      	cmp	r6, #0
 800c5a6:	dd03      	ble.n	800c5b0 <__multiply+0x90>
 800c5a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d05a      	beq.n	800c666 <__multiply+0x146>
 800c5b0:	6106      	str	r6, [r0, #16]
 800c5b2:	b005      	add	sp, #20
 800c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b8:	f843 2b04 	str.w	r2, [r3], #4
 800c5bc:	e7d8      	b.n	800c570 <__multiply+0x50>
 800c5be:	f8b3 a000 	ldrh.w	sl, [r3]
 800c5c2:	f1ba 0f00 	cmp.w	sl, #0
 800c5c6:	d024      	beq.n	800c612 <__multiply+0xf2>
 800c5c8:	f104 0e14 	add.w	lr, r4, #20
 800c5cc:	46a9      	mov	r9, r5
 800c5ce:	f04f 0c00 	mov.w	ip, #0
 800c5d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c5d6:	f8d9 1000 	ldr.w	r1, [r9]
 800c5da:	fa1f fb82 	uxth.w	fp, r2
 800c5de:	b289      	uxth	r1, r1
 800c5e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c5e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c5e8:	f8d9 2000 	ldr.w	r2, [r9]
 800c5ec:	4461      	add	r1, ip
 800c5ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c5f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c5fa:	b289      	uxth	r1, r1
 800c5fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c600:	4577      	cmp	r7, lr
 800c602:	f849 1b04 	str.w	r1, [r9], #4
 800c606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c60a:	d8e2      	bhi.n	800c5d2 <__multiply+0xb2>
 800c60c:	9a01      	ldr	r2, [sp, #4]
 800c60e:	f845 c002 	str.w	ip, [r5, r2]
 800c612:	9a03      	ldr	r2, [sp, #12]
 800c614:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c618:	3304      	adds	r3, #4
 800c61a:	f1b9 0f00 	cmp.w	r9, #0
 800c61e:	d020      	beq.n	800c662 <__multiply+0x142>
 800c620:	6829      	ldr	r1, [r5, #0]
 800c622:	f104 0c14 	add.w	ip, r4, #20
 800c626:	46ae      	mov	lr, r5
 800c628:	f04f 0a00 	mov.w	sl, #0
 800c62c:	f8bc b000 	ldrh.w	fp, [ip]
 800c630:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c634:	fb09 220b 	mla	r2, r9, fp, r2
 800c638:	4492      	add	sl, r2
 800c63a:	b289      	uxth	r1, r1
 800c63c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c640:	f84e 1b04 	str.w	r1, [lr], #4
 800c644:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c648:	f8be 1000 	ldrh.w	r1, [lr]
 800c64c:	0c12      	lsrs	r2, r2, #16
 800c64e:	fb09 1102 	mla	r1, r9, r2, r1
 800c652:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c656:	4567      	cmp	r7, ip
 800c658:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c65c:	d8e6      	bhi.n	800c62c <__multiply+0x10c>
 800c65e:	9a01      	ldr	r2, [sp, #4]
 800c660:	50a9      	str	r1, [r5, r2]
 800c662:	3504      	adds	r5, #4
 800c664:	e79a      	b.n	800c59c <__multiply+0x7c>
 800c666:	3e01      	subs	r6, #1
 800c668:	e79c      	b.n	800c5a4 <__multiply+0x84>
 800c66a:	bf00      	nop
 800c66c:	0800f77f 	.word	0x0800f77f
 800c670:	0800f80c 	.word	0x0800f80c

0800c674 <__pow5mult>:
 800c674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c678:	4615      	mov	r5, r2
 800c67a:	f012 0203 	ands.w	r2, r2, #3
 800c67e:	4606      	mov	r6, r0
 800c680:	460f      	mov	r7, r1
 800c682:	d007      	beq.n	800c694 <__pow5mult+0x20>
 800c684:	4c25      	ldr	r4, [pc, #148]	; (800c71c <__pow5mult+0xa8>)
 800c686:	3a01      	subs	r2, #1
 800c688:	2300      	movs	r3, #0
 800c68a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c68e:	f7ff fe51 	bl	800c334 <__multadd>
 800c692:	4607      	mov	r7, r0
 800c694:	10ad      	asrs	r5, r5, #2
 800c696:	d03d      	beq.n	800c714 <__pow5mult+0xa0>
 800c698:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c69a:	b97c      	cbnz	r4, 800c6bc <__pow5mult+0x48>
 800c69c:	2010      	movs	r0, #16
 800c69e:	f7fc f9f3 	bl	8008a88 <malloc>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	6270      	str	r0, [r6, #36]	; 0x24
 800c6a6:	b928      	cbnz	r0, 800c6b4 <__pow5mult+0x40>
 800c6a8:	4b1d      	ldr	r3, [pc, #116]	; (800c720 <__pow5mult+0xac>)
 800c6aa:	481e      	ldr	r0, [pc, #120]	; (800c724 <__pow5mult+0xb0>)
 800c6ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c6b0:	f7fb ff0c 	bl	80084cc <__assert_func>
 800c6b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6b8:	6004      	str	r4, [r0, #0]
 800c6ba:	60c4      	str	r4, [r0, #12]
 800c6bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6c4:	b94c      	cbnz	r4, 800c6da <__pow5mult+0x66>
 800c6c6:	f240 2171 	movw	r1, #625	; 0x271
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7ff ff12 	bl	800c4f4 <__i2b>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	6003      	str	r3, [r0, #0]
 800c6da:	f04f 0900 	mov.w	r9, #0
 800c6de:	07eb      	lsls	r3, r5, #31
 800c6e0:	d50a      	bpl.n	800c6f8 <__pow5mult+0x84>
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7ff ff1a 	bl	800c520 <__multiply>
 800c6ec:	4639      	mov	r1, r7
 800c6ee:	4680      	mov	r8, r0
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f7ff fdfd 	bl	800c2f0 <_Bfree>
 800c6f6:	4647      	mov	r7, r8
 800c6f8:	106d      	asrs	r5, r5, #1
 800c6fa:	d00b      	beq.n	800c714 <__pow5mult+0xa0>
 800c6fc:	6820      	ldr	r0, [r4, #0]
 800c6fe:	b938      	cbnz	r0, 800c710 <__pow5mult+0x9c>
 800c700:	4622      	mov	r2, r4
 800c702:	4621      	mov	r1, r4
 800c704:	4630      	mov	r0, r6
 800c706:	f7ff ff0b 	bl	800c520 <__multiply>
 800c70a:	6020      	str	r0, [r4, #0]
 800c70c:	f8c0 9000 	str.w	r9, [r0]
 800c710:	4604      	mov	r4, r0
 800c712:	e7e4      	b.n	800c6de <__pow5mult+0x6a>
 800c714:	4638      	mov	r0, r7
 800c716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c71a:	bf00      	nop
 800c71c:	0800f958 	.word	0x0800f958
 800c720:	0800f70d 	.word	0x0800f70d
 800c724:	0800f80c 	.word	0x0800f80c

0800c728 <__lshift>:
 800c728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c72c:	460c      	mov	r4, r1
 800c72e:	6849      	ldr	r1, [r1, #4]
 800c730:	6923      	ldr	r3, [r4, #16]
 800c732:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c736:	68a3      	ldr	r3, [r4, #8]
 800c738:	4607      	mov	r7, r0
 800c73a:	4691      	mov	r9, r2
 800c73c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c740:	f108 0601 	add.w	r6, r8, #1
 800c744:	42b3      	cmp	r3, r6
 800c746:	db0b      	blt.n	800c760 <__lshift+0x38>
 800c748:	4638      	mov	r0, r7
 800c74a:	f7ff fd91 	bl	800c270 <_Balloc>
 800c74e:	4605      	mov	r5, r0
 800c750:	b948      	cbnz	r0, 800c766 <__lshift+0x3e>
 800c752:	4602      	mov	r2, r0
 800c754:	4b2a      	ldr	r3, [pc, #168]	; (800c800 <__lshift+0xd8>)
 800c756:	482b      	ldr	r0, [pc, #172]	; (800c804 <__lshift+0xdc>)
 800c758:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c75c:	f7fb feb6 	bl	80084cc <__assert_func>
 800c760:	3101      	adds	r1, #1
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	e7ee      	b.n	800c744 <__lshift+0x1c>
 800c766:	2300      	movs	r3, #0
 800c768:	f100 0114 	add.w	r1, r0, #20
 800c76c:	f100 0210 	add.w	r2, r0, #16
 800c770:	4618      	mov	r0, r3
 800c772:	4553      	cmp	r3, sl
 800c774:	db37      	blt.n	800c7e6 <__lshift+0xbe>
 800c776:	6920      	ldr	r0, [r4, #16]
 800c778:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c77c:	f104 0314 	add.w	r3, r4, #20
 800c780:	f019 091f 	ands.w	r9, r9, #31
 800c784:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c788:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c78c:	d02f      	beq.n	800c7ee <__lshift+0xc6>
 800c78e:	f1c9 0e20 	rsb	lr, r9, #32
 800c792:	468a      	mov	sl, r1
 800c794:	f04f 0c00 	mov.w	ip, #0
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	fa02 f209 	lsl.w	r2, r2, r9
 800c79e:	ea42 020c 	orr.w	r2, r2, ip
 800c7a2:	f84a 2b04 	str.w	r2, [sl], #4
 800c7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7aa:	4298      	cmp	r0, r3
 800c7ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c7b0:	d8f2      	bhi.n	800c798 <__lshift+0x70>
 800c7b2:	1b03      	subs	r3, r0, r4
 800c7b4:	3b15      	subs	r3, #21
 800c7b6:	f023 0303 	bic.w	r3, r3, #3
 800c7ba:	3304      	adds	r3, #4
 800c7bc:	f104 0215 	add.w	r2, r4, #21
 800c7c0:	4290      	cmp	r0, r2
 800c7c2:	bf38      	it	cc
 800c7c4:	2304      	movcc	r3, #4
 800c7c6:	f841 c003 	str.w	ip, [r1, r3]
 800c7ca:	f1bc 0f00 	cmp.w	ip, #0
 800c7ce:	d001      	beq.n	800c7d4 <__lshift+0xac>
 800c7d0:	f108 0602 	add.w	r6, r8, #2
 800c7d4:	3e01      	subs	r6, #1
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	612e      	str	r6, [r5, #16]
 800c7da:	4621      	mov	r1, r4
 800c7dc:	f7ff fd88 	bl	800c2f0 <_Bfree>
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	e7c1      	b.n	800c772 <__lshift+0x4a>
 800c7ee:	3904      	subs	r1, #4
 800c7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7f8:	4298      	cmp	r0, r3
 800c7fa:	d8f9      	bhi.n	800c7f0 <__lshift+0xc8>
 800c7fc:	e7ea      	b.n	800c7d4 <__lshift+0xac>
 800c7fe:	bf00      	nop
 800c800:	0800f77f 	.word	0x0800f77f
 800c804:	0800f80c 	.word	0x0800f80c

0800c808 <__mcmp>:
 800c808:	b530      	push	{r4, r5, lr}
 800c80a:	6902      	ldr	r2, [r0, #16]
 800c80c:	690c      	ldr	r4, [r1, #16]
 800c80e:	1b12      	subs	r2, r2, r4
 800c810:	d10e      	bne.n	800c830 <__mcmp+0x28>
 800c812:	f100 0314 	add.w	r3, r0, #20
 800c816:	3114      	adds	r1, #20
 800c818:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c81c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c820:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c824:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c828:	42a5      	cmp	r5, r4
 800c82a:	d003      	beq.n	800c834 <__mcmp+0x2c>
 800c82c:	d305      	bcc.n	800c83a <__mcmp+0x32>
 800c82e:	2201      	movs	r2, #1
 800c830:	4610      	mov	r0, r2
 800c832:	bd30      	pop	{r4, r5, pc}
 800c834:	4283      	cmp	r3, r0
 800c836:	d3f3      	bcc.n	800c820 <__mcmp+0x18>
 800c838:	e7fa      	b.n	800c830 <__mcmp+0x28>
 800c83a:	f04f 32ff 	mov.w	r2, #4294967295
 800c83e:	e7f7      	b.n	800c830 <__mcmp+0x28>

0800c840 <__mdiff>:
 800c840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	460c      	mov	r4, r1
 800c846:	4606      	mov	r6, r0
 800c848:	4611      	mov	r1, r2
 800c84a:	4620      	mov	r0, r4
 800c84c:	4690      	mov	r8, r2
 800c84e:	f7ff ffdb 	bl	800c808 <__mcmp>
 800c852:	1e05      	subs	r5, r0, #0
 800c854:	d110      	bne.n	800c878 <__mdiff+0x38>
 800c856:	4629      	mov	r1, r5
 800c858:	4630      	mov	r0, r6
 800c85a:	f7ff fd09 	bl	800c270 <_Balloc>
 800c85e:	b930      	cbnz	r0, 800c86e <__mdiff+0x2e>
 800c860:	4b3a      	ldr	r3, [pc, #232]	; (800c94c <__mdiff+0x10c>)
 800c862:	4602      	mov	r2, r0
 800c864:	f240 2132 	movw	r1, #562	; 0x232
 800c868:	4839      	ldr	r0, [pc, #228]	; (800c950 <__mdiff+0x110>)
 800c86a:	f7fb fe2f 	bl	80084cc <__assert_func>
 800c86e:	2301      	movs	r3, #1
 800c870:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c878:	bfa4      	itt	ge
 800c87a:	4643      	movge	r3, r8
 800c87c:	46a0      	movge	r8, r4
 800c87e:	4630      	mov	r0, r6
 800c880:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c884:	bfa6      	itte	ge
 800c886:	461c      	movge	r4, r3
 800c888:	2500      	movge	r5, #0
 800c88a:	2501      	movlt	r5, #1
 800c88c:	f7ff fcf0 	bl	800c270 <_Balloc>
 800c890:	b920      	cbnz	r0, 800c89c <__mdiff+0x5c>
 800c892:	4b2e      	ldr	r3, [pc, #184]	; (800c94c <__mdiff+0x10c>)
 800c894:	4602      	mov	r2, r0
 800c896:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c89a:	e7e5      	b.n	800c868 <__mdiff+0x28>
 800c89c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8a0:	6926      	ldr	r6, [r4, #16]
 800c8a2:	60c5      	str	r5, [r0, #12]
 800c8a4:	f104 0914 	add.w	r9, r4, #20
 800c8a8:	f108 0514 	add.w	r5, r8, #20
 800c8ac:	f100 0e14 	add.w	lr, r0, #20
 800c8b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c8b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c8b8:	f108 0210 	add.w	r2, r8, #16
 800c8bc:	46f2      	mov	sl, lr
 800c8be:	2100      	movs	r1, #0
 800c8c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c8c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c8c8:	fa1f f883 	uxth.w	r8, r3
 800c8cc:	fa11 f18b 	uxtah	r1, r1, fp
 800c8d0:	0c1b      	lsrs	r3, r3, #16
 800c8d2:	eba1 0808 	sub.w	r8, r1, r8
 800c8d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c8da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c8de:	fa1f f888 	uxth.w	r8, r8
 800c8e2:	1419      	asrs	r1, r3, #16
 800c8e4:	454e      	cmp	r6, r9
 800c8e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c8ea:	f84a 3b04 	str.w	r3, [sl], #4
 800c8ee:	d8e7      	bhi.n	800c8c0 <__mdiff+0x80>
 800c8f0:	1b33      	subs	r3, r6, r4
 800c8f2:	3b15      	subs	r3, #21
 800c8f4:	f023 0303 	bic.w	r3, r3, #3
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	3415      	adds	r4, #21
 800c8fc:	42a6      	cmp	r6, r4
 800c8fe:	bf38      	it	cc
 800c900:	2304      	movcc	r3, #4
 800c902:	441d      	add	r5, r3
 800c904:	4473      	add	r3, lr
 800c906:	469e      	mov	lr, r3
 800c908:	462e      	mov	r6, r5
 800c90a:	4566      	cmp	r6, ip
 800c90c:	d30e      	bcc.n	800c92c <__mdiff+0xec>
 800c90e:	f10c 0203 	add.w	r2, ip, #3
 800c912:	1b52      	subs	r2, r2, r5
 800c914:	f022 0203 	bic.w	r2, r2, #3
 800c918:	3d03      	subs	r5, #3
 800c91a:	45ac      	cmp	ip, r5
 800c91c:	bf38      	it	cc
 800c91e:	2200      	movcc	r2, #0
 800c920:	441a      	add	r2, r3
 800c922:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c926:	b17b      	cbz	r3, 800c948 <__mdiff+0x108>
 800c928:	6107      	str	r7, [r0, #16]
 800c92a:	e7a3      	b.n	800c874 <__mdiff+0x34>
 800c92c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c930:	fa11 f288 	uxtah	r2, r1, r8
 800c934:	1414      	asrs	r4, r2, #16
 800c936:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c93a:	b292      	uxth	r2, r2
 800c93c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c940:	f84e 2b04 	str.w	r2, [lr], #4
 800c944:	1421      	asrs	r1, r4, #16
 800c946:	e7e0      	b.n	800c90a <__mdiff+0xca>
 800c948:	3f01      	subs	r7, #1
 800c94a:	e7ea      	b.n	800c922 <__mdiff+0xe2>
 800c94c:	0800f77f 	.word	0x0800f77f
 800c950:	0800f80c 	.word	0x0800f80c

0800c954 <__ulp>:
 800c954:	b082      	sub	sp, #8
 800c956:	ed8d 0b00 	vstr	d0, [sp]
 800c95a:	9b01      	ldr	r3, [sp, #4]
 800c95c:	4912      	ldr	r1, [pc, #72]	; (800c9a8 <__ulp+0x54>)
 800c95e:	4019      	ands	r1, r3
 800c960:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c964:	2900      	cmp	r1, #0
 800c966:	dd05      	ble.n	800c974 <__ulp+0x20>
 800c968:	2200      	movs	r2, #0
 800c96a:	460b      	mov	r3, r1
 800c96c:	ec43 2b10 	vmov	d0, r2, r3
 800c970:	b002      	add	sp, #8
 800c972:	4770      	bx	lr
 800c974:	4249      	negs	r1, r1
 800c976:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c97a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c97e:	f04f 0200 	mov.w	r2, #0
 800c982:	f04f 0300 	mov.w	r3, #0
 800c986:	da04      	bge.n	800c992 <__ulp+0x3e>
 800c988:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c98c:	fa41 f300 	asr.w	r3, r1, r0
 800c990:	e7ec      	b.n	800c96c <__ulp+0x18>
 800c992:	f1a0 0114 	sub.w	r1, r0, #20
 800c996:	291e      	cmp	r1, #30
 800c998:	bfda      	itte	le
 800c99a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c99e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c9a2:	2101      	movgt	r1, #1
 800c9a4:	460a      	mov	r2, r1
 800c9a6:	e7e1      	b.n	800c96c <__ulp+0x18>
 800c9a8:	7ff00000 	.word	0x7ff00000

0800c9ac <__b2d>:
 800c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ae:	6905      	ldr	r5, [r0, #16]
 800c9b0:	f100 0714 	add.w	r7, r0, #20
 800c9b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c9b8:	1f2e      	subs	r6, r5, #4
 800c9ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f7ff fd48 	bl	800c454 <__hi0bits>
 800c9c4:	f1c0 0320 	rsb	r3, r0, #32
 800c9c8:	280a      	cmp	r0, #10
 800c9ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ca48 <__b2d+0x9c>
 800c9ce:	600b      	str	r3, [r1, #0]
 800c9d0:	dc14      	bgt.n	800c9fc <__b2d+0x50>
 800c9d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c9d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c9da:	42b7      	cmp	r7, r6
 800c9dc:	ea41 030c 	orr.w	r3, r1, ip
 800c9e0:	bf34      	ite	cc
 800c9e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c9e6:	2100      	movcs	r1, #0
 800c9e8:	3015      	adds	r0, #21
 800c9ea:	fa04 f000 	lsl.w	r0, r4, r0
 800c9ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800c9f2:	ea40 0201 	orr.w	r2, r0, r1
 800c9f6:	ec43 2b10 	vmov	d0, r2, r3
 800c9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9fc:	42b7      	cmp	r7, r6
 800c9fe:	bf3a      	itte	cc
 800ca00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca04:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca08:	2100      	movcs	r1, #0
 800ca0a:	380b      	subs	r0, #11
 800ca0c:	d017      	beq.n	800ca3e <__b2d+0x92>
 800ca0e:	f1c0 0c20 	rsb	ip, r0, #32
 800ca12:	fa04 f500 	lsl.w	r5, r4, r0
 800ca16:	42be      	cmp	r6, r7
 800ca18:	fa21 f40c 	lsr.w	r4, r1, ip
 800ca1c:	ea45 0504 	orr.w	r5, r5, r4
 800ca20:	bf8c      	ite	hi
 800ca22:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ca26:	2400      	movls	r4, #0
 800ca28:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ca2c:	fa01 f000 	lsl.w	r0, r1, r0
 800ca30:	fa24 f40c 	lsr.w	r4, r4, ip
 800ca34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca38:	ea40 0204 	orr.w	r2, r0, r4
 800ca3c:	e7db      	b.n	800c9f6 <__b2d+0x4a>
 800ca3e:	ea44 030c 	orr.w	r3, r4, ip
 800ca42:	460a      	mov	r2, r1
 800ca44:	e7d7      	b.n	800c9f6 <__b2d+0x4a>
 800ca46:	bf00      	nop
 800ca48:	3ff00000 	.word	0x3ff00000

0800ca4c <__d2b>:
 800ca4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca50:	4689      	mov	r9, r1
 800ca52:	2101      	movs	r1, #1
 800ca54:	ec57 6b10 	vmov	r6, r7, d0
 800ca58:	4690      	mov	r8, r2
 800ca5a:	f7ff fc09 	bl	800c270 <_Balloc>
 800ca5e:	4604      	mov	r4, r0
 800ca60:	b930      	cbnz	r0, 800ca70 <__d2b+0x24>
 800ca62:	4602      	mov	r2, r0
 800ca64:	4b25      	ldr	r3, [pc, #148]	; (800cafc <__d2b+0xb0>)
 800ca66:	4826      	ldr	r0, [pc, #152]	; (800cb00 <__d2b+0xb4>)
 800ca68:	f240 310a 	movw	r1, #778	; 0x30a
 800ca6c:	f7fb fd2e 	bl	80084cc <__assert_func>
 800ca70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca78:	bb35      	cbnz	r5, 800cac8 <__d2b+0x7c>
 800ca7a:	2e00      	cmp	r6, #0
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	d028      	beq.n	800cad2 <__d2b+0x86>
 800ca80:	4668      	mov	r0, sp
 800ca82:	9600      	str	r6, [sp, #0]
 800ca84:	f7ff fd06 	bl	800c494 <__lo0bits>
 800ca88:	9900      	ldr	r1, [sp, #0]
 800ca8a:	b300      	cbz	r0, 800cace <__d2b+0x82>
 800ca8c:	9a01      	ldr	r2, [sp, #4]
 800ca8e:	f1c0 0320 	rsb	r3, r0, #32
 800ca92:	fa02 f303 	lsl.w	r3, r2, r3
 800ca96:	430b      	orrs	r3, r1
 800ca98:	40c2      	lsrs	r2, r0
 800ca9a:	6163      	str	r3, [r4, #20]
 800ca9c:	9201      	str	r2, [sp, #4]
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	61a3      	str	r3, [r4, #24]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	bf14      	ite	ne
 800caa6:	2202      	movne	r2, #2
 800caa8:	2201      	moveq	r2, #1
 800caaa:	6122      	str	r2, [r4, #16]
 800caac:	b1d5      	cbz	r5, 800cae4 <__d2b+0x98>
 800caae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cab2:	4405      	add	r5, r0
 800cab4:	f8c9 5000 	str.w	r5, [r9]
 800cab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cabc:	f8c8 0000 	str.w	r0, [r8]
 800cac0:	4620      	mov	r0, r4
 800cac2:	b003      	add	sp, #12
 800cac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cacc:	e7d5      	b.n	800ca7a <__d2b+0x2e>
 800cace:	6161      	str	r1, [r4, #20]
 800cad0:	e7e5      	b.n	800ca9e <__d2b+0x52>
 800cad2:	a801      	add	r0, sp, #4
 800cad4:	f7ff fcde 	bl	800c494 <__lo0bits>
 800cad8:	9b01      	ldr	r3, [sp, #4]
 800cada:	6163      	str	r3, [r4, #20]
 800cadc:	2201      	movs	r2, #1
 800cade:	6122      	str	r2, [r4, #16]
 800cae0:	3020      	adds	r0, #32
 800cae2:	e7e3      	b.n	800caac <__d2b+0x60>
 800cae4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800caec:	f8c9 0000 	str.w	r0, [r9]
 800caf0:	6918      	ldr	r0, [r3, #16]
 800caf2:	f7ff fcaf 	bl	800c454 <__hi0bits>
 800caf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cafa:	e7df      	b.n	800cabc <__d2b+0x70>
 800cafc:	0800f77f 	.word	0x0800f77f
 800cb00:	0800f80c 	.word	0x0800f80c

0800cb04 <__ratio>:
 800cb04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	4688      	mov	r8, r1
 800cb0a:	4669      	mov	r1, sp
 800cb0c:	4681      	mov	r9, r0
 800cb0e:	f7ff ff4d 	bl	800c9ac <__b2d>
 800cb12:	a901      	add	r1, sp, #4
 800cb14:	4640      	mov	r0, r8
 800cb16:	ec55 4b10 	vmov	r4, r5, d0
 800cb1a:	f7ff ff47 	bl	800c9ac <__b2d>
 800cb1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb22:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb26:	eba3 0c02 	sub.w	ip, r3, r2
 800cb2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb2e:	1a9b      	subs	r3, r3, r2
 800cb30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb34:	ec51 0b10 	vmov	r0, r1, d0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	bfd6      	itet	le
 800cb3c:	460a      	movle	r2, r1
 800cb3e:	462a      	movgt	r2, r5
 800cb40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb44:	468b      	mov	fp, r1
 800cb46:	462f      	mov	r7, r5
 800cb48:	bfd4      	ite	le
 800cb4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cb4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb52:	4620      	mov	r0, r4
 800cb54:	ee10 2a10 	vmov	r2, s0
 800cb58:	465b      	mov	r3, fp
 800cb5a:	4639      	mov	r1, r7
 800cb5c:	f7f3 fe76 	bl	800084c <__aeabi_ddiv>
 800cb60:	ec41 0b10 	vmov	d0, r0, r1
 800cb64:	b003      	add	sp, #12
 800cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb6a <__copybits>:
 800cb6a:	3901      	subs	r1, #1
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	1149      	asrs	r1, r1, #5
 800cb70:	6914      	ldr	r4, [r2, #16]
 800cb72:	3101      	adds	r1, #1
 800cb74:	f102 0314 	add.w	r3, r2, #20
 800cb78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb80:	1f05      	subs	r5, r0, #4
 800cb82:	42a3      	cmp	r3, r4
 800cb84:	d30c      	bcc.n	800cba0 <__copybits+0x36>
 800cb86:	1aa3      	subs	r3, r4, r2
 800cb88:	3b11      	subs	r3, #17
 800cb8a:	f023 0303 	bic.w	r3, r3, #3
 800cb8e:	3211      	adds	r2, #17
 800cb90:	42a2      	cmp	r2, r4
 800cb92:	bf88      	it	hi
 800cb94:	2300      	movhi	r3, #0
 800cb96:	4418      	add	r0, r3
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4288      	cmp	r0, r1
 800cb9c:	d305      	bcc.n	800cbaa <__copybits+0x40>
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	f853 6b04 	ldr.w	r6, [r3], #4
 800cba4:	f845 6f04 	str.w	r6, [r5, #4]!
 800cba8:	e7eb      	b.n	800cb82 <__copybits+0x18>
 800cbaa:	f840 3b04 	str.w	r3, [r0], #4
 800cbae:	e7f4      	b.n	800cb9a <__copybits+0x30>

0800cbb0 <__any_on>:
 800cbb0:	f100 0214 	add.w	r2, r0, #20
 800cbb4:	6900      	ldr	r0, [r0, #16]
 800cbb6:	114b      	asrs	r3, r1, #5
 800cbb8:	4298      	cmp	r0, r3
 800cbba:	b510      	push	{r4, lr}
 800cbbc:	db11      	blt.n	800cbe2 <__any_on+0x32>
 800cbbe:	dd0a      	ble.n	800cbd6 <__any_on+0x26>
 800cbc0:	f011 011f 	ands.w	r1, r1, #31
 800cbc4:	d007      	beq.n	800cbd6 <__any_on+0x26>
 800cbc6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cbca:	fa24 f001 	lsr.w	r0, r4, r1
 800cbce:	fa00 f101 	lsl.w	r1, r0, r1
 800cbd2:	428c      	cmp	r4, r1
 800cbd4:	d10b      	bne.n	800cbee <__any_on+0x3e>
 800cbd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d803      	bhi.n	800cbe6 <__any_on+0x36>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	bd10      	pop	{r4, pc}
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	e7f7      	b.n	800cbd6 <__any_on+0x26>
 800cbe6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbea:	2900      	cmp	r1, #0
 800cbec:	d0f5      	beq.n	800cbda <__any_on+0x2a>
 800cbee:	2001      	movs	r0, #1
 800cbf0:	e7f6      	b.n	800cbe0 <__any_on+0x30>

0800cbf2 <_realloc_r>:
 800cbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf6:	4680      	mov	r8, r0
 800cbf8:	4614      	mov	r4, r2
 800cbfa:	460e      	mov	r6, r1
 800cbfc:	b921      	cbnz	r1, 800cc08 <_realloc_r+0x16>
 800cbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc02:	4611      	mov	r1, r2
 800cc04:	f7fc b802 	b.w	8008c0c <_malloc_r>
 800cc08:	b92a      	cbnz	r2, 800cc16 <_realloc_r+0x24>
 800cc0a:	f7fb ff93 	bl	8008b34 <_free_r>
 800cc0e:	4625      	mov	r5, r4
 800cc10:	4628      	mov	r0, r5
 800cc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc16:	f000 fa1b 	bl	800d050 <_malloc_usable_size_r>
 800cc1a:	4284      	cmp	r4, r0
 800cc1c:	4607      	mov	r7, r0
 800cc1e:	d802      	bhi.n	800cc26 <_realloc_r+0x34>
 800cc20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc24:	d812      	bhi.n	800cc4c <_realloc_r+0x5a>
 800cc26:	4621      	mov	r1, r4
 800cc28:	4640      	mov	r0, r8
 800cc2a:	f7fb ffef 	bl	8008c0c <_malloc_r>
 800cc2e:	4605      	mov	r5, r0
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d0ed      	beq.n	800cc10 <_realloc_r+0x1e>
 800cc34:	42bc      	cmp	r4, r7
 800cc36:	4622      	mov	r2, r4
 800cc38:	4631      	mov	r1, r6
 800cc3a:	bf28      	it	cs
 800cc3c:	463a      	movcs	r2, r7
 800cc3e:	f7fb ff33 	bl	8008aa8 <memcpy>
 800cc42:	4631      	mov	r1, r6
 800cc44:	4640      	mov	r0, r8
 800cc46:	f7fb ff75 	bl	8008b34 <_free_r>
 800cc4a:	e7e1      	b.n	800cc10 <_realloc_r+0x1e>
 800cc4c:	4635      	mov	r5, r6
 800cc4e:	e7df      	b.n	800cc10 <_realloc_r+0x1e>

0800cc50 <__ssputs_r>:
 800cc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc54:	688e      	ldr	r6, [r1, #8]
 800cc56:	429e      	cmp	r6, r3
 800cc58:	4682      	mov	sl, r0
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	4690      	mov	r8, r2
 800cc5e:	461f      	mov	r7, r3
 800cc60:	d838      	bhi.n	800ccd4 <__ssputs_r+0x84>
 800cc62:	898a      	ldrh	r2, [r1, #12]
 800cc64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc68:	d032      	beq.n	800ccd0 <__ssputs_r+0x80>
 800cc6a:	6825      	ldr	r5, [r4, #0]
 800cc6c:	6909      	ldr	r1, [r1, #16]
 800cc6e:	eba5 0901 	sub.w	r9, r5, r1
 800cc72:	6965      	ldr	r5, [r4, #20]
 800cc74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	444b      	add	r3, r9
 800cc80:	106d      	asrs	r5, r5, #1
 800cc82:	429d      	cmp	r5, r3
 800cc84:	bf38      	it	cc
 800cc86:	461d      	movcc	r5, r3
 800cc88:	0553      	lsls	r3, r2, #21
 800cc8a:	d531      	bpl.n	800ccf0 <__ssputs_r+0xa0>
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	f7fb ffbd 	bl	8008c0c <_malloc_r>
 800cc92:	4606      	mov	r6, r0
 800cc94:	b950      	cbnz	r0, 800ccac <__ssputs_r+0x5c>
 800cc96:	230c      	movs	r3, #12
 800cc98:	f8ca 3000 	str.w	r3, [sl]
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cca2:	81a3      	strh	r3, [r4, #12]
 800cca4:	f04f 30ff 	mov.w	r0, #4294967295
 800cca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccac:	6921      	ldr	r1, [r4, #16]
 800ccae:	464a      	mov	r2, r9
 800ccb0:	f7fb fefa 	bl	8008aa8 <memcpy>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccbe:	81a3      	strh	r3, [r4, #12]
 800ccc0:	6126      	str	r6, [r4, #16]
 800ccc2:	6165      	str	r5, [r4, #20]
 800ccc4:	444e      	add	r6, r9
 800ccc6:	eba5 0509 	sub.w	r5, r5, r9
 800ccca:	6026      	str	r6, [r4, #0]
 800cccc:	60a5      	str	r5, [r4, #8]
 800ccce:	463e      	mov	r6, r7
 800ccd0:	42be      	cmp	r6, r7
 800ccd2:	d900      	bls.n	800ccd6 <__ssputs_r+0x86>
 800ccd4:	463e      	mov	r6, r7
 800ccd6:	6820      	ldr	r0, [r4, #0]
 800ccd8:	4632      	mov	r2, r6
 800ccda:	4641      	mov	r1, r8
 800ccdc:	f7fb fef2 	bl	8008ac4 <memmove>
 800cce0:	68a3      	ldr	r3, [r4, #8]
 800cce2:	1b9b      	subs	r3, r3, r6
 800cce4:	60a3      	str	r3, [r4, #8]
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	4433      	add	r3, r6
 800ccea:	6023      	str	r3, [r4, #0]
 800ccec:	2000      	movs	r0, #0
 800ccee:	e7db      	b.n	800cca8 <__ssputs_r+0x58>
 800ccf0:	462a      	mov	r2, r5
 800ccf2:	f7ff ff7e 	bl	800cbf2 <_realloc_r>
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d1e1      	bne.n	800ccc0 <__ssputs_r+0x70>
 800ccfc:	6921      	ldr	r1, [r4, #16]
 800ccfe:	4650      	mov	r0, sl
 800cd00:	f7fb ff18 	bl	8008b34 <_free_r>
 800cd04:	e7c7      	b.n	800cc96 <__ssputs_r+0x46>
	...

0800cd08 <_svfiprintf_r>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	4698      	mov	r8, r3
 800cd0e:	898b      	ldrh	r3, [r1, #12]
 800cd10:	061b      	lsls	r3, r3, #24
 800cd12:	b09d      	sub	sp, #116	; 0x74
 800cd14:	4607      	mov	r7, r0
 800cd16:	460d      	mov	r5, r1
 800cd18:	4614      	mov	r4, r2
 800cd1a:	d50e      	bpl.n	800cd3a <_svfiprintf_r+0x32>
 800cd1c:	690b      	ldr	r3, [r1, #16]
 800cd1e:	b963      	cbnz	r3, 800cd3a <_svfiprintf_r+0x32>
 800cd20:	2140      	movs	r1, #64	; 0x40
 800cd22:	f7fb ff73 	bl	8008c0c <_malloc_r>
 800cd26:	6028      	str	r0, [r5, #0]
 800cd28:	6128      	str	r0, [r5, #16]
 800cd2a:	b920      	cbnz	r0, 800cd36 <_svfiprintf_r+0x2e>
 800cd2c:	230c      	movs	r3, #12
 800cd2e:	603b      	str	r3, [r7, #0]
 800cd30:	f04f 30ff 	mov.w	r0, #4294967295
 800cd34:	e0d1      	b.n	800ceda <_svfiprintf_r+0x1d2>
 800cd36:	2340      	movs	r3, #64	; 0x40
 800cd38:	616b      	str	r3, [r5, #20]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd3e:	2320      	movs	r3, #32
 800cd40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd44:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd48:	2330      	movs	r3, #48	; 0x30
 800cd4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cef4 <_svfiprintf_r+0x1ec>
 800cd4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd52:	f04f 0901 	mov.w	r9, #1
 800cd56:	4623      	mov	r3, r4
 800cd58:	469a      	mov	sl, r3
 800cd5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd5e:	b10a      	cbz	r2, 800cd64 <_svfiprintf_r+0x5c>
 800cd60:	2a25      	cmp	r2, #37	; 0x25
 800cd62:	d1f9      	bne.n	800cd58 <_svfiprintf_r+0x50>
 800cd64:	ebba 0b04 	subs.w	fp, sl, r4
 800cd68:	d00b      	beq.n	800cd82 <_svfiprintf_r+0x7a>
 800cd6a:	465b      	mov	r3, fp
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	4629      	mov	r1, r5
 800cd70:	4638      	mov	r0, r7
 800cd72:	f7ff ff6d 	bl	800cc50 <__ssputs_r>
 800cd76:	3001      	adds	r0, #1
 800cd78:	f000 80aa 	beq.w	800ced0 <_svfiprintf_r+0x1c8>
 800cd7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd7e:	445a      	add	r2, fp
 800cd80:	9209      	str	r2, [sp, #36]	; 0x24
 800cd82:	f89a 3000 	ldrb.w	r3, [sl]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f000 80a2 	beq.w	800ced0 <_svfiprintf_r+0x1c8>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd96:	f10a 0a01 	add.w	sl, sl, #1
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	9307      	str	r3, [sp, #28]
 800cd9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cda2:	931a      	str	r3, [sp, #104]	; 0x68
 800cda4:	4654      	mov	r4, sl
 800cda6:	2205      	movs	r2, #5
 800cda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdac:	4851      	ldr	r0, [pc, #324]	; (800cef4 <_svfiprintf_r+0x1ec>)
 800cdae:	f7f3 fa17 	bl	80001e0 <memchr>
 800cdb2:	9a04      	ldr	r2, [sp, #16]
 800cdb4:	b9d8      	cbnz	r0, 800cdee <_svfiprintf_r+0xe6>
 800cdb6:	06d0      	lsls	r0, r2, #27
 800cdb8:	bf44      	itt	mi
 800cdba:	2320      	movmi	r3, #32
 800cdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdc0:	0711      	lsls	r1, r2, #28
 800cdc2:	bf44      	itt	mi
 800cdc4:	232b      	movmi	r3, #43	; 0x2b
 800cdc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdca:	f89a 3000 	ldrb.w	r3, [sl]
 800cdce:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd0:	d015      	beq.n	800cdfe <_svfiprintf_r+0xf6>
 800cdd2:	9a07      	ldr	r2, [sp, #28]
 800cdd4:	4654      	mov	r4, sl
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	f04f 0c0a 	mov.w	ip, #10
 800cddc:	4621      	mov	r1, r4
 800cdde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cde2:	3b30      	subs	r3, #48	; 0x30
 800cde4:	2b09      	cmp	r3, #9
 800cde6:	d94e      	bls.n	800ce86 <_svfiprintf_r+0x17e>
 800cde8:	b1b0      	cbz	r0, 800ce18 <_svfiprintf_r+0x110>
 800cdea:	9207      	str	r2, [sp, #28]
 800cdec:	e014      	b.n	800ce18 <_svfiprintf_r+0x110>
 800cdee:	eba0 0308 	sub.w	r3, r0, r8
 800cdf2:	fa09 f303 	lsl.w	r3, r9, r3
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	9304      	str	r3, [sp, #16]
 800cdfa:	46a2      	mov	sl, r4
 800cdfc:	e7d2      	b.n	800cda4 <_svfiprintf_r+0x9c>
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	1d19      	adds	r1, r3, #4
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	9103      	str	r1, [sp, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	bfbb      	ittet	lt
 800ce0a:	425b      	neglt	r3, r3
 800ce0c:	f042 0202 	orrlt.w	r2, r2, #2
 800ce10:	9307      	strge	r3, [sp, #28]
 800ce12:	9307      	strlt	r3, [sp, #28]
 800ce14:	bfb8      	it	lt
 800ce16:	9204      	strlt	r2, [sp, #16]
 800ce18:	7823      	ldrb	r3, [r4, #0]
 800ce1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ce1c:	d10c      	bne.n	800ce38 <_svfiprintf_r+0x130>
 800ce1e:	7863      	ldrb	r3, [r4, #1]
 800ce20:	2b2a      	cmp	r3, #42	; 0x2a
 800ce22:	d135      	bne.n	800ce90 <_svfiprintf_r+0x188>
 800ce24:	9b03      	ldr	r3, [sp, #12]
 800ce26:	1d1a      	adds	r2, r3, #4
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	9203      	str	r2, [sp, #12]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	bfb8      	it	lt
 800ce30:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce34:	3402      	adds	r4, #2
 800ce36:	9305      	str	r3, [sp, #20]
 800ce38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf04 <_svfiprintf_r+0x1fc>
 800ce3c:	7821      	ldrb	r1, [r4, #0]
 800ce3e:	2203      	movs	r2, #3
 800ce40:	4650      	mov	r0, sl
 800ce42:	f7f3 f9cd 	bl	80001e0 <memchr>
 800ce46:	b140      	cbz	r0, 800ce5a <_svfiprintf_r+0x152>
 800ce48:	2340      	movs	r3, #64	; 0x40
 800ce4a:	eba0 000a 	sub.w	r0, r0, sl
 800ce4e:	fa03 f000 	lsl.w	r0, r3, r0
 800ce52:	9b04      	ldr	r3, [sp, #16]
 800ce54:	4303      	orrs	r3, r0
 800ce56:	3401      	adds	r4, #1
 800ce58:	9304      	str	r3, [sp, #16]
 800ce5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce5e:	4826      	ldr	r0, [pc, #152]	; (800cef8 <_svfiprintf_r+0x1f0>)
 800ce60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce64:	2206      	movs	r2, #6
 800ce66:	f7f3 f9bb 	bl	80001e0 <memchr>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d038      	beq.n	800cee0 <_svfiprintf_r+0x1d8>
 800ce6e:	4b23      	ldr	r3, [pc, #140]	; (800cefc <_svfiprintf_r+0x1f4>)
 800ce70:	bb1b      	cbnz	r3, 800ceba <_svfiprintf_r+0x1b2>
 800ce72:	9b03      	ldr	r3, [sp, #12]
 800ce74:	3307      	adds	r3, #7
 800ce76:	f023 0307 	bic.w	r3, r3, #7
 800ce7a:	3308      	adds	r3, #8
 800ce7c:	9303      	str	r3, [sp, #12]
 800ce7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce80:	4433      	add	r3, r6
 800ce82:	9309      	str	r3, [sp, #36]	; 0x24
 800ce84:	e767      	b.n	800cd56 <_svfiprintf_r+0x4e>
 800ce86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	2001      	movs	r0, #1
 800ce8e:	e7a5      	b.n	800cddc <_svfiprintf_r+0xd4>
 800ce90:	2300      	movs	r3, #0
 800ce92:	3401      	adds	r4, #1
 800ce94:	9305      	str	r3, [sp, #20]
 800ce96:	4619      	mov	r1, r3
 800ce98:	f04f 0c0a 	mov.w	ip, #10
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cea2:	3a30      	subs	r2, #48	; 0x30
 800cea4:	2a09      	cmp	r2, #9
 800cea6:	d903      	bls.n	800ceb0 <_svfiprintf_r+0x1a8>
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0c5      	beq.n	800ce38 <_svfiprintf_r+0x130>
 800ceac:	9105      	str	r1, [sp, #20]
 800ceae:	e7c3      	b.n	800ce38 <_svfiprintf_r+0x130>
 800ceb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e7f0      	b.n	800ce9c <_svfiprintf_r+0x194>
 800ceba:	ab03      	add	r3, sp, #12
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	462a      	mov	r2, r5
 800cec0:	4b0f      	ldr	r3, [pc, #60]	; (800cf00 <_svfiprintf_r+0x1f8>)
 800cec2:	a904      	add	r1, sp, #16
 800cec4:	4638      	mov	r0, r7
 800cec6:	f7fc f919 	bl	80090fc <_printf_float>
 800ceca:	1c42      	adds	r2, r0, #1
 800cecc:	4606      	mov	r6, r0
 800cece:	d1d6      	bne.n	800ce7e <_svfiprintf_r+0x176>
 800ced0:	89ab      	ldrh	r3, [r5, #12]
 800ced2:	065b      	lsls	r3, r3, #25
 800ced4:	f53f af2c 	bmi.w	800cd30 <_svfiprintf_r+0x28>
 800ced8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceda:	b01d      	add	sp, #116	; 0x74
 800cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee0:	ab03      	add	r3, sp, #12
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	462a      	mov	r2, r5
 800cee6:	4b06      	ldr	r3, [pc, #24]	; (800cf00 <_svfiprintf_r+0x1f8>)
 800cee8:	a904      	add	r1, sp, #16
 800ceea:	4638      	mov	r0, r7
 800ceec:	f7fc fbaa 	bl	8009644 <_printf_i>
 800cef0:	e7eb      	b.n	800ceca <_svfiprintf_r+0x1c2>
 800cef2:	bf00      	nop
 800cef4:	0800f664 	.word	0x0800f664
 800cef8:	0800f66e 	.word	0x0800f66e
 800cefc:	080090fd 	.word	0x080090fd
 800cf00:	0800cc51 	.word	0x0800cc51
 800cf04:	0800f66a 	.word	0x0800f66a

0800cf08 <_read_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4d07      	ldr	r5, [pc, #28]	; (800cf28 <_read_r+0x20>)
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	4608      	mov	r0, r1
 800cf10:	4611      	mov	r1, r2
 800cf12:	2200      	movs	r2, #0
 800cf14:	602a      	str	r2, [r5, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	f7f4 f9d0 	bl	80012bc <_read>
 800cf1c:	1c43      	adds	r3, r0, #1
 800cf1e:	d102      	bne.n	800cf26 <_read_r+0x1e>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b103      	cbz	r3, 800cf26 <_read_r+0x1e>
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	20000ee8 	.word	0x20000ee8
 800cf2c:	00000000 	.word	0x00000000

0800cf30 <nan>:
 800cf30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf38 <nan+0x8>
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	00000000 	.word	0x00000000
 800cf3c:	7ff80000 	.word	0x7ff80000

0800cf40 <_raise_r>:
 800cf40:	291f      	cmp	r1, #31
 800cf42:	b538      	push	{r3, r4, r5, lr}
 800cf44:	4604      	mov	r4, r0
 800cf46:	460d      	mov	r5, r1
 800cf48:	d904      	bls.n	800cf54 <_raise_r+0x14>
 800cf4a:	2316      	movs	r3, #22
 800cf4c:	6003      	str	r3, [r0, #0]
 800cf4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf52:	bd38      	pop	{r3, r4, r5, pc}
 800cf54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf56:	b112      	cbz	r2, 800cf5e <_raise_r+0x1e>
 800cf58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf5c:	b94b      	cbnz	r3, 800cf72 <_raise_r+0x32>
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f000 f830 	bl	800cfc4 <_getpid_r>
 800cf64:	462a      	mov	r2, r5
 800cf66:	4601      	mov	r1, r0
 800cf68:	4620      	mov	r0, r4
 800cf6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf6e:	f000 b817 	b.w	800cfa0 <_kill_r>
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d00a      	beq.n	800cf8c <_raise_r+0x4c>
 800cf76:	1c59      	adds	r1, r3, #1
 800cf78:	d103      	bne.n	800cf82 <_raise_r+0x42>
 800cf7a:	2316      	movs	r3, #22
 800cf7c:	6003      	str	r3, [r0, #0]
 800cf7e:	2001      	movs	r0, #1
 800cf80:	e7e7      	b.n	800cf52 <_raise_r+0x12>
 800cf82:	2400      	movs	r4, #0
 800cf84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf88:	4628      	mov	r0, r5
 800cf8a:	4798      	blx	r3
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	e7e0      	b.n	800cf52 <_raise_r+0x12>

0800cf90 <raise>:
 800cf90:	4b02      	ldr	r3, [pc, #8]	; (800cf9c <raise+0xc>)
 800cf92:	4601      	mov	r1, r0
 800cf94:	6818      	ldr	r0, [r3, #0]
 800cf96:	f7ff bfd3 	b.w	800cf40 <_raise_r>
 800cf9a:	bf00      	nop
 800cf9c:	2000000c 	.word	0x2000000c

0800cfa0 <_kill_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d07      	ldr	r5, [pc, #28]	; (800cfc0 <_kill_r+0x20>)
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	4611      	mov	r1, r2
 800cfac:	602b      	str	r3, [r5, #0]
 800cfae:	f7f4 f96b 	bl	8001288 <_kill>
 800cfb2:	1c43      	adds	r3, r0, #1
 800cfb4:	d102      	bne.n	800cfbc <_kill_r+0x1c>
 800cfb6:	682b      	ldr	r3, [r5, #0]
 800cfb8:	b103      	cbz	r3, 800cfbc <_kill_r+0x1c>
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	bd38      	pop	{r3, r4, r5, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20000ee8 	.word	0x20000ee8

0800cfc4 <_getpid_r>:
 800cfc4:	f7f4 b958 	b.w	8001278 <_getpid>

0800cfc8 <strncmp>:
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	b17a      	cbz	r2, 800cfec <strncmp+0x24>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	3901      	subs	r1, #1
 800cfd0:	1884      	adds	r4, r0, r2
 800cfd2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cfd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cfda:	4290      	cmp	r0, r2
 800cfdc:	d101      	bne.n	800cfe2 <strncmp+0x1a>
 800cfde:	42a3      	cmp	r3, r4
 800cfe0:	d101      	bne.n	800cfe6 <strncmp+0x1e>
 800cfe2:	1a80      	subs	r0, r0, r2
 800cfe4:	bd10      	pop	{r4, pc}
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d1f3      	bne.n	800cfd2 <strncmp+0xa>
 800cfea:	e7fa      	b.n	800cfe2 <strncmp+0x1a>
 800cfec:	4610      	mov	r0, r2
 800cfee:	e7f9      	b.n	800cfe4 <strncmp+0x1c>

0800cff0 <__ascii_wctomb>:
 800cff0:	b149      	cbz	r1, 800d006 <__ascii_wctomb+0x16>
 800cff2:	2aff      	cmp	r2, #255	; 0xff
 800cff4:	bf85      	ittet	hi
 800cff6:	238a      	movhi	r3, #138	; 0x8a
 800cff8:	6003      	strhi	r3, [r0, #0]
 800cffa:	700a      	strbls	r2, [r1, #0]
 800cffc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d000:	bf98      	it	ls
 800d002:	2001      	movls	r0, #1
 800d004:	4770      	bx	lr
 800d006:	4608      	mov	r0, r1
 800d008:	4770      	bx	lr
	...

0800d00c <_fstat_r>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	4d07      	ldr	r5, [pc, #28]	; (800d02c <_fstat_r+0x20>)
 800d010:	2300      	movs	r3, #0
 800d012:	4604      	mov	r4, r0
 800d014:	4608      	mov	r0, r1
 800d016:	4611      	mov	r1, r2
 800d018:	602b      	str	r3, [r5, #0]
 800d01a:	f7f4 f994 	bl	8001346 <_fstat>
 800d01e:	1c43      	adds	r3, r0, #1
 800d020:	d102      	bne.n	800d028 <_fstat_r+0x1c>
 800d022:	682b      	ldr	r3, [r5, #0]
 800d024:	b103      	cbz	r3, 800d028 <_fstat_r+0x1c>
 800d026:	6023      	str	r3, [r4, #0]
 800d028:	bd38      	pop	{r3, r4, r5, pc}
 800d02a:	bf00      	nop
 800d02c:	20000ee8 	.word	0x20000ee8

0800d030 <_isatty_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4d06      	ldr	r5, [pc, #24]	; (800d04c <_isatty_r+0x1c>)
 800d034:	2300      	movs	r3, #0
 800d036:	4604      	mov	r4, r0
 800d038:	4608      	mov	r0, r1
 800d03a:	602b      	str	r3, [r5, #0]
 800d03c:	f7f4 f993 	bl	8001366 <_isatty>
 800d040:	1c43      	adds	r3, r0, #1
 800d042:	d102      	bne.n	800d04a <_isatty_r+0x1a>
 800d044:	682b      	ldr	r3, [r5, #0]
 800d046:	b103      	cbz	r3, 800d04a <_isatty_r+0x1a>
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	bd38      	pop	{r3, r4, r5, pc}
 800d04c:	20000ee8 	.word	0x20000ee8

0800d050 <_malloc_usable_size_r>:
 800d050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d054:	1f18      	subs	r0, r3, #4
 800d056:	2b00      	cmp	r3, #0
 800d058:	bfbc      	itt	lt
 800d05a:	580b      	ldrlt	r3, [r1, r0]
 800d05c:	18c0      	addlt	r0, r0, r3
 800d05e:	4770      	bx	lr

0800d060 <_init>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	bf00      	nop
 800d064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d066:	bc08      	pop	{r3}
 800d068:	469e      	mov	lr, r3
 800d06a:	4770      	bx	lr

0800d06c <_fini>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	bf00      	nop
 800d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d072:	bc08      	pop	{r3}
 800d074:	469e      	mov	lr, r3
 800d076:	4770      	bx	lr

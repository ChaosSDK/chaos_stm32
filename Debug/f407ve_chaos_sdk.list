
f407ve_chaos_sdk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002994  0800cdc8  0800cdc8  0001cdc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f75c  0800f75c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f75c  0800f75c  0001f75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f764  0800f764  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f764  0800f764  0001f764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f768  0800f768  0001f768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f76c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000d10  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ef0  20000ef0  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160d9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d18  00000000  00000000  000362e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  0003a008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f18  00000000  00000000  0003b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002918d  00000000  00000000  0003bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d9b  00000000  00000000  00065115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e286e  00000000  00000000  0007eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016171e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005794  00000000  00000000  00161770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cdb0 	.word	0x0800cdb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cdb0 	.word	0x0800cdb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_GPIO_Init+0x9c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xa0>)
 800106a:	f004 fd01 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NP_dir_Pin;
 800106e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NP_dir_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xa0>)
 8001088:	f004 fb56 	bl	8005738 <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f004 f934 	bl	800530c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f818 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff ffa6 	bl	8000ff8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ac:	f000 fa90 	bl	80015d0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010b0:	f000 f9ba 	bl	8001428 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010b4:	2108      	movs	r1, #8
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <main+0x34>)
 80010b8:	f005 fa5a 	bl	8006570 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(NP_dir_GPIO_Port, NP_dir_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <main+0x38>)
 80010c4:	f004 fcd4 	bl	8005a70 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80010c8:	f000 fb26 	bl	8001718 <app_main>
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x30>
 80010ce:	bf00      	nop
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40020400 	.word	0x40020400

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fbae 	bl	8008848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemClock_Config+0xd0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemClock_Config+0xd0>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a22      	ldr	r2, [pc, #136]	; (80011ac <SystemClock_Config+0xd4>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800114c:	23a8      	movs	r3, #168	; 0xa8
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fca1 	bl	8005aa4 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 f822 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2105      	movs	r1, #5
 800118a:	4618      	mov	r0, r3
 800118c:	f004 ff02 	bl	8005f94 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 f80b 	bl	80011b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800119a:	f004 ffe1 	bl	8006160 <HAL_RCC_EnableCSS>
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001210:	f005 f8ea 	bl	80063e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x8>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f004 f8a8 	bl	80053b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART1_IRQHandler+0x10>)
 800126a:	f006 f86f 	bl	800734c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000248 	.word	0x20000248

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f006 ffe9 	bl	8008268 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f003 ffe9 	bl	80052e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f006 ff4e 	bl	8008268 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200001fc 	.word	0x200001fc
 8001400:	20000ef0 	.word	0x20000ef0

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_TIM4_Init+0xe8>)
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <MX_TIM4_Init+0xec>)
 800145c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_TIM4_Init+0xe8>)
 800146c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM4_Init+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001480:	f004 ffcd 	bl	800641e <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800148a:	f7ff fe91 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	4619      	mov	r1, r3
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <MX_TIM4_Init+0xe8>)
 800149c:	f005 f9f2 	bl	8006884 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014a6:	f7ff fe83 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014aa:	4819      	ldr	r0, [pc, #100]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ac:	f005 f806 	bl	80064bc <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014b6:	f7ff fe7b 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014ca:	f005 fdb3 	bl	8007034 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014d4:	f7ff fe6c 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4200;
 80014dc:	f241 0368 	movw	r3, #4200	; 0x1068
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM4_Init+0xe8>)
 80014f2:	f005 f905 	bl	8006700 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f7ff fe58 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM4_Init+0xe8>)
 8001502:	f000 f82b 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000200 	.word	0x20000200
 8001514:	40000800 	.word	0x40000800

08001518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_Base_MspInit+0x40>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40000800 	.word	0x40000800
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_TIM_MspPostInit+0x68>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d11e      	bne.n	80015bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_TIM_MspPostInit+0x6c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PP_step_Pin;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PP_step_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_TIM_MspPostInit+0x70>)
 80015b8:	f004 f8be 	bl	8005738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART1_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001608:	f005 fd90 	bl	800712c <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fdcd 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000248 	.word	0x20000248
 8001620:	40011000 	.word	0x40011000

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_UART_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d134      	bne.n	80016b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_UART_MspInit+0x98>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_UART_MspInit+0x9c>)
 800169c:	f004 f84c 	bl	8005738 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f003 ff7e 	bl	80055a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f003 ff97 	bl	80055de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ee:	f7ff fe89 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f007 f849 	bl	8008788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fcd1 	bl	800109c <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001708:	0800f76c 	.word	0x0800f76c
  ldr r2, =_sbss
 800170c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001710:	20000ef0 	.word	0x20000ef0

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <app_main>:

#include "board_pkg.h"


void app_main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af02      	add	r7, sp, #8
	int state = newEntities(5);
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fdcc 	bl	80022bc <newEntities>
 8001724:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "app_main: error entity allocation");
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10e      	bne.n	800174a <app_main+0x32>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf0c      	ite	eq
 8001732:	2301      	moveq	r3, #1
 8001734:	2300      	movne	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <app_main+0x4c>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	230e      	movs	r3, #14
 8001740:	4a09      	ldr	r2, [pc, #36]	; (8001768 <app_main+0x50>)
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <app_main+0x54>)
 8001744:	f003 fcae 	bl	80050a4 <__M_Error>
 8001748:	e008      	b.n	800175c <app_main+0x44>
	entityBoardInit();
 800174a:	f000 f811 	bl	8001770 <entityBoardInit>


	init_stm32_communicator();
 800174e:	f003 fd0b 	bl	8005168 <init_stm32_communicator>
	// protocolAllTest(44, 100, (TESTER_CRC | TESTER_ENDIAN | TESTER_CONVERT | TESTER_RAW_P_DMA | TESTER_REED_SOLOMON_ECC | TESTER_CALLBACK_MANAGER | TESTER_PULL_CONTAINER | TESTER_RAW_P_IT | TESTER_RAW_P_GEN));
	//protocolAllTest(44, 100, TESTER_ENDIAN | TESTER_CONVERT | TESTER_RAW_P_GEN |TESTER_RAW_P_IT | TESTER_RAW_P_DMA);
	while(1) {
		proceedIncommingMessage();
 8001752:	f003 fd3b 	bl	80051cc <proceedIncommingMessage>
		entityBoardProceed();
 8001756:	f000 f9c7 	bl	8001ae8 <entityBoardProceed>
		proceedIncommingMessage();
 800175a:	e7fa      	b.n	8001752 <app_main+0x3a>
	}
}
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800cdfc 	.word	0x0800cdfc
 8001768:	0800cdc8 	.word	0x0800cdc8
 800176c:	0800cde4 	.word	0x0800cde4

08001770 <entityBoardInit>:
#include "main.h"

boards_t* board_entry = NULL;

void entityBoardInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b090      	sub	sp, #64	; 0x40
 8001774:	af06      	add	r7, sp, #24
	reg board_entityNum = ENTITY_NUMBER_ERROR;
 8001776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177a:	607b      	str	r3, [r7, #4]
	reg fieldNumber = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	603b      	str	r3, [r7, #0]

	int state = initEntity(&board_entityNum, (17 + 10 + 1), sizeof(boards_t), "BID ", 0, 0, NULL);
 8001780:	1d38      	adds	r0, r7, #4
 8001782:	2300      	movs	r3, #0
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2300      	movs	r3, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <entityBoardInit+0xd8>)
 8001790:	2270      	movs	r2, #112	; 0x70
 8001792:	211c      	movs	r1, #28
 8001794:	f000 fde4 	bl	8002360 <initEntity>
 8001798:	6278      	str	r0, [r7, #36]	; 0x24
	M_Assert_BreakSaveCheck((state == ENTITY_ERROR), M_EMPTY, return, "entityBoardInit: initEntity Error");
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <entityBoardInit+0x4e>
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <entityBoardInit+0xdc>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	230e      	movs	r3, #14
 80017b4:	4a26      	ldr	r2, [pc, #152]	; (8001850 <entityBoardInit+0xe0>)
 80017b6:	4827      	ldr	r0, [pc, #156]	; (8001854 <entityBoardInit+0xe4>)
 80017b8:	f003 fc74 	bl	80050a4 <__M_Error>
 80017bc:	e16a      	b.n	8001a94 <entityBoardInit+0x324>

	Entity* const entity = getEntityPointer(board_entityNum);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	61bb      	str	r3, [r7, #24]
 */

// getter entity pointer by entity number
STATIC_FORCEINLINE Entity * getEntityPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <entityBoardInit+0xe8>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d206      	bcs.n	80017da <entityBoardInit+0x6a>
        return entityInfo.entities[entityNumber];
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <entityBoardInit+0xe8>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	e000      	b.n	80017dc <entityBoardInit+0x6c>
    }
    return NULLPTR(Entity*);
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
	M_Assert_BreakSaveCheck((entity == NULL), M_EMPTY, return, "entityBoardInit: entity is null");
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10e      	bne.n	8001802 <entityBoardInit+0x92>
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <entityBoardInit+0xec>)
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2311      	movs	r3, #17
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <entityBoardInit+0xe0>)
 80017fa:	4819      	ldr	r0, [pc, #100]	; (8001860 <entityBoardInit+0xf0>)
 80017fc:	f003 fc52 	bl	80050a4 <__M_Error>
 8001800:	e148      	b.n	8001a94 <entityBoardInit+0x324>

	boards_t* entry = getVoidPointer(board_entityNum);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	617b      	str	r3, [r7, #20]
}

// getter data pointer by entity number
STATIC_FORCEINLINE void * getVoidPointer(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber)
{
    if(entityNumber < entityInfo.entities_count) {
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <entityBoardInit+0xe8>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <entityBoardInit+0xb0>
        return entityInfo.entities[entityNumber]->pointer;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <entityBoardInit+0xe8>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	e000      	b.n	8001822 <entityBoardInit+0xb2>
    }
    return NULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
	M_Assert_BreakSaveCheck((entry == NULL), M_EMPTY, return, "entityBoardInit: entry is null");
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d120      	bne.n	800186c <entityBoardInit+0xfc>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <entityBoardInit+0xf4>)
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2314      	movs	r3, #20
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <entityBoardInit+0xe0>)
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <entityBoardInit+0xf8>)
 8001842:	f003 fc2f 	bl	80050a4 <__M_Error>
 8001846:	e125      	b.n	8001a94 <entityBoardInit+0x324>
 8001848:	0800ce20 	.word	0x0800ce20
 800184c:	0800ce60 	.word	0x0800ce60
 8001850:	0800ce28 	.word	0x0800ce28
 8001854:	0800ce48 	.word	0x0800ce48
 8001858:	20000290 	.word	0x20000290
 800185c:	0800ce98 	.word	0x0800ce98
 8001860:	0800ce84 	.word	0x0800ce84
 8001864:	0800cec8 	.word	0x0800cec8
 8001868:	0800ceb8 	.word	0x0800ceb8

	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, boardId), 	UINT8_TYPE, 	"B   ", &entry->boardId);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4639      	mov	r1, r7
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	4b8a      	ldr	r3, [pc, #552]	; (8001a9c <entityBoardInit+0x32c>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2301      	movs	r3, #1
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	2201      	movs	r2, #1
 800187e:	6a38      	ldr	r0, [r7, #32]
 8001880:	f000 fe80 	bl	8002584 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, major), 		UINT8_TYPE, 	"VerH", &entry->major);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	3301      	adds	r3, #1
 8001888:	4639      	mov	r1, r7
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	4b84      	ldr	r3, [pc, #528]	; (8001aa0 <entityBoardInit+0x330>)
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	2201      	movs	r2, #1
 8001898:	6a38      	ldr	r0, [r7, #32]
 800189a:	f000 fe73 	bl	8002584 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, minor), 		UINT8_TYPE, 	"VerM", &entry->minor);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3302      	adds	r3, #2
 80018a2:	4639      	mov	r1, r7
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <entityBoardInit+0x334>)
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	2201      	movs	r2, #1
 80018b2:	6a38      	ldr	r0, [r7, #32]
 80018b4:	f000 fe66 	bl	8002584 <initField>
	initField(entity, &fieldNumber, (ENTITY_READ_ONLY_MSK), offsetof(boards_t, patch), 		UINT16_TYPE, 	"VerL", &entry->patch);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3304      	adds	r3, #4
 80018bc:	4639      	mov	r1, r7
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <entityBoardInit+0x338>)
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2304      	movs	r3, #4
 80018ca:	2201      	movs	r2, #1
 80018cc:	6a38      	ldr	r0, [r7, #32]
 80018ce:	f000 fe59 	bl	8002584 <initField>

    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _1), UINT8_TYPE,                "F1", &entry->_1);
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3306      	adds	r3, #6
 80018d6:	4639      	mov	r1, r7
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	4b74      	ldr	r3, [pc, #464]	; (8001aac <entityBoardInit+0x33c>)
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2301      	movs	r3, #1
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2306      	movs	r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	6a38      	ldr	r0, [r7, #32]
 80018e8:	f000 fe4c 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _2), UINT8_TYPE,                "F2", &entry->_2);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3307      	adds	r3, #7
 80018f0:	4639      	mov	r1, r7
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <entityBoardInit+0x340>)
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2307      	movs	r3, #7
 80018fe:	2200      	movs	r2, #0
 8001900:	6a38      	ldr	r0, [r7, #32]
 8001902:	f000 fe3f 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _3), UINT16_TYPE,               "F3", &entry->_3);
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3308      	adds	r3, #8
 800190a:	4639      	mov	r1, r7
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	4b69      	ldr	r3, [pc, #420]	; (8001ab4 <entityBoardInit+0x344>)
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2302      	movs	r3, #2
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2308      	movs	r3, #8
 8001918:	2200      	movs	r2, #0
 800191a:	6a38      	ldr	r0, [r7, #32]
 800191c:	f000 fe32 	bl	8002584 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _4), UINT24_TYPE,               "F4", &entry->_4);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _5), UINT32_TYPE,               "F5", &entry->_5);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3310      	adds	r3, #16
 8001924:	4639      	mov	r1, r7
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <entityBoardInit+0x348>)
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2303      	movs	r3, #3
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2310      	movs	r3, #16
 8001932:	2200      	movs	r2, #0
 8001934:	6a38      	ldr	r0, [r7, #32]
 8001936:	f000 fe25 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _6), UINT64_TYPE,               "F6", &entry->_6);
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3318      	adds	r3, #24
 800193e:	4639      	mov	r1, r7
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <entityBoardInit+0x34c>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2304      	movs	r3, #4
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2318      	movs	r3, #24
 800194c:	2200      	movs	r2, #0
 800194e:	6a38      	ldr	r0, [r7, #32]
 8001950:	f000 fe18 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _7), CHAR_TYPE,                 "F7", &entry->_7);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	3320      	adds	r3, #32
 8001958:	4639      	mov	r1, r7
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <entityBoardInit+0x350>)
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2305      	movs	r3, #5
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2320      	movs	r3, #32
 8001966:	2200      	movs	r2, #0
 8001968:	6a38      	ldr	r0, [r7, #32]
 800196a:	f000 fe0b 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _8), INT8_TYPE,                 "F8", &entry->_8);
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3321      	adds	r3, #33	; 0x21
 8001972:	4639      	mov	r1, r7
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <entityBoardInit+0x354>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2306      	movs	r3, #6
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2321      	movs	r3, #33	; 0x21
 8001980:	2200      	movs	r2, #0
 8001982:	6a38      	ldr	r0, [r7, #32]
 8001984:	f000 fdfe 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _9), INT16_TYPE,                "F9", &entry->_9);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	3322      	adds	r3, #34	; 0x22
 800198c:	4639      	mov	r1, r7
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	4b4d      	ldr	r3, [pc, #308]	; (8001ac8 <entityBoardInit+0x358>)
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2307      	movs	r3, #7
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2322      	movs	r3, #34	; 0x22
 800199a:	2200      	movs	r2, #0
 800199c:	6a38      	ldr	r0, [r7, #32]
 800199e:	f000 fdf1 	bl	8002584 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _10), INT24_TYPE,               "F10", &entry->_10);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _11), INT32_TYPE,               "F11", &entry->_11);
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3328      	adds	r3, #40	; 0x28
 80019a6:	4639      	mov	r1, r7
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	4b48      	ldr	r3, [pc, #288]	; (8001acc <entityBoardInit+0x35c>)
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2308      	movs	r3, #8
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2328      	movs	r3, #40	; 0x28
 80019b4:	2200      	movs	r2, #0
 80019b6:	6a38      	ldr	r0, [r7, #32]
 80019b8:	f000 fde4 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _12), INT64_TYPE,               "F12", &entry->_12);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3330      	adds	r3, #48	; 0x30
 80019c0:	4639      	mov	r1, r7
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <entityBoardInit+0x360>)
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2309      	movs	r3, #9
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2330      	movs	r3, #48	; 0x30
 80019ce:	2200      	movs	r2, #0
 80019d0:	6a38      	ldr	r0, [r7, #32]
 80019d2:	f000 fdd7 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _13), FLOAT_TYPE,               "F13", &entry->_13);
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	4639      	mov	r1, r7
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <entityBoardInit+0x364>)
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	230a      	movs	r3, #10
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2338      	movs	r3, #56	; 0x38
 80019e8:	2200      	movs	r2, #0
 80019ea:	6a38      	ldr	r0, [r7, #32]
 80019ec:	f000 fdca 	bl	8002584 <initField>
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _14), DOUBLE_TYPE,              "F14", &entry->_14);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3340      	adds	r3, #64	; 0x40
 80019f4:	4639      	mov	r1, r7
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <entityBoardInit+0x368>)
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	230b      	movs	r3, #11
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	2200      	movs	r2, #0
 8001a04:	6a38      	ldr	r0, [r7, #32]
 8001a06:	f000 fdbd 	bl	8002584 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _15), LONG_DOUBLE_TYPE,         "F15", &entry->_15);
    initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _16), BOOL_TYPE,                "F16", &entry->_16);
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3350      	adds	r3, #80	; 0x50
 8001a0e:	4639      	mov	r1, r7
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	4b32      	ldr	r3, [pc, #200]	; (8001adc <entityBoardInit+0x36c>)
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	230d      	movs	r3, #13
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2350      	movs	r3, #80	; 0x50
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6a38      	ldr	r0, [r7, #32]
 8001a20:	f000 fdb0 	bl	8002584 <initField>
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _17), REG_TYPE,                 "F17", &entry->_17);
    //initField(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, _18), SREG_TYPE,                "F18", &entry->_18);

    initFieldArray(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, data), UINT8_TYPE, sizeof(entry->data), NULL, entry->data, 1);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	335c      	adds	r3, #92	; 0x5c
 8001a28:	4639      	mov	r1, r7
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	9204      	str	r2, [sp, #16]
 8001a2e:	9303      	str	r3, [sp, #12]
 8001a30:	2300      	movs	r3, #0
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	230a      	movs	r3, #10
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	235c      	movs	r3, #92	; 0x5c
 8001a3e:	2200      	movs	r2, #0
 8001a40:	6a38      	ldr	r0, [r7, #32]
 8001a42:	f000 fe55 	bl	80026f0 <initFieldArray>
    initFieldPointer(entity, &fieldNumber, (ENTITY_EMPTY_FLAG), offsetof(boards_t, ptr), UINT8_TYPE,                "REG", &entry->ptr);
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3368      	adds	r3, #104	; 0x68
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	613a      	str	r2, [r7, #16]
 8001a4e:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <entityBoardInit+0x370>)
 8001a50:	60fa      	str	r2, [r7, #12]
 8001a52:	60bb      	str	r3, [r7, #8]

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr);
STATIC_FORCEINLINE int initFieldPointer(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], reg* const field_ptr)
{
	return initField(entityInst, fieldNumber, bitFlags | ENTITY_POINTER_MSK, shift, type, descr, field_ptr);
 8001a54:	2208      	movs	r2, #8
 8001a56:	4639      	mov	r1, r7
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	2301      	movs	r3, #1
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2368      	movs	r3, #104	; 0x68
 8001a66:	6938      	ldr	r0, [r7, #16]
 8001a68:	f000 fd8c 	bl	8002584 <initField>
    entry->ptr = (reg)&entry->data[1];
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	335d      	adds	r3, #93	; 0x5d
 8001a70:	461a      	mov	r2, r3
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	669a      	str	r2, [r3, #104]	; 0x68

	entry->boardId 	= INIT_BOARD_ID;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
	entry->major 	= BOARD_MAJOR;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	705a      	strb	r2, [r3, #1]
	entry->minor 	= BOARD_MINOR;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	2200      	movs	r2, #0
 8001a86:	709a      	strb	r2, [r3, #2]
	entry->patch	= BOARD_PATCHLEVEL;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	809a      	strh	r2, [r3, #4]
	board_entry 	= entry;
 8001a8e:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <entityBoardInit+0x374>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	0800cee8 	.word	0x0800cee8
 8001aa0:	0800cef0 	.word	0x0800cef0
 8001aa4:	0800cef8 	.word	0x0800cef8
 8001aa8:	0800cf00 	.word	0x0800cf00
 8001aac:	0800cf08 	.word	0x0800cf08
 8001ab0:	0800cf0c 	.word	0x0800cf0c
 8001ab4:	0800cf10 	.word	0x0800cf10
 8001ab8:	0800cf14 	.word	0x0800cf14
 8001abc:	0800cf18 	.word	0x0800cf18
 8001ac0:	0800cf1c 	.word	0x0800cf1c
 8001ac4:	0800cf20 	.word	0x0800cf20
 8001ac8:	0800cf24 	.word	0x0800cf24
 8001acc:	0800cf28 	.word	0x0800cf28
 8001ad0:	0800cf2c 	.word	0x0800cf2c
 8001ad4:	0800cf30 	.word	0x0800cf30
 8001ad8:	0800cf34 	.word	0x0800cf34
 8001adc:	0800cf38 	.word	0x0800cf38
 8001ae0:	0800cf3c 	.word	0x0800cf3c
 8001ae4:	2000028c 	.word	0x2000028c

08001ae8 <entityBoardProceed>:

void entityBoardProceed(void)
{
 8001ae8:	b598      	push	{r3, r4, r7, lr}
 8001aea:	af00      	add	r7, sp, #0
//	if((HAL_GetTick() - lastTime) > 1000) {
//		board_entry->
//	}
//
//	lastTime = HAL_GetTick();
	board_entry->_5 = HAL_GetTick();
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <entityBoardProceed+0x1c>)
 8001aee:	681c      	ldr	r4, [r3, #0]
 8001af0:	f003 fc72 	bl	80053d8 <HAL_GetTick>
 8001af4:	4603      	mov	r3, r0
 8001af6:	6123      	str	r3, [r4, #16]
	board_entry->_13 = 3.444;
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <entityBoardProceed+0x1c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a02      	ldr	r2, [pc, #8]	; (8001b08 <entityBoardProceed+0x20>)
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b00:	bf00      	nop
 8001b02:	bd98      	pop	{r3, r4, r7, pc}
 8001b04:	2000028c 	.word	0x2000028c
 8001b08:	405c6a7f 	.word	0x405c6a7f

08001b0c <HAL_UART_RxCpltCallback>:



// uart callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_UART_RxCpltCallback+0x54>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d11c      	bne.n	8001b58 <HAL_UART_RxCpltCallback+0x4c>

		RawParser_dma_receiveByte(&comm.rawparser, comm.receiveByte);
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_UART_RxCpltCallback+0x58>)
 8001b20:	f893 3a34 	ldrb.w	r3, [r3, #2612]	; 0xa34
 8001b24:	75fb      	strb	r3, [r7, #23]

// receive functions-----------------------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_receiveByte(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == NULL), M_EMPTY, return, "RawParser_dma_receiveByte: No valid input");
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_UART_RxCpltCallback+0x5c>)
 8001b28:	613b      	str	r3, [r7, #16]
    reg m_receivePos            = self->m_receivePos;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_UART_RxCpltCallback+0x58>)
 8001b2c:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8001b30:	60fb      	str	r3, [r7, #12]

    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	7dfa      	ldrb	r2, [r7, #23]
 8001b3e:	701a      	strb	r2, [r3, #0]
    ++m_receivePos;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]

    self->m_receivePos = m_receivePos;
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_UART_RxCpltCallback+0x58>)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
		HAL_UART_Receive_IT(huart, (uint8_t*) &comm.receiveByte, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4906      	ldr	r1, [pc, #24]	; (8001b6c <HAL_UART_RxCpltCallback+0x60>)
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 fbc9 	bl	80072ea <HAL_UART_Receive_IT>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40011000 	.word	0x40011000
 8001b64:	200002a4 	.word	0x200002a4
 8001b68:	200002ac 	.word	0x200002ac
 8001b6c:	20000cd8 	.word	0x20000cd8

08001b70 <CallbackManager_init>:
    CallbackManager_init(m_manager);
    return m_manager;
}

void CallbackManager_init(CallbackManager_t * const self)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_init: no valid input data", ENA, LIB);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d112      	bne.n	8001ba4 <CallbackManager_init+0x34>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <CallbackManager_init+0x60>)
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	2301      	movs	r3, #1
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <CallbackManager_init+0x64>)
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2314      	movs	r3, #20
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <CallbackManager_init+0x68>)
 8001b9c:	480f      	ldr	r0, [pc, #60]	; (8001bdc <CallbackManager_init+0x6c>)
 8001b9e:	f003 fa81 	bl	80050a4 <__M_Error>
 8001ba2:	e011      	b.n	8001bc8 <CallbackManager_init+0x58>
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e007      	b.n	8001bba <CallbackManager_init+0x4a>
        self->workers[i] = (CallbackWorker)NULL;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned i = 0; i < CALL_B_MAN_MAX_COMMAND_FUNCTIONS; ++i) {
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2bff      	cmp	r3, #255	; 0xff
 8001bbe:	d9f4      	bls.n	8001baa <CallbackManager_init+0x3a>
        self->ctx[i] = NULL;
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
    }

#ifndef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx = NULL;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0800cfa0 	.word	0x0800cfa0
 8001bd4:	0800d00c 	.word	0x0800d00c
 8001bd8:	0800cf40 	.word	0x0800cf40
 8001bdc:	0800cfe8 	.word	0x0800cfe8

08001be0 <CallbackManager_addWorker>:

    return 0;
}

void CallbackManager_addWorker(CallbackManager_t * const self, const CallBManIdType id, const CallbackWorker worker, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af04      	add	r7, sp, #16
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	460b      	mov	r3, r1
 8001bee:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d112      	bne.n	8001c1c <CallbackManager_addWorker+0x3c>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4619      	mov	r1, r3
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <CallbackManager_addWorker+0x54>)
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <CallbackManager_addWorker+0x58>)
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	232d      	movs	r3, #45	; 0x2d
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <CallbackManager_addWorker+0x5c>)
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <CallbackManager_addWorker+0x60>)
 8001c16:	f003 fa45 	bl	80050a4 <__M_Error>
 8001c1a:	e008      	b.n	8001c2e <CallbackManager_addWorker+0x4e>

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    self->workers[id] = worker;
 8001c1c:	7afa      	ldrb	r2, [r7, #11]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx[id] = PREPROCESSOR_CTX_TYPE_CAST(ctx);
#else
    self->ctx = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */
}
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	0800cfa0 	.word	0x0800cfa0
 8001c38:	0800d090 	.word	0x0800d090
 8001c3c:	0800cf40 	.word	0x0800cf40
 8001c40:	0800cfe8 	.word	0x0800cfe8

08001c44 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
int CallbackManager_proceed(const CallbackManager_t* const self, const CallBManIdType id,
                            u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b08b      	sub	sp, #44	; 0x2c
 8001c48:	af04      	add	r7, sp, #16
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input data", ENA, LIB);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d113      	bne.n	8001c82 <CallbackManager_proceed+0x3e>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <CallbackManager_proceed+0x84>)
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <CallbackManager_proceed+0x88>)
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2341      	movs	r3, #65	; 0x41
 8001c76:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <CallbackManager_proceed+0x8c>)
 8001c78:	4816      	ldr	r0, [pc, #88]	; (8001cd4 <CallbackManager_proceed+0x90>)
 8001c7a:	f003 fa13 	bl	80050a4 <__M_Error>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e01e      	b.n	8001cc0 <CallbackManager_proceed+0x7c>
#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input id", ENA, LIB);
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    // move to cash
    const CallbackWorker worker = self->workers[id];
 8001c82:	7afa      	ldrb	r2, [r7, #11]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8a:	617b      	str	r3, [r7, #20]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx[id];
#else
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c92:	613b      	str	r3, [r7, #16]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    // do logic
    M_Assert_SafeFunctionCall((worker != (CallbackWorker)NULL), {
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <CallbackManager_proceed+0x6a>
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	697c      	ldr	r4, [r7, #20]
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	47a0      	blx	r4
 8001caa:	2301      	movs	r3, #1
 8001cac:	e008      	b.n	8001cc0 <CallbackManager_proceed+0x7c>
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <CallbackManager_proceed+0x94>)
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2351      	movs	r3, #81	; 0x51
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <CallbackManager_proceed+0x8c>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <CallbackManager_proceed+0x98>)
 8001cba:	f003 fa11 	bl	80050e0 <__M_Warning>
                                  worker(inputData, outputData, size, maxOutBufferSize, ctx);
                                  return 1;
                              });
    return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	0800cfa0 	.word	0x0800cfa0
 8001ccc:	0800d0c4 	.word	0x0800d0c4
 8001cd0:	0800cf40 	.word	0x0800cf40
 8001cd4:	0800cfe8 	.word	0x0800cfe8
 8001cd8:	0800d118 	.word	0x0800d118
 8001cdc:	0800d0f4 	.word	0x0800d0f4

08001ce0 <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	4053      	eors	r3, r2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <fast_crc8_maxim_byte+0x2c>)
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	0800f16c 	.word	0x0800f16c

08001d10 <entityCMD>:
#ifdef C_ENTITY_FRAMEWORK_LIB_ENA
#include "entity_packet.h"
#include "smart_assert.h"

void entityCMD(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b0b7      	sub	sp, #220	; 0xdc
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
	M_Assert_Break((inputData == NULL) || (outputData == NULL) || (size == NULL), M_EMPTY, return, "entityCMD: invalid input");
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <entityCMD+0x20>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <entityCMD+0x20>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d114      	bne.n	8001d5a <entityCMD+0x4a>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <entityCMD+0x32>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <entityCMD+0x32>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <entityCMD+0x36>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <entityCMD+0x38>
 8001d46:	2300      	movs	r3, #0
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	4bab      	ldr	r3, [pc, #684]	; (8001ff8 <entityCMD+0x2e8>)
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4aaa      	ldr	r2, [pc, #680]	; (8001ffc <entityCMD+0x2ec>)
 8001d52:	48ab      	ldr	r0, [pc, #684]	; (8002000 <entityCMD+0x2f0>)
 8001d54:	f003 f9a6 	bl	80050a4 <__M_Error>
 8001d58:	e20c      	b.n	8002174 <entityCMD+0x464>

	const reg sizeInternal = (*size);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	M_Assert_Break((sizeInternal == 0) || (maxOutBufferSize == 0), M_EMPTY, return, "entityCMD: invalid input size");
 8001d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <entityCMD+0x60>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d112      	bne.n	8001d96 <entityCMD+0x86>
 8001d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <entityCMD+0x6e>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <entityCMD+0x72>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <entityCMD+0x74>
 8001d82:	2300      	movs	r3, #0
 8001d84:	b2d9      	uxtb	r1, r3
 8001d86:	4b9f      	ldr	r3, [pc, #636]	; (8002004 <entityCMD+0x2f4>)
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	230d      	movs	r3, #13
 8001d8c:	4a9b      	ldr	r2, [pc, #620]	; (8001ffc <entityCMD+0x2ec>)
 8001d8e:	489e      	ldr	r0, [pc, #632]	; (8002008 <entityCMD+0x2f8>)
 8001d90:	f003 f988 	bl	80050a4 <__M_Error>
 8001d94:	e1ee      	b.n	8002174 <entityCMD+0x464>

	reg Wpos = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	reg Rpos = 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	643b      	str	r3, [r7, #64]	; 0x40
	reg entitySize = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
	const u8 cmd = inputData[0];
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


	// write header------------------------------------------
	outputData[0] =   cmd;                     // CMD_ID
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8001db2:	701a      	strb	r2, [r3, #0]

	// do logic------------------------------------------
	switch(cmd) {
 8001db4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001db8:	2b0b      	cmp	r3, #11
 8001dba:	f200 81d5 	bhi.w	8002168 <entityCMD+0x458>
 8001dbe:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <entityCMD+0xb4>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e23 	.word	0x08001e23
 8001dc8:	08001ec1 	.word	0x08001ec1
 8001dcc:	08001fb3 	.word	0x08001fb3
 8001dd0:	08002091 	.word	0x08002091
 8001dd4:	08002069 	.word	0x08002069
 8001dd8:	08002121 	.word	0x08002121
 8001ddc:	08002149 	.word	0x08002149
 8001de0:	08002149 	.word	0x08002149
 8001de4:	08002169 	.word	0x08002169
 8001de8:	08002169 	.word	0x08002169
 8001dec:	08001e07 	.word	0x08001e07
 8001df0:	08001df5 	.word	0x08001df5

	/* **********************************************************************************************************************************
	 *  ENTITY PING
	 */
	case ENTITY_PING_CMD: {
		entitySize = 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c

#ifdef USE_ENTITY_PING
		outputData[1] = entities_ping();
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1c5c      	adds	r4, r3, #1
 8001dfc:	f000 fd6e 	bl	80028dc <entities_ping>
 8001e00:	4603      	mov	r3, r0
 8001e02:	7023      	strb	r3, [r4, #0]
#else
		outputData[1] = 1;
#endif /* USE_ENTITY_PING */
		break;}
 8001e04:	e1b0      	b.n	8002168 <entityCMD+0x458>

	/* **********************************************************************************************************************************
	 *  READ MAIN TYPE DIMENSIONS
	 */
	case ENTITY_READ_DIMENSIONS: {
		readEntitiesSizes((outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e0c:	18d0      	adds	r0, r2, r3
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f000 fd6a 	bl	80028f4 <readEntitiesSizes>
		break;}
 8001e20:	e1a2      	b.n	8002168 <entityCMD+0x458>
	 */
	case READ_ENTITY_DESCRIPTIONS: {
		//ENTITY_DBG_ASSERT_BUF( (Rpos + (ENTITIES_SIZEOF << 1)) > sizeInternal, M_EMPTY, return, "entityCMD: read size more than buffer");

		// read entity start
		TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber = readEntityNumberFromBuf(&inputData[Rpos]);
 8001e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
/************************************************************************************
 *  Macro for user copy
 */
STATIC_FORCEINLINE void MY_CTYPE_USER_DATA_MEMCPY(reg n, const void* from, void* to)
{
    switch (n) {
 8001e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d013      	beq.n	8001e72 <entityCMD+0x162>
 8001e4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d106      	bne.n	8001e60 <entityCMD+0x150>
//    case sizeof(u64): *(u64*)to = *(u64*)from; break;
//    case sizeof(u32): *(u32*)to = *(u32*)from; break;
//    case sizeof(u16): *(u16*)to = *(u16*)from; break;
//-------------------- NOT WORK --------------------------------------------------------
    case 0: break;
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8001e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e009      	b.n	8001e74 <entityCMD+0x164>
    default: memcpy(to, from, n); break;
 8001e60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e64:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001e68:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001e6c:	f006 fcc4 	bl	80087f8 <memcpy>
 8001e70:	e000      	b.n	8001e74 <entityCMD+0x164>
    case 0: break;
 8001e72:	bf00      	nop
    }
}
 8001e74:	bf00      	nop
#if (MAX_NUBER_OF_ENTITIES < 256U)
	entityNumber = *(inputData);
#else

    ENTITY_BYTE_CPY(ENTITIES_SIZEOF, inputData, &entityNumber);
    entityNumber &= 0x0000FFFFUL;
 8001e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
#endif /* (MAX_NUBER_OF_ENTITIES < 256U) */
    //----------------- END --------------------------------------------------------------------------------

    return entityNumber;
 8001e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		Rpos += ENTITIES_SIZEOF;
 8001e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e84:	3302      	adds	r3, #2
 8001e86:	643b      	str	r3, [r7, #64]	; 0x40

		// read number of entity
		//        TYPEOF_STRUCT(EntityInfo, entities_count) len; //(WARNING!!!) do not supported on old version!!!!!!!
		//        readEntityNumberFromBuf(&len, &inputData[Rpos]);
		//        Rpos += ENTITIES_SIZEOF;
		const TYPEOF_STRUCT(EntityInfo, entities_count) len = inputData[Rpos++]; // support on old version (this is glitch!!!)
 8001e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	643a      	str	r2, [r7, #64]	; 0x40
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// read descriptions function
		readEntitiesDescriptions(startEntityNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e9e:	18d1      	adds	r1, r2, r3
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001eb6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001eba:	f000 fdb9 	bl	8002a30 <readEntitiesDescriptions>
		break;}
 8001ebe:	e153      	b.n	8002168 <entityCMD+0x458>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
}

// read entity & field number from input buffer by next position
STATIC_FORCEINLINE void readEntityFieldNumbersfromBuf(TYPEOF_STRUCT(EntityInfo, entities_count)* const entityNumber, TYPEOF_STRUCT(Entity, fields_count)* const fieldNumber, u8* const inputData, reg* const Rpos)
{
    reg Rpos_internal = (*Rpos);
 8001ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read entity number
     */
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001ecc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    switch (n) {
 8001ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <entityCMD+0x210>
 8001ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <entityCMD+0x1fe>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8001f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e009      	b.n	8001f22 <entityCMD+0x212>
    default: memcpy(to, from, n); break;
 8001f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f16:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f1a:	f006 fc6d 	bl	80087f8 <memcpy>
 8001f1e:	e000      	b.n	8001f22 <entityCMD+0x212>
    case 0: break;
 8001f20:	bf00      	nop
}
 8001f22:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    return entityNumber;
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
    Rpos_internal += ENTITIES_SIZEOF;
 8001f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f32:	3302      	adds	r3, #2
 8001f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /*******************************************************************************************************
     *  read field number
     */
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001f38:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f40:	4413      	add	r3, r2
 8001f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	fieldNumber = *(inputData);
 8001f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    return fieldNumber;
 8001f50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8001f54:	867b      	strh	r3, [r7, #50]	; 0x32
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8001f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    //----------------- END -----------------------------------------------
    (*Rpos) = Rpos_internal;
 8001f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f64:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001f66:	bf00      	nop
		TYPEOF_STRUCT(Entity, fields_count)         startFieldNumber;
		TYPEOF_STRUCT(Entity, fields_count)         len;
		readEntityFieldNumbersfromBuf(&entityNumber, &startFieldNumber, inputData, &Rpos);

		//read number of fields
		len = readFieldNumberFromBuf(&inputData[Rpos]);
 8001f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	fieldNumber = *(inputData);
 8001f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    return fieldNumber;
 8001f7c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001f80:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		Rpos += ENTITY_FIELD_SIZEOF;
 8001f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f86:	3301      	adds	r3, #1
 8001f88:	643b      	str	r3, [r7, #64]	; 0x40

		readEntityFields(entityNumber, startFieldNumber, len, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8001f8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f8c:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f94:	18d4      	adds	r4, r2, r3
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4623      	mov	r3, r4
 8001fac:	f000 fdfc 	bl	8002ba8 <readEntityFields>
		break;}
 8001fb0:	e0da      	b.n	8002168 <entityCMD+0x458>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    reg Rpos_internal = (*Rpos);
 8001fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fba:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8001fbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc2:	4413      	add	r3, r2
 8001fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	677b      	str	r3, [r7, #116]	; 0x74
 8001fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8001fce:	f107 0320 	add.w	r3, r7, #32
 8001fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    switch (n) {
 8001fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d018      	beq.n	800200c <entityCMD+0x2fc>
 8001fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d104      	bne.n	8001fea <entityCMD+0x2da>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8001fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e011      	b.n	800200e <entityCMD+0x2fe>
    default: memcpy(to, from, n); break;
 8001fea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001fee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ff0:	f006 fc02 	bl	80087f8 <memcpy>
 8001ff4:	e00b      	b.n	800200e <entityCMD+0x2fe>
 8001ff6:	bf00      	nop
 8001ff8:	0800d19c 	.word	0x0800d19c
 8001ffc:	0800d12c 	.word	0x0800d12c
 8002000:	0800d15c 	.word	0x0800d15c
 8002004:	0800d1e8 	.word	0x0800d1e8
 8002008:	0800d1b8 	.word	0x0800d1b8
    case 0: break;
 800200c:	bf00      	nop
}
 800200e:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	b29b      	uxth	r3, r3
 8002014:	623b      	str	r3, [r7, #32]
    return entityNumber;
 8002016:	6a3b      	ldr	r3, [r7, #32]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
    Rpos_internal += ENTITIES_SIZEOF;
 800201a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800201c:	3302      	adds	r3, #2
 800201e:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8002020:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002026:	4413      	add	r3, r2
 8002028:	66bb      	str	r3, [r7, #104]	; 0x68
	fieldNumber = *(inputData);
 800202a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    return fieldNumber;
 8002032:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8002036:	84fb      	strh	r3, [r7, #38]	; 0x26
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8002038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800203a:	3301      	adds	r3, #1
 800203c:	67fb      	str	r3, [r7, #124]	; 0x7c
    (*Rpos) = Rpos_internal;
 800203e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002040:	643b      	str	r3, [r7, #64]	; 0x40
}
 8002042:	bf00      	nop

		TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
		TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
		readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

		readFieldValue(entityNumber, fieldNumber, (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002046:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800204e:	18d4      	adds	r4, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	4613      	mov	r3, r2
 8002060:	4622      	mov	r2, r4
 8002062:	f000 fec1 	bl	8002de8 <readFieldValue>
		break;}
 8002066:	e07f      	b.n	8002168 <entityCMD+0x458>

	case READ_SEVERAL_VALUES: {
		entitySize = (sizeInternal - 1U);
 8002068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800206c:	3b01      	subs	r3, #1
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
		readSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	18d0      	adds	r0, r2, r3
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800207c:	18d1      	adds	r1, r2, r3
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800208a:	f000 ffe9 	bl	8003060 <readSeveralFieldsValues>
		break;}
 800208e:	e06b      	b.n	8002168 <entityCMD+0x458>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	663b      	str	r3, [r7, #96]	; 0x60
    reg Rpos_internal = (*Rpos);
 8002094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002096:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8002098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800209a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800209c:	4413      	add	r3, r2
 800209e:	65bb      	str	r3, [r7, #88]	; 0x58
 80020a0:	2302      	movs	r3, #2
 80020a2:	657b      	str	r3, [r7, #84]	; 0x54
 80020a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a6:	653b      	str	r3, [r7, #80]	; 0x50
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (n) {
 80020ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <entityCMD+0x3c0>
 80020b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d104      	bne.n	80020c4 <entityCMD+0x3b4>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80020ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e006      	b.n	80020d2 <entityCMD+0x3c2>
    default: memcpy(to, from, n); break;
 80020c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020ca:	f006 fb95 	bl	80087f8 <memcpy>
 80020ce:	e000      	b.n	80020d2 <entityCMD+0x3c2>
    case 0: break;
 80020d0:	bf00      	nop
}
 80020d2:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	617b      	str	r3, [r7, #20]
    return entityNumber;
 80020da:	697b      	ldr	r3, [r7, #20]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80020dc:	61fb      	str	r3, [r7, #28]
    Rpos_internal += ENTITIES_SIZEOF;
 80020de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e0:	3302      	adds	r3, #2
 80020e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80020e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e8:	4413      	add	r3, r2
 80020ea:	64bb      	str	r3, [r7, #72]	; 0x48
	fieldNumber = *(inputData);
 80020ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    return fieldNumber;
 80020f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80020f8:	837b      	strh	r3, [r7, #26]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80020fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fc:	3301      	adds	r3, #1
 80020fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    (*Rpos) = Rpos_internal;
 8002100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
}
 8002104:	bf00      	nop

		TYPEOF_STRUCT(EntityInfo, entities_count)   entityNumber;
		TYPEOF_STRUCT(Entity, fields_count)         fieldNumber;
		readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

		setFieldValue(entityNumber, fieldNumber, (inputData + Rpos), (sizeInternal - Rpos));
 8002106:	69f8      	ldr	r0, [r7, #28]
 8002108:	8b79      	ldrh	r1, [r7, #26]
 800210a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	18d4      	adds	r4, r2, r3
 8002110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002112:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4622      	mov	r2, r4
 800211a:	f001 f9b3 	bl	8003484 <setFieldValue>
		break;}
 800211e:	e023      	b.n	8002168 <entityCMD+0x458>

	case WRITE_SEVERAL_VALUES: {
		entitySize = (sizeInternal - 1U);
 8002120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002124:	3b01      	subs	r3, #1
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
		setSeveralFieldsValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	18d0      	adds	r0, r2, r3
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002134:	18d1      	adds	r1, r2, r3
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002142:	f001 faaf 	bl	80036a4 <setSeveralFieldsValues>
		break;}
 8002146:	e00f      	b.n	8002168 <entityCMD+0x458>
	/* **********************************************************************************************************************************
	 *  WRITE/READ Values
	 */
	case READ_SEVERAL_VALUES_GLUED :
	case WRITE_SEVERAL_VALUES_GLUED: {
		proceedGluedValues((inputData + Rpos), (outputData + Wpos), &entitySize, (maxOutBufferSize - Wpos));
 8002148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	18d0      	adds	r0, r2, r3
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002154:	18d1      	adds	r1, r2, r3
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002162:	f001 fcb5 	bl	8003ad0 <proceedGluedValues>
		break;}
 8002166:	bf00      	nop
	case ENTITY_FLASH_OPERATION: {
		break;}

	}

	(*size) = (Wpos + entitySize);
 8002168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800216a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800216e:	441a      	add	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	601a      	str	r2, [r3, #0]
	UNUSED(ctx);
}
 8002174:	37d4      	adds	r7, #212	; 0xd4
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	bf00      	nop

0800217c <deleteEntitityFieldsInternal>:
 * **********************************************************************************************************************************
 */

/// delete some entity for internal using
static void deleteEntitityFieldsInternal(const reg entityNumber)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af02      	add	r7, sp, #8
 8002182:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((entityNumber > entityInfo.entities_count), M_EMPTY, return, "deleteEntitityFieldsInternal: No entity for delete!!!");
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <deleteEntitityFieldsInternal+0x34>
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	bf8c      	ite	hi
 8002198:	2301      	movhi	r3, #1
 800219a:	2300      	movls	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <deleteEntitityFieldsInternal+0xe4>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	231b      	movs	r3, #27
 80021a6:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <deleteEntitityFieldsInternal+0xe8>)
 80021a8:	482f      	ldr	r0, [pc, #188]	; (8002268 <deleteEntitityFieldsInternal+0xec>)
 80021aa:	f002 ff7b 	bl	80050a4 <__M_Error>
 80021ae:	e051      	b.n	8002254 <deleteEntitityFieldsInternal+0xd8>
    M_Assert_BreakSaveCheck((entityInfo.entities[entityNumber] == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]))), M_EMPTY, return, "initEntity: entity number: %d is null", entityNumber);
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d115      	bne.n	80021ec <deleteEntitityFieldsInternal+0x70>
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	4b23      	ldr	r3, [pc, #140]	; (800226c <deleteEntitityFieldsInternal+0xf0>)
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	231c      	movs	r3, #28
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <deleteEntitityFieldsInternal+0xe8>)
 80021e4:	4822      	ldr	r0, [pc, #136]	; (8002270 <deleteEntitityFieldsInternal+0xf4>)
 80021e6:	f002 ff5d 	bl	80050a4 <__M_Error>
 80021ea:	e033      	b.n	8002254 <deleteEntitityFieldsInternal+0xd8>
    if(entityInfo.entities[entityNumber]->isHeap) {
        free(entityInfo.entities[entityNumber]->pointer);
        entityInfo.entities[entityNumber]->pointer = NULL;
    }
#else
    free(entityInfo.entities[entityNumber]->pointer);
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f006 faf4 	bl	80087e8 <free>
    entityInfo.entities[entityNumber]->pointer = NULL;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
#endif /* USE_ENTITY_USER_SPACE */

    free(entityInfo.entities[entityNumber]->fields);
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4618      	mov	r0, r3
 8002220:	f006 fae2 	bl	80087e8 <free>
    entityInfo.entities[entityNumber]->fields = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]->fields));
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]

    free(entityInfo.entities[entityNumber]);
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f006 fad1 	bl	80087e8 <free>
    entityInfo.entities[entityNumber] = NULLPTR(TYPEOF_STRUCT(EntityInfo, entities[entityNumber]));
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <deleteEntitityFieldsInternal+0xe0>)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
}
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000290 	.word	0x20000290
 8002260:	0800d268 	.word	0x0800d268
 8002264:	0800d208 	.word	0x0800d208
 8002268:	0800d23c 	.word	0x0800d23c
 800226c:	0800d304 	.word	0x0800d304
 8002270:	0800d2a0 	.word	0x0800d2a0

08002274 <deleteEntities>:
}


/// delete all entities and deallocation all memory
void deleteEntities(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <deleteEntities+0x44>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	603b      	str	r3, [r7, #0]

    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	e005      	b.n	8002292 <deleteEntities+0x1e>
        deleteEntitityFieldsInternal(i);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ff78 	bl	800217c <deleteEntitityFieldsInternal>
    for(TYPEOF_STRUCT(EntityInfo, entities_count) i = 0; i < entities_count; ++i) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3301      	adds	r3, #1
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d3f5      	bcc.n	8002286 <deleteEntities+0x12>
    }

    free(entityInfo.entities);
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <deleteEntities+0x44>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4618      	mov	r0, r3
 80022a0:	f006 faa2 	bl	80087e8 <free>
    memset(&entityInfo, 0, sizeof(entityInfo));
 80022a4:	2210      	movs	r2, #16
 80022a6:	2100      	movs	r1, #0
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <deleteEntities+0x44>)
 80022aa:	f006 facd 	bl	8008848 <memset>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000290 	.word	0x20000290

080022bc <newEntities>:



/// allocation new entities pointers
int newEntities(const reg numberOfEntities)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck((numberOfEntities > MAX_NUBER_OF_ENTITIES), M_EMPTY, return ENTITY_ERROR, "newEntities: No valid input number of entities, value: %d, max: %d", numberOfEntities, MAX_NUBER_OF_ENTITIES);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022ca:	d915      	bls.n	80022f8 <newEntities+0x3c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022d2:	bf8c      	ite	hi
 80022d4:	2301      	movhi	r3, #1
 80022d6:	2300      	movls	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4619      	mov	r1, r3
 80022dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <newEntities+0x8c>)
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2359      	movs	r3, #89	; 0x59
 80022ec:	4a17      	ldr	r2, [pc, #92]	; (800234c <newEntities+0x90>)
 80022ee:	4818      	ldr	r0, [pc, #96]	; (8002350 <newEntities+0x94>)
 80022f0:	f002 fed8 	bl	80050a4 <__M_Error>
 80022f4:	2300      	movs	r3, #0
 80022f6:	e022      	b.n	800233e <newEntities+0x82>

    deleteEntities(); // delete all entities
 80022f8:	f7ff ffbc 	bl	8002274 <deleteEntities>

    entityInfo.entities = (Entity**) calloc(numberOfEntities, sizeof(Entity*)); // allocation & initialization all entity pointers
 80022fc:	2104      	movs	r1, #4
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f005 ffaa 	bl	8008258 <calloc>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <newEntities+0x98>)
 800230a:	60da      	str	r2, [r3, #12]
    M_Assert_BreakSaveCheck((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities))), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entity pointers");
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <newEntities+0x98>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d110      	bne.n	8002336 <newEntities+0x7a>
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <newEntities+0x98>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <newEntities+0x9c>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	235e      	movs	r3, #94	; 0x5e
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <newEntities+0x90>)
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <newEntities+0xa0>)
 800232e:	f002 feb9 	bl	80050a4 <__M_Error>
 8002332:	2300      	movs	r3, #0
 8002334:	e003      	b.n	800233e <newEntities+0x82>

    entityInfo.allocated_entity_pointers = numberOfEntities;
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <newEntities+0x98>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6053      	str	r3, [r2, #4]
    return ENTITY_OK;
 800233c:	2301      	movs	r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	0800d384 	.word	0x0800d384
 800234c:	0800d208 	.word	0x0800d208
 8002350:	0800d358 	.word	0x0800d358
 8002354:	20000290 	.word	0x20000290
 8002358:	0800d410 	.word	0x0800d410
 800235c:	0800d3c8 	.word	0x0800d3c8

08002360 <initEntity>:


/// allocation entitites pointer & fields
int initEntity(reg* const entityNumber, const reg NumberOfFields, const reg pointerSize, const char descr[ENTITY_DESCRIPTION_SIZE], const b isCustomSpace, const b isHeap, void* arg)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b093      	sub	sp, #76	; 0x4c
 8002364:	af04      	add	r7, sp, #16
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((NumberOfFields > MAX_NUBER_OF_FIELDS), M_EMPTY, return ENTITY_ERROR, "initEntity: No valid input number of fields, value: %d, max: %d", NumberOfFields, MAX_NUBER_OF_FIELDS);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2bff      	cmp	r3, #255	; 0xff
 8002372:	d913      	bls.n	800239c <initEntity+0x3c>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2bff      	cmp	r3, #255	; 0xff
 8002378:	bf8c      	ite	hi
 800237a:	2301      	movhi	r3, #1
 800237c:	2300      	movls	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4619      	mov	r1, r3
 8002382:	23ff      	movs	r3, #255	; 0xff
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	4b71      	ldr	r3, [pc, #452]	; (8002550 <initEntity+0x1f0>)
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2368      	movs	r3, #104	; 0x68
 8002390:	4a70      	ldr	r2, [pc, #448]	; (8002554 <initEntity+0x1f4>)
 8002392:	4871      	ldr	r0, [pc, #452]	; (8002558 <initEntity+0x1f8>)
 8002394:	f002 fe86 	bl	80050a4 <__M_Error>
 8002398:	2300      	movs	r3, #0
 800239a:	e0d4      	b.n	8002546 <initEntity+0x1e6>

    TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 800239c:	4b6f      	ldr	r3, [pc, #444]	; (800255c <initEntity+0x1fc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
    const TYPEOF_STRUCT(EntityInfo, allocated_entity_pointers) allocated_entity_pointers = entityInfo.allocated_entity_pointers;
 80023a2:	4b6e      	ldr	r3, [pc, #440]	; (800255c <initEntity+0x1fc>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    M_Assert_BreakSaveCheck((entities_count >= allocated_entity_pointers), M_EMPTY, return ENTITY_ERROR, "initEntity: There is no free entity for initialization!!!, use /newEntities/ function before");
 80023a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d310      	bcc.n	80023d2 <initEntity+0x72>
 80023b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	429a      	cmp	r2, r3
 80023b6:	bf2c      	ite	cs
 80023b8:	2301      	movcs	r3, #1
 80023ba:	2300      	movcc	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	4b67      	ldr	r3, [pc, #412]	; (8002560 <initEntity+0x200>)
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	236d      	movs	r3, #109	; 0x6d
 80023c6:	4a63      	ldr	r2, [pc, #396]	; (8002554 <initEntity+0x1f4>)
 80023c8:	4866      	ldr	r0, [pc, #408]	; (8002564 <initEntity+0x204>)
 80023ca:	f002 fe6b 	bl	80050a4 <__M_Error>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e0b9      	b.n	8002546 <initEntity+0x1e6>

    char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	f107 0318 	add.w	r3, r7, #24
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	721a      	strb	r2, [r3, #8]

    // allocation pointer to Entity--------------------------------------------------------------------------------------------------------------------------------------------------------------
    Entity* const new_entity = entityInfo.entities[entities_count] = (Entity*) calloc(1, sizeof(Entity));
 80023e2:	4b5e      	ldr	r3, [pc, #376]	; (800255c <initEntity+0x1fc>)
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	18d4      	adds	r4, r2, r3
 80023ec:	2110      	movs	r1, #16
 80023ee:	2001      	movs	r0, #1
 80023f0:	f005 ff32 	bl	8008258 <calloc>
 80023f4:	4603      	mov	r3, r0
 80023f6:	6023      	str	r3, [r4, #0]
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
    M_Assert_BreakSaveCheck(new_entity == NULLPTR(Entity*), M_EMPTY, return ENTITY_ERROR, "newEntities: No memory for allocation Entitity");
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <initEntity+0xc2>
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4619      	mov	r1, r3
 8002410:	4b55      	ldr	r3, [pc, #340]	; (8002568 <initEntity+0x208>)
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2373      	movs	r3, #115	; 0x73
 8002416:	4a4f      	ldr	r2, [pc, #316]	; (8002554 <initEntity+0x1f4>)
 8002418:	4854      	ldr	r0, [pc, #336]	; (800256c <initEntity+0x20c>)
 800241a:	f002 fe43 	bl	80050a4 <__M_Error>
 800241e:	2300      	movs	r3, #0
 8002420:	e091      	b.n	8002546 <initEntity+0x1e6>

    // copy entity description-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if(descr) {
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <initEntity+0xd4>
        memcpy(new_entity->descr, descr, ENTITY_DESCRIPTION_SIZE);
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	3304      	adds	r3, #4
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e00a      	b.n	800244a <initEntity+0xea>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)descr, (u8 *)new_entity->descr);
    } else {
        sprintf(str, "E%d", entities_count);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800243a:	494d      	ldr	r1, [pc, #308]	; (8002570 <initEntity+0x210>)
 800243c:	4618      	mov	r0, r3
 800243e:	f007 fb3d 	bl	8009abc <siprintf>
        memcpy(new_entity->descr, str, ENTITY_DESCRIPTION_SIZE);
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	3304      	adds	r3, #4
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	601a      	str	r2, [r3, #0]
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, (isCustomSpace ? "newEntities: Invalid user input space" : "newEntities: No memory for allocation Entitity"));

#else

    new_entity->pointer = calloc(1, pointerSize);
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	2001      	movs	r0, #1
 800244e:	f005 ff03 	bl	8008258 <calloc>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	601a      	str	r2, [r3, #0]
    UNUSED(isCustomSpace);
    UNUSED(isHeap);
    UNUSED(arg);

    M_Assert_BreakSaveCheck((new_entity->pointer == NULL), {
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d113      	bne.n	800248a <initEntity+0x12a>
 8002462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002464:	f7ff fe8a 	bl	800217c <deleteEntitityFieldsInternal>
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	4619      	mov	r1, r3
 8002478:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <initEntity+0x208>)
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2396      	movs	r3, #150	; 0x96
 800247e:	4a35      	ldr	r2, [pc, #212]	; (8002554 <initEntity+0x1f4>)
 8002480:	483c      	ldr	r0, [pc, #240]	; (8002574 <initEntity+0x214>)
 8002482:	f002 fe0f 	bl	80050a4 <__M_Error>
 8002486:	2300      	movs	r3, #0
 8002488:	e05d      	b.n	8002546 <initEntity+0x1e6>

#endif /* USE_ENTITY_USER_SPACE */


    // allocation pointer to Fields------------------------------------------------------------------------------------------------------------------------------------------------------------
    new_entity->fields = (EntityField*) calloc(NumberOfFields, sizeof(EntityField));
 800248a:	2120      	movs	r1, #32
 800248c:	68b8      	ldr	r0, [r7, #8]
 800248e:	f005 fee3 	bl	8008258 <calloc>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	60da      	str	r2, [r3, #12]
    M_Assert_BreakSaveCheck((new_entity->fields == NULLPTR(TYPEOF_STRUCT(Entity, fields))), {
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d113      	bne.n	80024ca <initEntity+0x16a>
 80024a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024a4:	f7ff fe6a 	bl	800217c <deleteEntitityFieldsInternal>
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <initEntity+0x218>)
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	239f      	movs	r3, #159	; 0x9f
 80024be:	4a25      	ldr	r2, [pc, #148]	; (8002554 <initEntity+0x1f4>)
 80024c0:	482e      	ldr	r0, [pc, #184]	; (800257c <initEntity+0x21c>)
 80024c2:	f002 fdef 	bl	80050a4 <__M_Error>
 80024c6:	2300      	movs	r3, #0
 80024c8:	e03d      	b.n	8002546 <initEntity+0x1e6>
        deleteEntitityFieldsInternal(entities_count);
    }, return ENTITY_ERROR, "newEntities: No memory for allocation EntityField");

    new_entity->fields_count = NumberOfFields;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	811a      	strh	r2, [r3, #8]

    // initialization Fields-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    for(reg i = 0; i < NumberOfFields; ++i) {
 80024d2:	2300      	movs	r3, #0
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
 80024d6:	e028      	b.n	800252a <initEntity+0x1ca>
        EntityField* const    field = &new_entity->fields[i];
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024de:	015b      	lsls	r3, r3, #5
 80024e0:	4413      	add	r3, r2
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24

#ifdef USE_ENTITY_CALLBACKS

#   ifdef USE_ENTITY_READ_CALLBACK
        field->rdCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
        field->rdCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
#   endif /* USE_ENTITY_READ_CALLBACK */

#   ifdef USE_ENTITY_WRITE_CALLBACK
        field->wrCallback.entityCallback = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback));
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
        field->wrCallback.context        = NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, context));
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
#   endif /* USE_ENTITY_WRITE_CALLBACK */

#endif /* USE_ENTITY_CALLBACKS */

        field->bitFlags  = 0;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
        field->shift     = 0;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
        field->type      = VOID_TYPE;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	2200      	movs	r2, #0
 800250c:	761a      	strb	r2, [r3, #24]

        sprintf(str, "F%d", i);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002514:	491a      	ldr	r1, [pc, #104]	; (8002580 <initEntity+0x220>)
 8002516:	4618      	mov	r0, r3
 8002518:	f007 fad0 	bl	8009abc <siprintf>
        memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3319      	adds	r3, #25
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	601a      	str	r2, [r3, #0]
    for(reg i = 0; i < NumberOfFields; ++i) {
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	3301      	adds	r3, #1
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
 800252a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3d2      	bcc.n	80024d8 <initEntity+0x178>
        //MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);
    }

    (*entityNumber) = entities_count;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002536:	601a      	str	r2, [r3, #0]
    ++entities_count;
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	3301      	adds	r3, #1
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
    entityInfo.entities_count = entities_count;
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <initEntity+0x1fc>)
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	6093      	str	r3, [r2, #8]
    return ENTITY_OK;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	373c      	adds	r7, #60	; 0x3c
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	0800d470 	.word	0x0800d470
 8002554:	0800d208 	.word	0x0800d208
 8002558:	0800d448 	.word	0x0800d448
 800255c:	20000290 	.word	0x20000290
 8002560:	0800d4e0 	.word	0x0800d4e0
 8002564:	0800d4b0 	.word	0x0800d4b0
 8002568:	0800d560 	.word	0x0800d560
 800256c:	0800d540 	.word	0x0800d540
 8002570:	0800d590 	.word	0x0800d590
 8002574:	0800d594 	.word	0x0800d594
 8002578:	0800d5f4 	.word	0x0800d5f4
 800257c:	0800d5b4 	.word	0x0800d5b4
 8002580:	0800d628 	.word	0x0800d628

08002584 <initField>:
 * **********************************************************************************************************************************
 */

/// init field by Entity pointer and field-number
int initField(Entity* const entityInst, reg* const fieldNumber, const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, const TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	; 0x38
 8002588:	af04      	add	r7, sp, #16
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL), M_EMPTY, return ENTITY_ERROR, "initField: No valid input");
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <initField+0x1a>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d112      	bne.n	80025c4 <initField+0x40>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <initField+0x26>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <initField+0x2a>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <initField+0x2c>
 80025ae:	2300      	movs	r3, #0
 80025b0:	b2d9      	uxtb	r1, r3
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <initField+0x14c>)
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	23cf      	movs	r3, #207	; 0xcf
 80025b8:	4a46      	ldr	r2, [pc, #280]	; (80026d4 <initField+0x150>)
 80025ba:	4847      	ldr	r0, [pc, #284]	; (80026d8 <initField+0x154>)
 80025bc:	f002 fd72 	bl	80050a4 <__M_Error>
 80025c0:	2300      	movs	r3, #0
 80025c2:	e081      	b.n	80026c8 <initField+0x144>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && !(type == REG_TYPE || type == SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initField: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d021      	beq.n	8002612 <initField+0x8e>
 80025ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d01d      	beq.n	8002612 <initField+0x8e>
 80025d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025da:	2b11      	cmp	r3, #17
 80025dc:	d019      	beq.n	8002612 <initField+0x8e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d009      	beq.n	80025fc <initField+0x78>
 80025e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d005      	beq.n	80025fc <initField+0x78>
 80025f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025f4:	2b11      	cmp	r3, #17
 80025f6:	d001      	beq.n	80025fc <initField+0x78>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <initField+0x7a>
 80025fc:	2300      	movs	r3, #0
 80025fe:	b2d9      	uxtb	r1, r3
 8002600:	4b36      	ldr	r3, [pc, #216]	; (80026dc <initField+0x158>)
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	23d2      	movs	r3, #210	; 0xd2
 8002606:	4a33      	ldr	r2, [pc, #204]	; (80026d4 <initField+0x150>)
 8002608:	4835      	ldr	r0, [pc, #212]	; (80026e0 <initField+0x15c>)
 800260a:	f002 fd4b 	bl	80050a4 <__M_Error>
 800260e:	2300      	movs	r3, #0
 8002610:	e05a      	b.n	80026c8 <initField+0x144>
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	623b      	str	r3, [r7, #32]
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	891b      	ldrh	r3, [r3, #8]
 800261c:	83fb      	strh	r3, [r7, #30]

    M_Assert_BreakElseSaveCheck((fields_count > fieldNumber_readed), {
 800261e:	8bfb      	ldrh	r3, [r7, #30]
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	429a      	cmp	r2, r3
 8002624:	d23c      	bcs.n	80026a0 <initField+0x11c>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	015b      	lsls	r3, r3, #5
 800262e:	4413      	add	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	615a      	str	r2, [r3, #20]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002644:	761a      	strb	r2, [r3, #24]
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <initField+0xd2>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	3319      	adds	r3, #25
 8002650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <initField+0x10c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <initField+0xe8>
 8002666:	2304      	movs	r3, #4
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	e00c      	b.n	8002686 <initField+0x102>
 800266c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002670:	617b      	str	r3, [r7, #20]
}


STATIC_FORCEINLINE reg getMYCTypeLen(reg type)
{
    if(type < TYPE_ARRAY_LENGTH) {
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b11      	cmp	r3, #17
 8002676:	d804      	bhi.n	8002682 <initField+0xfe>
        return typeLengthMappingArray[type];
 8002678:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <initField+0x160>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	e000      	b.n	8002684 <initField+0x100>
    }
    return 0;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	2100      	movs	r1, #0
 800268a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800268c:	f006 f8dc 	bl	8008848 <memset>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	3301      	adds	r3, #1
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	e013      	b.n	80026c8 <initField+0x144>
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	bf34      	ite	cc
 80026a8:	2301      	movcc	r3, #1
 80026aa:	2300      	movcs	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4619      	mov	r1, r3
 80026b0:	8bfb      	ldrh	r3, [r7, #30]
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <initField+0x164>)
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	23d8      	movs	r3, #216	; 0xd8
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <initField+0x150>)
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <initField+0x168>)
 80026c2:	f002 fcef 	bl	80050a4 <__M_Error>
                                    ++fieldNumber_readed;
                                    (*fieldNumber) = fieldNumber_readed;
                                    return ENTITY_OK;
                                }, M_EMPTY, M_EMPTY, "initField: fieldNumber: &d,  is too long than allocated fields_count: %d", fieldNumber_readed, fields_count);

    return ENTITY_ERROR;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3728      	adds	r7, #40	; 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	0800d668 	.word	0x0800d668
 80026d4:	0800d208 	.word	0x0800d208
 80026d8:	0800d62c 	.word	0x0800d62c
 80026dc:	0800d6d4 	.word	0x0800d6d4
 80026e0:	0800d684 	.word	0x0800d684
 80026e4:	0800f26c 	.word	0x0800f26c
 80026e8:	0800d774 	.word	0x0800d774
 80026ec:	0800d72c 	.word	0x0800d72c

080026f0 <initFieldArray>:

/// init field-array
int initFieldArray(Entity* const entityInst, reg* const fieldNumber, TYPEOF_STRUCT(EntityField, bitFlags) bitFlags, TYPEOF_STRUCT(EntityField, shift) shift, const TYPEOF_STRUCT(EntityField, type) type, const int arrayLen, const char descr[ENTITY_DESCRIPTION_SIZE], void* const field_ptr, const int startNum)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b094      	sub	sp, #80	; 0x50
 80026f4:	af04      	add	r7, sp, #16
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
    M_Assert_BreakSaveCheck((entityInst == NULLPTR(Entity *) || fieldNumber == NULL) || (arrayLen == 0), M_EMPTY, return ENTITY_ERROR, "initFieldArray: No valid input");
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <initFieldArray+0x20>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <initFieldArray+0x20>
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d115      	bne.n	800273c <initFieldArray+0x4c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <initFieldArray+0x32>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <initFieldArray+0x32>
 800271c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <initFieldArray+0x36>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <initFieldArray+0x38>
 8002726:	2300      	movs	r3, #0
 8002728:	b2d9      	uxtb	r1, r3
 800272a:	4b62      	ldr	r3, [pc, #392]	; (80028b4 <initFieldArray+0x1c4>)
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	23fe      	movs	r3, #254	; 0xfe
 8002730:	4a61      	ldr	r2, [pc, #388]	; (80028b8 <initFieldArray+0x1c8>)
 8002732:	4862      	ldr	r0, [pc, #392]	; (80028bc <initFieldArray+0x1cc>)
 8002734:	f002 fcb6 	bl	80050a4 <__M_Error>
 8002738:	2300      	movs	r3, #0
 800273a:	e0b7      	b.n	80028ac <initFieldArray+0x1bc>

#ifdef USE_ENTITY_REGISTER
    M_Assert_BreakSaveCheck((bitFlags & ENTITY_REGISTER_MSK) && (type != REG_TYPE || type != SREG_TYPE), M_EMPTY, return ENTITY_ERROR, "initFieldArray: with ENTITY_REGISTER_MSK flag must be REG_TYPE or SREG_TYPE types only!!!");
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d022      	beq.n	800278c <initFieldArray+0x9c>
 8002746:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800274a:	2b10      	cmp	r3, #16
 800274c:	d103      	bne.n	8002756 <initFieldArray+0x66>
 800274e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002752:	2b11      	cmp	r3, #17
 8002754:	d01a      	beq.n	800278c <initFieldArray+0x9c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <initFieldArray+0x84>
 8002760:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002764:	2b10      	cmp	r3, #16
 8002766:	d103      	bne.n	8002770 <initFieldArray+0x80>
 8002768:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800276c:	2b11      	cmp	r3, #17
 800276e:	d001      	beq.n	8002774 <initFieldArray+0x84>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <initFieldArray+0x86>
 8002774:	2300      	movs	r3, #0
 8002776:	b2d9      	uxtb	r1, r3
 8002778:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <initFieldArray+0x1d0>)
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	f240 1301 	movw	r3, #257	; 0x101
 8002780:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <initFieldArray+0x1c8>)
 8002782:	4850      	ldr	r0, [pc, #320]	; (80028c4 <initFieldArray+0x1d4>)
 8002784:	f002 fc8e 	bl	80050a4 <__M_Error>
 8002788:	2300      	movs	r3, #0
 800278a:	e08f      	b.n	80028ac <initFieldArray+0x1bc>
#endif /* USE_ENTITY_REGISTER */

    reg fieldNumber_readed = (*fieldNumber);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entityInst->fields_count;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	891b      	ldrh	r3, [r3, #8]
 8002796:	867b      	strh	r3, [r7, #50]	; 0x32

	reg typeLen;
#ifdef USE_ENTITY_POINTER
	if(bitFlags & ENTITY_POINTER_MSK) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <initFieldArray+0xb8>
		typeLen = sizeof(reg);
 80027a2:	2304      	movs	r3, #4
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a6:	e00c      	b.n	80027c2 <initFieldArray+0xd2>
	} else {
#endif /* USE_ENTITY_REGISTER */
		typeLen = getMYCTypeLen(type);
 80027a8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    if(type < TYPE_ARRAY_LENGTH) {
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	2b11      	cmp	r3, #17
 80027b2:	d804      	bhi.n	80027be <initFieldArray+0xce>
        return typeLengthMappingArray[type];
 80027b4:	4a44      	ldr	r2, [pc, #272]	; (80028c8 <initFieldArray+0x1d8>)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	e000      	b.n	80027c0 <initFieldArray+0xd0>
    return 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef USE_ENTITY_POINTER
	}
#endif /* USE_ENTITY_REGISTER */

    const reg need_count = (fieldNumber_readed + arrayLen);
 80027c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c6:	4413      	add	r3, r2
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    M_Assert_BreakSaveCheck(fields_count < need_count, M_EMPTY, return ENTITY_ERROR, "initFieldArray: need fields Number: &d,  is too long than allocated fields_count: %d", need_count, fields_count);
 80027ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d915      	bls.n	80027fe <initFieldArray+0x10e>
 80027d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d6:	429a      	cmp	r2, r3
 80027d8:	bf8c      	ite	hi
 80027da:	2301      	movhi	r3, #1
 80027dc:	2300      	movls	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4619      	mov	r1, r3
 80027e2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027e4:	9302      	str	r3, [sp, #8]
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	4b38      	ldr	r3, [pc, #224]	; (80028cc <initFieldArray+0x1dc>)
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	f240 1313 	movw	r3, #275	; 0x113
 80027f2:	4a31      	ldr	r2, [pc, #196]	; (80028b8 <initFieldArray+0x1c8>)
 80027f4:	4836      	ldr	r0, [pc, #216]	; (80028d0 <initFieldArray+0x1e0>)
 80027f6:	f002 fc55 	bl	80050a4 <__M_Error>
 80027fa:	2300      	movs	r3, #0
 80027fc:	e056      	b.n	80028ac <initFieldArray+0x1bc>

	char str[(ENTITY_DESCRIPTION_SIZE + 8) + 1] = {};
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	f107 0318 	add.w	r3, r7, #24
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	721a      	strb	r2, [r3, #8]
	bitFlags |= ENTITY_ARRAY_MSK;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < arrayLen; ++i) {
 8002816:	2300      	movs	r3, #0
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
 800281a:	e033      	b.n	8002884 <initFieldArray+0x194>
		EntityField* const    field = &entityInst->fields[fieldNumber_readed];
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002822:	015b      	lsls	r3, r3, #5
 8002824:	4413      	add	r3, r2
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28

		field->bitFlags   = bitFlags;
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	611a      	str	r2, [r3, #16]
		field->shift      = shift;
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	615a      	str	r2, [r3, #20]
		field->type       = type;
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800283a:	761a      	strb	r2, [r3, #24]

		if(descr) {
 800283c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <initFieldArray+0x166>
			sprintf(str, "%s%d", descr, (i + startNum));
 8002842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002846:	4413      	add	r3, r2
 8002848:	f107 0014 	add.w	r0, r7, #20
 800284c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800284e:	4921      	ldr	r1, [pc, #132]	; (80028d4 <initFieldArray+0x1e4>)
 8002850:	f007 f934 	bl	8009abc <siprintf>
 8002854:	e008      	b.n	8002868 <initFieldArray+0x178>
		} else {
			sprintf(str, ":[%d]", (i + startNum));
 8002856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285a:	441a      	add	r2, r3
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	491d      	ldr	r1, [pc, #116]	; (80028d8 <initFieldArray+0x1e8>)
 8002862:	4618      	mov	r0, r3
 8002864:	f007 f92a 	bl	8009abc <siprintf>
		}
		memcpy(field->descr, str, ENTITY_DESCRIPTION_SIZE);
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	3319      	adds	r3, #25
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	601a      	str	r2, [r3, #0]
		//MY_CTYPE_USER_DATA_MEMCPY(ENTITY_DESCRIPTION_SIZE, (u8 *)str, (u8 *)field->descr);

		shift += typeLen;
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	4413      	add	r3, r2
 8002876:	603b      	str	r3, [r7, #0]
		++fieldNumber_readed;
 8002878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287a:	3301      	adds	r3, #1
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i = 0; i < arrayLen; ++i) {
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002880:	3301      	adds	r3, #1
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
 8002884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002888:	429a      	cmp	r2, r3
 800288a:	dbc7      	blt.n	800281c <initFieldArray+0x12c>
	}

	if(field_ptr) {
 800288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <initFieldArray+0x1b4>
		memset(field_ptr, 0, (arrayLen * typeLen));
 8002892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	461a      	mov	r2, r3
 800289c:	2100      	movs	r1, #0
 800289e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028a0:	f005 ffd2 	bl	8008848 <memset>
	}

	(*fieldNumber) = fieldNumber_readed;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028a8:	601a      	str	r2, [r3, #0]
	return ENTITY_OK;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3740      	adds	r7, #64	; 0x40
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	0800d80c 	.word	0x0800d80c
 80028b8:	0800d208 	.word	0x0800d208
 80028bc:	0800d7c0 	.word	0x0800d7c0
 80028c0:	0800d878 	.word	0x0800d878
 80028c4:	0800d82c 	.word	0x0800d82c
 80028c8:	0800f26c 	.word	0x0800f26c
 80028cc:	0800d8f0 	.word	0x0800d8f0
 80028d0:	0800d8d4 	.word	0x0800d8d4
 80028d4:	0800d948 	.word	0x0800d948
 80028d8:	0800d950 	.word	0x0800d950

080028dc <entities_ping>:
 */

#ifdef USE_ENTITY_PING

b entities_ping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
    return entityInfo.userInitReady;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <entities_ping+0x14>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000290 	.word	0x20000290

080028f4 <readEntitiesSizes>:

#endif /* USE_ENTITY_PING */

int readEntitiesSizes(u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: No allocated entities or invalid input");
 8002900:	4b44      	ldr	r3, [pc, #272]	; (8002a14 <readEntitiesSizes+0x120>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <readEntitiesSizes+0x20>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <readEntitiesSizes+0x20>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <readEntitiesSizes+0x4e>
 8002914:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <readEntitiesSizes+0x120>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <readEntitiesSizes+0x34>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <readEntitiesSizes+0x34>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <readEntitiesSizes+0x38>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <readEntitiesSizes+0x3a>
 800292c:	2300      	movs	r3, #0
 800292e:	b2d9      	uxtb	r1, r3
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <readEntitiesSizes+0x124>)
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	231f      	movs	r3, #31
 8002936:	4a39      	ldr	r2, [pc, #228]	; (8002a1c <readEntitiesSizes+0x128>)
 8002938:	4839      	ldr	r0, [pc, #228]	; (8002a20 <readEntitiesSizes+0x12c>)
 800293a:	f002 fbb3 	bl	80050a4 <__M_Error>
 800293e:	2300      	movs	r3, #0
 8002940:	e064      	b.n	8002a0c <readEntitiesSizes+0x118>
    ENTITY_DBG_ASSERT_BUF(maxOutBufferSize < (8 + TYPE_ARRAY_LENGTH), M_EMPTY, return ENTITY_ERROR, "readEntitiesSizes: sizes read more than buffer");
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b19      	cmp	r3, #25
 8002946:	d80f      	bhi.n	8002968 <readEntitiesSizes+0x74>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b19      	cmp	r3, #25
 800294c:	bf94      	ite	ls
 800294e:	2301      	movls	r3, #1
 8002950:	2300      	movhi	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	4619      	mov	r1, r3
 8002956:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <readEntitiesSizes+0x130>)
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2320      	movs	r3, #32
 800295c:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <readEntitiesSizes+0x128>)
 800295e:	4832      	ldr	r0, [pc, #200]	; (8002a28 <readEntitiesSizes+0x134>)
 8002960:	f002 fba0 	bl	80050a4 <__M_Error>
 8002964:	2300      	movs	r3, #0
 8002966:	e051      	b.n	8002a0c <readEntitiesSizes+0x118>

    reg pos = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

    // main sizes -----------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_OK;                              // OK byte
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	617a      	str	r2, [r7, #20]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	617a      	str	r2, [r7, #20]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	2204      	movs	r2, #4
 8002986:	701a      	strb	r2, [r3, #0]

    // entities sizes -------------------------------------------------------------------------------------
    outputData[pos++] = ENTITIES_SIZEOF;                        // entities count sizeof
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	617a      	str	r2, [r7, #20]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	2202      	movs	r2, #2
 8002994:	701a      	strb	r2, [r3, #0]

    // fields sizes --------------------------------------------------------------------------------------
    outputData[pos++] = ENTITY_FIELD_SIZEOF;                    // fields count sizeof
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	617a      	str	r2, [r7, #20]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]

    outputData[pos++] = SIZEOF_STRUCT(EntityField, bitFlags);   // fields bitFlags sizeof
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	617a      	str	r2, [r7, #20]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	2204      	movs	r2, #4
 80029b0:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = SIZEOF_STRUCT(EntityField, shift);      // fields shift sizeof
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	617a      	str	r2, [r7, #20]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	2204      	movs	r2, #4
 80029be:	701a      	strb	r2, [r3, #0]
    outputData[pos++] = 1;                                      // fields type sizeof
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	617a      	str	r2, [r7, #20]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4413      	add	r3, r2
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]

    // system types sizes --------------------------------------------------------------------------------
    outputData[pos++] = TYPE_ARRAY_LENGTH;                      // size array types
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	617a      	str	r2, [r7, #20]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	2212      	movs	r2, #18
 80029da:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	e00d      	b.n	80029fe <readEntitiesSizes+0x10a>
        outputData[pos++] = typeLengthMappingArray[i];          // copy array types
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <readEntitiesSizes+0x138>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	617a      	str	r2, [r7, #20]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	b2ca      	uxtb	r2, r1
 80029f6:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < TYPE_ARRAY_LENGTH; ++i) {
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	3301      	adds	r3, #1
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b11      	cmp	r3, #17
 8002a02:	d9ee      	bls.n	80029e2 <readEntitiesSizes+0xee>
    }

    (*size) = pos;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002a0a:	2301      	movs	r3, #1
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000290 	.word	0x20000290
 8002a18:	0800dd98 	.word	0x0800dd98
 8002a1c:	0800dcf4 	.word	0x0800dcf4
 8002a20:	0800dd28 	.word	0x0800dd28
 8002a24:	0800de00 	.word	0x0800de00
 8002a28:	0800ddd4 	.word	0x0800ddd4
 8002a2c:	0800f26c 	.word	0x0800f26c

08002a30 <readEntitiesDescriptions>:

int readEntitiesDescriptions(const TYPEOF_STRUCT(EntityInfo, entities_count) startEntityNumber, TYPEOF_STRUCT(EntityInfo, entities_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[0].descr, ... entities[entities_count].descr}
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (2 + ENTITIES_SIZEOF)) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntitiesDescriptions: No allocated entities or invalid input");
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <readEntitiesDescriptions+0x160>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <readEntitiesDescriptions+0x28>
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d905      	bls.n	8002a58 <readEntitiesDescriptions+0x28>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <readEntitiesDescriptions+0x28>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d119      	bne.n	8002a8c <readEntitiesDescriptions+0x5c>
 8002a58:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <readEntitiesDescriptions+0x160>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <readEntitiesDescriptions+0x42>
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d905      	bls.n	8002a72 <readEntitiesDescriptions+0x42>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <readEntitiesDescriptions+0x42>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <readEntitiesDescriptions+0x46>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <readEntitiesDescriptions+0x48>
 8002a76:	2300      	movs	r3, #0
 8002a78:	b2d9      	uxtb	r1, r3
 8002a7a:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <readEntitiesDescriptions+0x164>)
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <readEntitiesDescriptions+0x168>)
 8002a82:	4846      	ldr	r0, [pc, #280]	; (8002b9c <readEntitiesDescriptions+0x16c>)
 8002a84:	f002 fb0e 	bl	80050a4 <__M_Error>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e07d      	b.n	8002b88 <readEntitiesDescriptions+0x158>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002a8c:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <readEntitiesDescriptions+0x160>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24

    if(startEntityNumber < entities_count) {
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d26e      	bcs.n	8002b78 <readEntitiesDescriptions+0x148>
        reg pos = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

        outputData[pos++] = ENTITY_OK;
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = ENTITY_DESCRIPTION_SIZE;                // description sizeof /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(EntityInfo, entities_count) tmp = (entities_count - startEntityNumber);
 8002aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	623b      	str	r3, [r7, #32]
        len = MIN(tmp, len);
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	bf28      	it	cs
 8002aca:	4613      	movcs	r3, r2
 8002acc:	60bb      	str	r3, [r7, #8]
        //#else
        //        len &= 0xFFFFUL;
        //        ENTITY_BYTE_CPY(ENTITIES_SIZEOF, (u8*)&len, &outputData[pos]);
        //        pos += ENTITIES_SIZEOF;
        //#endif /* MAX_NUBER_OF_ENTITIES < 256 */
        outputData[pos++] = (u8)(len & 0xFFU); // support on old version (this is glitch!!!)
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
        //---------------------------================================----------------------------------==================================-----------------------------------================================---------------------------===========================---------------------------=========================------------------------
        len += startEntityNumber;
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	60bb      	str	r3, [r7, #8]

        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aea:	e03c      	b.n	8002b66 <readEntitiesDescriptions+0x136>

            ENTITY_DBG_ASSERT_BUF( (pos + ENTITY_DESCRIPTION_SIZE) > maxOutBufferSize, M_EMPTY, {
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	3304      	adds	r3, #4
 8002af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d210      	bcs.n	8002b18 <readEntitiesDescriptions+0xe8>
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	3304      	adds	r3, #4
 8002afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002afc:	429a      	cmp	r2, r3
 8002afe:	bf34      	ite	cc
 8002b00:	2301      	movcc	r3, #1
 8002b02:	2300      	movcs	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	4619      	mov	r1, r3
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <readEntitiesDescriptions+0x170>)
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	235a      	movs	r3, #90	; 0x5a
 8002b0e:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <readEntitiesDescriptions+0x168>)
 8002b10:	4824      	ldr	r0, [pc, #144]	; (8002ba4 <readEntitiesDescriptions+0x174>)
 8002b12:	f002 fac7 	bl	80050a4 <__M_Error>
 8002b16:	e030      	b.n	8002b7a <readEntitiesDescriptions+0x14a>
                                       goto error;
                                   }, "readEntitiesDescriptions: description read size more than buffer");


            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)entityInfo.entities[i]->descr, &outputData[pos]);
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <readEntitiesDescriptions+0x160>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	1d1a      	adds	r2, r3, #4
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	440b      	add	r3, r1
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	61f9      	str	r1, [r7, #28]
 8002b30:	61ba      	str	r2, [r7, #24]
 8002b32:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <readEntitiesDescriptions+0x126>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d104      	bne.n	8002b4a <readEntitiesDescriptions+0x11a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e006      	b.n	8002b58 <readEntitiesDescriptions+0x128>
    default: memcpy(to, from, n); break;
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f005 fe52 	bl	80087f8 <memcpy>
 8002b54:	e000      	b.n	8002b58 <readEntitiesDescriptions+0x128>
    case 0: break;
 8002b56:	bf00      	nop
}
 8002b58:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(TYPEOF_STRUCT(EntityInfo, entities_count) i = startEntityNumber; i < len; ++i) {
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	3301      	adds	r3, #1
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d3be      	bcc.n	8002aec <readEntitiesDescriptions+0xbc>
        }

        (*size) = pos;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b72:	601a      	str	r2, [r3, #0]
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <readEntitiesDescriptions+0x158>
        goto error;
 8002b78:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3730      	adds	r7, #48	; 0x30
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000290 	.word	0x20000290
 8002b94:	0800ded0 	.word	0x0800ded0
 8002b98:	0800dcf4 	.word	0x0800dcf4
 8002b9c:	0800de30 	.word	0x0800de30
 8002ba0:	0800df48 	.word	0x0800df48
 8002ba4:	0800df14 	.word	0x0800df14

08002ba8 <readEntityFields>:

int readEntityFields(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) startFieldNumber, TYPEOF_STRUCT(Entity, fields_count) len, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{   //send {entities[entityNum].fields[startFieldNum], ... entities[num].fields[entities[num].fields_count]}
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b096      	sub	sp, #88	; 0x58
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	817b      	strh	r3, [r7, #10]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	813b      	strh	r3, [r7, #8]

    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITY_FIELD_SIZEOF << 1))) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readEntityFields: No allocated entities or invalid input");
 8002bba:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <readEntityFields+0x228>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <readEntityFields+0x2c>
 8002bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d905      	bls.n	8002bd4 <readEntityFields+0x2c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <readEntityFields+0x2c>
 8002bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d119      	bne.n	8002c08 <readEntityFields+0x60>
 8002bd4:	4b7e      	ldr	r3, [pc, #504]	; (8002dd0 <readEntityFields+0x228>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <readEntityFields+0x46>
 8002bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d905      	bls.n	8002bee <readEntityFields+0x46>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <readEntityFields+0x46>
 8002be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <readEntityFields+0x4a>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <readEntityFields+0x4c>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	b2d9      	uxtb	r1, r3
 8002bf6:	4b77      	ldr	r3, [pc, #476]	; (8002dd4 <readEntityFields+0x22c>)
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2376      	movs	r3, #118	; 0x76
 8002bfc:	4a76      	ldr	r2, [pc, #472]	; (8002dd8 <readEntityFields+0x230>)
 8002bfe:	4877      	ldr	r0, [pc, #476]	; (8002ddc <readEntityFields+0x234>)
 8002c00:	f002 fa50 	bl	80050a4 <__M_Error>
 8002c04:	2300      	movs	r3, #0
 8002c06:	e0df      	b.n	8002dc8 <readEntityFields+0x220>

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8002c08:	4b71      	ldr	r3, [pc, #452]	; (8002dd0 <readEntityFields+0x228>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	647b      	str	r3, [r7, #68]	; 0x44
    const Entity* const entity = entityInfo.entities[entityNumber];
 8002c0e:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <readEntityFields+0x228>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	643b      	str	r3, [r7, #64]	; 0x40
    const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 8002c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1e:	891b      	ldrh	r3, [r3, #8]
 8002c20:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c26:	429a      	cmp	r2, r3
 8002c28:	f080 80c6 	bcs.w	8002db8 <readEntityFields+0x210>
 8002c2c:	897a      	ldrh	r2, [r7, #10]
 8002c2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f080 80c1 	bcs.w	8002db8 <readEntityFields+0x210>
        reg pos = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	64fb      	str	r3, [r7, #76]	; 0x4c

        outputData[pos++] = ENTITY_OK;
 8002c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]

#if (MAX_NUBER_OF_FIELDS < 256U)
        outputData[pos++] = (u8)(startFieldNumber & 0xFFU);                             /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	897a      	ldrh	r2, [r7, #10]
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

        const TYPEOF_STRUCT(Entity, fields_count) tmp = (fields_count - startFieldNumber);
 8002c58:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
        len = MIN(tmp, len);
 8002c60:	893a      	ldrh	r2, [r7, #8]
 8002c62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002c64:	4293      	cmp	r3, r2
 8002c66:	bf28      	it	cs
 8002c68:	4613      	movcs	r3, r2
 8002c6a:	813b      	strh	r3, [r7, #8]
        outputData[pos++] = (u8)(len & 0xFFU);
 8002c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	893a      	ldrh	r2, [r7, #8]
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]
        ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, (u8*)&len, &outputData[pos]);
        pos += ENTITY_FIELD_SIZEOF;

#endif /* MAX_NUBER_OF_FIELDS < 256 */

        len += startFieldNumber;
 8002c7c:	893a      	ldrh	r2, [r7, #8]
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	4413      	add	r3, r2
 8002c82:	813b      	strh	r3, [r7, #8]

        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002c84:	897b      	ldrh	r3, [r7, #10]
 8002c86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002c8a:	e089      	b.n	8002da0 <readEntityFields+0x1f8>
            const EntityField* const field = &entity->fields[i];
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c94:	015b      	lsls	r3, r3, #5
 8002c96:	4413      	add	r3, r2
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38

            ENTITY_DBG_ASSERT_BUF( ((pos + (sizeof(field->bitFlags) + sizeof(field->shift) + 1 + ENTITY_DESCRIPTION_SIZE)) > maxOutBufferSize), M_EMPTY, {
 8002c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9c:	330d      	adds	r3, #13
 8002c9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d210      	bcs.n	8002cc6 <readEntityFields+0x11e>
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca6:	330d      	adds	r3, #13
 8002ca8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002caa:	429a      	cmp	r2, r3
 8002cac:	bf34      	ite	cc
 8002cae:	2301      	movcc	r3, #1
 8002cb0:	2300      	movcs	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <readEntityFields+0x238>)
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	239a      	movs	r3, #154	; 0x9a
 8002cbc:	4a46      	ldr	r2, [pc, #280]	; (8002dd8 <readEntityFields+0x230>)
 8002cbe:	4849      	ldr	r0, [pc, #292]	; (8002de4 <readEntityFields+0x23c>)
 8002cc0:	f002 f9f0 	bl	80050a4 <__M_Error>
 8002cc4:	e079      	b.n	8002dba <readEntityFields+0x212>

            //            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
            //            pos += ENTITY_DESCRIPTION_SIZE;
            //-----------------=============================-----------------------------------===========================-----------------------------=================================-------------------------------===========================-------------------======================
            // this is glitch
            ENTITY_BYTE_CPY(1, (u8 *)&field->bitFlags, &outputData[pos]);
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	f103 0210 	add.w	r2, r3, #16
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd0:	440b      	add	r3, r1
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	61f9      	str	r1, [r7, #28]
 8002cd6:	61ba      	str	r2, [r7, #24]
 8002cd8:	617b      	str	r3, [r7, #20]
    switch (n) {
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <readEntityFields+0x154>
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d104      	bne.n	8002cf0 <readEntityFields+0x148>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e006      	b.n	8002cfe <readEntityFields+0x156>
    default: memcpy(to, from, n); break;
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	69b9      	ldr	r1, [r7, #24]
 8002cf4:	6978      	ldr	r0, [r7, #20]
 8002cf6:	f005 fd7f 	bl	80087f8 <memcpy>
 8002cfa:	e000      	b.n	8002cfe <readEntityFields+0x156>
    case 0: break;
 8002cfc:	bf00      	nop
}
 8002cfe:	bf00      	nop
            pos += 1;
 8002d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d02:	3301      	adds	r3, #1
 8002d04:	64fb      	str	r3, [r7, #76]	; 0x4c

            ENTITY_BYTE_CPY(2, (u8 *)&field->shift, &outputData[pos]);
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	f103 0214 	add.w	r2, r3, #20
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d10:	440b      	add	r3, r1
 8002d12:	2102      	movs	r1, #2
 8002d14:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d16:	627a      	str	r2, [r7, #36]	; 0x24
 8002d18:	623b      	str	r3, [r7, #32]
    switch (n) {
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <readEntityFields+0x194>
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d104      	bne.n	8002d30 <readEntityFields+0x188>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e006      	b.n	8002d3e <readEntityFields+0x196>
    default: memcpy(to, from, n); break;
 8002d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d34:	6a38      	ldr	r0, [r7, #32]
 8002d36:	f005 fd5f 	bl	80087f8 <memcpy>
 8002d3a:	e000      	b.n	8002d3e <readEntityFields+0x196>
    case 0: break;
 8002d3c:	bf00      	nop
}
 8002d3e:	bf00      	nop
            pos += 2;
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	3302      	adds	r3, #2
 8002d44:	64fb      	str	r3, [r7, #76]	; 0x4c

            outputData[pos++] = (field->type & 0xFFU);
 8002d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d52:	7e12      	ldrb	r2, [r2, #24]
 8002d54:	701a      	strb	r2, [r3, #0]

            ENTITY_BYTE_CPY(ENTITY_DESCRIPTION_SIZE, (u8 *)&field->descr, &outputData[pos]);
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	f103 0219 	add.w	r2, r3, #25
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	440b      	add	r3, r1
 8002d62:	2104      	movs	r1, #4
 8002d64:	6379      	str	r1, [r7, #52]	; 0x34
 8002d66:	633a      	str	r2, [r7, #48]	; 0x30
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <readEntityFields+0x1e4>
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d104      	bne.n	8002d80 <readEntityFields+0x1d8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e006      	b.n	8002d8e <readEntityFields+0x1e6>
    default: memcpy(to, from, n); break;
 8002d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d86:	f005 fd37 	bl	80087f8 <memcpy>
 8002d8a:	e000      	b.n	8002d8e <readEntityFields+0x1e6>
    case 0: break;
 8002d8c:	bf00      	nop
}
 8002d8e:	bf00      	nop
            pos += ENTITY_DESCRIPTION_SIZE;
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	3304      	adds	r3, #4
 8002d94:	64fb      	str	r3, [r7, #76]	; 0x4c
        for(TYPEOF_STRUCT(Entity, fields_count) i = startFieldNumber; i < len; ++i) {
 8002d96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002da0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002da4:	893b      	ldrh	r3, [r7, #8]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	f4ff af70 	bcc.w	8002c8c <readEntityFields+0xe4>
            //------------------------------=========================================--------------------------------------===================================--------------------------------------=============================---------------------------------========================

        }

        (*size) = pos;
 8002dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db0:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (startFieldNumber < fields_count)) {
 8002db2:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <readEntityFields+0x220>
        goto error;
 8002db8:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8002dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3750      	adds	r7, #80	; 0x50
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000290 	.word	0x20000290
 8002dd4:	0800e038 	.word	0x0800e038
 8002dd8:	0800dcf4 	.word	0x0800dcf4
 8002ddc:	0800df8c 	.word	0x0800df8c
 8002de0:	0800e0e0 	.word	0x0800e0e0
 8002de4:	0800e074 	.word	0x0800e074

08002de8 <readFieldValue>:
/* ******************************************************************************************************************
 * READ one field value
 *
 */
int readFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{ //send {0x01 , prt + 0, ... , ptr + getTypeLen(entities[no].fields[fieldNo].type)}
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b0a3      	sub	sp, #140	; 0x8c
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	460b      	mov	r3, r1
 8002df6:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 2) || (outputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readFieldValue: No allocated entities or invalid input");
 8002df8:	4b92      	ldr	r3, [pc, #584]	; (8003044 <readFieldValue+0x25c>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <readFieldValue+0x2c>
 8002e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d905      	bls.n	8002e14 <readFieldValue+0x2c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <readFieldValue+0x2c>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d11a      	bne.n	8002e4a <readFieldValue+0x62>
 8002e14:	4b8b      	ldr	r3, [pc, #556]	; (8003044 <readFieldValue+0x25c>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <readFieldValue+0x48>
 8002e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d905      	bls.n	8002e30 <readFieldValue+0x48>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <readFieldValue+0x48>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <readFieldValue+0x4c>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <readFieldValue+0x4e>
 8002e34:	2300      	movs	r3, #0
 8002e36:	b2d9      	uxtb	r1, r3
 8002e38:	4b83      	ldr	r3, [pc, #524]	; (8003048 <readFieldValue+0x260>)
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	23d0      	movs	r3, #208	; 0xd0
 8002e3e:	4a83      	ldr	r2, [pc, #524]	; (800304c <readFieldValue+0x264>)
 8002e40:	4883      	ldr	r0, [pc, #524]	; (8003050 <readFieldValue+0x268>)
 8002e42:	f002 f92f 	bl	80050a4 <__M_Error>
 8002e46:	2300      	movs	r3, #0
 8002e48:	e0f7      	b.n	800303a <readFieldValue+0x252>

    Entity*         const       entity  = entityInfo.entities[entityNumber];
 8002e4a:	4b7e      	ldr	r3, [pc, #504]	; (8003044 <readFieldValue+0x25c>)
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	67fb      	str	r3, [r7, #124]	; 0x7c
    EntityField*    const       field   = &entity->fields[fieldNumber];
 8002e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	897b      	ldrh	r3, [r7, #10]
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	4413      	add	r3, r2
 8002e62:	67bb      	str	r3, [r7, #120]	; 0x78

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 8002e64:	4b77      	ldr	r3, [pc, #476]	; (8003044 <readFieldValue+0x25c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	677b      	str	r3, [r7, #116]	; 0x74
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8002e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e6c:	891b      	ldrh	r3, [r3, #8]
 8002e6e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	429a      	cmp	r2, r3
 8002e78:	f080 80d7 	bcs.w	800302a <readFieldValue+0x242>
 8002e7c:	897a      	ldrh	r2, [r7, #10]
 8002e7e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e82:	429a      	cmp	r2, r3
 8002e84:	f080 80d1 	bcs.w	800302a <readFieldValue+0x242>
        const u8        type    = field->type;
 8002e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8a:	7e1b      	ldrb	r3, [r3, #24]
 8002e8c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        const reg       typeLen = getMYCTypeLen(type);
 8002e90:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8002e94:	65fb      	str	r3, [r7, #92]	; 0x5c
    if(type < TYPE_ARRAY_LENGTH) {
 8002e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e98:	2b11      	cmp	r3, #17
 8002e9a:	d804      	bhi.n	8002ea6 <readFieldValue+0xbe>
        return typeLengthMappingArray[type];
 8002e9c:	4a6d      	ldr	r2, [pc, #436]	; (8003054 <readFieldValue+0x26c>)
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	e000      	b.n	8002ea8 <readFieldValue+0xc0>
    return 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
        void* const     ptr     = (entity->pointer + field->shift);
 8002eaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	66bb      	str	r3, [r7, #104]	; 0x68

        reg pos = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	667b      	str	r3, [r7, #100]	; 0x64

        outputData[pos++] = ENTITY_OK;
 8002eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	667a      	str	r2, [r7, #100]	; 0x64
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
        outputData[pos++] = type;    /////////////////////////////// may be optimize??? ///////////////////////////////////////////////////
 8002ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	667a      	str	r2, [r7, #100]	; 0x64
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8002ed6:	701a      	strb	r2, [r3, #0]

        ENTITY_DBG_ASSERT_BUF(((pos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8002ed8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002edc:	4413      	add	r3, r2
 8002ede:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d212      	bcs.n	8002f0c <readFieldValue+0x124>
 8002ee6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	4413      	add	r3, r2
 8002eec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	bf34      	ite	cc
 8002ef4:	2301      	movcc	r3, #1
 8002ef6:	2300      	movcs	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	4b56      	ldr	r3, [pc, #344]	; (8003058 <readFieldValue+0x270>)
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	23e2      	movs	r3, #226	; 0xe2
 8002f02:	4a52      	ldr	r2, [pc, #328]	; (800304c <readFieldValue+0x264>)
 8002f04:	4855      	ldr	r0, [pc, #340]	; (800305c <readFieldValue+0x274>)
 8002f06:	f002 f8cd 	bl	80050a4 <__M_Error>
 8002f0a:	e08f      	b.n	800302c <readFieldValue+0x244>
                                  goto error;
                              }, "readFieldValue: field read size more than buffer");

        proceedReadEntity(field->bitFlags, ptr, &outputData[pos], typeLen);
 8002f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f14:	440b      	add	r3, r1
 8002f16:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f1a:	657a      	str	r2, [r7, #84]	; 0x54
 8002f1c:	653b      	str	r3, [r7, #80]	; 0x50
 8002f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f20:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <readFieldValue+0x172>
 8002f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d011      	beq.n	8002f5a <readFieldValue+0x172>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8002f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 8002f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3e:	647b      	str	r3, [r7, #68]	; 0x44
                                        if(reg_ptr_from) {
 8002f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d058      	beq.n	8002ff8 <readFieldValue+0x210>
 8002f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f48:	643b      	str	r3, [r7, #64]	; 0x40
 8002f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    MY_CTYPE_REG_CPY(to, from);
 8002f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002f58:	e04e      	b.n	8002ff8 <readFieldValue+0x210>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8002f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00c      	beq.n	8002f7e <readFieldValue+0x196>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8002f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8002f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    MY_CTYPE_REG_CPY(to, from);
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	e03d      	b.n	8002ffa <readFieldValue+0x212>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8002f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01e      	beq.n	8002fc6 <readFieldValue+0x1de>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 8002f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
                                        if(reg_ptr_from) {
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d032      	beq.n	8002ffa <readFieldValue+0x212>
 8002f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9e:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <readFieldValue+0x1da>
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d104      	bne.n	8002fb6 <readFieldValue+0x1ce>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e006      	b.n	8002fc4 <readFieldValue+0x1dc>
    default: memcpy(to, from, n); break;
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	6a39      	ldr	r1, [r7, #32]
 8002fba:	69f8      	ldr	r0, [r7, #28]
 8002fbc:	f005 fc1c 	bl	80087f8 <memcpy>
 8002fc0:	e000      	b.n	8002fc4 <readFieldValue+0x1dc>
    case 0: break;
 8002fc2:	bf00      	nop
}
 8002fc4:	e019      	b.n	8002ffa <readFieldValue+0x212>
 8002fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	613b      	str	r3, [r7, #16]
    switch (n) {
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <readFieldValue+0x20c>
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d104      	bne.n	8002fe8 <readFieldValue+0x200>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e006      	b.n	8002ff6 <readFieldValue+0x20e>
    default: memcpy(to, from, n); break;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	6979      	ldr	r1, [r7, #20]
 8002fec:	6938      	ldr	r0, [r7, #16]
 8002fee:	f005 fc03 	bl	80087f8 <memcpy>
 8002ff2:	e000      	b.n	8002ff6 <readFieldValue+0x20e>
    case 0: break;
 8002ff4:	bf00      	nop
}
 8002ff6:	e000      	b.n	8002ffa <readFieldValue+0x212>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8002ff8:	bf00      	nop
}
 8002ffa:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8002ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	663b      	str	r3, [r7, #96]	; 0x60
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <readFieldValue+0x22e>
            __entityCallback(entity, field, ptr, field->rdCallback.context);
 8003008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800300e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003010:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003012:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003014:	47a0      	blx	r4
        }
#endif /* USE_ENTITY_READ_CALLBACK */

        pos += typeLen;
 8003016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	4413      	add	r3, r2
 800301c:	667b      	str	r3, [r7, #100]	; 0x64
        (*size) = pos;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003022:	601a      	str	r2, [r3, #0]
    if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003024:	bf00      	nop
    } else {
        goto error;
    }

    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003026:	2301      	movs	r3, #1
 8003028:	e007      	b.n	800303a <readFieldValue+0x252>
        goto error;
 800302a:	bf00      	nop

    // error proceeding lable -------------------------------------------------------------------
error:
    outputData[0] = ENTITY_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
    (*size) = 1;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3784      	adds	r7, #132	; 0x84
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}
 8003042:	bf00      	nop
 8003044:	20000290 	.word	0x20000290
 8003048:	0800e1a0 	.word	0x0800e1a0
 800304c:	0800dcf4 	.word	0x0800dcf4
 8003050:	0800e114 	.word	0x0800e114
 8003054:	0800f26c 	.word	0x0800f26c
 8003058:	0800e200 	.word	0x0800e200
 800305c:	0800e1d8 	.word	0x0800e1d8

08003060 <readSeveralFieldsValues>:
 * READ several fields values
 *
 */

int readSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b0b7      	sub	sp, #220	; 0xdc
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "readSeveralFieldsValues: No allocated entities or invalid input");
 800306e:	4bae      	ldr	r3, [pc, #696]	; (8003328 <readSeveralFieldsValues+0x2c8>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <readSeveralFieldsValues+0x2e>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d908      	bls.n	800308e <readSeveralFieldsValues+0x2e>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <readSeveralFieldsValues+0x2e>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <readSeveralFieldsValues+0x2e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11d      	bne.n	80030ca <readSeveralFieldsValues+0x6a>
 800308e:	4ba6      	ldr	r3, [pc, #664]	; (8003328 <readSeveralFieldsValues+0x2c8>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <readSeveralFieldsValues+0x4e>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d908      	bls.n	80030ae <readSeveralFieldsValues+0x4e>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <readSeveralFieldsValues+0x4e>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <readSeveralFieldsValues+0x4e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <readSeveralFieldsValues+0x52>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <readSeveralFieldsValues+0x54>
 80030b2:	2300      	movs	r3, #0
 80030b4:	b2d9      	uxtb	r1, r3
 80030b6:	4b9d      	ldr	r3, [pc, #628]	; (800332c <readSeveralFieldsValues+0x2cc>)
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f44f 7384 	mov.w	r3, #264	; 0x108
 80030be:	4a9c      	ldr	r2, [pc, #624]	; (8003330 <readSeveralFieldsValues+0x2d0>)
 80030c0:	489c      	ldr	r0, [pc, #624]	; (8003334 <readSeveralFieldsValues+0x2d4>)
 80030c2:	f001 ffef 	bl	80050a4 <__M_Error>
 80030c6:	2300      	movs	r3, #0
 80030c8:	e1d8      	b.n	800347c <readSeveralFieldsValues+0x41c>

    const reg inputMsgSize = (*size);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Wpos = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Rpos = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 80030dc:	4b92      	ldr	r3, [pc, #584]	; (8003328 <readSeveralFieldsValues+0x2c8>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 80030e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4413      	add	r3, r2
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 80030f6:	e15e      	b.n	80033b6 <readSeveralFieldsValues+0x356>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    reg Rpos_internal = (*Rpos);
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003104:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003108:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800310c:	4413      	add	r3, r2
 800310e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003112:	2302      	movs	r3, #2
 8003114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    switch (n) {
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <readSeveralFieldsValues+0xf8>
 8003130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d106      	bne.n	8003146 <readSeveralFieldsValues+0xe6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e009      	b.n	800315a <readSeveralFieldsValues+0xfa>
    default: memcpy(to, from, n); break;
 8003146:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800314a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800314e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003152:	f005 fb51 	bl	80087f8 <memcpy>
 8003156:	e000      	b.n	800315a <readSeveralFieldsValues+0xfa>
    case 0: break;
 8003158:	bf00      	nop
}
 800315a:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	b29b      	uxth	r3, r3
 8003160:	617b      	str	r3, [r7, #20]
    return entityNumber;
 8003162:	697b      	ldr	r3, [r7, #20]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003164:	61fb      	str	r3, [r7, #28]
    Rpos_internal += ENTITIES_SIZEOF;
 8003166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800316a:	3302      	adds	r3, #2
 800316c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003170:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003174:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003178:	4413      	add	r3, r2
 800317a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	fieldNumber = *(inputData);
 800317e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    return fieldNumber;
 8003188:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 800318c:	837b      	strh	r3, [r7, #26]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 800318e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003192:	3301      	adds	r3, #1
 8003194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    (*Rpos) = Rpos_internal;
 8003198:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800319c:	623b      	str	r3, [r7, #32]
}
 800319e:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <readSeveralFieldsValues+0x2c8>)
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 80031b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	8b7b      	ldrh	r3, [r7, #26]
 80031b8:	015b      	lsls	r3, r3, #5
 80031ba:	4413      	add	r3, r2
 80031bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count = entity->fields_count;
 80031c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c4:	891b      	ldrh	r3, [r3, #8]
 80031c6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f240 80fd 	bls.w	80033d0 <readSeveralFieldsValues+0x370>
 80031d6:	8b7b      	ldrh	r3, [r7, #26]
 80031d8:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80031dc:	429a      	cmp	r2, r3
 80031de:	f240 80f7 	bls.w	80033d0 <readSeveralFieldsValues+0x370>

            const reg typeLen = getMYCTypeLen(field->type);
 80031e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031e6:	7e1b      	ldrb	r3, [r3, #24]
 80031e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(type < TYPE_ARRAY_LENGTH) {
 80031ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031f0:	2b11      	cmp	r3, #17
 80031f2:	d805      	bhi.n	8003200 <readSeveralFieldsValues+0x1a0>
        return typeLengthMappingArray[type];
 80031f4:	4a50      	ldr	r2, [pc, #320]	; (8003338 <readSeveralFieldsValues+0x2d8>)
 80031f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	e000      	b.n	8003202 <readSeveralFieldsValues+0x1a2>
    return 0;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, {
 8003206:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800320a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800320e:	4413      	add	r3, r2
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d214      	bcs.n	8003240 <readSeveralFieldsValues+0x1e0>
 8003216:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800321a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800321e:	4413      	add	r3, r2
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	bf34      	ite	cc
 8003226:	2301      	movcc	r3, #1
 8003228:	2300      	movcs	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <readSeveralFieldsValues+0x2dc>)
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	f240 1321 	movw	r3, #289	; 0x121
 8003236:	4a3e      	ldr	r2, [pc, #248]	; (8003330 <readSeveralFieldsValues+0x2d0>)
 8003238:	4841      	ldr	r0, [pc, #260]	; (8003340 <readSeveralFieldsValues+0x2e0>)
 800323a:	f001 ff33 	bl	80050a4 <__M_Error>
 800323e:	e0c8      	b.n	80033d2 <readSeveralFieldsValues+0x372>
                                      goto error;
                                  }, "readSeveralFieldsValues: field size more than buffer");

            ptr = (entity->pointer + field->shift);
 8003240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	4413      	add	r3, r2
 800324e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 8003252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800325e:	440b      	add	r3, r1
 8003260:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003264:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003268:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800326c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800326e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003272:	67bb      	str	r3, [r7, #120]	; 0x78
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d018      	beq.n	80032b2 <readSeveralFieldsValues+0x252>
 8003280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d012      	beq.n	80032b2 <readSeveralFieldsValues+0x252>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 800328c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	677b      	str	r3, [r7, #116]	; 0x74
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 8003294:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003296:	673b      	str	r3, [r7, #112]	; 0x70
                                        if(reg_ptr_from) {
 8003298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329a:	2b00      	cmp	r3, #0
 800329c:	d06c      	beq.n	8003378 <readSeveralFieldsValues+0x318>
 800329e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a4:	66bb      	str	r3, [r7, #104]	; 0x68
    MY_CTYPE_REG_CPY(to, from);
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ac:	601a      	str	r2, [r3, #0]
}
 80032ae:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80032b0:	e062      	b.n	8003378 <readSeveralFieldsValues+0x318>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80032b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <readSeveralFieldsValues+0x27a>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 80032be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032c2:	667b      	str	r3, [r7, #100]	; 0x64
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 80032c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032c6:	663b      	str	r3, [r7, #96]	; 0x60
 80032c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ce:	65bb      	str	r3, [r7, #88]	; 0x58
    MY_CTYPE_REG_CPY(to, from);
 80032d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d6:	601a      	str	r2, [r3, #0]
}
 80032d8:	e04f      	b.n	800337a <readSeveralFieldsValues+0x31a>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80032da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02e      	beq.n	8003344 <readSeveralFieldsValues+0x2e4>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 80032e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	657b      	str	r3, [r7, #84]	; 0x54
                                        if(reg_ptr_from) {
 80032ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d042      	beq.n	800337a <readSeveralFieldsValues+0x31a>
 80032f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f6:	653b      	str	r3, [r7, #80]	; 0x50
 80032f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032fe:	64bb      	str	r3, [r7, #72]	; 0x48
    switch (n) {
 8003300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <readSeveralFieldsValues+0x2c2>
 8003306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003308:	2b01      	cmp	r3, #1
 800330a:	d104      	bne.n	8003316 <readSeveralFieldsValues+0x2b6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800330c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e006      	b.n	8003324 <readSeveralFieldsValues+0x2c4>
    default: memcpy(to, from, n); break;
 8003316:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003318:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800331a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800331c:	f005 fa6c 	bl	80087f8 <memcpy>
 8003320:	e000      	b.n	8003324 <readSeveralFieldsValues+0x2c4>
    case 0: break;
 8003322:	bf00      	nop
}
 8003324:	e029      	b.n	800337a <readSeveralFieldsValues+0x31a>
 8003326:	bf00      	nop
 8003328:	20000290 	.word	0x20000290
 800332c:	0800e304 	.word	0x0800e304
 8003330:	0800dcf4 	.word	0x0800dcf4
 8003334:	0800e234 	.word	0x0800e234
 8003338:	0800f26c 	.word	0x0800f26c
 800333c:	0800e36c 	.word	0x0800e36c
 8003340:	0800e344 	.word	0x0800e344
 8003344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003346:	647b      	str	r3, [r7, #68]	; 0x44
 8003348:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800334c:	643b      	str	r3, [r7, #64]	; 0x40
 800334e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003350:	63fb      	str	r3, [r7, #60]	; 0x3c
    switch (n) {
 8003352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <readSeveralFieldsValues+0x314>
 8003358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335a:	2b01      	cmp	r3, #1
 800335c:	d104      	bne.n	8003368 <readSeveralFieldsValues+0x308>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	e006      	b.n	8003376 <readSeveralFieldsValues+0x316>
    default: memcpy(to, from, n); break;
 8003368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800336a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800336c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800336e:	f005 fa43 	bl	80087f8 <memcpy>
 8003372:	e000      	b.n	8003376 <readSeveralFieldsValues+0x316>
    case 0: break;
 8003374:	bf00      	nop
}
 8003376:	e000      	b.n	800337a <readSeveralFieldsValues+0x31a>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003378:	bf00      	nop
}
 800337a:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
            const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 800337c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <readSeveralFieldsValues+0x346>
                __entityCallback(entity, field, ptr, field->rdCallback.context);
 800338e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003398:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800339c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80033a0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80033a4:	47a0      	blx	r4
            }
#endif /* USE_ENTITY_READ_CALLBACK */

            Wpos += typeLen;
 80033a6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80033aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033ae:	4413      	add	r3, r2
 80033b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80033b4:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF - 1U)) < inputMsgSize) {
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	3302      	adds	r3, #2
 80033ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033be:	429a      	cmp	r2, r3
 80033c0:	f63f ae9a 	bhi.w	80030f8 <readSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80033ca:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e055      	b.n	800347c <readSeveralFieldsValues+0x41c>
            goto error;
 80033d0:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    outputData[Wpos++] = ENTITY_ERROR;
 80033d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4413      	add	r3, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033f0:	4413      	add	r3, r2
 80033f2:	2202      	movs	r2, #2
 80033f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f8:	f107 031c 	add.w	r3, r7, #28
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
    switch (n) {
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <readSeveralFieldsValues+0x3c0>
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d104      	bne.n	8003414 <readSeveralFieldsValues+0x3b4>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e006      	b.n	8003422 <readSeveralFieldsValues+0x3c2>
    default: memcpy(to, from, n); break;
 8003414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800341a:	f005 f9ed 	bl	80087f8 <memcpy>
 800341e:	e000      	b.n	8003422 <readSeveralFieldsValues+0x3c2>
    case 0: break;
 8003420:	bf00      	nop
}
 8003422:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 8003424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003428:	3302      	adds	r3, #2
 800342a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003434:	4413      	add	r3, r2
 8003436:	2201      	movs	r2, #1
 8003438:	63ba      	str	r2, [r7, #56]	; 0x38
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
 800343c:	f107 031a 	add.w	r3, r7, #26
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
    switch (n) {
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <readSeveralFieldsValues+0x404>
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	2b01      	cmp	r3, #1
 800344c:	d104      	bne.n	8003458 <readSeveralFieldsValues+0x3f8>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e006      	b.n	8003466 <readSeveralFieldsValues+0x406>
    default: memcpy(to, from, n); break;
 8003458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800345a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800345c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800345e:	f005 f9cb 	bl	80087f8 <memcpy>
 8003462:	e000      	b.n	8003466 <readSeveralFieldsValues+0x406>
    case 0: break;
 8003464:	bf00      	nop
}
 8003466:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 8003468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800346c:	3301      	adds	r3, #1
 800346e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    (*size) = Wpos;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003478:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	37d4      	adds	r7, #212	; 0xd4
 8003480:	46bd      	mov	sp, r7
 8003482:	bd90      	pop	{r4, r7, pc}

08003484 <setFieldValue>:
/* ******************************************************************************************************************
 * WRITE one field value
 *
 */
int setFieldValue(const TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber, const TYPEOF_STRUCT(Entity, fields_count) fieldNumber, u8* const inputData, const reg inputBufferSize)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b0a3      	sub	sp, #140	; 0x8c
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	460b      	mov	r3, r1
 8003492:	817b      	strh	r3, [r7, #10]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (inputData == NULL) || (inputBufferSize == 0)), M_EMPTY, return ENTITY_ERROR, "setFieldValue: No allocated entities or invalid input");
 8003494:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <setFieldValue+0x204>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <setFieldValue+0x24>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <setFieldValue+0x24>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d117      	bne.n	80034d8 <setFieldValue+0x54>
 80034a8:	4b77      	ldr	r3, [pc, #476]	; (8003688 <setFieldValue+0x204>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <setFieldValue+0x38>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <setFieldValue+0x38>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <setFieldValue+0x3c>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <setFieldValue+0x3e>
 80034c0:	2300      	movs	r3, #0
 80034c2:	b2d9      	uxtb	r1, r3
 80034c4:	4b71      	ldr	r3, [pc, #452]	; (800368c <setFieldValue+0x208>)
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	f44f 73a9 	mov.w	r3, #338	; 0x152
 80034cc:	4a70      	ldr	r2, [pc, #448]	; (8003690 <setFieldValue+0x20c>)
 80034ce:	4871      	ldr	r0, [pc, #452]	; (8003694 <setFieldValue+0x210>)
 80034d0:	f001 fde8 	bl	80050a4 <__M_Error>
 80034d4:	2300      	movs	r3, #0
 80034d6:	e0d3      	b.n	8003680 <setFieldValue+0x1fc>

    Entity* const entity = entityInfo.entities[entityNumber];
 80034d8:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <setFieldValue+0x204>)
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    EntityField* const field = &entity->fields[fieldNumber];
 80034e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	015b      	lsls	r3, r3, #5
 80034ee:	4413      	add	r3, r2
 80034f0:	67bb      	str	r3, [r7, #120]	; 0x78

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count  = entityInfo.entities_count;
 80034f2:	4b65      	ldr	r3, [pc, #404]	; (8003688 <setFieldValue+0x204>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	677b      	str	r3, [r7, #116]	; 0x74
    const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 80034f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034fa:	891b      	ldrh	r3, [r3, #8]
 80034fc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	66fb      	str	r3, [r7, #108]	; 0x6c

    if((entityNumber < entities_count) && (fieldNumber < fields_count) && ((bitFlags & ENTITY_READ_ONLY_MSK) == 0)) {
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800350a:	429a      	cmp	r2, r3
 800350c:	f080 80b7 	bcs.w	800367e <setFieldValue+0x1fa>
 8003510:	897a      	ldrh	r2, [r7, #10]
 8003512:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8003516:	429a      	cmp	r2, r3
 8003518:	f080 80b1 	bcs.w	800367e <setFieldValue+0x1fa>
 800351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 80ab 	bne.w	800367e <setFieldValue+0x1fa>
        void* const ptr = (entity->pointer + field->shift);
 8003528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	4413      	add	r3, r2
 8003532:	66bb      	str	r3, [r7, #104]	; 0x68
        const reg typeLen = getMYCTypeLen(field->type);
 8003534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003536:	7e1b      	ldrb	r3, [r3, #24]
 8003538:	65fb      	str	r3, [r7, #92]	; 0x5c
    if(type < TYPE_ARRAY_LENGTH) {
 800353a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353c:	2b11      	cmp	r3, #17
 800353e:	d804      	bhi.n	800354a <setFieldValue+0xc6>
        return typeLengthMappingArray[type];
 8003540:	4a55      	ldr	r2, [pc, #340]	; (8003698 <setFieldValue+0x214>)
 8003542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003548:	e000      	b.n	800354c <setFieldValue+0xc8>
    return 0;
 800354a:	2300      	movs	r3, #0
 800354c:	667b      	str	r3, [r7, #100]	; 0x64

        ENTITY_DBG_ASSERT_BUF((typeLen > inputBufferSize), M_EMPTY, {
 800354e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d911      	bls.n	800357a <setFieldValue+0xf6>
 8003556:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	bf8c      	ite	hi
 800355e:	2301      	movhi	r3, #1
 8003560:	2300      	movls	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	4b4d      	ldr	r3, [pc, #308]	; (800369c <setFieldValue+0x218>)
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f240 135f 	movw	r3, #351	; 0x15f
 800356e:	4a48      	ldr	r2, [pc, #288]	; (8003690 <setFieldValue+0x20c>)
 8003570:	484b      	ldr	r0, [pc, #300]	; (80036a0 <setFieldValue+0x21c>)
 8003572:	f001 fd97 	bl	80050a4 <__M_Error>
 8003576:	2300      	movs	r3, #0
 8003578:	e082      	b.n	8003680 <setFieldValue+0x1fc>
 800357a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357c:	65bb      	str	r3, [r7, #88]	; 0x58
 800357e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003580:	657b      	str	r3, [r7, #84]	; 0x54
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	653b      	str	r3, [r7, #80]	; 0x50
 8003586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003588:	64fb      	str	r3, [r7, #76]	; 0x4c
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800358a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <setFieldValue+0x13e>
 8003594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d011      	beq.n	80035c2 <setFieldValue+0x13e>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 800359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	64bb      	str	r3, [r7, #72]	; 0x48
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 80035a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a6:	647b      	str	r3, [r7, #68]	; 0x44
                                        if(reg_ptr_to) {
 80035a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d058      	beq.n	8003660 <setFieldValue+0x1dc>
 80035ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
 80035b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    MY_CTYPE_REG_CPY(to, from);
 80035b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80035c0:	e04e      	b.n	8003660 <setFieldValue+0x1dc>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 80035c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <setFieldValue+0x162>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 80035cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 80035d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
    MY_CTYPE_REG_CPY(to, from);
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	601a      	str	r2, [r3, #0]
}
 80035e4:	e03d      	b.n	8003662 <setFieldValue+0x1de>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80035e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01e      	beq.n	800362e <setFieldValue+0x1aa>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 80035f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
                                        if(reg_ptr_to) {
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d032      	beq.n	8003662 <setFieldValue+0x1de>
 80035fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003602:	623b      	str	r3, [r7, #32]
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	61fb      	str	r3, [r7, #28]
    switch (n) {
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <setFieldValue+0x1a6>
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	2b01      	cmp	r3, #1
 8003612:	d104      	bne.n	800361e <setFieldValue+0x19a>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e006      	b.n	800362c <setFieldValue+0x1a8>
    default: memcpy(to, from, n); break;
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	6a39      	ldr	r1, [r7, #32]
 8003622:	69f8      	ldr	r0, [r7, #28]
 8003624:	f005 f8e8 	bl	80087f8 <memcpy>
 8003628:	e000      	b.n	800362c <setFieldValue+0x1a8>
    case 0: break;
 800362a:	bf00      	nop
}
 800362c:	e019      	b.n	8003662 <setFieldValue+0x1de>
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	613b      	str	r3, [r7, #16]
    switch (n) {
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <setFieldValue+0x1d8>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d104      	bne.n	8003650 <setFieldValue+0x1cc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e006      	b.n	800365e <setFieldValue+0x1da>
    default: memcpy(to, from, n); break;
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	6938      	ldr	r0, [r7, #16]
 8003656:	f005 f8cf 	bl	80087f8 <memcpy>
 800365a:	e000      	b.n	800365e <setFieldValue+0x1da>
    case 0: break;
 800365c:	bf00      	nop
}
 800365e:	e000      	b.n	8003662 <setFieldValue+0x1de>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003660:	bf00      	nop
}
 8003662:	bf00      	nop

        proceedWriteEntity(bitFlags, ptr, inputData, typeLen);


#ifdef USE_ENTITY_WRITE_CALLBACK
        const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	663b      	str	r3, [r7, #96]	; 0x60
        if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 800366a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <setFieldValue+0x1fa>
            __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8003676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003678:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800367a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800367c:	47a0      	blx	r4
#endif /* USE_ENTITY_WRITE_CALLBACK */

    }

    UNUSED(inputBufferSize);
    return ENTITY_OK;
 800367e:	2301      	movs	r3, #1
}
 8003680:	4618      	mov	r0, r3
 8003682:	3784      	adds	r7, #132	; 0x84
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}
 8003688:	20000290 	.word	0x20000290
 800368c:	0800e41c 	.word	0x0800e41c
 8003690:	0800dcf4 	.word	0x0800dcf4
 8003694:	0800e3a4 	.word	0x0800e3a4
 8003698:	0800f26c 	.word	0x0800f26c
 800369c:	0800e470 	.word	0x0800e470
 80036a0:	0800e454 	.word	0x0800e454

080036a4 <setSeveralFieldsValues>:
/* ******************************************************************************************************************
 * WRITE several fields values
 *
 */
int setSeveralFieldsValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b0b7      	sub	sp, #220	; 0xdc
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < (1 + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF))) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "setSeveralFieldsValues: No allocated entities or invalid input");
 80036b2:	4bad      	ldr	r3, [pc, #692]	; (8003968 <setSeveralFieldsValues+0x2c4>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <setSeveralFieldsValues+0x2e>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d908      	bls.n	80036d2 <setSeveralFieldsValues+0x2e>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <setSeveralFieldsValues+0x2e>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <setSeveralFieldsValues+0x2e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11d      	bne.n	800370e <setSeveralFieldsValues+0x6a>
 80036d2:	4ba5      	ldr	r3, [pc, #660]	; (8003968 <setSeveralFieldsValues+0x2c4>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <setSeveralFieldsValues+0x4e>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d908      	bls.n	80036f2 <setSeveralFieldsValues+0x4e>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <setSeveralFieldsValues+0x4e>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <setSeveralFieldsValues+0x4e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <setSeveralFieldsValues+0x52>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <setSeveralFieldsValues+0x54>
 80036f6:	2300      	movs	r3, #0
 80036f8:	b2d9      	uxtb	r1, r3
 80036fa:	4b9c      	ldr	r3, [pc, #624]	; (800396c <setSeveralFieldsValues+0x2c8>)
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	f240 137b 	movw	r3, #379	; 0x17b
 8003702:	4a9b      	ldr	r2, [pc, #620]	; (8003970 <setSeveralFieldsValues+0x2cc>)
 8003704:	489b      	ldr	r0, [pc, #620]	; (8003974 <setSeveralFieldsValues+0x2d0>)
 8003706:	f001 fccd 	bl	80050a4 <__M_Error>
 800370a:	2300      	movs	r3, #0
 800370c:	e1db      	b.n	8003ac6 <setSeveralFieldsValues+0x422>

    const reg inputMsgSize = (*size);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    reg Wpos = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    reg Rpos = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003720:	4b91      	ldr	r3, [pc, #580]	; (8003968 <setSeveralFieldsValues+0x2c4>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    outputData[Wpos++] = ENTITY_OK;
 8003728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4413      	add	r3, r2
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]

    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 800373a:	e161      	b.n	8003a00 <setSeveralFieldsValues+0x35c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    reg Rpos_internal = (*Rpos);
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003748:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800374c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003750:	4413      	add	r3, r2
 8003752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003756:	2302      	movs	r3, #2
 8003758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800375c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003764:	f107 0310 	add.w	r3, r7, #16
 8003768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    switch (n) {
 800376c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003770:	2b00      	cmp	r3, #0
 8003772:	d013      	beq.n	800379c <setSeveralFieldsValues+0xf8>
 8003774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003778:	2b01      	cmp	r3, #1
 800377a:	d106      	bne.n	800378a <setSeveralFieldsValues+0xe6>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800377c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	e009      	b.n	800379e <setSeveralFieldsValues+0xfa>
    default: memcpy(to, from, n); break;
 800378a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800378e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003792:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003796:	f005 f82f 	bl	80087f8 <memcpy>
 800379a:	e000      	b.n	800379e <setSeveralFieldsValues+0xfa>
    case 0: break;
 800379c:	bf00      	nop
}
 800379e:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	613b      	str	r3, [r7, #16]
    return entityNumber;
 80037a6:	693b      	ldr	r3, [r7, #16]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 80037a8:	61bb      	str	r3, [r7, #24]
    Rpos_internal += ENTITIES_SIZEOF;
 80037aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037ae:	3302      	adds	r3, #2
 80037b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80037b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80037b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037bc:	4413      	add	r3, r2
 80037be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	fieldNumber = *(inputData);
 80037c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    return fieldNumber;
 80037cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80037d0:	82fb      	strh	r3, [r7, #22]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80037d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037d6:	3301      	adds	r3, #1
 80037d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    (*Rpos) = Rpos_internal;
 80037dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037e0:	61fb      	str	r3, [r7, #28]
}
 80037e2:	bf00      	nop

        readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

        Entity* const entity = entityInfo.entities[entityNumber];
 80037e4:	4b60      	ldr	r3, [pc, #384]	; (8003968 <setSeveralFieldsValues+0x2c4>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        EntityField* const field = &entity->fields[fieldNumber];
 80037f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	8afb      	ldrh	r3, [r7, #22]
 80037fc:	015b      	lsls	r3, r3, #5
 80037fe:	4413      	add	r3, r2
 8003800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003808:	891b      	ldrh	r3, [r3, #8]
 800380a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 800380e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800381e:	429a      	cmp	r2, r3
 8003820:	f240 80fb 	bls.w	8003a1a <setSeveralFieldsValues+0x376>
 8003824:	8afb      	ldrh	r3, [r7, #22]
 8003826:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800382a:	429a      	cmp	r2, r3
 800382c:	f240 80f5 	bls.w	8003a1a <setSeveralFieldsValues+0x376>
            const reg typeLen = getMYCTypeLen(field->type);
 8003830:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003834:	7e1b      	ldrb	r3, [r3, #24]
 8003836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if(type < TYPE_ARRAY_LENGTH) {
 800383a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800383e:	2b11      	cmp	r3, #17
 8003840:	d805      	bhi.n	800384e <setSeveralFieldsValues+0x1aa>
        return typeLengthMappingArray[type];
 8003842:	4a4d      	ldr	r2, [pc, #308]	; (8003978 <setSeveralFieldsValues+0x2d4>)
 8003844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384c:	e000      	b.n	8003850 <setSeveralFieldsValues+0x1ac>
    return 0;
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, {
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800385a:	4413      	add	r3, r2
 800385c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003860:	429a      	cmp	r2, r3
 8003862:	d214      	bcs.n	800388e <setSeveralFieldsValues+0x1ea>
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800386a:	4413      	add	r3, r2
 800386c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003870:	429a      	cmp	r2, r3
 8003872:	bf34      	ite	cc
 8003874:	2301      	movcc	r3, #1
 8003876:	2300      	movcs	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4619      	mov	r1, r3
 800387c:	4b3f      	ldr	r3, [pc, #252]	; (800397c <setSeveralFieldsValues+0x2d8>)
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8003884:	4a3a      	ldr	r2, [pc, #232]	; (8003970 <setSeveralFieldsValues+0x2cc>)
 8003886:	483e      	ldr	r0, [pc, #248]	; (8003980 <setSeveralFieldsValues+0x2dc>)
 8003888:	f001 fc0c 	bl	80050a4 <__M_Error>
 800388c:	e0c6      	b.n	8003a1c <setSeveralFieldsValues+0x378>
                                      goto error;
                                  }, "setSeveralFieldsValues: field read size more than buffer");


            if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 800388e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 80ac 	bne.w	80039f4 <setSeveralFieldsValues+0x350>

                ptr = (entity->pointer + field->shift);
 800389c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	4413      	add	r3, r2
 80038aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038c0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80038c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038c8:	677b      	str	r3, [r7, #116]	; 0x74
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80038ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d017      	beq.n	8003906 <setSeveralFieldsValues+0x262>
 80038d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d011      	beq.n	8003906 <setSeveralFieldsValues+0x262>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 80038e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	673b      	str	r3, [r7, #112]	; 0x70
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 80038e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ea:	66fb      	str	r3, [r7, #108]	; 0x6c
                                        if(reg_ptr_to) {
 80038ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d069      	beq.n	80039c6 <setSeveralFieldsValues+0x322>
 80038f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f8:	667b      	str	r3, [r7, #100]	; 0x64
    MY_CTYPE_REG_CPY(to, from);
 80038fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003900:	601a      	str	r2, [r3, #0]
}
 8003902:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003904:	e05f      	b.n	80039c6 <setSeveralFieldsValues+0x322>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003906:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <setSeveralFieldsValues+0x288>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 8003912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003914:	663b      	str	r3, [r7, #96]	; 0x60
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 8003916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391c:	65bb      	str	r3, [r7, #88]	; 0x58
 800391e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003920:	657b      	str	r3, [r7, #84]	; 0x54
    MY_CTYPE_REG_CPY(to, from);
 8003922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	e04d      	b.n	80039c8 <setSeveralFieldsValues+0x324>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 800392c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d02d      	beq.n	8003994 <setSeveralFieldsValues+0x2f0>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	653b      	str	r3, [r7, #80]	; 0x50
                                        if(reg_ptr_to) {
 800393e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003940:	2b00      	cmp	r3, #0
 8003942:	d041      	beq.n	80039c8 <setSeveralFieldsValues+0x324>
 8003944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
 800394c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800394e:	647b      	str	r3, [r7, #68]	; 0x44
    switch (n) {
 8003950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01c      	beq.n	8003990 <setSeveralFieldsValues+0x2ec>
 8003956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d113      	bne.n	8003984 <setSeveralFieldsValues+0x2e0>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800395c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e015      	b.n	8003992 <setSeveralFieldsValues+0x2ee>
 8003966:	bf00      	nop
 8003968:	20000290 	.word	0x20000290
 800396c:	0800e49c 	.word	0x0800e49c
 8003970:	0800dcf4 	.word	0x0800dcf4
 8003974:	0800e234 	.word	0x0800e234
 8003978:	0800f26c 	.word	0x0800f26c
 800397c:	0800e500 	.word	0x0800e500
 8003980:	0800e4dc 	.word	0x0800e4dc
    default: memcpy(to, from, n); break;
 8003984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003986:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003988:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800398a:	f004 ff35 	bl	80087f8 <memcpy>
 800398e:	e000      	b.n	8003992 <setSeveralFieldsValues+0x2ee>
    case 0: break;
 8003990:	bf00      	nop
}
 8003992:	e019      	b.n	80039c8 <setSeveralFieldsValues+0x324>
 8003994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003996:	643b      	str	r3, [r7, #64]	; 0x40
 8003998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800399c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800399e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (n) {
 80039a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <setSeveralFieldsValues+0x31e>
 80039a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d104      	bne.n	80039b6 <setSeveralFieldsValues+0x312>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	781a      	ldrb	r2, [r3, #0]
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e006      	b.n	80039c4 <setSeveralFieldsValues+0x320>
    default: memcpy(to, from, n); break;
 80039b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039bc:	f004 ff1c 	bl	80087f8 <memcpy>
 80039c0:	e000      	b.n	80039c4 <setSeveralFieldsValues+0x320>
    case 0: break;
 80039c2:	bf00      	nop
}
 80039c4:	e000      	b.n	80039c8 <setSeveralFieldsValues+0x324>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80039c6:	bf00      	nop
}
 80039c8:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 80039ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 80039d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <setSeveralFieldsValues+0x350>
                    __entityCallback(entity, field, ptr, field->wrCallback.context);
 80039dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80039e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039ea:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80039ee:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80039f2:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_WRITE_CALLBACK */

            }

            Rpos += typeLen;
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039fa:	4413      	add	r3, r2
 80039fc:	61fb      	str	r3, [r7, #28]
        if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 80039fe:	bf00      	nop
    while((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) < inputMsgSize) {
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3303      	adds	r3, #3
 8003a04:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	f63f ae97 	bhi.w	800373c <setSeveralFieldsValues+0x98>
            goto error;
        }
    }


    (*size) = Wpos;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a14:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e055      	b.n	8003ac6 <setSeveralFieldsValues+0x422>
            goto error;
 8003a1a:	bf00      	nop


    // error proceeding lable -------------------------------------------------------------------
error:
    Wpos = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    outputData[Wpos++] = ENTITY_ERROR;
 8003a22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	4413      	add	r3, r2
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
    ENTITY_BYTE_CPY(ENTITIES_SIZEOF,     &outputData[Wpos], (u8*)&entityNumber);
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a3a:	4413      	add	r3, r2
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	f107 0318 	add.w	r3, r7, #24
 8003a46:	623b      	str	r3, [r7, #32]
    switch (n) {
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <setSeveralFieldsValues+0x3c6>
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d104      	bne.n	8003a5e <setSeveralFieldsValues+0x3ba>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e006      	b.n	8003a6c <setSeveralFieldsValues+0x3c8>
    default: memcpy(to, from, n); break;
 8003a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a62:	6a38      	ldr	r0, [r7, #32]
 8003a64:	f004 fec8 	bl	80087f8 <memcpy>
 8003a68:	e000      	b.n	8003a6c <setSeveralFieldsValues+0x3c8>
    case 0: break;
 8003a6a:	bf00      	nop
}
 8003a6c:	bf00      	nop
    Wpos += ENTITIES_SIZEOF;
 8003a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a72:	3302      	adds	r3, #2
 8003a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    ENTITY_BYTE_CPY(ENTITY_FIELD_SIZEOF, &outputData[Wpos], (u8*)&fieldNumber );
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a7e:	4413      	add	r3, r2
 8003a80:	2201      	movs	r2, #1
 8003a82:	637a      	str	r2, [r7, #52]	; 0x34
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
 8003a86:	f107 0316 	add.w	r3, r7, #22
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (n) {
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <setSeveralFieldsValues+0x40a>
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d104      	bne.n	8003aa2 <setSeveralFieldsValues+0x3fe>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e006      	b.n	8003ab0 <setSeveralFieldsValues+0x40c>
    default: memcpy(to, from, n); break;
 8003aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003aa8:	f004 fea6 	bl	80087f8 <memcpy>
 8003aac:	e000      	b.n	8003ab0 <setSeveralFieldsValues+0x40c>
    case 0: break;
 8003aae:	bf00      	nop
}
 8003ab0:	bf00      	nop
    Wpos += ENTITY_FIELD_SIZEOF;
 8003ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    (*size) = Wpos;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ac2:	601a      	str	r2, [r3, #0]
    return ENTITY_ERROR;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	37d4      	adds	r7, #212	; 0xd4
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd90      	pop	{r4, r7, pc}
 8003ace:	bf00      	nop

08003ad0 <proceedGluedValues>:
/* ******************************************************************************************************************
 * GLUED functions fields values
 *
 */
int proceedGluedValues(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b0d9      	sub	sp, #356	; 0x164
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8003ada:	f5a4 74a6 	sub.w	r4, r4, #332	; 0x14c
 8003ade:	6020      	str	r0, [r4, #0]
 8003ae0:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8003ae4:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 8003ae8:	6001      	str	r1, [r0, #0]
 8003aea:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8003aee:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 8003af2:	600a      	str	r2, [r1, #0]
 8003af4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003af8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003afc:	6013      	str	r3, [r2, #0]
    M_Assert_Break((entityInfo.entities == NULLPTR(TYPEOF_STRUCT(EntityInfo, entities)) || (maxOutBufferSize < 3) || (outputData == NULL) || (inputData == NULL) || (size == NULL)), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: No allocated entities or invalid input");
 8003afe:	4bb8      	ldr	r3, [pc, #736]	; (8003de0 <proceedGluedValues+0x310>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01b      	beq.n	8003b3e <proceedGluedValues+0x6e>
 8003b06:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b0a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d914      	bls.n	8003b3e <proceedGluedValues+0x6e>
 8003b14:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b18:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <proceedGluedValues+0x6e>
 8003b22:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d006      	beq.n	8003b3e <proceedGluedValues+0x6e>
 8003b30:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b34:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d12e      	bne.n	8003b9c <proceedGluedValues+0xcc>
 8003b3e:	4ba8      	ldr	r3, [pc, #672]	; (8003de0 <proceedGluedValues+0x310>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01b      	beq.n	8003b7e <proceedGluedValues+0xae>
 8003b46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b4a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d914      	bls.n	8003b7e <proceedGluedValues+0xae>
 8003b54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <proceedGluedValues+0xae>
 8003b62:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <proceedGluedValues+0xae>
 8003b70:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003b74:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <proceedGluedValues+0xb2>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <proceedGluedValues+0xb4>
 8003b82:	2300      	movs	r3, #0
 8003b84:	b2d9      	uxtb	r1, r3
 8003b86:	4b97      	ldr	r3, [pc, #604]	; (8003de4 <proceedGluedValues+0x314>)
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	f240 13c9 	movw	r3, #457	; 0x1c9
 8003b8e:	4a96      	ldr	r2, [pc, #600]	; (8003de8 <proceedGluedValues+0x318>)
 8003b90:	4896      	ldr	r0, [pc, #600]	; (8003dec <proceedGluedValues+0x31c>)
 8003b92:	f001 fa87 	bl	80050a4 <__M_Error>
 8003b96:	2300      	movs	r3, #0
 8003b98:	f000 bd68 	b.w	800466c <proceedGluedValues+0xb9c>

    const reg inputMsgSize = (*size);
 8003b9c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ba0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    reg Wpos = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    reg Rpos = 0;
 8003bb2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003bb6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    void* ptr;

    const TYPEOF_STRUCT(EntityInfo, entities_count) entities_count = entityInfo.entities_count;
 8003bbe:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <proceedGluedValues+0x310>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    TYPEOF_STRUCT(EntityInfo, entities_count) entityNumber;
    TYPEOF_STRUCT(Entity, fields_count) fieldNumber;

    u8 cmd = inputData[Rpos++];
 8003bc6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003bca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	1c59      	adds	r1, r3, #1
 8003bd2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003bd6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8003bda:	6011      	str	r1, [r2, #0]
 8003bdc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003be0:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

    if(cmd == WRITE_SEVERAL_VALUES_GLUED) {
 8003bee:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003bf2:	2b07      	cmp	r3, #7
 8003bf4:	f040 8264 	bne.w	80040c0 <proceedGluedValues+0x5f0>
        const u8 writeRequestCnt = inputData[Rpos++];
 8003bf8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003bfc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	1c59      	adds	r1, r3, #1
 8003c04:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c08:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8003c0c:	6011      	str	r1, [r2, #0]
 8003c0e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c12:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        for(reg i = 0; i < writeRequestCnt; ++i) {
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003c26:	e207      	b.n	8004038 <proceedGluedValues+0x568>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize),
 8003c28:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3303      	adds	r3, #3
 8003c34:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d218      	bcs.n	8003c6e <proceedGluedValues+0x19e>
 8003c3c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3303      	adds	r3, #3
 8003c48:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	bf34      	ite	cc
 8003c50:	2301      	movcc	r3, #1
 8003c52:	2300      	movcs	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	4b65      	ldr	r3, [pc, #404]	; (8003df0 <proceedGluedValues+0x320>)
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003c60:	4a61      	ldr	r2, [pc, #388]	; (8003de8 <proceedGluedValues+0x318>)
 8003c62:	4864      	ldr	r0, [pc, #400]	; (8003df4 <proceedGluedValues+0x324>)
 8003c64:	f001 fa1e 	bl	80050a4 <__M_Error>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f000 bcff 	b.w	800466c <proceedGluedValues+0xb9c>
 8003c6e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c72:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    reg Rpos_internal = (*Rpos);
 8003c7c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003c8a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003c8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c92:	4413      	add	r3, r2
 8003c94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ca6:	f107 0318 	add.w	r3, r7, #24
 8003caa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    switch (n) {
 8003cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d013      	beq.n	8003cde <proceedGluedValues+0x20e>
 8003cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d106      	bne.n	8003ccc <proceedGluedValues+0x1fc>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e009      	b.n	8003ce0 <proceedGluedValues+0x210>
    default: memcpy(to, from, n); break;
 8003ccc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003cd0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8003cd4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8003cd8:	f004 fd8e 	bl	80087f8 <memcpy>
 8003cdc:	e000      	b.n	8003ce0 <proceedGluedValues+0x210>
    case 0: break;
 8003cde:	bf00      	nop
}
 8003ce0:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 8003ce2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003ce6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003cf2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003cf6:	601a      	str	r2, [r3, #0]
    return entityNumber;
 8003cf8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003cfc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d00:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8003d02:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d0a:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 8003d0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d10:	3302      	adds	r3, #2
 8003d12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003d16:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003d1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d1e:	4413      	add	r3, r2
 8003d20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	fieldNumber = *(inputData);
 8003d24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
    return fieldNumber;
 8003d2e:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	; 0xea
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 8003d32:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d36:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8003d3a:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 8003d3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d40:	3301      	adds	r3, #1
 8003d42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    (*Rpos) = Rpos_internal;
 8003d46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d4e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
                                  M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <proceedGluedValues+0x310>)
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            EntityField* const field = &entity->fields[fieldNumber];
 8003d6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d78:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	015b      	lsls	r3, r3, #5
 8003d80:	4413      	add	r3, r2
 8003d82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 8003d86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d8a:	891b      	ldrh	r3, [r3, #8]
 8003d8c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            const TYPEOF_STRUCT(EntityField, bitFlags) bitFlags             = field->bitFlags;
 8003d90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8003d9a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003da8:	429a      	cmp	r2, r3
 8003daa:	f240 8140 	bls.w	800402e <proceedGluedValues+0x55e>
 8003dae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003db2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	f240 8136 	bls.w	800402e <proceedGluedValues+0x55e>
                const reg typeLen = getMYCTypeLen(field->type);
 8003dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003dc6:	7e1b      	ldrb	r3, [r3, #24]
 8003dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    if(type < TYPE_ARRAY_LENGTH) {
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd0:	2b11      	cmp	r3, #17
 8003dd2:	d813      	bhi.n	8003dfc <proceedGluedValues+0x32c>
        return typeLengthMappingArray[type];
 8003dd4:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <proceedGluedValues+0x328>)
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dde:	e00e      	b.n	8003dfe <proceedGluedValues+0x32e>
 8003de0:	20000290 	.word	0x20000290
 8003de4:	0800e5e0 	.word	0x0800e5e0
 8003de8:	0800dcf4 	.word	0x0800dcf4
 8003dec:	0800e53c 	.word	0x0800e53c
 8003df0:	0800e660 	.word	0x0800e660
 8003df4:	0800e61c 	.word	0x0800e61c
 8003df8:	0800f26c 	.word	0x0800f26c
    return 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                ENTITY_DBG_ASSERT_BUF(((Rpos + typeLen) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8003e02:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003e06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e10:	4413      	add	r3, r2
 8003e12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d21a      	bcs.n	8003e50 <proceedGluedValues+0x380>
 8003e1a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003e1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e28:	4413      	add	r3, r2
 8003e2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	bf34      	ite	cc
 8003e32:	2301      	movcc	r3, #1
 8003e34:	2300      	movcs	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4bb5      	ldr	r3, [pc, #724]	; (8004110 <proceedGluedValues+0x640>)
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 8003e42:	4ab4      	ldr	r2, [pc, #720]	; (8004114 <proceedGluedValues+0x644>)
 8003e44:	48b4      	ldr	r0, [pc, #720]	; (8004118 <proceedGluedValues+0x648>)
 8003e46:	f001 f92d 	bl	80050a4 <__M_Error>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f000 bc0e 	b.w	800466c <proceedGluedValues+0xb9c>

                if((bitFlags & ENTITY_READ_ONLY_MSK) == 0) {
 8003e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f040 80db 	bne.w	8004014 <proceedGluedValues+0x544>

                    ptr = (entity->pointer + field->shift);
 8003e5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    proceedWriteEntity(bitFlags, ptr, &inputData[Rpos], typeLen);
 8003e70:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003e74:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003e7e:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	4413      	add	r3, r2
 8003e86:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003e8a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8003e8e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003e92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d023      	beq.n	8003ef6 <proceedGluedValues+0x426>
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01d      	beq.n	8003ef6 <proceedGluedValues+0x426>
                                        volatile reg* reg_ptr_to        = (volatile reg*) (* REG_TYPE_DC(ptr));
 8003eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                                        volatile reg* reg_ptr_from      = (volatile reg*) (  inputData);
 8003ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                                        if(reg_ptr_to) {
 8003ecc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8088 	beq.w	8003fe6 <proceedGluedValues+0x516>
 8003ed6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    MY_CTYPE_REG_CPY(to, from);
 8003ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003ef4:	e077      	b.n	8003fe6 <proceedGluedValues+0x516>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 8003ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d016      	beq.n	8003f30 <proceedGluedValues+0x460>
                                        volatile reg* reg_ptr_to        = ((volatile reg*)  (ptr));
 8003f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                                        volatile reg* reg_ptr_from      = ((volatile reg*)  (inputData));
 8003f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    MY_CTYPE_REG_CPY(to, from);
 8003f22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	e05b      	b.n	8003fe8 <proceedGluedValues+0x518>
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 8003f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02e      	beq.n	8003f9a <proceedGluedValues+0x4ca>
                                        u8* reg_ptr_to = (u8 *)(* REG_TYPE_DC(ptr));
 8003f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                                        if(reg_ptr_to) {
 8003f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04c      	beq.n	8003fe8 <proceedGluedValues+0x518>
 8003f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    switch (n) {
 8003f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d013      	beq.n	8003f96 <proceedGluedValues+0x4c6>
 8003f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d106      	bne.n	8003f84 <proceedGluedValues+0x4b4>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003f76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	e009      	b.n	8003f98 <proceedGluedValues+0x4c8>
    default: memcpy(to, from, n); break;
 8003f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f88:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003f8c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003f90:	f004 fc32 	bl	80087f8 <memcpy>
 8003f94:	e000      	b.n	8003f98 <proceedGluedValues+0x4c8>
    case 0: break;
 8003f96:	bf00      	nop
}
 8003f98:	e026      	b.n	8003fe8 <proceedGluedValues+0x518>
 8003f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    switch (n) {
 8003fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d013      	beq.n	8003fe2 <proceedGluedValues+0x512>
 8003fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d106      	bne.n	8003fd0 <proceedGluedValues+0x500>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 8003fc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	e009      	b.n	8003fe4 <proceedGluedValues+0x514>
    default: memcpy(to, from, n); break;
 8003fd0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003fd4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003fd8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003fdc:	f004 fc0c 	bl	80087f8 <memcpy>
 8003fe0:	e000      	b.n	8003fe4 <proceedGluedValues+0x514>
    case 0: break;
 8003fe2:	bf00      	nop
}
 8003fe4:	e000      	b.n	8003fe8 <proceedGluedValues+0x518>
    								if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8003fe6:	bf00      	nop
}
 8003fe8:	bf00      	nop


#ifdef USE_ENTITY_WRITE_CALLBACK
                    const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->wrCallback.entityCallback;
 8003fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 8003ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <proceedGluedValues+0x544>
                        __entityCallback(entity, field, ptr, field->wrCallback.context);
 8003ffc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8004006:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800400a:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800400e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004012:	47a0      	blx	r4
                    }
#endif /* USE_ENTITY_WRITE_CALLBACK */

                }

                Rpos += typeLen;
 8004014:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004018:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004022:	441a      	add	r2, r3
 8004024:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004028:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800402c:	601a      	str	r2, [r3, #0]
        for(reg i = 0; i < writeRequestCnt; ++i) {
 800402e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004032:	3301      	adds	r3, #1
 8004034:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004038:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800403c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004040:	429a      	cmp	r2, r3
 8004042:	f4ff adf1 	bcc.w	8003c28 <proceedGluedValues+0x158>
            }
        }

        ENTITY_DBG_ASSERT_BUF(((Rpos + 1) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 8004046:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800404a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004056:	429a      	cmp	r2, r3
 8004058:	d217      	bcs.n	800408a <proceedGluedValues+0x5ba>
 800405a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800405e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800406a:	429a      	cmp	r2, r3
 800406c:	bf34      	ite	cc
 800406e:	2301      	movcc	r3, #1
 8004070:	2300      	movcs	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4619      	mov	r1, r3
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <proceedGluedValues+0x640>)
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	f240 13fb 	movw	r3, #507	; 0x1fb
 800407e:	4a25      	ldr	r2, [pc, #148]	; (8004114 <proceedGluedValues+0x644>)
 8004080:	4826      	ldr	r0, [pc, #152]	; (800411c <proceedGluedValues+0x64c>)
 8004082:	f001 f80f 	bl	80050a4 <__M_Error>
 8004086:	2300      	movs	r3, #0
 8004088:	e2f0      	b.n	800466c <proceedGluedValues+0xb9c>
        cmd = inputData[Rpos];
 800408a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800408e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004098:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        if(cmd == SEVERAL_VALUES_GLUED_END) {
 80040a6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	d108      	bne.n	80040c0 <proceedGluedValues+0x5f0>
            (*size) = 0;
 80040ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
            return ENTITY_OK;
 80040bc:	2301      	movs	r3, #1
 80040be:	e2d5      	b.n	800466c <proceedGluedValues+0xb9c>
        }
    }

    if(cmd == READ_SEVERAL_VALUES_GLUED) {
 80040c0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	f040 82c8 	bne.w	800465a <proceedGluedValues+0xb8a>
        ENTITY_DBG_ASSERT_BUF(((Rpos + 2) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field read size more than buffer");
 80040ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3302      	adds	r3, #2
 80040d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040da:	429a      	cmp	r2, r3
 80040dc:	d222      	bcs.n	8004124 <proceedGluedValues+0x654>
 80040de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80040e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3302      	adds	r3, #2
 80040ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040ee:	429a      	cmp	r2, r3
 80040f0:	bf34      	ite	cc
 80040f2:	2301      	movcc	r3, #1
 80040f4:	2300      	movcs	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <proceedGluedValues+0x640>)
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f240 2305 	movw	r3, #517	; 0x205
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <proceedGluedValues+0x644>)
 8004104:	4806      	ldr	r0, [pc, #24]	; (8004120 <proceedGluedValues+0x650>)
 8004106:	f000 ffcd 	bl	80050a4 <__M_Error>
 800410a:	2300      	movs	r3, #0
 800410c:	e2ae      	b.n	800466c <proceedGluedValues+0xb9c>
 800410e:	bf00      	nop
 8004110:	0800e69c 	.word	0x0800e69c
 8004114:	0800dcf4 	.word	0x0800dcf4
 8004118:	0800e4dc 	.word	0x0800e4dc
 800411c:	0800e6d4 	.word	0x0800e6d4
 8004120:	0800e6f0 	.word	0x0800e6f0

        const u8 readRequestCnt = inputData[Rpos++];
 8004124:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004128:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004134:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800413e:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	4413      	add	r3, r2
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        outputData[Wpos++] = READ_SEVERAL_VALUES_GLUED;
 800414c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004156:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800415a:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4413      	add	r3, r2
 8004162:	2206      	movs	r2, #6
 8004164:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = readRequestCnt;
 8004166:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004170:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004174:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	4413      	add	r3, r2
 800417c:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8004180:	701a      	strb	r2, [r3, #0]
        outputData[Wpos++] = inputData[Rpos++];
 8004182:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004186:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1c59      	adds	r1, r3, #1
 800418e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004192:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8004196:	6011      	str	r1, [r2, #0]
 8004198:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800419c:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	441a      	add	r2, r3
 80041a4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80041a8:	1c59      	adds	r1, r3, #1
 80041aa:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 80041ae:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80041b2:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 80041b6:	6809      	ldr	r1, [r1, #0]
 80041b8:	440b      	add	r3, r1
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	701a      	strb	r2, [r3, #0]

        for(reg i = 0; i < readRequestCnt; ++i) {
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80041c4:	e242      	b.n	800464c <proceedGluedValues+0xb7c>
            ENTITY_DBG_ASSERT_BUF(((Rpos + (ENTITIES_SIZEOF + ENTITY_FIELD_SIZEOF)) > inputMsgSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field request size more than buffer");
 80041c6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3303      	adds	r3, #3
 80041d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d217      	bcs.n	800420a <proceedGluedValues+0x73a>
 80041da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3303      	adds	r3, #3
 80041e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80041ea:	429a      	cmp	r2, r3
 80041ec:	bf34      	ite	cc
 80041ee:	2301      	movcc	r3, #1
 80041f0:	2300      	movcs	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	4619      	mov	r1, r3
 80041f6:	4bae      	ldr	r3, [pc, #696]	; (80044b0 <proceedGluedValues+0x9e0>)
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	f240 230d 	movw	r3, #525	; 0x20d
 80041fe:	4aad      	ldr	r2, [pc, #692]	; (80044b4 <proceedGluedValues+0x9e4>)
 8004200:	48ad      	ldr	r0, [pc, #692]	; (80044b8 <proceedGluedValues+0x9e8>)
 8004202:	f000 ff4f 	bl	80050a4 <__M_Error>
 8004206:	2300      	movs	r3, #0
 8004208:	e230      	b.n	800466c <proceedGluedValues+0xb9c>
 800420a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800420e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    reg Rpos_internal = (*Rpos);
 8004218:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800421c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 8004226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800422a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800422e:	4413      	add	r3, r2
 8004230:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004234:	2302      	movs	r3, #2
 8004236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800423a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800423e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    switch (n) {
 800424a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800424e:	2b00      	cmp	r3, #0
 8004250:	d013      	beq.n	800427a <proceedGluedValues+0x7aa>
 8004252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004256:	2b01      	cmp	r3, #1
 8004258:	d106      	bne.n	8004268 <proceedGluedValues+0x798>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800425a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e009      	b.n	800427c <proceedGluedValues+0x7ac>
    default: memcpy(to, from, n); break;
 8004268:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800426c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004270:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004274:	f004 fac0 	bl	80087f8 <memcpy>
 8004278:	e000      	b.n	800427c <proceedGluedValues+0x7ac>
    case 0: break;
 800427a:	bf00      	nop
}
 800427c:	bf00      	nop
    entityNumber &= 0x0000FFFFUL;
 800427e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004282:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b29a      	uxth	r2, r3
 800428a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800428e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004292:	601a      	str	r2, [r3, #0]
    return entityNumber;
 8004294:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004298:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800429c:	681a      	ldr	r2, [r3, #0]
    (*entityNumber) = readEntityNumberFromBuf(&inputData[Rpos_internal]);
 800429e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042a6:	601a      	str	r2, [r3, #0]
    Rpos_internal += ENTITIES_SIZEOF;
 80042a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ac:	3302      	adds	r3, #2
 80042ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80042b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ba:	4413      	add	r3, r2
 80042bc:	67fb      	str	r3, [r7, #124]	; 0x7c
	fieldNumber = *(inputData);
 80042be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    return fieldNumber;
 80042c6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
    (*fieldNumber) = readFieldNumberFromBuf(&inputData[Rpos_internal]);
 80042ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042ce:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80042d2:	801a      	strh	r2, [r3, #0]
    Rpos_internal += ENTITY_FIELD_SIZEOF;
 80042d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d8:	3301      	adds	r3, #1
 80042da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    (*Rpos) = Rpos_internal;
 80042de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80042e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042ea:	601a      	str	r2, [r3, #0]
}
 80042ec:	bf00      	nop

            readEntityFieldNumbersfromBuf(&entityNumber, &fieldNumber, inputData, &Rpos);

            Entity* const entity = entityInfo.entities[entityNumber];
 80042ee:	4b73      	ldr	r3, [pc, #460]	; (80044bc <proceedGluedValues+0x9ec>)
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80042f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            EntityField* const field = &entity->fields[fieldNumber];
 8004306:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004310:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	015b      	lsls	r3, r3, #5
 8004318:	4413      	add	r3, r2
 800431a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
            const TYPEOF_STRUCT(Entity, fields_count) fields_count          = entity->fields_count;
 800431e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004322:	891b      	ldrh	r3, [r3, #8]
 8004324:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 8004328:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800432c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004336:	429a      	cmp	r2, r3
 8004338:	f240 8181 	bls.w	800463e <proceedGluedValues+0xb6e>
 800433c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004340:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 800434a:	429a      	cmp	r2, r3
 800434c:	f240 8177 	bls.w	800463e <proceedGluedValues+0xb6e>
                const reg typeLen = getMYCTypeLen(field->type);
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004354:	7e1b      	ldrb	r3, [r3, #24]
 8004356:	677b      	str	r3, [r7, #116]	; 0x74
    if(type < TYPE_ARRAY_LENGTH) {
 8004358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435a:	2b11      	cmp	r3, #17
 800435c:	d804      	bhi.n	8004368 <proceedGluedValues+0x898>
        return typeLengthMappingArray[type];
 800435e:	4a58      	ldr	r2, [pc, #352]	; (80044c0 <proceedGluedValues+0x9f0>)
 8004360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004366:	e000      	b.n	800436a <proceedGluedValues+0x89a>
    return 0;
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

                ENTITY_DBG_ASSERT_BUF(((Wpos + typeLen) > maxOutBufferSize), M_EMPTY, return ENTITY_ERROR, "proceedGluedValues: field write size more than outBuffer");
 800436e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004376:	4413      	add	r3, r2
 8004378:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800437c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d219      	bcs.n	80043ba <proceedGluedValues+0x8ea>
 8004386:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800438a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438e:	4413      	add	r3, r2
 8004390:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004394:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	bf34      	ite	cc
 800439e:	2301      	movcc	r3, #1
 80043a0:	2300      	movcs	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	4619      	mov	r1, r3
 80043a6:	4b47      	ldr	r3, [pc, #284]	; (80044c4 <proceedGluedValues+0x9f4>)
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	f44f 7306 	mov.w	r3, #536	; 0x218
 80043ae:	4a41      	ldr	r2, [pc, #260]	; (80044b4 <proceedGluedValues+0x9e4>)
 80043b0:	4845      	ldr	r0, [pc, #276]	; (80044c8 <proceedGluedValues+0x9f8>)
 80043b2:	f000 fe77 	bl	80050a4 <__M_Error>
 80043b6:	2300      	movs	r3, #0
 80043b8:	e158      	b.n	800466c <proceedGluedValues+0xb9c>

                ptr = (entity->pointer + field->shift);
 80043ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                proceedReadEntity(field->bitFlags, ptr, &outputData[Wpos], typeLen);
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80043d6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80043e0:	440b      	add	r3, r1
 80043e2:	673a      	str	r2, [r7, #112]	; 0x70
 80043e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80043e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f0:	667b      	str	r3, [r7, #100]	; 0x64
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 80043f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d027      	beq.n	800444c <proceedGluedValues+0x97c>
 80043fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	d022      	beq.n	800444c <proceedGluedValues+0x97c>
                                        volatile reg* reg_ptr_from = (volatile reg*) (* REG_TYPE_DC(ptr));
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
                                        volatile reg* reg_ptr_to   = (volatile reg*) (  outputData);
 800440c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800440e:	65fb      	str	r3, [r7, #92]	; 0x5c
                                        if(reg_ptr_from) {
 8004410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80f4 	beq.w	8004600 <proceedGluedValues+0xb30>
 8004418:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800441c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800442c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800442e:	601a      	str	r2, [r3, #0]
    MY_CTYPE_REG_CPY(to, from);
 8004430:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004434:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	601a      	str	r2, [r3, #0]
}
 8004448:	bf00      	nop
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 800444a:	e0d9      	b.n	8004600 <proceedGluedValues+0xb30>
                                    if((bitFlags) & ENTITY_REGISTER_MSK) {
 800444c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d03a      	beq.n	80044cc <proceedGluedValues+0x9fc>
                                        volatile reg* reg_ptr_from = ((volatile reg*) (ptr));
 8004456:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800445a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800445e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004460:	601a      	str	r2, [r3, #0]
                                        volatile reg* reg_ptr_to   = ((volatile reg*) (outputData));
 8004462:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800446a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004472:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004476:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800447a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004486:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800448a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800448e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	601a      	str	r2, [r3, #0]
    MY_CTYPE_REG_CPY(to, from);
 8004496:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800449a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80044a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	601a      	str	r2, [r3, #0]
}
 80044ae:	e0a8      	b.n	8004602 <proceedGluedValues+0xb32>
 80044b0:	0800e70c 	.word	0x0800e70c
 80044b4:	0800dcf4 	.word	0x0800dcf4
 80044b8:	0800e61c 	.word	0x0800e61c
 80044bc:	20000290 	.word	0x20000290
 80044c0:	0800f26c 	.word	0x0800f26c
 80044c4:	0800e660 	.word	0x0800e660
 80044c8:	0800e344 	.word	0x0800e344
                                    if((bitFlags) & ENTITY_POINTER_MSK) {
 80044cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d053      	beq.n	800457e <proceedGluedValues+0xaae>
                                        u8* reg_ptr_from = (u8 *)(* REG_TYPE_DC(ptr));
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80044de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044e2:	601a      	str	r2, [r3, #0]
                                        if(reg_ptr_from) {
 80044e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80044e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8087 	beq.w	8004602 <proceedGluedValues+0xb32>
 80044f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80044f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80044fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004504:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004508:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800450c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004518:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800451c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800451e:	601a      	str	r2, [r3, #0]
    switch (n) {
 8004520:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004524:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d025      	beq.n	800457a <proceedGluedValues+0xaaa>
 800452e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004532:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d10c      	bne.n	8004556 <proceedGluedValues+0xa86>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 800453c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004540:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800454c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	e012      	b.n	800457c <proceedGluedValues+0xaac>
    default: memcpy(to, from, n); break;
 8004556:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800455a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800455e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004562:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8004566:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800456a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	6809      	ldr	r1, [r1, #0]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	f004 f940 	bl	80087f8 <memcpy>
 8004578:	e000      	b.n	800457c <proceedGluedValues+0xaac>
    case 0: break;
 800457a:	bf00      	nop
}
 800457c:	e041      	b.n	8004602 <proceedGluedValues+0xb32>
 800457e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004582:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004586:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800458e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004592:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800459a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800459e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045a0:	601a      	str	r2, [r3, #0]
    switch (n) {
 80045a2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d025      	beq.n	80045fc <proceedGluedValues+0xb2c>
 80045b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10c      	bne.n	80045d8 <proceedGluedValues+0xb08>
    case 1: *(u8 *)to = *(const u8 *)from; break;
 80045be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e012      	b.n	80045fe <proceedGluedValues+0xb2e>
    default: memcpy(to, from, n); break;
 80045d8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045dc:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 80045e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045e4:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 80045e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80045ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	6809      	ldr	r1, [r1, #0]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	f004 f8ff 	bl	80087f8 <memcpy>
 80045fa:	e000      	b.n	80045fe <proceedGluedValues+0xb2e>
    case 0: break;
 80045fc:	bf00      	nop
}
 80045fe:	e000      	b.n	8004602 <proceedGluedValues+0xb32>
                                    if((bitFlags & ENTITY_POINTER_MSK) && (bitFlags & ENTITY_REGISTER_MSK)) {
 8004600:	bf00      	nop
}
 8004602:	bf00      	nop


#ifdef USE_ENTITY_READ_CALLBACK
                const TYPEOF_STRUCT(entityCallbackContainer, entityCallback) __entityCallback = field->rdCallback.entityCallback;
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                if(__entityCallback != NULLPTR(TYPEOF_STRUCT(entityCallbackContainer, entityCallback))) {
 800460e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <proceedGluedValues+0xb5e>
                    __entityCallback(entity, field, ptr, field->rdCallback.context);
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8004620:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004624:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004628:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800462c:	47a0      	blx	r4
                }
#endif /* USE_ENTITY_READ_CALLBACK */

                Wpos += typeLen;
 800462e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004636:	4413      	add	r3, r2
 8004638:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if((entityNumber < entities_count) && (fieldNumber < fields_count)) {
 800463c:	e001      	b.n	8004642 <proceedGluedValues+0xb72>
            } else {
                return ENTITY_ERROR;
 800463e:	2300      	movs	r3, #0
 8004640:	e014      	b.n	800466c <proceedGluedValues+0xb9c>
        for(reg i = 0; i < readRequestCnt; ++i) {
 8004642:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004646:	3301      	adds	r3, #1
 8004648:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800464c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004650:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004654:	429a      	cmp	r2, r3
 8004656:	f4ff adb6 	bcc.w	80041c6 <proceedGluedValues+0x6f6>
            }
        }
    }

    (*size) = Wpos;
 800465a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800465e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004668:	601a      	str	r2, [r3, #0]
    UNUSED(maxOutBufferSize);
    return ENTITY_OK;
 800466a:	2301      	movs	r3, #1
}
 800466c:	4618      	mov	r0, r3
 800466e:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}
 8004676:	bf00      	nop

08004678 <rawParser_dma_init>:
    }
    return self;
}

int rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af02      	add	r7, sp, #8
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: No input data valid ");
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <rawParser_dma_init+0x32>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4619      	mov	r1, r3
 8004698:	4b23      	ldr	r3, [pc, #140]	; (8004728 <rawParser_dma_init+0xb0>)
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2348      	movs	r3, #72	; 0x48
 800469e:	4a23      	ldr	r2, [pc, #140]	; (800472c <rawParser_dma_init+0xb4>)
 80046a0:	4823      	ldr	r0, [pc, #140]	; (8004730 <rawParser_dma_init+0xb8>)
 80046a2:	f000 fcff 	bl	80050a4 <__M_Error>
 80046a6:	2300      	movs	r3, #0
 80046a8:	e03a      	b.n	8004720 <rawParser_dma_init+0xa8>

    self->m_startByte = packStart;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	701a      	strb	r2, [r3, #0]
    self->m_receivePackLen = 0;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
    self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	22ff      	movs	r2, #255	; 0xff
 80046ba:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	22ff      	movs	r2, #255	; 0xff
 80046c2:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

    self->m_triggerSB = 0;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
    self->m_receivePos = 0;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    self->m_receiveReadPos = 0;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    self->m_receiveHandlePos = 0;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    self->TX.data = self->m_sendBuffer;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#else
    self->TX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    self->TX.size = 0;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
    self->RX.data = self->m_receiveFrameBuffer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 7202 	add.w	r2, r3, #520	; 0x208
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
#else
    self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

    self->RX.size = 0;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

    self->uniRXPosition = 0;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return D_RAW_P_OK;
 800471e:	2301      	movs	r3, #1
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	0800e7d0 	.word	0x0800e7d0
 800472c:	0800e744 	.word	0x0800e744
 8004730:	0800e780 	.word	0x0800e780

08004734 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af04      	add	r7, sp, #16
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
 8004740:	4613      	mov	r3, r2
 8004742:	70bb      	strb	r3, [r7, #2]
    if (newFrame) {
 8004744:	78bb      	ldrb	r3, [r7, #2]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
    	//M_Assert_Warning(self->receiveState < RAW_P_DMA_RECEIVE_CRC_0 , M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: last packet error!!!");

    	self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	22ff      	movs	r2, #255	; 0xff
 800474e:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

        self->m_receiveHandlePos = 0;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
    }

    switch(self->receiveState) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3618 	ldrb.w	r3, [r3, #1560]	; 0x618
 8004768:	2b0d      	cmp	r3, #13
 800476a:	f200 80d1 	bhi.w	8004910 <RawParser_dma_proceedByte+0x1dc>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <RawParser_dma_proceedByte+0x40>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	080047ad 	.word	0x080047ad
 8004778:	08004911 	.word	0x08004911
 800477c:	08004911 	.word	0x08004911
 8004780:	0800483b 	.word	0x0800483b
 8004784:	0800488d 	.word	0x0800488d
 8004788:	08004911 	.word	0x08004911
 800478c:	08004911 	.word	0x08004911
 8004790:	08004911 	.word	0x08004911
 8004794:	08004911 	.word	0x08004911
 8004798:	08004911 	.word	0x08004911
 800479c:	08004911 	.word	0x08004911
 80047a0:	08004911 	.word	0x08004911
 80047a4:	080048d5 	.word	0x080048d5
 80047a8:	080048f9 	.word	0x080048f9

    case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fa92 	bl	8001ce0 <fast_crc8_maxim_byte>
 80047bc:	4603      	mov	r3, r0
 80047be:	461a      	mov	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
        if(RECEIVE_EXTENDED_LEN_CMD == ch) {
            self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
        } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

            const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d902      	bls.n	80047d6 <RawParser_dma_proceedByte+0xa2>
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	e000      	b.n	80047d8 <RawParser_dma_proceedByte+0xa4>
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6053      	str	r3, [r2, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60bb      	str	r3, [r7, #8]
            self->m_receiveHandlePos = 0;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

            M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f8:	d803      	bhi.n	8004802 <RawParser_dma_proceedByte+0xce>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f040 8089 	bne.w	8004914 <RawParser_dma_proceedByte+0x1e0>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004808:	d802      	bhi.n	8004810 <RawParser_dma_proceedByte+0xdc>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <RawParser_dma_proceedByte+0xe0>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <RawParser_dma_proceedByte+0xe2>
 8004814:	2300      	movs	r3, #0
 8004816:	b2d9      	uxtb	r1, r3
 8004818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800481c:	9302      	str	r3, [sp, #8]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	4b3f      	ldr	r3, [pc, #252]	; (8004920 <RawParser_dma_proceedByte+0x1ec>)
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	23cd      	movs	r3, #205	; 0xcd
 8004828:	4a3e      	ldr	r2, [pc, #248]	; (8004924 <RawParser_dma_proceedByte+0x1f0>)
 800482a:	483f      	ldr	r0, [pc, #252]	; (8004928 <RawParser_dma_proceedByte+0x1f4>)
 800482c:	f000 fc58 	bl	80050e0 <__M_Warning>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	220c      	movs	r2, #12
 8004834:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
        }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        break;}
 8004838:	e06c      	b.n	8004914 <RawParser_dma_proceedByte+0x1e0>

        break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

    case RAW_P_DMA_RECEIVE_DATA: {
        reg rx_pos = self->m_receiveHandlePos;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 8004840:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
        self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f7fd fa47 	bl	8001ce0 <fast_crc8_maxim_byte>
 8004852:	4603      	mov	r3, r0
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
#endif /* D_RAW_P_CRC_ENA */

        self->RX.data[rx_pos] = ch;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 2624 	ldr.w	r2, [r3, #1572]	; 0x624
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	701a      	strb	r2, [r3, #0]
        ++rx_pos;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]

        if (rx_pos == self->m_receivePackLen) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	429a      	cmp	r2, r3
 8004878:	d103      	bne.n	8004882 <RawParser_dma_proceedByte+0x14e>

#ifdef D_RAW_P_CRC_ENA
            D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
            self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
            self->RX.size = self->m_receivePackLen;
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
        }

        self->m_receiveHandlePos = rx_pos;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        break;}
 800488a:	e044      	b.n	8004916 <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

        if(self->m_receiveCalcCRC == ch) {
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	429a      	cmp	r2, r3
 8004896:	d109      	bne.n	80048ac <RawParser_dma_proceedByte+0x178>
            self->RX.size = self->m_receivePackLen;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
            self->receiveState = RAW_P_DMA_RECEIVE_OK;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	220d      	movs	r2, #13
 80048a6:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
        self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

        break;}
 80048aa:	e034      	b.n	8004916 <RawParser_dma_proceedByte+0x1e2>
            M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive CRC8 error, rx_crc: %d, calc_crc: %d", ch, self->m_receiveCalcCRC);
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	f892 2608 	ldrb.w	r2, [r2, #1544]	; 0x608
 80048b4:	9202      	str	r2, [sp, #8]
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	4b1c      	ldr	r3, [pc, #112]	; (800492c <RawParser_dma_proceedByte+0x1f8>)
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	f240 1323 	movw	r3, #291	; 0x123
 80048c0:	4a18      	ldr	r2, [pc, #96]	; (8004924 <RawParser_dma_proceedByte+0x1f0>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	481a      	ldr	r0, [pc, #104]	; (8004930 <RawParser_dma_proceedByte+0x1fc>)
 80048c6:	f000 fc0b 	bl	80050e0 <__M_Warning>
            self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	220c      	movs	r2, #12
 80048ce:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
        break;}
 80048d2:	e020      	b.n	8004916 <RawParser_dma_proceedByte+0x1e2>

#endif /* D_RAW_P_CRC_ENA */


    case RAW_P_DMA_RECEIVE_ERR:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: Receive error, byte: %d, rx_len: %d, max_rxlen: %d", ch, self->m_receivePackLen, D_RAW_P_RX_BUF_SIZE);
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6852      	ldr	r2, [r2, #4]
 80048da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048de:	9103      	str	r1, [sp, #12]
 80048e0:	9202      	str	r2, [sp, #8]
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <RawParser_dma_proceedByte+0x200>)
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80048ec:	4a0d      	ldr	r2, [pc, #52]	; (8004924 <RawParser_dma_proceedByte+0x1f0>)
 80048ee:	2101      	movs	r1, #1
 80048f0:	480f      	ldr	r0, [pc, #60]	; (8004930 <RawParser_dma_proceedByte+0x1fc>)
 80048f2:	f000 fbf5 	bl	80050e0 <__M_Warning>
        break;
 80048f6:	e00e      	b.n	8004916 <RawParser_dma_proceedByte+0x1e2>

    case RAW_P_DMA_RECEIVE_OK:
        M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: LAST Received OK, byte: %d is not received because no SB", ch);
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <RawParser_dma_proceedByte+0x204>)
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004904:	4a07      	ldr	r2, [pc, #28]	; (8004924 <RawParser_dma_proceedByte+0x1f0>)
 8004906:	2101      	movs	r1, #1
 8004908:	4809      	ldr	r0, [pc, #36]	; (8004930 <RawParser_dma_proceedByte+0x1fc>)
 800490a:	f000 fbe9 	bl	80050e0 <__M_Warning>
        break;
 800490e:	e002      	b.n	8004916 <RawParser_dma_proceedByte+0x1e2>

    default:
        break;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <RawParser_dma_proceedByte+0x1e2>
        break;}
 8004914:	bf00      	nop
    }
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	0800e87c 	.word	0x0800e87c
 8004924:	0800e744 	.word	0x0800e744
 8004928:	0800e84c 	.word	0x0800e84c
 800492c:	0800e8d8 	.word	0x0800e8d8
 8004930:	0800e8cc 	.word	0x0800e8cc
 8004934:	0800e920 	.word	0x0800e920
 8004938:	0800e970 	.word	0x0800e970

0800493c <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8
 8004942:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid input");
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d110      	bne.n	800496c <RawParser_dma_proceed+0x30>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	4619      	mov	r1, r3
 8004958:	4b33      	ldr	r3, [pc, #204]	; (8004a28 <RawParser_dma_proceed+0xec>)
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8004960:	4a32      	ldr	r2, [pc, #200]	; (8004a2c <RawParser_dma_proceed+0xf0>)
 8004962:	4833      	ldr	r0, [pc, #204]	; (8004a30 <RawParser_dma_proceed+0xf4>)
 8004964:	f000 fb9e 	bl	80050a4 <__M_Error>
 8004968:	2300      	movs	r3, #0
 800496a:	e059      	b.n	8004a20 <RawParser_dma_proceed+0xe4>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8004972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004976:	613b      	str	r3, [r7, #16]
            reg   receiveReadPos      = self->m_receiveReadPos    & (D_RAW_P_RX_BUF_SIZE - 1U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	617b      	str	r3, [r7, #20]
    self->RX.size = 0;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628

//    if(receivePos_saved == receiveReadPos) { // may be needed
//        return &self->RX;
//    }

    while (receivePos_saved != receiveReadPos) {
 800498c:	e03b      	b.n	8004a06 <RawParser_dma_proceed+0xca>

        const u8 ch = self->m_receiveBuffer[receiveReadPos];
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	4413      	add	r3, r2
 8004994:	3308      	adds	r3, #8
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	73fb      	strb	r3, [r7, #15]

        if (self->m_triggerSB) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 360a 	ldrb.w	r3, [r3, #1546]	; 0x60a
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d016      	beq.n	80049d2 <RawParser_dma_proceed+0x96>
            if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d106      	bne.n	80049bc <RawParser_dma_proceed+0x80>
                RawParser_dma_proceedByte(self, ch, 0);
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2200      	movs	r2, #0
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff febd 	bl	8004734 <RawParser_dma_proceedByte>
 80049ba:	e005      	b.n	80049c8 <RawParser_dma_proceed+0x8c>
            } else { //{SB}{!SB} -> {SB} and newframe
                RawParser_dma_proceedByte(self, ch, 1);
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2201      	movs	r2, #1
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff feb6 	bl	8004734 <RawParser_dma_proceedByte>
            }
            self->m_triggerSB = 0;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 80049d0:	e00f      	b.n	80049f2 <RawParser_dma_proceed+0xb6>
        } else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d104      	bne.n	80049e6 <RawParser_dma_proceed+0xaa>
            self->m_triggerSB = 1;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 80049e4:	e005      	b.n	80049f2 <RawParser_dma_proceed+0xb6>
        } else { //{!SB}{!SB} -> {!SB}
            RawParser_dma_proceedByte(self, ch, 0);
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2200      	movs	r2, #0
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff fea1 	bl	8004734 <RawParser_dma_proceedByte>
        }

        receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	3301      	adds	r3, #1
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	617b      	str	r3, [r7, #20]

        if(self->RX.size != 0) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <RawParser_dma_proceed+0xd4>
    while (receivePos_saved != receiveReadPos) {
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d1bf      	bne.n	800498e <RawParser_dma_proceed+0x52>
 8004a0e:	e000      	b.n	8004a12 <RawParser_dma_proceed+0xd6>
#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
            /* Now decode -- encoded codeword size must be passed */
            rscode_decode(&self->rs_ecc, self->RX.data, self->RX.size);
            self->RX.size -= RSCODE_NPAR;
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */
            break;
 8004a10:	bf00      	nop
        }
    }

    self->m_receiveReadPos = receiveReadPos;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    return &self->RX;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f203 6324 	addw	r3, r3, #1572	; 0x624
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	0800e9e8 	.word	0x0800e9e8
 8004a2c:	0800e744 	.word	0x0800e744
 8004a30:	0800e9c4 	.word	0x0800e9c4

08004a34 <RawParser_dma_shieldFrame>:

// slow shield functions (slow & more copy)-----------------------------------------------------------------------------------------
RawParser_Frame_t* RawParser_dma_shieldFrame(RawParser_dma_t* const self, const u8* data, reg len)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	; 0x30
 8004a38:	af04      	add	r7, sp, #16
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_shieldFrame: No valid input");
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d110      	bne.n	8004a68 <RawParser_dma_shieldFrame+0x34>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	4619      	mov	r1, r3
 8004a54:	4b57      	ldr	r3, [pc, #348]	; (8004bb4 <RawParser_dma_shieldFrame+0x180>)
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 8004a5c:	4a56      	ldr	r2, [pc, #344]	; (8004bb8 <RawParser_dma_shieldFrame+0x184>)
 8004a5e:	4857      	ldr	r0, [pc, #348]	; (8004bbc <RawParser_dma_shieldFrame+0x188>)
 8004a60:	f000 fb20 	bl	80050a4 <__M_Error>
 8004a64:	2300      	movs	r3, #0
 8004a66:	e0a1      	b.n	8004bac <RawParser_dma_shieldFrame+0x178>
    M_Assert_Break((data == (u8*)NULL) || len == 0, M_EMPTY, {
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <RawParser_dma_shieldFrame+0x40>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d119      	bne.n	8004aa8 <RawParser_dma_shieldFrame+0x74>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <RawParser_dma_shieldFrame+0x4c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <RawParser_dma_shieldFrame+0x50>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <RawParser_dma_shieldFrame+0x52>
 8004a84:	2300      	movs	r3, #0
 8004a86:	b2d9      	uxtb	r1, r3
 8004a88:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <RawParser_dma_shieldFrame+0x180>)
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	f240 13d3 	movw	r3, #467	; 0x1d3
 8004a90:	4a49      	ldr	r2, [pc, #292]	; (8004bb8 <RawParser_dma_shieldFrame+0x184>)
 8004a92:	484b      	ldr	r0, [pc, #300]	; (8004bc0 <RawParser_dma_shieldFrame+0x18c>)
 8004a94:	f000 fb06 	bl	80050a4 <__M_Error>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8004aa6:	e081      	b.n	8004bac <RawParser_dma_shieldFrame+0x178>

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
    RawParser_dma_startTransmittPacket(self, (len + RSCODE_NPAR));
    rs_encode_data_onlyParity(&self->rs_ecc, data, len);
#else
    RawParser_dma_startTransmittPacket(self, len);
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f892 	bl	8004bd4 <RawParser_dma_startTransmittPacket>

#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    while(len--) {
 8004ab0:	e073      	b.n	8004b9a <RawParser_dma_shieldFrame+0x166>
        RawParser_dma_addTxByteCRC(self, *data++);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	60ba      	str	r2, [r7, #8]
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	76fb      	strb	r3, [r7, #27]

#ifdef D_RAW_P_CRC_ENA
// elementary byte adding functions with calc crc----------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_addTxByteCRC(RawParser_dma_t* const self, const u8 byte)
{
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10e      	bne.n	8004ae6 <RawParser_dma_shieldFrame+0xb2>
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <RawParser_dma_shieldFrame+0x190>)
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	23a1      	movs	r3, #161	; 0xa1
 8004adc:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <RawParser_dma_shieldFrame+0x194>)
 8004ade:	4837      	ldr	r0, [pc, #220]	; (8004bbc <RawParser_dma_shieldFrame+0x188>)
 8004ae0:	f000 fae0 	bl	80050a4 <__M_Error>
 8004ae4:	e059      	b.n	8004b9a <RawParser_dma_shieldFrame+0x166>
#   ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#   endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    // move to cash
    u8* const   TX_data   = self->TX.data;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004aec:	617b      	str	r3, [r7, #20]
    reg         TX_size   = self->TX.size;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004af4:	613b      	str	r3, [r7, #16]


#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2bfd      	cmp	r3, #253	; 0xfd
 8004afa:	d113      	bne.n	8004b24 <RawParser_dma_shieldFrame+0xf0>
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2bfd      	cmp	r3, #253	; 0xfd
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	4619      	mov	r1, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	22fd      	movs	r2, #253	; 0xfd
 8004b10:	9202      	str	r2, [sp, #8]
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <RawParser_dma_shieldFrame+0x198>)
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	23b1      	movs	r3, #177	; 0xb1
 8004b1a:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <RawParser_dma_shieldFrame+0x194>)
 8004b1c:	482c      	ldr	r0, [pc, #176]	; (8004bd0 <RawParser_dma_shieldFrame+0x19c>)
 8004b1e:	f000 fac1 	bl	80050a4 <__M_Error>
 8004b22:	e03a      	b.n	8004b9a <RawParser_dma_shieldFrame+0x166>
#   else
    M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */


    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004b2a:	7efa      	ldrb	r2, [r7, #27]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fd f8d6 	bl	8001ce0 <fast_crc8_maxim_byte>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609

    TX_data[TX_size++] = byte;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	613a      	str	r2, [r7, #16]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4413      	add	r3, r2
 8004b48:	7efa      	ldrb	r2, [r7, #27]
 8004b4a:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	7efa      	ldrb	r2, [r7, #27]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d11d      	bne.n	8004b92 <RawParser_dma_shieldFrame+0x15e>

#   if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2bfd      	cmp	r3, #253	; 0xfd
 8004b5a:	d113      	bne.n	8004b84 <RawParser_dma_shieldFrame+0x150>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2bfd      	cmp	r3, #253	; 0xfd
 8004b60:	bf0c      	ite	eq
 8004b62:	2301      	moveq	r3, #1
 8004b64:	2300      	movne	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	4619      	mov	r1, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	22fd      	movs	r2, #253	; 0xfd
 8004b70:	9202      	str	r2, [sp, #8]
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <RawParser_dma_shieldFrame+0x198>)
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	23bd      	movs	r3, #189	; 0xbd
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <RawParser_dma_shieldFrame+0x194>)
 8004b7c:	4814      	ldr	r0, [pc, #80]	; (8004bd0 <RawParser_dma_shieldFrame+0x19c>)
 8004b7e:	f000 fa91 	bl	80050a4 <__M_Error>
 8004b82:	e00a      	b.n	8004b9a <RawParser_dma_shieldFrame+0x166>
#   else
        M_Assert_Break((TX_size == (D_RAW_P_TX_BUF_SIZE - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than buffer size: %d", TX_size + 1, D_RAW_P_TX_BUF_SIZE - 1);
#   endif /* D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE */

        TX_data[TX_size++] = byte;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	613a      	str	r2, [r7, #16]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	7efa      	ldrb	r2, [r7, #27]
 8004b90:	701a      	strb	r2, [r3, #0]
    }

    self->TX.size = TX_size;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    while(len--) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d186      	bne.n	8004ab2 <RawParser_dma_shieldFrame+0x7e>
    for (unsigned i = 0; i < RSCODE_NPAR; ++i) {
        RawParser_dma_addTxByteCRC(self, pBytes[RSCODE_NPAR-1-i]);
    }
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

    return RawParser_dma_finishTransmittPacket(self);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f91f 	bl	8004de8 <RawParser_dma_finishTransmittPacket>
 8004baa:	4603      	mov	r3, r0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3720      	adds	r7, #32
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	0800ea10 	.word	0x0800ea10
 8004bb8:	0800e744 	.word	0x0800e744
 8004bbc:	0800e9c4 	.word	0x0800e9c4
 8004bc0:	0800ea3c 	.word	0x0800ea3c
 8004bc4:	0800ea98 	.word	0x0800ea98
 8004bc8:	0800ea5c 	.word	0x0800ea5c
 8004bcc:	0800eaf0 	.word	0x0800eaf0
 8004bd0:	0800eac4 	.word	0x0800eac4

08004bd4 <RawParser_dma_startTransmittPacket>:

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
void RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen) /////////////////////////////////////////////////////
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af04      	add	r7, sp, #16
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input");
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10f      	bne.n	8004c04 <RawParser_dma_startTransmittPacket+0x30>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf0c      	ite	eq
 8004bea:	2301      	moveq	r3, #1
 8004bec:	2300      	movne	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4b70      	ldr	r3, [pc, #448]	; (8004db4 <RawParser_dma_startTransmittPacket+0x1e0>)
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004bfa:	4a6f      	ldr	r2, [pc, #444]	; (8004db8 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004bfc:	486f      	ldr	r0, [pc, #444]	; (8004dbc <RawParser_dma_startTransmittPacket+0x1e8>)
 8004bfe:	f000 fa51 	bl	80050a4 <__M_Error>
 8004c02:	e0d3      	b.n	8004dac <RawParser_dma_startTransmittPacket+0x1d8>

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
    M_Assert_Break((self->TX.data == NULL), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

    M_Assert_Break((predictedLen == 0), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length");
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10f      	bne.n	8004c2a <RawParser_dma_startTransmittPacket+0x56>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	4b69      	ldr	r3, [pc, #420]	; (8004dc0 <RawParser_dma_startTransmittPacket+0x1ec>)
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	f240 13fd 	movw	r3, #509	; 0x1fd
 8004c20:	4a65      	ldr	r2, [pc, #404]	; (8004db8 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004c22:	4868      	ldr	r0, [pc, #416]	; (8004dc4 <RawParser_dma_startTransmittPacket+0x1f0>)
 8004c24:	f000 fa3e 	bl	80050a4 <__M_Error>
 8004c28:	e0c0      	b.n	8004dac <RawParser_dma_startTransmittPacket+0x1d8>

#if D_RAW_P_MAX_PROTOCOL_LEN < D_RAW_P_TX_BUF_SIZE // control undefined behavior
    M_Assert_Break( ((predictedLen + 4) > (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_startTransmittPacket: No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_MAX_PROTOCOL_LEN);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	2bfd      	cmp	r3, #253	; 0xfd
 8004c30:	d914      	bls.n	8004c5c <RawParser_dma_startTransmittPacket+0x88>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	3304      	adds	r3, #4
 8004c36:	2bfd      	cmp	r3, #253	; 0xfd
 8004c38:	bf8c      	ite	hi
 8004c3a:	2301      	movhi	r3, #1
 8004c3c:	2300      	movls	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	4619      	mov	r1, r3
 8004c42:	23fe      	movs	r3, #254	; 0xfe
 8004c44:	9302      	str	r3, [sp, #8]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	4b5f      	ldr	r3, [pc, #380]	; (8004dc8 <RawParser_dma_startTransmittPacket+0x1f4>)
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c52:	4a59      	ldr	r2, [pc, #356]	; (8004db8 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004c54:	485d      	ldr	r0, [pc, #372]	; (8004dcc <RawParser_dma_startTransmittPacket+0x1f8>)
 8004c56:	f000 fa25 	bl	80050a4 <__M_Error>
 8004c5a:	e0a7      	b.n	8004dac <RawParser_dma_startTransmittPacket+0x1d8>
    M_Assert_Warning((predictedLen > (D_RAW_P_MAX_PROTOCOL_LEN >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_MAX_PROTOCOL_LEN >> 1));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c60:	d912      	bls.n	8004c88 <RawParser_dma_startTransmittPacket+0xb4>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b7f      	cmp	r3, #127	; 0x7f
 8004c66:	bf8c      	ite	hi
 8004c68:	2301      	movhi	r3, #1
 8004c6a:	2300      	movls	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	4619      	mov	r1, r3
 8004c70:	237f      	movs	r3, #127	; 0x7f
 8004c72:	9302      	str	r3, [sp, #8]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	4b55      	ldr	r3, [pc, #340]	; (8004dd0 <RawParser_dma_startTransmittPacket+0x1fc>)
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	f240 2301 	movw	r3, #513	; 0x201
 8004c80:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <RawParser_dma_startTransmittPacket+0x1e4>)
 8004c82:	4854      	ldr	r0, [pc, #336]	; (8004dd4 <RawParser_dma_startTransmittPacket+0x200>)
 8004c84:	f000 fa2c 	bl	80050e0 <__M_Warning>
    M_Assert_Warning((predictedLen > (D_RAW_P_TX_BUF_SIZE >> 1)), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - buffer size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_TX_BUF_SIZE >> 1));
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */


#ifdef D_RAW_P_CRC_ENA
    self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	22ff      	movs	r2, #255	; 0xff
 8004c8c:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    D_RAW_P_CRC_START(self->m_transmittCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

    const u8 startByte = self->m_startByte;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	77fb      	strb	r3, [r7, #31]


    self->TX.size = 0;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    self->TX.data[self->TX.size++] = startByte;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004caa:	1c58      	adds	r0, r3, #1
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	f8c1 0620 	str.w	r0, [r1, #1568]	; 0x620
 8004cb2:	4413      	add	r3, r2
 8004cb4:	7ffa      	ldrb	r2, [r7, #31]
 8004cb6:	701a      	strb	r2, [r3, #0]
        RawParser_dma_addTxByteCRC(self, (u8)((predictedLen >> 8U) & 0x000000FFUL));

    } else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

        RawParser_dma_addTxByteCRC(self, (u8)(((predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen) & 0x000000FFUL));
 8004cb8:	7ffb      	ldrb	r3, [r7, #31]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d304      	bcc.n	8004cca <RawParser_dma_startTransmittPacket+0xf6>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	e001      	b.n	8004cce <RawParser_dma_startTransmittPacket+0xfa>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	61ba      	str	r2, [r7, #24]
 8004cd2:	75fb      	strb	r3, [r7, #23]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByteCRC: No valid input");
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10e      	bne.n	8004cf8 <RawParser_dma_startTransmittPacket+0x124>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <RawParser_dma_startTransmittPacket+0x204>)
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	23a1      	movs	r3, #161	; 0xa1
 8004cee:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <RawParser_dma_startTransmittPacket+0x208>)
 8004cf0:	4832      	ldr	r0, [pc, #200]	; (8004dbc <RawParser_dma_startTransmittPacket+0x1e8>)
 8004cf2:	f000 f9d7 	bl	80050a4 <__M_Error>
 8004cf6:	e059      	b.n	8004dac <RawParser_dma_startTransmittPacket+0x1d8>
    u8* const   TX_data   = self->TX.data;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004cfe:	613b      	str	r3, [r7, #16]
    reg         TX_size   = self->TX.size;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004d06:	60fb      	str	r3, [r7, #12]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2bfd      	cmp	r3, #253	; 0xfd
 8004d0c:	d113      	bne.n	8004d36 <RawParser_dma_startTransmittPacket+0x162>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2bfd      	cmp	r3, #253	; 0xfd
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	22fd      	movs	r2, #253	; 0xfd
 8004d22:	9202      	str	r2, [sp, #8]
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	4b2e      	ldr	r3, [pc, #184]	; (8004de0 <RawParser_dma_startTransmittPacket+0x20c>)
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	23b1      	movs	r3, #177	; 0xb1
 8004d2c:	4a2b      	ldr	r2, [pc, #172]	; (8004ddc <RawParser_dma_startTransmittPacket+0x208>)
 8004d2e:	482d      	ldr	r0, [pc, #180]	; (8004de4 <RawParser_dma_startTransmittPacket+0x210>)
 8004d30:	f000 f9b8 	bl	80050a4 <__M_Error>
 8004d34:	e03a      	b.n	8004dac <RawParser_dma_startTransmittPacket+0x1d8>
    self->m_transmittCalcCRC = D_RAW_P_CRC_UPDATE(self->m_transmittCalcCRC, byte);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f893 3609 	ldrb.w	r3, [r3, #1545]	; 0x609
 8004d3c:	7dfa      	ldrb	r2, [r7, #23]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fc ffcd 	bl	8001ce0 <fast_crc8_maxim_byte>
 8004d46:	4603      	mov	r3, r0
 8004d48:	461a      	mov	r2, r3
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
    TX_data[TX_size++] = byte;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	60fa      	str	r2, [r7, #12]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	7dfa      	ldrb	r2, [r7, #23]
 8004d5c:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	7dfa      	ldrb	r2, [r7, #23]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d11d      	bne.n	8004da4 <RawParser_dma_startTransmittPacket+0x1d0>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByteCRC: LEN packet: %d,  more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2bfd      	cmp	r3, #253	; 0xfd
 8004d6c:	d113      	bne.n	8004d96 <RawParser_dma_startTransmittPacket+0x1c2>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2bfd      	cmp	r3, #253	; 0xfd
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	22fd      	movs	r2, #253	; 0xfd
 8004d82:	9202      	str	r2, [sp, #8]
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <RawParser_dma_startTransmittPacket+0x20c>)
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	23bd      	movs	r3, #189	; 0xbd
 8004d8c:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <RawParser_dma_startTransmittPacket+0x208>)
 8004d8e:	4815      	ldr	r0, [pc, #84]	; (8004de4 <RawParser_dma_startTransmittPacket+0x210>)
 8004d90:	f000 f988 	bl	80050a4 <__M_Error>
 8004d94:	e00a      	b.n	8004dac <RawParser_dma_startTransmittPacket+0x1d8>
        TX_data[TX_size++] = byte;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	60fa      	str	r2, [r7, #12]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	7dfa      	ldrb	r2, [r7, #23]
 8004da2:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
    }
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */
}
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	0800eb40 	.word	0x0800eb40
 8004db8:	0800e744 	.word	0x0800e744
 8004dbc:	0800e9c4 	.word	0x0800e9c4
 8004dc0:	0800eb88 	.word	0x0800eb88
 8004dc4:	0800eb74 	.word	0x0800eb74
 8004dc8:	0800ebfc 	.word	0x0800ebfc
 8004dcc:	0800ebc4 	.word	0x0800ebc4
 8004dd0:	0800ec7c 	.word	0x0800ec7c
 8004dd4:	0800ec48 	.word	0x0800ec48
 8004dd8:	0800ea98 	.word	0x0800ea98
 8004ddc:	0800ea5c 	.word	0x0800ea5c
 8004de0:	0800eaf0 	.word	0x0800eaf0
 8004de4:	0800eac4 	.word	0x0800eac4

08004de8 <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af04      	add	r7, sp, #16
 8004dee:	6078      	str	r0, [r7, #4]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_startTransmittPacket: No valid input");
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d110      	bne.n	8004e18 <RawParser_dma_finishTransmittPacket+0x30>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <RawParser_dma_finishTransmittPacket+0x10c>)
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	f44f 730a 	mov.w	r3, #552	; 0x228
 8004e0c:	4a3a      	ldr	r2, [pc, #232]	; (8004ef8 <RawParser_dma_finishTransmittPacket+0x110>)
 8004e0e:	483b      	ldr	r0, [pc, #236]	; (8004efc <RawParser_dma_finishTransmittPacket+0x114>)
 8004e10:	f000 f948 	bl	80050a4 <__M_Error>
 8004e14:	2300      	movs	r3, #0
 8004e16:	e068      	b.n	8004eea <RawParser_dma_finishTransmittPacket+0x102>
#ifdef D_RAW_P_CRC_ENA
    D_RAW_P_CRC_FINAL(self->m_transmittCalcCRC);

#   ifdef D_RAW_P_USE_CRC8

    RawParser_dma_addTxByte(self, self->m_transmittCalcCRC);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 2609 	ldrb.w	r2, [r3, #1545]	; 0x609
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	4613      	mov	r3, r2
 8004e24:	74fb      	strb	r3, [r7, #19]
    M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "RawParser_dma_addTxByte: No valid input");
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10e      	bne.n	8004e4a <RawParser_dma_finishTransmittPacket+0x62>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4b31      	ldr	r3, [pc, #196]	; (8004f00 <RawParser_dma_finishTransmittPacket+0x118>)
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2379      	movs	r3, #121	; 0x79
 8004e40:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004e42:	482e      	ldr	r0, [pc, #184]	; (8004efc <RawParser_dma_finishTransmittPacket+0x114>)
 8004e44:	f000 f92e 	bl	80050a4 <__M_Error>
 8004e48:	e04c      	b.n	8004ee4 <RawParser_dma_finishTransmittPacket+0xfc>
    u8* const   TX_data   = self->TX.data;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8004e50:	60fb      	str	r3, [r7, #12]
    reg         TX_size   = self->TX.size;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8004e58:	60bb      	str	r3, [r7, #8]
    M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2bfd      	cmp	r3, #253	; 0xfd
 8004e5e:	d113      	bne.n	8004e88 <RawParser_dma_finishTransmittPacket+0xa0>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2bfd      	cmp	r3, #253	; 0xfd
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	3301      	adds	r3, #1
 8004e72:	22fd      	movs	r2, #253	; 0xfd
 8004e74:	9202      	str	r2, [sp, #8]
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <RawParser_dma_finishTransmittPacket+0x120>)
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2389      	movs	r3, #137	; 0x89
 8004e7e:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004e80:	4822      	ldr	r0, [pc, #136]	; (8004f0c <RawParser_dma_finishTransmittPacket+0x124>)
 8004e82:	f000 f90f 	bl	80050a4 <__M_Error>
 8004e86:	e02d      	b.n	8004ee4 <RawParser_dma_finishTransmittPacket+0xfc>
    TX_data[TX_size++] = byte;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	60ba      	str	r2, [r7, #8]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	7cfa      	ldrb	r2, [r7, #19]
 8004e94:	701a      	strb	r2, [r3, #0]
    if(byte == self->m_startByte) {
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	7cfa      	ldrb	r2, [r7, #19]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d11d      	bne.n	8004edc <RawParser_dma_finishTransmittPacket+0xf4>
        M_Assert_Break((TX_size == (D_RAW_P_MAX_PROTOCOL_LEN - 1)), M_EMPTY, return, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_MAX_PROTOCOL_LEN - 1);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2bfd      	cmp	r3, #253	; 0xfd
 8004ea4:	d113      	bne.n	8004ece <RawParser_dma_finishTransmittPacket+0xe6>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2bfd      	cmp	r3, #253	; 0xfd
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	22fd      	movs	r2, #253	; 0xfd
 8004eba:	9202      	str	r2, [sp, #8]
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <RawParser_dma_finishTransmittPacket+0x120>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2392      	movs	r3, #146	; 0x92
 8004ec4:	4a0f      	ldr	r2, [pc, #60]	; (8004f04 <RawParser_dma_finishTransmittPacket+0x11c>)
 8004ec6:	4811      	ldr	r0, [pc, #68]	; (8004f0c <RawParser_dma_finishTransmittPacket+0x124>)
 8004ec8:	f000 f8ec 	bl	80050a4 <__M_Error>
 8004ecc:	e00a      	b.n	8004ee4 <RawParser_dma_finishTransmittPacket+0xfc>
        TX_data[TX_size++] = byte;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	60ba      	str	r2, [r7, #8]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	7cfa      	ldrb	r2, [r7, #19]
 8004eda:	701a      	strb	r2, [r3, #0]
    self->TX.size = TX_size;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
    RawParser_dma_addTxByte(self, (u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

    return &self->TX;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f203 631c 	addw	r3, r3, #1564	; 0x61c
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	0800eb40 	.word	0x0800eb40
 8004ef8:	0800e744 	.word	0x0800e744
 8004efc:	0800e9c4 	.word	0x0800e9c4
 8004f00:	0800ed20 	.word	0x0800ed20
 8004f04:	0800ea5c 	.word	0x0800ea5c
 8004f08:	0800ed48 	.word	0x0800ed48
 8004f0c:	0800eac4 	.word	0x0800eac4

08004f10 <__M_SEND_ASSERT_MSG>:

static inline void __M_SEND_ASSERT_MSG(const char* const header,
                                const char* const expr_str, const unsigned char expr,
                                const char* const file, const int line,
                                const char* const msg, va_list args)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	71fb      	strb	r3, [r7, #7]
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)

    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b5b      	cmp	r3, #91	; 0x5b
 8004f26:	d175      	bne.n	8005014 <__M_SEND_ASSERT_MSG+0x104>
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b5d      	cmp	r3, #93	; 0x5d
 8004f30:	d170      	bne.n	8005014 <__M_SEND_ASSERT_MSG+0x104>

        int assertEna = 1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
        char* descr = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]

        switch(__M_ASSERT_DATA(msg)) {
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b73      	cmp	r3, #115	; 0x73
 8004f42:	d015      	beq.n	8004f70 <__M_SEND_ASSERT_MSG+0x60>
 8004f44:	2b73      	cmp	r3, #115	; 0x73
 8004f46:	dc23      	bgt.n	8004f90 <__M_SEND_ASSERT_MSG+0x80>
 8004f48:	2b65      	cmp	r3, #101	; 0x65
 8004f4a:	d019      	beq.n	8004f80 <__M_SEND_ASSERT_MSG+0x70>
 8004f4c:	2b65      	cmp	r3, #101	; 0x65
 8004f4e:	dc1f      	bgt.n	8004f90 <__M_SEND_ASSERT_MSG+0x80>
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	f000 8095 	beq.w	8005080 <__M_SEND_ASSERT_MSG+0x170>
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d11a      	bne.n	8004f90 <__M_SEND_ASSERT_MSG+0x80>

        case 'd':
            // get library info
            assertEna = va_arg(args, const int);
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	1d1a      	adds	r2, r3, #4
 8004f5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	613b      	str	r3, [r7, #16]
            break;
 8004f6e:	e00f      	b.n	8004f90 <__M_SEND_ASSERT_MSG+0x80>

        case 's':
            // get library info
            assertEna = 1;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
            descr = va_arg(args, char*);
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	613b      	str	r3, [r7, #16]
            break;
 8004f7e:	e007      	b.n	8004f90 <__M_SEND_ASSERT_MSG+0x80>

        case 'e':
            // get library info
            assertEna = va_arg(args, const int);
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	617b      	str	r3, [r7, #20]
            descr = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
            break;
 8004f8e:	bf00      	nop

        }

#   if !defined(M_MESSAGE_ALWAYS_ENABLE)
        // send message if enabled message
        if(assertEna) {
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d076      	beq.n	8005084 <__M_SEND_ASSERT_MSG+0x174>
#   endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) */
            fprintf(stderr, "\n%s\n", header);
 8004f96:	4b3d      	ldr	r3, [pc, #244]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	493c      	ldr	r1, [pc, #240]	; (8005090 <__M_SEND_ASSERT_MSG+0x180>)
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f003 fb11 	bl	80085c8 <fiprintf>
            fprintf(stderr, "Library Name: %s\n", descr);
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4939      	ldr	r1, [pc, #228]	; (8005094 <__M_SEND_ASSERT_MSG+0x184>)
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f003 fb09 	bl	80085c8 <fiprintf>
            fprintf(stderr, "Assert failed:\t");
 8004fb6:	4b35      	ldr	r3, [pc, #212]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	220f      	movs	r2, #15
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4835      	ldr	r0, [pc, #212]	; (8005098 <__M_SEND_ASSERT_MSG+0x188>)
 8004fc2:	f003 fbd3 	bl	800876c <fwrite>
            vfprintf(stderr, &msg[3], args);
 8004fc6:	4b31      	ldr	r3, [pc, #196]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68d8      	ldr	r0, [r3, #12]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	3303      	adds	r3, #3
 8004fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f003 fe90 	bl	8008cf8 <vfiprintf>
            fprintf(stderr, "\n");
 8004fd8:	4b2c      	ldr	r3, [pc, #176]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	200a      	movs	r0, #10
 8004fe2:	f003 fb3b 	bl	800865c <fputc>

#   if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8004fe6:	4b29      	ldr	r3, [pc, #164]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68d8      	ldr	r0, [r3, #12]
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	492a      	ldr	r1, [pc, #168]	; (800509c <__M_SEND_ASSERT_MSG+0x18c>)
 8004ff2:	f003 fae9 	bl	80085c8 <fiprintf>
#   endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#   if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8004ff6:	4b25      	ldr	r3, [pc, #148]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68d8      	ldr	r0, [r3, #12]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4927      	ldr	r1, [pc, #156]	; (80050a0 <__M_SEND_ASSERT_MSG+0x190>)
 8005002:	f003 fae1 	bl	80085c8 <fiprintf>
#   endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */
            fflush(stderr);
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4618      	mov	r0, r3
 800500e:	f003 f9f3 	bl	80083f8 <fflush>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8005012:	e037      	b.n	8005084 <__M_SEND_ASSERT_MSG+0x174>
        (void)assertEna;
    } else {

#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

        fprintf(stderr, "\n%s\n", header);
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	491c      	ldr	r1, [pc, #112]	; (8005090 <__M_SEND_ASSERT_MSG+0x180>)
 800501e:	4618      	mov	r0, r3
 8005020:	f003 fad2 	bl	80085c8 <fiprintf>
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
        fprintf(stderr, "Assert failed:\t");
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	220f      	movs	r2, #15
 800502c:	2101      	movs	r1, #1
 800502e:	481a      	ldr	r0, [pc, #104]	; (8005098 <__M_SEND_ASSERT_MSG+0x188>)
 8005030:	f003 fb9c 	bl	800876c <fwrite>
        vfprintf(stderr, msg, args);
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800503e:	4618      	mov	r0, r3
 8005040:	f003 fe5a 	bl	8008cf8 <vfiprintf>
        fprintf(stderr, "\n");
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	4619      	mov	r1, r3
 800504c:	200a      	movs	r0, #10
 800504e:	f003 fb05 	bl	800865c <fputc>
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

#if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t %s, value: %d\n", expr_str, expr);
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68d8      	ldr	r0, [r3, #12]
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	490f      	ldr	r1, [pc, #60]	; (800509c <__M_SEND_ASSERT_MSG+0x18c>)
 800505e:	f003 fab3 	bl	80085c8 <fiprintf>
#endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

#if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
        fprintf(stderr, "Source:\t\t %s, line: %d\n", file, line);
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68d8      	ldr	r0, [r3, #12]
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	490c      	ldr	r1, [pc, #48]	; (80050a0 <__M_SEND_ASSERT_MSG+0x190>)
 800506e:	f003 faab 	bl	80085c8 <fiprintf>
#endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */

        fflush(stderr);
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <__M_SEND_ASSERT_MSG+0x17c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4618      	mov	r0, r3
 800507a:	f003 f9bd 	bl	80083f8 <fflush>
 800507e:	e002      	b.n	8005086 <__M_SEND_ASSERT_MSG+0x176>
            return;
 8005080:	bf00      	nop
 8005082:	e000      	b.n	8005086 <__M_SEND_ASSERT_MSG+0x176>
    if(__M_IF_ASSERT_ADDITION_DATA(msg)) {
 8005084:	bf00      	nop
    (void)expr;
    (void)file;
    (void)line;
    (void)msg;
    (void)args;
}
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	2000000c 	.word	0x2000000c
 8005090:	0800ee98 	.word	0x0800ee98
 8005094:	0800eea0 	.word	0x0800eea0
 8005098:	0800eeb4 	.word	0x0800eeb4
 800509c:	0800eec4 	.word	0x0800eec4
 80050a0:	0800eee0 	.word	0x0800eee0

080050a4 <__M_Error>:

void __M_Error(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08a      	sub	sp, #40	; 0x28
 80050a8:	af04      	add	r7, sp, #16
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	460b      	mov	r3, r1
 80050b2:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 80050b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b8:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("PROGRAMM EXIT WITH ERROR!!!", expr_str, expr, file, line, msg, args);
 80050ba:	7afa      	ldrb	r2, [r7, #11]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	9302      	str	r3, [sp, #8]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	4803      	ldr	r0, [pc, #12]	; (80050dc <__M_Error+0x38>)
 80050ce:	f7ff ff1f 	bl	8004f10 <__M_SEND_ASSERT_MSG>
    va_end(args);
    //abort(); // exit programm
}
 80050d2:	bf00      	nop
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	0800eef8 	.word	0x0800eef8

080050e0 <__M_Warning>:

void __M_Warning(const char* const expr_str, const unsigned char expr, const char* const file, const int line, const char* const msg, ...)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af04      	add	r7, sp, #16
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	460b      	mov	r3, r1
 80050ee:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 80050f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050f4:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("WARNING!!!", expr_str, expr, file, line, msg, args);
 80050f6:	7afa      	ldrb	r2, [r7, #11]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	9302      	str	r3, [sp, #8]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	4803      	ldr	r0, [pc, #12]	; (8005118 <__M_Warning+0x38>)
 800510a:	f7ff ff01 	bl	8004f10 <__M_SEND_ASSERT_MSG>
    va_end(args);
}
 800510e:	bf00      	nop
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	0800ef14 	.word	0x0800ef14

0800511c <ping_worker>:
#include <string.h>



void ping_worker(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	static u8 counte = 0;


	memcpy(outputData, inputData, (*size));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	68f9      	ldr	r1, [r7, #12]
 8005132:	68b8      	ldr	r0, [r7, #8]
 8005134:	f003 fb60 	bl	80087f8 <memcpy>
	outputData[(*size)] = counte;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	4413      	add	r3, r2
 8005140:	4a08      	ldr	r2, [pc, #32]	; (8005164 <ping_worker+0x48>)
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	701a      	strb	r2, [r3, #0]
	++(*size);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
	++counte;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <ping_worker+0x48>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	b2da      	uxtb	r2, r3
 8005158:	4b02      	ldr	r3, [pc, #8]	; (8005164 <ping_worker+0x48>)
 800515a:	701a      	strb	r2, [r3, #0]
	UNUSED(maxOutBufferSize);
	UNUSED(ctx);
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	200002a0 	.word	0x200002a0

08005168 <init_stm32_communicator>:

Communicator_t comm;
extern UART_HandleTypeDef huart1;

int init_stm32_communicator(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	int state = rawParser_dma_init(&comm.rawparser, 0x1A);
 800516e:	211a      	movs	r1, #26
 8005170:	4810      	ldr	r0, [pc, #64]	; (80051b4 <init_stm32_communicator+0x4c>)
 8005172:	f7ff fa81 	bl	8004678 <rawParser_dma_init>
 8005176:	6078      	str	r0, [r7, #4]
	if(state != D_RAW_P_OK) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d001      	beq.n	8005182 <init_stm32_communicator+0x1a>
		return D_RAW_P_ERROR;
 800517e:	2300      	movs	r3, #0
 8005180:	e014      	b.n	80051ac <init_stm32_communicator+0x44>
	}

	// init callback manager
	CallbackManager_init(&comm.manager);
 8005182:	480d      	ldr	r0, [pc, #52]	; (80051b8 <init_stm32_communicator+0x50>)
 8005184:	f7fc fcf4 	bl	8001b70 <CallbackManager_init>
	CallbackManager_addWorker(&comm.manager, 0x00, ping_worker, NULL);
 8005188:	2300      	movs	r3, #0
 800518a:	4a0c      	ldr	r2, [pc, #48]	; (80051bc <init_stm32_communicator+0x54>)
 800518c:	2100      	movs	r1, #0
 800518e:	480a      	ldr	r0, [pc, #40]	; (80051b8 <init_stm32_communicator+0x50>)
 8005190:	f7fc fd26 	bl	8001be0 <CallbackManager_addWorker>
	CallbackManager_addWorker(&comm.manager, 0xF0, entityCMD, NULL);
 8005194:	2300      	movs	r3, #0
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <init_stm32_communicator+0x58>)
 8005198:	21f0      	movs	r1, #240	; 0xf0
 800519a:	4807      	ldr	r0, [pc, #28]	; (80051b8 <init_stm32_communicator+0x50>)
 800519c:	f7fc fd20 	bl	8001be0 <CallbackManager_addWorker>

	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 80051a0:	2201      	movs	r2, #1
 80051a2:	4908      	ldr	r1, [pc, #32]	; (80051c4 <init_stm32_communicator+0x5c>)
 80051a4:	4808      	ldr	r0, [pc, #32]	; (80051c8 <init_stm32_communicator+0x60>)
 80051a6:	f002 f8a0 	bl	80072ea <HAL_UART_Receive_IT>
	return state;
 80051aa:	687b      	ldr	r3, [r7, #4]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200002a4 	.word	0x200002a4
 80051b8:	200008d4 	.word	0x200008d4
 80051bc:	0800511d 	.word	0x0800511d
 80051c0:	08001d11 	.word	0x08001d11
 80051c4:	20000cd8 	.word	0x20000cd8
 80051c8:	20000248 	.word	0x20000248

080051cc <proceedIncommingMessage>:


void proceedIncommingMessage(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af02      	add	r7, sp, #8
	HAL_UART_Receive_IT(&huart1, &comm.receiveByte, 1);
 80051d2:	2201      	movs	r2, #1
 80051d4:	493a      	ldr	r1, [pc, #232]	; (80052c0 <proceedIncommingMessage+0xf4>)
 80051d6:	483b      	ldr	r0, [pc, #236]	; (80052c4 <proceedIncommingMessage+0xf8>)
 80051d8:	f002 f887 	bl	80072ea <HAL_UART_Receive_IT>

	// move to cash--------------------------------------------------------------
	const RawParser_Frame_t* const Rxframe = RawParser_dma_proceed(&comm.rawparser);
 80051dc:	483a      	ldr	r0, [pc, #232]	; (80052c8 <proceedIncommingMessage+0xfc>)
 80051de:	f7ff fbad 	bl	800493c <RawParser_dma_proceed>
 80051e2:	6178      	str	r0, [r7, #20]
	u8* const input_data 	= Rxframe->data;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	613b      	str	r3, [r7, #16]
	reg input_size 			= Rxframe->size;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	603b      	str	r3, [r7, #0]

//	if(input_size == 0) {
//		return;
//	}

	const boards_t* const board_entry_internal = board_entry;
 80051f0:	4b36      	ldr	r3, [pc, #216]	; (80052cc <proceedIncommingMessage+0x100>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]

	const u8 bid 		= input_data[0];
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	72fb      	strb	r3, [r7, #11]
	const u8 cmd_id 	= input_data[1];
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	72bb      	strb	r3, [r7, #10]

	// do logic ------------------------------------------------------------------

	M_Assert_Break(((Rxframe == NULL) || (input_data == NULL) || (board_entry_internal == NULL)), M_EMPTY, return, "proceedIncommingMessage: No valid descriptors");
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <proceedIncommingMessage+0x48>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <proceedIncommingMessage+0x48>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d114      	bne.n	800523e <proceedIncommingMessage+0x72>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <proceedIncommingMessage+0x5a>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <proceedIncommingMessage+0x5a>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <proceedIncommingMessage+0x5e>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <proceedIncommingMessage+0x60>
 800522a:	2300      	movs	r3, #0
 800522c:	b2d9      	uxtb	r1, r3
 800522e:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <proceedIncommingMessage+0x104>)
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2335      	movs	r3, #53	; 0x35
 8005234:	4a27      	ldr	r2, [pc, #156]	; (80052d4 <proceedIncommingMessage+0x108>)
 8005236:	4828      	ldr	r0, [pc, #160]	; (80052d8 <proceedIncommingMessage+0x10c>)
 8005238:	f7ff ff34 	bl	80050a4 <__M_Error>
 800523c:	e03c      	b.n	80052b8 <proceedIncommingMessage+0xec>

//	// check input size and board id
	if((input_size < 2U) || (bid != board_entry_internal->boardId)) {
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d936      	bls.n	80052b2 <proceedIncommingMessage+0xe6>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	7afa      	ldrb	r2, [r7, #11]
 800524a:	429a      	cmp	r2, r3
 800524c:	d131      	bne.n	80052b2 <proceedIncommingMessage+0xe6>
		return;
	}

	// call worker
	input_size -= 2;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	3b02      	subs	r3, #2
 8005252:	603b      	str	r3, [r7, #0]
	if(!CallbackManager_proceed(&comm.manager, cmd_id, &input_data[2], &comm.outputData[2], &input_size, (D_RAW_P_TX_BUF_SIZE - 2U))) {
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1c9a      	adds	r2, r3, #2
 8005258:	7ab9      	ldrb	r1, [r7, #10]
 800525a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	463b      	mov	r3, r7
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <proceedIncommingMessage+0x110>)
 8005266:	481e      	ldr	r0, [pc, #120]	; (80052e0 <proceedIncommingMessage+0x114>)
 8005268:	f7fc fcec 	bl	8001c44 <CallbackManager_proceed>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <proceedIncommingMessage+0xaa>
		input_size = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	603b      	str	r3, [r7, #0]
	}

//	// check if worker want to send packet
	if(input_size == 0) {
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01c      	beq.n	80052b6 <proceedIncommingMessage+0xea>
		return;
	}

	comm.outputData[0] = bid;
 800527c:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <proceedIncommingMessage+0xfc>)
 800527e:	7afb      	ldrb	r3, [r7, #11]
 8005280:	f882 3a35 	strb.w	r3, [r2, #2613]	; 0xa35
	comm.outputData[1] = cmd_id;
 8005284:	4a10      	ldr	r2, [pc, #64]	; (80052c8 <proceedIncommingMessage+0xfc>)
 8005286:	7abb      	ldrb	r3, [r7, #10]
 8005288:	f882 3a36 	strb.w	r3, [r2, #2614]	; 0xa36

	const RawParser_Frame_t* const Txframe = RawParser_dma_shieldFrame(&comm.rawparser, comm.outputData, (input_size + 2));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	3302      	adds	r3, #2
 8005290:	461a      	mov	r2, r3
 8005292:	4914      	ldr	r1, [pc, #80]	; (80052e4 <proceedIncommingMessage+0x118>)
 8005294:	480c      	ldr	r0, [pc, #48]	; (80052c8 <proceedIncommingMessage+0xfc>)
 8005296:	f7ff fbcd 	bl	8004a34 <RawParser_dma_shieldFrame>
 800529a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, Txframe->data, Txframe->size, 1000);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052aa:	4806      	ldr	r0, [pc, #24]	; (80052c4 <proceedIncommingMessage+0xf8>)
 80052ac:	f001 ff8b 	bl	80071c6 <HAL_UART_Transmit>
 80052b0:	e002      	b.n	80052b8 <proceedIncommingMessage+0xec>
		return;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <proceedIncommingMessage+0xec>
		return;
 80052b6:	bf00      	nop
}
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000cd8 	.word	0x20000cd8
 80052c4:	20000248 	.word	0x20000248
 80052c8:	200002a4 	.word	0x200002a4
 80052cc:	2000028c 	.word	0x2000028c
 80052d0:	0800f124 	.word	0x0800f124
 80052d4:	0800f0ac 	.word	0x0800f0ac
 80052d8:	0800f0d4 	.word	0x0800f0d4
 80052dc:	20000cdb 	.word	0x20000cdb
 80052e0:	200008d4 	.word	0x200008d4
 80052e4:	20000cd9 	.word	0x20000cd9

080052e8 <__io_putchar>:
#include "main.h"
#include "stm32_printf.h"

extern UART_HandleTypeDef huart1;
PUTCHAR_PROTOTYPE
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80052f0:	1d39      	adds	r1, r7, #4
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295
 80052f6:	2201      	movs	r2, #1
 80052f8:	4803      	ldr	r0, [pc, #12]	; (8005308 <__io_putchar+0x20>)
 80052fa:	f001 ff64 	bl	80071c6 <HAL_UART_Transmit>
	return ch;
 80052fe:	687b      	ldr	r3, [r7, #4]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000248 	.word	0x20000248

0800530c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005310:	4b0e      	ldr	r3, [pc, #56]	; (800534c <HAL_Init+0x40>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a0d      	ldr	r2, [pc, #52]	; (800534c <HAL_Init+0x40>)
 8005316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800531a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_Init+0x40>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <HAL_Init+0x40>)
 8005322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_Init+0x40>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a07      	ldr	r2, [pc, #28]	; (800534c <HAL_Init+0x40>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005334:	2003      	movs	r0, #3
 8005336:	f000 f92b 	bl	8005590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800533a:	200f      	movs	r0, #15
 800533c:	f000 f808 	bl	8005350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005340:	f7fb ff3c 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00

08005350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005358:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <HAL_InitTick+0x54>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <HAL_InitTick+0x58>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	4619      	mov	r1, r3
 8005362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005366:	fbb3 f3f1 	udiv	r3, r3, r1
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f943 	bl	80055fa <HAL_SYSTICK_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e00e      	b.n	800539c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b0f      	cmp	r3, #15
 8005382:	d80a      	bhi.n	800539a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005384:	2200      	movs	r2, #0
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	f000 f90b 	bl	80055a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005390:	4a06      	ldr	r2, [pc, #24]	; (80053ac <HAL_InitTick+0x5c>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000000 	.word	0x20000000
 80053a8:	20000008 	.word	0x20000008
 80053ac:	20000004 	.word	0x20000004

080053b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_IncTick+0x20>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_IncTick+0x24>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4413      	add	r3, r2
 80053c0:	4a04      	ldr	r2, [pc, #16]	; (80053d4 <HAL_IncTick+0x24>)
 80053c2:	6013      	str	r3, [r2, #0]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000008 	.word	0x20000008
 80053d4:	20000edc 	.word	0x20000edc

080053d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return uwTick;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <HAL_GetTick+0x14>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000edc 	.word	0x20000edc

080053f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <__NVIC_SetPriorityGrouping+0x44>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800540c:	4013      	ands	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800541c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005422:	4a04      	ldr	r2, [pc, #16]	; (8005434 <__NVIC_SetPriorityGrouping+0x44>)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	60d3      	str	r3, [r2, #12]
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <__NVIC_GetPriorityGrouping+0x18>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	0a1b      	lsrs	r3, r3, #8
 8005442:	f003 0307 	and.w	r3, r3, #7
}
 8005446:	4618      	mov	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	e000ed00 	.word	0xe000ed00

08005454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005462:	2b00      	cmp	r3, #0
 8005464:	db0b      	blt.n	800547e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	f003 021f 	and.w	r2, r3, #31
 800546c:	4907      	ldr	r1, [pc, #28]	; (800548c <__NVIC_EnableIRQ+0x38>)
 800546e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	2001      	movs	r0, #1
 8005476:	fa00 f202 	lsl.w	r2, r0, r2
 800547a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	e000e100 	.word	0xe000e100

08005490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	6039      	str	r1, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	db0a      	blt.n	80054ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	490c      	ldr	r1, [pc, #48]	; (80054dc <__NVIC_SetPriority+0x4c>)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	0112      	lsls	r2, r2, #4
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	440b      	add	r3, r1
 80054b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054b8:	e00a      	b.n	80054d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	4908      	ldr	r1, [pc, #32]	; (80054e0 <__NVIC_SetPriority+0x50>)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	3b04      	subs	r3, #4
 80054c8:	0112      	lsls	r2, r2, #4
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	440b      	add	r3, r1
 80054ce:	761a      	strb	r2, [r3, #24]
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	e000e100 	.word	0xe000e100
 80054e0:	e000ed00 	.word	0xe000ed00

080054e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b089      	sub	sp, #36	; 0x24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f1c3 0307 	rsb	r3, r3, #7
 80054fe:	2b04      	cmp	r3, #4
 8005500:	bf28      	it	cs
 8005502:	2304      	movcs	r3, #4
 8005504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3304      	adds	r3, #4
 800550a:	2b06      	cmp	r3, #6
 800550c:	d902      	bls.n	8005514 <NVIC_EncodePriority+0x30>
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3b03      	subs	r3, #3
 8005512:	e000      	b.n	8005516 <NVIC_EncodePriority+0x32>
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43da      	mvns	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	401a      	ands	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800552c:	f04f 31ff 	mov.w	r1, #4294967295
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	43d9      	mvns	r1, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800553c:	4313      	orrs	r3, r2
         );
}
 800553e:	4618      	mov	r0, r3
 8005540:	3724      	adds	r7, #36	; 0x24
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3b01      	subs	r3, #1
 8005558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800555c:	d301      	bcc.n	8005562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800555e:	2301      	movs	r3, #1
 8005560:	e00f      	b.n	8005582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005562:	4a0a      	ldr	r2, [pc, #40]	; (800558c <SysTick_Config+0x40>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3b01      	subs	r3, #1
 8005568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800556a:	210f      	movs	r1, #15
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	f7ff ff8e 	bl	8005490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <SysTick_Config+0x40>)
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800557a:	4b04      	ldr	r3, [pc, #16]	; (800558c <SysTick_Config+0x40>)
 800557c:	2207      	movs	r2, #7
 800557e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	e000e010 	.word	0xe000e010

08005590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff ff29 	bl	80053f0 <__NVIC_SetPriorityGrouping>
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b086      	sub	sp, #24
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	4603      	mov	r3, r0
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055b8:	f7ff ff3e 	bl	8005438 <__NVIC_GetPriorityGrouping>
 80055bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	6978      	ldr	r0, [r7, #20]
 80055c4:	f7ff ff8e 	bl	80054e4 <NVIC_EncodePriority>
 80055c8:	4602      	mov	r2, r0
 80055ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ce:	4611      	mov	r1, r2
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff5d 	bl	8005490 <__NVIC_SetPriority>
}
 80055d6:	bf00      	nop
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	4603      	mov	r3, r0
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff ff31 	bl	8005454 <__NVIC_EnableIRQ>
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ffa2 	bl	800554c <SysTick_Config>
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005620:	f7ff feda 	bl	80053d8 <HAL_GetTick>
 8005624:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d008      	beq.n	8005644 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2280      	movs	r2, #128	; 0x80
 8005636:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e052      	b.n	80056ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0216 	bic.w	r2, r2, #22
 8005652:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005662:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <HAL_DMA_Abort+0x62>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0208 	bic.w	r2, r2, #8
 8005682:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005694:	e013      	b.n	80056be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005696:	f7ff fe9f 	bl	80053d8 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b05      	cmp	r3, #5
 80056a2:	d90c      	bls.n	80056be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2203      	movs	r2, #3
 80056ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e015      	b.n	80056ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e4      	bne.n	8005696 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d0:	223f      	movs	r2, #63	; 0x3f
 80056d2:	409a      	lsls	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d004      	beq.n	8005710 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e00c      	b.n	800572a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2205      	movs	r2, #5
 8005714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005738:	b480      	push	{r7}
 800573a:	b089      	sub	sp, #36	; 0x24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e16b      	b.n	8005a2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005754:	2201      	movs	r2, #1
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4013      	ands	r3, r2
 8005766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	429a      	cmp	r2, r3
 800576e:	f040 815a 	bne.w	8005a26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b01      	cmp	r3, #1
 800577c:	d005      	beq.n	800578a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005786:	2b02      	cmp	r3, #2
 8005788:	d130      	bne.n	80057ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	2203      	movs	r2, #3
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4013      	ands	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057c0:	2201      	movs	r2, #1
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 0201 	and.w	r2, r3, #1
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d017      	beq.n	8005828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	2203      	movs	r2, #3
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4013      	ands	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4313      	orrs	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d123      	bne.n	800587c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	08da      	lsrs	r2, r3, #3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3208      	adds	r2, #8
 800583c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	220f      	movs	r2, #15
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	43db      	mvns	r3, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4013      	ands	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	08da      	lsrs	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3208      	adds	r2, #8
 8005876:	69b9      	ldr	r1, [r7, #24]
 8005878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	2203      	movs	r2, #3
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f003 0203 	and.w	r2, r3, #3
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80b4 	beq.w	8005a26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	4b60      	ldr	r3, [pc, #384]	; (8005a44 <HAL_GPIO_Init+0x30c>)
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	4a5f      	ldr	r2, [pc, #380]	; (8005a44 <HAL_GPIO_Init+0x30c>)
 80058c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058cc:	6453      	str	r3, [r2, #68]	; 0x44
 80058ce:	4b5d      	ldr	r3, [pc, #372]	; (8005a44 <HAL_GPIO_Init+0x30c>)
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058da:	4a5b      	ldr	r2, [pc, #364]	; (8005a48 <HAL_GPIO_Init+0x310>)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	3302      	adds	r3, #2
 80058e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	220f      	movs	r2, #15
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a52      	ldr	r2, [pc, #328]	; (8005a4c <HAL_GPIO_Init+0x314>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02b      	beq.n	800595e <HAL_GPIO_Init+0x226>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a51      	ldr	r2, [pc, #324]	; (8005a50 <HAL_GPIO_Init+0x318>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d025      	beq.n	800595a <HAL_GPIO_Init+0x222>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a50      	ldr	r2, [pc, #320]	; (8005a54 <HAL_GPIO_Init+0x31c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01f      	beq.n	8005956 <HAL_GPIO_Init+0x21e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a4f      	ldr	r2, [pc, #316]	; (8005a58 <HAL_GPIO_Init+0x320>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d019      	beq.n	8005952 <HAL_GPIO_Init+0x21a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a4e      	ldr	r2, [pc, #312]	; (8005a5c <HAL_GPIO_Init+0x324>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <HAL_GPIO_Init+0x216>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4d      	ldr	r2, [pc, #308]	; (8005a60 <HAL_GPIO_Init+0x328>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00d      	beq.n	800594a <HAL_GPIO_Init+0x212>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a4c      	ldr	r2, [pc, #304]	; (8005a64 <HAL_GPIO_Init+0x32c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d007      	beq.n	8005946 <HAL_GPIO_Init+0x20e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4b      	ldr	r2, [pc, #300]	; (8005a68 <HAL_GPIO_Init+0x330>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d101      	bne.n	8005942 <HAL_GPIO_Init+0x20a>
 800593e:	2307      	movs	r3, #7
 8005940:	e00e      	b.n	8005960 <HAL_GPIO_Init+0x228>
 8005942:	2308      	movs	r3, #8
 8005944:	e00c      	b.n	8005960 <HAL_GPIO_Init+0x228>
 8005946:	2306      	movs	r3, #6
 8005948:	e00a      	b.n	8005960 <HAL_GPIO_Init+0x228>
 800594a:	2305      	movs	r3, #5
 800594c:	e008      	b.n	8005960 <HAL_GPIO_Init+0x228>
 800594e:	2304      	movs	r3, #4
 8005950:	e006      	b.n	8005960 <HAL_GPIO_Init+0x228>
 8005952:	2303      	movs	r3, #3
 8005954:	e004      	b.n	8005960 <HAL_GPIO_Init+0x228>
 8005956:	2302      	movs	r3, #2
 8005958:	e002      	b.n	8005960 <HAL_GPIO_Init+0x228>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <HAL_GPIO_Init+0x228>
 800595e:	2300      	movs	r3, #0
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	f002 0203 	and.w	r2, r2, #3
 8005966:	0092      	lsls	r2, r2, #2
 8005968:	4093      	lsls	r3, r2
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	4313      	orrs	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005970:	4935      	ldr	r1, [pc, #212]	; (8005a48 <HAL_GPIO_Init+0x310>)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	3302      	adds	r3, #2
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800597e:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <HAL_GPIO_Init+0x334>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	43db      	mvns	r3, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4013      	ands	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059a2:	4a32      	ldr	r2, [pc, #200]	; (8005a6c <HAL_GPIO_Init+0x334>)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059a8:	4b30      	ldr	r3, [pc, #192]	; (8005a6c <HAL_GPIO_Init+0x334>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4013      	ands	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059cc:	4a27      	ldr	r2, [pc, #156]	; (8005a6c <HAL_GPIO_Init+0x334>)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059d2:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <HAL_GPIO_Init+0x334>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	43db      	mvns	r3, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059f6:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <HAL_GPIO_Init+0x334>)
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059fc:	4b1b      	ldr	r3, [pc, #108]	; (8005a6c <HAL_GPIO_Init+0x334>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a20:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <HAL_GPIO_Init+0x334>)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	f67f ae90 	bls.w	8005754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	3724      	adds	r7, #36	; 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40013800 	.word	0x40013800
 8005a4c:	40020000 	.word	0x40020000
 8005a50:	40020400 	.word	0x40020400
 8005a54:	40020800 	.word	0x40020800
 8005a58:	40020c00 	.word	0x40020c00
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40021400 	.word	0x40021400
 8005a64:	40021800 	.word	0x40021800
 8005a68:	40021c00 	.word	0x40021c00
 8005a6c:	40013c00 	.word	0x40013c00

08005a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	807b      	strh	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a8c:	e003      	b.n	8005a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	041a      	lsls	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	619a      	str	r2, [r3, #24]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e267      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d075      	beq.n	8005bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ac2:	4b88      	ldr	r3, [pc, #544]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d00c      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ace:	4b85      	ldr	r3, [pc, #532]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d112      	bne.n	8005b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ada:	4b82      	ldr	r3, [pc, #520]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae6:	d10b      	bne.n	8005b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae8:	4b7e      	ldr	r3, [pc, #504]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d05b      	beq.n	8005bac <HAL_RCC_OscConfig+0x108>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d157      	bne.n	8005bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e242      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b08:	d106      	bne.n	8005b18 <HAL_RCC_OscConfig+0x74>
 8005b0a:	4b76      	ldr	r3, [pc, #472]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a75      	ldr	r2, [pc, #468]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e01d      	b.n	8005b54 <HAL_RCC_OscConfig+0xb0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCC_OscConfig+0x98>
 8005b22:	4b70      	ldr	r3, [pc, #448]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a6f      	ldr	r2, [pc, #444]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6c      	ldr	r2, [pc, #432]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e00b      	b.n	8005b54 <HAL_RCC_OscConfig+0xb0>
 8005b3c:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a68      	ldr	r2, [pc, #416]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	4b66      	ldr	r3, [pc, #408]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a65      	ldr	r2, [pc, #404]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d013      	beq.n	8005b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5c:	f7ff fc3c 	bl	80053d8 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b64:	f7ff fc38 	bl	80053d8 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	; 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e207      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b76:	4b5b      	ldr	r3, [pc, #364]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0xc0>
 8005b82:	e014      	b.n	8005bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7ff fc28 	bl	80053d8 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b8c:	f7ff fc24 	bl	80053d8 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	; 0x64
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e1f3      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9e:	4b51      	ldr	r3, [pc, #324]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0xe8>
 8005baa:	e000      	b.n	8005bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d063      	beq.n	8005c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bba:	4b4a      	ldr	r3, [pc, #296]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bc6:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d11c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd2:	4b44      	ldr	r3, [pc, #272]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d116      	bne.n	8005c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bde:	4b41      	ldr	r3, [pc, #260]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x152>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e1c7      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf6:	4b3b      	ldr	r3, [pc, #236]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	4937      	ldr	r1, [pc, #220]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c0a:	e03a      	b.n	8005c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d020      	beq.n	8005c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c14:	4b34      	ldr	r3, [pc, #208]	; (8005ce8 <HAL_RCC_OscConfig+0x244>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f7ff fbdd 	bl	80053d8 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c22:	f7ff fbd9 	bl	80053d8 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e1a8      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c34:	4b2b      	ldr	r3, [pc, #172]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c40:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	4925      	ldr	r1, [pc, #148]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]
 8005c54:	e015      	b.n	8005c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c56:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <HAL_RCC_OscConfig+0x244>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7ff fbbc 	bl	80053d8 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c64:	f7ff fbb8 	bl	80053d8 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e187      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c76:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f0      	bne.n	8005c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d036      	beq.n	8005cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d016      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_RCC_OscConfig+0x248>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9c:	f7ff fb9c 	bl	80053d8 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca4:	f7ff fb98 	bl	80053d8 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e167      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x200>
 8005cc2:	e01b      	b.n	8005cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCC_OscConfig+0x248>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cca:	f7ff fb85 	bl	80053d8 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd0:	e00e      	b.n	8005cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd2:	f7ff fb81 	bl	80053d8 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d907      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e150      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	42470000 	.word	0x42470000
 8005cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf0:	4b88      	ldr	r3, [pc, #544]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ea      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8097 	beq.w	8005e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0e:	4b81      	ldr	r3, [pc, #516]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10f      	bne.n	8005d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	4b7d      	ldr	r3, [pc, #500]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	4a7c      	ldr	r2, [pc, #496]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d28:	6413      	str	r3, [r2, #64]	; 0x40
 8005d2a:	4b7a      	ldr	r3, [pc, #488]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3a:	4b77      	ldr	r3, [pc, #476]	; (8005f18 <HAL_RCC_OscConfig+0x474>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d118      	bne.n	8005d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d46:	4b74      	ldr	r3, [pc, #464]	; (8005f18 <HAL_RCC_OscConfig+0x474>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a73      	ldr	r2, [pc, #460]	; (8005f18 <HAL_RCC_OscConfig+0x474>)
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d52:	f7ff fb41 	bl	80053d8 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5a:	f7ff fb3d 	bl	80053d8 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e10c      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6c:	4b6a      	ldr	r3, [pc, #424]	; (8005f18 <HAL_RCC_OscConfig+0x474>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d106      	bne.n	8005d8e <HAL_RCC_OscConfig+0x2ea>
 8005d80:	4b64      	ldr	r3, [pc, #400]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	4a63      	ldr	r2, [pc, #396]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8c:	e01c      	b.n	8005dc8 <HAL_RCC_OscConfig+0x324>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d10c      	bne.n	8005db0 <HAL_RCC_OscConfig+0x30c>
 8005d96:	4b5f      	ldr	r3, [pc, #380]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	4a5e      	ldr	r2, [pc, #376]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	f043 0304 	orr.w	r3, r3, #4
 8005da0:	6713      	str	r3, [r2, #112]	; 0x70
 8005da2:	4b5c      	ldr	r3, [pc, #368]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	4a5b      	ldr	r2, [pc, #364]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	6713      	str	r3, [r2, #112]	; 0x70
 8005dae:	e00b      	b.n	8005dc8 <HAL_RCC_OscConfig+0x324>
 8005db0:	4b58      	ldr	r3, [pc, #352]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	4a57      	ldr	r2, [pc, #348]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	6713      	str	r3, [r2, #112]	; 0x70
 8005dbc:	4b55      	ldr	r3, [pc, #340]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	4a54      	ldr	r2, [pc, #336]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	f023 0304 	bic.w	r3, r3, #4
 8005dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd0:	f7ff fb02 	bl	80053d8 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd6:	e00a      	b.n	8005dee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd8:	f7ff fafe 	bl	80053d8 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e0cb      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dee:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0ee      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x334>
 8005dfa:	e014      	b.n	8005e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfc:	f7ff faec 	bl	80053d8 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e02:	e00a      	b.n	8005e1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7ff fae8 	bl	80053d8 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e0b5      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e1a:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1ee      	bne.n	8005e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2c:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	4a38      	ldr	r2, [pc, #224]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80a1 	beq.w	8005f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e42:	4b34      	ldr	r3, [pc, #208]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d05c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d141      	bne.n	8005eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e56:	4b31      	ldr	r3, [pc, #196]	; (8005f1c <HAL_RCC_OscConfig+0x478>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5c:	f7ff fabc 	bl	80053d8 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e64:	f7ff fab8 	bl	80053d8 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e087      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69da      	ldr	r2, [r3, #28]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	019b      	lsls	r3, r3, #6
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	061b      	lsls	r3, r3, #24
 8005ea6:	491b      	ldr	r1, [pc, #108]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eac:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <HAL_RCC_OscConfig+0x478>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb2:	f7ff fa91 	bl	80053d8 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eba:	f7ff fa8d 	bl	80053d8 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e05c      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x416>
 8005ed8:	e054      	b.n	8005f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <HAL_RCC_OscConfig+0x478>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7ff fa7a 	bl	80053d8 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7ff fa76 	bl	80053d8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e045      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x444>
 8005f06:	e03d      	b.n	8005f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d107      	bne.n	8005f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e038      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40007000 	.word	0x40007000
 8005f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <HAL_RCC_OscConfig+0x4ec>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d028      	beq.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d121      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d11a      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f50:	4013      	ands	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d111      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d107      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40023800 	.word	0x40023800

08005f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0cc      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b68      	ldr	r3, [pc, #416]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d90c      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b65      	ldr	r3, [pc, #404]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b63      	ldr	r3, [pc, #396]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0b8      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d020      	beq.n	800601e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fe8:	4b59      	ldr	r3, [pc, #356]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	4a58      	ldr	r2, [pc, #352]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006000:	4b53      	ldr	r3, [pc, #332]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	4a52      	ldr	r2, [pc, #328]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800600a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800600c:	4b50      	ldr	r3, [pc, #320]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	494d      	ldr	r1, [pc, #308]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	4313      	orrs	r3, r2
 800601c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d044      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d107      	bne.n	8006042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006032:	4b47      	ldr	r3, [pc, #284]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d119      	bne.n	8006072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e07f      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d003      	beq.n	8006052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800604e:	2b03      	cmp	r3, #3
 8006050:	d107      	bne.n	8006062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006052:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e06f      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006062:	4b3b      	ldr	r3, [pc, #236]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e067      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006072:	4b37      	ldr	r3, [pc, #220]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f023 0203 	bic.w	r2, r3, #3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	4934      	ldr	r1, [pc, #208]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006080:	4313      	orrs	r3, r2
 8006082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006084:	f7ff f9a8 	bl	80053d8 <HAL_GetTick>
 8006088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608a:	e00a      	b.n	80060a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800608c:	f7ff f9a4 	bl	80053d8 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f241 3288 	movw	r2, #5000	; 0x1388
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e04f      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a2:	4b2b      	ldr	r3, [pc, #172]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 020c 	and.w	r2, r3, #12
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d1eb      	bne.n	800608c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b4:	4b25      	ldr	r3, [pc, #148]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d20c      	bcs.n	80060dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c2:	4b22      	ldr	r3, [pc, #136]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ca:	4b20      	ldr	r3, [pc, #128]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d001      	beq.n	80060dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e032      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e8:	4b19      	ldr	r3, [pc, #100]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4916      	ldr	r1, [pc, #88]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	490e      	ldr	r1, [pc, #56]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	4313      	orrs	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800611a:	f000 f82d 	bl	8006178 <HAL_RCC_GetSysClockFreq>
 800611e:	4602      	mov	r2, r0
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	091b      	lsrs	r3, r3, #4
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	490a      	ldr	r1, [pc, #40]	; (8006154 <HAL_RCC_ClockConfig+0x1c0>)
 800612c:	5ccb      	ldrb	r3, [r1, r3]
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	4a09      	ldr	r2, [pc, #36]	; (8006158 <HAL_RCC_ClockConfig+0x1c4>)
 8006134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <HAL_RCC_ClockConfig+0x1c8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff f908 	bl	8005350 <HAL_InitTick>

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40023c00 	.word	0x40023c00
 8006150:	40023800 	.word	0x40023800
 8006154:	0800f154 	.word	0x0800f154
 8006158:	20000000 	.word	0x20000000
 800615c:	20000004 	.word	0x20000004

08006160 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006164:	4b03      	ldr	r3, [pc, #12]	; (8006174 <HAL_RCC_EnableCSS+0x14>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	bf00      	nop
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	4247004c 	.word	0x4247004c

08006178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800617c:	b094      	sub	sp, #80	; 0x50
 800617e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	647b      	str	r3, [r7, #68]	; 0x44
 8006184:	2300      	movs	r3, #0
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006188:	2300      	movs	r3, #0
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006190:	4b79      	ldr	r3, [pc, #484]	; (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 030c 	and.w	r3, r3, #12
 8006198:	2b08      	cmp	r3, #8
 800619a:	d00d      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0x40>
 800619c:	2b08      	cmp	r3, #8
 800619e:	f200 80e1 	bhi.w	8006364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0x34>
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d003      	beq.n	80061b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80061aa:	e0db      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061ac:	4b73      	ldr	r3, [pc, #460]	; (800637c <HAL_RCC_GetSysClockFreq+0x204>)
 80061ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80061b0:	e0db      	b.n	800636a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061b2:	4b72      	ldr	r3, [pc, #456]	; (800637c <HAL_RCC_GetSysClockFreq+0x204>)
 80061b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061b6:	e0d8      	b.n	800636a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061b8:	4b6f      	ldr	r3, [pc, #444]	; (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061c2:	4b6d      	ldr	r3, [pc, #436]	; (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d063      	beq.n	8006296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ce:	4b6a      	ldr	r3, [pc, #424]	; (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	099b      	lsrs	r3, r3, #6
 80061d4:	2200      	movs	r2, #0
 80061d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
 80061e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061ea:	4622      	mov	r2, r4
 80061ec:	462b      	mov	r3, r5
 80061ee:	f04f 0000 	mov.w	r0, #0
 80061f2:	f04f 0100 	mov.w	r1, #0
 80061f6:	0159      	lsls	r1, r3, #5
 80061f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061fc:	0150      	lsls	r0, r2, #5
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4621      	mov	r1, r4
 8006204:	1a51      	subs	r1, r2, r1
 8006206:	6139      	str	r1, [r7, #16]
 8006208:	4629      	mov	r1, r5
 800620a:	eb63 0301 	sbc.w	r3, r3, r1
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800621c:	4659      	mov	r1, fp
 800621e:	018b      	lsls	r3, r1, #6
 8006220:	4651      	mov	r1, sl
 8006222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006226:	4651      	mov	r1, sl
 8006228:	018a      	lsls	r2, r1, #6
 800622a:	4651      	mov	r1, sl
 800622c:	ebb2 0801 	subs.w	r8, r2, r1
 8006230:	4659      	mov	r1, fp
 8006232:	eb63 0901 	sbc.w	r9, r3, r1
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	f04f 0300 	mov.w	r3, #0
 800623e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800624a:	4690      	mov	r8, r2
 800624c:	4699      	mov	r9, r3
 800624e:	4623      	mov	r3, r4
 8006250:	eb18 0303 	adds.w	r3, r8, r3
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	462b      	mov	r3, r5
 8006258:	eb49 0303 	adc.w	r3, r9, r3
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800626a:	4629      	mov	r1, r5
 800626c:	028b      	lsls	r3, r1, #10
 800626e:	4621      	mov	r1, r4
 8006270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006274:	4621      	mov	r1, r4
 8006276:	028a      	lsls	r2, r1, #10
 8006278:	4610      	mov	r0, r2
 800627a:	4619      	mov	r1, r3
 800627c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627e:	2200      	movs	r2, #0
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
 8006282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006288:	f7fa fcfe 	bl	8000c88 <__aeabi_uldivmod>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4613      	mov	r3, r2
 8006292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006294:	e058      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006296:	4b38      	ldr	r3, [pc, #224]	; (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	099b      	lsrs	r3, r3, #6
 800629c:	2200      	movs	r2, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	4611      	mov	r1, r2
 80062a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062a6:	623b      	str	r3, [r7, #32]
 80062a8:	2300      	movs	r3, #0
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
 80062ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f04f 0100 	mov.w	r1, #0
 80062bc:	0159      	lsls	r1, r3, #5
 80062be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062c2:	0150      	lsls	r0, r2, #5
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4641      	mov	r1, r8
 80062ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80062ce:	4649      	mov	r1, r9
 80062d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062e8:	ebb2 040a 	subs.w	r4, r2, sl
 80062ec:	eb63 050b 	sbc.w	r5, r3, fp
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	00eb      	lsls	r3, r5, #3
 80062fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062fe:	00e2      	lsls	r2, r4, #3
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	4643      	mov	r3, r8
 8006306:	18e3      	adds	r3, r4, r3
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	464b      	mov	r3, r9
 800630c:	eb45 0303 	adc.w	r3, r5, r3
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800631e:	4629      	mov	r1, r5
 8006320:	028b      	lsls	r3, r1, #10
 8006322:	4621      	mov	r1, r4
 8006324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006328:	4621      	mov	r1, r4
 800632a:	028a      	lsls	r2, r1, #10
 800632c:	4610      	mov	r0, r2
 800632e:	4619      	mov	r1, r3
 8006330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006332:	2200      	movs	r2, #0
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	61fa      	str	r2, [r7, #28]
 8006338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800633c:	f7fa fca4 	bl	8000c88 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4613      	mov	r3, r2
 8006346:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <HAL_RCC_GetSysClockFreq+0x200>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	0c1b      	lsrs	r3, r3, #16
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	3301      	adds	r3, #1
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800635a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006362:	e002      	b.n	800636a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_RCC_GetSysClockFreq+0x204>)
 8006366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800636a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800636c:	4618      	mov	r0, r3
 800636e:	3750      	adds	r7, #80	; 0x50
 8006370:	46bd      	mov	sp, r7
 8006372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006376:	bf00      	nop
 8006378:	40023800 	.word	0x40023800
 800637c:	00f42400 	.word	0x00f42400

08006380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <HAL_RCC_GetHCLKFreq+0x14>)
 8006386:	681b      	ldr	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000000 	.word	0x20000000

08006398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800639c:	f7ff fff0 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 80063a0:	4602      	mov	r2, r0
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	0a9b      	lsrs	r3, r3, #10
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	4903      	ldr	r1, [pc, #12]	; (80063bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ae:	5ccb      	ldrb	r3, [r1, r3]
 80063b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40023800 	.word	0x40023800
 80063bc:	0800f164 	.word	0x0800f164

080063c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063c4:	f7ff ffdc 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 80063c8:	4602      	mov	r2, r0
 80063ca:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	0b5b      	lsrs	r3, r3, #13
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	4903      	ldr	r1, [pc, #12]	; (80063e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063d6:	5ccb      	ldrb	r3, [r1, r3]
 80063d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063dc:	4618      	mov	r0, r3
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40023800 	.word	0x40023800
 80063e4:	0800f164 	.word	0x0800f164

080063e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_NMI_IRQHandler+0x20>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d104      	bne.n	8006402 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80063f8:	f000 f80a 	bl	8006410 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80063fc:	4b03      	ldr	r3, [pc, #12]	; (800640c <HAL_RCC_NMI_IRQHandler+0x24>)
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	701a      	strb	r2, [r3, #0]
  }
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40023800 	.word	0x40023800
 800640c:	4002380e 	.word	0x4002380e

08006410 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e041      	b.n	80064b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fb f867 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f000 fad9 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e041      	b.n	8006552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f839 	bl	800655a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 fa8a 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <HAL_TIM_PWM_Start+0x24>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e022      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b04      	cmp	r3, #4
 8006598:	d109      	bne.n	80065ae <HAL_TIM_PWM_Start+0x3e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e015      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d109      	bne.n	80065c8 <HAL_TIM_PWM_Start+0x58>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e008      	b.n	80065da <HAL_TIM_PWM_Start+0x6a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e07c      	b.n	80066dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_PWM_Start+0x82>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f0:	e013      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d104      	bne.n	8006602 <HAL_TIM_PWM_Start+0x92>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006600:	e00b      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d104      	bne.n	8006612 <HAL_TIM_PWM_Start+0xa2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006610:	e003      	b.n	800661a <HAL_TIM_PWM_Start+0xaa>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2201      	movs	r2, #1
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fce0 	bl	8006fe8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <HAL_TIM_PWM_Start+0x174>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_TIM_PWM_Start+0xcc>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a2c      	ldr	r2, [pc, #176]	; (80066e8 <HAL_TIM_PWM_Start+0x178>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d101      	bne.n	8006640 <HAL_TIM_PWM_Start+0xd0>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <HAL_TIM_PWM_Start+0xd2>
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d007      	beq.n	8006656 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <HAL_TIM_PWM_Start+0x174>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d022      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006668:	d01d      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1f      	ldr	r2, [pc, #124]	; (80066ec <HAL_TIM_PWM_Start+0x17c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d018      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <HAL_TIM_PWM_Start+0x180>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1c      	ldr	r2, [pc, #112]	; (80066f4 <HAL_TIM_PWM_Start+0x184>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_TIM_PWM_Start+0x178>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <HAL_TIM_PWM_Start+0x188>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_TIM_PWM_Start+0x136>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <HAL_TIM_PWM_Start+0x18c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d111      	bne.n	80066ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d010      	beq.n	80066da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c8:	e007      	b.n	80066da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0201 	orr.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40001800 	.word	0x40001800

08006700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800671a:	2302      	movs	r3, #2
 800671c:	e0ae      	b.n	800687c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b0c      	cmp	r3, #12
 800672a:	f200 809f 	bhi.w	800686c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006769 	.word	0x08006769
 8006738:	0800686d 	.word	0x0800686d
 800673c:	0800686d 	.word	0x0800686d
 8006740:	0800686d 	.word	0x0800686d
 8006744:	080067a9 	.word	0x080067a9
 8006748:	0800686d 	.word	0x0800686d
 800674c:	0800686d 	.word	0x0800686d
 8006750:	0800686d 	.word	0x0800686d
 8006754:	080067eb 	.word	0x080067eb
 8006758:	0800686d 	.word	0x0800686d
 800675c:	0800686d 	.word	0x0800686d
 8006760:	0800686d 	.word	0x0800686d
 8006764:	0800682b 	.word	0x0800682b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f9f0 	bl	8006b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0208 	orr.w	r2, r2, #8
 8006782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0204 	bic.w	r2, r2, #4
 8006792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6999      	ldr	r1, [r3, #24]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	619a      	str	r2, [r3, #24]
      break;
 80067a6:	e064      	b.n	8006872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fa40 	bl	8006c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6999      	ldr	r1, [r3, #24]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	021a      	lsls	r2, r3, #8
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	619a      	str	r2, [r3, #24]
      break;
 80067e8:	e043      	b.n	8006872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fa95 	bl	8006d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0208 	orr.w	r2, r2, #8
 8006804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0204 	bic.w	r2, r2, #4
 8006814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69d9      	ldr	r1, [r3, #28]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	61da      	str	r2, [r3, #28]
      break;
 8006828:	e023      	b.n	8006872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fae9 	bl	8006e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69d9      	ldr	r1, [r3, #28]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	021a      	lsls	r2, r3, #8
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	61da      	str	r2, [r3, #28]
      break;
 800686a:	e002      	b.n	8006872 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
      break;
 8006870:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800687a:	7dfb      	ldrb	r3, [r7, #23]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_TIM_ConfigClockSource+0x1c>
 800689c:	2302      	movs	r3, #2
 800689e:	e0b4      	b.n	8006a0a <HAL_TIM_ConfigClockSource+0x186>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d8:	d03e      	beq.n	8006958 <HAL_TIM_ConfigClockSource+0xd4>
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068de:	f200 8087 	bhi.w	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e6:	f000 8086 	beq.w	80069f6 <HAL_TIM_ConfigClockSource+0x172>
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ee:	d87f      	bhi.n	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
 80068f0:	2b70      	cmp	r3, #112	; 0x70
 80068f2:	d01a      	beq.n	800692a <HAL_TIM_ConfigClockSource+0xa6>
 80068f4:	2b70      	cmp	r3, #112	; 0x70
 80068f6:	d87b      	bhi.n	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
 80068f8:	2b60      	cmp	r3, #96	; 0x60
 80068fa:	d050      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x11a>
 80068fc:	2b60      	cmp	r3, #96	; 0x60
 80068fe:	d877      	bhi.n	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006900:	2b50      	cmp	r3, #80	; 0x50
 8006902:	d03c      	beq.n	800697e <HAL_TIM_ConfigClockSource+0xfa>
 8006904:	2b50      	cmp	r3, #80	; 0x50
 8006906:	d873      	bhi.n	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	d058      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x13a>
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d86f      	bhi.n	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006910:	2b30      	cmp	r3, #48	; 0x30
 8006912:	d064      	beq.n	80069de <HAL_TIM_ConfigClockSource+0x15a>
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d86b      	bhi.n	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006918:	2b20      	cmp	r3, #32
 800691a:	d060      	beq.n	80069de <HAL_TIM_ConfigClockSource+0x15a>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d867      	bhi.n	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d05c      	beq.n	80069de <HAL_TIM_ConfigClockSource+0x15a>
 8006924:	2b10      	cmp	r3, #16
 8006926:	d05a      	beq.n	80069de <HAL_TIM_ConfigClockSource+0x15a>
 8006928:	e062      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6899      	ldr	r1, [r3, #8]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f000 fb35 	bl	8006fa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800694c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	609a      	str	r2, [r3, #8]
      break;
 8006956:	e04f      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	6899      	ldr	r1, [r3, #8]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f000 fb1e 	bl	8006fa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800697a:	609a      	str	r2, [r3, #8]
      break;
 800697c:	e03c      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6859      	ldr	r1, [r3, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	461a      	mov	r2, r3
 800698c:	f000 fa92 	bl	8006eb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2150      	movs	r1, #80	; 0x50
 8006996:	4618      	mov	r0, r3
 8006998:	f000 faeb 	bl	8006f72 <TIM_ITRx_SetConfig>
      break;
 800699c:	e02c      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6859      	ldr	r1, [r3, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f000 fab1 	bl	8006f12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2160      	movs	r1, #96	; 0x60
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fadb 	bl	8006f72 <TIM_ITRx_SetConfig>
      break;
 80069bc:	e01c      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	6859      	ldr	r1, [r3, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f000 fa72 	bl	8006eb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2140      	movs	r1, #64	; 0x40
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 facb 	bl	8006f72 <TIM_ITRx_SetConfig>
      break;
 80069dc:	e00c      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f000 fac2 	bl	8006f72 <TIM_ITRx_SetConfig>
      break;
 80069ee:	e003      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      break;
 80069f4:	e000      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a40      	ldr	r2, [pc, #256]	; (8006b28 <TIM_Base_SetConfig+0x114>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a32:	d00f      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a3d      	ldr	r2, [pc, #244]	; (8006b2c <TIM_Base_SetConfig+0x118>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00b      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a3c      	ldr	r2, [pc, #240]	; (8006b30 <TIM_Base_SetConfig+0x11c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a3b      	ldr	r2, [pc, #236]	; (8006b34 <TIM_Base_SetConfig+0x120>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a3a      	ldr	r2, [pc, #232]	; (8006b38 <TIM_Base_SetConfig+0x124>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d108      	bne.n	8006a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2f      	ldr	r2, [pc, #188]	; (8006b28 <TIM_Base_SetConfig+0x114>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d02b      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a74:	d027      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a2c      	ldr	r2, [pc, #176]	; (8006b2c <TIM_Base_SetConfig+0x118>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d023      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a2b      	ldr	r2, [pc, #172]	; (8006b30 <TIM_Base_SetConfig+0x11c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d01f      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2a      	ldr	r2, [pc, #168]	; (8006b34 <TIM_Base_SetConfig+0x120>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01b      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a29      	ldr	r2, [pc, #164]	; (8006b38 <TIM_Base_SetConfig+0x124>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d017      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a28      	ldr	r2, [pc, #160]	; (8006b3c <TIM_Base_SetConfig+0x128>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a27      	ldr	r2, [pc, #156]	; (8006b40 <TIM_Base_SetConfig+0x12c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00f      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a26      	ldr	r2, [pc, #152]	; (8006b44 <TIM_Base_SetConfig+0x130>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00b      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a25      	ldr	r2, [pc, #148]	; (8006b48 <TIM_Base_SetConfig+0x134>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d007      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a24      	ldr	r2, [pc, #144]	; (8006b4c <TIM_Base_SetConfig+0x138>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a23      	ldr	r2, [pc, #140]	; (8006b50 <TIM_Base_SetConfig+0x13c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d108      	bne.n	8006ad8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <TIM_Base_SetConfig+0x114>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_Base_SetConfig+0xf8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a0c      	ldr	r2, [pc, #48]	; (8006b38 <TIM_Base_SetConfig+0x124>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d103      	bne.n	8006b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	615a      	str	r2, [r3, #20]
}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40010000 	.word	0x40010000
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000c00 	.word	0x40000c00
 8006b38:	40010400 	.word	0x40010400
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	40014400 	.word	0x40014400
 8006b44:	40014800 	.word	0x40014800
 8006b48:	40001800 	.word	0x40001800
 8006b4c:	40001c00 	.word	0x40001c00
 8006b50:	40002000 	.word	0x40002000

08006b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0303 	bic.w	r3, r3, #3
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f023 0302 	bic.w	r3, r3, #2
 8006b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a20      	ldr	r2, [pc, #128]	; (8006c2c <TIM_OC1_SetConfig+0xd8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_OC1_SetConfig+0x64>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a1f      	ldr	r2, [pc, #124]	; (8006c30 <TIM_OC1_SetConfig+0xdc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d10c      	bne.n	8006bd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f023 0308 	bic.w	r3, r3, #8
 8006bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 0304 	bic.w	r3, r3, #4
 8006bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <TIM_OC1_SetConfig+0xd8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d003      	beq.n	8006be2 <TIM_OC1_SetConfig+0x8e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <TIM_OC1_SetConfig+0xdc>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d111      	bne.n	8006c06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	621a      	str	r2, [r3, #32]
}
 8006c20:	bf00      	nop
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40010400 	.word	0x40010400

08006c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0210 	bic.w	r2, r3, #16
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0320 	bic.w	r3, r3, #32
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a22      	ldr	r2, [pc, #136]	; (8006d18 <TIM_OC2_SetConfig+0xe4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <TIM_OC2_SetConfig+0x68>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a21      	ldr	r2, [pc, #132]	; (8006d1c <TIM_OC2_SetConfig+0xe8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d10d      	bne.n	8006cb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <TIM_OC2_SetConfig+0xe4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC2_SetConfig+0x94>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a16      	ldr	r2, [pc, #88]	; (8006d1c <TIM_OC2_SetConfig+0xe8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d113      	bne.n	8006cf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	621a      	str	r2, [r3, #32]
}
 8006d0a:	bf00      	nop
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40010400 	.word	0x40010400

08006d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a21      	ldr	r2, [pc, #132]	; (8006e00 <TIM_OC3_SetConfig+0xe0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC3_SetConfig+0x66>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a20      	ldr	r2, [pc, #128]	; (8006e04 <TIM_OC3_SetConfig+0xe4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d10d      	bne.n	8006da2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <TIM_OC3_SetConfig+0xe0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_OC3_SetConfig+0x92>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a15      	ldr	r2, [pc, #84]	; (8006e04 <TIM_OC3_SetConfig+0xe4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d113      	bne.n	8006dda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	621a      	str	r2, [r3, #32]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40010000 	.word	0x40010000
 8006e04:	40010400 	.word	0x40010400

08006e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	031b      	lsls	r3, r3, #12
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a12      	ldr	r2, [pc, #72]	; (8006eac <TIM_OC4_SetConfig+0xa4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_OC4_SetConfig+0x68>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a11      	ldr	r2, [pc, #68]	; (8006eb0 <TIM_OC4_SetConfig+0xa8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d109      	bne.n	8006e84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	019b      	lsls	r3, r3, #6
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40010400 	.word	0x40010400

08006eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f023 0201 	bic.w	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f023 030a 	bic.w	r3, r3, #10
 8006ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b087      	sub	sp, #28
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f023 0210 	bic.w	r2, r3, #16
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	031b      	lsls	r3, r3, #12
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	621a      	str	r2, [r3, #32]
}
 8006f66:	bf00      	nop
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f043 0307 	orr.w	r3, r3, #7
 8006f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	609a      	str	r2, [r3, #8]
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	021a      	lsls	r2, r3, #8
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	609a      	str	r2, [r3, #8]
}
 8006fdc:	bf00      	nop
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a1a      	ldr	r2, [r3, #32]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	43db      	mvns	r3, r3
 800700a:	401a      	ands	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1a      	ldr	r2, [r3, #32]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 031f 	and.w	r3, r3, #31
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	fa01 f303 	lsl.w	r3, r1, r3
 8007020:	431a      	orrs	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	621a      	str	r2, [r3, #32]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
	...

08007034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007048:	2302      	movs	r3, #2
 800704a:	e05a      	b.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a21      	ldr	r2, [pc, #132]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d022      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007098:	d01d      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a1d      	ldr	r2, [pc, #116]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d018      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1a      	ldr	r2, [pc, #104]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a18      	ldr	r2, [pc, #96]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a17      	ldr	r2, [pc, #92]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a15      	ldr	r2, [pc, #84]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10c      	bne.n	80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40010000 	.word	0x40010000
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800
 800711c:	40000c00 	.word	0x40000c00
 8007120:	40010400 	.word	0x40010400
 8007124:	40014000 	.word	0x40014000
 8007128:	40001800 	.word	0x40001800

0800712c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e03f      	b.n	80071be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fa fa66 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	; 0x24
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800716e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fddf 	bl	8007d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695a      	ldr	r2, [r3, #20]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b08a      	sub	sp, #40	; 0x28
 80071ca:	af02      	add	r7, sp, #8
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d17c      	bne.n	80072e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_UART_Transmit+0x2c>
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e075      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_UART_Transmit+0x3e>
 8007200:	2302      	movs	r3, #2
 8007202:	e06e      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2221      	movs	r2, #33	; 0x21
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800721a:	f7fe f8dd 	bl	80053d8 <HAL_GetTick>
 800721e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	88fa      	ldrh	r2, [r7, #6]
 8007224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	88fa      	ldrh	r2, [r7, #6]
 800722a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007234:	d108      	bne.n	8007248 <HAL_UART_Transmit+0x82>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	e003      	b.n	8007250 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007258:	e02a      	b.n	80072b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fb1f 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e036      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10b      	bne.n	8007292 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	3302      	adds	r3, #2
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	e007      	b.n	80072a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	3301      	adds	r3, #1
 80072a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1cf      	bne.n	800725a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	2140      	movs	r1, #64	; 0x40
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 faef 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e006      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b20      	cmp	r3, #32
 8007302:	d11d      	bne.n	8007340 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_UART_Receive_IT+0x26>
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e016      	b.n	8007342 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_UART_Receive_IT+0x38>
 800731e:	2302      	movs	r3, #2
 8007320:	e00f      	b.n	8007342 <HAL_UART_Receive_IT+0x58>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	461a      	mov	r2, r3
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fb24 	bl	8007984 <UART_Start_Receive_IT>
 800733c:	4603      	mov	r3, r0
 800733e:	e000      	b.n	8007342 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007340:	2302      	movs	r3, #2
  }
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b0ba      	sub	sp, #232	; 0xe8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007372:	2300      	movs	r3, #0
 8007374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007378:	2300      	movs	r3, #0
 800737a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800737e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800738a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10f      	bne.n	80073b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <HAL_UART_IRQHandler+0x66>
 800739e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fc07 	bl	8007bbe <UART_Receive_IT>
      return;
 80073b0:	e256      	b.n	8007860 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 80de 	beq.w	8007578 <HAL_UART_IRQHandler+0x22c>
 80073bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80d1 	beq.w	8007578 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <HAL_UART_IRQHandler+0xae>
 80073e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f043 0201 	orr.w	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00b      	beq.n	800741e <HAL_UART_IRQHandler+0xd2>
 8007406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f043 0202 	orr.w	r2, r3, #2
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800741e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <HAL_UART_IRQHandler+0xf6>
 800742a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	f043 0204 	orr.w	r2, r3, #4
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d011      	beq.n	8007472 <HAL_UART_IRQHandler+0x126>
 800744e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800745a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f043 0208 	orr.w	r2, r3, #8
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 81ed 	beq.w	8007856 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800747c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_UART_IRQHandler+0x14e>
 8007488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fb92 	bl	8007bbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a4:	2b40      	cmp	r3, #64	; 0x40
 80074a6:	bf0c      	ite	eq
 80074a8:	2301      	moveq	r3, #1
 80074aa:	2300      	movne	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <HAL_UART_IRQHandler+0x17a>
 80074be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d04f      	beq.n	8007566 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa9a 	bl	8007a00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d141      	bne.n	800755e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3314      	adds	r3, #20
 8007502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800750a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800751e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1d9      	bne.n	80074da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	2b00      	cmp	r3, #0
 800752c:	d013      	beq.n	8007556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	4a7d      	ldr	r2, [pc, #500]	; (8007728 <HAL_UART_IRQHandler+0x3dc>)
 8007534:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe f8d9 	bl	80056f2 <HAL_DMA_Abort_IT>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007554:	e00e      	b.n	8007574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f990 	bl	800787c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755c:	e00a      	b.n	8007574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f98c 	bl	800787c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007564:	e006      	b.n	8007574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f988 	bl	800787c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007572:	e170      	b.n	8007856 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007574:	bf00      	nop
    return;
 8007576:	e16e      	b.n	8007856 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	2b01      	cmp	r3, #1
 800757e:	f040 814a 	bne.w	8007816 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007586:	f003 0310 	and.w	r3, r3, #16
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8143 	beq.w	8007816 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 813c 	beq.w	8007816 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800759e:	2300      	movs	r3, #0
 80075a0:	60bb      	str	r3, [r7, #8]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60bb      	str	r3, [r7, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	f040 80b4 	bne.w	800772c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8140 	beq.w	800785a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075e2:	429a      	cmp	r2, r3
 80075e4:	f080 8139 	bcs.w	800785a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fa:	f000 8088 	beq.w	800770e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	330c      	adds	r3, #12
 8007604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800761c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	330c      	adds	r3, #12
 8007626:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800762a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800762e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007636:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1d9      	bne.n	80075fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3314      	adds	r3, #20
 8007650:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800765a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3314      	adds	r3, #20
 800766a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800766e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007672:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007676:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e1      	bne.n	800764a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3314      	adds	r3, #20
 800768c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800769c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3314      	adds	r3, #20
 80076a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076b2:	e841 2300 	strex	r3, r2, [r1]
 80076b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e3      	bne.n	8007686 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	330c      	adds	r3, #12
 80076d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076de:	f023 0310 	bic.w	r3, r3, #16
 80076e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	330c      	adds	r3, #12
 80076ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80076f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e3      	bne.n	80076cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd ff82 	bl	8005612 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007716:	b29b      	uxth	r3, r3
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	b29b      	uxth	r3, r3
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f8b6 	bl	8007890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007724:	e099      	b.n	800785a <HAL_UART_IRQHandler+0x50e>
 8007726:	bf00      	nop
 8007728:	08007ac7 	.word	0x08007ac7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007734:	b29b      	uxth	r3, r3
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 808b 	beq.w	800785e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8086 	beq.w	800785e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	330c      	adds	r3, #12
 8007772:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007776:	647a      	str	r2, [r7, #68]	; 0x44
 8007778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800777c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e3      	bne.n	8007752 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3314      	adds	r3, #20
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	623b      	str	r3, [r7, #32]
   return(result);
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f023 0301 	bic.w	r3, r3, #1
 80077a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3314      	adds	r3, #20
 80077aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077ae:	633a      	str	r2, [r7, #48]	; 0x30
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e3      	bne.n	800778a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0310 	bic.w	r3, r3, #16
 80077e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077f4:	61fa      	str	r2, [r7, #28]
 80077f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	69b9      	ldr	r1, [r7, #24]
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	617b      	str	r3, [r7, #20]
   return(result);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e3      	bne.n	80077d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f83e 	bl	8007890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007814:	e023      	b.n	800785e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <HAL_UART_IRQHandler+0x4ea>
 8007822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f95d 	bl	8007aee <UART_Transmit_IT>
    return;
 8007834:	e014      	b.n	8007860 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00e      	beq.n	8007860 <HAL_UART_IRQHandler+0x514>
 8007842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d008      	beq.n	8007860 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f99d 	bl	8007b8e <UART_EndTransmit_IT>
    return;
 8007854:	e004      	b.n	8007860 <HAL_UART_IRQHandler+0x514>
    return;
 8007856:	bf00      	nop
 8007858:	e002      	b.n	8007860 <HAL_UART_IRQHandler+0x514>
      return;
 800785a:	bf00      	nop
 800785c:	e000      	b.n	8007860 <HAL_UART_IRQHandler+0x514>
      return;
 800785e:	bf00      	nop
  }
}
 8007860:	37e8      	adds	r7, #232	; 0xe8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop

08007868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b090      	sub	sp, #64	; 0x40
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	4613      	mov	r3, r2
 80078b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b8:	e050      	b.n	800795c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d04c      	beq.n	800795c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078c8:	f7fd fd86 	bl	80053d8 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d241      	bcs.n	800795c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	330c      	adds	r3, #12
 80078f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078f8:	637a      	str	r2, [r7, #52]	; 0x34
 80078fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e5      	bne.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3314      	adds	r3, #20
 8007912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	613b      	str	r3, [r7, #16]
   return(result);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f023 0301 	bic.w	r3, r3, #1
 8007922:	63bb      	str	r3, [r7, #56]	; 0x38
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3314      	adds	r3, #20
 800792a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800792c:	623a      	str	r2, [r7, #32]
 800792e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	69f9      	ldr	r1, [r7, #28]
 8007932:	6a3a      	ldr	r2, [r7, #32]
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	61bb      	str	r3, [r7, #24]
   return(result);
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e5      	bne.n	800790c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e00f      	b.n	800797c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	4013      	ands	r3, r2
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	429a      	cmp	r2, r3
 800796a:	bf0c      	ite	eq
 800796c:	2301      	moveq	r3, #1
 800796e:	2300      	movne	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	429a      	cmp	r2, r3
 8007978:	d09f      	beq.n	80078ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3740      	adds	r7, #64	; 0x40
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2222      	movs	r2, #34	; 0x22
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695a      	ldr	r2, [r3, #20]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f042 0201 	orr.w	r2, r2, #1
 80079e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 0220 	orr.w	r2, r2, #32
 80079f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b095      	sub	sp, #84	; 0x54
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	330c      	adds	r3, #12
 8007a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a28:	643a      	str	r2, [r7, #64]	; 0x40
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e5      	bne.n	8007a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3314      	adds	r3, #20
 8007a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d119      	bne.n	8007aac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f023 0310 	bic.w	r3, r3, #16
 8007a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a98:	61ba      	str	r2, [r7, #24]
 8007a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6979      	ldr	r1, [r7, #20]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e5      	bne.n	8007a78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007aba:	bf00      	nop
 8007abc:	3754      	adds	r7, #84	; 0x54
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff fecb 	bl	800787c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b21      	cmp	r3, #33	; 0x21
 8007b00:	d13e      	bne.n	8007b80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0a:	d114      	bne.n	8007b36 <UART_Transmit_IT+0x48>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d110      	bne.n	8007b36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	1c9a      	adds	r2, r3, #2
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	621a      	str	r2, [r3, #32]
 8007b34:	e008      	b.n	8007b48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	1c59      	adds	r1, r3, #1
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	6211      	str	r1, [r2, #32]
 8007b40:	781a      	ldrb	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	4619      	mov	r1, r3
 8007b56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10f      	bne.n	8007b7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e000      	b.n	8007b82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b80:	2302      	movs	r3, #2
  }
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff fe5a 	bl	8007868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b08c      	sub	sp, #48	; 0x30
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b22      	cmp	r3, #34	; 0x22
 8007bd0:	f040 80ab 	bne.w	8007d2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bdc:	d117      	bne.n	8007c0e <UART_Receive_IT+0x50>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d113      	bne.n	8007c0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	1c9a      	adds	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c0c:	e026      	b.n	8007c5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c14:	2300      	movs	r3, #0
 8007c16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c20:	d007      	beq.n	8007c32 <UART_Receive_IT+0x74>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <UART_Receive_IT+0x82>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e008      	b.n	8007c52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d15a      	bne.n	8007d26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0220 	bic.w	r2, r2, #32
 8007c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695a      	ldr	r2, [r3, #20]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0201 	bic.w	r2, r2, #1
 8007c9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d135      	bne.n	8007d1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	330c      	adds	r3, #12
 8007cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f023 0310 	bic.w	r3, r3, #16
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	330c      	adds	r3, #12
 8007cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd6:	623a      	str	r2, [r7, #32]
 8007cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	69f9      	ldr	r1, [r7, #28]
 8007cdc:	6a3a      	ldr	r2, [r7, #32]
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e5      	bne.n	8007cb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b10      	cmp	r3, #16
 8007cf6:	d10a      	bne.n	8007d0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff fdbb 	bl	8007890 <HAL_UARTEx_RxEventCallback>
 8007d1a:	e002      	b.n	8007d22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7f9 fef5 	bl	8001b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	e002      	b.n	8007d2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	e000      	b.n	8007d2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d2a:	2302      	movs	r3, #2
  }
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3730      	adds	r7, #48	; 0x30
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d38:	b0c0      	sub	sp, #256	; 0x100
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d50:	68d9      	ldr	r1, [r3, #12]
 8007d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	ea40 0301 	orr.w	r3, r0, r1
 8007d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d8c:	f021 010c 	bic.w	r1, r1, #12
 8007d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dae:	6999      	ldr	r1, [r3, #24]
 8007db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	ea40 0301 	orr.w	r3, r0, r1
 8007dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b8f      	ldr	r3, [pc, #572]	; (8008000 <UART_SetConfig+0x2cc>)
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d005      	beq.n	8007dd4 <UART_SetConfig+0xa0>
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4b8d      	ldr	r3, [pc, #564]	; (8008004 <UART_SetConfig+0x2d0>)
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d104      	bne.n	8007dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dd4:	f7fe faf4 	bl	80063c0 <HAL_RCC_GetPCLK2Freq>
 8007dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ddc:	e003      	b.n	8007de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dde:	f7fe fadb 	bl	8006398 <HAL_RCC_GetPCLK1Freq>
 8007de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df0:	f040 810c 	bne.w	800800c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e06:	4622      	mov	r2, r4
 8007e08:	462b      	mov	r3, r5
 8007e0a:	1891      	adds	r1, r2, r2
 8007e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e0e:	415b      	adcs	r3, r3
 8007e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e16:	4621      	mov	r1, r4
 8007e18:	eb12 0801 	adds.w	r8, r2, r1
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	eb43 0901 	adc.w	r9, r3, r1
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e36:	4690      	mov	r8, r2
 8007e38:	4699      	mov	r9, r3
 8007e3a:	4623      	mov	r3, r4
 8007e3c:	eb18 0303 	adds.w	r3, r8, r3
 8007e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e44:	462b      	mov	r3, r5
 8007e46:	eb49 0303 	adc.w	r3, r9, r3
 8007e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e62:	460b      	mov	r3, r1
 8007e64:	18db      	adds	r3, r3, r3
 8007e66:	653b      	str	r3, [r7, #80]	; 0x50
 8007e68:	4613      	mov	r3, r2
 8007e6a:	eb42 0303 	adc.w	r3, r2, r3
 8007e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e78:	f7f8 ff06 	bl	8000c88 <__aeabi_uldivmod>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4b61      	ldr	r3, [pc, #388]	; (8008008 <UART_SetConfig+0x2d4>)
 8007e82:	fba3 2302 	umull	r2, r3, r3, r2
 8007e86:	095b      	lsrs	r3, r3, #5
 8007e88:	011c      	lsls	r4, r3, #4
 8007e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	464b      	mov	r3, r9
 8007ea0:	1891      	adds	r1, r2, r2
 8007ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ea4:	415b      	adcs	r3, r3
 8007ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007eac:	4641      	mov	r1, r8
 8007eae:	eb12 0a01 	adds.w	sl, r2, r1
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ecc:	4692      	mov	sl, r2
 8007ece:	469b      	mov	fp, r3
 8007ed0:	4643      	mov	r3, r8
 8007ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eda:	464b      	mov	r3, r9
 8007edc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	18db      	adds	r3, r3, r3
 8007efc:	643b      	str	r3, [r7, #64]	; 0x40
 8007efe:	4613      	mov	r3, r2
 8007f00:	eb42 0303 	adc.w	r3, r2, r3
 8007f04:	647b      	str	r3, [r7, #68]	; 0x44
 8007f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f0e:	f7f8 febb 	bl	8000c88 <__aeabi_uldivmod>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	4b3b      	ldr	r3, [pc, #236]	; (8008008 <UART_SetConfig+0x2d4>)
 8007f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	2264      	movs	r2, #100	; 0x64
 8007f22:	fb02 f303 	mul.w	r3, r2, r3
 8007f26:	1acb      	subs	r3, r1, r3
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f2e:	4b36      	ldr	r3, [pc, #216]	; (8008008 <UART_SetConfig+0x2d4>)
 8007f30:	fba3 2302 	umull	r2, r3, r3, r2
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f3c:	441c      	add	r4, r3
 8007f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f50:	4642      	mov	r2, r8
 8007f52:	464b      	mov	r3, r9
 8007f54:	1891      	adds	r1, r2, r2
 8007f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f58:	415b      	adcs	r3, r3
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f60:	4641      	mov	r1, r8
 8007f62:	1851      	adds	r1, r2, r1
 8007f64:	6339      	str	r1, [r7, #48]	; 0x30
 8007f66:	4649      	mov	r1, r9
 8007f68:	414b      	adcs	r3, r1
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f78:	4659      	mov	r1, fp
 8007f7a:	00cb      	lsls	r3, r1, #3
 8007f7c:	4651      	mov	r1, sl
 8007f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f82:	4651      	mov	r1, sl
 8007f84:	00ca      	lsls	r2, r1, #3
 8007f86:	4610      	mov	r0, r2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	189b      	adds	r3, r3, r2
 8007f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f94:	464b      	mov	r3, r9
 8007f96:	460a      	mov	r2, r1
 8007f98:	eb42 0303 	adc.w	r3, r2, r3
 8007f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	18db      	adds	r3, r3, r3
 8007fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fba:	4613      	mov	r3, r2
 8007fbc:	eb42 0303 	adc.w	r3, r2, r3
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007fca:	f7f8 fe5d 	bl	8000c88 <__aeabi_uldivmod>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <UART_SetConfig+0x2d4>)
 8007fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	2164      	movs	r1, #100	; 0x64
 8007fdc:	fb01 f303 	mul.w	r3, r1, r3
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	3332      	adds	r3, #50	; 0x32
 8007fe6:	4a08      	ldr	r2, [pc, #32]	; (8008008 <UART_SetConfig+0x2d4>)
 8007fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	f003 0207 	and.w	r2, r3, #7
 8007ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4422      	add	r2, r4
 8007ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ffc:	e105      	b.n	800820a <UART_SetConfig+0x4d6>
 8007ffe:	bf00      	nop
 8008000:	40011000 	.word	0x40011000
 8008004:	40011400 	.word	0x40011400
 8008008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800800c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008010:	2200      	movs	r2, #0
 8008012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800801a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800801e:	4642      	mov	r2, r8
 8008020:	464b      	mov	r3, r9
 8008022:	1891      	adds	r1, r2, r2
 8008024:	6239      	str	r1, [r7, #32]
 8008026:	415b      	adcs	r3, r3
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
 800802a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800802e:	4641      	mov	r1, r8
 8008030:	1854      	adds	r4, r2, r1
 8008032:	4649      	mov	r1, r9
 8008034:	eb43 0501 	adc.w	r5, r3, r1
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	00eb      	lsls	r3, r5, #3
 8008042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008046:	00e2      	lsls	r2, r4, #3
 8008048:	4614      	mov	r4, r2
 800804a:	461d      	mov	r5, r3
 800804c:	4643      	mov	r3, r8
 800804e:	18e3      	adds	r3, r4, r3
 8008050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008054:	464b      	mov	r3, r9
 8008056:	eb45 0303 	adc.w	r3, r5, r3
 800805a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800805e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800806a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800806e:	f04f 0200 	mov.w	r2, #0
 8008072:	f04f 0300 	mov.w	r3, #0
 8008076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800807a:	4629      	mov	r1, r5
 800807c:	008b      	lsls	r3, r1, #2
 800807e:	4621      	mov	r1, r4
 8008080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008084:	4621      	mov	r1, r4
 8008086:	008a      	lsls	r2, r1, #2
 8008088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800808c:	f7f8 fdfc 	bl	8000c88 <__aeabi_uldivmod>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4b60      	ldr	r3, [pc, #384]	; (8008218 <UART_SetConfig+0x4e4>)
 8008096:	fba3 2302 	umull	r2, r3, r3, r2
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	011c      	lsls	r4, r3, #4
 800809e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080b0:	4642      	mov	r2, r8
 80080b2:	464b      	mov	r3, r9
 80080b4:	1891      	adds	r1, r2, r2
 80080b6:	61b9      	str	r1, [r7, #24]
 80080b8:	415b      	adcs	r3, r3
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080c0:	4641      	mov	r1, r8
 80080c2:	1851      	adds	r1, r2, r1
 80080c4:	6139      	str	r1, [r7, #16]
 80080c6:	4649      	mov	r1, r9
 80080c8:	414b      	adcs	r3, r1
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	f04f 0200 	mov.w	r2, #0
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080d8:	4659      	mov	r1, fp
 80080da:	00cb      	lsls	r3, r1, #3
 80080dc:	4651      	mov	r1, sl
 80080de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080e2:	4651      	mov	r1, sl
 80080e4:	00ca      	lsls	r2, r1, #3
 80080e6:	4610      	mov	r0, r2
 80080e8:	4619      	mov	r1, r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	4642      	mov	r2, r8
 80080ee:	189b      	adds	r3, r3, r2
 80080f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080f4:	464b      	mov	r3, r9
 80080f6:	460a      	mov	r2, r1
 80080f8:	eb42 0303 	adc.w	r3, r2, r3
 80080fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	67bb      	str	r3, [r7, #120]	; 0x78
 800810a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008118:	4649      	mov	r1, r9
 800811a:	008b      	lsls	r3, r1, #2
 800811c:	4641      	mov	r1, r8
 800811e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008122:	4641      	mov	r1, r8
 8008124:	008a      	lsls	r2, r1, #2
 8008126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800812a:	f7f8 fdad 	bl	8000c88 <__aeabi_uldivmod>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4b39      	ldr	r3, [pc, #228]	; (8008218 <UART_SetConfig+0x4e4>)
 8008134:	fba3 1302 	umull	r1, r3, r3, r2
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	2164      	movs	r1, #100	; 0x64
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	3332      	adds	r3, #50	; 0x32
 8008146:	4a34      	ldr	r2, [pc, #208]	; (8008218 <UART_SetConfig+0x4e4>)
 8008148:	fba2 2303 	umull	r2, r3, r2, r3
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008152:	441c      	add	r4, r3
 8008154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008158:	2200      	movs	r2, #0
 800815a:	673b      	str	r3, [r7, #112]	; 0x70
 800815c:	677a      	str	r2, [r7, #116]	; 0x74
 800815e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008162:	4642      	mov	r2, r8
 8008164:	464b      	mov	r3, r9
 8008166:	1891      	adds	r1, r2, r2
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	415b      	adcs	r3, r3
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008172:	4641      	mov	r1, r8
 8008174:	1851      	adds	r1, r2, r1
 8008176:	6039      	str	r1, [r7, #0]
 8008178:	4649      	mov	r1, r9
 800817a:	414b      	adcs	r3, r1
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800818a:	4659      	mov	r1, fp
 800818c:	00cb      	lsls	r3, r1, #3
 800818e:	4651      	mov	r1, sl
 8008190:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008194:	4651      	mov	r1, sl
 8008196:	00ca      	lsls	r2, r1, #3
 8008198:	4610      	mov	r0, r2
 800819a:	4619      	mov	r1, r3
 800819c:	4603      	mov	r3, r0
 800819e:	4642      	mov	r2, r8
 80081a0:	189b      	adds	r3, r3, r2
 80081a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80081a4:	464b      	mov	r3, r9
 80081a6:	460a      	mov	r2, r1
 80081a8:	eb42 0303 	adc.w	r3, r2, r3
 80081ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	663b      	str	r3, [r7, #96]	; 0x60
 80081b8:	667a      	str	r2, [r7, #100]	; 0x64
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081c6:	4649      	mov	r1, r9
 80081c8:	008b      	lsls	r3, r1, #2
 80081ca:	4641      	mov	r1, r8
 80081cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d0:	4641      	mov	r1, r8
 80081d2:	008a      	lsls	r2, r1, #2
 80081d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081d8:	f7f8 fd56 	bl	8000c88 <__aeabi_uldivmod>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <UART_SetConfig+0x4e4>)
 80081e2:	fba3 1302 	umull	r1, r3, r3, r2
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	2164      	movs	r1, #100	; 0x64
 80081ea:	fb01 f303 	mul.w	r3, r1, r3
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	3332      	adds	r3, #50	; 0x32
 80081f4:	4a08      	ldr	r2, [pc, #32]	; (8008218 <UART_SetConfig+0x4e4>)
 80081f6:	fba2 2303 	umull	r2, r3, r2, r3
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	f003 020f 	and.w	r2, r3, #15
 8008200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4422      	add	r2, r4
 8008208:	609a      	str	r2, [r3, #8]
}
 800820a:	bf00      	nop
 800820c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008210:	46bd      	mov	sp, r7
 8008212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008216:	bf00      	nop
 8008218:	51eb851f 	.word	0x51eb851f

0800821c <__assert_func>:
 800821c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800821e:	4614      	mov	r4, r2
 8008220:	461a      	mov	r2, r3
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <__assert_func+0x2c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4605      	mov	r5, r0
 8008228:	68d8      	ldr	r0, [r3, #12]
 800822a:	b14c      	cbz	r4, 8008240 <__assert_func+0x24>
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <__assert_func+0x30>)
 800822e:	9100      	str	r1, [sp, #0]
 8008230:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008234:	4906      	ldr	r1, [pc, #24]	; (8008250 <__assert_func+0x34>)
 8008236:	462b      	mov	r3, r5
 8008238:	f000 f9c6 	bl	80085c8 <fiprintf>
 800823c:	f002 fc22 	bl	800aa84 <abort>
 8008240:	4b04      	ldr	r3, [pc, #16]	; (8008254 <__assert_func+0x38>)
 8008242:	461c      	mov	r4, r3
 8008244:	e7f3      	b.n	800822e <__assert_func+0x12>
 8008246:	bf00      	nop
 8008248:	2000000c 	.word	0x2000000c
 800824c:	0800f2b4 	.word	0x0800f2b4
 8008250:	0800f2c1 	.word	0x0800f2c1
 8008254:	0800f2ef 	.word	0x0800f2ef

08008258 <calloc>:
 8008258:	4b02      	ldr	r3, [pc, #8]	; (8008264 <calloc+0xc>)
 800825a:	460a      	mov	r2, r1
 800825c:	4601      	mov	r1, r0
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	f000 bafa 	b.w	8008858 <_calloc_r>
 8008264:	2000000c 	.word	0x2000000c

08008268 <__errno>:
 8008268:	4b01      	ldr	r3, [pc, #4]	; (8008270 <__errno+0x8>)
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	2000000c 	.word	0x2000000c

08008274 <__sflush_r>:
 8008274:	898a      	ldrh	r2, [r1, #12]
 8008276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827a:	4605      	mov	r5, r0
 800827c:	0710      	lsls	r0, r2, #28
 800827e:	460c      	mov	r4, r1
 8008280:	d458      	bmi.n	8008334 <__sflush_r+0xc0>
 8008282:	684b      	ldr	r3, [r1, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	dc05      	bgt.n	8008294 <__sflush_r+0x20>
 8008288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	dc02      	bgt.n	8008294 <__sflush_r+0x20>
 800828e:	2000      	movs	r0, #0
 8008290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008296:	2e00      	cmp	r6, #0
 8008298:	d0f9      	beq.n	800828e <__sflush_r+0x1a>
 800829a:	2300      	movs	r3, #0
 800829c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082a0:	682f      	ldr	r7, [r5, #0]
 80082a2:	602b      	str	r3, [r5, #0]
 80082a4:	d032      	beq.n	800830c <__sflush_r+0x98>
 80082a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	075a      	lsls	r2, r3, #29
 80082ac:	d505      	bpl.n	80082ba <__sflush_r+0x46>
 80082ae:	6863      	ldr	r3, [r4, #4]
 80082b0:	1ac0      	subs	r0, r0, r3
 80082b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082b4:	b10b      	cbz	r3, 80082ba <__sflush_r+0x46>
 80082b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082b8:	1ac0      	subs	r0, r0, r3
 80082ba:	2300      	movs	r3, #0
 80082bc:	4602      	mov	r2, r0
 80082be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082c0:	6a21      	ldr	r1, [r4, #32]
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b0      	blx	r6
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	d106      	bne.n	80082da <__sflush_r+0x66>
 80082cc:	6829      	ldr	r1, [r5, #0]
 80082ce:	291d      	cmp	r1, #29
 80082d0:	d82c      	bhi.n	800832c <__sflush_r+0xb8>
 80082d2:	4a2a      	ldr	r2, [pc, #168]	; (800837c <__sflush_r+0x108>)
 80082d4:	40ca      	lsrs	r2, r1
 80082d6:	07d6      	lsls	r6, r2, #31
 80082d8:	d528      	bpl.n	800832c <__sflush_r+0xb8>
 80082da:	2200      	movs	r2, #0
 80082dc:	6062      	str	r2, [r4, #4]
 80082de:	04d9      	lsls	r1, r3, #19
 80082e0:	6922      	ldr	r2, [r4, #16]
 80082e2:	6022      	str	r2, [r4, #0]
 80082e4:	d504      	bpl.n	80082f0 <__sflush_r+0x7c>
 80082e6:	1c42      	adds	r2, r0, #1
 80082e8:	d101      	bne.n	80082ee <__sflush_r+0x7a>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	b903      	cbnz	r3, 80082f0 <__sflush_r+0x7c>
 80082ee:	6560      	str	r0, [r4, #84]	; 0x54
 80082f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082f2:	602f      	str	r7, [r5, #0]
 80082f4:	2900      	cmp	r1, #0
 80082f6:	d0ca      	beq.n	800828e <__sflush_r+0x1a>
 80082f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082fc:	4299      	cmp	r1, r3
 80082fe:	d002      	beq.n	8008306 <__sflush_r+0x92>
 8008300:	4628      	mov	r0, r5
 8008302:	f000 fabf 	bl	8008884 <_free_r>
 8008306:	2000      	movs	r0, #0
 8008308:	6360      	str	r0, [r4, #52]	; 0x34
 800830a:	e7c1      	b.n	8008290 <__sflush_r+0x1c>
 800830c:	6a21      	ldr	r1, [r4, #32]
 800830e:	2301      	movs	r3, #1
 8008310:	4628      	mov	r0, r5
 8008312:	47b0      	blx	r6
 8008314:	1c41      	adds	r1, r0, #1
 8008316:	d1c7      	bne.n	80082a8 <__sflush_r+0x34>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0c4      	beq.n	80082a8 <__sflush_r+0x34>
 800831e:	2b1d      	cmp	r3, #29
 8008320:	d001      	beq.n	8008326 <__sflush_r+0xb2>
 8008322:	2b16      	cmp	r3, #22
 8008324:	d101      	bne.n	800832a <__sflush_r+0xb6>
 8008326:	602f      	str	r7, [r5, #0]
 8008328:	e7b1      	b.n	800828e <__sflush_r+0x1a>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	e7ad      	b.n	8008290 <__sflush_r+0x1c>
 8008334:	690f      	ldr	r7, [r1, #16]
 8008336:	2f00      	cmp	r7, #0
 8008338:	d0a9      	beq.n	800828e <__sflush_r+0x1a>
 800833a:	0793      	lsls	r3, r2, #30
 800833c:	680e      	ldr	r6, [r1, #0]
 800833e:	bf08      	it	eq
 8008340:	694b      	ldreq	r3, [r1, #20]
 8008342:	600f      	str	r7, [r1, #0]
 8008344:	bf18      	it	ne
 8008346:	2300      	movne	r3, #0
 8008348:	eba6 0807 	sub.w	r8, r6, r7
 800834c:	608b      	str	r3, [r1, #8]
 800834e:	f1b8 0f00 	cmp.w	r8, #0
 8008352:	dd9c      	ble.n	800828e <__sflush_r+0x1a>
 8008354:	6a21      	ldr	r1, [r4, #32]
 8008356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008358:	4643      	mov	r3, r8
 800835a:	463a      	mov	r2, r7
 800835c:	4628      	mov	r0, r5
 800835e:	47b0      	blx	r6
 8008360:	2800      	cmp	r0, #0
 8008362:	dc06      	bgt.n	8008372 <__sflush_r+0xfe>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	f04f 30ff 	mov.w	r0, #4294967295
 8008370:	e78e      	b.n	8008290 <__sflush_r+0x1c>
 8008372:	4407      	add	r7, r0
 8008374:	eba8 0800 	sub.w	r8, r8, r0
 8008378:	e7e9      	b.n	800834e <__sflush_r+0xda>
 800837a:	bf00      	nop
 800837c:	20400001 	.word	0x20400001

08008380 <_fflush_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	690b      	ldr	r3, [r1, #16]
 8008384:	4605      	mov	r5, r0
 8008386:	460c      	mov	r4, r1
 8008388:	b913      	cbnz	r3, 8008390 <_fflush_r+0x10>
 800838a:	2500      	movs	r5, #0
 800838c:	4628      	mov	r0, r5
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	b118      	cbz	r0, 800839a <_fflush_r+0x1a>
 8008392:	6983      	ldr	r3, [r0, #24]
 8008394:	b90b      	cbnz	r3, 800839a <_fflush_r+0x1a>
 8008396:	f000 f899 	bl	80084cc <__sinit>
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <_fflush_r+0x6c>)
 800839c:	429c      	cmp	r4, r3
 800839e:	d11b      	bne.n	80083d8 <_fflush_r+0x58>
 80083a0:	686c      	ldr	r4, [r5, #4]
 80083a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0ef      	beq.n	800838a <_fflush_r+0xa>
 80083aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083ac:	07d0      	lsls	r0, r2, #31
 80083ae:	d404      	bmi.n	80083ba <_fflush_r+0x3a>
 80083b0:	0599      	lsls	r1, r3, #22
 80083b2:	d402      	bmi.n	80083ba <_fflush_r+0x3a>
 80083b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083b6:	f000 fa0c 	bl	80087d2 <__retarget_lock_acquire_recursive>
 80083ba:	4628      	mov	r0, r5
 80083bc:	4621      	mov	r1, r4
 80083be:	f7ff ff59 	bl	8008274 <__sflush_r>
 80083c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083c4:	07da      	lsls	r2, r3, #31
 80083c6:	4605      	mov	r5, r0
 80083c8:	d4e0      	bmi.n	800838c <_fflush_r+0xc>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	059b      	lsls	r3, r3, #22
 80083ce:	d4dd      	bmi.n	800838c <_fflush_r+0xc>
 80083d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083d2:	f000 f9ff 	bl	80087d4 <__retarget_lock_release_recursive>
 80083d6:	e7d9      	b.n	800838c <_fflush_r+0xc>
 80083d8:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <_fflush_r+0x70>)
 80083da:	429c      	cmp	r4, r3
 80083dc:	d101      	bne.n	80083e2 <_fflush_r+0x62>
 80083de:	68ac      	ldr	r4, [r5, #8]
 80083e0:	e7df      	b.n	80083a2 <_fflush_r+0x22>
 80083e2:	4b04      	ldr	r3, [pc, #16]	; (80083f4 <_fflush_r+0x74>)
 80083e4:	429c      	cmp	r4, r3
 80083e6:	bf08      	it	eq
 80083e8:	68ec      	ldreq	r4, [r5, #12]
 80083ea:	e7da      	b.n	80083a2 <_fflush_r+0x22>
 80083ec:	0800f414 	.word	0x0800f414
 80083f0:	0800f434 	.word	0x0800f434
 80083f4:	0800f3f4 	.word	0x0800f3f4

080083f8 <fflush>:
 80083f8:	4601      	mov	r1, r0
 80083fa:	b920      	cbnz	r0, 8008406 <fflush+0xe>
 80083fc:	4b04      	ldr	r3, [pc, #16]	; (8008410 <fflush+0x18>)
 80083fe:	4905      	ldr	r1, [pc, #20]	; (8008414 <fflush+0x1c>)
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b933 	b.w	800866c <_fwalk_reent>
 8008406:	4b04      	ldr	r3, [pc, #16]	; (8008418 <fflush+0x20>)
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f7ff bfb9 	b.w	8008380 <_fflush_r>
 800840e:	bf00      	nop
 8008410:	0800f454 	.word	0x0800f454
 8008414:	08008381 	.word	0x08008381
 8008418:	2000000c 	.word	0x2000000c

0800841c <std>:
 800841c:	2300      	movs	r3, #0
 800841e:	b510      	push	{r4, lr}
 8008420:	4604      	mov	r4, r0
 8008422:	e9c0 3300 	strd	r3, r3, [r0]
 8008426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800842a:	6083      	str	r3, [r0, #8]
 800842c:	8181      	strh	r1, [r0, #12]
 800842e:	6643      	str	r3, [r0, #100]	; 0x64
 8008430:	81c2      	strh	r2, [r0, #14]
 8008432:	6183      	str	r3, [r0, #24]
 8008434:	4619      	mov	r1, r3
 8008436:	2208      	movs	r2, #8
 8008438:	305c      	adds	r0, #92	; 0x5c
 800843a:	f000 fa05 	bl	8008848 <memset>
 800843e:	4b05      	ldr	r3, [pc, #20]	; (8008454 <std+0x38>)
 8008440:	6263      	str	r3, [r4, #36]	; 0x24
 8008442:	4b05      	ldr	r3, [pc, #20]	; (8008458 <std+0x3c>)
 8008444:	62a3      	str	r3, [r4, #40]	; 0x28
 8008446:	4b05      	ldr	r3, [pc, #20]	; (800845c <std+0x40>)
 8008448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <std+0x44>)
 800844c:	6224      	str	r4, [r4, #32]
 800844e:	6323      	str	r3, [r4, #48]	; 0x30
 8008450:	bd10      	pop	{r4, pc}
 8008452:	bf00      	nop
 8008454:	08009afd 	.word	0x08009afd
 8008458:	08009b1f 	.word	0x08009b1f
 800845c:	08009b57 	.word	0x08009b57
 8008460:	08009b7b 	.word	0x08009b7b

08008464 <_cleanup_r>:
 8008464:	4901      	ldr	r1, [pc, #4]	; (800846c <_cleanup_r+0x8>)
 8008466:	f000 b901 	b.w	800866c <_fwalk_reent>
 800846a:	bf00      	nop
 800846c:	08008381 	.word	0x08008381

08008470 <__sfmoreglue>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	2268      	movs	r2, #104	; 0x68
 8008474:	1e4d      	subs	r5, r1, #1
 8008476:	4355      	muls	r5, r2
 8008478:	460e      	mov	r6, r1
 800847a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800847e:	f000 fa6d 	bl	800895c <_malloc_r>
 8008482:	4604      	mov	r4, r0
 8008484:	b140      	cbz	r0, 8008498 <__sfmoreglue+0x28>
 8008486:	2100      	movs	r1, #0
 8008488:	e9c0 1600 	strd	r1, r6, [r0]
 800848c:	300c      	adds	r0, #12
 800848e:	60a0      	str	r0, [r4, #8]
 8008490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008494:	f000 f9d8 	bl	8008848 <memset>
 8008498:	4620      	mov	r0, r4
 800849a:	bd70      	pop	{r4, r5, r6, pc}

0800849c <__sfp_lock_acquire>:
 800849c:	4801      	ldr	r0, [pc, #4]	; (80084a4 <__sfp_lock_acquire+0x8>)
 800849e:	f000 b998 	b.w	80087d2 <__retarget_lock_acquire_recursive>
 80084a2:	bf00      	nop
 80084a4:	20000ee1 	.word	0x20000ee1

080084a8 <__sfp_lock_release>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__sfp_lock_release+0x8>)
 80084aa:	f000 b993 	b.w	80087d4 <__retarget_lock_release_recursive>
 80084ae:	bf00      	nop
 80084b0:	20000ee1 	.word	0x20000ee1

080084b4 <__sinit_lock_acquire>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__sinit_lock_acquire+0x8>)
 80084b6:	f000 b98c 	b.w	80087d2 <__retarget_lock_acquire_recursive>
 80084ba:	bf00      	nop
 80084bc:	20000ee2 	.word	0x20000ee2

080084c0 <__sinit_lock_release>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__sinit_lock_release+0x8>)
 80084c2:	f000 b987 	b.w	80087d4 <__retarget_lock_release_recursive>
 80084c6:	bf00      	nop
 80084c8:	20000ee2 	.word	0x20000ee2

080084cc <__sinit>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	f7ff fff0 	bl	80084b4 <__sinit_lock_acquire>
 80084d4:	69a3      	ldr	r3, [r4, #24]
 80084d6:	b11b      	cbz	r3, 80084e0 <__sinit+0x14>
 80084d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084dc:	f7ff bff0 	b.w	80084c0 <__sinit_lock_release>
 80084e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084e4:	6523      	str	r3, [r4, #80]	; 0x50
 80084e6:	4b13      	ldr	r3, [pc, #76]	; (8008534 <__sinit+0x68>)
 80084e8:	4a13      	ldr	r2, [pc, #76]	; (8008538 <__sinit+0x6c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	bf04      	itt	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	61a3      	streq	r3, [r4, #24]
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 f820 	bl	800853c <__sfp>
 80084fc:	6060      	str	r0, [r4, #4]
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 f81c 	bl	800853c <__sfp>
 8008504:	60a0      	str	r0, [r4, #8]
 8008506:	4620      	mov	r0, r4
 8008508:	f000 f818 	bl	800853c <__sfp>
 800850c:	2200      	movs	r2, #0
 800850e:	60e0      	str	r0, [r4, #12]
 8008510:	2104      	movs	r1, #4
 8008512:	6860      	ldr	r0, [r4, #4]
 8008514:	f7ff ff82 	bl	800841c <std>
 8008518:	68a0      	ldr	r0, [r4, #8]
 800851a:	2201      	movs	r2, #1
 800851c:	2109      	movs	r1, #9
 800851e:	f7ff ff7d 	bl	800841c <std>
 8008522:	68e0      	ldr	r0, [r4, #12]
 8008524:	2202      	movs	r2, #2
 8008526:	2112      	movs	r1, #18
 8008528:	f7ff ff78 	bl	800841c <std>
 800852c:	2301      	movs	r3, #1
 800852e:	61a3      	str	r3, [r4, #24]
 8008530:	e7d2      	b.n	80084d8 <__sinit+0xc>
 8008532:	bf00      	nop
 8008534:	0800f454 	.word	0x0800f454
 8008538:	08008465 	.word	0x08008465

0800853c <__sfp>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	4607      	mov	r7, r0
 8008540:	f7ff ffac 	bl	800849c <__sfp_lock_acquire>
 8008544:	4b1e      	ldr	r3, [pc, #120]	; (80085c0 <__sfp+0x84>)
 8008546:	681e      	ldr	r6, [r3, #0]
 8008548:	69b3      	ldr	r3, [r6, #24]
 800854a:	b913      	cbnz	r3, 8008552 <__sfp+0x16>
 800854c:	4630      	mov	r0, r6
 800854e:	f7ff ffbd 	bl	80084cc <__sinit>
 8008552:	3648      	adds	r6, #72	; 0x48
 8008554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008558:	3b01      	subs	r3, #1
 800855a:	d503      	bpl.n	8008564 <__sfp+0x28>
 800855c:	6833      	ldr	r3, [r6, #0]
 800855e:	b30b      	cbz	r3, 80085a4 <__sfp+0x68>
 8008560:	6836      	ldr	r6, [r6, #0]
 8008562:	e7f7      	b.n	8008554 <__sfp+0x18>
 8008564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008568:	b9d5      	cbnz	r5, 80085a0 <__sfp+0x64>
 800856a:	4b16      	ldr	r3, [pc, #88]	; (80085c4 <__sfp+0x88>)
 800856c:	60e3      	str	r3, [r4, #12]
 800856e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008572:	6665      	str	r5, [r4, #100]	; 0x64
 8008574:	f000 f92c 	bl	80087d0 <__retarget_lock_init_recursive>
 8008578:	f7ff ff96 	bl	80084a8 <__sfp_lock_release>
 800857c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008584:	6025      	str	r5, [r4, #0]
 8008586:	61a5      	str	r5, [r4, #24]
 8008588:	2208      	movs	r2, #8
 800858a:	4629      	mov	r1, r5
 800858c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008590:	f000 f95a 	bl	8008848 <memset>
 8008594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800859c:	4620      	mov	r0, r4
 800859e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a0:	3468      	adds	r4, #104	; 0x68
 80085a2:	e7d9      	b.n	8008558 <__sfp+0x1c>
 80085a4:	2104      	movs	r1, #4
 80085a6:	4638      	mov	r0, r7
 80085a8:	f7ff ff62 	bl	8008470 <__sfmoreglue>
 80085ac:	4604      	mov	r4, r0
 80085ae:	6030      	str	r0, [r6, #0]
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d1d5      	bne.n	8008560 <__sfp+0x24>
 80085b4:	f7ff ff78 	bl	80084a8 <__sfp_lock_release>
 80085b8:	230c      	movs	r3, #12
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	e7ee      	b.n	800859c <__sfp+0x60>
 80085be:	bf00      	nop
 80085c0:	0800f454 	.word	0x0800f454
 80085c4:	ffff0001 	.word	0xffff0001

080085c8 <fiprintf>:
 80085c8:	b40e      	push	{r1, r2, r3}
 80085ca:	b503      	push	{r0, r1, lr}
 80085cc:	4601      	mov	r1, r0
 80085ce:	ab03      	add	r3, sp, #12
 80085d0:	4805      	ldr	r0, [pc, #20]	; (80085e8 <fiprintf+0x20>)
 80085d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d6:	6800      	ldr	r0, [r0, #0]
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	f000 fa5d 	bl	8008a98 <_vfiprintf_r>
 80085de:	b002      	add	sp, #8
 80085e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e4:	b003      	add	sp, #12
 80085e6:	4770      	bx	lr
 80085e8:	2000000c 	.word	0x2000000c

080085ec <_fputc_r>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	460e      	mov	r6, r1
 80085f0:	4614      	mov	r4, r2
 80085f2:	4605      	mov	r5, r0
 80085f4:	b118      	cbz	r0, 80085fe <_fputc_r+0x12>
 80085f6:	6983      	ldr	r3, [r0, #24]
 80085f8:	b90b      	cbnz	r3, 80085fe <_fputc_r+0x12>
 80085fa:	f7ff ff67 	bl	80084cc <__sinit>
 80085fe:	4b14      	ldr	r3, [pc, #80]	; (8008650 <_fputc_r+0x64>)
 8008600:	429c      	cmp	r4, r3
 8008602:	d11a      	bne.n	800863a <_fputc_r+0x4e>
 8008604:	686c      	ldr	r4, [r5, #4]
 8008606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008608:	07d8      	lsls	r0, r3, #31
 800860a:	d405      	bmi.n	8008618 <_fputc_r+0x2c>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	0599      	lsls	r1, r3, #22
 8008610:	d402      	bmi.n	8008618 <_fputc_r+0x2c>
 8008612:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008614:	f000 f8dd 	bl	80087d2 <__retarget_lock_acquire_recursive>
 8008618:	4622      	mov	r2, r4
 800861a:	4628      	mov	r0, r5
 800861c:	4631      	mov	r1, r6
 800861e:	f001 f9ef 	bl	8009a00 <_putc_r>
 8008622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008624:	07da      	lsls	r2, r3, #31
 8008626:	4605      	mov	r5, r0
 8008628:	d405      	bmi.n	8008636 <_fputc_r+0x4a>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	059b      	lsls	r3, r3, #22
 800862e:	d402      	bmi.n	8008636 <_fputc_r+0x4a>
 8008630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008632:	f000 f8cf 	bl	80087d4 <__retarget_lock_release_recursive>
 8008636:	4628      	mov	r0, r5
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <_fputc_r+0x68>)
 800863c:	429c      	cmp	r4, r3
 800863e:	d101      	bne.n	8008644 <_fputc_r+0x58>
 8008640:	68ac      	ldr	r4, [r5, #8]
 8008642:	e7e0      	b.n	8008606 <_fputc_r+0x1a>
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <_fputc_r+0x6c>)
 8008646:	429c      	cmp	r4, r3
 8008648:	bf08      	it	eq
 800864a:	68ec      	ldreq	r4, [r5, #12]
 800864c:	e7db      	b.n	8008606 <_fputc_r+0x1a>
 800864e:	bf00      	nop
 8008650:	0800f414 	.word	0x0800f414
 8008654:	0800f434 	.word	0x0800f434
 8008658:	0800f3f4 	.word	0x0800f3f4

0800865c <fputc>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <fputc+0xc>)
 800865e:	460a      	mov	r2, r1
 8008660:	4601      	mov	r1, r0
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	f7ff bfc2 	b.w	80085ec <_fputc_r>
 8008668:	2000000c 	.word	0x2000000c

0800866c <_fwalk_reent>:
 800866c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008670:	4606      	mov	r6, r0
 8008672:	4688      	mov	r8, r1
 8008674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008678:	2700      	movs	r7, #0
 800867a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800867e:	f1b9 0901 	subs.w	r9, r9, #1
 8008682:	d505      	bpl.n	8008690 <_fwalk_reent+0x24>
 8008684:	6824      	ldr	r4, [r4, #0]
 8008686:	2c00      	cmp	r4, #0
 8008688:	d1f7      	bne.n	800867a <_fwalk_reent+0xe>
 800868a:	4638      	mov	r0, r7
 800868c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008690:	89ab      	ldrh	r3, [r5, #12]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d907      	bls.n	80086a6 <_fwalk_reent+0x3a>
 8008696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800869a:	3301      	adds	r3, #1
 800869c:	d003      	beq.n	80086a6 <_fwalk_reent+0x3a>
 800869e:	4629      	mov	r1, r5
 80086a0:	4630      	mov	r0, r6
 80086a2:	47c0      	blx	r8
 80086a4:	4307      	orrs	r7, r0
 80086a6:	3568      	adds	r5, #104	; 0x68
 80086a8:	e7e9      	b.n	800867e <_fwalk_reent+0x12>
	...

080086ac <_fwrite_r>:
 80086ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b0:	9c08      	ldr	r4, [sp, #32]
 80086b2:	468a      	mov	sl, r1
 80086b4:	4690      	mov	r8, r2
 80086b6:	fb02 f903 	mul.w	r9, r2, r3
 80086ba:	4605      	mov	r5, r0
 80086bc:	b118      	cbz	r0, 80086c6 <_fwrite_r+0x1a>
 80086be:	6983      	ldr	r3, [r0, #24]
 80086c0:	b90b      	cbnz	r3, 80086c6 <_fwrite_r+0x1a>
 80086c2:	f7ff ff03 	bl	80084cc <__sinit>
 80086c6:	4b26      	ldr	r3, [pc, #152]	; (8008760 <_fwrite_r+0xb4>)
 80086c8:	429c      	cmp	r4, r3
 80086ca:	d123      	bne.n	8008714 <_fwrite_r+0x68>
 80086cc:	686c      	ldr	r4, [r5, #4]
 80086ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086d0:	07de      	lsls	r6, r3, #31
 80086d2:	d405      	bmi.n	80086e0 <_fwrite_r+0x34>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	0598      	lsls	r0, r3, #22
 80086d8:	d402      	bmi.n	80086e0 <_fwrite_r+0x34>
 80086da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086dc:	f000 f879 	bl	80087d2 <__retarget_lock_acquire_recursive>
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	0719      	lsls	r1, r3, #28
 80086e4:	d520      	bpl.n	8008728 <_fwrite_r+0x7c>
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	b1f3      	cbz	r3, 8008728 <_fwrite_r+0x7c>
 80086ea:	2600      	movs	r6, #0
 80086ec:	454e      	cmp	r6, r9
 80086ee:	d029      	beq.n	8008744 <_fwrite_r+0x98>
 80086f0:	68a7      	ldr	r7, [r4, #8]
 80086f2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80086f6:	3f01      	subs	r7, #1
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	60a7      	str	r7, [r4, #8]
 80086fc:	da04      	bge.n	8008708 <_fwrite_r+0x5c>
 80086fe:	69a3      	ldr	r3, [r4, #24]
 8008700:	429f      	cmp	r7, r3
 8008702:	db19      	blt.n	8008738 <_fwrite_r+0x8c>
 8008704:	290a      	cmp	r1, #10
 8008706:	d017      	beq.n	8008738 <_fwrite_r+0x8c>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	6022      	str	r2, [r4, #0]
 800870e:	7019      	strb	r1, [r3, #0]
 8008710:	3601      	adds	r6, #1
 8008712:	e7eb      	b.n	80086ec <_fwrite_r+0x40>
 8008714:	4b13      	ldr	r3, [pc, #76]	; (8008764 <_fwrite_r+0xb8>)
 8008716:	429c      	cmp	r4, r3
 8008718:	d101      	bne.n	800871e <_fwrite_r+0x72>
 800871a:	68ac      	ldr	r4, [r5, #8]
 800871c:	e7d7      	b.n	80086ce <_fwrite_r+0x22>
 800871e:	4b12      	ldr	r3, [pc, #72]	; (8008768 <_fwrite_r+0xbc>)
 8008720:	429c      	cmp	r4, r3
 8008722:	bf08      	it	eq
 8008724:	68ec      	ldreq	r4, [r5, #12]
 8008726:	e7d2      	b.n	80086ce <_fwrite_r+0x22>
 8008728:	4621      	mov	r1, r4
 800872a:	4628      	mov	r0, r5
 800872c:	f002 f93c 	bl	800a9a8 <__swsetup_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	d0da      	beq.n	80086ea <_fwrite_r+0x3e>
 8008734:	2600      	movs	r6, #0
 8008736:	e005      	b.n	8008744 <_fwrite_r+0x98>
 8008738:	4622      	mov	r2, r4
 800873a:	4628      	mov	r0, r5
 800873c:	f002 f8d0 	bl	800a8e0 <__swbuf_r>
 8008740:	3001      	adds	r0, #1
 8008742:	d1e5      	bne.n	8008710 <_fwrite_r+0x64>
 8008744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008746:	07da      	lsls	r2, r3, #31
 8008748:	d405      	bmi.n	8008756 <_fwrite_r+0xaa>
 800874a:	89a3      	ldrh	r3, [r4, #12]
 800874c:	059b      	lsls	r3, r3, #22
 800874e:	d402      	bmi.n	8008756 <_fwrite_r+0xaa>
 8008750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008752:	f000 f83f 	bl	80087d4 <__retarget_lock_release_recursive>
 8008756:	fbb6 f0f8 	udiv	r0, r6, r8
 800875a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875e:	bf00      	nop
 8008760:	0800f414 	.word	0x0800f414
 8008764:	0800f434 	.word	0x0800f434
 8008768:	0800f3f4 	.word	0x0800f3f4

0800876c <fwrite>:
 800876c:	b507      	push	{r0, r1, r2, lr}
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	4613      	mov	r3, r2
 8008772:	460a      	mov	r2, r1
 8008774:	4601      	mov	r1, r0
 8008776:	4803      	ldr	r0, [pc, #12]	; (8008784 <fwrite+0x18>)
 8008778:	6800      	ldr	r0, [r0, #0]
 800877a:	f7ff ff97 	bl	80086ac <_fwrite_r>
 800877e:	b003      	add	sp, #12
 8008780:	f85d fb04 	ldr.w	pc, [sp], #4
 8008784:	2000000c 	.word	0x2000000c

08008788 <__libc_init_array>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4d0d      	ldr	r5, [pc, #52]	; (80087c0 <__libc_init_array+0x38>)
 800878c:	4c0d      	ldr	r4, [pc, #52]	; (80087c4 <__libc_init_array+0x3c>)
 800878e:	1b64      	subs	r4, r4, r5
 8008790:	10a4      	asrs	r4, r4, #2
 8008792:	2600      	movs	r6, #0
 8008794:	42a6      	cmp	r6, r4
 8008796:	d109      	bne.n	80087ac <__libc_init_array+0x24>
 8008798:	4d0b      	ldr	r5, [pc, #44]	; (80087c8 <__libc_init_array+0x40>)
 800879a:	4c0c      	ldr	r4, [pc, #48]	; (80087cc <__libc_init_array+0x44>)
 800879c:	f004 fb08 	bl	800cdb0 <_init>
 80087a0:	1b64      	subs	r4, r4, r5
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	2600      	movs	r6, #0
 80087a6:	42a6      	cmp	r6, r4
 80087a8:	d105      	bne.n	80087b6 <__libc_init_array+0x2e>
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b0:	4798      	blx	r3
 80087b2:	3601      	adds	r6, #1
 80087b4:	e7ee      	b.n	8008794 <__libc_init_array+0xc>
 80087b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ba:	4798      	blx	r3
 80087bc:	3601      	adds	r6, #1
 80087be:	e7f2      	b.n	80087a6 <__libc_init_array+0x1e>
 80087c0:	0800f764 	.word	0x0800f764
 80087c4:	0800f764 	.word	0x0800f764
 80087c8:	0800f764 	.word	0x0800f764
 80087cc:	0800f768 	.word	0x0800f768

080087d0 <__retarget_lock_init_recursive>:
 80087d0:	4770      	bx	lr

080087d2 <__retarget_lock_acquire_recursive>:
 80087d2:	4770      	bx	lr

080087d4 <__retarget_lock_release_recursive>:
 80087d4:	4770      	bx	lr
	...

080087d8 <malloc>:
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <malloc+0xc>)
 80087da:	4601      	mov	r1, r0
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	f000 b8bd 	b.w	800895c <_malloc_r>
 80087e2:	bf00      	nop
 80087e4:	2000000c 	.word	0x2000000c

080087e8 <free>:
 80087e8:	4b02      	ldr	r3, [pc, #8]	; (80087f4 <free+0xc>)
 80087ea:	4601      	mov	r1, r0
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	f000 b849 	b.w	8008884 <_free_r>
 80087f2:	bf00      	nop
 80087f4:	2000000c 	.word	0x2000000c

080087f8 <memcpy>:
 80087f8:	440a      	add	r2, r1
 80087fa:	4291      	cmp	r1, r2
 80087fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008800:	d100      	bne.n	8008804 <memcpy+0xc>
 8008802:	4770      	bx	lr
 8008804:	b510      	push	{r4, lr}
 8008806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800880a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800880e:	4291      	cmp	r1, r2
 8008810:	d1f9      	bne.n	8008806 <memcpy+0xe>
 8008812:	bd10      	pop	{r4, pc}

08008814 <memmove>:
 8008814:	4288      	cmp	r0, r1
 8008816:	b510      	push	{r4, lr}
 8008818:	eb01 0402 	add.w	r4, r1, r2
 800881c:	d902      	bls.n	8008824 <memmove+0x10>
 800881e:	4284      	cmp	r4, r0
 8008820:	4623      	mov	r3, r4
 8008822:	d807      	bhi.n	8008834 <memmove+0x20>
 8008824:	1e43      	subs	r3, r0, #1
 8008826:	42a1      	cmp	r1, r4
 8008828:	d008      	beq.n	800883c <memmove+0x28>
 800882a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008832:	e7f8      	b.n	8008826 <memmove+0x12>
 8008834:	4402      	add	r2, r0
 8008836:	4601      	mov	r1, r0
 8008838:	428a      	cmp	r2, r1
 800883a:	d100      	bne.n	800883e <memmove+0x2a>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008846:	e7f7      	b.n	8008838 <memmove+0x24>

08008848 <memset>:
 8008848:	4402      	add	r2, r0
 800884a:	4603      	mov	r3, r0
 800884c:	4293      	cmp	r3, r2
 800884e:	d100      	bne.n	8008852 <memset+0xa>
 8008850:	4770      	bx	lr
 8008852:	f803 1b01 	strb.w	r1, [r3], #1
 8008856:	e7f9      	b.n	800884c <memset+0x4>

08008858 <_calloc_r>:
 8008858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800885a:	fba1 2402 	umull	r2, r4, r1, r2
 800885e:	b94c      	cbnz	r4, 8008874 <_calloc_r+0x1c>
 8008860:	4611      	mov	r1, r2
 8008862:	9201      	str	r2, [sp, #4]
 8008864:	f000 f87a 	bl	800895c <_malloc_r>
 8008868:	9a01      	ldr	r2, [sp, #4]
 800886a:	4605      	mov	r5, r0
 800886c:	b930      	cbnz	r0, 800887c <_calloc_r+0x24>
 800886e:	4628      	mov	r0, r5
 8008870:	b003      	add	sp, #12
 8008872:	bd30      	pop	{r4, r5, pc}
 8008874:	220c      	movs	r2, #12
 8008876:	6002      	str	r2, [r0, #0]
 8008878:	2500      	movs	r5, #0
 800887a:	e7f8      	b.n	800886e <_calloc_r+0x16>
 800887c:	4621      	mov	r1, r4
 800887e:	f7ff ffe3 	bl	8008848 <memset>
 8008882:	e7f4      	b.n	800886e <_calloc_r+0x16>

08008884 <_free_r>:
 8008884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008886:	2900      	cmp	r1, #0
 8008888:	d044      	beq.n	8008914 <_free_r+0x90>
 800888a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800888e:	9001      	str	r0, [sp, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f1a1 0404 	sub.w	r4, r1, #4
 8008896:	bfb8      	it	lt
 8008898:	18e4      	addlt	r4, r4, r3
 800889a:	f003 fb85 	bl	800bfa8 <__malloc_lock>
 800889e:	4a1e      	ldr	r2, [pc, #120]	; (8008918 <_free_r+0x94>)
 80088a0:	9801      	ldr	r0, [sp, #4]
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	b933      	cbnz	r3, 80088b4 <_free_r+0x30>
 80088a6:	6063      	str	r3, [r4, #4]
 80088a8:	6014      	str	r4, [r2, #0]
 80088aa:	b003      	add	sp, #12
 80088ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088b0:	f003 bb80 	b.w	800bfb4 <__malloc_unlock>
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	d908      	bls.n	80088ca <_free_r+0x46>
 80088b8:	6825      	ldr	r5, [r4, #0]
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	428b      	cmp	r3, r1
 80088be:	bf01      	itttt	eq
 80088c0:	6819      	ldreq	r1, [r3, #0]
 80088c2:	685b      	ldreq	r3, [r3, #4]
 80088c4:	1949      	addeq	r1, r1, r5
 80088c6:	6021      	streq	r1, [r4, #0]
 80088c8:	e7ed      	b.n	80088a6 <_free_r+0x22>
 80088ca:	461a      	mov	r2, r3
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	b10b      	cbz	r3, 80088d4 <_free_r+0x50>
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	d9fa      	bls.n	80088ca <_free_r+0x46>
 80088d4:	6811      	ldr	r1, [r2, #0]
 80088d6:	1855      	adds	r5, r2, r1
 80088d8:	42a5      	cmp	r5, r4
 80088da:	d10b      	bne.n	80088f4 <_free_r+0x70>
 80088dc:	6824      	ldr	r4, [r4, #0]
 80088de:	4421      	add	r1, r4
 80088e0:	1854      	adds	r4, r2, r1
 80088e2:	42a3      	cmp	r3, r4
 80088e4:	6011      	str	r1, [r2, #0]
 80088e6:	d1e0      	bne.n	80088aa <_free_r+0x26>
 80088e8:	681c      	ldr	r4, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	6053      	str	r3, [r2, #4]
 80088ee:	4421      	add	r1, r4
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	e7da      	b.n	80088aa <_free_r+0x26>
 80088f4:	d902      	bls.n	80088fc <_free_r+0x78>
 80088f6:	230c      	movs	r3, #12
 80088f8:	6003      	str	r3, [r0, #0]
 80088fa:	e7d6      	b.n	80088aa <_free_r+0x26>
 80088fc:	6825      	ldr	r5, [r4, #0]
 80088fe:	1961      	adds	r1, r4, r5
 8008900:	428b      	cmp	r3, r1
 8008902:	bf04      	itt	eq
 8008904:	6819      	ldreq	r1, [r3, #0]
 8008906:	685b      	ldreq	r3, [r3, #4]
 8008908:	6063      	str	r3, [r4, #4]
 800890a:	bf04      	itt	eq
 800890c:	1949      	addeq	r1, r1, r5
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	6054      	str	r4, [r2, #4]
 8008912:	e7ca      	b.n	80088aa <_free_r+0x26>
 8008914:	b003      	add	sp, #12
 8008916:	bd30      	pop	{r4, r5, pc}
 8008918:	20000ee4 	.word	0x20000ee4

0800891c <sbrk_aligned>:
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	4e0e      	ldr	r6, [pc, #56]	; (8008958 <sbrk_aligned+0x3c>)
 8008920:	460c      	mov	r4, r1
 8008922:	6831      	ldr	r1, [r6, #0]
 8008924:	4605      	mov	r5, r0
 8008926:	b911      	cbnz	r1, 800892e <sbrk_aligned+0x12>
 8008928:	f001 f8b2 	bl	8009a90 <_sbrk_r>
 800892c:	6030      	str	r0, [r6, #0]
 800892e:	4621      	mov	r1, r4
 8008930:	4628      	mov	r0, r5
 8008932:	f001 f8ad 	bl	8009a90 <_sbrk_r>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	d00a      	beq.n	8008950 <sbrk_aligned+0x34>
 800893a:	1cc4      	adds	r4, r0, #3
 800893c:	f024 0403 	bic.w	r4, r4, #3
 8008940:	42a0      	cmp	r0, r4
 8008942:	d007      	beq.n	8008954 <sbrk_aligned+0x38>
 8008944:	1a21      	subs	r1, r4, r0
 8008946:	4628      	mov	r0, r5
 8008948:	f001 f8a2 	bl	8009a90 <_sbrk_r>
 800894c:	3001      	adds	r0, #1
 800894e:	d101      	bne.n	8008954 <sbrk_aligned+0x38>
 8008950:	f04f 34ff 	mov.w	r4, #4294967295
 8008954:	4620      	mov	r0, r4
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	20000ee8 	.word	0x20000ee8

0800895c <_malloc_r>:
 800895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008960:	1ccd      	adds	r5, r1, #3
 8008962:	f025 0503 	bic.w	r5, r5, #3
 8008966:	3508      	adds	r5, #8
 8008968:	2d0c      	cmp	r5, #12
 800896a:	bf38      	it	cc
 800896c:	250c      	movcc	r5, #12
 800896e:	2d00      	cmp	r5, #0
 8008970:	4607      	mov	r7, r0
 8008972:	db01      	blt.n	8008978 <_malloc_r+0x1c>
 8008974:	42a9      	cmp	r1, r5
 8008976:	d905      	bls.n	8008984 <_malloc_r+0x28>
 8008978:	230c      	movs	r3, #12
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	2600      	movs	r6, #0
 800897e:	4630      	mov	r0, r6
 8008980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008984:	4e2e      	ldr	r6, [pc, #184]	; (8008a40 <_malloc_r+0xe4>)
 8008986:	f003 fb0f 	bl	800bfa8 <__malloc_lock>
 800898a:	6833      	ldr	r3, [r6, #0]
 800898c:	461c      	mov	r4, r3
 800898e:	bb34      	cbnz	r4, 80089de <_malloc_r+0x82>
 8008990:	4629      	mov	r1, r5
 8008992:	4638      	mov	r0, r7
 8008994:	f7ff ffc2 	bl	800891c <sbrk_aligned>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	4604      	mov	r4, r0
 800899c:	d14d      	bne.n	8008a3a <_malloc_r+0xde>
 800899e:	6834      	ldr	r4, [r6, #0]
 80089a0:	4626      	mov	r6, r4
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	d140      	bne.n	8008a28 <_malloc_r+0xcc>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	4631      	mov	r1, r6
 80089aa:	4638      	mov	r0, r7
 80089ac:	eb04 0803 	add.w	r8, r4, r3
 80089b0:	f001 f86e 	bl	8009a90 <_sbrk_r>
 80089b4:	4580      	cmp	r8, r0
 80089b6:	d13a      	bne.n	8008a2e <_malloc_r+0xd2>
 80089b8:	6821      	ldr	r1, [r4, #0]
 80089ba:	3503      	adds	r5, #3
 80089bc:	1a6d      	subs	r5, r5, r1
 80089be:	f025 0503 	bic.w	r5, r5, #3
 80089c2:	3508      	adds	r5, #8
 80089c4:	2d0c      	cmp	r5, #12
 80089c6:	bf38      	it	cc
 80089c8:	250c      	movcc	r5, #12
 80089ca:	4629      	mov	r1, r5
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7ff ffa5 	bl	800891c <sbrk_aligned>
 80089d2:	3001      	adds	r0, #1
 80089d4:	d02b      	beq.n	8008a2e <_malloc_r+0xd2>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	442b      	add	r3, r5
 80089da:	6023      	str	r3, [r4, #0]
 80089dc:	e00e      	b.n	80089fc <_malloc_r+0xa0>
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	1b52      	subs	r2, r2, r5
 80089e2:	d41e      	bmi.n	8008a22 <_malloc_r+0xc6>
 80089e4:	2a0b      	cmp	r2, #11
 80089e6:	d916      	bls.n	8008a16 <_malloc_r+0xba>
 80089e8:	1961      	adds	r1, r4, r5
 80089ea:	42a3      	cmp	r3, r4
 80089ec:	6025      	str	r5, [r4, #0]
 80089ee:	bf18      	it	ne
 80089f0:	6059      	strne	r1, [r3, #4]
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	bf08      	it	eq
 80089f6:	6031      	streq	r1, [r6, #0]
 80089f8:	5162      	str	r2, [r4, r5]
 80089fa:	604b      	str	r3, [r1, #4]
 80089fc:	4638      	mov	r0, r7
 80089fe:	f104 060b 	add.w	r6, r4, #11
 8008a02:	f003 fad7 	bl	800bfb4 <__malloc_unlock>
 8008a06:	f026 0607 	bic.w	r6, r6, #7
 8008a0a:	1d23      	adds	r3, r4, #4
 8008a0c:	1af2      	subs	r2, r6, r3
 8008a0e:	d0b6      	beq.n	800897e <_malloc_r+0x22>
 8008a10:	1b9b      	subs	r3, r3, r6
 8008a12:	50a3      	str	r3, [r4, r2]
 8008a14:	e7b3      	b.n	800897e <_malloc_r+0x22>
 8008a16:	6862      	ldr	r2, [r4, #4]
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	bf0c      	ite	eq
 8008a1c:	6032      	streq	r2, [r6, #0]
 8008a1e:	605a      	strne	r2, [r3, #4]
 8008a20:	e7ec      	b.n	80089fc <_malloc_r+0xa0>
 8008a22:	4623      	mov	r3, r4
 8008a24:	6864      	ldr	r4, [r4, #4]
 8008a26:	e7b2      	b.n	800898e <_malloc_r+0x32>
 8008a28:	4634      	mov	r4, r6
 8008a2a:	6876      	ldr	r6, [r6, #4]
 8008a2c:	e7b9      	b.n	80089a2 <_malloc_r+0x46>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4638      	mov	r0, r7
 8008a34:	f003 fabe 	bl	800bfb4 <__malloc_unlock>
 8008a38:	e7a1      	b.n	800897e <_malloc_r+0x22>
 8008a3a:	6025      	str	r5, [r4, #0]
 8008a3c:	e7de      	b.n	80089fc <_malloc_r+0xa0>
 8008a3e:	bf00      	nop
 8008a40:	20000ee4 	.word	0x20000ee4

08008a44 <__sfputc_r>:
 8008a44:	6893      	ldr	r3, [r2, #8]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	b410      	push	{r4}
 8008a4c:	6093      	str	r3, [r2, #8]
 8008a4e:	da08      	bge.n	8008a62 <__sfputc_r+0x1e>
 8008a50:	6994      	ldr	r4, [r2, #24]
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	db01      	blt.n	8008a5a <__sfputc_r+0x16>
 8008a56:	290a      	cmp	r1, #10
 8008a58:	d103      	bne.n	8008a62 <__sfputc_r+0x1e>
 8008a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5e:	f001 bf3f 	b.w	800a8e0 <__swbuf_r>
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	1c58      	adds	r0, r3, #1
 8008a66:	6010      	str	r0, [r2, #0]
 8008a68:	7019      	strb	r1, [r3, #0]
 8008a6a:	4608      	mov	r0, r1
 8008a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <__sfputs_r>:
 8008a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	4614      	mov	r4, r2
 8008a7a:	18d5      	adds	r5, r2, r3
 8008a7c:	42ac      	cmp	r4, r5
 8008a7e:	d101      	bne.n	8008a84 <__sfputs_r+0x12>
 8008a80:	2000      	movs	r0, #0
 8008a82:	e007      	b.n	8008a94 <__sfputs_r+0x22>
 8008a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ffda 	bl	8008a44 <__sfputc_r>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d1f3      	bne.n	8008a7c <__sfputs_r+0xa>
 8008a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a98 <_vfiprintf_r>:
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	b09d      	sub	sp, #116	; 0x74
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	4698      	mov	r8, r3
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	b118      	cbz	r0, 8008ab0 <_vfiprintf_r+0x18>
 8008aa8:	6983      	ldr	r3, [r0, #24]
 8008aaa:	b90b      	cbnz	r3, 8008ab0 <_vfiprintf_r+0x18>
 8008aac:	f7ff fd0e 	bl	80084cc <__sinit>
 8008ab0:	4b89      	ldr	r3, [pc, #548]	; (8008cd8 <_vfiprintf_r+0x240>)
 8008ab2:	429d      	cmp	r5, r3
 8008ab4:	d11b      	bne.n	8008aee <_vfiprintf_r+0x56>
 8008ab6:	6875      	ldr	r5, [r6, #4]
 8008ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aba:	07d9      	lsls	r1, r3, #31
 8008abc:	d405      	bmi.n	8008aca <_vfiprintf_r+0x32>
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	059a      	lsls	r2, r3, #22
 8008ac2:	d402      	bmi.n	8008aca <_vfiprintf_r+0x32>
 8008ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac6:	f7ff fe84 	bl	80087d2 <__retarget_lock_acquire_recursive>
 8008aca:	89ab      	ldrh	r3, [r5, #12]
 8008acc:	071b      	lsls	r3, r3, #28
 8008ace:	d501      	bpl.n	8008ad4 <_vfiprintf_r+0x3c>
 8008ad0:	692b      	ldr	r3, [r5, #16]
 8008ad2:	b9eb      	cbnz	r3, 8008b10 <_vfiprintf_r+0x78>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	f001 ff66 	bl	800a9a8 <__swsetup_r>
 8008adc:	b1c0      	cbz	r0, 8008b10 <_vfiprintf_r+0x78>
 8008ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae0:	07dc      	lsls	r4, r3, #31
 8008ae2:	d50e      	bpl.n	8008b02 <_vfiprintf_r+0x6a>
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	b01d      	add	sp, #116	; 0x74
 8008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aee:	4b7b      	ldr	r3, [pc, #492]	; (8008cdc <_vfiprintf_r+0x244>)
 8008af0:	429d      	cmp	r5, r3
 8008af2:	d101      	bne.n	8008af8 <_vfiprintf_r+0x60>
 8008af4:	68b5      	ldr	r5, [r6, #8]
 8008af6:	e7df      	b.n	8008ab8 <_vfiprintf_r+0x20>
 8008af8:	4b79      	ldr	r3, [pc, #484]	; (8008ce0 <_vfiprintf_r+0x248>)
 8008afa:	429d      	cmp	r5, r3
 8008afc:	bf08      	it	eq
 8008afe:	68f5      	ldreq	r5, [r6, #12]
 8008b00:	e7da      	b.n	8008ab8 <_vfiprintf_r+0x20>
 8008b02:	89ab      	ldrh	r3, [r5, #12]
 8008b04:	0598      	lsls	r0, r3, #22
 8008b06:	d4ed      	bmi.n	8008ae4 <_vfiprintf_r+0x4c>
 8008b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b0a:	f7ff fe63 	bl	80087d4 <__retarget_lock_release_recursive>
 8008b0e:	e7e9      	b.n	8008ae4 <_vfiprintf_r+0x4c>
 8008b10:	2300      	movs	r3, #0
 8008b12:	9309      	str	r3, [sp, #36]	; 0x24
 8008b14:	2320      	movs	r3, #32
 8008b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b1e:	2330      	movs	r3, #48	; 0x30
 8008b20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ce4 <_vfiprintf_r+0x24c>
 8008b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b28:	f04f 0901 	mov.w	r9, #1
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	469a      	mov	sl, r3
 8008b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b34:	b10a      	cbz	r2, 8008b3a <_vfiprintf_r+0xa2>
 8008b36:	2a25      	cmp	r2, #37	; 0x25
 8008b38:	d1f9      	bne.n	8008b2e <_vfiprintf_r+0x96>
 8008b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b3e:	d00b      	beq.n	8008b58 <_vfiprintf_r+0xc0>
 8008b40:	465b      	mov	r3, fp
 8008b42:	4622      	mov	r2, r4
 8008b44:	4629      	mov	r1, r5
 8008b46:	4630      	mov	r0, r6
 8008b48:	f7ff ff93 	bl	8008a72 <__sfputs_r>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	f000 80aa 	beq.w	8008ca6 <_vfiprintf_r+0x20e>
 8008b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b54:	445a      	add	r2, fp
 8008b56:	9209      	str	r2, [sp, #36]	; 0x24
 8008b58:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 80a2 	beq.w	8008ca6 <_vfiprintf_r+0x20e>
 8008b62:	2300      	movs	r3, #0
 8008b64:	f04f 32ff 	mov.w	r2, #4294967295
 8008b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b6c:	f10a 0a01 	add.w	sl, sl, #1
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	9307      	str	r3, [sp, #28]
 8008b74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b78:	931a      	str	r3, [sp, #104]	; 0x68
 8008b7a:	4654      	mov	r4, sl
 8008b7c:	2205      	movs	r2, #5
 8008b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b82:	4858      	ldr	r0, [pc, #352]	; (8008ce4 <_vfiprintf_r+0x24c>)
 8008b84:	f7f7 fb2c 	bl	80001e0 <memchr>
 8008b88:	9a04      	ldr	r2, [sp, #16]
 8008b8a:	b9d8      	cbnz	r0, 8008bc4 <_vfiprintf_r+0x12c>
 8008b8c:	06d1      	lsls	r1, r2, #27
 8008b8e:	bf44      	itt	mi
 8008b90:	2320      	movmi	r3, #32
 8008b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b96:	0713      	lsls	r3, r2, #28
 8008b98:	bf44      	itt	mi
 8008b9a:	232b      	movmi	r3, #43	; 0x2b
 8008b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ba6:	d015      	beq.n	8008bd4 <_vfiprintf_r+0x13c>
 8008ba8:	9a07      	ldr	r2, [sp, #28]
 8008baa:	4654      	mov	r4, sl
 8008bac:	2000      	movs	r0, #0
 8008bae:	f04f 0c0a 	mov.w	ip, #10
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb8:	3b30      	subs	r3, #48	; 0x30
 8008bba:	2b09      	cmp	r3, #9
 8008bbc:	d94e      	bls.n	8008c5c <_vfiprintf_r+0x1c4>
 8008bbe:	b1b0      	cbz	r0, 8008bee <_vfiprintf_r+0x156>
 8008bc0:	9207      	str	r2, [sp, #28]
 8008bc2:	e014      	b.n	8008bee <_vfiprintf_r+0x156>
 8008bc4:	eba0 0308 	sub.w	r3, r0, r8
 8008bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	46a2      	mov	sl, r4
 8008bd2:	e7d2      	b.n	8008b7a <_vfiprintf_r+0xe2>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	1d19      	adds	r1, r3, #4
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	9103      	str	r1, [sp, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfbb      	ittet	lt
 8008be0:	425b      	neglt	r3, r3
 8008be2:	f042 0202 	orrlt.w	r2, r2, #2
 8008be6:	9307      	strge	r3, [sp, #28]
 8008be8:	9307      	strlt	r3, [sp, #28]
 8008bea:	bfb8      	it	lt
 8008bec:	9204      	strlt	r2, [sp, #16]
 8008bee:	7823      	ldrb	r3, [r4, #0]
 8008bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8008bf2:	d10c      	bne.n	8008c0e <_vfiprintf_r+0x176>
 8008bf4:	7863      	ldrb	r3, [r4, #1]
 8008bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf8:	d135      	bne.n	8008c66 <_vfiprintf_r+0x1ce>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	1d1a      	adds	r2, r3, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	9203      	str	r2, [sp, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bfb8      	it	lt
 8008c06:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c0a:	3402      	adds	r4, #2
 8008c0c:	9305      	str	r3, [sp, #20]
 8008c0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cf4 <_vfiprintf_r+0x25c>
 8008c12:	7821      	ldrb	r1, [r4, #0]
 8008c14:	2203      	movs	r2, #3
 8008c16:	4650      	mov	r0, sl
 8008c18:	f7f7 fae2 	bl	80001e0 <memchr>
 8008c1c:	b140      	cbz	r0, 8008c30 <_vfiprintf_r+0x198>
 8008c1e:	2340      	movs	r3, #64	; 0x40
 8008c20:	eba0 000a 	sub.w	r0, r0, sl
 8008c24:	fa03 f000 	lsl.w	r0, r3, r0
 8008c28:	9b04      	ldr	r3, [sp, #16]
 8008c2a:	4303      	orrs	r3, r0
 8008c2c:	3401      	adds	r4, #1
 8008c2e:	9304      	str	r3, [sp, #16]
 8008c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c34:	482c      	ldr	r0, [pc, #176]	; (8008ce8 <_vfiprintf_r+0x250>)
 8008c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c3a:	2206      	movs	r2, #6
 8008c3c:	f7f7 fad0 	bl	80001e0 <memchr>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d03f      	beq.n	8008cc4 <_vfiprintf_r+0x22c>
 8008c44:	4b29      	ldr	r3, [pc, #164]	; (8008cec <_vfiprintf_r+0x254>)
 8008c46:	bb1b      	cbnz	r3, 8008c90 <_vfiprintf_r+0x1f8>
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	3307      	adds	r3, #7
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	3308      	adds	r3, #8
 8008c52:	9303      	str	r3, [sp, #12]
 8008c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c56:	443b      	add	r3, r7
 8008c58:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5a:	e767      	b.n	8008b2c <_vfiprintf_r+0x94>
 8008c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c60:	460c      	mov	r4, r1
 8008c62:	2001      	movs	r0, #1
 8008c64:	e7a5      	b.n	8008bb2 <_vfiprintf_r+0x11a>
 8008c66:	2300      	movs	r3, #0
 8008c68:	3401      	adds	r4, #1
 8008c6a:	9305      	str	r3, [sp, #20]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f04f 0c0a 	mov.w	ip, #10
 8008c72:	4620      	mov	r0, r4
 8008c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c78:	3a30      	subs	r2, #48	; 0x30
 8008c7a:	2a09      	cmp	r2, #9
 8008c7c:	d903      	bls.n	8008c86 <_vfiprintf_r+0x1ee>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0c5      	beq.n	8008c0e <_vfiprintf_r+0x176>
 8008c82:	9105      	str	r1, [sp, #20]
 8008c84:	e7c3      	b.n	8008c0e <_vfiprintf_r+0x176>
 8008c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e7f0      	b.n	8008c72 <_vfiprintf_r+0x1da>
 8008c90:	ab03      	add	r3, sp, #12
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	462a      	mov	r2, r5
 8008c96:	4b16      	ldr	r3, [pc, #88]	; (8008cf0 <_vfiprintf_r+0x258>)
 8008c98:	a904      	add	r1, sp, #16
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f000 f8d6 	bl	8008e4c <_printf_float>
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	1c78      	adds	r0, r7, #1
 8008ca4:	d1d6      	bne.n	8008c54 <_vfiprintf_r+0x1bc>
 8008ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ca8:	07d9      	lsls	r1, r3, #31
 8008caa:	d405      	bmi.n	8008cb8 <_vfiprintf_r+0x220>
 8008cac:	89ab      	ldrh	r3, [r5, #12]
 8008cae:	059a      	lsls	r2, r3, #22
 8008cb0:	d402      	bmi.n	8008cb8 <_vfiprintf_r+0x220>
 8008cb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cb4:	f7ff fd8e 	bl	80087d4 <__retarget_lock_release_recursive>
 8008cb8:	89ab      	ldrh	r3, [r5, #12]
 8008cba:	065b      	lsls	r3, r3, #25
 8008cbc:	f53f af12 	bmi.w	8008ae4 <_vfiprintf_r+0x4c>
 8008cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc2:	e711      	b.n	8008ae8 <_vfiprintf_r+0x50>
 8008cc4:	ab03      	add	r3, sp, #12
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	462a      	mov	r2, r5
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <_vfiprintf_r+0x258>)
 8008ccc:	a904      	add	r1, sp, #16
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f000 fb60 	bl	8009394 <_printf_i>
 8008cd4:	e7e4      	b.n	8008ca0 <_vfiprintf_r+0x208>
 8008cd6:	bf00      	nop
 8008cd8:	0800f414 	.word	0x0800f414
 8008cdc:	0800f434 	.word	0x0800f434
 8008ce0:	0800f3f4 	.word	0x0800f3f4
 8008ce4:	0800f458 	.word	0x0800f458
 8008ce8:	0800f462 	.word	0x0800f462
 8008cec:	08008e4d 	.word	0x08008e4d
 8008cf0:	08008a73 	.word	0x08008a73
 8008cf4:	0800f45e 	.word	0x0800f45e

08008cf8 <vfiprintf>:
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	460a      	mov	r2, r1
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	4802      	ldr	r0, [pc, #8]	; (8008d08 <vfiprintf+0x10>)
 8008d00:	6800      	ldr	r0, [r0, #0]
 8008d02:	f7ff bec9 	b.w	8008a98 <_vfiprintf_r>
 8008d06:	bf00      	nop
 8008d08:	2000000c 	.word	0x2000000c

08008d0c <__cvt>:
 8008d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	ec55 4b10 	vmov	r4, r5, d0
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	460e      	mov	r6, r1
 8008d18:	4619      	mov	r1, r3
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	bfbb      	ittet	lt
 8008d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d22:	461d      	movlt	r5, r3
 8008d24:	2300      	movge	r3, #0
 8008d26:	232d      	movlt	r3, #45	; 0x2d
 8008d28:	700b      	strb	r3, [r1, #0]
 8008d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d30:	4691      	mov	r9, r2
 8008d32:	f023 0820 	bic.w	r8, r3, #32
 8008d36:	bfbc      	itt	lt
 8008d38:	4622      	movlt	r2, r4
 8008d3a:	4614      	movlt	r4, r2
 8008d3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d40:	d005      	beq.n	8008d4e <__cvt+0x42>
 8008d42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d46:	d100      	bne.n	8008d4a <__cvt+0x3e>
 8008d48:	3601      	adds	r6, #1
 8008d4a:	2102      	movs	r1, #2
 8008d4c:	e000      	b.n	8008d50 <__cvt+0x44>
 8008d4e:	2103      	movs	r1, #3
 8008d50:	ab03      	add	r3, sp, #12
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	ab02      	add	r3, sp, #8
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	ec45 4b10 	vmov	d0, r4, r5
 8008d5c:	4653      	mov	r3, sl
 8008d5e:	4632      	mov	r2, r6
 8008d60:	f001 ff36 	bl	800abd0 <_dtoa_r>
 8008d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d68:	4607      	mov	r7, r0
 8008d6a:	d102      	bne.n	8008d72 <__cvt+0x66>
 8008d6c:	f019 0f01 	tst.w	r9, #1
 8008d70:	d022      	beq.n	8008db8 <__cvt+0xac>
 8008d72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d76:	eb07 0906 	add.w	r9, r7, r6
 8008d7a:	d110      	bne.n	8008d9e <__cvt+0x92>
 8008d7c:	783b      	ldrb	r3, [r7, #0]
 8008d7e:	2b30      	cmp	r3, #48	; 0x30
 8008d80:	d10a      	bne.n	8008d98 <__cvt+0x8c>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d8e:	b918      	cbnz	r0, 8008d98 <__cvt+0x8c>
 8008d90:	f1c6 0601 	rsb	r6, r6, #1
 8008d94:	f8ca 6000 	str.w	r6, [sl]
 8008d98:	f8da 3000 	ldr.w	r3, [sl]
 8008d9c:	4499      	add	r9, r3
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2300      	movs	r3, #0
 8008da2:	4620      	mov	r0, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	f7f7 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008daa:	b108      	cbz	r0, 8008db0 <__cvt+0xa4>
 8008dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8008db0:	2230      	movs	r2, #48	; 0x30
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	454b      	cmp	r3, r9
 8008db6:	d307      	bcc.n	8008dc8 <__cvt+0xbc>
 8008db8:	9b03      	ldr	r3, [sp, #12]
 8008dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dbc:	1bdb      	subs	r3, r3, r7
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	b004      	add	sp, #16
 8008dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc8:	1c59      	adds	r1, r3, #1
 8008dca:	9103      	str	r1, [sp, #12]
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	e7f0      	b.n	8008db2 <__cvt+0xa6>

08008dd0 <__exponent>:
 8008dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	bfb8      	it	lt
 8008dd8:	4249      	neglt	r1, r1
 8008dda:	f803 2b02 	strb.w	r2, [r3], #2
 8008dde:	bfb4      	ite	lt
 8008de0:	222d      	movlt	r2, #45	; 0x2d
 8008de2:	222b      	movge	r2, #43	; 0x2b
 8008de4:	2909      	cmp	r1, #9
 8008de6:	7042      	strb	r2, [r0, #1]
 8008de8:	dd2a      	ble.n	8008e40 <__exponent+0x70>
 8008dea:	f10d 0407 	add.w	r4, sp, #7
 8008dee:	46a4      	mov	ip, r4
 8008df0:	270a      	movs	r7, #10
 8008df2:	46a6      	mov	lr, r4
 8008df4:	460a      	mov	r2, r1
 8008df6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008dfa:	fb07 1516 	mls	r5, r7, r6, r1
 8008dfe:	3530      	adds	r5, #48	; 0x30
 8008e00:	2a63      	cmp	r2, #99	; 0x63
 8008e02:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	dcf1      	bgt.n	8008df2 <__exponent+0x22>
 8008e0e:	3130      	adds	r1, #48	; 0x30
 8008e10:	f1ae 0502 	sub.w	r5, lr, #2
 8008e14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e18:	1c44      	adds	r4, r0, #1
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4561      	cmp	r1, ip
 8008e1e:	d30a      	bcc.n	8008e36 <__exponent+0x66>
 8008e20:	f10d 0209 	add.w	r2, sp, #9
 8008e24:	eba2 020e 	sub.w	r2, r2, lr
 8008e28:	4565      	cmp	r5, ip
 8008e2a:	bf88      	it	hi
 8008e2c:	2200      	movhi	r2, #0
 8008e2e:	4413      	add	r3, r2
 8008e30:	1a18      	subs	r0, r3, r0
 8008e32:	b003      	add	sp, #12
 8008e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e3e:	e7ed      	b.n	8008e1c <__exponent+0x4c>
 8008e40:	2330      	movs	r3, #48	; 0x30
 8008e42:	3130      	adds	r1, #48	; 0x30
 8008e44:	7083      	strb	r3, [r0, #2]
 8008e46:	70c1      	strb	r1, [r0, #3]
 8008e48:	1d03      	adds	r3, r0, #4
 8008e4a:	e7f1      	b.n	8008e30 <__exponent+0x60>

08008e4c <_printf_float>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	ed2d 8b02 	vpush	{d8}
 8008e54:	b08d      	sub	sp, #52	; 0x34
 8008e56:	460c      	mov	r4, r1
 8008e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e5c:	4616      	mov	r6, r2
 8008e5e:	461f      	mov	r7, r3
 8008e60:	4605      	mov	r5, r0
 8008e62:	f003 f813 	bl	800be8c <_localeconv_r>
 8008e66:	f8d0 a000 	ldr.w	sl, [r0]
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	f7f7 f9b0 	bl	80001d0 <strlen>
 8008e70:	2300      	movs	r3, #0
 8008e72:	930a      	str	r3, [sp, #40]	; 0x28
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	f8d8 3000 	ldr.w	r3, [r8]
 8008e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e80:	3307      	adds	r3, #7
 8008e82:	f023 0307 	bic.w	r3, r3, #7
 8008e86:	f103 0208 	add.w	r2, r3, #8
 8008e8a:	f8c8 2000 	str.w	r2, [r8]
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ea4:	ee08 0a10 	vmov	s16, r0
 8008ea8:	4b9f      	ldr	r3, [pc, #636]	; (8009128 <_printf_float+0x2dc>)
 8008eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	f7f7 fe3b 	bl	8000b2c <__aeabi_dcmpun>
 8008eb6:	bb88      	cbnz	r0, 8008f1c <_printf_float+0xd0>
 8008eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ebc:	4b9a      	ldr	r3, [pc, #616]	; (8009128 <_printf_float+0x2dc>)
 8008ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec2:	f7f7 fe15 	bl	8000af0 <__aeabi_dcmple>
 8008ec6:	bb48      	cbnz	r0, 8008f1c <_printf_float+0xd0>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fe04 	bl	8000adc <__aeabi_dcmplt>
 8008ed4:	b110      	cbz	r0, 8008edc <_printf_float+0x90>
 8008ed6:	232d      	movs	r3, #45	; 0x2d
 8008ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008edc:	4b93      	ldr	r3, [pc, #588]	; (800912c <_printf_float+0x2e0>)
 8008ede:	4894      	ldr	r0, [pc, #592]	; (8009130 <_printf_float+0x2e4>)
 8008ee0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ee4:	bf94      	ite	ls
 8008ee6:	4698      	movls	r8, r3
 8008ee8:	4680      	movhi	r8, r0
 8008eea:	2303      	movs	r3, #3
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	9b05      	ldr	r3, [sp, #20]
 8008ef0:	f023 0204 	bic.w	r2, r3, #4
 8008ef4:	6022      	str	r2, [r4, #0]
 8008ef6:	f04f 0900 	mov.w	r9, #0
 8008efa:	9700      	str	r7, [sp, #0]
 8008efc:	4633      	mov	r3, r6
 8008efe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f00:	4621      	mov	r1, r4
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 f9d8 	bl	80092b8 <_printf_common>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f040 8090 	bne.w	800902e <_printf_float+0x1e2>
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	b00d      	add	sp, #52	; 0x34
 8008f14:	ecbd 8b02 	vpop	{d8}
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 fe02 	bl	8000b2c <__aeabi_dcmpun>
 8008f28:	b140      	cbz	r0, 8008f3c <_printf_float+0xf0>
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfbc      	itt	lt
 8008f30:	232d      	movlt	r3, #45	; 0x2d
 8008f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f36:	487f      	ldr	r0, [pc, #508]	; (8009134 <_printf_float+0x2e8>)
 8008f38:	4b7f      	ldr	r3, [pc, #508]	; (8009138 <_printf_float+0x2ec>)
 8008f3a:	e7d1      	b.n	8008ee0 <_printf_float+0x94>
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f42:	9206      	str	r2, [sp, #24]
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	d13f      	bne.n	8008fc8 <_printf_float+0x17c>
 8008f48:	2306      	movs	r3, #6
 8008f4a:	6063      	str	r3, [r4, #4]
 8008f4c:	9b05      	ldr	r3, [sp, #20]
 8008f4e:	6861      	ldr	r1, [r4, #4]
 8008f50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f54:	2300      	movs	r3, #0
 8008f56:	9303      	str	r3, [sp, #12]
 8008f58:	ab0a      	add	r3, sp, #40	; 0x28
 8008f5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f5e:	ab09      	add	r3, sp, #36	; 0x24
 8008f60:	ec49 8b10 	vmov	d0, r8, r9
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f7ff fecd 	bl	8008d0c <__cvt>
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f76:	2b47      	cmp	r3, #71	; 0x47
 8008f78:	4680      	mov	r8, r0
 8008f7a:	d108      	bne.n	8008f8e <_printf_float+0x142>
 8008f7c:	1cc8      	adds	r0, r1, #3
 8008f7e:	db02      	blt.n	8008f86 <_printf_float+0x13a>
 8008f80:	6863      	ldr	r3, [r4, #4]
 8008f82:	4299      	cmp	r1, r3
 8008f84:	dd41      	ble.n	800900a <_printf_float+0x1be>
 8008f86:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f8a:	fa5f fb8b 	uxtb.w	fp, fp
 8008f8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f92:	d820      	bhi.n	8008fd6 <_printf_float+0x18a>
 8008f94:	3901      	subs	r1, #1
 8008f96:	465a      	mov	r2, fp
 8008f98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f9c:	9109      	str	r1, [sp, #36]	; 0x24
 8008f9e:	f7ff ff17 	bl	8008dd0 <__exponent>
 8008fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fa4:	1813      	adds	r3, r2, r0
 8008fa6:	2a01      	cmp	r2, #1
 8008fa8:	4681      	mov	r9, r0
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	dc02      	bgt.n	8008fb4 <_printf_float+0x168>
 8008fae:	6822      	ldr	r2, [r4, #0]
 8008fb0:	07d2      	lsls	r2, r2, #31
 8008fb2:	d501      	bpl.n	8008fb8 <_printf_float+0x16c>
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d09c      	beq.n	8008efa <_printf_float+0xae>
 8008fc0:	232d      	movs	r3, #45	; 0x2d
 8008fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc6:	e798      	b.n	8008efa <_printf_float+0xae>
 8008fc8:	9a06      	ldr	r2, [sp, #24]
 8008fca:	2a47      	cmp	r2, #71	; 0x47
 8008fcc:	d1be      	bne.n	8008f4c <_printf_float+0x100>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1bc      	bne.n	8008f4c <_printf_float+0x100>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e7b9      	b.n	8008f4a <_printf_float+0xfe>
 8008fd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fda:	d118      	bne.n	800900e <_printf_float+0x1c2>
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	dd0b      	ble.n	8008ffa <_printf_float+0x1ae>
 8008fe2:	6121      	str	r1, [r4, #16]
 8008fe4:	b913      	cbnz	r3, 8008fec <_printf_float+0x1a0>
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	07d0      	lsls	r0, r2, #31
 8008fea:	d502      	bpl.n	8008ff2 <_printf_float+0x1a6>
 8008fec:	3301      	adds	r3, #1
 8008fee:	440b      	add	r3, r1
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ff4:	f04f 0900 	mov.w	r9, #0
 8008ff8:	e7de      	b.n	8008fb8 <_printf_float+0x16c>
 8008ffa:	b913      	cbnz	r3, 8009002 <_printf_float+0x1b6>
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	07d2      	lsls	r2, r2, #31
 8009000:	d501      	bpl.n	8009006 <_printf_float+0x1ba>
 8009002:	3302      	adds	r3, #2
 8009004:	e7f4      	b.n	8008ff0 <_printf_float+0x1a4>
 8009006:	2301      	movs	r3, #1
 8009008:	e7f2      	b.n	8008ff0 <_printf_float+0x1a4>
 800900a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800900e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009010:	4299      	cmp	r1, r3
 8009012:	db05      	blt.n	8009020 <_printf_float+0x1d4>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	6121      	str	r1, [r4, #16]
 8009018:	07d8      	lsls	r0, r3, #31
 800901a:	d5ea      	bpl.n	8008ff2 <_printf_float+0x1a6>
 800901c:	1c4b      	adds	r3, r1, #1
 800901e:	e7e7      	b.n	8008ff0 <_printf_float+0x1a4>
 8009020:	2900      	cmp	r1, #0
 8009022:	bfd4      	ite	le
 8009024:	f1c1 0202 	rsble	r2, r1, #2
 8009028:	2201      	movgt	r2, #1
 800902a:	4413      	add	r3, r2
 800902c:	e7e0      	b.n	8008ff0 <_printf_float+0x1a4>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	055a      	lsls	r2, r3, #21
 8009032:	d407      	bmi.n	8009044 <_printf_float+0x1f8>
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	4642      	mov	r2, r8
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	d12c      	bne.n	800909c <_printf_float+0x250>
 8009042:	e764      	b.n	8008f0e <_printf_float+0xc2>
 8009044:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009048:	f240 80e0 	bls.w	800920c <_printf_float+0x3c0>
 800904c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	f7f7 fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8009058:	2800      	cmp	r0, #0
 800905a:	d034      	beq.n	80090c6 <_printf_float+0x27a>
 800905c:	4a37      	ldr	r2, [pc, #220]	; (800913c <_printf_float+0x2f0>)
 800905e:	2301      	movs	r3, #1
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f af51 	beq.w	8008f0e <_printf_float+0xc2>
 800906c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009070:	429a      	cmp	r2, r3
 8009072:	db02      	blt.n	800907a <_printf_float+0x22e>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	07d8      	lsls	r0, r3, #31
 8009078:	d510      	bpl.n	800909c <_printf_float+0x250>
 800907a:	ee18 3a10 	vmov	r3, s16
 800907e:	4652      	mov	r2, sl
 8009080:	4631      	mov	r1, r6
 8009082:	4628      	mov	r0, r5
 8009084:	47b8      	blx	r7
 8009086:	3001      	adds	r0, #1
 8009088:	f43f af41 	beq.w	8008f0e <_printf_float+0xc2>
 800908c:	f04f 0800 	mov.w	r8, #0
 8009090:	f104 091a 	add.w	r9, r4, #26
 8009094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009096:	3b01      	subs	r3, #1
 8009098:	4543      	cmp	r3, r8
 800909a:	dc09      	bgt.n	80090b0 <_printf_float+0x264>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	079b      	lsls	r3, r3, #30
 80090a0:	f100 8105 	bmi.w	80092ae <_printf_float+0x462>
 80090a4:	68e0      	ldr	r0, [r4, #12]
 80090a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a8:	4298      	cmp	r0, r3
 80090aa:	bfb8      	it	lt
 80090ac:	4618      	movlt	r0, r3
 80090ae:	e730      	b.n	8008f12 <_printf_float+0xc6>
 80090b0:	2301      	movs	r3, #1
 80090b2:	464a      	mov	r2, r9
 80090b4:	4631      	mov	r1, r6
 80090b6:	4628      	mov	r0, r5
 80090b8:	47b8      	blx	r7
 80090ba:	3001      	adds	r0, #1
 80090bc:	f43f af27 	beq.w	8008f0e <_printf_float+0xc2>
 80090c0:	f108 0801 	add.w	r8, r8, #1
 80090c4:	e7e6      	b.n	8009094 <_printf_float+0x248>
 80090c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dc39      	bgt.n	8009140 <_printf_float+0x2f4>
 80090cc:	4a1b      	ldr	r2, [pc, #108]	; (800913c <_printf_float+0x2f0>)
 80090ce:	2301      	movs	r3, #1
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	f43f af19 	beq.w	8008f0e <_printf_float+0xc2>
 80090dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090e0:	4313      	orrs	r3, r2
 80090e2:	d102      	bne.n	80090ea <_printf_float+0x29e>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	07d9      	lsls	r1, r3, #31
 80090e8:	d5d8      	bpl.n	800909c <_printf_float+0x250>
 80090ea:	ee18 3a10 	vmov	r3, s16
 80090ee:	4652      	mov	r2, sl
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b8      	blx	r7
 80090f6:	3001      	adds	r0, #1
 80090f8:	f43f af09 	beq.w	8008f0e <_printf_float+0xc2>
 80090fc:	f04f 0900 	mov.w	r9, #0
 8009100:	f104 0a1a 	add.w	sl, r4, #26
 8009104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009106:	425b      	negs	r3, r3
 8009108:	454b      	cmp	r3, r9
 800910a:	dc01      	bgt.n	8009110 <_printf_float+0x2c4>
 800910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910e:	e792      	b.n	8009036 <_printf_float+0x1ea>
 8009110:	2301      	movs	r3, #1
 8009112:	4652      	mov	r2, sl
 8009114:	4631      	mov	r1, r6
 8009116:	4628      	mov	r0, r5
 8009118:	47b8      	blx	r7
 800911a:	3001      	adds	r0, #1
 800911c:	f43f aef7 	beq.w	8008f0e <_printf_float+0xc2>
 8009120:	f109 0901 	add.w	r9, r9, #1
 8009124:	e7ee      	b.n	8009104 <_printf_float+0x2b8>
 8009126:	bf00      	nop
 8009128:	7fefffff 	.word	0x7fefffff
 800912c:	0800f469 	.word	0x0800f469
 8009130:	0800f46d 	.word	0x0800f46d
 8009134:	0800f475 	.word	0x0800f475
 8009138:	0800f471 	.word	0x0800f471
 800913c:	0800f479 	.word	0x0800f479
 8009140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009144:	429a      	cmp	r2, r3
 8009146:	bfa8      	it	ge
 8009148:	461a      	movge	r2, r3
 800914a:	2a00      	cmp	r2, #0
 800914c:	4691      	mov	r9, r2
 800914e:	dc37      	bgt.n	80091c0 <_printf_float+0x374>
 8009150:	f04f 0b00 	mov.w	fp, #0
 8009154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009158:	f104 021a 	add.w	r2, r4, #26
 800915c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	eba3 0309 	sub.w	r3, r3, r9
 8009164:	455b      	cmp	r3, fp
 8009166:	dc33      	bgt.n	80091d0 <_printf_float+0x384>
 8009168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800916c:	429a      	cmp	r2, r3
 800916e:	db3b      	blt.n	80091e8 <_printf_float+0x39c>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	07da      	lsls	r2, r3, #31
 8009174:	d438      	bmi.n	80091e8 <_printf_float+0x39c>
 8009176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009178:	9a05      	ldr	r2, [sp, #20]
 800917a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800917c:	1a9a      	subs	r2, r3, r2
 800917e:	eba3 0901 	sub.w	r9, r3, r1
 8009182:	4591      	cmp	r9, r2
 8009184:	bfa8      	it	ge
 8009186:	4691      	movge	r9, r2
 8009188:	f1b9 0f00 	cmp.w	r9, #0
 800918c:	dc35      	bgt.n	80091fa <_printf_float+0x3ae>
 800918e:	f04f 0800 	mov.w	r8, #0
 8009192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009196:	f104 0a1a 	add.w	sl, r4, #26
 800919a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800919e:	1a9b      	subs	r3, r3, r2
 80091a0:	eba3 0309 	sub.w	r3, r3, r9
 80091a4:	4543      	cmp	r3, r8
 80091a6:	f77f af79 	ble.w	800909c <_printf_float+0x250>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4652      	mov	r2, sl
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b8      	blx	r7
 80091b4:	3001      	adds	r0, #1
 80091b6:	f43f aeaa 	beq.w	8008f0e <_printf_float+0xc2>
 80091ba:	f108 0801 	add.w	r8, r8, #1
 80091be:	e7ec      	b.n	800919a <_printf_float+0x34e>
 80091c0:	4613      	mov	r3, r2
 80091c2:	4631      	mov	r1, r6
 80091c4:	4642      	mov	r2, r8
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	d1c0      	bne.n	8009150 <_printf_float+0x304>
 80091ce:	e69e      	b.n	8008f0e <_printf_float+0xc2>
 80091d0:	2301      	movs	r3, #1
 80091d2:	4631      	mov	r1, r6
 80091d4:	4628      	mov	r0, r5
 80091d6:	9205      	str	r2, [sp, #20]
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	f43f ae97 	beq.w	8008f0e <_printf_float+0xc2>
 80091e0:	9a05      	ldr	r2, [sp, #20]
 80091e2:	f10b 0b01 	add.w	fp, fp, #1
 80091e6:	e7b9      	b.n	800915c <_printf_float+0x310>
 80091e8:	ee18 3a10 	vmov	r3, s16
 80091ec:	4652      	mov	r2, sl
 80091ee:	4631      	mov	r1, r6
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b8      	blx	r7
 80091f4:	3001      	adds	r0, #1
 80091f6:	d1be      	bne.n	8009176 <_printf_float+0x32a>
 80091f8:	e689      	b.n	8008f0e <_printf_float+0xc2>
 80091fa:	9a05      	ldr	r2, [sp, #20]
 80091fc:	464b      	mov	r3, r9
 80091fe:	4442      	add	r2, r8
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	d1c1      	bne.n	800918e <_printf_float+0x342>
 800920a:	e680      	b.n	8008f0e <_printf_float+0xc2>
 800920c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800920e:	2a01      	cmp	r2, #1
 8009210:	dc01      	bgt.n	8009216 <_printf_float+0x3ca>
 8009212:	07db      	lsls	r3, r3, #31
 8009214:	d538      	bpl.n	8009288 <_printf_float+0x43c>
 8009216:	2301      	movs	r3, #1
 8009218:	4642      	mov	r2, r8
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	f43f ae74 	beq.w	8008f0e <_printf_float+0xc2>
 8009226:	ee18 3a10 	vmov	r3, s16
 800922a:	4652      	mov	r2, sl
 800922c:	4631      	mov	r1, r6
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	f43f ae6b 	beq.w	8008f0e <_printf_float+0xc2>
 8009238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	f7f7 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8009244:	b9d8      	cbnz	r0, 800927e <_printf_float+0x432>
 8009246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009248:	f108 0201 	add.w	r2, r8, #1
 800924c:	3b01      	subs	r3, #1
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	d10e      	bne.n	8009276 <_printf_float+0x42a>
 8009258:	e659      	b.n	8008f0e <_printf_float+0xc2>
 800925a:	2301      	movs	r3, #1
 800925c:	4652      	mov	r2, sl
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	47b8      	blx	r7
 8009264:	3001      	adds	r0, #1
 8009266:	f43f ae52 	beq.w	8008f0e <_printf_float+0xc2>
 800926a:	f108 0801 	add.w	r8, r8, #1
 800926e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009270:	3b01      	subs	r3, #1
 8009272:	4543      	cmp	r3, r8
 8009274:	dcf1      	bgt.n	800925a <_printf_float+0x40e>
 8009276:	464b      	mov	r3, r9
 8009278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800927c:	e6dc      	b.n	8009038 <_printf_float+0x1ec>
 800927e:	f04f 0800 	mov.w	r8, #0
 8009282:	f104 0a1a 	add.w	sl, r4, #26
 8009286:	e7f2      	b.n	800926e <_printf_float+0x422>
 8009288:	2301      	movs	r3, #1
 800928a:	4642      	mov	r2, r8
 800928c:	e7df      	b.n	800924e <_printf_float+0x402>
 800928e:	2301      	movs	r3, #1
 8009290:	464a      	mov	r2, r9
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	f43f ae38 	beq.w	8008f0e <_printf_float+0xc2>
 800929e:	f108 0801 	add.w	r8, r8, #1
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092a6:	1a5b      	subs	r3, r3, r1
 80092a8:	4543      	cmp	r3, r8
 80092aa:	dcf0      	bgt.n	800928e <_printf_float+0x442>
 80092ac:	e6fa      	b.n	80090a4 <_printf_float+0x258>
 80092ae:	f04f 0800 	mov.w	r8, #0
 80092b2:	f104 0919 	add.w	r9, r4, #25
 80092b6:	e7f4      	b.n	80092a2 <_printf_float+0x456>

080092b8 <_printf_common>:
 80092b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092bc:	4616      	mov	r6, r2
 80092be:	4699      	mov	r9, r3
 80092c0:	688a      	ldr	r2, [r1, #8]
 80092c2:	690b      	ldr	r3, [r1, #16]
 80092c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c8:	4293      	cmp	r3, r2
 80092ca:	bfb8      	it	lt
 80092cc:	4613      	movlt	r3, r2
 80092ce:	6033      	str	r3, [r6, #0]
 80092d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092d4:	4607      	mov	r7, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	b10a      	cbz	r2, 80092de <_printf_common+0x26>
 80092da:	3301      	adds	r3, #1
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	0699      	lsls	r1, r3, #26
 80092e2:	bf42      	ittt	mi
 80092e4:	6833      	ldrmi	r3, [r6, #0]
 80092e6:	3302      	addmi	r3, #2
 80092e8:	6033      	strmi	r3, [r6, #0]
 80092ea:	6825      	ldr	r5, [r4, #0]
 80092ec:	f015 0506 	ands.w	r5, r5, #6
 80092f0:	d106      	bne.n	8009300 <_printf_common+0x48>
 80092f2:	f104 0a19 	add.w	sl, r4, #25
 80092f6:	68e3      	ldr	r3, [r4, #12]
 80092f8:	6832      	ldr	r2, [r6, #0]
 80092fa:	1a9b      	subs	r3, r3, r2
 80092fc:	42ab      	cmp	r3, r5
 80092fe:	dc26      	bgt.n	800934e <_printf_common+0x96>
 8009300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009304:	1e13      	subs	r3, r2, #0
 8009306:	6822      	ldr	r2, [r4, #0]
 8009308:	bf18      	it	ne
 800930a:	2301      	movne	r3, #1
 800930c:	0692      	lsls	r2, r2, #26
 800930e:	d42b      	bmi.n	8009368 <_printf_common+0xb0>
 8009310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009314:	4649      	mov	r1, r9
 8009316:	4638      	mov	r0, r7
 8009318:	47c0      	blx	r8
 800931a:	3001      	adds	r0, #1
 800931c:	d01e      	beq.n	800935c <_printf_common+0xa4>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	68e5      	ldr	r5, [r4, #12]
 8009322:	6832      	ldr	r2, [r6, #0]
 8009324:	f003 0306 	and.w	r3, r3, #6
 8009328:	2b04      	cmp	r3, #4
 800932a:	bf08      	it	eq
 800932c:	1aad      	subeq	r5, r5, r2
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	bf0c      	ite	eq
 8009334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009338:	2500      	movne	r5, #0
 800933a:	4293      	cmp	r3, r2
 800933c:	bfc4      	itt	gt
 800933e:	1a9b      	subgt	r3, r3, r2
 8009340:	18ed      	addgt	r5, r5, r3
 8009342:	2600      	movs	r6, #0
 8009344:	341a      	adds	r4, #26
 8009346:	42b5      	cmp	r5, r6
 8009348:	d11a      	bne.n	8009380 <_printf_common+0xc8>
 800934a:	2000      	movs	r0, #0
 800934c:	e008      	b.n	8009360 <_printf_common+0xa8>
 800934e:	2301      	movs	r3, #1
 8009350:	4652      	mov	r2, sl
 8009352:	4649      	mov	r1, r9
 8009354:	4638      	mov	r0, r7
 8009356:	47c0      	blx	r8
 8009358:	3001      	adds	r0, #1
 800935a:	d103      	bne.n	8009364 <_printf_common+0xac>
 800935c:	f04f 30ff 	mov.w	r0, #4294967295
 8009360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009364:	3501      	adds	r5, #1
 8009366:	e7c6      	b.n	80092f6 <_printf_common+0x3e>
 8009368:	18e1      	adds	r1, r4, r3
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	2030      	movs	r0, #48	; 0x30
 800936e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009372:	4422      	add	r2, r4
 8009374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800937c:	3302      	adds	r3, #2
 800937e:	e7c7      	b.n	8009310 <_printf_common+0x58>
 8009380:	2301      	movs	r3, #1
 8009382:	4622      	mov	r2, r4
 8009384:	4649      	mov	r1, r9
 8009386:	4638      	mov	r0, r7
 8009388:	47c0      	blx	r8
 800938a:	3001      	adds	r0, #1
 800938c:	d0e6      	beq.n	800935c <_printf_common+0xa4>
 800938e:	3601      	adds	r6, #1
 8009390:	e7d9      	b.n	8009346 <_printf_common+0x8e>
	...

08009394 <_printf_i>:
 8009394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009398:	7e0f      	ldrb	r7, [r1, #24]
 800939a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800939c:	2f78      	cmp	r7, #120	; 0x78
 800939e:	4691      	mov	r9, r2
 80093a0:	4680      	mov	r8, r0
 80093a2:	460c      	mov	r4, r1
 80093a4:	469a      	mov	sl, r3
 80093a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093aa:	d807      	bhi.n	80093bc <_printf_i+0x28>
 80093ac:	2f62      	cmp	r7, #98	; 0x62
 80093ae:	d80a      	bhi.n	80093c6 <_printf_i+0x32>
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	f000 80d8 	beq.w	8009566 <_printf_i+0x1d2>
 80093b6:	2f58      	cmp	r7, #88	; 0x58
 80093b8:	f000 80a3 	beq.w	8009502 <_printf_i+0x16e>
 80093bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093c4:	e03a      	b.n	800943c <_printf_i+0xa8>
 80093c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ca:	2b15      	cmp	r3, #21
 80093cc:	d8f6      	bhi.n	80093bc <_printf_i+0x28>
 80093ce:	a101      	add	r1, pc, #4	; (adr r1, 80093d4 <_printf_i+0x40>)
 80093d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093d4:	0800942d 	.word	0x0800942d
 80093d8:	08009441 	.word	0x08009441
 80093dc:	080093bd 	.word	0x080093bd
 80093e0:	080093bd 	.word	0x080093bd
 80093e4:	080093bd 	.word	0x080093bd
 80093e8:	080093bd 	.word	0x080093bd
 80093ec:	08009441 	.word	0x08009441
 80093f0:	080093bd 	.word	0x080093bd
 80093f4:	080093bd 	.word	0x080093bd
 80093f8:	080093bd 	.word	0x080093bd
 80093fc:	080093bd 	.word	0x080093bd
 8009400:	0800954d 	.word	0x0800954d
 8009404:	08009471 	.word	0x08009471
 8009408:	0800952f 	.word	0x0800952f
 800940c:	080093bd 	.word	0x080093bd
 8009410:	080093bd 	.word	0x080093bd
 8009414:	0800956f 	.word	0x0800956f
 8009418:	080093bd 	.word	0x080093bd
 800941c:	08009471 	.word	0x08009471
 8009420:	080093bd 	.word	0x080093bd
 8009424:	080093bd 	.word	0x080093bd
 8009428:	08009537 	.word	0x08009537
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	1d1a      	adds	r2, r3, #4
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	602a      	str	r2, [r5, #0]
 8009434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800943c:	2301      	movs	r3, #1
 800943e:	e0a3      	b.n	8009588 <_printf_i+0x1f4>
 8009440:	6820      	ldr	r0, [r4, #0]
 8009442:	6829      	ldr	r1, [r5, #0]
 8009444:	0606      	lsls	r6, r0, #24
 8009446:	f101 0304 	add.w	r3, r1, #4
 800944a:	d50a      	bpl.n	8009462 <_printf_i+0xce>
 800944c:	680e      	ldr	r6, [r1, #0]
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	2e00      	cmp	r6, #0
 8009452:	da03      	bge.n	800945c <_printf_i+0xc8>
 8009454:	232d      	movs	r3, #45	; 0x2d
 8009456:	4276      	negs	r6, r6
 8009458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800945c:	485e      	ldr	r0, [pc, #376]	; (80095d8 <_printf_i+0x244>)
 800945e:	230a      	movs	r3, #10
 8009460:	e019      	b.n	8009496 <_printf_i+0x102>
 8009462:	680e      	ldr	r6, [r1, #0]
 8009464:	602b      	str	r3, [r5, #0]
 8009466:	f010 0f40 	tst.w	r0, #64	; 0x40
 800946a:	bf18      	it	ne
 800946c:	b236      	sxthne	r6, r6
 800946e:	e7ef      	b.n	8009450 <_printf_i+0xbc>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	1d19      	adds	r1, r3, #4
 8009476:	6029      	str	r1, [r5, #0]
 8009478:	0601      	lsls	r1, r0, #24
 800947a:	d501      	bpl.n	8009480 <_printf_i+0xec>
 800947c:	681e      	ldr	r6, [r3, #0]
 800947e:	e002      	b.n	8009486 <_printf_i+0xf2>
 8009480:	0646      	lsls	r6, r0, #25
 8009482:	d5fb      	bpl.n	800947c <_printf_i+0xe8>
 8009484:	881e      	ldrh	r6, [r3, #0]
 8009486:	4854      	ldr	r0, [pc, #336]	; (80095d8 <_printf_i+0x244>)
 8009488:	2f6f      	cmp	r7, #111	; 0x6f
 800948a:	bf0c      	ite	eq
 800948c:	2308      	moveq	r3, #8
 800948e:	230a      	movne	r3, #10
 8009490:	2100      	movs	r1, #0
 8009492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009496:	6865      	ldr	r5, [r4, #4]
 8009498:	60a5      	str	r5, [r4, #8]
 800949a:	2d00      	cmp	r5, #0
 800949c:	bfa2      	ittt	ge
 800949e:	6821      	ldrge	r1, [r4, #0]
 80094a0:	f021 0104 	bicge.w	r1, r1, #4
 80094a4:	6021      	strge	r1, [r4, #0]
 80094a6:	b90e      	cbnz	r6, 80094ac <_printf_i+0x118>
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	d04d      	beq.n	8009548 <_printf_i+0x1b4>
 80094ac:	4615      	mov	r5, r2
 80094ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80094b2:	fb03 6711 	mls	r7, r3, r1, r6
 80094b6:	5dc7      	ldrb	r7, [r0, r7]
 80094b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094bc:	4637      	mov	r7, r6
 80094be:	42bb      	cmp	r3, r7
 80094c0:	460e      	mov	r6, r1
 80094c2:	d9f4      	bls.n	80094ae <_printf_i+0x11a>
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d10b      	bne.n	80094e0 <_printf_i+0x14c>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	07de      	lsls	r6, r3, #31
 80094cc:	d508      	bpl.n	80094e0 <_printf_i+0x14c>
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	6861      	ldr	r1, [r4, #4]
 80094d2:	4299      	cmp	r1, r3
 80094d4:	bfde      	ittt	le
 80094d6:	2330      	movle	r3, #48	; 0x30
 80094d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094e0:	1b52      	subs	r2, r2, r5
 80094e2:	6122      	str	r2, [r4, #16]
 80094e4:	f8cd a000 	str.w	sl, [sp]
 80094e8:	464b      	mov	r3, r9
 80094ea:	aa03      	add	r2, sp, #12
 80094ec:	4621      	mov	r1, r4
 80094ee:	4640      	mov	r0, r8
 80094f0:	f7ff fee2 	bl	80092b8 <_printf_common>
 80094f4:	3001      	adds	r0, #1
 80094f6:	d14c      	bne.n	8009592 <_printf_i+0x1fe>
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	b004      	add	sp, #16
 80094fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009502:	4835      	ldr	r0, [pc, #212]	; (80095d8 <_printf_i+0x244>)
 8009504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009508:	6829      	ldr	r1, [r5, #0]
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009510:	6029      	str	r1, [r5, #0]
 8009512:	061d      	lsls	r5, r3, #24
 8009514:	d514      	bpl.n	8009540 <_printf_i+0x1ac>
 8009516:	07df      	lsls	r7, r3, #31
 8009518:	bf44      	itt	mi
 800951a:	f043 0320 	orrmi.w	r3, r3, #32
 800951e:	6023      	strmi	r3, [r4, #0]
 8009520:	b91e      	cbnz	r6, 800952a <_printf_i+0x196>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	f023 0320 	bic.w	r3, r3, #32
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	2310      	movs	r3, #16
 800952c:	e7b0      	b.n	8009490 <_printf_i+0xfc>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	f043 0320 	orr.w	r3, r3, #32
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	2378      	movs	r3, #120	; 0x78
 8009538:	4828      	ldr	r0, [pc, #160]	; (80095dc <_printf_i+0x248>)
 800953a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800953e:	e7e3      	b.n	8009508 <_printf_i+0x174>
 8009540:	0659      	lsls	r1, r3, #25
 8009542:	bf48      	it	mi
 8009544:	b2b6      	uxthmi	r6, r6
 8009546:	e7e6      	b.n	8009516 <_printf_i+0x182>
 8009548:	4615      	mov	r5, r2
 800954a:	e7bb      	b.n	80094c4 <_printf_i+0x130>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	6826      	ldr	r6, [r4, #0]
 8009550:	6961      	ldr	r1, [r4, #20]
 8009552:	1d18      	adds	r0, r3, #4
 8009554:	6028      	str	r0, [r5, #0]
 8009556:	0635      	lsls	r5, r6, #24
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	d501      	bpl.n	8009560 <_printf_i+0x1cc>
 800955c:	6019      	str	r1, [r3, #0]
 800955e:	e002      	b.n	8009566 <_printf_i+0x1d2>
 8009560:	0670      	lsls	r0, r6, #25
 8009562:	d5fb      	bpl.n	800955c <_printf_i+0x1c8>
 8009564:	8019      	strh	r1, [r3, #0]
 8009566:	2300      	movs	r3, #0
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	4615      	mov	r5, r2
 800956c:	e7ba      	b.n	80094e4 <_printf_i+0x150>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	602a      	str	r2, [r5, #0]
 8009574:	681d      	ldr	r5, [r3, #0]
 8009576:	6862      	ldr	r2, [r4, #4]
 8009578:	2100      	movs	r1, #0
 800957a:	4628      	mov	r0, r5
 800957c:	f7f6 fe30 	bl	80001e0 <memchr>
 8009580:	b108      	cbz	r0, 8009586 <_printf_i+0x1f2>
 8009582:	1b40      	subs	r0, r0, r5
 8009584:	6060      	str	r0, [r4, #4]
 8009586:	6863      	ldr	r3, [r4, #4]
 8009588:	6123      	str	r3, [r4, #16]
 800958a:	2300      	movs	r3, #0
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009590:	e7a8      	b.n	80094e4 <_printf_i+0x150>
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	462a      	mov	r2, r5
 8009596:	4649      	mov	r1, r9
 8009598:	4640      	mov	r0, r8
 800959a:	47d0      	blx	sl
 800959c:	3001      	adds	r0, #1
 800959e:	d0ab      	beq.n	80094f8 <_printf_i+0x164>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	079b      	lsls	r3, r3, #30
 80095a4:	d413      	bmi.n	80095ce <_printf_i+0x23a>
 80095a6:	68e0      	ldr	r0, [r4, #12]
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	4298      	cmp	r0, r3
 80095ac:	bfb8      	it	lt
 80095ae:	4618      	movlt	r0, r3
 80095b0:	e7a4      	b.n	80094fc <_printf_i+0x168>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4632      	mov	r2, r6
 80095b6:	4649      	mov	r1, r9
 80095b8:	4640      	mov	r0, r8
 80095ba:	47d0      	blx	sl
 80095bc:	3001      	adds	r0, #1
 80095be:	d09b      	beq.n	80094f8 <_printf_i+0x164>
 80095c0:	3501      	adds	r5, #1
 80095c2:	68e3      	ldr	r3, [r4, #12]
 80095c4:	9903      	ldr	r1, [sp, #12]
 80095c6:	1a5b      	subs	r3, r3, r1
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	dcf2      	bgt.n	80095b2 <_printf_i+0x21e>
 80095cc:	e7eb      	b.n	80095a6 <_printf_i+0x212>
 80095ce:	2500      	movs	r5, #0
 80095d0:	f104 0619 	add.w	r6, r4, #25
 80095d4:	e7f5      	b.n	80095c2 <_printf_i+0x22e>
 80095d6:	bf00      	nop
 80095d8:	0800f47b 	.word	0x0800f47b
 80095dc:	0800f48c 	.word	0x0800f48c

080095e0 <_scanf_float>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	b087      	sub	sp, #28
 80095e6:	4617      	mov	r7, r2
 80095e8:	9303      	str	r3, [sp, #12]
 80095ea:	688b      	ldr	r3, [r1, #8]
 80095ec:	1e5a      	subs	r2, r3, #1
 80095ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095f2:	bf83      	ittte	hi
 80095f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095f8:	195b      	addhi	r3, r3, r5
 80095fa:	9302      	strhi	r3, [sp, #8]
 80095fc:	2300      	movls	r3, #0
 80095fe:	bf86      	itte	hi
 8009600:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009604:	608b      	strhi	r3, [r1, #8]
 8009606:	9302      	strls	r3, [sp, #8]
 8009608:	680b      	ldr	r3, [r1, #0]
 800960a:	468b      	mov	fp, r1
 800960c:	2500      	movs	r5, #0
 800960e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009612:	f84b 3b1c 	str.w	r3, [fp], #28
 8009616:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800961a:	4680      	mov	r8, r0
 800961c:	460c      	mov	r4, r1
 800961e:	465e      	mov	r6, fp
 8009620:	46aa      	mov	sl, r5
 8009622:	46a9      	mov	r9, r5
 8009624:	9501      	str	r5, [sp, #4]
 8009626:	68a2      	ldr	r2, [r4, #8]
 8009628:	b152      	cbz	r2, 8009640 <_scanf_float+0x60>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b4e      	cmp	r3, #78	; 0x4e
 8009630:	d864      	bhi.n	80096fc <_scanf_float+0x11c>
 8009632:	2b40      	cmp	r3, #64	; 0x40
 8009634:	d83c      	bhi.n	80096b0 <_scanf_float+0xd0>
 8009636:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800963a:	b2c8      	uxtb	r0, r1
 800963c:	280e      	cmp	r0, #14
 800963e:	d93a      	bls.n	80096b6 <_scanf_float+0xd6>
 8009640:	f1b9 0f00 	cmp.w	r9, #0
 8009644:	d003      	beq.n	800964e <_scanf_float+0x6e>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009652:	f1ba 0f01 	cmp.w	sl, #1
 8009656:	f200 8113 	bhi.w	8009880 <_scanf_float+0x2a0>
 800965a:	455e      	cmp	r6, fp
 800965c:	f200 8105 	bhi.w	800986a <_scanf_float+0x28a>
 8009660:	2501      	movs	r5, #1
 8009662:	4628      	mov	r0, r5
 8009664:	b007      	add	sp, #28
 8009666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800966e:	2a0d      	cmp	r2, #13
 8009670:	d8e6      	bhi.n	8009640 <_scanf_float+0x60>
 8009672:	a101      	add	r1, pc, #4	; (adr r1, 8009678 <_scanf_float+0x98>)
 8009674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009678:	080097b7 	.word	0x080097b7
 800967c:	08009641 	.word	0x08009641
 8009680:	08009641 	.word	0x08009641
 8009684:	08009641 	.word	0x08009641
 8009688:	08009817 	.word	0x08009817
 800968c:	080097ef 	.word	0x080097ef
 8009690:	08009641 	.word	0x08009641
 8009694:	08009641 	.word	0x08009641
 8009698:	080097c5 	.word	0x080097c5
 800969c:	08009641 	.word	0x08009641
 80096a0:	08009641 	.word	0x08009641
 80096a4:	08009641 	.word	0x08009641
 80096a8:	08009641 	.word	0x08009641
 80096ac:	0800977d 	.word	0x0800977d
 80096b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80096b4:	e7db      	b.n	800966e <_scanf_float+0x8e>
 80096b6:	290e      	cmp	r1, #14
 80096b8:	d8c2      	bhi.n	8009640 <_scanf_float+0x60>
 80096ba:	a001      	add	r0, pc, #4	; (adr r0, 80096c0 <_scanf_float+0xe0>)
 80096bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80096c0:	0800976f 	.word	0x0800976f
 80096c4:	08009641 	.word	0x08009641
 80096c8:	0800976f 	.word	0x0800976f
 80096cc:	08009803 	.word	0x08009803
 80096d0:	08009641 	.word	0x08009641
 80096d4:	0800971d 	.word	0x0800971d
 80096d8:	08009759 	.word	0x08009759
 80096dc:	08009759 	.word	0x08009759
 80096e0:	08009759 	.word	0x08009759
 80096e4:	08009759 	.word	0x08009759
 80096e8:	08009759 	.word	0x08009759
 80096ec:	08009759 	.word	0x08009759
 80096f0:	08009759 	.word	0x08009759
 80096f4:	08009759 	.word	0x08009759
 80096f8:	08009759 	.word	0x08009759
 80096fc:	2b6e      	cmp	r3, #110	; 0x6e
 80096fe:	d809      	bhi.n	8009714 <_scanf_float+0x134>
 8009700:	2b60      	cmp	r3, #96	; 0x60
 8009702:	d8b2      	bhi.n	800966a <_scanf_float+0x8a>
 8009704:	2b54      	cmp	r3, #84	; 0x54
 8009706:	d077      	beq.n	80097f8 <_scanf_float+0x218>
 8009708:	2b59      	cmp	r3, #89	; 0x59
 800970a:	d199      	bne.n	8009640 <_scanf_float+0x60>
 800970c:	2d07      	cmp	r5, #7
 800970e:	d197      	bne.n	8009640 <_scanf_float+0x60>
 8009710:	2508      	movs	r5, #8
 8009712:	e029      	b.n	8009768 <_scanf_float+0x188>
 8009714:	2b74      	cmp	r3, #116	; 0x74
 8009716:	d06f      	beq.n	80097f8 <_scanf_float+0x218>
 8009718:	2b79      	cmp	r3, #121	; 0x79
 800971a:	e7f6      	b.n	800970a <_scanf_float+0x12a>
 800971c:	6821      	ldr	r1, [r4, #0]
 800971e:	05c8      	lsls	r0, r1, #23
 8009720:	d51a      	bpl.n	8009758 <_scanf_float+0x178>
 8009722:	9b02      	ldr	r3, [sp, #8]
 8009724:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009728:	6021      	str	r1, [r4, #0]
 800972a:	f109 0901 	add.w	r9, r9, #1
 800972e:	b11b      	cbz	r3, 8009738 <_scanf_float+0x158>
 8009730:	3b01      	subs	r3, #1
 8009732:	3201      	adds	r2, #1
 8009734:	9302      	str	r3, [sp, #8]
 8009736:	60a2      	str	r2, [r4, #8]
 8009738:	68a3      	ldr	r3, [r4, #8]
 800973a:	3b01      	subs	r3, #1
 800973c:	60a3      	str	r3, [r4, #8]
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	3301      	adds	r3, #1
 8009742:	6123      	str	r3, [r4, #16]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3b01      	subs	r3, #1
 8009748:	2b00      	cmp	r3, #0
 800974a:	607b      	str	r3, [r7, #4]
 800974c:	f340 8084 	ble.w	8009858 <_scanf_float+0x278>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	3301      	adds	r3, #1
 8009754:	603b      	str	r3, [r7, #0]
 8009756:	e766      	b.n	8009626 <_scanf_float+0x46>
 8009758:	eb1a 0f05 	cmn.w	sl, r5
 800975c:	f47f af70 	bne.w	8009640 <_scanf_float+0x60>
 8009760:	6822      	ldr	r2, [r4, #0]
 8009762:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009766:	6022      	str	r2, [r4, #0]
 8009768:	f806 3b01 	strb.w	r3, [r6], #1
 800976c:	e7e4      	b.n	8009738 <_scanf_float+0x158>
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	0610      	lsls	r0, r2, #24
 8009772:	f57f af65 	bpl.w	8009640 <_scanf_float+0x60>
 8009776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800977a:	e7f4      	b.n	8009766 <_scanf_float+0x186>
 800977c:	f1ba 0f00 	cmp.w	sl, #0
 8009780:	d10e      	bne.n	80097a0 <_scanf_float+0x1c0>
 8009782:	f1b9 0f00 	cmp.w	r9, #0
 8009786:	d10e      	bne.n	80097a6 <_scanf_float+0x1c6>
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800978e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009792:	d108      	bne.n	80097a6 <_scanf_float+0x1c6>
 8009794:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009798:	6022      	str	r2, [r4, #0]
 800979a:	f04f 0a01 	mov.w	sl, #1
 800979e:	e7e3      	b.n	8009768 <_scanf_float+0x188>
 80097a0:	f1ba 0f02 	cmp.w	sl, #2
 80097a4:	d055      	beq.n	8009852 <_scanf_float+0x272>
 80097a6:	2d01      	cmp	r5, #1
 80097a8:	d002      	beq.n	80097b0 <_scanf_float+0x1d0>
 80097aa:	2d04      	cmp	r5, #4
 80097ac:	f47f af48 	bne.w	8009640 <_scanf_float+0x60>
 80097b0:	3501      	adds	r5, #1
 80097b2:	b2ed      	uxtb	r5, r5
 80097b4:	e7d8      	b.n	8009768 <_scanf_float+0x188>
 80097b6:	f1ba 0f01 	cmp.w	sl, #1
 80097ba:	f47f af41 	bne.w	8009640 <_scanf_float+0x60>
 80097be:	f04f 0a02 	mov.w	sl, #2
 80097c2:	e7d1      	b.n	8009768 <_scanf_float+0x188>
 80097c4:	b97d      	cbnz	r5, 80097e6 <_scanf_float+0x206>
 80097c6:	f1b9 0f00 	cmp.w	r9, #0
 80097ca:	f47f af3c 	bne.w	8009646 <_scanf_float+0x66>
 80097ce:	6822      	ldr	r2, [r4, #0]
 80097d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097d8:	f47f af39 	bne.w	800964e <_scanf_float+0x6e>
 80097dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097e0:	6022      	str	r2, [r4, #0]
 80097e2:	2501      	movs	r5, #1
 80097e4:	e7c0      	b.n	8009768 <_scanf_float+0x188>
 80097e6:	2d03      	cmp	r5, #3
 80097e8:	d0e2      	beq.n	80097b0 <_scanf_float+0x1d0>
 80097ea:	2d05      	cmp	r5, #5
 80097ec:	e7de      	b.n	80097ac <_scanf_float+0x1cc>
 80097ee:	2d02      	cmp	r5, #2
 80097f0:	f47f af26 	bne.w	8009640 <_scanf_float+0x60>
 80097f4:	2503      	movs	r5, #3
 80097f6:	e7b7      	b.n	8009768 <_scanf_float+0x188>
 80097f8:	2d06      	cmp	r5, #6
 80097fa:	f47f af21 	bne.w	8009640 <_scanf_float+0x60>
 80097fe:	2507      	movs	r5, #7
 8009800:	e7b2      	b.n	8009768 <_scanf_float+0x188>
 8009802:	6822      	ldr	r2, [r4, #0]
 8009804:	0591      	lsls	r1, r2, #22
 8009806:	f57f af1b 	bpl.w	8009640 <_scanf_float+0x60>
 800980a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800980e:	6022      	str	r2, [r4, #0]
 8009810:	f8cd 9004 	str.w	r9, [sp, #4]
 8009814:	e7a8      	b.n	8009768 <_scanf_float+0x188>
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800981c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009820:	d006      	beq.n	8009830 <_scanf_float+0x250>
 8009822:	0550      	lsls	r0, r2, #21
 8009824:	f57f af0c 	bpl.w	8009640 <_scanf_float+0x60>
 8009828:	f1b9 0f00 	cmp.w	r9, #0
 800982c:	f43f af0f 	beq.w	800964e <_scanf_float+0x6e>
 8009830:	0591      	lsls	r1, r2, #22
 8009832:	bf58      	it	pl
 8009834:	9901      	ldrpl	r1, [sp, #4]
 8009836:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800983a:	bf58      	it	pl
 800983c:	eba9 0101 	subpl.w	r1, r9, r1
 8009840:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009844:	bf58      	it	pl
 8009846:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800984a:	6022      	str	r2, [r4, #0]
 800984c:	f04f 0900 	mov.w	r9, #0
 8009850:	e78a      	b.n	8009768 <_scanf_float+0x188>
 8009852:	f04f 0a03 	mov.w	sl, #3
 8009856:	e787      	b.n	8009768 <_scanf_float+0x188>
 8009858:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800985c:	4639      	mov	r1, r7
 800985e:	4640      	mov	r0, r8
 8009860:	4798      	blx	r3
 8009862:	2800      	cmp	r0, #0
 8009864:	f43f aedf 	beq.w	8009626 <_scanf_float+0x46>
 8009868:	e6ea      	b.n	8009640 <_scanf_float+0x60>
 800986a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800986e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009872:	463a      	mov	r2, r7
 8009874:	4640      	mov	r0, r8
 8009876:	4798      	blx	r3
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	3b01      	subs	r3, #1
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	e6ec      	b.n	800965a <_scanf_float+0x7a>
 8009880:	1e6b      	subs	r3, r5, #1
 8009882:	2b06      	cmp	r3, #6
 8009884:	d825      	bhi.n	80098d2 <_scanf_float+0x2f2>
 8009886:	2d02      	cmp	r5, #2
 8009888:	d836      	bhi.n	80098f8 <_scanf_float+0x318>
 800988a:	455e      	cmp	r6, fp
 800988c:	f67f aee8 	bls.w	8009660 <_scanf_float+0x80>
 8009890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009894:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009898:	463a      	mov	r2, r7
 800989a:	4640      	mov	r0, r8
 800989c:	4798      	blx	r3
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	6123      	str	r3, [r4, #16]
 80098a4:	e7f1      	b.n	800988a <_scanf_float+0x2aa>
 80098a6:	9802      	ldr	r0, [sp, #8]
 80098a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80098b0:	9002      	str	r0, [sp, #8]
 80098b2:	463a      	mov	r2, r7
 80098b4:	4640      	mov	r0, r8
 80098b6:	4798      	blx	r3
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	6123      	str	r3, [r4, #16]
 80098be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098c2:	fa5f fa8a 	uxtb.w	sl, sl
 80098c6:	f1ba 0f02 	cmp.w	sl, #2
 80098ca:	d1ec      	bne.n	80098a6 <_scanf_float+0x2c6>
 80098cc:	3d03      	subs	r5, #3
 80098ce:	b2ed      	uxtb	r5, r5
 80098d0:	1b76      	subs	r6, r6, r5
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	05da      	lsls	r2, r3, #23
 80098d6:	d52f      	bpl.n	8009938 <_scanf_float+0x358>
 80098d8:	055b      	lsls	r3, r3, #21
 80098da:	d510      	bpl.n	80098fe <_scanf_float+0x31e>
 80098dc:	455e      	cmp	r6, fp
 80098de:	f67f aebf 	bls.w	8009660 <_scanf_float+0x80>
 80098e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098ea:	463a      	mov	r2, r7
 80098ec:	4640      	mov	r0, r8
 80098ee:	4798      	blx	r3
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	6123      	str	r3, [r4, #16]
 80098f6:	e7f1      	b.n	80098dc <_scanf_float+0x2fc>
 80098f8:	46aa      	mov	sl, r5
 80098fa:	9602      	str	r6, [sp, #8]
 80098fc:	e7df      	b.n	80098be <_scanf_float+0x2de>
 80098fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	2965      	cmp	r1, #101	; 0x65
 8009906:	f103 33ff 	add.w	r3, r3, #4294967295
 800990a:	f106 35ff 	add.w	r5, r6, #4294967295
 800990e:	6123      	str	r3, [r4, #16]
 8009910:	d00c      	beq.n	800992c <_scanf_float+0x34c>
 8009912:	2945      	cmp	r1, #69	; 0x45
 8009914:	d00a      	beq.n	800992c <_scanf_float+0x34c>
 8009916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800991a:	463a      	mov	r2, r7
 800991c:	4640      	mov	r0, r8
 800991e:	4798      	blx	r3
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009926:	3b01      	subs	r3, #1
 8009928:	1eb5      	subs	r5, r6, #2
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009930:	463a      	mov	r2, r7
 8009932:	4640      	mov	r0, r8
 8009934:	4798      	blx	r3
 8009936:	462e      	mov	r6, r5
 8009938:	6825      	ldr	r5, [r4, #0]
 800993a:	f015 0510 	ands.w	r5, r5, #16
 800993e:	d159      	bne.n	80099f4 <_scanf_float+0x414>
 8009940:	7035      	strb	r5, [r6, #0]
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800994c:	d11b      	bne.n	8009986 <_scanf_float+0x3a6>
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	454b      	cmp	r3, r9
 8009952:	eba3 0209 	sub.w	r2, r3, r9
 8009956:	d123      	bne.n	80099a0 <_scanf_float+0x3c0>
 8009958:	2200      	movs	r2, #0
 800995a:	4659      	mov	r1, fp
 800995c:	4640      	mov	r0, r8
 800995e:	f000 ff35 	bl	800a7cc <_strtod_r>
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	f012 0f02 	tst.w	r2, #2
 800996a:	ec57 6b10 	vmov	r6, r7, d0
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	d021      	beq.n	80099b6 <_scanf_float+0x3d6>
 8009972:	9903      	ldr	r1, [sp, #12]
 8009974:	1d1a      	adds	r2, r3, #4
 8009976:	600a      	str	r2, [r1, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	e9c3 6700 	strd	r6, r7, [r3]
 800997e:	68e3      	ldr	r3, [r4, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	60e3      	str	r3, [r4, #12]
 8009984:	e66d      	b.n	8009662 <_scanf_float+0x82>
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d0e5      	beq.n	8009958 <_scanf_float+0x378>
 800998c:	9905      	ldr	r1, [sp, #20]
 800998e:	230a      	movs	r3, #10
 8009990:	462a      	mov	r2, r5
 8009992:	3101      	adds	r1, #1
 8009994:	4640      	mov	r0, r8
 8009996:	f000 ffa1 	bl	800a8dc <_strtol_r>
 800999a:	9b04      	ldr	r3, [sp, #16]
 800999c:	9e05      	ldr	r6, [sp, #20]
 800999e:	1ac2      	subs	r2, r0, r3
 80099a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80099a4:	429e      	cmp	r6, r3
 80099a6:	bf28      	it	cs
 80099a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80099ac:	4912      	ldr	r1, [pc, #72]	; (80099f8 <_scanf_float+0x418>)
 80099ae:	4630      	mov	r0, r6
 80099b0:	f000 f884 	bl	8009abc <siprintf>
 80099b4:	e7d0      	b.n	8009958 <_scanf_float+0x378>
 80099b6:	9903      	ldr	r1, [sp, #12]
 80099b8:	f012 0f04 	tst.w	r2, #4
 80099bc:	f103 0204 	add.w	r2, r3, #4
 80099c0:	600a      	str	r2, [r1, #0]
 80099c2:	d1d9      	bne.n	8009978 <_scanf_float+0x398>
 80099c4:	f8d3 8000 	ldr.w	r8, [r3]
 80099c8:	ee10 2a10 	vmov	r2, s0
 80099cc:	ee10 0a10 	vmov	r0, s0
 80099d0:	463b      	mov	r3, r7
 80099d2:	4639      	mov	r1, r7
 80099d4:	f7f7 f8aa 	bl	8000b2c <__aeabi_dcmpun>
 80099d8:	b128      	cbz	r0, 80099e6 <_scanf_float+0x406>
 80099da:	4808      	ldr	r0, [pc, #32]	; (80099fc <_scanf_float+0x41c>)
 80099dc:	f000 f868 	bl	8009ab0 <nanf>
 80099e0:	ed88 0a00 	vstr	s0, [r8]
 80099e4:	e7cb      	b.n	800997e <_scanf_float+0x39e>
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f7 f8fd 	bl	8000be8 <__aeabi_d2f>
 80099ee:	f8c8 0000 	str.w	r0, [r8]
 80099f2:	e7c4      	b.n	800997e <_scanf_float+0x39e>
 80099f4:	2500      	movs	r5, #0
 80099f6:	e634      	b.n	8009662 <_scanf_float+0x82>
 80099f8:	0800f49d 	.word	0x0800f49d
 80099fc:	0800f2ef 	.word	0x0800f2ef

08009a00 <_putc_r>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	460d      	mov	r5, r1
 8009a04:	4614      	mov	r4, r2
 8009a06:	4606      	mov	r6, r0
 8009a08:	b118      	cbz	r0, 8009a12 <_putc_r+0x12>
 8009a0a:	6983      	ldr	r3, [r0, #24]
 8009a0c:	b90b      	cbnz	r3, 8009a12 <_putc_r+0x12>
 8009a0e:	f7fe fd5d 	bl	80084cc <__sinit>
 8009a12:	4b1c      	ldr	r3, [pc, #112]	; (8009a84 <_putc_r+0x84>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	d124      	bne.n	8009a62 <_putc_r+0x62>
 8009a18:	6874      	ldr	r4, [r6, #4]
 8009a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a1c:	07d8      	lsls	r0, r3, #31
 8009a1e:	d405      	bmi.n	8009a2c <_putc_r+0x2c>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	0599      	lsls	r1, r3, #22
 8009a24:	d402      	bmi.n	8009a2c <_putc_r+0x2c>
 8009a26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a28:	f7fe fed3 	bl	80087d2 <__retarget_lock_acquire_recursive>
 8009a2c:	68a3      	ldr	r3, [r4, #8]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	60a3      	str	r3, [r4, #8]
 8009a34:	da05      	bge.n	8009a42 <_putc_r+0x42>
 8009a36:	69a2      	ldr	r2, [r4, #24]
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	db1c      	blt.n	8009a76 <_putc_r+0x76>
 8009a3c:	b2eb      	uxtb	r3, r5
 8009a3e:	2b0a      	cmp	r3, #10
 8009a40:	d019      	beq.n	8009a76 <_putc_r+0x76>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	1c5a      	adds	r2, r3, #1
 8009a46:	6022      	str	r2, [r4, #0]
 8009a48:	701d      	strb	r5, [r3, #0]
 8009a4a:	b2ed      	uxtb	r5, r5
 8009a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a4e:	07da      	lsls	r2, r3, #31
 8009a50:	d405      	bmi.n	8009a5e <_putc_r+0x5e>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	059b      	lsls	r3, r3, #22
 8009a56:	d402      	bmi.n	8009a5e <_putc_r+0x5e>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f7fe febb 	bl	80087d4 <__retarget_lock_release_recursive>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	bd70      	pop	{r4, r5, r6, pc}
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <_putc_r+0x88>)
 8009a64:	429c      	cmp	r4, r3
 8009a66:	d101      	bne.n	8009a6c <_putc_r+0x6c>
 8009a68:	68b4      	ldr	r4, [r6, #8]
 8009a6a:	e7d6      	b.n	8009a1a <_putc_r+0x1a>
 8009a6c:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <_putc_r+0x8c>)
 8009a6e:	429c      	cmp	r4, r3
 8009a70:	bf08      	it	eq
 8009a72:	68f4      	ldreq	r4, [r6, #12]
 8009a74:	e7d1      	b.n	8009a1a <_putc_r+0x1a>
 8009a76:	4629      	mov	r1, r5
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f000 ff30 	bl	800a8e0 <__swbuf_r>
 8009a80:	4605      	mov	r5, r0
 8009a82:	e7e3      	b.n	8009a4c <_putc_r+0x4c>
 8009a84:	0800f414 	.word	0x0800f414
 8009a88:	0800f434 	.word	0x0800f434
 8009a8c:	0800f3f4 	.word	0x0800f3f4

08009a90 <_sbrk_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d06      	ldr	r5, [pc, #24]	; (8009aac <_sbrk_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f7f7 fc7c 	bl	8001398 <_sbrk>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_sbrk_r+0x1a>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_sbrk_r+0x1a>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	20000eec 	.word	0x20000eec

08009ab0 <nanf>:
 8009ab0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009ab8 <nanf+0x8>
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	7fc00000 	.word	0x7fc00000

08009abc <siprintf>:
 8009abc:	b40e      	push	{r1, r2, r3}
 8009abe:	b500      	push	{lr}
 8009ac0:	b09c      	sub	sp, #112	; 0x70
 8009ac2:	ab1d      	add	r3, sp, #116	; 0x74
 8009ac4:	9002      	str	r0, [sp, #8]
 8009ac6:	9006      	str	r0, [sp, #24]
 8009ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009acc:	4809      	ldr	r0, [pc, #36]	; (8009af4 <siprintf+0x38>)
 8009ace:	9107      	str	r1, [sp, #28]
 8009ad0:	9104      	str	r1, [sp, #16]
 8009ad2:	4909      	ldr	r1, [pc, #36]	; (8009af8 <siprintf+0x3c>)
 8009ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad8:	9105      	str	r1, [sp, #20]
 8009ada:	6800      	ldr	r0, [r0, #0]
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	a902      	add	r1, sp, #8
 8009ae0:	f002 ffba 	bl	800ca58 <_svfiprintf_r>
 8009ae4:	9b02      	ldr	r3, [sp, #8]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	b01c      	add	sp, #112	; 0x70
 8009aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af0:	b003      	add	sp, #12
 8009af2:	4770      	bx	lr
 8009af4:	2000000c 	.word	0x2000000c
 8009af8:	ffff0208 	.word	0xffff0208

08009afc <__sread>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	460c      	mov	r4, r1
 8009b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b04:	f003 f8a8 	bl	800cc58 <_read_r>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	bfab      	itete	ge
 8009b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b10:	181b      	addge	r3, r3, r0
 8009b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b16:	bfac      	ite	ge
 8009b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b1a:	81a3      	strhlt	r3, [r4, #12]
 8009b1c:	bd10      	pop	{r4, pc}

08009b1e <__swrite>:
 8009b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b22:	461f      	mov	r7, r3
 8009b24:	898b      	ldrh	r3, [r1, #12]
 8009b26:	05db      	lsls	r3, r3, #23
 8009b28:	4605      	mov	r5, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4616      	mov	r6, r2
 8009b2e:	d505      	bpl.n	8009b3c <__swrite+0x1e>
 8009b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b34:	2302      	movs	r3, #2
 8009b36:	2200      	movs	r2, #0
 8009b38:	f002 f9ac 	bl	800be94 <_lseek_r>
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	4632      	mov	r2, r6
 8009b4a:	463b      	mov	r3, r7
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b52:	f000 bf17 	b.w	800a984 <_write_r>

08009b56 <__sseek>:
 8009b56:	b510      	push	{r4, lr}
 8009b58:	460c      	mov	r4, r1
 8009b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5e:	f002 f999 	bl	800be94 <_lseek_r>
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	bf15      	itete	ne
 8009b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b72:	81a3      	strheq	r3, [r4, #12]
 8009b74:	bf18      	it	ne
 8009b76:	81a3      	strhne	r3, [r4, #12]
 8009b78:	bd10      	pop	{r4, pc}

08009b7a <__sclose>:
 8009b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7e:	f000 bf89 	b.w	800aa94 <_close_r>

08009b82 <sulp>:
 8009b82:	b570      	push	{r4, r5, r6, lr}
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	ec45 4b10 	vmov	d0, r4, r5
 8009b8c:	4616      	mov	r6, r2
 8009b8e:	f002 fd89 	bl	800c6a4 <__ulp>
 8009b92:	ec51 0b10 	vmov	r0, r1, d0
 8009b96:	b17e      	cbz	r6, 8009bb8 <sulp+0x36>
 8009b98:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dd09      	ble.n	8009bb8 <sulp+0x36>
 8009ba4:	051b      	lsls	r3, r3, #20
 8009ba6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009baa:	2400      	movs	r4, #0
 8009bac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	f7f6 fd20 	bl	80005f8 <__aeabi_dmul>
 8009bb8:	bd70      	pop	{r4, r5, r6, pc}
 8009bba:	0000      	movs	r0, r0
 8009bbc:	0000      	movs	r0, r0
	...

08009bc0 <_strtod_l>:
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	ed2d 8b02 	vpush	{d8}
 8009bc8:	b09d      	sub	sp, #116	; 0x74
 8009bca:	461f      	mov	r7, r3
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9318      	str	r3, [sp, #96]	; 0x60
 8009bd0:	4ba2      	ldr	r3, [pc, #648]	; (8009e5c <_strtod_l+0x29c>)
 8009bd2:	9213      	str	r2, [sp, #76]	; 0x4c
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	9305      	str	r3, [sp, #20]
 8009bd8:	4604      	mov	r4, r0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	4688      	mov	r8, r1
 8009bde:	f7f6 faf7 	bl	80001d0 <strlen>
 8009be2:	f04f 0a00 	mov.w	sl, #0
 8009be6:	4605      	mov	r5, r0
 8009be8:	f04f 0b00 	mov.w	fp, #0
 8009bec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bf2:	781a      	ldrb	r2, [r3, #0]
 8009bf4:	2a2b      	cmp	r2, #43	; 0x2b
 8009bf6:	d04e      	beq.n	8009c96 <_strtod_l+0xd6>
 8009bf8:	d83b      	bhi.n	8009c72 <_strtod_l+0xb2>
 8009bfa:	2a0d      	cmp	r2, #13
 8009bfc:	d834      	bhi.n	8009c68 <_strtod_l+0xa8>
 8009bfe:	2a08      	cmp	r2, #8
 8009c00:	d834      	bhi.n	8009c6c <_strtod_l+0xac>
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	d03e      	beq.n	8009c84 <_strtod_l+0xc4>
 8009c06:	2300      	movs	r3, #0
 8009c08:	930a      	str	r3, [sp, #40]	; 0x28
 8009c0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009c0c:	7833      	ldrb	r3, [r6, #0]
 8009c0e:	2b30      	cmp	r3, #48	; 0x30
 8009c10:	f040 80b0 	bne.w	8009d74 <_strtod_l+0x1b4>
 8009c14:	7873      	ldrb	r3, [r6, #1]
 8009c16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c1a:	2b58      	cmp	r3, #88	; 0x58
 8009c1c:	d168      	bne.n	8009cf0 <_strtod_l+0x130>
 8009c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	ab18      	add	r3, sp, #96	; 0x60
 8009c24:	9702      	str	r7, [sp, #8]
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	4a8d      	ldr	r2, [pc, #564]	; (8009e60 <_strtod_l+0x2a0>)
 8009c2a:	ab19      	add	r3, sp, #100	; 0x64
 8009c2c:	a917      	add	r1, sp, #92	; 0x5c
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f001 fe24 	bl	800b87c <__gethex>
 8009c34:	f010 0707 	ands.w	r7, r0, #7
 8009c38:	4605      	mov	r5, r0
 8009c3a:	d005      	beq.n	8009c48 <_strtod_l+0x88>
 8009c3c:	2f06      	cmp	r7, #6
 8009c3e:	d12c      	bne.n	8009c9a <_strtod_l+0xda>
 8009c40:	3601      	adds	r6, #1
 8009c42:	2300      	movs	r3, #0
 8009c44:	9617      	str	r6, [sp, #92]	; 0x5c
 8009c46:	930a      	str	r3, [sp, #40]	; 0x28
 8009c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f040 8590 	bne.w	800a770 <_strtod_l+0xbb0>
 8009c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c52:	b1eb      	cbz	r3, 8009c90 <_strtod_l+0xd0>
 8009c54:	4652      	mov	r2, sl
 8009c56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c5a:	ec43 2b10 	vmov	d0, r2, r3
 8009c5e:	b01d      	add	sp, #116	; 0x74
 8009c60:	ecbd 8b02 	vpop	{d8}
 8009c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	2a20      	cmp	r2, #32
 8009c6a:	d1cc      	bne.n	8009c06 <_strtod_l+0x46>
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c70:	e7be      	b.n	8009bf0 <_strtod_l+0x30>
 8009c72:	2a2d      	cmp	r2, #45	; 0x2d
 8009c74:	d1c7      	bne.n	8009c06 <_strtod_l+0x46>
 8009c76:	2201      	movs	r2, #1
 8009c78:	920a      	str	r2, [sp, #40]	; 0x28
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c7e:	785b      	ldrb	r3, [r3, #1]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1c2      	bne.n	8009c0a <_strtod_l+0x4a>
 8009c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f040 856e 	bne.w	800a76c <_strtod_l+0xbac>
 8009c90:	4652      	mov	r2, sl
 8009c92:	465b      	mov	r3, fp
 8009c94:	e7e1      	b.n	8009c5a <_strtod_l+0x9a>
 8009c96:	2200      	movs	r2, #0
 8009c98:	e7ee      	b.n	8009c78 <_strtod_l+0xb8>
 8009c9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c9c:	b13a      	cbz	r2, 8009cae <_strtod_l+0xee>
 8009c9e:	2135      	movs	r1, #53	; 0x35
 8009ca0:	a81a      	add	r0, sp, #104	; 0x68
 8009ca2:	f002 fe0a 	bl	800c8ba <__copybits>
 8009ca6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f002 f9c9 	bl	800c040 <_Bfree>
 8009cae:	3f01      	subs	r7, #1
 8009cb0:	2f04      	cmp	r7, #4
 8009cb2:	d806      	bhi.n	8009cc2 <_strtod_l+0x102>
 8009cb4:	e8df f007 	tbb	[pc, r7]
 8009cb8:	1714030a 	.word	0x1714030a
 8009cbc:	0a          	.byte	0x0a
 8009cbd:	00          	.byte	0x00
 8009cbe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009cc2:	0728      	lsls	r0, r5, #28
 8009cc4:	d5c0      	bpl.n	8009c48 <_strtod_l+0x88>
 8009cc6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009cca:	e7bd      	b.n	8009c48 <_strtod_l+0x88>
 8009ccc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009cd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009cd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009cda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009cde:	e7f0      	b.n	8009cc2 <_strtod_l+0x102>
 8009ce0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009e64 <_strtod_l+0x2a4>
 8009ce4:	e7ed      	b.n	8009cc2 <_strtod_l+0x102>
 8009ce6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009cea:	f04f 3aff 	mov.w	sl, #4294967295
 8009cee:	e7e8      	b.n	8009cc2 <_strtod_l+0x102>
 8009cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009cf6:	785b      	ldrb	r3, [r3, #1]
 8009cf8:	2b30      	cmp	r3, #48	; 0x30
 8009cfa:	d0f9      	beq.n	8009cf0 <_strtod_l+0x130>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0a3      	beq.n	8009c48 <_strtod_l+0x88>
 8009d00:	2301      	movs	r3, #1
 8009d02:	f04f 0900 	mov.w	r9, #0
 8009d06:	9304      	str	r3, [sp, #16]
 8009d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d0a:	9308      	str	r3, [sp, #32]
 8009d0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d10:	464f      	mov	r7, r9
 8009d12:	220a      	movs	r2, #10
 8009d14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009d16:	7806      	ldrb	r6, [r0, #0]
 8009d18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009d1c:	b2d9      	uxtb	r1, r3
 8009d1e:	2909      	cmp	r1, #9
 8009d20:	d92a      	bls.n	8009d78 <_strtod_l+0x1b8>
 8009d22:	9905      	ldr	r1, [sp, #20]
 8009d24:	462a      	mov	r2, r5
 8009d26:	f002 fff7 	bl	800cd18 <strncmp>
 8009d2a:	b398      	cbz	r0, 8009d94 <_strtod_l+0x1d4>
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	4632      	mov	r2, r6
 8009d30:	463d      	mov	r5, r7
 8009d32:	9005      	str	r0, [sp, #20]
 8009d34:	4603      	mov	r3, r0
 8009d36:	2a65      	cmp	r2, #101	; 0x65
 8009d38:	d001      	beq.n	8009d3e <_strtod_l+0x17e>
 8009d3a:	2a45      	cmp	r2, #69	; 0x45
 8009d3c:	d118      	bne.n	8009d70 <_strtod_l+0x1b0>
 8009d3e:	b91d      	cbnz	r5, 8009d48 <_strtod_l+0x188>
 8009d40:	9a04      	ldr	r2, [sp, #16]
 8009d42:	4302      	orrs	r2, r0
 8009d44:	d09e      	beq.n	8009c84 <_strtod_l+0xc4>
 8009d46:	2500      	movs	r5, #0
 8009d48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009d4c:	f108 0201 	add.w	r2, r8, #1
 8009d50:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009d56:	2a2b      	cmp	r2, #43	; 0x2b
 8009d58:	d075      	beq.n	8009e46 <_strtod_l+0x286>
 8009d5a:	2a2d      	cmp	r2, #45	; 0x2d
 8009d5c:	d07b      	beq.n	8009e56 <_strtod_l+0x296>
 8009d5e:	f04f 0c00 	mov.w	ip, #0
 8009d62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009d66:	2909      	cmp	r1, #9
 8009d68:	f240 8082 	bls.w	8009e70 <_strtod_l+0x2b0>
 8009d6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009d70:	2600      	movs	r6, #0
 8009d72:	e09d      	b.n	8009eb0 <_strtod_l+0x2f0>
 8009d74:	2300      	movs	r3, #0
 8009d76:	e7c4      	b.n	8009d02 <_strtod_l+0x142>
 8009d78:	2f08      	cmp	r7, #8
 8009d7a:	bfd8      	it	le
 8009d7c:	9907      	ldrle	r1, [sp, #28]
 8009d7e:	f100 0001 	add.w	r0, r0, #1
 8009d82:	bfda      	itte	le
 8009d84:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d88:	9307      	strle	r3, [sp, #28]
 8009d8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009d8e:	3701      	adds	r7, #1
 8009d90:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d92:	e7bf      	b.n	8009d14 <_strtod_l+0x154>
 8009d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d96:	195a      	adds	r2, r3, r5
 8009d98:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d9a:	5d5a      	ldrb	r2, [r3, r5]
 8009d9c:	2f00      	cmp	r7, #0
 8009d9e:	d037      	beq.n	8009e10 <_strtod_l+0x250>
 8009da0:	9005      	str	r0, [sp, #20]
 8009da2:	463d      	mov	r5, r7
 8009da4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009da8:	2b09      	cmp	r3, #9
 8009daa:	d912      	bls.n	8009dd2 <_strtod_l+0x212>
 8009dac:	2301      	movs	r3, #1
 8009dae:	e7c2      	b.n	8009d36 <_strtod_l+0x176>
 8009db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009db6:	785a      	ldrb	r2, [r3, #1]
 8009db8:	3001      	adds	r0, #1
 8009dba:	2a30      	cmp	r2, #48	; 0x30
 8009dbc:	d0f8      	beq.n	8009db0 <_strtod_l+0x1f0>
 8009dbe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009dc2:	2b08      	cmp	r3, #8
 8009dc4:	f200 84d9 	bhi.w	800a77a <_strtod_l+0xbba>
 8009dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dca:	9005      	str	r0, [sp, #20]
 8009dcc:	2000      	movs	r0, #0
 8009dce:	9308      	str	r3, [sp, #32]
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	3a30      	subs	r2, #48	; 0x30
 8009dd4:	f100 0301 	add.w	r3, r0, #1
 8009dd8:	d014      	beq.n	8009e04 <_strtod_l+0x244>
 8009dda:	9905      	ldr	r1, [sp, #20]
 8009ddc:	4419      	add	r1, r3
 8009dde:	9105      	str	r1, [sp, #20]
 8009de0:	462b      	mov	r3, r5
 8009de2:	eb00 0e05 	add.w	lr, r0, r5
 8009de6:	210a      	movs	r1, #10
 8009de8:	4573      	cmp	r3, lr
 8009dea:	d113      	bne.n	8009e14 <_strtod_l+0x254>
 8009dec:	182b      	adds	r3, r5, r0
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	f105 0501 	add.w	r5, r5, #1
 8009df4:	4405      	add	r5, r0
 8009df6:	dc1c      	bgt.n	8009e32 <_strtod_l+0x272>
 8009df8:	9907      	ldr	r1, [sp, #28]
 8009dfa:	230a      	movs	r3, #10
 8009dfc:	fb03 2301 	mla	r3, r3, r1, r2
 8009e00:	9307      	str	r3, [sp, #28]
 8009e02:	2300      	movs	r3, #0
 8009e04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e06:	1c51      	adds	r1, r2, #1
 8009e08:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e0a:	7852      	ldrb	r2, [r2, #1]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	e7c9      	b.n	8009da4 <_strtod_l+0x1e4>
 8009e10:	4638      	mov	r0, r7
 8009e12:	e7d2      	b.n	8009dba <_strtod_l+0x1fa>
 8009e14:	2b08      	cmp	r3, #8
 8009e16:	dc04      	bgt.n	8009e22 <_strtod_l+0x262>
 8009e18:	9e07      	ldr	r6, [sp, #28]
 8009e1a:	434e      	muls	r6, r1
 8009e1c:	9607      	str	r6, [sp, #28]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	e7e2      	b.n	8009de8 <_strtod_l+0x228>
 8009e22:	f103 0c01 	add.w	ip, r3, #1
 8009e26:	f1bc 0f10 	cmp.w	ip, #16
 8009e2a:	bfd8      	it	le
 8009e2c:	fb01 f909 	mulle.w	r9, r1, r9
 8009e30:	e7f5      	b.n	8009e1e <_strtod_l+0x25e>
 8009e32:	2d10      	cmp	r5, #16
 8009e34:	bfdc      	itt	le
 8009e36:	230a      	movle	r3, #10
 8009e38:	fb03 2909 	mlale	r9, r3, r9, r2
 8009e3c:	e7e1      	b.n	8009e02 <_strtod_l+0x242>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	2301      	movs	r3, #1
 8009e44:	e77c      	b.n	8009d40 <_strtod_l+0x180>
 8009e46:	f04f 0c00 	mov.w	ip, #0
 8009e4a:	f108 0202 	add.w	r2, r8, #2
 8009e4e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e50:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009e54:	e785      	b.n	8009d62 <_strtod_l+0x1a2>
 8009e56:	f04f 0c01 	mov.w	ip, #1
 8009e5a:	e7f6      	b.n	8009e4a <_strtod_l+0x28a>
 8009e5c:	0800f5f0 	.word	0x0800f5f0
 8009e60:	0800f4a4 	.word	0x0800f4a4
 8009e64:	7ff00000 	.word	0x7ff00000
 8009e68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e6a:	1c51      	adds	r1, r2, #1
 8009e6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e6e:	7852      	ldrb	r2, [r2, #1]
 8009e70:	2a30      	cmp	r2, #48	; 0x30
 8009e72:	d0f9      	beq.n	8009e68 <_strtod_l+0x2a8>
 8009e74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009e78:	2908      	cmp	r1, #8
 8009e7a:	f63f af79 	bhi.w	8009d70 <_strtod_l+0x1b0>
 8009e7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009e82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e84:	9206      	str	r2, [sp, #24]
 8009e86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e88:	1c51      	adds	r1, r2, #1
 8009e8a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e8c:	7852      	ldrb	r2, [r2, #1]
 8009e8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009e92:	2e09      	cmp	r6, #9
 8009e94:	d937      	bls.n	8009f06 <_strtod_l+0x346>
 8009e96:	9e06      	ldr	r6, [sp, #24]
 8009e98:	1b89      	subs	r1, r1, r6
 8009e9a:	2908      	cmp	r1, #8
 8009e9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009ea0:	dc02      	bgt.n	8009ea8 <_strtod_l+0x2e8>
 8009ea2:	4576      	cmp	r6, lr
 8009ea4:	bfa8      	it	ge
 8009ea6:	4676      	movge	r6, lr
 8009ea8:	f1bc 0f00 	cmp.w	ip, #0
 8009eac:	d000      	beq.n	8009eb0 <_strtod_l+0x2f0>
 8009eae:	4276      	negs	r6, r6
 8009eb0:	2d00      	cmp	r5, #0
 8009eb2:	d14d      	bne.n	8009f50 <_strtod_l+0x390>
 8009eb4:	9904      	ldr	r1, [sp, #16]
 8009eb6:	4301      	orrs	r1, r0
 8009eb8:	f47f aec6 	bne.w	8009c48 <_strtod_l+0x88>
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f47f aee1 	bne.w	8009c84 <_strtod_l+0xc4>
 8009ec2:	2a69      	cmp	r2, #105	; 0x69
 8009ec4:	d027      	beq.n	8009f16 <_strtod_l+0x356>
 8009ec6:	dc24      	bgt.n	8009f12 <_strtod_l+0x352>
 8009ec8:	2a49      	cmp	r2, #73	; 0x49
 8009eca:	d024      	beq.n	8009f16 <_strtod_l+0x356>
 8009ecc:	2a4e      	cmp	r2, #78	; 0x4e
 8009ece:	f47f aed9 	bne.w	8009c84 <_strtod_l+0xc4>
 8009ed2:	499f      	ldr	r1, [pc, #636]	; (800a150 <_strtod_l+0x590>)
 8009ed4:	a817      	add	r0, sp, #92	; 0x5c
 8009ed6:	f001 ff29 	bl	800bd2c <__match>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f43f aed2 	beq.w	8009c84 <_strtod_l+0xc4>
 8009ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2b28      	cmp	r3, #40	; 0x28
 8009ee6:	d12d      	bne.n	8009f44 <_strtod_l+0x384>
 8009ee8:	499a      	ldr	r1, [pc, #616]	; (800a154 <_strtod_l+0x594>)
 8009eea:	aa1a      	add	r2, sp, #104	; 0x68
 8009eec:	a817      	add	r0, sp, #92	; 0x5c
 8009eee:	f001 ff31 	bl	800bd54 <__hexnan>
 8009ef2:	2805      	cmp	r0, #5
 8009ef4:	d126      	bne.n	8009f44 <_strtod_l+0x384>
 8009ef6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ef8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009efc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009f00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009f04:	e6a0      	b.n	8009c48 <_strtod_l+0x88>
 8009f06:	210a      	movs	r1, #10
 8009f08:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009f0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009f10:	e7b9      	b.n	8009e86 <_strtod_l+0x2c6>
 8009f12:	2a6e      	cmp	r2, #110	; 0x6e
 8009f14:	e7db      	b.n	8009ece <_strtod_l+0x30e>
 8009f16:	4990      	ldr	r1, [pc, #576]	; (800a158 <_strtod_l+0x598>)
 8009f18:	a817      	add	r0, sp, #92	; 0x5c
 8009f1a:	f001 ff07 	bl	800bd2c <__match>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f43f aeb0 	beq.w	8009c84 <_strtod_l+0xc4>
 8009f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f26:	498d      	ldr	r1, [pc, #564]	; (800a15c <_strtod_l+0x59c>)
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	a817      	add	r0, sp, #92	; 0x5c
 8009f2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f2e:	f001 fefd 	bl	800bd2c <__match>
 8009f32:	b910      	cbnz	r0, 8009f3a <_strtod_l+0x37a>
 8009f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f36:	3301      	adds	r3, #1
 8009f38:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f3a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a16c <_strtod_l+0x5ac>
 8009f3e:	f04f 0a00 	mov.w	sl, #0
 8009f42:	e681      	b.n	8009c48 <_strtod_l+0x88>
 8009f44:	4886      	ldr	r0, [pc, #536]	; (800a160 <_strtod_l+0x5a0>)
 8009f46:	f002 fe9b 	bl	800cc80 <nan>
 8009f4a:	ec5b ab10 	vmov	sl, fp, d0
 8009f4e:	e67b      	b.n	8009c48 <_strtod_l+0x88>
 8009f50:	9b05      	ldr	r3, [sp, #20]
 8009f52:	9807      	ldr	r0, [sp, #28]
 8009f54:	1af3      	subs	r3, r6, r3
 8009f56:	2f00      	cmp	r7, #0
 8009f58:	bf08      	it	eq
 8009f5a:	462f      	moveq	r7, r5
 8009f5c:	2d10      	cmp	r5, #16
 8009f5e:	9306      	str	r3, [sp, #24]
 8009f60:	46a8      	mov	r8, r5
 8009f62:	bfa8      	it	ge
 8009f64:	f04f 0810 	movge.w	r8, #16
 8009f68:	f7f6 facc 	bl	8000504 <__aeabi_ui2d>
 8009f6c:	2d09      	cmp	r5, #9
 8009f6e:	4682      	mov	sl, r0
 8009f70:	468b      	mov	fp, r1
 8009f72:	dd13      	ble.n	8009f9c <_strtod_l+0x3dc>
 8009f74:	4b7b      	ldr	r3, [pc, #492]	; (800a164 <_strtod_l+0x5a4>)
 8009f76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009f7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f7e:	f7f6 fb3b 	bl	80005f8 <__aeabi_dmul>
 8009f82:	4682      	mov	sl, r0
 8009f84:	4648      	mov	r0, r9
 8009f86:	468b      	mov	fp, r1
 8009f88:	f7f6 fabc 	bl	8000504 <__aeabi_ui2d>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4650      	mov	r0, sl
 8009f92:	4659      	mov	r1, fp
 8009f94:	f7f6 f97a 	bl	800028c <__adddf3>
 8009f98:	4682      	mov	sl, r0
 8009f9a:	468b      	mov	fp, r1
 8009f9c:	2d0f      	cmp	r5, #15
 8009f9e:	dc38      	bgt.n	800a012 <_strtod_l+0x452>
 8009fa0:	9b06      	ldr	r3, [sp, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f43f ae50 	beq.w	8009c48 <_strtod_l+0x88>
 8009fa8:	dd24      	ble.n	8009ff4 <_strtod_l+0x434>
 8009faa:	2b16      	cmp	r3, #22
 8009fac:	dc0b      	bgt.n	8009fc6 <_strtod_l+0x406>
 8009fae:	496d      	ldr	r1, [pc, #436]	; (800a164 <_strtod_l+0x5a4>)
 8009fb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb8:	4652      	mov	r2, sl
 8009fba:	465b      	mov	r3, fp
 8009fbc:	f7f6 fb1c 	bl	80005f8 <__aeabi_dmul>
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	468b      	mov	fp, r1
 8009fc4:	e640      	b.n	8009c48 <_strtod_l+0x88>
 8009fc6:	9a06      	ldr	r2, [sp, #24]
 8009fc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	db20      	blt.n	800a012 <_strtod_l+0x452>
 8009fd0:	4c64      	ldr	r4, [pc, #400]	; (800a164 <_strtod_l+0x5a4>)
 8009fd2:	f1c5 050f 	rsb	r5, r5, #15
 8009fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009fda:	4652      	mov	r2, sl
 8009fdc:	465b      	mov	r3, fp
 8009fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fe2:	f7f6 fb09 	bl	80005f8 <__aeabi_dmul>
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	1b5d      	subs	r5, r3, r5
 8009fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009fee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009ff2:	e7e3      	b.n	8009fbc <_strtod_l+0x3fc>
 8009ff4:	9b06      	ldr	r3, [sp, #24]
 8009ff6:	3316      	adds	r3, #22
 8009ff8:	db0b      	blt.n	800a012 <_strtod_l+0x452>
 8009ffa:	9b05      	ldr	r3, [sp, #20]
 8009ffc:	1b9e      	subs	r6, r3, r6
 8009ffe:	4b59      	ldr	r3, [pc, #356]	; (800a164 <_strtod_l+0x5a4>)
 800a000:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a004:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a008:	4650      	mov	r0, sl
 800a00a:	4659      	mov	r1, fp
 800a00c:	f7f6 fc1e 	bl	800084c <__aeabi_ddiv>
 800a010:	e7d6      	b.n	8009fc0 <_strtod_l+0x400>
 800a012:	9b06      	ldr	r3, [sp, #24]
 800a014:	eba5 0808 	sub.w	r8, r5, r8
 800a018:	4498      	add	r8, r3
 800a01a:	f1b8 0f00 	cmp.w	r8, #0
 800a01e:	dd74      	ble.n	800a10a <_strtod_l+0x54a>
 800a020:	f018 030f 	ands.w	r3, r8, #15
 800a024:	d00a      	beq.n	800a03c <_strtod_l+0x47c>
 800a026:	494f      	ldr	r1, [pc, #316]	; (800a164 <_strtod_l+0x5a4>)
 800a028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a02c:	4652      	mov	r2, sl
 800a02e:	465b      	mov	r3, fp
 800a030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a034:	f7f6 fae0 	bl	80005f8 <__aeabi_dmul>
 800a038:	4682      	mov	sl, r0
 800a03a:	468b      	mov	fp, r1
 800a03c:	f038 080f 	bics.w	r8, r8, #15
 800a040:	d04f      	beq.n	800a0e2 <_strtod_l+0x522>
 800a042:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a046:	dd22      	ble.n	800a08e <_strtod_l+0x4ce>
 800a048:	2500      	movs	r5, #0
 800a04a:	462e      	mov	r6, r5
 800a04c:	9507      	str	r5, [sp, #28]
 800a04e:	9505      	str	r5, [sp, #20]
 800a050:	2322      	movs	r3, #34	; 0x22
 800a052:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a16c <_strtod_l+0x5ac>
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	f04f 0a00 	mov.w	sl, #0
 800a05c:	9b07      	ldr	r3, [sp, #28]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f43f adf2 	beq.w	8009c48 <_strtod_l+0x88>
 800a064:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a066:	4620      	mov	r0, r4
 800a068:	f001 ffea 	bl	800c040 <_Bfree>
 800a06c:	9905      	ldr	r1, [sp, #20]
 800a06e:	4620      	mov	r0, r4
 800a070:	f001 ffe6 	bl	800c040 <_Bfree>
 800a074:	4631      	mov	r1, r6
 800a076:	4620      	mov	r0, r4
 800a078:	f001 ffe2 	bl	800c040 <_Bfree>
 800a07c:	9907      	ldr	r1, [sp, #28]
 800a07e:	4620      	mov	r0, r4
 800a080:	f001 ffde 	bl	800c040 <_Bfree>
 800a084:	4629      	mov	r1, r5
 800a086:	4620      	mov	r0, r4
 800a088:	f001 ffda 	bl	800c040 <_Bfree>
 800a08c:	e5dc      	b.n	8009c48 <_strtod_l+0x88>
 800a08e:	4b36      	ldr	r3, [pc, #216]	; (800a168 <_strtod_l+0x5a8>)
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	2300      	movs	r3, #0
 800a094:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a098:	4650      	mov	r0, sl
 800a09a:	4659      	mov	r1, fp
 800a09c:	4699      	mov	r9, r3
 800a09e:	f1b8 0f01 	cmp.w	r8, #1
 800a0a2:	dc21      	bgt.n	800a0e8 <_strtod_l+0x528>
 800a0a4:	b10b      	cbz	r3, 800a0aa <_strtod_l+0x4ea>
 800a0a6:	4682      	mov	sl, r0
 800a0a8:	468b      	mov	fp, r1
 800a0aa:	4b2f      	ldr	r3, [pc, #188]	; (800a168 <_strtod_l+0x5a8>)
 800a0ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a0b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a0b4:	4652      	mov	r2, sl
 800a0b6:	465b      	mov	r3, fp
 800a0b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a0bc:	f7f6 fa9c 	bl	80005f8 <__aeabi_dmul>
 800a0c0:	4b2a      	ldr	r3, [pc, #168]	; (800a16c <_strtod_l+0x5ac>)
 800a0c2:	460a      	mov	r2, r1
 800a0c4:	400b      	ands	r3, r1
 800a0c6:	492a      	ldr	r1, [pc, #168]	; (800a170 <_strtod_l+0x5b0>)
 800a0c8:	428b      	cmp	r3, r1
 800a0ca:	4682      	mov	sl, r0
 800a0cc:	d8bc      	bhi.n	800a048 <_strtod_l+0x488>
 800a0ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0d2:	428b      	cmp	r3, r1
 800a0d4:	bf86      	itte	hi
 800a0d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a174 <_strtod_l+0x5b4>
 800a0da:	f04f 3aff 	movhi.w	sl, #4294967295
 800a0de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9304      	str	r3, [sp, #16]
 800a0e6:	e084      	b.n	800a1f2 <_strtod_l+0x632>
 800a0e8:	f018 0f01 	tst.w	r8, #1
 800a0ec:	d005      	beq.n	800a0fa <_strtod_l+0x53a>
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 fa80 	bl	80005f8 <__aeabi_dmul>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	9a04      	ldr	r2, [sp, #16]
 800a0fc:	3208      	adds	r2, #8
 800a0fe:	f109 0901 	add.w	r9, r9, #1
 800a102:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a106:	9204      	str	r2, [sp, #16]
 800a108:	e7c9      	b.n	800a09e <_strtod_l+0x4de>
 800a10a:	d0ea      	beq.n	800a0e2 <_strtod_l+0x522>
 800a10c:	f1c8 0800 	rsb	r8, r8, #0
 800a110:	f018 020f 	ands.w	r2, r8, #15
 800a114:	d00a      	beq.n	800a12c <_strtod_l+0x56c>
 800a116:	4b13      	ldr	r3, [pc, #76]	; (800a164 <_strtod_l+0x5a4>)
 800a118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a11c:	4650      	mov	r0, sl
 800a11e:	4659      	mov	r1, fp
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 fb92 	bl	800084c <__aeabi_ddiv>
 800a128:	4682      	mov	sl, r0
 800a12a:	468b      	mov	fp, r1
 800a12c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a130:	d0d7      	beq.n	800a0e2 <_strtod_l+0x522>
 800a132:	f1b8 0f1f 	cmp.w	r8, #31
 800a136:	dd1f      	ble.n	800a178 <_strtod_l+0x5b8>
 800a138:	2500      	movs	r5, #0
 800a13a:	462e      	mov	r6, r5
 800a13c:	9507      	str	r5, [sp, #28]
 800a13e:	9505      	str	r5, [sp, #20]
 800a140:	2322      	movs	r3, #34	; 0x22
 800a142:	f04f 0a00 	mov.w	sl, #0
 800a146:	f04f 0b00 	mov.w	fp, #0
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	e786      	b.n	800a05c <_strtod_l+0x49c>
 800a14e:	bf00      	nop
 800a150:	0800f476 	.word	0x0800f476
 800a154:	0800f4b8 	.word	0x0800f4b8
 800a158:	0800f46e 	.word	0x0800f46e
 800a15c:	0800f4fb 	.word	0x0800f4fb
 800a160:	0800f2ef 	.word	0x0800f2ef
 800a164:	0800f688 	.word	0x0800f688
 800a168:	0800f660 	.word	0x0800f660
 800a16c:	7ff00000 	.word	0x7ff00000
 800a170:	7ca00000 	.word	0x7ca00000
 800a174:	7fefffff 	.word	0x7fefffff
 800a178:	f018 0310 	ands.w	r3, r8, #16
 800a17c:	bf18      	it	ne
 800a17e:	236a      	movne	r3, #106	; 0x6a
 800a180:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a530 <_strtod_l+0x970>
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	4650      	mov	r0, sl
 800a188:	4659      	mov	r1, fp
 800a18a:	2300      	movs	r3, #0
 800a18c:	f018 0f01 	tst.w	r8, #1
 800a190:	d004      	beq.n	800a19c <_strtod_l+0x5dc>
 800a192:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	2301      	movs	r3, #1
 800a19c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a1a0:	f109 0908 	add.w	r9, r9, #8
 800a1a4:	d1f2      	bne.n	800a18c <_strtod_l+0x5cc>
 800a1a6:	b10b      	cbz	r3, 800a1ac <_strtod_l+0x5ec>
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	468b      	mov	fp, r1
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	b1c3      	cbz	r3, 800a1e2 <_strtod_l+0x622>
 800a1b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a1b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	4659      	mov	r1, fp
 800a1bc:	dd11      	ble.n	800a1e2 <_strtod_l+0x622>
 800a1be:	2b1f      	cmp	r3, #31
 800a1c0:	f340 8124 	ble.w	800a40c <_strtod_l+0x84c>
 800a1c4:	2b34      	cmp	r3, #52	; 0x34
 800a1c6:	bfde      	ittt	le
 800a1c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a1cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a1d0:	fa03 f202 	lslle.w	r2, r3, r2
 800a1d4:	f04f 0a00 	mov.w	sl, #0
 800a1d8:	bfcc      	ite	gt
 800a1da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a1de:	ea02 0b01 	andle.w	fp, r2, r1
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4650      	mov	r0, sl
 800a1e8:	4659      	mov	r1, fp
 800a1ea:	f7f6 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d1a2      	bne.n	800a138 <_strtod_l+0x578>
 800a1f2:	9b07      	ldr	r3, [sp, #28]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	9908      	ldr	r1, [sp, #32]
 800a1f8:	462b      	mov	r3, r5
 800a1fa:	463a      	mov	r2, r7
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f001 ff87 	bl	800c110 <__s2b>
 800a202:	9007      	str	r0, [sp, #28]
 800a204:	2800      	cmp	r0, #0
 800a206:	f43f af1f 	beq.w	800a048 <_strtod_l+0x488>
 800a20a:	9b05      	ldr	r3, [sp, #20]
 800a20c:	1b9e      	subs	r6, r3, r6
 800a20e:	9b06      	ldr	r3, [sp, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	bfb4      	ite	lt
 800a214:	4633      	movlt	r3, r6
 800a216:	2300      	movge	r3, #0
 800a218:	930c      	str	r3, [sp, #48]	; 0x30
 800a21a:	9b06      	ldr	r3, [sp, #24]
 800a21c:	2500      	movs	r5, #0
 800a21e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a222:	9312      	str	r3, [sp, #72]	; 0x48
 800a224:	462e      	mov	r6, r5
 800a226:	9b07      	ldr	r3, [sp, #28]
 800a228:	4620      	mov	r0, r4
 800a22a:	6859      	ldr	r1, [r3, #4]
 800a22c:	f001 fec8 	bl	800bfc0 <_Balloc>
 800a230:	9005      	str	r0, [sp, #20]
 800a232:	2800      	cmp	r0, #0
 800a234:	f43f af0c 	beq.w	800a050 <_strtod_l+0x490>
 800a238:	9b07      	ldr	r3, [sp, #28]
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	3202      	adds	r2, #2
 800a23e:	f103 010c 	add.w	r1, r3, #12
 800a242:	0092      	lsls	r2, r2, #2
 800a244:	300c      	adds	r0, #12
 800a246:	f7fe fad7 	bl	80087f8 <memcpy>
 800a24a:	ec4b ab10 	vmov	d0, sl, fp
 800a24e:	aa1a      	add	r2, sp, #104	; 0x68
 800a250:	a919      	add	r1, sp, #100	; 0x64
 800a252:	4620      	mov	r0, r4
 800a254:	f002 faa2 	bl	800c79c <__d2b>
 800a258:	ec4b ab18 	vmov	d8, sl, fp
 800a25c:	9018      	str	r0, [sp, #96]	; 0x60
 800a25e:	2800      	cmp	r0, #0
 800a260:	f43f aef6 	beq.w	800a050 <_strtod_l+0x490>
 800a264:	2101      	movs	r1, #1
 800a266:	4620      	mov	r0, r4
 800a268:	f001 ffec 	bl	800c244 <__i2b>
 800a26c:	4606      	mov	r6, r0
 800a26e:	2800      	cmp	r0, #0
 800a270:	f43f aeee 	beq.w	800a050 <_strtod_l+0x490>
 800a274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a276:	9904      	ldr	r1, [sp, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	bfab      	itete	ge
 800a27c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a27e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a280:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a282:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a286:	bfac      	ite	ge
 800a288:	eb03 0902 	addge.w	r9, r3, r2
 800a28c:	1ad7      	sublt	r7, r2, r3
 800a28e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a290:	eba3 0801 	sub.w	r8, r3, r1
 800a294:	4490      	add	r8, r2
 800a296:	4ba1      	ldr	r3, [pc, #644]	; (800a51c <_strtod_l+0x95c>)
 800a298:	f108 38ff 	add.w	r8, r8, #4294967295
 800a29c:	4598      	cmp	r8, r3
 800a29e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a2a2:	f280 80c7 	bge.w	800a434 <_strtod_l+0x874>
 800a2a6:	eba3 0308 	sub.w	r3, r3, r8
 800a2aa:	2b1f      	cmp	r3, #31
 800a2ac:	eba2 0203 	sub.w	r2, r2, r3
 800a2b0:	f04f 0101 	mov.w	r1, #1
 800a2b4:	f300 80b1 	bgt.w	800a41a <_strtod_l+0x85a>
 800a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2bc:	930d      	str	r3, [sp, #52]	; 0x34
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9308      	str	r3, [sp, #32]
 800a2c2:	eb09 0802 	add.w	r8, r9, r2
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	45c1      	cmp	r9, r8
 800a2ca:	4417      	add	r7, r2
 800a2cc:	441f      	add	r7, r3
 800a2ce:	464b      	mov	r3, r9
 800a2d0:	bfa8      	it	ge
 800a2d2:	4643      	movge	r3, r8
 800a2d4:	42bb      	cmp	r3, r7
 800a2d6:	bfa8      	it	ge
 800a2d8:	463b      	movge	r3, r7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bfc2      	ittt	gt
 800a2de:	eba8 0803 	subgt.w	r8, r8, r3
 800a2e2:	1aff      	subgt	r7, r7, r3
 800a2e4:	eba9 0903 	subgt.w	r9, r9, r3
 800a2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	dd17      	ble.n	800a31e <_strtod_l+0x75e>
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f002 f866 	bl	800c3c4 <__pow5mult>
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f aea8 	beq.w	800a050 <_strtod_l+0x490>
 800a300:	4601      	mov	r1, r0
 800a302:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a304:	4620      	mov	r0, r4
 800a306:	f001 ffb3 	bl	800c270 <__multiply>
 800a30a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a30c:	2800      	cmp	r0, #0
 800a30e:	f43f ae9f 	beq.w	800a050 <_strtod_l+0x490>
 800a312:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a314:	4620      	mov	r0, r4
 800a316:	f001 fe93 	bl	800c040 <_Bfree>
 800a31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a31c:	9318      	str	r3, [sp, #96]	; 0x60
 800a31e:	f1b8 0f00 	cmp.w	r8, #0
 800a322:	f300 808c 	bgt.w	800a43e <_strtod_l+0x87e>
 800a326:	9b06      	ldr	r3, [sp, #24]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dd08      	ble.n	800a33e <_strtod_l+0x77e>
 800a32c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a32e:	9905      	ldr	r1, [sp, #20]
 800a330:	4620      	mov	r0, r4
 800a332:	f002 f847 	bl	800c3c4 <__pow5mult>
 800a336:	9005      	str	r0, [sp, #20]
 800a338:	2800      	cmp	r0, #0
 800a33a:	f43f ae89 	beq.w	800a050 <_strtod_l+0x490>
 800a33e:	2f00      	cmp	r7, #0
 800a340:	dd08      	ble.n	800a354 <_strtod_l+0x794>
 800a342:	9905      	ldr	r1, [sp, #20]
 800a344:	463a      	mov	r2, r7
 800a346:	4620      	mov	r0, r4
 800a348:	f002 f896 	bl	800c478 <__lshift>
 800a34c:	9005      	str	r0, [sp, #20]
 800a34e:	2800      	cmp	r0, #0
 800a350:	f43f ae7e 	beq.w	800a050 <_strtod_l+0x490>
 800a354:	f1b9 0f00 	cmp.w	r9, #0
 800a358:	dd08      	ble.n	800a36c <_strtod_l+0x7ac>
 800a35a:	4631      	mov	r1, r6
 800a35c:	464a      	mov	r2, r9
 800a35e:	4620      	mov	r0, r4
 800a360:	f002 f88a 	bl	800c478 <__lshift>
 800a364:	4606      	mov	r6, r0
 800a366:	2800      	cmp	r0, #0
 800a368:	f43f ae72 	beq.w	800a050 <_strtod_l+0x490>
 800a36c:	9a05      	ldr	r2, [sp, #20]
 800a36e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a370:	4620      	mov	r0, r4
 800a372:	f002 f90d 	bl	800c590 <__mdiff>
 800a376:	4605      	mov	r5, r0
 800a378:	2800      	cmp	r0, #0
 800a37a:	f43f ae69 	beq.w	800a050 <_strtod_l+0x490>
 800a37e:	68c3      	ldr	r3, [r0, #12]
 800a380:	930b      	str	r3, [sp, #44]	; 0x2c
 800a382:	2300      	movs	r3, #0
 800a384:	60c3      	str	r3, [r0, #12]
 800a386:	4631      	mov	r1, r6
 800a388:	f002 f8e6 	bl	800c558 <__mcmp>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	da60      	bge.n	800a452 <_strtod_l+0x892>
 800a390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a392:	ea53 030a 	orrs.w	r3, r3, sl
 800a396:	f040 8082 	bne.w	800a49e <_strtod_l+0x8de>
 800a39a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d17d      	bne.n	800a49e <_strtod_l+0x8de>
 800a3a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3a6:	0d1b      	lsrs	r3, r3, #20
 800a3a8:	051b      	lsls	r3, r3, #20
 800a3aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a3ae:	d976      	bls.n	800a49e <_strtod_l+0x8de>
 800a3b0:	696b      	ldr	r3, [r5, #20]
 800a3b2:	b913      	cbnz	r3, 800a3ba <_strtod_l+0x7fa>
 800a3b4:	692b      	ldr	r3, [r5, #16]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	dd71      	ble.n	800a49e <_strtod_l+0x8de>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	2201      	movs	r2, #1
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f002 f85a 	bl	800c478 <__lshift>
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	f002 f8c6 	bl	800c558 <__mcmp>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	dd66      	ble.n	800a49e <_strtod_l+0x8de>
 800a3d0:	9904      	ldr	r1, [sp, #16]
 800a3d2:	4a53      	ldr	r2, [pc, #332]	; (800a520 <_strtod_l+0x960>)
 800a3d4:	465b      	mov	r3, fp
 800a3d6:	2900      	cmp	r1, #0
 800a3d8:	f000 8081 	beq.w	800a4de <_strtod_l+0x91e>
 800a3dc:	ea02 010b 	and.w	r1, r2, fp
 800a3e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a3e4:	dc7b      	bgt.n	800a4de <_strtod_l+0x91e>
 800a3e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a3ea:	f77f aea9 	ble.w	800a140 <_strtod_l+0x580>
 800a3ee:	4b4d      	ldr	r3, [pc, #308]	; (800a524 <_strtod_l+0x964>)
 800a3f0:	4650      	mov	r0, sl
 800a3f2:	4659      	mov	r1, fp
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f7f6 f8ff 	bl	80005f8 <__aeabi_dmul>
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4303      	orrs	r3, r0
 800a3fe:	bf08      	it	eq
 800a400:	2322      	moveq	r3, #34	; 0x22
 800a402:	4682      	mov	sl, r0
 800a404:	468b      	mov	fp, r1
 800a406:	bf08      	it	eq
 800a408:	6023      	streq	r3, [r4, #0]
 800a40a:	e62b      	b.n	800a064 <_strtod_l+0x4a4>
 800a40c:	f04f 32ff 	mov.w	r2, #4294967295
 800a410:	fa02 f303 	lsl.w	r3, r2, r3
 800a414:	ea03 0a0a 	and.w	sl, r3, sl
 800a418:	e6e3      	b.n	800a1e2 <_strtod_l+0x622>
 800a41a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a41e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a422:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a426:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a42a:	fa01 f308 	lsl.w	r3, r1, r8
 800a42e:	9308      	str	r3, [sp, #32]
 800a430:	910d      	str	r1, [sp, #52]	; 0x34
 800a432:	e746      	b.n	800a2c2 <_strtod_l+0x702>
 800a434:	2300      	movs	r3, #0
 800a436:	9308      	str	r3, [sp, #32]
 800a438:	2301      	movs	r3, #1
 800a43a:	930d      	str	r3, [sp, #52]	; 0x34
 800a43c:	e741      	b.n	800a2c2 <_strtod_l+0x702>
 800a43e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a440:	4642      	mov	r2, r8
 800a442:	4620      	mov	r0, r4
 800a444:	f002 f818 	bl	800c478 <__lshift>
 800a448:	9018      	str	r0, [sp, #96]	; 0x60
 800a44a:	2800      	cmp	r0, #0
 800a44c:	f47f af6b 	bne.w	800a326 <_strtod_l+0x766>
 800a450:	e5fe      	b.n	800a050 <_strtod_l+0x490>
 800a452:	465f      	mov	r7, fp
 800a454:	d16e      	bne.n	800a534 <_strtod_l+0x974>
 800a456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a458:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a45c:	b342      	cbz	r2, 800a4b0 <_strtod_l+0x8f0>
 800a45e:	4a32      	ldr	r2, [pc, #200]	; (800a528 <_strtod_l+0x968>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d128      	bne.n	800a4b6 <_strtod_l+0x8f6>
 800a464:	9b04      	ldr	r3, [sp, #16]
 800a466:	4651      	mov	r1, sl
 800a468:	b1eb      	cbz	r3, 800a4a6 <_strtod_l+0x8e6>
 800a46a:	4b2d      	ldr	r3, [pc, #180]	; (800a520 <_strtod_l+0x960>)
 800a46c:	403b      	ands	r3, r7
 800a46e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a472:	f04f 32ff 	mov.w	r2, #4294967295
 800a476:	d819      	bhi.n	800a4ac <_strtod_l+0x8ec>
 800a478:	0d1b      	lsrs	r3, r3, #20
 800a47a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a47e:	fa02 f303 	lsl.w	r3, r2, r3
 800a482:	4299      	cmp	r1, r3
 800a484:	d117      	bne.n	800a4b6 <_strtod_l+0x8f6>
 800a486:	4b29      	ldr	r3, [pc, #164]	; (800a52c <_strtod_l+0x96c>)
 800a488:	429f      	cmp	r7, r3
 800a48a:	d102      	bne.n	800a492 <_strtod_l+0x8d2>
 800a48c:	3101      	adds	r1, #1
 800a48e:	f43f addf 	beq.w	800a050 <_strtod_l+0x490>
 800a492:	4b23      	ldr	r3, [pc, #140]	; (800a520 <_strtod_l+0x960>)
 800a494:	403b      	ands	r3, r7
 800a496:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a49a:	f04f 0a00 	mov.w	sl, #0
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1a4      	bne.n	800a3ee <_strtod_l+0x82e>
 800a4a4:	e5de      	b.n	800a064 <_strtod_l+0x4a4>
 800a4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4aa:	e7ea      	b.n	800a482 <_strtod_l+0x8c2>
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	e7e8      	b.n	800a482 <_strtod_l+0x8c2>
 800a4b0:	ea53 030a 	orrs.w	r3, r3, sl
 800a4b4:	d08c      	beq.n	800a3d0 <_strtod_l+0x810>
 800a4b6:	9b08      	ldr	r3, [sp, #32]
 800a4b8:	b1db      	cbz	r3, 800a4f2 <_strtod_l+0x932>
 800a4ba:	423b      	tst	r3, r7
 800a4bc:	d0ef      	beq.n	800a49e <_strtod_l+0x8de>
 800a4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4c0:	9a04      	ldr	r2, [sp, #16]
 800a4c2:	4650      	mov	r0, sl
 800a4c4:	4659      	mov	r1, fp
 800a4c6:	b1c3      	cbz	r3, 800a4fa <_strtod_l+0x93a>
 800a4c8:	f7ff fb5b 	bl	8009b82 <sulp>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	ec51 0b18 	vmov	r0, r1, d8
 800a4d4:	f7f5 feda 	bl	800028c <__adddf3>
 800a4d8:	4682      	mov	sl, r0
 800a4da:	468b      	mov	fp, r1
 800a4dc:	e7df      	b.n	800a49e <_strtod_l+0x8de>
 800a4de:	4013      	ands	r3, r2
 800a4e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a4e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a4e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a4ec:	f04f 3aff 	mov.w	sl, #4294967295
 800a4f0:	e7d5      	b.n	800a49e <_strtod_l+0x8de>
 800a4f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4f4:	ea13 0f0a 	tst.w	r3, sl
 800a4f8:	e7e0      	b.n	800a4bc <_strtod_l+0x8fc>
 800a4fa:	f7ff fb42 	bl	8009b82 <sulp>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	ec51 0b18 	vmov	r0, r1, d8
 800a506:	f7f5 febf 	bl	8000288 <__aeabi_dsub>
 800a50a:	2200      	movs	r2, #0
 800a50c:	2300      	movs	r3, #0
 800a50e:	4682      	mov	sl, r0
 800a510:	468b      	mov	fp, r1
 800a512:	f7f6 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a516:	2800      	cmp	r0, #0
 800a518:	d0c1      	beq.n	800a49e <_strtod_l+0x8de>
 800a51a:	e611      	b.n	800a140 <_strtod_l+0x580>
 800a51c:	fffffc02 	.word	0xfffffc02
 800a520:	7ff00000 	.word	0x7ff00000
 800a524:	39500000 	.word	0x39500000
 800a528:	000fffff 	.word	0x000fffff
 800a52c:	7fefffff 	.word	0x7fefffff
 800a530:	0800f4d0 	.word	0x0800f4d0
 800a534:	4631      	mov	r1, r6
 800a536:	4628      	mov	r0, r5
 800a538:	f002 f98c 	bl	800c854 <__ratio>
 800a53c:	ec59 8b10 	vmov	r8, r9, d0
 800a540:	ee10 0a10 	vmov	r0, s0
 800a544:	2200      	movs	r2, #0
 800a546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a54a:	4649      	mov	r1, r9
 800a54c:	f7f6 fad0 	bl	8000af0 <__aeabi_dcmple>
 800a550:	2800      	cmp	r0, #0
 800a552:	d07a      	beq.n	800a64a <_strtod_l+0xa8a>
 800a554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d04a      	beq.n	800a5f0 <_strtod_l+0xa30>
 800a55a:	4b95      	ldr	r3, [pc, #596]	; (800a7b0 <_strtod_l+0xbf0>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a562:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a7b0 <_strtod_l+0xbf0>
 800a566:	f04f 0800 	mov.w	r8, #0
 800a56a:	4b92      	ldr	r3, [pc, #584]	; (800a7b4 <_strtod_l+0xbf4>)
 800a56c:	403b      	ands	r3, r7
 800a56e:	930d      	str	r3, [sp, #52]	; 0x34
 800a570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a572:	4b91      	ldr	r3, [pc, #580]	; (800a7b8 <_strtod_l+0xbf8>)
 800a574:	429a      	cmp	r2, r3
 800a576:	f040 80b0 	bne.w	800a6da <_strtod_l+0xb1a>
 800a57a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a57e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a582:	ec4b ab10 	vmov	d0, sl, fp
 800a586:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a58a:	f002 f88b 	bl	800c6a4 <__ulp>
 800a58e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a592:	ec53 2b10 	vmov	r2, r3, d0
 800a596:	f7f6 f82f 	bl	80005f8 <__aeabi_dmul>
 800a59a:	4652      	mov	r2, sl
 800a59c:	465b      	mov	r3, fp
 800a59e:	f7f5 fe75 	bl	800028c <__adddf3>
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4983      	ldr	r1, [pc, #524]	; (800a7b4 <_strtod_l+0xbf4>)
 800a5a6:	4a85      	ldr	r2, [pc, #532]	; (800a7bc <_strtod_l+0xbfc>)
 800a5a8:	4019      	ands	r1, r3
 800a5aa:	4291      	cmp	r1, r2
 800a5ac:	4682      	mov	sl, r0
 800a5ae:	d960      	bls.n	800a672 <_strtod_l+0xab2>
 800a5b0:	ee18 3a90 	vmov	r3, s17
 800a5b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d104      	bne.n	800a5c6 <_strtod_l+0xa06>
 800a5bc:	ee18 3a10 	vmov	r3, s16
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	f43f ad45 	beq.w	800a050 <_strtod_l+0x490>
 800a5c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a7c8 <_strtod_l+0xc08>
 800a5ca:	f04f 3aff 	mov.w	sl, #4294967295
 800a5ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 fd35 	bl	800c040 <_Bfree>
 800a5d6:	9905      	ldr	r1, [sp, #20]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f001 fd31 	bl	800c040 <_Bfree>
 800a5de:	4631      	mov	r1, r6
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f001 fd2d 	bl	800c040 <_Bfree>
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f001 fd29 	bl	800c040 <_Bfree>
 800a5ee:	e61a      	b.n	800a226 <_strtod_l+0x666>
 800a5f0:	f1ba 0f00 	cmp.w	sl, #0
 800a5f4:	d11b      	bne.n	800a62e <_strtod_l+0xa6e>
 800a5f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5fa:	b9f3      	cbnz	r3, 800a63a <_strtod_l+0xa7a>
 800a5fc:	4b6c      	ldr	r3, [pc, #432]	; (800a7b0 <_strtod_l+0xbf0>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	4640      	mov	r0, r8
 800a602:	4649      	mov	r1, r9
 800a604:	f7f6 fa6a 	bl	8000adc <__aeabi_dcmplt>
 800a608:	b9d0      	cbnz	r0, 800a640 <_strtod_l+0xa80>
 800a60a:	4640      	mov	r0, r8
 800a60c:	4649      	mov	r1, r9
 800a60e:	4b6c      	ldr	r3, [pc, #432]	; (800a7c0 <_strtod_l+0xc00>)
 800a610:	2200      	movs	r2, #0
 800a612:	f7f5 fff1 	bl	80005f8 <__aeabi_dmul>
 800a616:	4680      	mov	r8, r0
 800a618:	4689      	mov	r9, r1
 800a61a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a61e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a622:	9315      	str	r3, [sp, #84]	; 0x54
 800a624:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a628:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a62c:	e79d      	b.n	800a56a <_strtod_l+0x9aa>
 800a62e:	f1ba 0f01 	cmp.w	sl, #1
 800a632:	d102      	bne.n	800a63a <_strtod_l+0xa7a>
 800a634:	2f00      	cmp	r7, #0
 800a636:	f43f ad83 	beq.w	800a140 <_strtod_l+0x580>
 800a63a:	4b62      	ldr	r3, [pc, #392]	; (800a7c4 <_strtod_l+0xc04>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	e78e      	b.n	800a55e <_strtod_l+0x99e>
 800a640:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a7c0 <_strtod_l+0xc00>
 800a644:	f04f 0800 	mov.w	r8, #0
 800a648:	e7e7      	b.n	800a61a <_strtod_l+0xa5a>
 800a64a:	4b5d      	ldr	r3, [pc, #372]	; (800a7c0 <_strtod_l+0xc00>)
 800a64c:	4640      	mov	r0, r8
 800a64e:	4649      	mov	r1, r9
 800a650:	2200      	movs	r2, #0
 800a652:	f7f5 ffd1 	bl	80005f8 <__aeabi_dmul>
 800a656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a658:	4680      	mov	r8, r0
 800a65a:	4689      	mov	r9, r1
 800a65c:	b933      	cbnz	r3, 800a66c <_strtod_l+0xaac>
 800a65e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a662:	900e      	str	r0, [sp, #56]	; 0x38
 800a664:	930f      	str	r3, [sp, #60]	; 0x3c
 800a666:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a66a:	e7dd      	b.n	800a628 <_strtod_l+0xa68>
 800a66c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a670:	e7f9      	b.n	800a666 <_strtod_l+0xaa6>
 800a672:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a676:	9b04      	ldr	r3, [sp, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1a8      	bne.n	800a5ce <_strtod_l+0xa0e>
 800a67c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a682:	0d1b      	lsrs	r3, r3, #20
 800a684:	051b      	lsls	r3, r3, #20
 800a686:	429a      	cmp	r2, r3
 800a688:	d1a1      	bne.n	800a5ce <_strtod_l+0xa0e>
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f7f6 fb13 	bl	8000cb8 <__aeabi_d2lz>
 800a692:	f7f5 ff83 	bl	800059c <__aeabi_l2d>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4640      	mov	r0, r8
 800a69c:	4649      	mov	r1, r9
 800a69e:	f7f5 fdf3 	bl	8000288 <__aeabi_dsub>
 800a6a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6a8:	ea43 030a 	orr.w	r3, r3, sl
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	4680      	mov	r8, r0
 800a6b0:	4689      	mov	r9, r1
 800a6b2:	d055      	beq.n	800a760 <_strtod_l+0xba0>
 800a6b4:	a336      	add	r3, pc, #216	; (adr r3, 800a790 <_strtod_l+0xbd0>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	f7f6 fa0f 	bl	8000adc <__aeabi_dcmplt>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f47f acd0 	bne.w	800a064 <_strtod_l+0x4a4>
 800a6c4:	a334      	add	r3, pc, #208	; (adr r3, 800a798 <_strtod_l+0xbd8>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f6 fa23 	bl	8000b18 <__aeabi_dcmpgt>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f43f af7b 	beq.w	800a5ce <_strtod_l+0xa0e>
 800a6d8:	e4c4      	b.n	800a064 <_strtod_l+0x4a4>
 800a6da:	9b04      	ldr	r3, [sp, #16]
 800a6dc:	b333      	cbz	r3, 800a72c <_strtod_l+0xb6c>
 800a6de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6e4:	d822      	bhi.n	800a72c <_strtod_l+0xb6c>
 800a6e6:	a32e      	add	r3, pc, #184	; (adr r3, 800a7a0 <_strtod_l+0xbe0>)
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	f7f6 f9fe 	bl	8000af0 <__aeabi_dcmple>
 800a6f4:	b1a0      	cbz	r0, 800a720 <_strtod_l+0xb60>
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	f7f6 fa55 	bl	8000ba8 <__aeabi_d2uiz>
 800a6fe:	2801      	cmp	r0, #1
 800a700:	bf38      	it	cc
 800a702:	2001      	movcc	r0, #1
 800a704:	f7f5 fefe 	bl	8000504 <__aeabi_ui2d>
 800a708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a70a:	4680      	mov	r8, r0
 800a70c:	4689      	mov	r9, r1
 800a70e:	bb23      	cbnz	r3, 800a75a <_strtod_l+0xb9a>
 800a710:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a714:	9010      	str	r0, [sp, #64]	; 0x40
 800a716:	9311      	str	r3, [sp, #68]	; 0x44
 800a718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a71c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a724:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a728:	1a9b      	subs	r3, r3, r2
 800a72a:	9309      	str	r3, [sp, #36]	; 0x24
 800a72c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a730:	eeb0 0a48 	vmov.f32	s0, s16
 800a734:	eef0 0a68 	vmov.f32	s1, s17
 800a738:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a73c:	f001 ffb2 	bl	800c6a4 <__ulp>
 800a740:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a744:	ec53 2b10 	vmov	r2, r3, d0
 800a748:	f7f5 ff56 	bl	80005f8 <__aeabi_dmul>
 800a74c:	ec53 2b18 	vmov	r2, r3, d8
 800a750:	f7f5 fd9c 	bl	800028c <__adddf3>
 800a754:	4682      	mov	sl, r0
 800a756:	468b      	mov	fp, r1
 800a758:	e78d      	b.n	800a676 <_strtod_l+0xab6>
 800a75a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a75e:	e7db      	b.n	800a718 <_strtod_l+0xb58>
 800a760:	a311      	add	r3, pc, #68	; (adr r3, 800a7a8 <_strtod_l+0xbe8>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f6 f9b9 	bl	8000adc <__aeabi_dcmplt>
 800a76a:	e7b2      	b.n	800a6d2 <_strtod_l+0xb12>
 800a76c:	2300      	movs	r3, #0
 800a76e:	930a      	str	r3, [sp, #40]	; 0x28
 800a770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	f7ff ba6b 	b.w	8009c50 <_strtod_l+0x90>
 800a77a:	2a65      	cmp	r2, #101	; 0x65
 800a77c:	f43f ab5f 	beq.w	8009e3e <_strtod_l+0x27e>
 800a780:	2a45      	cmp	r2, #69	; 0x45
 800a782:	f43f ab5c 	beq.w	8009e3e <_strtod_l+0x27e>
 800a786:	2301      	movs	r3, #1
 800a788:	f7ff bb94 	b.w	8009eb4 <_strtod_l+0x2f4>
 800a78c:	f3af 8000 	nop.w
 800a790:	94a03595 	.word	0x94a03595
 800a794:	3fdfffff 	.word	0x3fdfffff
 800a798:	35afe535 	.word	0x35afe535
 800a79c:	3fe00000 	.word	0x3fe00000
 800a7a0:	ffc00000 	.word	0xffc00000
 800a7a4:	41dfffff 	.word	0x41dfffff
 800a7a8:	94a03595 	.word	0x94a03595
 800a7ac:	3fcfffff 	.word	0x3fcfffff
 800a7b0:	3ff00000 	.word	0x3ff00000
 800a7b4:	7ff00000 	.word	0x7ff00000
 800a7b8:	7fe00000 	.word	0x7fe00000
 800a7bc:	7c9fffff 	.word	0x7c9fffff
 800a7c0:	3fe00000 	.word	0x3fe00000
 800a7c4:	bff00000 	.word	0xbff00000
 800a7c8:	7fefffff 	.word	0x7fefffff

0800a7cc <_strtod_r>:
 800a7cc:	4b01      	ldr	r3, [pc, #4]	; (800a7d4 <_strtod_r+0x8>)
 800a7ce:	f7ff b9f7 	b.w	8009bc0 <_strtod_l>
 800a7d2:	bf00      	nop
 800a7d4:	20000074 	.word	0x20000074

0800a7d8 <_strtol_l.constprop.0>:
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7de:	d001      	beq.n	800a7e4 <_strtol_l.constprop.0+0xc>
 800a7e0:	2b24      	cmp	r3, #36	; 0x24
 800a7e2:	d906      	bls.n	800a7f2 <_strtol_l.constprop.0+0x1a>
 800a7e4:	f7fd fd40 	bl	8008268 <__errno>
 800a7e8:	2316      	movs	r3, #22
 800a7ea:	6003      	str	r3, [r0, #0]
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a8d8 <_strtol_l.constprop.0+0x100>
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	462e      	mov	r6, r5
 800a7fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a802:	f017 0708 	ands.w	r7, r7, #8
 800a806:	d1f7      	bne.n	800a7f8 <_strtol_l.constprop.0+0x20>
 800a808:	2c2d      	cmp	r4, #45	; 0x2d
 800a80a:	d132      	bne.n	800a872 <_strtol_l.constprop.0+0x9a>
 800a80c:	782c      	ldrb	r4, [r5, #0]
 800a80e:	2701      	movs	r7, #1
 800a810:	1cb5      	adds	r5, r6, #2
 800a812:	2b00      	cmp	r3, #0
 800a814:	d05b      	beq.n	800a8ce <_strtol_l.constprop.0+0xf6>
 800a816:	2b10      	cmp	r3, #16
 800a818:	d109      	bne.n	800a82e <_strtol_l.constprop.0+0x56>
 800a81a:	2c30      	cmp	r4, #48	; 0x30
 800a81c:	d107      	bne.n	800a82e <_strtol_l.constprop.0+0x56>
 800a81e:	782c      	ldrb	r4, [r5, #0]
 800a820:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a824:	2c58      	cmp	r4, #88	; 0x58
 800a826:	d14d      	bne.n	800a8c4 <_strtol_l.constprop.0+0xec>
 800a828:	786c      	ldrb	r4, [r5, #1]
 800a82a:	2310      	movs	r3, #16
 800a82c:	3502      	adds	r5, #2
 800a82e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a832:	f108 38ff 	add.w	r8, r8, #4294967295
 800a836:	f04f 0c00 	mov.w	ip, #0
 800a83a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a83e:	4666      	mov	r6, ip
 800a840:	fb03 8a19 	mls	sl, r3, r9, r8
 800a844:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a848:	f1be 0f09 	cmp.w	lr, #9
 800a84c:	d816      	bhi.n	800a87c <_strtol_l.constprop.0+0xa4>
 800a84e:	4674      	mov	r4, lr
 800a850:	42a3      	cmp	r3, r4
 800a852:	dd24      	ble.n	800a89e <_strtol_l.constprop.0+0xc6>
 800a854:	f1bc 0f00 	cmp.w	ip, #0
 800a858:	db1e      	blt.n	800a898 <_strtol_l.constprop.0+0xc0>
 800a85a:	45b1      	cmp	r9, r6
 800a85c:	d31c      	bcc.n	800a898 <_strtol_l.constprop.0+0xc0>
 800a85e:	d101      	bne.n	800a864 <_strtol_l.constprop.0+0x8c>
 800a860:	45a2      	cmp	sl, r4
 800a862:	db19      	blt.n	800a898 <_strtol_l.constprop.0+0xc0>
 800a864:	fb06 4603 	mla	r6, r6, r3, r4
 800a868:	f04f 0c01 	mov.w	ip, #1
 800a86c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a870:	e7e8      	b.n	800a844 <_strtol_l.constprop.0+0x6c>
 800a872:	2c2b      	cmp	r4, #43	; 0x2b
 800a874:	bf04      	itt	eq
 800a876:	782c      	ldrbeq	r4, [r5, #0]
 800a878:	1cb5      	addeq	r5, r6, #2
 800a87a:	e7ca      	b.n	800a812 <_strtol_l.constprop.0+0x3a>
 800a87c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a880:	f1be 0f19 	cmp.w	lr, #25
 800a884:	d801      	bhi.n	800a88a <_strtol_l.constprop.0+0xb2>
 800a886:	3c37      	subs	r4, #55	; 0x37
 800a888:	e7e2      	b.n	800a850 <_strtol_l.constprop.0+0x78>
 800a88a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a88e:	f1be 0f19 	cmp.w	lr, #25
 800a892:	d804      	bhi.n	800a89e <_strtol_l.constprop.0+0xc6>
 800a894:	3c57      	subs	r4, #87	; 0x57
 800a896:	e7db      	b.n	800a850 <_strtol_l.constprop.0+0x78>
 800a898:	f04f 3cff 	mov.w	ip, #4294967295
 800a89c:	e7e6      	b.n	800a86c <_strtol_l.constprop.0+0x94>
 800a89e:	f1bc 0f00 	cmp.w	ip, #0
 800a8a2:	da05      	bge.n	800a8b0 <_strtol_l.constprop.0+0xd8>
 800a8a4:	2322      	movs	r3, #34	; 0x22
 800a8a6:	6003      	str	r3, [r0, #0]
 800a8a8:	4646      	mov	r6, r8
 800a8aa:	b942      	cbnz	r2, 800a8be <_strtol_l.constprop.0+0xe6>
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	e79e      	b.n	800a7ee <_strtol_l.constprop.0+0x16>
 800a8b0:	b107      	cbz	r7, 800a8b4 <_strtol_l.constprop.0+0xdc>
 800a8b2:	4276      	negs	r6, r6
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	d0f9      	beq.n	800a8ac <_strtol_l.constprop.0+0xd4>
 800a8b8:	f1bc 0f00 	cmp.w	ip, #0
 800a8bc:	d000      	beq.n	800a8c0 <_strtol_l.constprop.0+0xe8>
 800a8be:	1e69      	subs	r1, r5, #1
 800a8c0:	6011      	str	r1, [r2, #0]
 800a8c2:	e7f3      	b.n	800a8ac <_strtol_l.constprop.0+0xd4>
 800a8c4:	2430      	movs	r4, #48	; 0x30
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1b1      	bne.n	800a82e <_strtol_l.constprop.0+0x56>
 800a8ca:	2308      	movs	r3, #8
 800a8cc:	e7af      	b.n	800a82e <_strtol_l.constprop.0+0x56>
 800a8ce:	2c30      	cmp	r4, #48	; 0x30
 800a8d0:	d0a5      	beq.n	800a81e <_strtol_l.constprop.0+0x46>
 800a8d2:	230a      	movs	r3, #10
 800a8d4:	e7ab      	b.n	800a82e <_strtol_l.constprop.0+0x56>
 800a8d6:	bf00      	nop
 800a8d8:	0800f2f1 	.word	0x0800f2f1

0800a8dc <_strtol_r>:
 800a8dc:	f7ff bf7c 	b.w	800a7d8 <_strtol_l.constprop.0>

0800a8e0 <__swbuf_r>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	460e      	mov	r6, r1
 800a8e4:	4614      	mov	r4, r2
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	b118      	cbz	r0, 800a8f2 <__swbuf_r+0x12>
 800a8ea:	6983      	ldr	r3, [r0, #24]
 800a8ec:	b90b      	cbnz	r3, 800a8f2 <__swbuf_r+0x12>
 800a8ee:	f7fd fded 	bl	80084cc <__sinit>
 800a8f2:	4b21      	ldr	r3, [pc, #132]	; (800a978 <__swbuf_r+0x98>)
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	d12b      	bne.n	800a950 <__swbuf_r+0x70>
 800a8f8:	686c      	ldr	r4, [r5, #4]
 800a8fa:	69a3      	ldr	r3, [r4, #24]
 800a8fc:	60a3      	str	r3, [r4, #8]
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	071a      	lsls	r2, r3, #28
 800a902:	d52f      	bpl.n	800a964 <__swbuf_r+0x84>
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	b36b      	cbz	r3, 800a964 <__swbuf_r+0x84>
 800a908:	6923      	ldr	r3, [r4, #16]
 800a90a:	6820      	ldr	r0, [r4, #0]
 800a90c:	1ac0      	subs	r0, r0, r3
 800a90e:	6963      	ldr	r3, [r4, #20]
 800a910:	b2f6      	uxtb	r6, r6
 800a912:	4283      	cmp	r3, r0
 800a914:	4637      	mov	r7, r6
 800a916:	dc04      	bgt.n	800a922 <__swbuf_r+0x42>
 800a918:	4621      	mov	r1, r4
 800a91a:	4628      	mov	r0, r5
 800a91c:	f7fd fd30 	bl	8008380 <_fflush_r>
 800a920:	bb30      	cbnz	r0, 800a970 <__swbuf_r+0x90>
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	3b01      	subs	r3, #1
 800a926:	60a3      	str	r3, [r4, #8]
 800a928:	6823      	ldr	r3, [r4, #0]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	6022      	str	r2, [r4, #0]
 800a92e:	701e      	strb	r6, [r3, #0]
 800a930:	6963      	ldr	r3, [r4, #20]
 800a932:	3001      	adds	r0, #1
 800a934:	4283      	cmp	r3, r0
 800a936:	d004      	beq.n	800a942 <__swbuf_r+0x62>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	07db      	lsls	r3, r3, #31
 800a93c:	d506      	bpl.n	800a94c <__swbuf_r+0x6c>
 800a93e:	2e0a      	cmp	r6, #10
 800a940:	d104      	bne.n	800a94c <__swbuf_r+0x6c>
 800a942:	4621      	mov	r1, r4
 800a944:	4628      	mov	r0, r5
 800a946:	f7fd fd1b 	bl	8008380 <_fflush_r>
 800a94a:	b988      	cbnz	r0, 800a970 <__swbuf_r+0x90>
 800a94c:	4638      	mov	r0, r7
 800a94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a950:	4b0a      	ldr	r3, [pc, #40]	; (800a97c <__swbuf_r+0x9c>)
 800a952:	429c      	cmp	r4, r3
 800a954:	d101      	bne.n	800a95a <__swbuf_r+0x7a>
 800a956:	68ac      	ldr	r4, [r5, #8]
 800a958:	e7cf      	b.n	800a8fa <__swbuf_r+0x1a>
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <__swbuf_r+0xa0>)
 800a95c:	429c      	cmp	r4, r3
 800a95e:	bf08      	it	eq
 800a960:	68ec      	ldreq	r4, [r5, #12]
 800a962:	e7ca      	b.n	800a8fa <__swbuf_r+0x1a>
 800a964:	4621      	mov	r1, r4
 800a966:	4628      	mov	r0, r5
 800a968:	f000 f81e 	bl	800a9a8 <__swsetup_r>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d0cb      	beq.n	800a908 <__swbuf_r+0x28>
 800a970:	f04f 37ff 	mov.w	r7, #4294967295
 800a974:	e7ea      	b.n	800a94c <__swbuf_r+0x6c>
 800a976:	bf00      	nop
 800a978:	0800f414 	.word	0x0800f414
 800a97c:	0800f434 	.word	0x0800f434
 800a980:	0800f3f4 	.word	0x0800f3f4

0800a984 <_write_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d07      	ldr	r5, [pc, #28]	; (800a9a4 <_write_r+0x20>)
 800a988:	4604      	mov	r4, r0
 800a98a:	4608      	mov	r0, r1
 800a98c:	4611      	mov	r1, r2
 800a98e:	2200      	movs	r2, #0
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f6 fcaf 	bl	80012f6 <_write>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_write_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_write_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20000eec 	.word	0x20000eec

0800a9a8 <__swsetup_r>:
 800a9a8:	4b32      	ldr	r3, [pc, #200]	; (800aa74 <__swsetup_r+0xcc>)
 800a9aa:	b570      	push	{r4, r5, r6, lr}
 800a9ac:	681d      	ldr	r5, [r3, #0]
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	b125      	cbz	r5, 800a9be <__swsetup_r+0x16>
 800a9b4:	69ab      	ldr	r3, [r5, #24]
 800a9b6:	b913      	cbnz	r3, 800a9be <__swsetup_r+0x16>
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f7fd fd87 	bl	80084cc <__sinit>
 800a9be:	4b2e      	ldr	r3, [pc, #184]	; (800aa78 <__swsetup_r+0xd0>)
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	d10f      	bne.n	800a9e4 <__swsetup_r+0x3c>
 800a9c4:	686c      	ldr	r4, [r5, #4]
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9cc:	0719      	lsls	r1, r3, #28
 800a9ce:	d42c      	bmi.n	800aa2a <__swsetup_r+0x82>
 800a9d0:	06dd      	lsls	r5, r3, #27
 800a9d2:	d411      	bmi.n	800a9f8 <__swsetup_r+0x50>
 800a9d4:	2309      	movs	r3, #9
 800a9d6:	6033      	str	r3, [r6, #0]
 800a9d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9dc:	81a3      	strh	r3, [r4, #12]
 800a9de:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e2:	e03e      	b.n	800aa62 <__swsetup_r+0xba>
 800a9e4:	4b25      	ldr	r3, [pc, #148]	; (800aa7c <__swsetup_r+0xd4>)
 800a9e6:	429c      	cmp	r4, r3
 800a9e8:	d101      	bne.n	800a9ee <__swsetup_r+0x46>
 800a9ea:	68ac      	ldr	r4, [r5, #8]
 800a9ec:	e7eb      	b.n	800a9c6 <__swsetup_r+0x1e>
 800a9ee:	4b24      	ldr	r3, [pc, #144]	; (800aa80 <__swsetup_r+0xd8>)
 800a9f0:	429c      	cmp	r4, r3
 800a9f2:	bf08      	it	eq
 800a9f4:	68ec      	ldreq	r4, [r5, #12]
 800a9f6:	e7e6      	b.n	800a9c6 <__swsetup_r+0x1e>
 800a9f8:	0758      	lsls	r0, r3, #29
 800a9fa:	d512      	bpl.n	800aa22 <__swsetup_r+0x7a>
 800a9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9fe:	b141      	cbz	r1, 800aa12 <__swsetup_r+0x6a>
 800aa00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa04:	4299      	cmp	r1, r3
 800aa06:	d002      	beq.n	800aa0e <__swsetup_r+0x66>
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f7fd ff3b 	bl	8008884 <_free_r>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	6363      	str	r3, [r4, #52]	; 0x34
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	6063      	str	r3, [r4, #4]
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f043 0308 	orr.w	r3, r3, #8
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	6923      	ldr	r3, [r4, #16]
 800aa2c:	b94b      	cbnz	r3, 800aa42 <__swsetup_r+0x9a>
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa38:	d003      	beq.n	800aa42 <__swsetup_r+0x9a>
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f001 fa61 	bl	800bf04 <__smakebuf_r>
 800aa42:	89a0      	ldrh	r0, [r4, #12]
 800aa44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa48:	f010 0301 	ands.w	r3, r0, #1
 800aa4c:	d00a      	beq.n	800aa64 <__swsetup_r+0xbc>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60a3      	str	r3, [r4, #8]
 800aa52:	6963      	ldr	r3, [r4, #20]
 800aa54:	425b      	negs	r3, r3
 800aa56:	61a3      	str	r3, [r4, #24]
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	b943      	cbnz	r3, 800aa6e <__swsetup_r+0xc6>
 800aa5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa60:	d1ba      	bne.n	800a9d8 <__swsetup_r+0x30>
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
 800aa64:	0781      	lsls	r1, r0, #30
 800aa66:	bf58      	it	pl
 800aa68:	6963      	ldrpl	r3, [r4, #20]
 800aa6a:	60a3      	str	r3, [r4, #8]
 800aa6c:	e7f4      	b.n	800aa58 <__swsetup_r+0xb0>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	e7f7      	b.n	800aa62 <__swsetup_r+0xba>
 800aa72:	bf00      	nop
 800aa74:	2000000c 	.word	0x2000000c
 800aa78:	0800f414 	.word	0x0800f414
 800aa7c:	0800f434 	.word	0x0800f434
 800aa80:	0800f3f4 	.word	0x0800f3f4

0800aa84 <abort>:
 800aa84:	b508      	push	{r3, lr}
 800aa86:	2006      	movs	r0, #6
 800aa88:	f002 f92a 	bl	800cce0 <raise>
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	f7f6 fc0b 	bl	80012a8 <_exit>
	...

0800aa94 <_close_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d06      	ldr	r5, [pc, #24]	; (800aab0 <_close_r+0x1c>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f6 fc45 	bl	800132e <_close>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_close_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_close_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	20000eec 	.word	0x20000eec

0800aab4 <quorem>:
 800aab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	6903      	ldr	r3, [r0, #16]
 800aaba:	690c      	ldr	r4, [r1, #16]
 800aabc:	42a3      	cmp	r3, r4
 800aabe:	4607      	mov	r7, r0
 800aac0:	f2c0 8081 	blt.w	800abc6 <quorem+0x112>
 800aac4:	3c01      	subs	r4, #1
 800aac6:	f101 0814 	add.w	r8, r1, #20
 800aaca:	f100 0514 	add.w	r5, r0, #20
 800aace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aad2:	9301      	str	r3, [sp, #4]
 800aad4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aad8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aadc:	3301      	adds	r3, #1
 800aade:	429a      	cmp	r2, r3
 800aae0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aae4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aae8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aaec:	d331      	bcc.n	800ab52 <quorem+0x9e>
 800aaee:	f04f 0e00 	mov.w	lr, #0
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	46ac      	mov	ip, r5
 800aaf6:	46f2      	mov	sl, lr
 800aaf8:	f850 2b04 	ldr.w	r2, [r0], #4
 800aafc:	b293      	uxth	r3, r2
 800aafe:	fb06 e303 	mla	r3, r6, r3, lr
 800ab02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	ebaa 0303 	sub.w	r3, sl, r3
 800ab0c:	f8dc a000 	ldr.w	sl, [ip]
 800ab10:	0c12      	lsrs	r2, r2, #16
 800ab12:	fa13 f38a 	uxtah	r3, r3, sl
 800ab16:	fb06 e202 	mla	r2, r6, r2, lr
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	9b00      	ldr	r3, [sp, #0]
 800ab1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab22:	b292      	uxth	r2, r2
 800ab24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab2c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab30:	4581      	cmp	r9, r0
 800ab32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab36:	f84c 3b04 	str.w	r3, [ip], #4
 800ab3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab3e:	d2db      	bcs.n	800aaf8 <quorem+0x44>
 800ab40:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab44:	b92b      	cbnz	r3, 800ab52 <quorem+0x9e>
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	3b04      	subs	r3, #4
 800ab4a:	429d      	cmp	r5, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	d32e      	bcc.n	800abae <quorem+0xfa>
 800ab50:	613c      	str	r4, [r7, #16]
 800ab52:	4638      	mov	r0, r7
 800ab54:	f001 fd00 	bl	800c558 <__mcmp>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	db24      	blt.n	800aba6 <quorem+0xf2>
 800ab5c:	3601      	adds	r6, #1
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f04f 0c00 	mov.w	ip, #0
 800ab64:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab68:	f8d0 e000 	ldr.w	lr, [r0]
 800ab6c:	b293      	uxth	r3, r2
 800ab6e:	ebac 0303 	sub.w	r3, ip, r3
 800ab72:	0c12      	lsrs	r2, r2, #16
 800ab74:	fa13 f38e 	uxtah	r3, r3, lr
 800ab78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab86:	45c1      	cmp	r9, r8
 800ab88:	f840 3b04 	str.w	r3, [r0], #4
 800ab8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab90:	d2e8      	bcs.n	800ab64 <quorem+0xb0>
 800ab92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab9a:	b922      	cbnz	r2, 800aba6 <quorem+0xf2>
 800ab9c:	3b04      	subs	r3, #4
 800ab9e:	429d      	cmp	r5, r3
 800aba0:	461a      	mov	r2, r3
 800aba2:	d30a      	bcc.n	800abba <quorem+0x106>
 800aba4:	613c      	str	r4, [r7, #16]
 800aba6:	4630      	mov	r0, r6
 800aba8:	b003      	add	sp, #12
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abae:	6812      	ldr	r2, [r2, #0]
 800abb0:	3b04      	subs	r3, #4
 800abb2:	2a00      	cmp	r2, #0
 800abb4:	d1cc      	bne.n	800ab50 <quorem+0x9c>
 800abb6:	3c01      	subs	r4, #1
 800abb8:	e7c7      	b.n	800ab4a <quorem+0x96>
 800abba:	6812      	ldr	r2, [r2, #0]
 800abbc:	3b04      	subs	r3, #4
 800abbe:	2a00      	cmp	r2, #0
 800abc0:	d1f0      	bne.n	800aba4 <quorem+0xf0>
 800abc2:	3c01      	subs	r4, #1
 800abc4:	e7eb      	b.n	800ab9e <quorem+0xea>
 800abc6:	2000      	movs	r0, #0
 800abc8:	e7ee      	b.n	800aba8 <quorem+0xf4>
 800abca:	0000      	movs	r0, r0
 800abcc:	0000      	movs	r0, r0
	...

0800abd0 <_dtoa_r>:
 800abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd4:	ed2d 8b04 	vpush	{d8-d9}
 800abd8:	ec57 6b10 	vmov	r6, r7, d0
 800abdc:	b093      	sub	sp, #76	; 0x4c
 800abde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800abe0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800abe4:	9106      	str	r1, [sp, #24]
 800abe6:	ee10 aa10 	vmov	sl, s0
 800abea:	4604      	mov	r4, r0
 800abec:	9209      	str	r2, [sp, #36]	; 0x24
 800abee:	930c      	str	r3, [sp, #48]	; 0x30
 800abf0:	46bb      	mov	fp, r7
 800abf2:	b975      	cbnz	r5, 800ac12 <_dtoa_r+0x42>
 800abf4:	2010      	movs	r0, #16
 800abf6:	f7fd fdef 	bl	80087d8 <malloc>
 800abfa:	4602      	mov	r2, r0
 800abfc:	6260      	str	r0, [r4, #36]	; 0x24
 800abfe:	b920      	cbnz	r0, 800ac0a <_dtoa_r+0x3a>
 800ac00:	4ba7      	ldr	r3, [pc, #668]	; (800aea0 <_dtoa_r+0x2d0>)
 800ac02:	21ea      	movs	r1, #234	; 0xea
 800ac04:	48a7      	ldr	r0, [pc, #668]	; (800aea4 <_dtoa_r+0x2d4>)
 800ac06:	f7fd fb09 	bl	800821c <__assert_func>
 800ac0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac0e:	6005      	str	r5, [r0, #0]
 800ac10:	60c5      	str	r5, [r0, #12]
 800ac12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac14:	6819      	ldr	r1, [r3, #0]
 800ac16:	b151      	cbz	r1, 800ac2e <_dtoa_r+0x5e>
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	604a      	str	r2, [r1, #4]
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	4093      	lsls	r3, r2
 800ac20:	608b      	str	r3, [r1, #8]
 800ac22:	4620      	mov	r0, r4
 800ac24:	f001 fa0c 	bl	800c040 <_Bfree>
 800ac28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	1e3b      	subs	r3, r7, #0
 800ac30:	bfaa      	itet	ge
 800ac32:	2300      	movge	r3, #0
 800ac34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ac38:	f8c8 3000 	strge.w	r3, [r8]
 800ac3c:	4b9a      	ldr	r3, [pc, #616]	; (800aea8 <_dtoa_r+0x2d8>)
 800ac3e:	bfbc      	itt	lt
 800ac40:	2201      	movlt	r2, #1
 800ac42:	f8c8 2000 	strlt.w	r2, [r8]
 800ac46:	ea33 030b 	bics.w	r3, r3, fp
 800ac4a:	d11b      	bne.n	800ac84 <_dtoa_r+0xb4>
 800ac4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac52:	6013      	str	r3, [r2, #0]
 800ac54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac58:	4333      	orrs	r3, r6
 800ac5a:	f000 8592 	beq.w	800b782 <_dtoa_r+0xbb2>
 800ac5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac60:	b963      	cbnz	r3, 800ac7c <_dtoa_r+0xac>
 800ac62:	4b92      	ldr	r3, [pc, #584]	; (800aeac <_dtoa_r+0x2dc>)
 800ac64:	e022      	b.n	800acac <_dtoa_r+0xdc>
 800ac66:	4b92      	ldr	r3, [pc, #584]	; (800aeb0 <_dtoa_r+0x2e0>)
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac6e:	6013      	str	r3, [r2, #0]
 800ac70:	9801      	ldr	r0, [sp, #4]
 800ac72:	b013      	add	sp, #76	; 0x4c
 800ac74:	ecbd 8b04 	vpop	{d8-d9}
 800ac78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7c:	4b8b      	ldr	r3, [pc, #556]	; (800aeac <_dtoa_r+0x2dc>)
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	3303      	adds	r3, #3
 800ac82:	e7f3      	b.n	800ac6c <_dtoa_r+0x9c>
 800ac84:	2200      	movs	r2, #0
 800ac86:	2300      	movs	r3, #0
 800ac88:	4650      	mov	r0, sl
 800ac8a:	4659      	mov	r1, fp
 800ac8c:	f7f5 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac90:	ec4b ab19 	vmov	d9, sl, fp
 800ac94:	4680      	mov	r8, r0
 800ac96:	b158      	cbz	r0, 800acb0 <_dtoa_r+0xe0>
 800ac98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 856b 	beq.w	800b77c <_dtoa_r+0xbac>
 800aca6:	4883      	ldr	r0, [pc, #524]	; (800aeb4 <_dtoa_r+0x2e4>)
 800aca8:	6018      	str	r0, [r3, #0]
 800acaa:	1e43      	subs	r3, r0, #1
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	e7df      	b.n	800ac70 <_dtoa_r+0xa0>
 800acb0:	ec4b ab10 	vmov	d0, sl, fp
 800acb4:	aa10      	add	r2, sp, #64	; 0x40
 800acb6:	a911      	add	r1, sp, #68	; 0x44
 800acb8:	4620      	mov	r0, r4
 800acba:	f001 fd6f 	bl	800c79c <__d2b>
 800acbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800acc2:	ee08 0a10 	vmov	s16, r0
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	f000 8084 	beq.w	800add4 <_dtoa_r+0x204>
 800accc:	ee19 3a90 	vmov	r3, s19
 800acd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800acd8:	4656      	mov	r6, sl
 800acda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800acde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ace2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ace6:	4b74      	ldr	r3, [pc, #464]	; (800aeb8 <_dtoa_r+0x2e8>)
 800ace8:	2200      	movs	r2, #0
 800acea:	4630      	mov	r0, r6
 800acec:	4639      	mov	r1, r7
 800acee:	f7f5 facb 	bl	8000288 <__aeabi_dsub>
 800acf2:	a365      	add	r3, pc, #404	; (adr r3, 800ae88 <_dtoa_r+0x2b8>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fc7e 	bl	80005f8 <__aeabi_dmul>
 800acfc:	a364      	add	r3, pc, #400	; (adr r3, 800ae90 <_dtoa_r+0x2c0>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f7f5 fac3 	bl	800028c <__adddf3>
 800ad06:	4606      	mov	r6, r0
 800ad08:	4628      	mov	r0, r5
 800ad0a:	460f      	mov	r7, r1
 800ad0c:	f7f5 fc0a 	bl	8000524 <__aeabi_i2d>
 800ad10:	a361      	add	r3, pc, #388	; (adr r3, 800ae98 <_dtoa_r+0x2c8>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	f7f5 fc6f 	bl	80005f8 <__aeabi_dmul>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4630      	mov	r0, r6
 800ad20:	4639      	mov	r1, r7
 800ad22:	f7f5 fab3 	bl	800028c <__adddf3>
 800ad26:	4606      	mov	r6, r0
 800ad28:	460f      	mov	r7, r1
 800ad2a:	f7f5 ff15 	bl	8000b58 <__aeabi_d2iz>
 800ad2e:	2200      	movs	r2, #0
 800ad30:	9000      	str	r0, [sp, #0]
 800ad32:	2300      	movs	r3, #0
 800ad34:	4630      	mov	r0, r6
 800ad36:	4639      	mov	r1, r7
 800ad38:	f7f5 fed0 	bl	8000adc <__aeabi_dcmplt>
 800ad3c:	b150      	cbz	r0, 800ad54 <_dtoa_r+0x184>
 800ad3e:	9800      	ldr	r0, [sp, #0]
 800ad40:	f7f5 fbf0 	bl	8000524 <__aeabi_i2d>
 800ad44:	4632      	mov	r2, r6
 800ad46:	463b      	mov	r3, r7
 800ad48:	f7f5 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad4c:	b910      	cbnz	r0, 800ad54 <_dtoa_r+0x184>
 800ad4e:	9b00      	ldr	r3, [sp, #0]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	9b00      	ldr	r3, [sp, #0]
 800ad56:	2b16      	cmp	r3, #22
 800ad58:	d85a      	bhi.n	800ae10 <_dtoa_r+0x240>
 800ad5a:	9a00      	ldr	r2, [sp, #0]
 800ad5c:	4b57      	ldr	r3, [pc, #348]	; (800aebc <_dtoa_r+0x2ec>)
 800ad5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	ec51 0b19 	vmov	r0, r1, d9
 800ad6a:	f7f5 feb7 	bl	8000adc <__aeabi_dcmplt>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d050      	beq.n	800ae14 <_dtoa_r+0x244>
 800ad72:	9b00      	ldr	r3, [sp, #0]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad7e:	1b5d      	subs	r5, r3, r5
 800ad80:	1e6b      	subs	r3, r5, #1
 800ad82:	9305      	str	r3, [sp, #20]
 800ad84:	bf45      	ittet	mi
 800ad86:	f1c5 0301 	rsbmi	r3, r5, #1
 800ad8a:	9304      	strmi	r3, [sp, #16]
 800ad8c:	2300      	movpl	r3, #0
 800ad8e:	2300      	movmi	r3, #0
 800ad90:	bf4c      	ite	mi
 800ad92:	9305      	strmi	r3, [sp, #20]
 800ad94:	9304      	strpl	r3, [sp, #16]
 800ad96:	9b00      	ldr	r3, [sp, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	db3d      	blt.n	800ae18 <_dtoa_r+0x248>
 800ad9c:	9b05      	ldr	r3, [sp, #20]
 800ad9e:	9a00      	ldr	r2, [sp, #0]
 800ada0:	920a      	str	r2, [sp, #40]	; 0x28
 800ada2:	4413      	add	r3, r2
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	2300      	movs	r3, #0
 800ada8:	9307      	str	r3, [sp, #28]
 800adaa:	9b06      	ldr	r3, [sp, #24]
 800adac:	2b09      	cmp	r3, #9
 800adae:	f200 8089 	bhi.w	800aec4 <_dtoa_r+0x2f4>
 800adb2:	2b05      	cmp	r3, #5
 800adb4:	bfc4      	itt	gt
 800adb6:	3b04      	subgt	r3, #4
 800adb8:	9306      	strgt	r3, [sp, #24]
 800adba:	9b06      	ldr	r3, [sp, #24]
 800adbc:	f1a3 0302 	sub.w	r3, r3, #2
 800adc0:	bfcc      	ite	gt
 800adc2:	2500      	movgt	r5, #0
 800adc4:	2501      	movle	r5, #1
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	f200 8087 	bhi.w	800aeda <_dtoa_r+0x30a>
 800adcc:	e8df f003 	tbb	[pc, r3]
 800add0:	59383a2d 	.word	0x59383a2d
 800add4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800add8:	441d      	add	r5, r3
 800adda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800adde:	2b20      	cmp	r3, #32
 800ade0:	bfc1      	itttt	gt
 800ade2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ade6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800adea:	fa0b f303 	lslgt.w	r3, fp, r3
 800adee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800adf2:	bfda      	itte	le
 800adf4:	f1c3 0320 	rsble	r3, r3, #32
 800adf8:	fa06 f003 	lslle.w	r0, r6, r3
 800adfc:	4318      	orrgt	r0, r3
 800adfe:	f7f5 fb81 	bl	8000504 <__aeabi_ui2d>
 800ae02:	2301      	movs	r3, #1
 800ae04:	4606      	mov	r6, r0
 800ae06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae0a:	3d01      	subs	r5, #1
 800ae0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ae0e:	e76a      	b.n	800ace6 <_dtoa_r+0x116>
 800ae10:	2301      	movs	r3, #1
 800ae12:	e7b2      	b.n	800ad7a <_dtoa_r+0x1aa>
 800ae14:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae16:	e7b1      	b.n	800ad7c <_dtoa_r+0x1ac>
 800ae18:	9b04      	ldr	r3, [sp, #16]
 800ae1a:	9a00      	ldr	r2, [sp, #0]
 800ae1c:	1a9b      	subs	r3, r3, r2
 800ae1e:	9304      	str	r3, [sp, #16]
 800ae20:	4253      	negs	r3, r2
 800ae22:	9307      	str	r3, [sp, #28]
 800ae24:	2300      	movs	r3, #0
 800ae26:	930a      	str	r3, [sp, #40]	; 0x28
 800ae28:	e7bf      	b.n	800adaa <_dtoa_r+0x1da>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	9308      	str	r3, [sp, #32]
 800ae2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	dc55      	bgt.n	800aee0 <_dtoa_r+0x310>
 800ae34:	2301      	movs	r3, #1
 800ae36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae3e:	e00c      	b.n	800ae5a <_dtoa_r+0x28a>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e7f3      	b.n	800ae2c <_dtoa_r+0x25c>
 800ae44:	2300      	movs	r3, #0
 800ae46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae48:	9308      	str	r3, [sp, #32]
 800ae4a:	9b00      	ldr	r3, [sp, #0]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	9302      	str	r3, [sp, #8]
 800ae50:	3301      	adds	r3, #1
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	bfb8      	it	lt
 800ae58:	2301      	movlt	r3, #1
 800ae5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	6042      	str	r2, [r0, #4]
 800ae60:	2204      	movs	r2, #4
 800ae62:	f102 0614 	add.w	r6, r2, #20
 800ae66:	429e      	cmp	r6, r3
 800ae68:	6841      	ldr	r1, [r0, #4]
 800ae6a:	d93d      	bls.n	800aee8 <_dtoa_r+0x318>
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f001 f8a7 	bl	800bfc0 <_Balloc>
 800ae72:	9001      	str	r0, [sp, #4]
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d13b      	bne.n	800aef0 <_dtoa_r+0x320>
 800ae78:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <_dtoa_r+0x2f0>)
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae80:	e6c0      	b.n	800ac04 <_dtoa_r+0x34>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e7df      	b.n	800ae46 <_dtoa_r+0x276>
 800ae86:	bf00      	nop
 800ae88:	636f4361 	.word	0x636f4361
 800ae8c:	3fd287a7 	.word	0x3fd287a7
 800ae90:	8b60c8b3 	.word	0x8b60c8b3
 800ae94:	3fc68a28 	.word	0x3fc68a28
 800ae98:	509f79fb 	.word	0x509f79fb
 800ae9c:	3fd34413 	.word	0x3fd34413
 800aea0:	0800f505 	.word	0x0800f505
 800aea4:	0800f51c 	.word	0x0800f51c
 800aea8:	7ff00000 	.word	0x7ff00000
 800aeac:	0800f501 	.word	0x0800f501
 800aeb0:	0800f4f8 	.word	0x0800f4f8
 800aeb4:	0800f47a 	.word	0x0800f47a
 800aeb8:	3ff80000 	.word	0x3ff80000
 800aebc:	0800f688 	.word	0x0800f688
 800aec0:	0800f577 	.word	0x0800f577
 800aec4:	2501      	movs	r5, #1
 800aec6:	2300      	movs	r3, #0
 800aec8:	9306      	str	r3, [sp, #24]
 800aeca:	9508      	str	r5, [sp, #32]
 800aecc:	f04f 33ff 	mov.w	r3, #4294967295
 800aed0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aed4:	2200      	movs	r2, #0
 800aed6:	2312      	movs	r3, #18
 800aed8:	e7b0      	b.n	800ae3c <_dtoa_r+0x26c>
 800aeda:	2301      	movs	r3, #1
 800aedc:	9308      	str	r3, [sp, #32]
 800aede:	e7f5      	b.n	800aecc <_dtoa_r+0x2fc>
 800aee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aee6:	e7b8      	b.n	800ae5a <_dtoa_r+0x28a>
 800aee8:	3101      	adds	r1, #1
 800aeea:	6041      	str	r1, [r0, #4]
 800aeec:	0052      	lsls	r2, r2, #1
 800aeee:	e7b8      	b.n	800ae62 <_dtoa_r+0x292>
 800aef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aef2:	9a01      	ldr	r2, [sp, #4]
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	2b0e      	cmp	r3, #14
 800aefa:	f200 809d 	bhi.w	800b038 <_dtoa_r+0x468>
 800aefe:	2d00      	cmp	r5, #0
 800af00:	f000 809a 	beq.w	800b038 <_dtoa_r+0x468>
 800af04:	9b00      	ldr	r3, [sp, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	dd32      	ble.n	800af70 <_dtoa_r+0x3a0>
 800af0a:	4ab7      	ldr	r2, [pc, #732]	; (800b1e8 <_dtoa_r+0x618>)
 800af0c:	f003 030f 	and.w	r3, r3, #15
 800af10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af18:	9b00      	ldr	r3, [sp, #0]
 800af1a:	05d8      	lsls	r0, r3, #23
 800af1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800af20:	d516      	bpl.n	800af50 <_dtoa_r+0x380>
 800af22:	4bb2      	ldr	r3, [pc, #712]	; (800b1ec <_dtoa_r+0x61c>)
 800af24:	ec51 0b19 	vmov	r0, r1, d9
 800af28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af2c:	f7f5 fc8e 	bl	800084c <__aeabi_ddiv>
 800af30:	f007 070f 	and.w	r7, r7, #15
 800af34:	4682      	mov	sl, r0
 800af36:	468b      	mov	fp, r1
 800af38:	2503      	movs	r5, #3
 800af3a:	4eac      	ldr	r6, [pc, #688]	; (800b1ec <_dtoa_r+0x61c>)
 800af3c:	b957      	cbnz	r7, 800af54 <_dtoa_r+0x384>
 800af3e:	4642      	mov	r2, r8
 800af40:	464b      	mov	r3, r9
 800af42:	4650      	mov	r0, sl
 800af44:	4659      	mov	r1, fp
 800af46:	f7f5 fc81 	bl	800084c <__aeabi_ddiv>
 800af4a:	4682      	mov	sl, r0
 800af4c:	468b      	mov	fp, r1
 800af4e:	e028      	b.n	800afa2 <_dtoa_r+0x3d2>
 800af50:	2502      	movs	r5, #2
 800af52:	e7f2      	b.n	800af3a <_dtoa_r+0x36a>
 800af54:	07f9      	lsls	r1, r7, #31
 800af56:	d508      	bpl.n	800af6a <_dtoa_r+0x39a>
 800af58:	4640      	mov	r0, r8
 800af5a:	4649      	mov	r1, r9
 800af5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af60:	f7f5 fb4a 	bl	80005f8 <__aeabi_dmul>
 800af64:	3501      	adds	r5, #1
 800af66:	4680      	mov	r8, r0
 800af68:	4689      	mov	r9, r1
 800af6a:	107f      	asrs	r7, r7, #1
 800af6c:	3608      	adds	r6, #8
 800af6e:	e7e5      	b.n	800af3c <_dtoa_r+0x36c>
 800af70:	f000 809b 	beq.w	800b0aa <_dtoa_r+0x4da>
 800af74:	9b00      	ldr	r3, [sp, #0]
 800af76:	4f9d      	ldr	r7, [pc, #628]	; (800b1ec <_dtoa_r+0x61c>)
 800af78:	425e      	negs	r6, r3
 800af7a:	4b9b      	ldr	r3, [pc, #620]	; (800b1e8 <_dtoa_r+0x618>)
 800af7c:	f006 020f 	and.w	r2, r6, #15
 800af80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	ec51 0b19 	vmov	r0, r1, d9
 800af8c:	f7f5 fb34 	bl	80005f8 <__aeabi_dmul>
 800af90:	1136      	asrs	r6, r6, #4
 800af92:	4682      	mov	sl, r0
 800af94:	468b      	mov	fp, r1
 800af96:	2300      	movs	r3, #0
 800af98:	2502      	movs	r5, #2
 800af9a:	2e00      	cmp	r6, #0
 800af9c:	d17a      	bne.n	800b094 <_dtoa_r+0x4c4>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1d3      	bne.n	800af4a <_dtoa_r+0x37a>
 800afa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8082 	beq.w	800b0ae <_dtoa_r+0x4de>
 800afaa:	4b91      	ldr	r3, [pc, #580]	; (800b1f0 <_dtoa_r+0x620>)
 800afac:	2200      	movs	r2, #0
 800afae:	4650      	mov	r0, sl
 800afb0:	4659      	mov	r1, fp
 800afb2:	f7f5 fd93 	bl	8000adc <__aeabi_dcmplt>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d079      	beq.n	800b0ae <_dtoa_r+0x4de>
 800afba:	9b03      	ldr	r3, [sp, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d076      	beq.n	800b0ae <_dtoa_r+0x4de>
 800afc0:	9b02      	ldr	r3, [sp, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dd36      	ble.n	800b034 <_dtoa_r+0x464>
 800afc6:	9b00      	ldr	r3, [sp, #0]
 800afc8:	4650      	mov	r0, sl
 800afca:	4659      	mov	r1, fp
 800afcc:	1e5f      	subs	r7, r3, #1
 800afce:	2200      	movs	r2, #0
 800afd0:	4b88      	ldr	r3, [pc, #544]	; (800b1f4 <_dtoa_r+0x624>)
 800afd2:	f7f5 fb11 	bl	80005f8 <__aeabi_dmul>
 800afd6:	9e02      	ldr	r6, [sp, #8]
 800afd8:	4682      	mov	sl, r0
 800afda:	468b      	mov	fp, r1
 800afdc:	3501      	adds	r5, #1
 800afde:	4628      	mov	r0, r5
 800afe0:	f7f5 faa0 	bl	8000524 <__aeabi_i2d>
 800afe4:	4652      	mov	r2, sl
 800afe6:	465b      	mov	r3, fp
 800afe8:	f7f5 fb06 	bl	80005f8 <__aeabi_dmul>
 800afec:	4b82      	ldr	r3, [pc, #520]	; (800b1f8 <_dtoa_r+0x628>)
 800afee:	2200      	movs	r2, #0
 800aff0:	f7f5 f94c 	bl	800028c <__adddf3>
 800aff4:	46d0      	mov	r8, sl
 800aff6:	46d9      	mov	r9, fp
 800aff8:	4682      	mov	sl, r0
 800affa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800affe:	2e00      	cmp	r6, #0
 800b000:	d158      	bne.n	800b0b4 <_dtoa_r+0x4e4>
 800b002:	4b7e      	ldr	r3, [pc, #504]	; (800b1fc <_dtoa_r+0x62c>)
 800b004:	2200      	movs	r2, #0
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 f93d 	bl	8000288 <__aeabi_dsub>
 800b00e:	4652      	mov	r2, sl
 800b010:	465b      	mov	r3, fp
 800b012:	4680      	mov	r8, r0
 800b014:	4689      	mov	r9, r1
 800b016:	f7f5 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	f040 8295 	bne.w	800b54a <_dtoa_r+0x97a>
 800b020:	4652      	mov	r2, sl
 800b022:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b026:	4640      	mov	r0, r8
 800b028:	4649      	mov	r1, r9
 800b02a:	f7f5 fd57 	bl	8000adc <__aeabi_dcmplt>
 800b02e:	2800      	cmp	r0, #0
 800b030:	f040 8289 	bne.w	800b546 <_dtoa_r+0x976>
 800b034:	ec5b ab19 	vmov	sl, fp, d9
 800b038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f2c0 8148 	blt.w	800b2d0 <_dtoa_r+0x700>
 800b040:	9a00      	ldr	r2, [sp, #0]
 800b042:	2a0e      	cmp	r2, #14
 800b044:	f300 8144 	bgt.w	800b2d0 <_dtoa_r+0x700>
 800b048:	4b67      	ldr	r3, [pc, #412]	; (800b1e8 <_dtoa_r+0x618>)
 800b04a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b04e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b054:	2b00      	cmp	r3, #0
 800b056:	f280 80d5 	bge.w	800b204 <_dtoa_r+0x634>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f300 80d1 	bgt.w	800b204 <_dtoa_r+0x634>
 800b062:	f040 826f 	bne.w	800b544 <_dtoa_r+0x974>
 800b066:	4b65      	ldr	r3, [pc, #404]	; (800b1fc <_dtoa_r+0x62c>)
 800b068:	2200      	movs	r2, #0
 800b06a:	4640      	mov	r0, r8
 800b06c:	4649      	mov	r1, r9
 800b06e:	f7f5 fac3 	bl	80005f8 <__aeabi_dmul>
 800b072:	4652      	mov	r2, sl
 800b074:	465b      	mov	r3, fp
 800b076:	f7f5 fd45 	bl	8000b04 <__aeabi_dcmpge>
 800b07a:	9e03      	ldr	r6, [sp, #12]
 800b07c:	4637      	mov	r7, r6
 800b07e:	2800      	cmp	r0, #0
 800b080:	f040 8245 	bne.w	800b50e <_dtoa_r+0x93e>
 800b084:	9d01      	ldr	r5, [sp, #4]
 800b086:	2331      	movs	r3, #49	; 0x31
 800b088:	f805 3b01 	strb.w	r3, [r5], #1
 800b08c:	9b00      	ldr	r3, [sp, #0]
 800b08e:	3301      	adds	r3, #1
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	e240      	b.n	800b516 <_dtoa_r+0x946>
 800b094:	07f2      	lsls	r2, r6, #31
 800b096:	d505      	bpl.n	800b0a4 <_dtoa_r+0x4d4>
 800b098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b09c:	f7f5 faac 	bl	80005f8 <__aeabi_dmul>
 800b0a0:	3501      	adds	r5, #1
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	1076      	asrs	r6, r6, #1
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	e777      	b.n	800af9a <_dtoa_r+0x3ca>
 800b0aa:	2502      	movs	r5, #2
 800b0ac:	e779      	b.n	800afa2 <_dtoa_r+0x3d2>
 800b0ae:	9f00      	ldr	r7, [sp, #0]
 800b0b0:	9e03      	ldr	r6, [sp, #12]
 800b0b2:	e794      	b.n	800afde <_dtoa_r+0x40e>
 800b0b4:	9901      	ldr	r1, [sp, #4]
 800b0b6:	4b4c      	ldr	r3, [pc, #304]	; (800b1e8 <_dtoa_r+0x618>)
 800b0b8:	4431      	add	r1, r6
 800b0ba:	910d      	str	r1, [sp, #52]	; 0x34
 800b0bc:	9908      	ldr	r1, [sp, #32]
 800b0be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b0c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0c6:	2900      	cmp	r1, #0
 800b0c8:	d043      	beq.n	800b152 <_dtoa_r+0x582>
 800b0ca:	494d      	ldr	r1, [pc, #308]	; (800b200 <_dtoa_r+0x630>)
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f7f5 fbbd 	bl	800084c <__aeabi_ddiv>
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	f7f5 f8d7 	bl	8000288 <__aeabi_dsub>
 800b0da:	9d01      	ldr	r5, [sp, #4]
 800b0dc:	4682      	mov	sl, r0
 800b0de:	468b      	mov	fp, r1
 800b0e0:	4649      	mov	r1, r9
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	f7f5 fd38 	bl	8000b58 <__aeabi_d2iz>
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	f7f5 fa1b 	bl	8000524 <__aeabi_i2d>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4640      	mov	r0, r8
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	f7f5 f8c7 	bl	8000288 <__aeabi_dsub>
 800b0fa:	3630      	adds	r6, #48	; 0x30
 800b0fc:	f805 6b01 	strb.w	r6, [r5], #1
 800b100:	4652      	mov	r2, sl
 800b102:	465b      	mov	r3, fp
 800b104:	4680      	mov	r8, r0
 800b106:	4689      	mov	r9, r1
 800b108:	f7f5 fce8 	bl	8000adc <__aeabi_dcmplt>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d163      	bne.n	800b1d8 <_dtoa_r+0x608>
 800b110:	4642      	mov	r2, r8
 800b112:	464b      	mov	r3, r9
 800b114:	4936      	ldr	r1, [pc, #216]	; (800b1f0 <_dtoa_r+0x620>)
 800b116:	2000      	movs	r0, #0
 800b118:	f7f5 f8b6 	bl	8000288 <__aeabi_dsub>
 800b11c:	4652      	mov	r2, sl
 800b11e:	465b      	mov	r3, fp
 800b120:	f7f5 fcdc 	bl	8000adc <__aeabi_dcmplt>
 800b124:	2800      	cmp	r0, #0
 800b126:	f040 80b5 	bne.w	800b294 <_dtoa_r+0x6c4>
 800b12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b12c:	429d      	cmp	r5, r3
 800b12e:	d081      	beq.n	800b034 <_dtoa_r+0x464>
 800b130:	4b30      	ldr	r3, [pc, #192]	; (800b1f4 <_dtoa_r+0x624>)
 800b132:	2200      	movs	r2, #0
 800b134:	4650      	mov	r0, sl
 800b136:	4659      	mov	r1, fp
 800b138:	f7f5 fa5e 	bl	80005f8 <__aeabi_dmul>
 800b13c:	4b2d      	ldr	r3, [pc, #180]	; (800b1f4 <_dtoa_r+0x624>)
 800b13e:	4682      	mov	sl, r0
 800b140:	468b      	mov	fp, r1
 800b142:	4640      	mov	r0, r8
 800b144:	4649      	mov	r1, r9
 800b146:	2200      	movs	r2, #0
 800b148:	f7f5 fa56 	bl	80005f8 <__aeabi_dmul>
 800b14c:	4680      	mov	r8, r0
 800b14e:	4689      	mov	r9, r1
 800b150:	e7c6      	b.n	800b0e0 <_dtoa_r+0x510>
 800b152:	4650      	mov	r0, sl
 800b154:	4659      	mov	r1, fp
 800b156:	f7f5 fa4f 	bl	80005f8 <__aeabi_dmul>
 800b15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b15c:	9d01      	ldr	r5, [sp, #4]
 800b15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b160:	4682      	mov	sl, r0
 800b162:	468b      	mov	fp, r1
 800b164:	4649      	mov	r1, r9
 800b166:	4640      	mov	r0, r8
 800b168:	f7f5 fcf6 	bl	8000b58 <__aeabi_d2iz>
 800b16c:	4606      	mov	r6, r0
 800b16e:	f7f5 f9d9 	bl	8000524 <__aeabi_i2d>
 800b172:	3630      	adds	r6, #48	; 0x30
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4640      	mov	r0, r8
 800b17a:	4649      	mov	r1, r9
 800b17c:	f7f5 f884 	bl	8000288 <__aeabi_dsub>
 800b180:	f805 6b01 	strb.w	r6, [r5], #1
 800b184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b186:	429d      	cmp	r5, r3
 800b188:	4680      	mov	r8, r0
 800b18a:	4689      	mov	r9, r1
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	d124      	bne.n	800b1dc <_dtoa_r+0x60c>
 800b192:	4b1b      	ldr	r3, [pc, #108]	; (800b200 <_dtoa_r+0x630>)
 800b194:	4650      	mov	r0, sl
 800b196:	4659      	mov	r1, fp
 800b198:	f7f5 f878 	bl	800028c <__adddf3>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	4649      	mov	r1, r9
 800b1a4:	f7f5 fcb8 	bl	8000b18 <__aeabi_dcmpgt>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d173      	bne.n	800b294 <_dtoa_r+0x6c4>
 800b1ac:	4652      	mov	r2, sl
 800b1ae:	465b      	mov	r3, fp
 800b1b0:	4913      	ldr	r1, [pc, #76]	; (800b200 <_dtoa_r+0x630>)
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	f7f5 f868 	bl	8000288 <__aeabi_dsub>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4640      	mov	r0, r8
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7f5 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	f43f af35 	beq.w	800b034 <_dtoa_r+0x464>
 800b1ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b1cc:	1e6b      	subs	r3, r5, #1
 800b1ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1d4:	2b30      	cmp	r3, #48	; 0x30
 800b1d6:	d0f8      	beq.n	800b1ca <_dtoa_r+0x5fa>
 800b1d8:	9700      	str	r7, [sp, #0]
 800b1da:	e049      	b.n	800b270 <_dtoa_r+0x6a0>
 800b1dc:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <_dtoa_r+0x624>)
 800b1de:	f7f5 fa0b 	bl	80005f8 <__aeabi_dmul>
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	4689      	mov	r9, r1
 800b1e6:	e7bd      	b.n	800b164 <_dtoa_r+0x594>
 800b1e8:	0800f688 	.word	0x0800f688
 800b1ec:	0800f660 	.word	0x0800f660
 800b1f0:	3ff00000 	.word	0x3ff00000
 800b1f4:	40240000 	.word	0x40240000
 800b1f8:	401c0000 	.word	0x401c0000
 800b1fc:	40140000 	.word	0x40140000
 800b200:	3fe00000 	.word	0x3fe00000
 800b204:	9d01      	ldr	r5, [sp, #4]
 800b206:	4656      	mov	r6, sl
 800b208:	465f      	mov	r7, fp
 800b20a:	4642      	mov	r2, r8
 800b20c:	464b      	mov	r3, r9
 800b20e:	4630      	mov	r0, r6
 800b210:	4639      	mov	r1, r7
 800b212:	f7f5 fb1b 	bl	800084c <__aeabi_ddiv>
 800b216:	f7f5 fc9f 	bl	8000b58 <__aeabi_d2iz>
 800b21a:	4682      	mov	sl, r0
 800b21c:	f7f5 f982 	bl	8000524 <__aeabi_i2d>
 800b220:	4642      	mov	r2, r8
 800b222:	464b      	mov	r3, r9
 800b224:	f7f5 f9e8 	bl	80005f8 <__aeabi_dmul>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4630      	mov	r0, r6
 800b22e:	4639      	mov	r1, r7
 800b230:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b234:	f7f5 f828 	bl	8000288 <__aeabi_dsub>
 800b238:	f805 6b01 	strb.w	r6, [r5], #1
 800b23c:	9e01      	ldr	r6, [sp, #4]
 800b23e:	9f03      	ldr	r7, [sp, #12]
 800b240:	1bae      	subs	r6, r5, r6
 800b242:	42b7      	cmp	r7, r6
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	d135      	bne.n	800b2b6 <_dtoa_r+0x6e6>
 800b24a:	f7f5 f81f 	bl	800028c <__adddf3>
 800b24e:	4642      	mov	r2, r8
 800b250:	464b      	mov	r3, r9
 800b252:	4606      	mov	r6, r0
 800b254:	460f      	mov	r7, r1
 800b256:	f7f5 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800b25a:	b9d0      	cbnz	r0, 800b292 <_dtoa_r+0x6c2>
 800b25c:	4642      	mov	r2, r8
 800b25e:	464b      	mov	r3, r9
 800b260:	4630      	mov	r0, r6
 800b262:	4639      	mov	r1, r7
 800b264:	f7f5 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 800b268:	b110      	cbz	r0, 800b270 <_dtoa_r+0x6a0>
 800b26a:	f01a 0f01 	tst.w	sl, #1
 800b26e:	d110      	bne.n	800b292 <_dtoa_r+0x6c2>
 800b270:	4620      	mov	r0, r4
 800b272:	ee18 1a10 	vmov	r1, s16
 800b276:	f000 fee3 	bl	800c040 <_Bfree>
 800b27a:	2300      	movs	r3, #0
 800b27c:	9800      	ldr	r0, [sp, #0]
 800b27e:	702b      	strb	r3, [r5, #0]
 800b280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b282:	3001      	adds	r0, #1
 800b284:	6018      	str	r0, [r3, #0]
 800b286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f43f acf1 	beq.w	800ac70 <_dtoa_r+0xa0>
 800b28e:	601d      	str	r5, [r3, #0]
 800b290:	e4ee      	b.n	800ac70 <_dtoa_r+0xa0>
 800b292:	9f00      	ldr	r7, [sp, #0]
 800b294:	462b      	mov	r3, r5
 800b296:	461d      	mov	r5, r3
 800b298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b29c:	2a39      	cmp	r2, #57	; 0x39
 800b29e:	d106      	bne.n	800b2ae <_dtoa_r+0x6de>
 800b2a0:	9a01      	ldr	r2, [sp, #4]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d1f7      	bne.n	800b296 <_dtoa_r+0x6c6>
 800b2a6:	9901      	ldr	r1, [sp, #4]
 800b2a8:	2230      	movs	r2, #48	; 0x30
 800b2aa:	3701      	adds	r7, #1
 800b2ac:	700a      	strb	r2, [r1, #0]
 800b2ae:	781a      	ldrb	r2, [r3, #0]
 800b2b0:	3201      	adds	r2, #1
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	e790      	b.n	800b1d8 <_dtoa_r+0x608>
 800b2b6:	4ba6      	ldr	r3, [pc, #664]	; (800b550 <_dtoa_r+0x980>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f7f5 f99d 	bl	80005f8 <__aeabi_dmul>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	460f      	mov	r7, r1
 800b2c6:	f7f5 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d09d      	beq.n	800b20a <_dtoa_r+0x63a>
 800b2ce:	e7cf      	b.n	800b270 <_dtoa_r+0x6a0>
 800b2d0:	9a08      	ldr	r2, [sp, #32]
 800b2d2:	2a00      	cmp	r2, #0
 800b2d4:	f000 80d7 	beq.w	800b486 <_dtoa_r+0x8b6>
 800b2d8:	9a06      	ldr	r2, [sp, #24]
 800b2da:	2a01      	cmp	r2, #1
 800b2dc:	f300 80ba 	bgt.w	800b454 <_dtoa_r+0x884>
 800b2e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2e2:	2a00      	cmp	r2, #0
 800b2e4:	f000 80b2 	beq.w	800b44c <_dtoa_r+0x87c>
 800b2e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2ec:	9e07      	ldr	r6, [sp, #28]
 800b2ee:	9d04      	ldr	r5, [sp, #16]
 800b2f0:	9a04      	ldr	r2, [sp, #16]
 800b2f2:	441a      	add	r2, r3
 800b2f4:	9204      	str	r2, [sp, #16]
 800b2f6:	9a05      	ldr	r2, [sp, #20]
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	441a      	add	r2, r3
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	9205      	str	r2, [sp, #20]
 800b300:	f000 ffa0 	bl	800c244 <__i2b>
 800b304:	4607      	mov	r7, r0
 800b306:	2d00      	cmp	r5, #0
 800b308:	dd0c      	ble.n	800b324 <_dtoa_r+0x754>
 800b30a:	9b05      	ldr	r3, [sp, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dd09      	ble.n	800b324 <_dtoa_r+0x754>
 800b310:	42ab      	cmp	r3, r5
 800b312:	9a04      	ldr	r2, [sp, #16]
 800b314:	bfa8      	it	ge
 800b316:	462b      	movge	r3, r5
 800b318:	1ad2      	subs	r2, r2, r3
 800b31a:	9204      	str	r2, [sp, #16]
 800b31c:	9a05      	ldr	r2, [sp, #20]
 800b31e:	1aed      	subs	r5, r5, r3
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	9305      	str	r3, [sp, #20]
 800b324:	9b07      	ldr	r3, [sp, #28]
 800b326:	b31b      	cbz	r3, 800b370 <_dtoa_r+0x7a0>
 800b328:	9b08      	ldr	r3, [sp, #32]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 80af 	beq.w	800b48e <_dtoa_r+0x8be>
 800b330:	2e00      	cmp	r6, #0
 800b332:	dd13      	ble.n	800b35c <_dtoa_r+0x78c>
 800b334:	4639      	mov	r1, r7
 800b336:	4632      	mov	r2, r6
 800b338:	4620      	mov	r0, r4
 800b33a:	f001 f843 	bl	800c3c4 <__pow5mult>
 800b33e:	ee18 2a10 	vmov	r2, s16
 800b342:	4601      	mov	r1, r0
 800b344:	4607      	mov	r7, r0
 800b346:	4620      	mov	r0, r4
 800b348:	f000 ff92 	bl	800c270 <__multiply>
 800b34c:	ee18 1a10 	vmov	r1, s16
 800b350:	4680      	mov	r8, r0
 800b352:	4620      	mov	r0, r4
 800b354:	f000 fe74 	bl	800c040 <_Bfree>
 800b358:	ee08 8a10 	vmov	s16, r8
 800b35c:	9b07      	ldr	r3, [sp, #28]
 800b35e:	1b9a      	subs	r2, r3, r6
 800b360:	d006      	beq.n	800b370 <_dtoa_r+0x7a0>
 800b362:	ee18 1a10 	vmov	r1, s16
 800b366:	4620      	mov	r0, r4
 800b368:	f001 f82c 	bl	800c3c4 <__pow5mult>
 800b36c:	ee08 0a10 	vmov	s16, r0
 800b370:	2101      	movs	r1, #1
 800b372:	4620      	mov	r0, r4
 800b374:	f000 ff66 	bl	800c244 <__i2b>
 800b378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	4606      	mov	r6, r0
 800b37e:	f340 8088 	ble.w	800b492 <_dtoa_r+0x8c2>
 800b382:	461a      	mov	r2, r3
 800b384:	4601      	mov	r1, r0
 800b386:	4620      	mov	r0, r4
 800b388:	f001 f81c 	bl	800c3c4 <__pow5mult>
 800b38c:	9b06      	ldr	r3, [sp, #24]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	4606      	mov	r6, r0
 800b392:	f340 8081 	ble.w	800b498 <_dtoa_r+0x8c8>
 800b396:	f04f 0800 	mov.w	r8, #0
 800b39a:	6933      	ldr	r3, [r6, #16]
 800b39c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3a0:	6918      	ldr	r0, [r3, #16]
 800b3a2:	f000 feff 	bl	800c1a4 <__hi0bits>
 800b3a6:	f1c0 0020 	rsb	r0, r0, #32
 800b3aa:	9b05      	ldr	r3, [sp, #20]
 800b3ac:	4418      	add	r0, r3
 800b3ae:	f010 001f 	ands.w	r0, r0, #31
 800b3b2:	f000 8092 	beq.w	800b4da <_dtoa_r+0x90a>
 800b3b6:	f1c0 0320 	rsb	r3, r0, #32
 800b3ba:	2b04      	cmp	r3, #4
 800b3bc:	f340 808a 	ble.w	800b4d4 <_dtoa_r+0x904>
 800b3c0:	f1c0 001c 	rsb	r0, r0, #28
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	4403      	add	r3, r0
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	9b05      	ldr	r3, [sp, #20]
 800b3cc:	4403      	add	r3, r0
 800b3ce:	4405      	add	r5, r0
 800b3d0:	9305      	str	r3, [sp, #20]
 800b3d2:	9b04      	ldr	r3, [sp, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd07      	ble.n	800b3e8 <_dtoa_r+0x818>
 800b3d8:	ee18 1a10 	vmov	r1, s16
 800b3dc:	461a      	mov	r2, r3
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f001 f84a 	bl	800c478 <__lshift>
 800b3e4:	ee08 0a10 	vmov	s16, r0
 800b3e8:	9b05      	ldr	r3, [sp, #20]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	dd05      	ble.n	800b3fa <_dtoa_r+0x82a>
 800b3ee:	4631      	mov	r1, r6
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f001 f840 	bl	800c478 <__lshift>
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d06e      	beq.n	800b4de <_dtoa_r+0x90e>
 800b400:	ee18 0a10 	vmov	r0, s16
 800b404:	4631      	mov	r1, r6
 800b406:	f001 f8a7 	bl	800c558 <__mcmp>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	da67      	bge.n	800b4de <_dtoa_r+0x90e>
 800b40e:	9b00      	ldr	r3, [sp, #0]
 800b410:	3b01      	subs	r3, #1
 800b412:	ee18 1a10 	vmov	r1, s16
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	220a      	movs	r2, #10
 800b41a:	2300      	movs	r3, #0
 800b41c:	4620      	mov	r0, r4
 800b41e:	f000 fe31 	bl	800c084 <__multadd>
 800b422:	9b08      	ldr	r3, [sp, #32]
 800b424:	ee08 0a10 	vmov	s16, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 81b1 	beq.w	800b790 <_dtoa_r+0xbc0>
 800b42e:	2300      	movs	r3, #0
 800b430:	4639      	mov	r1, r7
 800b432:	220a      	movs	r2, #10
 800b434:	4620      	mov	r0, r4
 800b436:	f000 fe25 	bl	800c084 <__multadd>
 800b43a:	9b02      	ldr	r3, [sp, #8]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	4607      	mov	r7, r0
 800b440:	f300 808e 	bgt.w	800b560 <_dtoa_r+0x990>
 800b444:	9b06      	ldr	r3, [sp, #24]
 800b446:	2b02      	cmp	r3, #2
 800b448:	dc51      	bgt.n	800b4ee <_dtoa_r+0x91e>
 800b44a:	e089      	b.n	800b560 <_dtoa_r+0x990>
 800b44c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b44e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b452:	e74b      	b.n	800b2ec <_dtoa_r+0x71c>
 800b454:	9b03      	ldr	r3, [sp, #12]
 800b456:	1e5e      	subs	r6, r3, #1
 800b458:	9b07      	ldr	r3, [sp, #28]
 800b45a:	42b3      	cmp	r3, r6
 800b45c:	bfbf      	itttt	lt
 800b45e:	9b07      	ldrlt	r3, [sp, #28]
 800b460:	9607      	strlt	r6, [sp, #28]
 800b462:	1af2      	sublt	r2, r6, r3
 800b464:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b466:	bfb6      	itet	lt
 800b468:	189b      	addlt	r3, r3, r2
 800b46a:	1b9e      	subge	r6, r3, r6
 800b46c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b46e:	9b03      	ldr	r3, [sp, #12]
 800b470:	bfb8      	it	lt
 800b472:	2600      	movlt	r6, #0
 800b474:	2b00      	cmp	r3, #0
 800b476:	bfb7      	itett	lt
 800b478:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b47c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b480:	1a9d      	sublt	r5, r3, r2
 800b482:	2300      	movlt	r3, #0
 800b484:	e734      	b.n	800b2f0 <_dtoa_r+0x720>
 800b486:	9e07      	ldr	r6, [sp, #28]
 800b488:	9d04      	ldr	r5, [sp, #16]
 800b48a:	9f08      	ldr	r7, [sp, #32]
 800b48c:	e73b      	b.n	800b306 <_dtoa_r+0x736>
 800b48e:	9a07      	ldr	r2, [sp, #28]
 800b490:	e767      	b.n	800b362 <_dtoa_r+0x792>
 800b492:	9b06      	ldr	r3, [sp, #24]
 800b494:	2b01      	cmp	r3, #1
 800b496:	dc18      	bgt.n	800b4ca <_dtoa_r+0x8fa>
 800b498:	f1ba 0f00 	cmp.w	sl, #0
 800b49c:	d115      	bne.n	800b4ca <_dtoa_r+0x8fa>
 800b49e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4a2:	b993      	cbnz	r3, 800b4ca <_dtoa_r+0x8fa>
 800b4a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4a8:	0d1b      	lsrs	r3, r3, #20
 800b4aa:	051b      	lsls	r3, r3, #20
 800b4ac:	b183      	cbz	r3, 800b4d0 <_dtoa_r+0x900>
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	9b05      	ldr	r3, [sp, #20]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	9305      	str	r3, [sp, #20]
 800b4ba:	f04f 0801 	mov.w	r8, #1
 800b4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f47f af6a 	bne.w	800b39a <_dtoa_r+0x7ca>
 800b4c6:	2001      	movs	r0, #1
 800b4c8:	e76f      	b.n	800b3aa <_dtoa_r+0x7da>
 800b4ca:	f04f 0800 	mov.w	r8, #0
 800b4ce:	e7f6      	b.n	800b4be <_dtoa_r+0x8ee>
 800b4d0:	4698      	mov	r8, r3
 800b4d2:	e7f4      	b.n	800b4be <_dtoa_r+0x8ee>
 800b4d4:	f43f af7d 	beq.w	800b3d2 <_dtoa_r+0x802>
 800b4d8:	4618      	mov	r0, r3
 800b4da:	301c      	adds	r0, #28
 800b4dc:	e772      	b.n	800b3c4 <_dtoa_r+0x7f4>
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	dc37      	bgt.n	800b554 <_dtoa_r+0x984>
 800b4e4:	9b06      	ldr	r3, [sp, #24]
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	dd34      	ble.n	800b554 <_dtoa_r+0x984>
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	9302      	str	r3, [sp, #8]
 800b4ee:	9b02      	ldr	r3, [sp, #8]
 800b4f0:	b96b      	cbnz	r3, 800b50e <_dtoa_r+0x93e>
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	2205      	movs	r2, #5
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 fdc4 	bl	800c084 <__multadd>
 800b4fc:	4601      	mov	r1, r0
 800b4fe:	4606      	mov	r6, r0
 800b500:	ee18 0a10 	vmov	r0, s16
 800b504:	f001 f828 	bl	800c558 <__mcmp>
 800b508:	2800      	cmp	r0, #0
 800b50a:	f73f adbb 	bgt.w	800b084 <_dtoa_r+0x4b4>
 800b50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b510:	9d01      	ldr	r5, [sp, #4]
 800b512:	43db      	mvns	r3, r3
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	f04f 0800 	mov.w	r8, #0
 800b51a:	4631      	mov	r1, r6
 800b51c:	4620      	mov	r0, r4
 800b51e:	f000 fd8f 	bl	800c040 <_Bfree>
 800b522:	2f00      	cmp	r7, #0
 800b524:	f43f aea4 	beq.w	800b270 <_dtoa_r+0x6a0>
 800b528:	f1b8 0f00 	cmp.w	r8, #0
 800b52c:	d005      	beq.n	800b53a <_dtoa_r+0x96a>
 800b52e:	45b8      	cmp	r8, r7
 800b530:	d003      	beq.n	800b53a <_dtoa_r+0x96a>
 800b532:	4641      	mov	r1, r8
 800b534:	4620      	mov	r0, r4
 800b536:	f000 fd83 	bl	800c040 <_Bfree>
 800b53a:	4639      	mov	r1, r7
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fd7f 	bl	800c040 <_Bfree>
 800b542:	e695      	b.n	800b270 <_dtoa_r+0x6a0>
 800b544:	2600      	movs	r6, #0
 800b546:	4637      	mov	r7, r6
 800b548:	e7e1      	b.n	800b50e <_dtoa_r+0x93e>
 800b54a:	9700      	str	r7, [sp, #0]
 800b54c:	4637      	mov	r7, r6
 800b54e:	e599      	b.n	800b084 <_dtoa_r+0x4b4>
 800b550:	40240000 	.word	0x40240000
 800b554:	9b08      	ldr	r3, [sp, #32]
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 80ca 	beq.w	800b6f0 <_dtoa_r+0xb20>
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	9302      	str	r3, [sp, #8]
 800b560:	2d00      	cmp	r5, #0
 800b562:	dd05      	ble.n	800b570 <_dtoa_r+0x9a0>
 800b564:	4639      	mov	r1, r7
 800b566:	462a      	mov	r2, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 ff85 	bl	800c478 <__lshift>
 800b56e:	4607      	mov	r7, r0
 800b570:	f1b8 0f00 	cmp.w	r8, #0
 800b574:	d05b      	beq.n	800b62e <_dtoa_r+0xa5e>
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fd21 	bl	800bfc0 <_Balloc>
 800b57e:	4605      	mov	r5, r0
 800b580:	b928      	cbnz	r0, 800b58e <_dtoa_r+0x9be>
 800b582:	4b87      	ldr	r3, [pc, #540]	; (800b7a0 <_dtoa_r+0xbd0>)
 800b584:	4602      	mov	r2, r0
 800b586:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b58a:	f7ff bb3b 	b.w	800ac04 <_dtoa_r+0x34>
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	3202      	adds	r2, #2
 800b592:	0092      	lsls	r2, r2, #2
 800b594:	f107 010c 	add.w	r1, r7, #12
 800b598:	300c      	adds	r0, #12
 800b59a:	f7fd f92d 	bl	80087f8 <memcpy>
 800b59e:	2201      	movs	r2, #1
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 ff68 	bl	800c478 <__lshift>
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	f103 0901 	add.w	r9, r3, #1
 800b5ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	9305      	str	r3, [sp, #20]
 800b5b6:	f00a 0301 	and.w	r3, sl, #1
 800b5ba:	46b8      	mov	r8, r7
 800b5bc:	9304      	str	r3, [sp, #16]
 800b5be:	4607      	mov	r7, r0
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	ee18 0a10 	vmov	r0, s16
 800b5c6:	f7ff fa75 	bl	800aab4 <quorem>
 800b5ca:	4641      	mov	r1, r8
 800b5cc:	9002      	str	r0, [sp, #8]
 800b5ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b5d2:	ee18 0a10 	vmov	r0, s16
 800b5d6:	f000 ffbf 	bl	800c558 <__mcmp>
 800b5da:	463a      	mov	r2, r7
 800b5dc:	9003      	str	r0, [sp, #12]
 800b5de:	4631      	mov	r1, r6
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 ffd5 	bl	800c590 <__mdiff>
 800b5e6:	68c2      	ldr	r2, [r0, #12]
 800b5e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b5ec:	4605      	mov	r5, r0
 800b5ee:	bb02      	cbnz	r2, 800b632 <_dtoa_r+0xa62>
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	ee18 0a10 	vmov	r0, s16
 800b5f6:	f000 ffaf 	bl	800c558 <__mcmp>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	4620      	mov	r0, r4
 800b600:	9207      	str	r2, [sp, #28]
 800b602:	f000 fd1d 	bl	800c040 <_Bfree>
 800b606:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b60a:	ea43 0102 	orr.w	r1, r3, r2
 800b60e:	9b04      	ldr	r3, [sp, #16]
 800b610:	430b      	orrs	r3, r1
 800b612:	464d      	mov	r5, r9
 800b614:	d10f      	bne.n	800b636 <_dtoa_r+0xa66>
 800b616:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b61a:	d02a      	beq.n	800b672 <_dtoa_r+0xaa2>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	dd02      	ble.n	800b628 <_dtoa_r+0xa58>
 800b622:	9b02      	ldr	r3, [sp, #8]
 800b624:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b628:	f88b a000 	strb.w	sl, [fp]
 800b62c:	e775      	b.n	800b51a <_dtoa_r+0x94a>
 800b62e:	4638      	mov	r0, r7
 800b630:	e7ba      	b.n	800b5a8 <_dtoa_r+0x9d8>
 800b632:	2201      	movs	r2, #1
 800b634:	e7e2      	b.n	800b5fc <_dtoa_r+0xa2c>
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	db04      	blt.n	800b646 <_dtoa_r+0xa76>
 800b63c:	9906      	ldr	r1, [sp, #24]
 800b63e:	430b      	orrs	r3, r1
 800b640:	9904      	ldr	r1, [sp, #16]
 800b642:	430b      	orrs	r3, r1
 800b644:	d122      	bne.n	800b68c <_dtoa_r+0xabc>
 800b646:	2a00      	cmp	r2, #0
 800b648:	ddee      	ble.n	800b628 <_dtoa_r+0xa58>
 800b64a:	ee18 1a10 	vmov	r1, s16
 800b64e:	2201      	movs	r2, #1
 800b650:	4620      	mov	r0, r4
 800b652:	f000 ff11 	bl	800c478 <__lshift>
 800b656:	4631      	mov	r1, r6
 800b658:	ee08 0a10 	vmov	s16, r0
 800b65c:	f000 ff7c 	bl	800c558 <__mcmp>
 800b660:	2800      	cmp	r0, #0
 800b662:	dc03      	bgt.n	800b66c <_dtoa_r+0xa9c>
 800b664:	d1e0      	bne.n	800b628 <_dtoa_r+0xa58>
 800b666:	f01a 0f01 	tst.w	sl, #1
 800b66a:	d0dd      	beq.n	800b628 <_dtoa_r+0xa58>
 800b66c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b670:	d1d7      	bne.n	800b622 <_dtoa_r+0xa52>
 800b672:	2339      	movs	r3, #57	; 0x39
 800b674:	f88b 3000 	strb.w	r3, [fp]
 800b678:	462b      	mov	r3, r5
 800b67a:	461d      	mov	r5, r3
 800b67c:	3b01      	subs	r3, #1
 800b67e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b682:	2a39      	cmp	r2, #57	; 0x39
 800b684:	d071      	beq.n	800b76a <_dtoa_r+0xb9a>
 800b686:	3201      	adds	r2, #1
 800b688:	701a      	strb	r2, [r3, #0]
 800b68a:	e746      	b.n	800b51a <_dtoa_r+0x94a>
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	dd07      	ble.n	800b6a0 <_dtoa_r+0xad0>
 800b690:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b694:	d0ed      	beq.n	800b672 <_dtoa_r+0xaa2>
 800b696:	f10a 0301 	add.w	r3, sl, #1
 800b69a:	f88b 3000 	strb.w	r3, [fp]
 800b69e:	e73c      	b.n	800b51a <_dtoa_r+0x94a>
 800b6a0:	9b05      	ldr	r3, [sp, #20]
 800b6a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b6a6:	4599      	cmp	r9, r3
 800b6a8:	d047      	beq.n	800b73a <_dtoa_r+0xb6a>
 800b6aa:	ee18 1a10 	vmov	r1, s16
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	220a      	movs	r2, #10
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 fce6 	bl	800c084 <__multadd>
 800b6b8:	45b8      	cmp	r8, r7
 800b6ba:	ee08 0a10 	vmov	s16, r0
 800b6be:	f04f 0300 	mov.w	r3, #0
 800b6c2:	f04f 020a 	mov.w	r2, #10
 800b6c6:	4641      	mov	r1, r8
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	d106      	bne.n	800b6da <_dtoa_r+0xb0a>
 800b6cc:	f000 fcda 	bl	800c084 <__multadd>
 800b6d0:	4680      	mov	r8, r0
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	f109 0901 	add.w	r9, r9, #1
 800b6d8:	e772      	b.n	800b5c0 <_dtoa_r+0x9f0>
 800b6da:	f000 fcd3 	bl	800c084 <__multadd>
 800b6de:	4639      	mov	r1, r7
 800b6e0:	4680      	mov	r8, r0
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	220a      	movs	r2, #10
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 fccc 	bl	800c084 <__multadd>
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	e7f1      	b.n	800b6d4 <_dtoa_r+0xb04>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	9302      	str	r3, [sp, #8]
 800b6f4:	9d01      	ldr	r5, [sp, #4]
 800b6f6:	ee18 0a10 	vmov	r0, s16
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	f7ff f9da 	bl	800aab4 <quorem>
 800b700:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	f805 ab01 	strb.w	sl, [r5], #1
 800b70a:	1aea      	subs	r2, r5, r3
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	4293      	cmp	r3, r2
 800b710:	dd09      	ble.n	800b726 <_dtoa_r+0xb56>
 800b712:	ee18 1a10 	vmov	r1, s16
 800b716:	2300      	movs	r3, #0
 800b718:	220a      	movs	r2, #10
 800b71a:	4620      	mov	r0, r4
 800b71c:	f000 fcb2 	bl	800c084 <__multadd>
 800b720:	ee08 0a10 	vmov	s16, r0
 800b724:	e7e7      	b.n	800b6f6 <_dtoa_r+0xb26>
 800b726:	9b02      	ldr	r3, [sp, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	bfc8      	it	gt
 800b72c:	461d      	movgt	r5, r3
 800b72e:	9b01      	ldr	r3, [sp, #4]
 800b730:	bfd8      	it	le
 800b732:	2501      	movle	r5, #1
 800b734:	441d      	add	r5, r3
 800b736:	f04f 0800 	mov.w	r8, #0
 800b73a:	ee18 1a10 	vmov	r1, s16
 800b73e:	2201      	movs	r2, #1
 800b740:	4620      	mov	r0, r4
 800b742:	f000 fe99 	bl	800c478 <__lshift>
 800b746:	4631      	mov	r1, r6
 800b748:	ee08 0a10 	vmov	s16, r0
 800b74c:	f000 ff04 	bl	800c558 <__mcmp>
 800b750:	2800      	cmp	r0, #0
 800b752:	dc91      	bgt.n	800b678 <_dtoa_r+0xaa8>
 800b754:	d102      	bne.n	800b75c <_dtoa_r+0xb8c>
 800b756:	f01a 0f01 	tst.w	sl, #1
 800b75a:	d18d      	bne.n	800b678 <_dtoa_r+0xaa8>
 800b75c:	462b      	mov	r3, r5
 800b75e:	461d      	mov	r5, r3
 800b760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b764:	2a30      	cmp	r2, #48	; 0x30
 800b766:	d0fa      	beq.n	800b75e <_dtoa_r+0xb8e>
 800b768:	e6d7      	b.n	800b51a <_dtoa_r+0x94a>
 800b76a:	9a01      	ldr	r2, [sp, #4]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d184      	bne.n	800b67a <_dtoa_r+0xaaa>
 800b770:	9b00      	ldr	r3, [sp, #0]
 800b772:	3301      	adds	r3, #1
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	2331      	movs	r3, #49	; 0x31
 800b778:	7013      	strb	r3, [r2, #0]
 800b77a:	e6ce      	b.n	800b51a <_dtoa_r+0x94a>
 800b77c:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <_dtoa_r+0xbd4>)
 800b77e:	f7ff ba95 	b.w	800acac <_dtoa_r+0xdc>
 800b782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b784:	2b00      	cmp	r3, #0
 800b786:	f47f aa6e 	bne.w	800ac66 <_dtoa_r+0x96>
 800b78a:	4b07      	ldr	r3, [pc, #28]	; (800b7a8 <_dtoa_r+0xbd8>)
 800b78c:	f7ff ba8e 	b.w	800acac <_dtoa_r+0xdc>
 800b790:	9b02      	ldr	r3, [sp, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	dcae      	bgt.n	800b6f4 <_dtoa_r+0xb24>
 800b796:	9b06      	ldr	r3, [sp, #24]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	f73f aea8 	bgt.w	800b4ee <_dtoa_r+0x91e>
 800b79e:	e7a9      	b.n	800b6f4 <_dtoa_r+0xb24>
 800b7a0:	0800f577 	.word	0x0800f577
 800b7a4:	0800f479 	.word	0x0800f479
 800b7a8:	0800f4f8 	.word	0x0800f4f8

0800b7ac <rshift>:
 800b7ac:	6903      	ldr	r3, [r0, #16]
 800b7ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7ba:	f100 0414 	add.w	r4, r0, #20
 800b7be:	dd45      	ble.n	800b84c <rshift+0xa0>
 800b7c0:	f011 011f 	ands.w	r1, r1, #31
 800b7c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7cc:	d10c      	bne.n	800b7e8 <rshift+0x3c>
 800b7ce:	f100 0710 	add.w	r7, r0, #16
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	42b1      	cmp	r1, r6
 800b7d6:	d334      	bcc.n	800b842 <rshift+0x96>
 800b7d8:	1a9b      	subs	r3, r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	1eea      	subs	r2, r5, #3
 800b7de:	4296      	cmp	r6, r2
 800b7e0:	bf38      	it	cc
 800b7e2:	2300      	movcc	r3, #0
 800b7e4:	4423      	add	r3, r4
 800b7e6:	e015      	b.n	800b814 <rshift+0x68>
 800b7e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b7ec:	f1c1 0820 	rsb	r8, r1, #32
 800b7f0:	40cf      	lsrs	r7, r1
 800b7f2:	f105 0e04 	add.w	lr, r5, #4
 800b7f6:	46a1      	mov	r9, r4
 800b7f8:	4576      	cmp	r6, lr
 800b7fa:	46f4      	mov	ip, lr
 800b7fc:	d815      	bhi.n	800b82a <rshift+0x7e>
 800b7fe:	1a9a      	subs	r2, r3, r2
 800b800:	0092      	lsls	r2, r2, #2
 800b802:	3a04      	subs	r2, #4
 800b804:	3501      	adds	r5, #1
 800b806:	42ae      	cmp	r6, r5
 800b808:	bf38      	it	cc
 800b80a:	2200      	movcc	r2, #0
 800b80c:	18a3      	adds	r3, r4, r2
 800b80e:	50a7      	str	r7, [r4, r2]
 800b810:	b107      	cbz	r7, 800b814 <rshift+0x68>
 800b812:	3304      	adds	r3, #4
 800b814:	1b1a      	subs	r2, r3, r4
 800b816:	42a3      	cmp	r3, r4
 800b818:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b81c:	bf08      	it	eq
 800b81e:	2300      	moveq	r3, #0
 800b820:	6102      	str	r2, [r0, #16]
 800b822:	bf08      	it	eq
 800b824:	6143      	streq	r3, [r0, #20]
 800b826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b82a:	f8dc c000 	ldr.w	ip, [ip]
 800b82e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b832:	ea4c 0707 	orr.w	r7, ip, r7
 800b836:	f849 7b04 	str.w	r7, [r9], #4
 800b83a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b83e:	40cf      	lsrs	r7, r1
 800b840:	e7da      	b.n	800b7f8 <rshift+0x4c>
 800b842:	f851 cb04 	ldr.w	ip, [r1], #4
 800b846:	f847 cf04 	str.w	ip, [r7, #4]!
 800b84a:	e7c3      	b.n	800b7d4 <rshift+0x28>
 800b84c:	4623      	mov	r3, r4
 800b84e:	e7e1      	b.n	800b814 <rshift+0x68>

0800b850 <__hexdig_fun>:
 800b850:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b854:	2b09      	cmp	r3, #9
 800b856:	d802      	bhi.n	800b85e <__hexdig_fun+0xe>
 800b858:	3820      	subs	r0, #32
 800b85a:	b2c0      	uxtb	r0, r0
 800b85c:	4770      	bx	lr
 800b85e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b862:	2b05      	cmp	r3, #5
 800b864:	d801      	bhi.n	800b86a <__hexdig_fun+0x1a>
 800b866:	3847      	subs	r0, #71	; 0x47
 800b868:	e7f7      	b.n	800b85a <__hexdig_fun+0xa>
 800b86a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b86e:	2b05      	cmp	r3, #5
 800b870:	d801      	bhi.n	800b876 <__hexdig_fun+0x26>
 800b872:	3827      	subs	r0, #39	; 0x27
 800b874:	e7f1      	b.n	800b85a <__hexdig_fun+0xa>
 800b876:	2000      	movs	r0, #0
 800b878:	4770      	bx	lr
	...

0800b87c <__gethex>:
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	ed2d 8b02 	vpush	{d8}
 800b884:	b089      	sub	sp, #36	; 0x24
 800b886:	ee08 0a10 	vmov	s16, r0
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	4bb4      	ldr	r3, [pc, #720]	; (800bb60 <__gethex+0x2e4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	9301      	str	r3, [sp, #4]
 800b892:	4618      	mov	r0, r3
 800b894:	468b      	mov	fp, r1
 800b896:	4690      	mov	r8, r2
 800b898:	f7f4 fc9a 	bl	80001d0 <strlen>
 800b89c:	9b01      	ldr	r3, [sp, #4]
 800b89e:	f8db 2000 	ldr.w	r2, [fp]
 800b8a2:	4403      	add	r3, r0
 800b8a4:	4682      	mov	sl, r0
 800b8a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b8aa:	9305      	str	r3, [sp, #20]
 800b8ac:	1c93      	adds	r3, r2, #2
 800b8ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b8b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b8b6:	32fe      	adds	r2, #254	; 0xfe
 800b8b8:	18d1      	adds	r1, r2, r3
 800b8ba:	461f      	mov	r7, r3
 800b8bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8c0:	9100      	str	r1, [sp, #0]
 800b8c2:	2830      	cmp	r0, #48	; 0x30
 800b8c4:	d0f8      	beq.n	800b8b8 <__gethex+0x3c>
 800b8c6:	f7ff ffc3 	bl	800b850 <__hexdig_fun>
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d13a      	bne.n	800b946 <__gethex+0xca>
 800b8d0:	9901      	ldr	r1, [sp, #4]
 800b8d2:	4652      	mov	r2, sl
 800b8d4:	4638      	mov	r0, r7
 800b8d6:	f001 fa1f 	bl	800cd18 <strncmp>
 800b8da:	4605      	mov	r5, r0
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d168      	bne.n	800b9b2 <__gethex+0x136>
 800b8e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b8e4:	eb07 060a 	add.w	r6, r7, sl
 800b8e8:	f7ff ffb2 	bl	800b850 <__hexdig_fun>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d062      	beq.n	800b9b6 <__gethex+0x13a>
 800b8f0:	4633      	mov	r3, r6
 800b8f2:	7818      	ldrb	r0, [r3, #0]
 800b8f4:	2830      	cmp	r0, #48	; 0x30
 800b8f6:	461f      	mov	r7, r3
 800b8f8:	f103 0301 	add.w	r3, r3, #1
 800b8fc:	d0f9      	beq.n	800b8f2 <__gethex+0x76>
 800b8fe:	f7ff ffa7 	bl	800b850 <__hexdig_fun>
 800b902:	2301      	movs	r3, #1
 800b904:	fab0 f480 	clz	r4, r0
 800b908:	0964      	lsrs	r4, r4, #5
 800b90a:	4635      	mov	r5, r6
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	463a      	mov	r2, r7
 800b910:	4616      	mov	r6, r2
 800b912:	3201      	adds	r2, #1
 800b914:	7830      	ldrb	r0, [r6, #0]
 800b916:	f7ff ff9b 	bl	800b850 <__hexdig_fun>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d1f8      	bne.n	800b910 <__gethex+0x94>
 800b91e:	9901      	ldr	r1, [sp, #4]
 800b920:	4652      	mov	r2, sl
 800b922:	4630      	mov	r0, r6
 800b924:	f001 f9f8 	bl	800cd18 <strncmp>
 800b928:	b980      	cbnz	r0, 800b94c <__gethex+0xd0>
 800b92a:	b94d      	cbnz	r5, 800b940 <__gethex+0xc4>
 800b92c:	eb06 050a 	add.w	r5, r6, sl
 800b930:	462a      	mov	r2, r5
 800b932:	4616      	mov	r6, r2
 800b934:	3201      	adds	r2, #1
 800b936:	7830      	ldrb	r0, [r6, #0]
 800b938:	f7ff ff8a 	bl	800b850 <__hexdig_fun>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d1f8      	bne.n	800b932 <__gethex+0xb6>
 800b940:	1bad      	subs	r5, r5, r6
 800b942:	00ad      	lsls	r5, r5, #2
 800b944:	e004      	b.n	800b950 <__gethex+0xd4>
 800b946:	2400      	movs	r4, #0
 800b948:	4625      	mov	r5, r4
 800b94a:	e7e0      	b.n	800b90e <__gethex+0x92>
 800b94c:	2d00      	cmp	r5, #0
 800b94e:	d1f7      	bne.n	800b940 <__gethex+0xc4>
 800b950:	7833      	ldrb	r3, [r6, #0]
 800b952:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b956:	2b50      	cmp	r3, #80	; 0x50
 800b958:	d13b      	bne.n	800b9d2 <__gethex+0x156>
 800b95a:	7873      	ldrb	r3, [r6, #1]
 800b95c:	2b2b      	cmp	r3, #43	; 0x2b
 800b95e:	d02c      	beq.n	800b9ba <__gethex+0x13e>
 800b960:	2b2d      	cmp	r3, #45	; 0x2d
 800b962:	d02e      	beq.n	800b9c2 <__gethex+0x146>
 800b964:	1c71      	adds	r1, r6, #1
 800b966:	f04f 0900 	mov.w	r9, #0
 800b96a:	7808      	ldrb	r0, [r1, #0]
 800b96c:	f7ff ff70 	bl	800b850 <__hexdig_fun>
 800b970:	1e43      	subs	r3, r0, #1
 800b972:	b2db      	uxtb	r3, r3
 800b974:	2b18      	cmp	r3, #24
 800b976:	d82c      	bhi.n	800b9d2 <__gethex+0x156>
 800b978:	f1a0 0210 	sub.w	r2, r0, #16
 800b97c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b980:	f7ff ff66 	bl	800b850 <__hexdig_fun>
 800b984:	1e43      	subs	r3, r0, #1
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b18      	cmp	r3, #24
 800b98a:	d91d      	bls.n	800b9c8 <__gethex+0x14c>
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	d000      	beq.n	800b994 <__gethex+0x118>
 800b992:	4252      	negs	r2, r2
 800b994:	4415      	add	r5, r2
 800b996:	f8cb 1000 	str.w	r1, [fp]
 800b99a:	b1e4      	cbz	r4, 800b9d6 <__gethex+0x15a>
 800b99c:	9b00      	ldr	r3, [sp, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	bf14      	ite	ne
 800b9a2:	2700      	movne	r7, #0
 800b9a4:	2706      	moveq	r7, #6
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	b009      	add	sp, #36	; 0x24
 800b9aa:	ecbd 8b02 	vpop	{d8}
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	463e      	mov	r6, r7
 800b9b4:	4625      	mov	r5, r4
 800b9b6:	2401      	movs	r4, #1
 800b9b8:	e7ca      	b.n	800b950 <__gethex+0xd4>
 800b9ba:	f04f 0900 	mov.w	r9, #0
 800b9be:	1cb1      	adds	r1, r6, #2
 800b9c0:	e7d3      	b.n	800b96a <__gethex+0xee>
 800b9c2:	f04f 0901 	mov.w	r9, #1
 800b9c6:	e7fa      	b.n	800b9be <__gethex+0x142>
 800b9c8:	230a      	movs	r3, #10
 800b9ca:	fb03 0202 	mla	r2, r3, r2, r0
 800b9ce:	3a10      	subs	r2, #16
 800b9d0:	e7d4      	b.n	800b97c <__gethex+0x100>
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	e7df      	b.n	800b996 <__gethex+0x11a>
 800b9d6:	1bf3      	subs	r3, r6, r7
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	4621      	mov	r1, r4
 800b9dc:	2b07      	cmp	r3, #7
 800b9de:	dc0b      	bgt.n	800b9f8 <__gethex+0x17c>
 800b9e0:	ee18 0a10 	vmov	r0, s16
 800b9e4:	f000 faec 	bl	800bfc0 <_Balloc>
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	b940      	cbnz	r0, 800b9fe <__gethex+0x182>
 800b9ec:	4b5d      	ldr	r3, [pc, #372]	; (800bb64 <__gethex+0x2e8>)
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	21de      	movs	r1, #222	; 0xde
 800b9f2:	485d      	ldr	r0, [pc, #372]	; (800bb68 <__gethex+0x2ec>)
 800b9f4:	f7fc fc12 	bl	800821c <__assert_func>
 800b9f8:	3101      	adds	r1, #1
 800b9fa:	105b      	asrs	r3, r3, #1
 800b9fc:	e7ee      	b.n	800b9dc <__gethex+0x160>
 800b9fe:	f100 0914 	add.w	r9, r0, #20
 800ba02:	f04f 0b00 	mov.w	fp, #0
 800ba06:	f1ca 0301 	rsb	r3, sl, #1
 800ba0a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba0e:	f8cd b000 	str.w	fp, [sp]
 800ba12:	9306      	str	r3, [sp, #24]
 800ba14:	42b7      	cmp	r7, r6
 800ba16:	d340      	bcc.n	800ba9a <__gethex+0x21e>
 800ba18:	9802      	ldr	r0, [sp, #8]
 800ba1a:	9b00      	ldr	r3, [sp, #0]
 800ba1c:	f840 3b04 	str.w	r3, [r0], #4
 800ba20:	eba0 0009 	sub.w	r0, r0, r9
 800ba24:	1080      	asrs	r0, r0, #2
 800ba26:	0146      	lsls	r6, r0, #5
 800ba28:	6120      	str	r0, [r4, #16]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fbba 	bl	800c1a4 <__hi0bits>
 800ba30:	1a30      	subs	r0, r6, r0
 800ba32:	f8d8 6000 	ldr.w	r6, [r8]
 800ba36:	42b0      	cmp	r0, r6
 800ba38:	dd63      	ble.n	800bb02 <__gethex+0x286>
 800ba3a:	1b87      	subs	r7, r0, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 ff5e 	bl	800c900 <__any_on>
 800ba44:	4682      	mov	sl, r0
 800ba46:	b1a8      	cbz	r0, 800ba74 <__gethex+0x1f8>
 800ba48:	1e7b      	subs	r3, r7, #1
 800ba4a:	1159      	asrs	r1, r3, #5
 800ba4c:	f003 021f 	and.w	r2, r3, #31
 800ba50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba54:	f04f 0a01 	mov.w	sl, #1
 800ba58:	fa0a f202 	lsl.w	r2, sl, r2
 800ba5c:	420a      	tst	r2, r1
 800ba5e:	d009      	beq.n	800ba74 <__gethex+0x1f8>
 800ba60:	4553      	cmp	r3, sl
 800ba62:	dd05      	ble.n	800ba70 <__gethex+0x1f4>
 800ba64:	1eb9      	subs	r1, r7, #2
 800ba66:	4620      	mov	r0, r4
 800ba68:	f000 ff4a 	bl	800c900 <__any_on>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d145      	bne.n	800bafc <__gethex+0x280>
 800ba70:	f04f 0a02 	mov.w	sl, #2
 800ba74:	4639      	mov	r1, r7
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7ff fe98 	bl	800b7ac <rshift>
 800ba7c:	443d      	add	r5, r7
 800ba7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba82:	42ab      	cmp	r3, r5
 800ba84:	da4c      	bge.n	800bb20 <__gethex+0x2a4>
 800ba86:	ee18 0a10 	vmov	r0, s16
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	f000 fad8 	bl	800c040 <_Bfree>
 800ba90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba92:	2300      	movs	r3, #0
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	27a3      	movs	r7, #163	; 0xa3
 800ba98:	e785      	b.n	800b9a6 <__gethex+0x12a>
 800ba9a:	1e73      	subs	r3, r6, #1
 800ba9c:	9a05      	ldr	r2, [sp, #20]
 800ba9e:	9303      	str	r3, [sp, #12]
 800baa0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d019      	beq.n	800badc <__gethex+0x260>
 800baa8:	f1bb 0f20 	cmp.w	fp, #32
 800baac:	d107      	bne.n	800babe <__gethex+0x242>
 800baae:	9b02      	ldr	r3, [sp, #8]
 800bab0:	9a00      	ldr	r2, [sp, #0]
 800bab2:	f843 2b04 	str.w	r2, [r3], #4
 800bab6:	9302      	str	r3, [sp, #8]
 800bab8:	2300      	movs	r3, #0
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	469b      	mov	fp, r3
 800babe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bac2:	f7ff fec5 	bl	800b850 <__hexdig_fun>
 800bac6:	9b00      	ldr	r3, [sp, #0]
 800bac8:	f000 000f 	and.w	r0, r0, #15
 800bacc:	fa00 f00b 	lsl.w	r0, r0, fp
 800bad0:	4303      	orrs	r3, r0
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	f10b 0b04 	add.w	fp, fp, #4
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	e00d      	b.n	800baf8 <__gethex+0x27c>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	9a06      	ldr	r2, [sp, #24]
 800bae0:	4413      	add	r3, r2
 800bae2:	42bb      	cmp	r3, r7
 800bae4:	d3e0      	bcc.n	800baa8 <__gethex+0x22c>
 800bae6:	4618      	mov	r0, r3
 800bae8:	9901      	ldr	r1, [sp, #4]
 800baea:	9307      	str	r3, [sp, #28]
 800baec:	4652      	mov	r2, sl
 800baee:	f001 f913 	bl	800cd18 <strncmp>
 800baf2:	9b07      	ldr	r3, [sp, #28]
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d1d7      	bne.n	800baa8 <__gethex+0x22c>
 800baf8:	461e      	mov	r6, r3
 800bafa:	e78b      	b.n	800ba14 <__gethex+0x198>
 800bafc:	f04f 0a03 	mov.w	sl, #3
 800bb00:	e7b8      	b.n	800ba74 <__gethex+0x1f8>
 800bb02:	da0a      	bge.n	800bb1a <__gethex+0x29e>
 800bb04:	1a37      	subs	r7, r6, r0
 800bb06:	4621      	mov	r1, r4
 800bb08:	ee18 0a10 	vmov	r0, s16
 800bb0c:	463a      	mov	r2, r7
 800bb0e:	f000 fcb3 	bl	800c478 <__lshift>
 800bb12:	1bed      	subs	r5, r5, r7
 800bb14:	4604      	mov	r4, r0
 800bb16:	f100 0914 	add.w	r9, r0, #20
 800bb1a:	f04f 0a00 	mov.w	sl, #0
 800bb1e:	e7ae      	b.n	800ba7e <__gethex+0x202>
 800bb20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bb24:	42a8      	cmp	r0, r5
 800bb26:	dd72      	ble.n	800bc0e <__gethex+0x392>
 800bb28:	1b45      	subs	r5, r0, r5
 800bb2a:	42ae      	cmp	r6, r5
 800bb2c:	dc36      	bgt.n	800bb9c <__gethex+0x320>
 800bb2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d02a      	beq.n	800bb8c <__gethex+0x310>
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d02c      	beq.n	800bb94 <__gethex+0x318>
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d11c      	bne.n	800bb78 <__gethex+0x2fc>
 800bb3e:	42ae      	cmp	r6, r5
 800bb40:	d11a      	bne.n	800bb78 <__gethex+0x2fc>
 800bb42:	2e01      	cmp	r6, #1
 800bb44:	d112      	bne.n	800bb6c <__gethex+0x2f0>
 800bb46:	9a04      	ldr	r2, [sp, #16]
 800bb48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	2301      	movs	r3, #1
 800bb50:	6123      	str	r3, [r4, #16]
 800bb52:	f8c9 3000 	str.w	r3, [r9]
 800bb56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb58:	2762      	movs	r7, #98	; 0x62
 800bb5a:	601c      	str	r4, [r3, #0]
 800bb5c:	e723      	b.n	800b9a6 <__gethex+0x12a>
 800bb5e:	bf00      	nop
 800bb60:	0800f5f0 	.word	0x0800f5f0
 800bb64:	0800f577 	.word	0x0800f577
 800bb68:	0800f588 	.word	0x0800f588
 800bb6c:	1e71      	subs	r1, r6, #1
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fec6 	bl	800c900 <__any_on>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d1e6      	bne.n	800bb46 <__gethex+0x2ca>
 800bb78:	ee18 0a10 	vmov	r0, s16
 800bb7c:	4621      	mov	r1, r4
 800bb7e:	f000 fa5f 	bl	800c040 <_Bfree>
 800bb82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb84:	2300      	movs	r3, #0
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	2750      	movs	r7, #80	; 0x50
 800bb8a:	e70c      	b.n	800b9a6 <__gethex+0x12a>
 800bb8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1f2      	bne.n	800bb78 <__gethex+0x2fc>
 800bb92:	e7d8      	b.n	800bb46 <__gethex+0x2ca>
 800bb94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1d5      	bne.n	800bb46 <__gethex+0x2ca>
 800bb9a:	e7ed      	b.n	800bb78 <__gethex+0x2fc>
 800bb9c:	1e6f      	subs	r7, r5, #1
 800bb9e:	f1ba 0f00 	cmp.w	sl, #0
 800bba2:	d131      	bne.n	800bc08 <__gethex+0x38c>
 800bba4:	b127      	cbz	r7, 800bbb0 <__gethex+0x334>
 800bba6:	4639      	mov	r1, r7
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 fea9 	bl	800c900 <__any_on>
 800bbae:	4682      	mov	sl, r0
 800bbb0:	117b      	asrs	r3, r7, #5
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bbb8:	f007 071f 	and.w	r7, r7, #31
 800bbbc:	fa01 f707 	lsl.w	r7, r1, r7
 800bbc0:	421f      	tst	r7, r3
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	bf18      	it	ne
 800bbc8:	f04a 0a02 	orrne.w	sl, sl, #2
 800bbcc:	1b76      	subs	r6, r6, r5
 800bbce:	f7ff fded 	bl	800b7ac <rshift>
 800bbd2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bbd6:	2702      	movs	r7, #2
 800bbd8:	f1ba 0f00 	cmp.w	sl, #0
 800bbdc:	d048      	beq.n	800bc70 <__gethex+0x3f4>
 800bbde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d015      	beq.n	800bc12 <__gethex+0x396>
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d017      	beq.n	800bc1a <__gethex+0x39e>
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d109      	bne.n	800bc02 <__gethex+0x386>
 800bbee:	f01a 0f02 	tst.w	sl, #2
 800bbf2:	d006      	beq.n	800bc02 <__gethex+0x386>
 800bbf4:	f8d9 0000 	ldr.w	r0, [r9]
 800bbf8:	ea4a 0a00 	orr.w	sl, sl, r0
 800bbfc:	f01a 0f01 	tst.w	sl, #1
 800bc00:	d10e      	bne.n	800bc20 <__gethex+0x3a4>
 800bc02:	f047 0710 	orr.w	r7, r7, #16
 800bc06:	e033      	b.n	800bc70 <__gethex+0x3f4>
 800bc08:	f04f 0a01 	mov.w	sl, #1
 800bc0c:	e7d0      	b.n	800bbb0 <__gethex+0x334>
 800bc0e:	2701      	movs	r7, #1
 800bc10:	e7e2      	b.n	800bbd8 <__gethex+0x35c>
 800bc12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc14:	f1c3 0301 	rsb	r3, r3, #1
 800bc18:	9315      	str	r3, [sp, #84]	; 0x54
 800bc1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0f0      	beq.n	800bc02 <__gethex+0x386>
 800bc20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc24:	f104 0314 	add.w	r3, r4, #20
 800bc28:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc2c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc30:	f04f 0c00 	mov.w	ip, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc3a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc3e:	d01c      	beq.n	800bc7a <__gethex+0x3fe>
 800bc40:	3201      	adds	r2, #1
 800bc42:	6002      	str	r2, [r0, #0]
 800bc44:	2f02      	cmp	r7, #2
 800bc46:	f104 0314 	add.w	r3, r4, #20
 800bc4a:	d13f      	bne.n	800bccc <__gethex+0x450>
 800bc4c:	f8d8 2000 	ldr.w	r2, [r8]
 800bc50:	3a01      	subs	r2, #1
 800bc52:	42b2      	cmp	r2, r6
 800bc54:	d10a      	bne.n	800bc6c <__gethex+0x3f0>
 800bc56:	1171      	asrs	r1, r6, #5
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc5e:	f006 061f 	and.w	r6, r6, #31
 800bc62:	fa02 f606 	lsl.w	r6, r2, r6
 800bc66:	421e      	tst	r6, r3
 800bc68:	bf18      	it	ne
 800bc6a:	4617      	movne	r7, r2
 800bc6c:	f047 0720 	orr.w	r7, r7, #32
 800bc70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc72:	601c      	str	r4, [r3, #0]
 800bc74:	9b04      	ldr	r3, [sp, #16]
 800bc76:	601d      	str	r5, [r3, #0]
 800bc78:	e695      	b.n	800b9a6 <__gethex+0x12a>
 800bc7a:	4299      	cmp	r1, r3
 800bc7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc80:	d8d8      	bhi.n	800bc34 <__gethex+0x3b8>
 800bc82:	68a3      	ldr	r3, [r4, #8]
 800bc84:	459b      	cmp	fp, r3
 800bc86:	db19      	blt.n	800bcbc <__gethex+0x440>
 800bc88:	6861      	ldr	r1, [r4, #4]
 800bc8a:	ee18 0a10 	vmov	r0, s16
 800bc8e:	3101      	adds	r1, #1
 800bc90:	f000 f996 	bl	800bfc0 <_Balloc>
 800bc94:	4681      	mov	r9, r0
 800bc96:	b918      	cbnz	r0, 800bca0 <__gethex+0x424>
 800bc98:	4b1a      	ldr	r3, [pc, #104]	; (800bd04 <__gethex+0x488>)
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	2184      	movs	r1, #132	; 0x84
 800bc9e:	e6a8      	b.n	800b9f2 <__gethex+0x176>
 800bca0:	6922      	ldr	r2, [r4, #16]
 800bca2:	3202      	adds	r2, #2
 800bca4:	f104 010c 	add.w	r1, r4, #12
 800bca8:	0092      	lsls	r2, r2, #2
 800bcaa:	300c      	adds	r0, #12
 800bcac:	f7fc fda4 	bl	80087f8 <memcpy>
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	ee18 0a10 	vmov	r0, s16
 800bcb6:	f000 f9c3 	bl	800c040 <_Bfree>
 800bcba:	464c      	mov	r4, r9
 800bcbc:	6923      	ldr	r3, [r4, #16]
 800bcbe:	1c5a      	adds	r2, r3, #1
 800bcc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bcc4:	6122      	str	r2, [r4, #16]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	615a      	str	r2, [r3, #20]
 800bcca:	e7bb      	b.n	800bc44 <__gethex+0x3c8>
 800bccc:	6922      	ldr	r2, [r4, #16]
 800bcce:	455a      	cmp	r2, fp
 800bcd0:	dd0b      	ble.n	800bcea <__gethex+0x46e>
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f7ff fd69 	bl	800b7ac <rshift>
 800bcda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcde:	3501      	adds	r5, #1
 800bce0:	42ab      	cmp	r3, r5
 800bce2:	f6ff aed0 	blt.w	800ba86 <__gethex+0x20a>
 800bce6:	2701      	movs	r7, #1
 800bce8:	e7c0      	b.n	800bc6c <__gethex+0x3f0>
 800bcea:	f016 061f 	ands.w	r6, r6, #31
 800bcee:	d0fa      	beq.n	800bce6 <__gethex+0x46a>
 800bcf0:	4453      	add	r3, sl
 800bcf2:	f1c6 0620 	rsb	r6, r6, #32
 800bcf6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bcfa:	f000 fa53 	bl	800c1a4 <__hi0bits>
 800bcfe:	42b0      	cmp	r0, r6
 800bd00:	dbe7      	blt.n	800bcd2 <__gethex+0x456>
 800bd02:	e7f0      	b.n	800bce6 <__gethex+0x46a>
 800bd04:	0800f577 	.word	0x0800f577

0800bd08 <L_shift>:
 800bd08:	f1c2 0208 	rsb	r2, r2, #8
 800bd0c:	0092      	lsls	r2, r2, #2
 800bd0e:	b570      	push	{r4, r5, r6, lr}
 800bd10:	f1c2 0620 	rsb	r6, r2, #32
 800bd14:	6843      	ldr	r3, [r0, #4]
 800bd16:	6804      	ldr	r4, [r0, #0]
 800bd18:	fa03 f506 	lsl.w	r5, r3, r6
 800bd1c:	432c      	orrs	r4, r5
 800bd1e:	40d3      	lsrs	r3, r2
 800bd20:	6004      	str	r4, [r0, #0]
 800bd22:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd26:	4288      	cmp	r0, r1
 800bd28:	d3f4      	bcc.n	800bd14 <L_shift+0xc>
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}

0800bd2c <__match>:
 800bd2c:	b530      	push	{r4, r5, lr}
 800bd2e:	6803      	ldr	r3, [r0, #0]
 800bd30:	3301      	adds	r3, #1
 800bd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd36:	b914      	cbnz	r4, 800bd3e <__match+0x12>
 800bd38:	6003      	str	r3, [r0, #0]
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	bd30      	pop	{r4, r5, pc}
 800bd3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd46:	2d19      	cmp	r5, #25
 800bd48:	bf98      	it	ls
 800bd4a:	3220      	addls	r2, #32
 800bd4c:	42a2      	cmp	r2, r4
 800bd4e:	d0f0      	beq.n	800bd32 <__match+0x6>
 800bd50:	2000      	movs	r0, #0
 800bd52:	e7f3      	b.n	800bd3c <__match+0x10>

0800bd54 <__hexnan>:
 800bd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd58:	680b      	ldr	r3, [r1, #0]
 800bd5a:	115e      	asrs	r6, r3, #5
 800bd5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd60:	f013 031f 	ands.w	r3, r3, #31
 800bd64:	b087      	sub	sp, #28
 800bd66:	bf18      	it	ne
 800bd68:	3604      	addne	r6, #4
 800bd6a:	2500      	movs	r5, #0
 800bd6c:	1f37      	subs	r7, r6, #4
 800bd6e:	4690      	mov	r8, r2
 800bd70:	6802      	ldr	r2, [r0, #0]
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	4682      	mov	sl, r0
 800bd76:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd7a:	46b9      	mov	r9, r7
 800bd7c:	463c      	mov	r4, r7
 800bd7e:	9502      	str	r5, [sp, #8]
 800bd80:	46ab      	mov	fp, r5
 800bd82:	7851      	ldrb	r1, [r2, #1]
 800bd84:	1c53      	adds	r3, r2, #1
 800bd86:	9303      	str	r3, [sp, #12]
 800bd88:	b341      	cbz	r1, 800bddc <__hexnan+0x88>
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	9205      	str	r2, [sp, #20]
 800bd8e:	9104      	str	r1, [sp, #16]
 800bd90:	f7ff fd5e 	bl	800b850 <__hexdig_fun>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d14f      	bne.n	800be38 <__hexnan+0xe4>
 800bd98:	9904      	ldr	r1, [sp, #16]
 800bd9a:	9a05      	ldr	r2, [sp, #20]
 800bd9c:	2920      	cmp	r1, #32
 800bd9e:	d818      	bhi.n	800bdd2 <__hexnan+0x7e>
 800bda0:	9b02      	ldr	r3, [sp, #8]
 800bda2:	459b      	cmp	fp, r3
 800bda4:	dd13      	ble.n	800bdce <__hexnan+0x7a>
 800bda6:	454c      	cmp	r4, r9
 800bda8:	d206      	bcs.n	800bdb8 <__hexnan+0x64>
 800bdaa:	2d07      	cmp	r5, #7
 800bdac:	dc04      	bgt.n	800bdb8 <__hexnan+0x64>
 800bdae:	462a      	mov	r2, r5
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f7ff ffa8 	bl	800bd08 <L_shift>
 800bdb8:	4544      	cmp	r4, r8
 800bdba:	d950      	bls.n	800be5e <__hexnan+0x10a>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f1a4 0904 	sub.w	r9, r4, #4
 800bdc2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdc6:	f8cd b008 	str.w	fp, [sp, #8]
 800bdca:	464c      	mov	r4, r9
 800bdcc:	461d      	mov	r5, r3
 800bdce:	9a03      	ldr	r2, [sp, #12]
 800bdd0:	e7d7      	b.n	800bd82 <__hexnan+0x2e>
 800bdd2:	2929      	cmp	r1, #41	; 0x29
 800bdd4:	d156      	bne.n	800be84 <__hexnan+0x130>
 800bdd6:	3202      	adds	r2, #2
 800bdd8:	f8ca 2000 	str.w	r2, [sl]
 800bddc:	f1bb 0f00 	cmp.w	fp, #0
 800bde0:	d050      	beq.n	800be84 <__hexnan+0x130>
 800bde2:	454c      	cmp	r4, r9
 800bde4:	d206      	bcs.n	800bdf4 <__hexnan+0xa0>
 800bde6:	2d07      	cmp	r5, #7
 800bde8:	dc04      	bgt.n	800bdf4 <__hexnan+0xa0>
 800bdea:	462a      	mov	r2, r5
 800bdec:	4649      	mov	r1, r9
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f7ff ff8a 	bl	800bd08 <L_shift>
 800bdf4:	4544      	cmp	r4, r8
 800bdf6:	d934      	bls.n	800be62 <__hexnan+0x10e>
 800bdf8:	f1a8 0204 	sub.w	r2, r8, #4
 800bdfc:	4623      	mov	r3, r4
 800bdfe:	f853 1b04 	ldr.w	r1, [r3], #4
 800be02:	f842 1f04 	str.w	r1, [r2, #4]!
 800be06:	429f      	cmp	r7, r3
 800be08:	d2f9      	bcs.n	800bdfe <__hexnan+0xaa>
 800be0a:	1b3b      	subs	r3, r7, r4
 800be0c:	f023 0303 	bic.w	r3, r3, #3
 800be10:	3304      	adds	r3, #4
 800be12:	3401      	adds	r4, #1
 800be14:	3e03      	subs	r6, #3
 800be16:	42b4      	cmp	r4, r6
 800be18:	bf88      	it	hi
 800be1a:	2304      	movhi	r3, #4
 800be1c:	4443      	add	r3, r8
 800be1e:	2200      	movs	r2, #0
 800be20:	f843 2b04 	str.w	r2, [r3], #4
 800be24:	429f      	cmp	r7, r3
 800be26:	d2fb      	bcs.n	800be20 <__hexnan+0xcc>
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	b91b      	cbnz	r3, 800be34 <__hexnan+0xe0>
 800be2c:	4547      	cmp	r7, r8
 800be2e:	d127      	bne.n	800be80 <__hexnan+0x12c>
 800be30:	2301      	movs	r3, #1
 800be32:	603b      	str	r3, [r7, #0]
 800be34:	2005      	movs	r0, #5
 800be36:	e026      	b.n	800be86 <__hexnan+0x132>
 800be38:	3501      	adds	r5, #1
 800be3a:	2d08      	cmp	r5, #8
 800be3c:	f10b 0b01 	add.w	fp, fp, #1
 800be40:	dd06      	ble.n	800be50 <__hexnan+0xfc>
 800be42:	4544      	cmp	r4, r8
 800be44:	d9c3      	bls.n	800bdce <__hexnan+0x7a>
 800be46:	2300      	movs	r3, #0
 800be48:	f844 3c04 	str.w	r3, [r4, #-4]
 800be4c:	2501      	movs	r5, #1
 800be4e:	3c04      	subs	r4, #4
 800be50:	6822      	ldr	r2, [r4, #0]
 800be52:	f000 000f 	and.w	r0, r0, #15
 800be56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800be5a:	6022      	str	r2, [r4, #0]
 800be5c:	e7b7      	b.n	800bdce <__hexnan+0x7a>
 800be5e:	2508      	movs	r5, #8
 800be60:	e7b5      	b.n	800bdce <__hexnan+0x7a>
 800be62:	9b01      	ldr	r3, [sp, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d0df      	beq.n	800be28 <__hexnan+0xd4>
 800be68:	f04f 32ff 	mov.w	r2, #4294967295
 800be6c:	f1c3 0320 	rsb	r3, r3, #32
 800be70:	fa22 f303 	lsr.w	r3, r2, r3
 800be74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be78:	401a      	ands	r2, r3
 800be7a:	f846 2c04 	str.w	r2, [r6, #-4]
 800be7e:	e7d3      	b.n	800be28 <__hexnan+0xd4>
 800be80:	3f04      	subs	r7, #4
 800be82:	e7d1      	b.n	800be28 <__hexnan+0xd4>
 800be84:	2004      	movs	r0, #4
 800be86:	b007      	add	sp, #28
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be8c <_localeconv_r>:
 800be8c:	4800      	ldr	r0, [pc, #0]	; (800be90 <_localeconv_r+0x4>)
 800be8e:	4770      	bx	lr
 800be90:	20000164 	.word	0x20000164

0800be94 <_lseek_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4d07      	ldr	r5, [pc, #28]	; (800beb4 <_lseek_r+0x20>)
 800be98:	4604      	mov	r4, r0
 800be9a:	4608      	mov	r0, r1
 800be9c:	4611      	mov	r1, r2
 800be9e:	2200      	movs	r2, #0
 800bea0:	602a      	str	r2, [r5, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	f7f5 fa6a 	bl	800137c <_lseek>
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	d102      	bne.n	800beb2 <_lseek_r+0x1e>
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	b103      	cbz	r3, 800beb2 <_lseek_r+0x1e>
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	bd38      	pop	{r3, r4, r5, pc}
 800beb4:	20000eec 	.word	0x20000eec

0800beb8 <__swhatbuf_r>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	460e      	mov	r6, r1
 800bebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec0:	2900      	cmp	r1, #0
 800bec2:	b096      	sub	sp, #88	; 0x58
 800bec4:	4614      	mov	r4, r2
 800bec6:	461d      	mov	r5, r3
 800bec8:	da08      	bge.n	800bedc <__swhatbuf_r+0x24>
 800beca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bece:	2200      	movs	r2, #0
 800bed0:	602a      	str	r2, [r5, #0]
 800bed2:	061a      	lsls	r2, r3, #24
 800bed4:	d410      	bmi.n	800bef8 <__swhatbuf_r+0x40>
 800bed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beda:	e00e      	b.n	800befa <__swhatbuf_r+0x42>
 800bedc:	466a      	mov	r2, sp
 800bede:	f000 ff3d 	bl	800cd5c <_fstat_r>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	dbf1      	blt.n	800beca <__swhatbuf_r+0x12>
 800bee6:	9a01      	ldr	r2, [sp, #4]
 800bee8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800beec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bef0:	425a      	negs	r2, r3
 800bef2:	415a      	adcs	r2, r3
 800bef4:	602a      	str	r2, [r5, #0]
 800bef6:	e7ee      	b.n	800bed6 <__swhatbuf_r+0x1e>
 800bef8:	2340      	movs	r3, #64	; 0x40
 800befa:	2000      	movs	r0, #0
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	b016      	add	sp, #88	; 0x58
 800bf00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf04 <__smakebuf_r>:
 800bf04:	898b      	ldrh	r3, [r1, #12]
 800bf06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf08:	079d      	lsls	r5, r3, #30
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	d507      	bpl.n	800bf20 <__smakebuf_r+0x1c>
 800bf10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	6123      	str	r3, [r4, #16]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	6163      	str	r3, [r4, #20]
 800bf1c:	b002      	add	sp, #8
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}
 800bf20:	ab01      	add	r3, sp, #4
 800bf22:	466a      	mov	r2, sp
 800bf24:	f7ff ffc8 	bl	800beb8 <__swhatbuf_r>
 800bf28:	9900      	ldr	r1, [sp, #0]
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f7fc fd15 	bl	800895c <_malloc_r>
 800bf32:	b948      	cbnz	r0, 800bf48 <__smakebuf_r+0x44>
 800bf34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf38:	059a      	lsls	r2, r3, #22
 800bf3a:	d4ef      	bmi.n	800bf1c <__smakebuf_r+0x18>
 800bf3c:	f023 0303 	bic.w	r3, r3, #3
 800bf40:	f043 0302 	orr.w	r3, r3, #2
 800bf44:	81a3      	strh	r3, [r4, #12]
 800bf46:	e7e3      	b.n	800bf10 <__smakebuf_r+0xc>
 800bf48:	4b0d      	ldr	r3, [pc, #52]	; (800bf80 <__smakebuf_r+0x7c>)
 800bf4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	6020      	str	r0, [r4, #0]
 800bf50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf54:	81a3      	strh	r3, [r4, #12]
 800bf56:	9b00      	ldr	r3, [sp, #0]
 800bf58:	6163      	str	r3, [r4, #20]
 800bf5a:	9b01      	ldr	r3, [sp, #4]
 800bf5c:	6120      	str	r0, [r4, #16]
 800bf5e:	b15b      	cbz	r3, 800bf78 <__smakebuf_r+0x74>
 800bf60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf64:	4630      	mov	r0, r6
 800bf66:	f000 ff0b 	bl	800cd80 <_isatty_r>
 800bf6a:	b128      	cbz	r0, 800bf78 <__smakebuf_r+0x74>
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	f023 0303 	bic.w	r3, r3, #3
 800bf72:	f043 0301 	orr.w	r3, r3, #1
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	89a0      	ldrh	r0, [r4, #12]
 800bf7a:	4305      	orrs	r5, r0
 800bf7c:	81a5      	strh	r5, [r4, #12]
 800bf7e:	e7cd      	b.n	800bf1c <__smakebuf_r+0x18>
 800bf80:	08008465 	.word	0x08008465

0800bf84 <__ascii_mbtowc>:
 800bf84:	b082      	sub	sp, #8
 800bf86:	b901      	cbnz	r1, 800bf8a <__ascii_mbtowc+0x6>
 800bf88:	a901      	add	r1, sp, #4
 800bf8a:	b142      	cbz	r2, 800bf9e <__ascii_mbtowc+0x1a>
 800bf8c:	b14b      	cbz	r3, 800bfa2 <__ascii_mbtowc+0x1e>
 800bf8e:	7813      	ldrb	r3, [r2, #0]
 800bf90:	600b      	str	r3, [r1, #0]
 800bf92:	7812      	ldrb	r2, [r2, #0]
 800bf94:	1e10      	subs	r0, r2, #0
 800bf96:	bf18      	it	ne
 800bf98:	2001      	movne	r0, #1
 800bf9a:	b002      	add	sp, #8
 800bf9c:	4770      	bx	lr
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	e7fb      	b.n	800bf9a <__ascii_mbtowc+0x16>
 800bfa2:	f06f 0001 	mvn.w	r0, #1
 800bfa6:	e7f8      	b.n	800bf9a <__ascii_mbtowc+0x16>

0800bfa8 <__malloc_lock>:
 800bfa8:	4801      	ldr	r0, [pc, #4]	; (800bfb0 <__malloc_lock+0x8>)
 800bfaa:	f7fc bc12 	b.w	80087d2 <__retarget_lock_acquire_recursive>
 800bfae:	bf00      	nop
 800bfb0:	20000ee0 	.word	0x20000ee0

0800bfb4 <__malloc_unlock>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	; (800bfbc <__malloc_unlock+0x8>)
 800bfb6:	f7fc bc0d 	b.w	80087d4 <__retarget_lock_release_recursive>
 800bfba:	bf00      	nop
 800bfbc:	20000ee0 	.word	0x20000ee0

0800bfc0 <_Balloc>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	460d      	mov	r5, r1
 800bfc8:	b976      	cbnz	r6, 800bfe8 <_Balloc+0x28>
 800bfca:	2010      	movs	r0, #16
 800bfcc:	f7fc fc04 	bl	80087d8 <malloc>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	6260      	str	r0, [r4, #36]	; 0x24
 800bfd4:	b920      	cbnz	r0, 800bfe0 <_Balloc+0x20>
 800bfd6:	4b18      	ldr	r3, [pc, #96]	; (800c038 <_Balloc+0x78>)
 800bfd8:	4818      	ldr	r0, [pc, #96]	; (800c03c <_Balloc+0x7c>)
 800bfda:	2166      	movs	r1, #102	; 0x66
 800bfdc:	f7fc f91e 	bl	800821c <__assert_func>
 800bfe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfe4:	6006      	str	r6, [r0, #0]
 800bfe6:	60c6      	str	r6, [r0, #12]
 800bfe8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bfea:	68f3      	ldr	r3, [r6, #12]
 800bfec:	b183      	cbz	r3, 800c010 <_Balloc+0x50>
 800bfee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bff6:	b9b8      	cbnz	r0, 800c028 <_Balloc+0x68>
 800bff8:	2101      	movs	r1, #1
 800bffa:	fa01 f605 	lsl.w	r6, r1, r5
 800bffe:	1d72      	adds	r2, r6, #5
 800c000:	0092      	lsls	r2, r2, #2
 800c002:	4620      	mov	r0, r4
 800c004:	f7fc fc28 	bl	8008858 <_calloc_r>
 800c008:	b160      	cbz	r0, 800c024 <_Balloc+0x64>
 800c00a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c00e:	e00e      	b.n	800c02e <_Balloc+0x6e>
 800c010:	2221      	movs	r2, #33	; 0x21
 800c012:	2104      	movs	r1, #4
 800c014:	4620      	mov	r0, r4
 800c016:	f7fc fc1f 	bl	8008858 <_calloc_r>
 800c01a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c01c:	60f0      	str	r0, [r6, #12]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1e4      	bne.n	800bfee <_Balloc+0x2e>
 800c024:	2000      	movs	r0, #0
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	6802      	ldr	r2, [r0, #0]
 800c02a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c02e:	2300      	movs	r3, #0
 800c030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c034:	e7f7      	b.n	800c026 <_Balloc+0x66>
 800c036:	bf00      	nop
 800c038:	0800f505 	.word	0x0800f505
 800c03c:	0800f604 	.word	0x0800f604

0800c040 <_Bfree>:
 800c040:	b570      	push	{r4, r5, r6, lr}
 800c042:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c044:	4605      	mov	r5, r0
 800c046:	460c      	mov	r4, r1
 800c048:	b976      	cbnz	r6, 800c068 <_Bfree+0x28>
 800c04a:	2010      	movs	r0, #16
 800c04c:	f7fc fbc4 	bl	80087d8 <malloc>
 800c050:	4602      	mov	r2, r0
 800c052:	6268      	str	r0, [r5, #36]	; 0x24
 800c054:	b920      	cbnz	r0, 800c060 <_Bfree+0x20>
 800c056:	4b09      	ldr	r3, [pc, #36]	; (800c07c <_Bfree+0x3c>)
 800c058:	4809      	ldr	r0, [pc, #36]	; (800c080 <_Bfree+0x40>)
 800c05a:	218a      	movs	r1, #138	; 0x8a
 800c05c:	f7fc f8de 	bl	800821c <__assert_func>
 800c060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c064:	6006      	str	r6, [r0, #0]
 800c066:	60c6      	str	r6, [r0, #12]
 800c068:	b13c      	cbz	r4, 800c07a <_Bfree+0x3a>
 800c06a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c06c:	6862      	ldr	r2, [r4, #4]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c074:	6021      	str	r1, [r4, #0]
 800c076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	0800f505 	.word	0x0800f505
 800c080:	0800f604 	.word	0x0800f604

0800c084 <__multadd>:
 800c084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c088:	690d      	ldr	r5, [r1, #16]
 800c08a:	4607      	mov	r7, r0
 800c08c:	460c      	mov	r4, r1
 800c08e:	461e      	mov	r6, r3
 800c090:	f101 0c14 	add.w	ip, r1, #20
 800c094:	2000      	movs	r0, #0
 800c096:	f8dc 3000 	ldr.w	r3, [ip]
 800c09a:	b299      	uxth	r1, r3
 800c09c:	fb02 6101 	mla	r1, r2, r1, r6
 800c0a0:	0c1e      	lsrs	r6, r3, #16
 800c0a2:	0c0b      	lsrs	r3, r1, #16
 800c0a4:	fb02 3306 	mla	r3, r2, r6, r3
 800c0a8:	b289      	uxth	r1, r1
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0b0:	4285      	cmp	r5, r0
 800c0b2:	f84c 1b04 	str.w	r1, [ip], #4
 800c0b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0ba:	dcec      	bgt.n	800c096 <__multadd+0x12>
 800c0bc:	b30e      	cbz	r6, 800c102 <__multadd+0x7e>
 800c0be:	68a3      	ldr	r3, [r4, #8]
 800c0c0:	42ab      	cmp	r3, r5
 800c0c2:	dc19      	bgt.n	800c0f8 <__multadd+0x74>
 800c0c4:	6861      	ldr	r1, [r4, #4]
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	3101      	adds	r1, #1
 800c0ca:	f7ff ff79 	bl	800bfc0 <_Balloc>
 800c0ce:	4680      	mov	r8, r0
 800c0d0:	b928      	cbnz	r0, 800c0de <__multadd+0x5a>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	4b0c      	ldr	r3, [pc, #48]	; (800c108 <__multadd+0x84>)
 800c0d6:	480d      	ldr	r0, [pc, #52]	; (800c10c <__multadd+0x88>)
 800c0d8:	21b5      	movs	r1, #181	; 0xb5
 800c0da:	f7fc f89f 	bl	800821c <__assert_func>
 800c0de:	6922      	ldr	r2, [r4, #16]
 800c0e0:	3202      	adds	r2, #2
 800c0e2:	f104 010c 	add.w	r1, r4, #12
 800c0e6:	0092      	lsls	r2, r2, #2
 800c0e8:	300c      	adds	r0, #12
 800c0ea:	f7fc fb85 	bl	80087f8 <memcpy>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f7ff ffa5 	bl	800c040 <_Bfree>
 800c0f6:	4644      	mov	r4, r8
 800c0f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0fc:	3501      	adds	r5, #1
 800c0fe:	615e      	str	r6, [r3, #20]
 800c100:	6125      	str	r5, [r4, #16]
 800c102:	4620      	mov	r0, r4
 800c104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c108:	0800f577 	.word	0x0800f577
 800c10c:	0800f604 	.word	0x0800f604

0800c110 <__s2b>:
 800c110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c114:	460c      	mov	r4, r1
 800c116:	4615      	mov	r5, r2
 800c118:	461f      	mov	r7, r3
 800c11a:	2209      	movs	r2, #9
 800c11c:	3308      	adds	r3, #8
 800c11e:	4606      	mov	r6, r0
 800c120:	fb93 f3f2 	sdiv	r3, r3, r2
 800c124:	2100      	movs	r1, #0
 800c126:	2201      	movs	r2, #1
 800c128:	429a      	cmp	r2, r3
 800c12a:	db09      	blt.n	800c140 <__s2b+0x30>
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7ff ff47 	bl	800bfc0 <_Balloc>
 800c132:	b940      	cbnz	r0, 800c146 <__s2b+0x36>
 800c134:	4602      	mov	r2, r0
 800c136:	4b19      	ldr	r3, [pc, #100]	; (800c19c <__s2b+0x8c>)
 800c138:	4819      	ldr	r0, [pc, #100]	; (800c1a0 <__s2b+0x90>)
 800c13a:	21ce      	movs	r1, #206	; 0xce
 800c13c:	f7fc f86e 	bl	800821c <__assert_func>
 800c140:	0052      	lsls	r2, r2, #1
 800c142:	3101      	adds	r1, #1
 800c144:	e7f0      	b.n	800c128 <__s2b+0x18>
 800c146:	9b08      	ldr	r3, [sp, #32]
 800c148:	6143      	str	r3, [r0, #20]
 800c14a:	2d09      	cmp	r5, #9
 800c14c:	f04f 0301 	mov.w	r3, #1
 800c150:	6103      	str	r3, [r0, #16]
 800c152:	dd16      	ble.n	800c182 <__s2b+0x72>
 800c154:	f104 0909 	add.w	r9, r4, #9
 800c158:	46c8      	mov	r8, r9
 800c15a:	442c      	add	r4, r5
 800c15c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c160:	4601      	mov	r1, r0
 800c162:	3b30      	subs	r3, #48	; 0x30
 800c164:	220a      	movs	r2, #10
 800c166:	4630      	mov	r0, r6
 800c168:	f7ff ff8c 	bl	800c084 <__multadd>
 800c16c:	45a0      	cmp	r8, r4
 800c16e:	d1f5      	bne.n	800c15c <__s2b+0x4c>
 800c170:	f1a5 0408 	sub.w	r4, r5, #8
 800c174:	444c      	add	r4, r9
 800c176:	1b2d      	subs	r5, r5, r4
 800c178:	1963      	adds	r3, r4, r5
 800c17a:	42bb      	cmp	r3, r7
 800c17c:	db04      	blt.n	800c188 <__s2b+0x78>
 800c17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c182:	340a      	adds	r4, #10
 800c184:	2509      	movs	r5, #9
 800c186:	e7f6      	b.n	800c176 <__s2b+0x66>
 800c188:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c18c:	4601      	mov	r1, r0
 800c18e:	3b30      	subs	r3, #48	; 0x30
 800c190:	220a      	movs	r2, #10
 800c192:	4630      	mov	r0, r6
 800c194:	f7ff ff76 	bl	800c084 <__multadd>
 800c198:	e7ee      	b.n	800c178 <__s2b+0x68>
 800c19a:	bf00      	nop
 800c19c:	0800f577 	.word	0x0800f577
 800c1a0:	0800f604 	.word	0x0800f604

0800c1a4 <__hi0bits>:
 800c1a4:	0c03      	lsrs	r3, r0, #16
 800c1a6:	041b      	lsls	r3, r3, #16
 800c1a8:	b9d3      	cbnz	r3, 800c1e0 <__hi0bits+0x3c>
 800c1aa:	0400      	lsls	r0, r0, #16
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1b2:	bf04      	itt	eq
 800c1b4:	0200      	lsleq	r0, r0, #8
 800c1b6:	3308      	addeq	r3, #8
 800c1b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c1bc:	bf04      	itt	eq
 800c1be:	0100      	lsleq	r0, r0, #4
 800c1c0:	3304      	addeq	r3, #4
 800c1c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c1c6:	bf04      	itt	eq
 800c1c8:	0080      	lsleq	r0, r0, #2
 800c1ca:	3302      	addeq	r3, #2
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	db05      	blt.n	800c1dc <__hi0bits+0x38>
 800c1d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1d4:	f103 0301 	add.w	r3, r3, #1
 800c1d8:	bf08      	it	eq
 800c1da:	2320      	moveq	r3, #32
 800c1dc:	4618      	mov	r0, r3
 800c1de:	4770      	bx	lr
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	e7e4      	b.n	800c1ae <__hi0bits+0xa>

0800c1e4 <__lo0bits>:
 800c1e4:	6803      	ldr	r3, [r0, #0]
 800c1e6:	f013 0207 	ands.w	r2, r3, #7
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	d00b      	beq.n	800c206 <__lo0bits+0x22>
 800c1ee:	07da      	lsls	r2, r3, #31
 800c1f0:	d423      	bmi.n	800c23a <__lo0bits+0x56>
 800c1f2:	0798      	lsls	r0, r3, #30
 800c1f4:	bf49      	itett	mi
 800c1f6:	085b      	lsrmi	r3, r3, #1
 800c1f8:	089b      	lsrpl	r3, r3, #2
 800c1fa:	2001      	movmi	r0, #1
 800c1fc:	600b      	strmi	r3, [r1, #0]
 800c1fe:	bf5c      	itt	pl
 800c200:	600b      	strpl	r3, [r1, #0]
 800c202:	2002      	movpl	r0, #2
 800c204:	4770      	bx	lr
 800c206:	b298      	uxth	r0, r3
 800c208:	b9a8      	cbnz	r0, 800c236 <__lo0bits+0x52>
 800c20a:	0c1b      	lsrs	r3, r3, #16
 800c20c:	2010      	movs	r0, #16
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	b90a      	cbnz	r2, 800c216 <__lo0bits+0x32>
 800c212:	3008      	adds	r0, #8
 800c214:	0a1b      	lsrs	r3, r3, #8
 800c216:	071a      	lsls	r2, r3, #28
 800c218:	bf04      	itt	eq
 800c21a:	091b      	lsreq	r3, r3, #4
 800c21c:	3004      	addeq	r0, #4
 800c21e:	079a      	lsls	r2, r3, #30
 800c220:	bf04      	itt	eq
 800c222:	089b      	lsreq	r3, r3, #2
 800c224:	3002      	addeq	r0, #2
 800c226:	07da      	lsls	r2, r3, #31
 800c228:	d403      	bmi.n	800c232 <__lo0bits+0x4e>
 800c22a:	085b      	lsrs	r3, r3, #1
 800c22c:	f100 0001 	add.w	r0, r0, #1
 800c230:	d005      	beq.n	800c23e <__lo0bits+0x5a>
 800c232:	600b      	str	r3, [r1, #0]
 800c234:	4770      	bx	lr
 800c236:	4610      	mov	r0, r2
 800c238:	e7e9      	b.n	800c20e <__lo0bits+0x2a>
 800c23a:	2000      	movs	r0, #0
 800c23c:	4770      	bx	lr
 800c23e:	2020      	movs	r0, #32
 800c240:	4770      	bx	lr
	...

0800c244 <__i2b>:
 800c244:	b510      	push	{r4, lr}
 800c246:	460c      	mov	r4, r1
 800c248:	2101      	movs	r1, #1
 800c24a:	f7ff feb9 	bl	800bfc0 <_Balloc>
 800c24e:	4602      	mov	r2, r0
 800c250:	b928      	cbnz	r0, 800c25e <__i2b+0x1a>
 800c252:	4b05      	ldr	r3, [pc, #20]	; (800c268 <__i2b+0x24>)
 800c254:	4805      	ldr	r0, [pc, #20]	; (800c26c <__i2b+0x28>)
 800c256:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c25a:	f7fb ffdf 	bl	800821c <__assert_func>
 800c25e:	2301      	movs	r3, #1
 800c260:	6144      	str	r4, [r0, #20]
 800c262:	6103      	str	r3, [r0, #16]
 800c264:	bd10      	pop	{r4, pc}
 800c266:	bf00      	nop
 800c268:	0800f577 	.word	0x0800f577
 800c26c:	0800f604 	.word	0x0800f604

0800c270 <__multiply>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	4691      	mov	r9, r2
 800c276:	690a      	ldr	r2, [r1, #16]
 800c278:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	bfb8      	it	lt
 800c280:	460b      	movlt	r3, r1
 800c282:	460c      	mov	r4, r1
 800c284:	bfbc      	itt	lt
 800c286:	464c      	movlt	r4, r9
 800c288:	4699      	movlt	r9, r3
 800c28a:	6927      	ldr	r7, [r4, #16]
 800c28c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c290:	68a3      	ldr	r3, [r4, #8]
 800c292:	6861      	ldr	r1, [r4, #4]
 800c294:	eb07 060a 	add.w	r6, r7, sl
 800c298:	42b3      	cmp	r3, r6
 800c29a:	b085      	sub	sp, #20
 800c29c:	bfb8      	it	lt
 800c29e:	3101      	addlt	r1, #1
 800c2a0:	f7ff fe8e 	bl	800bfc0 <_Balloc>
 800c2a4:	b930      	cbnz	r0, 800c2b4 <__multiply+0x44>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	4b44      	ldr	r3, [pc, #272]	; (800c3bc <__multiply+0x14c>)
 800c2aa:	4845      	ldr	r0, [pc, #276]	; (800c3c0 <__multiply+0x150>)
 800c2ac:	f240 115d 	movw	r1, #349	; 0x15d
 800c2b0:	f7fb ffb4 	bl	800821c <__assert_func>
 800c2b4:	f100 0514 	add.w	r5, r0, #20
 800c2b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2bc:	462b      	mov	r3, r5
 800c2be:	2200      	movs	r2, #0
 800c2c0:	4543      	cmp	r3, r8
 800c2c2:	d321      	bcc.n	800c308 <__multiply+0x98>
 800c2c4:	f104 0314 	add.w	r3, r4, #20
 800c2c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2cc:	f109 0314 	add.w	r3, r9, #20
 800c2d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2d4:	9202      	str	r2, [sp, #8]
 800c2d6:	1b3a      	subs	r2, r7, r4
 800c2d8:	3a15      	subs	r2, #21
 800c2da:	f022 0203 	bic.w	r2, r2, #3
 800c2de:	3204      	adds	r2, #4
 800c2e0:	f104 0115 	add.w	r1, r4, #21
 800c2e4:	428f      	cmp	r7, r1
 800c2e6:	bf38      	it	cc
 800c2e8:	2204      	movcc	r2, #4
 800c2ea:	9201      	str	r2, [sp, #4]
 800c2ec:	9a02      	ldr	r2, [sp, #8]
 800c2ee:	9303      	str	r3, [sp, #12]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d80c      	bhi.n	800c30e <__multiply+0x9e>
 800c2f4:	2e00      	cmp	r6, #0
 800c2f6:	dd03      	ble.n	800c300 <__multiply+0x90>
 800c2f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d05a      	beq.n	800c3b6 <__multiply+0x146>
 800c300:	6106      	str	r6, [r0, #16]
 800c302:	b005      	add	sp, #20
 800c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c308:	f843 2b04 	str.w	r2, [r3], #4
 800c30c:	e7d8      	b.n	800c2c0 <__multiply+0x50>
 800c30e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c312:	f1ba 0f00 	cmp.w	sl, #0
 800c316:	d024      	beq.n	800c362 <__multiply+0xf2>
 800c318:	f104 0e14 	add.w	lr, r4, #20
 800c31c:	46a9      	mov	r9, r5
 800c31e:	f04f 0c00 	mov.w	ip, #0
 800c322:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c326:	f8d9 1000 	ldr.w	r1, [r9]
 800c32a:	fa1f fb82 	uxth.w	fp, r2
 800c32e:	b289      	uxth	r1, r1
 800c330:	fb0a 110b 	mla	r1, sl, fp, r1
 800c334:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c338:	f8d9 2000 	ldr.w	r2, [r9]
 800c33c:	4461      	add	r1, ip
 800c33e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c342:	fb0a c20b 	mla	r2, sl, fp, ip
 800c346:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c34a:	b289      	uxth	r1, r1
 800c34c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c350:	4577      	cmp	r7, lr
 800c352:	f849 1b04 	str.w	r1, [r9], #4
 800c356:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c35a:	d8e2      	bhi.n	800c322 <__multiply+0xb2>
 800c35c:	9a01      	ldr	r2, [sp, #4]
 800c35e:	f845 c002 	str.w	ip, [r5, r2]
 800c362:	9a03      	ldr	r2, [sp, #12]
 800c364:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c368:	3304      	adds	r3, #4
 800c36a:	f1b9 0f00 	cmp.w	r9, #0
 800c36e:	d020      	beq.n	800c3b2 <__multiply+0x142>
 800c370:	6829      	ldr	r1, [r5, #0]
 800c372:	f104 0c14 	add.w	ip, r4, #20
 800c376:	46ae      	mov	lr, r5
 800c378:	f04f 0a00 	mov.w	sl, #0
 800c37c:	f8bc b000 	ldrh.w	fp, [ip]
 800c380:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c384:	fb09 220b 	mla	r2, r9, fp, r2
 800c388:	4492      	add	sl, r2
 800c38a:	b289      	uxth	r1, r1
 800c38c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c390:	f84e 1b04 	str.w	r1, [lr], #4
 800c394:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c398:	f8be 1000 	ldrh.w	r1, [lr]
 800c39c:	0c12      	lsrs	r2, r2, #16
 800c39e:	fb09 1102 	mla	r1, r9, r2, r1
 800c3a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c3a6:	4567      	cmp	r7, ip
 800c3a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c3ac:	d8e6      	bhi.n	800c37c <__multiply+0x10c>
 800c3ae:	9a01      	ldr	r2, [sp, #4]
 800c3b0:	50a9      	str	r1, [r5, r2]
 800c3b2:	3504      	adds	r5, #4
 800c3b4:	e79a      	b.n	800c2ec <__multiply+0x7c>
 800c3b6:	3e01      	subs	r6, #1
 800c3b8:	e79c      	b.n	800c2f4 <__multiply+0x84>
 800c3ba:	bf00      	nop
 800c3bc:	0800f577 	.word	0x0800f577
 800c3c0:	0800f604 	.word	0x0800f604

0800c3c4 <__pow5mult>:
 800c3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	4615      	mov	r5, r2
 800c3ca:	f012 0203 	ands.w	r2, r2, #3
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	460f      	mov	r7, r1
 800c3d2:	d007      	beq.n	800c3e4 <__pow5mult+0x20>
 800c3d4:	4c25      	ldr	r4, [pc, #148]	; (800c46c <__pow5mult+0xa8>)
 800c3d6:	3a01      	subs	r2, #1
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3de:	f7ff fe51 	bl	800c084 <__multadd>
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	10ad      	asrs	r5, r5, #2
 800c3e6:	d03d      	beq.n	800c464 <__pow5mult+0xa0>
 800c3e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c3ea:	b97c      	cbnz	r4, 800c40c <__pow5mult+0x48>
 800c3ec:	2010      	movs	r0, #16
 800c3ee:	f7fc f9f3 	bl	80087d8 <malloc>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	6270      	str	r0, [r6, #36]	; 0x24
 800c3f6:	b928      	cbnz	r0, 800c404 <__pow5mult+0x40>
 800c3f8:	4b1d      	ldr	r3, [pc, #116]	; (800c470 <__pow5mult+0xac>)
 800c3fa:	481e      	ldr	r0, [pc, #120]	; (800c474 <__pow5mult+0xb0>)
 800c3fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c400:	f7fb ff0c 	bl	800821c <__assert_func>
 800c404:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c408:	6004      	str	r4, [r0, #0]
 800c40a:	60c4      	str	r4, [r0, #12]
 800c40c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c410:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c414:	b94c      	cbnz	r4, 800c42a <__pow5mult+0x66>
 800c416:	f240 2171 	movw	r1, #625	; 0x271
 800c41a:	4630      	mov	r0, r6
 800c41c:	f7ff ff12 	bl	800c244 <__i2b>
 800c420:	2300      	movs	r3, #0
 800c422:	f8c8 0008 	str.w	r0, [r8, #8]
 800c426:	4604      	mov	r4, r0
 800c428:	6003      	str	r3, [r0, #0]
 800c42a:	f04f 0900 	mov.w	r9, #0
 800c42e:	07eb      	lsls	r3, r5, #31
 800c430:	d50a      	bpl.n	800c448 <__pow5mult+0x84>
 800c432:	4639      	mov	r1, r7
 800c434:	4622      	mov	r2, r4
 800c436:	4630      	mov	r0, r6
 800c438:	f7ff ff1a 	bl	800c270 <__multiply>
 800c43c:	4639      	mov	r1, r7
 800c43e:	4680      	mov	r8, r0
 800c440:	4630      	mov	r0, r6
 800c442:	f7ff fdfd 	bl	800c040 <_Bfree>
 800c446:	4647      	mov	r7, r8
 800c448:	106d      	asrs	r5, r5, #1
 800c44a:	d00b      	beq.n	800c464 <__pow5mult+0xa0>
 800c44c:	6820      	ldr	r0, [r4, #0]
 800c44e:	b938      	cbnz	r0, 800c460 <__pow5mult+0x9c>
 800c450:	4622      	mov	r2, r4
 800c452:	4621      	mov	r1, r4
 800c454:	4630      	mov	r0, r6
 800c456:	f7ff ff0b 	bl	800c270 <__multiply>
 800c45a:	6020      	str	r0, [r4, #0]
 800c45c:	f8c0 9000 	str.w	r9, [r0]
 800c460:	4604      	mov	r4, r0
 800c462:	e7e4      	b.n	800c42e <__pow5mult+0x6a>
 800c464:	4638      	mov	r0, r7
 800c466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46a:	bf00      	nop
 800c46c:	0800f750 	.word	0x0800f750
 800c470:	0800f505 	.word	0x0800f505
 800c474:	0800f604 	.word	0x0800f604

0800c478 <__lshift>:
 800c478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c47c:	460c      	mov	r4, r1
 800c47e:	6849      	ldr	r1, [r1, #4]
 800c480:	6923      	ldr	r3, [r4, #16]
 800c482:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c486:	68a3      	ldr	r3, [r4, #8]
 800c488:	4607      	mov	r7, r0
 800c48a:	4691      	mov	r9, r2
 800c48c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c490:	f108 0601 	add.w	r6, r8, #1
 800c494:	42b3      	cmp	r3, r6
 800c496:	db0b      	blt.n	800c4b0 <__lshift+0x38>
 800c498:	4638      	mov	r0, r7
 800c49a:	f7ff fd91 	bl	800bfc0 <_Balloc>
 800c49e:	4605      	mov	r5, r0
 800c4a0:	b948      	cbnz	r0, 800c4b6 <__lshift+0x3e>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	4b2a      	ldr	r3, [pc, #168]	; (800c550 <__lshift+0xd8>)
 800c4a6:	482b      	ldr	r0, [pc, #172]	; (800c554 <__lshift+0xdc>)
 800c4a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c4ac:	f7fb feb6 	bl	800821c <__assert_func>
 800c4b0:	3101      	adds	r1, #1
 800c4b2:	005b      	lsls	r3, r3, #1
 800c4b4:	e7ee      	b.n	800c494 <__lshift+0x1c>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f100 0114 	add.w	r1, r0, #20
 800c4bc:	f100 0210 	add.w	r2, r0, #16
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	4553      	cmp	r3, sl
 800c4c4:	db37      	blt.n	800c536 <__lshift+0xbe>
 800c4c6:	6920      	ldr	r0, [r4, #16]
 800c4c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4cc:	f104 0314 	add.w	r3, r4, #20
 800c4d0:	f019 091f 	ands.w	r9, r9, #31
 800c4d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c4dc:	d02f      	beq.n	800c53e <__lshift+0xc6>
 800c4de:	f1c9 0e20 	rsb	lr, r9, #32
 800c4e2:	468a      	mov	sl, r1
 800c4e4:	f04f 0c00 	mov.w	ip, #0
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	fa02 f209 	lsl.w	r2, r2, r9
 800c4ee:	ea42 020c 	orr.w	r2, r2, ip
 800c4f2:	f84a 2b04 	str.w	r2, [sl], #4
 800c4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4fa:	4298      	cmp	r0, r3
 800c4fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c500:	d8f2      	bhi.n	800c4e8 <__lshift+0x70>
 800c502:	1b03      	subs	r3, r0, r4
 800c504:	3b15      	subs	r3, #21
 800c506:	f023 0303 	bic.w	r3, r3, #3
 800c50a:	3304      	adds	r3, #4
 800c50c:	f104 0215 	add.w	r2, r4, #21
 800c510:	4290      	cmp	r0, r2
 800c512:	bf38      	it	cc
 800c514:	2304      	movcc	r3, #4
 800c516:	f841 c003 	str.w	ip, [r1, r3]
 800c51a:	f1bc 0f00 	cmp.w	ip, #0
 800c51e:	d001      	beq.n	800c524 <__lshift+0xac>
 800c520:	f108 0602 	add.w	r6, r8, #2
 800c524:	3e01      	subs	r6, #1
 800c526:	4638      	mov	r0, r7
 800c528:	612e      	str	r6, [r5, #16]
 800c52a:	4621      	mov	r1, r4
 800c52c:	f7ff fd88 	bl	800c040 <_Bfree>
 800c530:	4628      	mov	r0, r5
 800c532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c536:	f842 0f04 	str.w	r0, [r2, #4]!
 800c53a:	3301      	adds	r3, #1
 800c53c:	e7c1      	b.n	800c4c2 <__lshift+0x4a>
 800c53e:	3904      	subs	r1, #4
 800c540:	f853 2b04 	ldr.w	r2, [r3], #4
 800c544:	f841 2f04 	str.w	r2, [r1, #4]!
 800c548:	4298      	cmp	r0, r3
 800c54a:	d8f9      	bhi.n	800c540 <__lshift+0xc8>
 800c54c:	e7ea      	b.n	800c524 <__lshift+0xac>
 800c54e:	bf00      	nop
 800c550:	0800f577 	.word	0x0800f577
 800c554:	0800f604 	.word	0x0800f604

0800c558 <__mcmp>:
 800c558:	b530      	push	{r4, r5, lr}
 800c55a:	6902      	ldr	r2, [r0, #16]
 800c55c:	690c      	ldr	r4, [r1, #16]
 800c55e:	1b12      	subs	r2, r2, r4
 800c560:	d10e      	bne.n	800c580 <__mcmp+0x28>
 800c562:	f100 0314 	add.w	r3, r0, #20
 800c566:	3114      	adds	r1, #20
 800c568:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c56c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c570:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c574:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c578:	42a5      	cmp	r5, r4
 800c57a:	d003      	beq.n	800c584 <__mcmp+0x2c>
 800c57c:	d305      	bcc.n	800c58a <__mcmp+0x32>
 800c57e:	2201      	movs	r2, #1
 800c580:	4610      	mov	r0, r2
 800c582:	bd30      	pop	{r4, r5, pc}
 800c584:	4283      	cmp	r3, r0
 800c586:	d3f3      	bcc.n	800c570 <__mcmp+0x18>
 800c588:	e7fa      	b.n	800c580 <__mcmp+0x28>
 800c58a:	f04f 32ff 	mov.w	r2, #4294967295
 800c58e:	e7f7      	b.n	800c580 <__mcmp+0x28>

0800c590 <__mdiff>:
 800c590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	460c      	mov	r4, r1
 800c596:	4606      	mov	r6, r0
 800c598:	4611      	mov	r1, r2
 800c59a:	4620      	mov	r0, r4
 800c59c:	4690      	mov	r8, r2
 800c59e:	f7ff ffdb 	bl	800c558 <__mcmp>
 800c5a2:	1e05      	subs	r5, r0, #0
 800c5a4:	d110      	bne.n	800c5c8 <__mdiff+0x38>
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7ff fd09 	bl	800bfc0 <_Balloc>
 800c5ae:	b930      	cbnz	r0, 800c5be <__mdiff+0x2e>
 800c5b0:	4b3a      	ldr	r3, [pc, #232]	; (800c69c <__mdiff+0x10c>)
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	f240 2132 	movw	r1, #562	; 0x232
 800c5b8:	4839      	ldr	r0, [pc, #228]	; (800c6a0 <__mdiff+0x110>)
 800c5ba:	f7fb fe2f 	bl	800821c <__assert_func>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c8:	bfa4      	itt	ge
 800c5ca:	4643      	movge	r3, r8
 800c5cc:	46a0      	movge	r8, r4
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c5d4:	bfa6      	itte	ge
 800c5d6:	461c      	movge	r4, r3
 800c5d8:	2500      	movge	r5, #0
 800c5da:	2501      	movlt	r5, #1
 800c5dc:	f7ff fcf0 	bl	800bfc0 <_Balloc>
 800c5e0:	b920      	cbnz	r0, 800c5ec <__mdiff+0x5c>
 800c5e2:	4b2e      	ldr	r3, [pc, #184]	; (800c69c <__mdiff+0x10c>)
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c5ea:	e7e5      	b.n	800c5b8 <__mdiff+0x28>
 800c5ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5f0:	6926      	ldr	r6, [r4, #16]
 800c5f2:	60c5      	str	r5, [r0, #12]
 800c5f4:	f104 0914 	add.w	r9, r4, #20
 800c5f8:	f108 0514 	add.w	r5, r8, #20
 800c5fc:	f100 0e14 	add.w	lr, r0, #20
 800c600:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c604:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c608:	f108 0210 	add.w	r2, r8, #16
 800c60c:	46f2      	mov	sl, lr
 800c60e:	2100      	movs	r1, #0
 800c610:	f859 3b04 	ldr.w	r3, [r9], #4
 800c614:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c618:	fa1f f883 	uxth.w	r8, r3
 800c61c:	fa11 f18b 	uxtah	r1, r1, fp
 800c620:	0c1b      	lsrs	r3, r3, #16
 800c622:	eba1 0808 	sub.w	r8, r1, r8
 800c626:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c62a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c62e:	fa1f f888 	uxth.w	r8, r8
 800c632:	1419      	asrs	r1, r3, #16
 800c634:	454e      	cmp	r6, r9
 800c636:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c63a:	f84a 3b04 	str.w	r3, [sl], #4
 800c63e:	d8e7      	bhi.n	800c610 <__mdiff+0x80>
 800c640:	1b33      	subs	r3, r6, r4
 800c642:	3b15      	subs	r3, #21
 800c644:	f023 0303 	bic.w	r3, r3, #3
 800c648:	3304      	adds	r3, #4
 800c64a:	3415      	adds	r4, #21
 800c64c:	42a6      	cmp	r6, r4
 800c64e:	bf38      	it	cc
 800c650:	2304      	movcc	r3, #4
 800c652:	441d      	add	r5, r3
 800c654:	4473      	add	r3, lr
 800c656:	469e      	mov	lr, r3
 800c658:	462e      	mov	r6, r5
 800c65a:	4566      	cmp	r6, ip
 800c65c:	d30e      	bcc.n	800c67c <__mdiff+0xec>
 800c65e:	f10c 0203 	add.w	r2, ip, #3
 800c662:	1b52      	subs	r2, r2, r5
 800c664:	f022 0203 	bic.w	r2, r2, #3
 800c668:	3d03      	subs	r5, #3
 800c66a:	45ac      	cmp	ip, r5
 800c66c:	bf38      	it	cc
 800c66e:	2200      	movcc	r2, #0
 800c670:	441a      	add	r2, r3
 800c672:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c676:	b17b      	cbz	r3, 800c698 <__mdiff+0x108>
 800c678:	6107      	str	r7, [r0, #16]
 800c67a:	e7a3      	b.n	800c5c4 <__mdiff+0x34>
 800c67c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c680:	fa11 f288 	uxtah	r2, r1, r8
 800c684:	1414      	asrs	r4, r2, #16
 800c686:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c68a:	b292      	uxth	r2, r2
 800c68c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c690:	f84e 2b04 	str.w	r2, [lr], #4
 800c694:	1421      	asrs	r1, r4, #16
 800c696:	e7e0      	b.n	800c65a <__mdiff+0xca>
 800c698:	3f01      	subs	r7, #1
 800c69a:	e7ea      	b.n	800c672 <__mdiff+0xe2>
 800c69c:	0800f577 	.word	0x0800f577
 800c6a0:	0800f604 	.word	0x0800f604

0800c6a4 <__ulp>:
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	ed8d 0b00 	vstr	d0, [sp]
 800c6aa:	9b01      	ldr	r3, [sp, #4]
 800c6ac:	4912      	ldr	r1, [pc, #72]	; (800c6f8 <__ulp+0x54>)
 800c6ae:	4019      	ands	r1, r3
 800c6b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	dd05      	ble.n	800c6c4 <__ulp+0x20>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	ec43 2b10 	vmov	d0, r2, r3
 800c6c0:	b002      	add	sp, #8
 800c6c2:	4770      	bx	lr
 800c6c4:	4249      	negs	r1, r1
 800c6c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c6ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c6ce:	f04f 0200 	mov.w	r2, #0
 800c6d2:	f04f 0300 	mov.w	r3, #0
 800c6d6:	da04      	bge.n	800c6e2 <__ulp+0x3e>
 800c6d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6dc:	fa41 f300 	asr.w	r3, r1, r0
 800c6e0:	e7ec      	b.n	800c6bc <__ulp+0x18>
 800c6e2:	f1a0 0114 	sub.w	r1, r0, #20
 800c6e6:	291e      	cmp	r1, #30
 800c6e8:	bfda      	itte	le
 800c6ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c6ee:	fa20 f101 	lsrle.w	r1, r0, r1
 800c6f2:	2101      	movgt	r1, #1
 800c6f4:	460a      	mov	r2, r1
 800c6f6:	e7e1      	b.n	800c6bc <__ulp+0x18>
 800c6f8:	7ff00000 	.word	0x7ff00000

0800c6fc <__b2d>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	6905      	ldr	r5, [r0, #16]
 800c700:	f100 0714 	add.w	r7, r0, #20
 800c704:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c708:	1f2e      	subs	r6, r5, #4
 800c70a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c70e:	4620      	mov	r0, r4
 800c710:	f7ff fd48 	bl	800c1a4 <__hi0bits>
 800c714:	f1c0 0320 	rsb	r3, r0, #32
 800c718:	280a      	cmp	r0, #10
 800c71a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c798 <__b2d+0x9c>
 800c71e:	600b      	str	r3, [r1, #0]
 800c720:	dc14      	bgt.n	800c74c <__b2d+0x50>
 800c722:	f1c0 0e0b 	rsb	lr, r0, #11
 800c726:	fa24 f10e 	lsr.w	r1, r4, lr
 800c72a:	42b7      	cmp	r7, r6
 800c72c:	ea41 030c 	orr.w	r3, r1, ip
 800c730:	bf34      	ite	cc
 800c732:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c736:	2100      	movcs	r1, #0
 800c738:	3015      	adds	r0, #21
 800c73a:	fa04 f000 	lsl.w	r0, r4, r0
 800c73e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c742:	ea40 0201 	orr.w	r2, r0, r1
 800c746:	ec43 2b10 	vmov	d0, r2, r3
 800c74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c74c:	42b7      	cmp	r7, r6
 800c74e:	bf3a      	itte	cc
 800c750:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c754:	f1a5 0608 	subcc.w	r6, r5, #8
 800c758:	2100      	movcs	r1, #0
 800c75a:	380b      	subs	r0, #11
 800c75c:	d017      	beq.n	800c78e <__b2d+0x92>
 800c75e:	f1c0 0c20 	rsb	ip, r0, #32
 800c762:	fa04 f500 	lsl.w	r5, r4, r0
 800c766:	42be      	cmp	r6, r7
 800c768:	fa21 f40c 	lsr.w	r4, r1, ip
 800c76c:	ea45 0504 	orr.w	r5, r5, r4
 800c770:	bf8c      	ite	hi
 800c772:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c776:	2400      	movls	r4, #0
 800c778:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c77c:	fa01 f000 	lsl.w	r0, r1, r0
 800c780:	fa24 f40c 	lsr.w	r4, r4, ip
 800c784:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c788:	ea40 0204 	orr.w	r2, r0, r4
 800c78c:	e7db      	b.n	800c746 <__b2d+0x4a>
 800c78e:	ea44 030c 	orr.w	r3, r4, ip
 800c792:	460a      	mov	r2, r1
 800c794:	e7d7      	b.n	800c746 <__b2d+0x4a>
 800c796:	bf00      	nop
 800c798:	3ff00000 	.word	0x3ff00000

0800c79c <__d2b>:
 800c79c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7a0:	4689      	mov	r9, r1
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	ec57 6b10 	vmov	r6, r7, d0
 800c7a8:	4690      	mov	r8, r2
 800c7aa:	f7ff fc09 	bl	800bfc0 <_Balloc>
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	b930      	cbnz	r0, 800c7c0 <__d2b+0x24>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	4b25      	ldr	r3, [pc, #148]	; (800c84c <__d2b+0xb0>)
 800c7b6:	4826      	ldr	r0, [pc, #152]	; (800c850 <__d2b+0xb4>)
 800c7b8:	f240 310a 	movw	r1, #778	; 0x30a
 800c7bc:	f7fb fd2e 	bl	800821c <__assert_func>
 800c7c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c7c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c7c8:	bb35      	cbnz	r5, 800c818 <__d2b+0x7c>
 800c7ca:	2e00      	cmp	r6, #0
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	d028      	beq.n	800c822 <__d2b+0x86>
 800c7d0:	4668      	mov	r0, sp
 800c7d2:	9600      	str	r6, [sp, #0]
 800c7d4:	f7ff fd06 	bl	800c1e4 <__lo0bits>
 800c7d8:	9900      	ldr	r1, [sp, #0]
 800c7da:	b300      	cbz	r0, 800c81e <__d2b+0x82>
 800c7dc:	9a01      	ldr	r2, [sp, #4]
 800c7de:	f1c0 0320 	rsb	r3, r0, #32
 800c7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7e6:	430b      	orrs	r3, r1
 800c7e8:	40c2      	lsrs	r2, r0
 800c7ea:	6163      	str	r3, [r4, #20]
 800c7ec:	9201      	str	r2, [sp, #4]
 800c7ee:	9b01      	ldr	r3, [sp, #4]
 800c7f0:	61a3      	str	r3, [r4, #24]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bf14      	ite	ne
 800c7f6:	2202      	movne	r2, #2
 800c7f8:	2201      	moveq	r2, #1
 800c7fa:	6122      	str	r2, [r4, #16]
 800c7fc:	b1d5      	cbz	r5, 800c834 <__d2b+0x98>
 800c7fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c802:	4405      	add	r5, r0
 800c804:	f8c9 5000 	str.w	r5, [r9]
 800c808:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c80c:	f8c8 0000 	str.w	r0, [r8]
 800c810:	4620      	mov	r0, r4
 800c812:	b003      	add	sp, #12
 800c814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c81c:	e7d5      	b.n	800c7ca <__d2b+0x2e>
 800c81e:	6161      	str	r1, [r4, #20]
 800c820:	e7e5      	b.n	800c7ee <__d2b+0x52>
 800c822:	a801      	add	r0, sp, #4
 800c824:	f7ff fcde 	bl	800c1e4 <__lo0bits>
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	6163      	str	r3, [r4, #20]
 800c82c:	2201      	movs	r2, #1
 800c82e:	6122      	str	r2, [r4, #16]
 800c830:	3020      	adds	r0, #32
 800c832:	e7e3      	b.n	800c7fc <__d2b+0x60>
 800c834:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c838:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c83c:	f8c9 0000 	str.w	r0, [r9]
 800c840:	6918      	ldr	r0, [r3, #16]
 800c842:	f7ff fcaf 	bl	800c1a4 <__hi0bits>
 800c846:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c84a:	e7df      	b.n	800c80c <__d2b+0x70>
 800c84c:	0800f577 	.word	0x0800f577
 800c850:	0800f604 	.word	0x0800f604

0800c854 <__ratio>:
 800c854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c858:	4688      	mov	r8, r1
 800c85a:	4669      	mov	r1, sp
 800c85c:	4681      	mov	r9, r0
 800c85e:	f7ff ff4d 	bl	800c6fc <__b2d>
 800c862:	a901      	add	r1, sp, #4
 800c864:	4640      	mov	r0, r8
 800c866:	ec55 4b10 	vmov	r4, r5, d0
 800c86a:	f7ff ff47 	bl	800c6fc <__b2d>
 800c86e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c872:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c876:	eba3 0c02 	sub.w	ip, r3, r2
 800c87a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c87e:	1a9b      	subs	r3, r3, r2
 800c880:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c884:	ec51 0b10 	vmov	r0, r1, d0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	bfd6      	itet	le
 800c88c:	460a      	movle	r2, r1
 800c88e:	462a      	movgt	r2, r5
 800c890:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c894:	468b      	mov	fp, r1
 800c896:	462f      	mov	r7, r5
 800c898:	bfd4      	ite	le
 800c89a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c89e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	ee10 2a10 	vmov	r2, s0
 800c8a8:	465b      	mov	r3, fp
 800c8aa:	4639      	mov	r1, r7
 800c8ac:	f7f3 ffce 	bl	800084c <__aeabi_ddiv>
 800c8b0:	ec41 0b10 	vmov	d0, r0, r1
 800c8b4:	b003      	add	sp, #12
 800c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8ba <__copybits>:
 800c8ba:	3901      	subs	r1, #1
 800c8bc:	b570      	push	{r4, r5, r6, lr}
 800c8be:	1149      	asrs	r1, r1, #5
 800c8c0:	6914      	ldr	r4, [r2, #16]
 800c8c2:	3101      	adds	r1, #1
 800c8c4:	f102 0314 	add.w	r3, r2, #20
 800c8c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c8cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c8d0:	1f05      	subs	r5, r0, #4
 800c8d2:	42a3      	cmp	r3, r4
 800c8d4:	d30c      	bcc.n	800c8f0 <__copybits+0x36>
 800c8d6:	1aa3      	subs	r3, r4, r2
 800c8d8:	3b11      	subs	r3, #17
 800c8da:	f023 0303 	bic.w	r3, r3, #3
 800c8de:	3211      	adds	r2, #17
 800c8e0:	42a2      	cmp	r2, r4
 800c8e2:	bf88      	it	hi
 800c8e4:	2300      	movhi	r3, #0
 800c8e6:	4418      	add	r0, r3
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	4288      	cmp	r0, r1
 800c8ec:	d305      	bcc.n	800c8fa <__copybits+0x40>
 800c8ee:	bd70      	pop	{r4, r5, r6, pc}
 800c8f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c8f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c8f8:	e7eb      	b.n	800c8d2 <__copybits+0x18>
 800c8fa:	f840 3b04 	str.w	r3, [r0], #4
 800c8fe:	e7f4      	b.n	800c8ea <__copybits+0x30>

0800c900 <__any_on>:
 800c900:	f100 0214 	add.w	r2, r0, #20
 800c904:	6900      	ldr	r0, [r0, #16]
 800c906:	114b      	asrs	r3, r1, #5
 800c908:	4298      	cmp	r0, r3
 800c90a:	b510      	push	{r4, lr}
 800c90c:	db11      	blt.n	800c932 <__any_on+0x32>
 800c90e:	dd0a      	ble.n	800c926 <__any_on+0x26>
 800c910:	f011 011f 	ands.w	r1, r1, #31
 800c914:	d007      	beq.n	800c926 <__any_on+0x26>
 800c916:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c91a:	fa24 f001 	lsr.w	r0, r4, r1
 800c91e:	fa00 f101 	lsl.w	r1, r0, r1
 800c922:	428c      	cmp	r4, r1
 800c924:	d10b      	bne.n	800c93e <__any_on+0x3e>
 800c926:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d803      	bhi.n	800c936 <__any_on+0x36>
 800c92e:	2000      	movs	r0, #0
 800c930:	bd10      	pop	{r4, pc}
 800c932:	4603      	mov	r3, r0
 800c934:	e7f7      	b.n	800c926 <__any_on+0x26>
 800c936:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c93a:	2900      	cmp	r1, #0
 800c93c:	d0f5      	beq.n	800c92a <__any_on+0x2a>
 800c93e:	2001      	movs	r0, #1
 800c940:	e7f6      	b.n	800c930 <__any_on+0x30>

0800c942 <_realloc_r>:
 800c942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c946:	4680      	mov	r8, r0
 800c948:	4614      	mov	r4, r2
 800c94a:	460e      	mov	r6, r1
 800c94c:	b921      	cbnz	r1, 800c958 <_realloc_r+0x16>
 800c94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c952:	4611      	mov	r1, r2
 800c954:	f7fc b802 	b.w	800895c <_malloc_r>
 800c958:	b92a      	cbnz	r2, 800c966 <_realloc_r+0x24>
 800c95a:	f7fb ff93 	bl	8008884 <_free_r>
 800c95e:	4625      	mov	r5, r4
 800c960:	4628      	mov	r0, r5
 800c962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c966:	f000 fa1b 	bl	800cda0 <_malloc_usable_size_r>
 800c96a:	4284      	cmp	r4, r0
 800c96c:	4607      	mov	r7, r0
 800c96e:	d802      	bhi.n	800c976 <_realloc_r+0x34>
 800c970:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c974:	d812      	bhi.n	800c99c <_realloc_r+0x5a>
 800c976:	4621      	mov	r1, r4
 800c978:	4640      	mov	r0, r8
 800c97a:	f7fb ffef 	bl	800895c <_malloc_r>
 800c97e:	4605      	mov	r5, r0
 800c980:	2800      	cmp	r0, #0
 800c982:	d0ed      	beq.n	800c960 <_realloc_r+0x1e>
 800c984:	42bc      	cmp	r4, r7
 800c986:	4622      	mov	r2, r4
 800c988:	4631      	mov	r1, r6
 800c98a:	bf28      	it	cs
 800c98c:	463a      	movcs	r2, r7
 800c98e:	f7fb ff33 	bl	80087f8 <memcpy>
 800c992:	4631      	mov	r1, r6
 800c994:	4640      	mov	r0, r8
 800c996:	f7fb ff75 	bl	8008884 <_free_r>
 800c99a:	e7e1      	b.n	800c960 <_realloc_r+0x1e>
 800c99c:	4635      	mov	r5, r6
 800c99e:	e7df      	b.n	800c960 <_realloc_r+0x1e>

0800c9a0 <__ssputs_r>:
 800c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a4:	688e      	ldr	r6, [r1, #8]
 800c9a6:	429e      	cmp	r6, r3
 800c9a8:	4682      	mov	sl, r0
 800c9aa:	460c      	mov	r4, r1
 800c9ac:	4690      	mov	r8, r2
 800c9ae:	461f      	mov	r7, r3
 800c9b0:	d838      	bhi.n	800ca24 <__ssputs_r+0x84>
 800c9b2:	898a      	ldrh	r2, [r1, #12]
 800c9b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9b8:	d032      	beq.n	800ca20 <__ssputs_r+0x80>
 800c9ba:	6825      	ldr	r5, [r4, #0]
 800c9bc:	6909      	ldr	r1, [r1, #16]
 800c9be:	eba5 0901 	sub.w	r9, r5, r1
 800c9c2:	6965      	ldr	r5, [r4, #20]
 800c9c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	444b      	add	r3, r9
 800c9d0:	106d      	asrs	r5, r5, #1
 800c9d2:	429d      	cmp	r5, r3
 800c9d4:	bf38      	it	cc
 800c9d6:	461d      	movcc	r5, r3
 800c9d8:	0553      	lsls	r3, r2, #21
 800c9da:	d531      	bpl.n	800ca40 <__ssputs_r+0xa0>
 800c9dc:	4629      	mov	r1, r5
 800c9de:	f7fb ffbd 	bl	800895c <_malloc_r>
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	b950      	cbnz	r0, 800c9fc <__ssputs_r+0x5c>
 800c9e6:	230c      	movs	r3, #12
 800c9e8:	f8ca 3000 	str.w	r3, [sl]
 800c9ec:	89a3      	ldrh	r3, [r4, #12]
 800c9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fc:	6921      	ldr	r1, [r4, #16]
 800c9fe:	464a      	mov	r2, r9
 800ca00:	f7fb fefa 	bl	80087f8 <memcpy>
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca0e:	81a3      	strh	r3, [r4, #12]
 800ca10:	6126      	str	r6, [r4, #16]
 800ca12:	6165      	str	r5, [r4, #20]
 800ca14:	444e      	add	r6, r9
 800ca16:	eba5 0509 	sub.w	r5, r5, r9
 800ca1a:	6026      	str	r6, [r4, #0]
 800ca1c:	60a5      	str	r5, [r4, #8]
 800ca1e:	463e      	mov	r6, r7
 800ca20:	42be      	cmp	r6, r7
 800ca22:	d900      	bls.n	800ca26 <__ssputs_r+0x86>
 800ca24:	463e      	mov	r6, r7
 800ca26:	6820      	ldr	r0, [r4, #0]
 800ca28:	4632      	mov	r2, r6
 800ca2a:	4641      	mov	r1, r8
 800ca2c:	f7fb fef2 	bl	8008814 <memmove>
 800ca30:	68a3      	ldr	r3, [r4, #8]
 800ca32:	1b9b      	subs	r3, r3, r6
 800ca34:	60a3      	str	r3, [r4, #8]
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	4433      	add	r3, r6
 800ca3a:	6023      	str	r3, [r4, #0]
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	e7db      	b.n	800c9f8 <__ssputs_r+0x58>
 800ca40:	462a      	mov	r2, r5
 800ca42:	f7ff ff7e 	bl	800c942 <_realloc_r>
 800ca46:	4606      	mov	r6, r0
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1e1      	bne.n	800ca10 <__ssputs_r+0x70>
 800ca4c:	6921      	ldr	r1, [r4, #16]
 800ca4e:	4650      	mov	r0, sl
 800ca50:	f7fb ff18 	bl	8008884 <_free_r>
 800ca54:	e7c7      	b.n	800c9e6 <__ssputs_r+0x46>
	...

0800ca58 <_svfiprintf_r>:
 800ca58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5c:	4698      	mov	r8, r3
 800ca5e:	898b      	ldrh	r3, [r1, #12]
 800ca60:	061b      	lsls	r3, r3, #24
 800ca62:	b09d      	sub	sp, #116	; 0x74
 800ca64:	4607      	mov	r7, r0
 800ca66:	460d      	mov	r5, r1
 800ca68:	4614      	mov	r4, r2
 800ca6a:	d50e      	bpl.n	800ca8a <_svfiprintf_r+0x32>
 800ca6c:	690b      	ldr	r3, [r1, #16]
 800ca6e:	b963      	cbnz	r3, 800ca8a <_svfiprintf_r+0x32>
 800ca70:	2140      	movs	r1, #64	; 0x40
 800ca72:	f7fb ff73 	bl	800895c <_malloc_r>
 800ca76:	6028      	str	r0, [r5, #0]
 800ca78:	6128      	str	r0, [r5, #16]
 800ca7a:	b920      	cbnz	r0, 800ca86 <_svfiprintf_r+0x2e>
 800ca7c:	230c      	movs	r3, #12
 800ca7e:	603b      	str	r3, [r7, #0]
 800ca80:	f04f 30ff 	mov.w	r0, #4294967295
 800ca84:	e0d1      	b.n	800cc2a <_svfiprintf_r+0x1d2>
 800ca86:	2340      	movs	r3, #64	; 0x40
 800ca88:	616b      	str	r3, [r5, #20]
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca8e:	2320      	movs	r3, #32
 800ca90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca98:	2330      	movs	r3, #48	; 0x30
 800ca9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc44 <_svfiprintf_r+0x1ec>
 800ca9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caa2:	f04f 0901 	mov.w	r9, #1
 800caa6:	4623      	mov	r3, r4
 800caa8:	469a      	mov	sl, r3
 800caaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caae:	b10a      	cbz	r2, 800cab4 <_svfiprintf_r+0x5c>
 800cab0:	2a25      	cmp	r2, #37	; 0x25
 800cab2:	d1f9      	bne.n	800caa8 <_svfiprintf_r+0x50>
 800cab4:	ebba 0b04 	subs.w	fp, sl, r4
 800cab8:	d00b      	beq.n	800cad2 <_svfiprintf_r+0x7a>
 800caba:	465b      	mov	r3, fp
 800cabc:	4622      	mov	r2, r4
 800cabe:	4629      	mov	r1, r5
 800cac0:	4638      	mov	r0, r7
 800cac2:	f7ff ff6d 	bl	800c9a0 <__ssputs_r>
 800cac6:	3001      	adds	r0, #1
 800cac8:	f000 80aa 	beq.w	800cc20 <_svfiprintf_r+0x1c8>
 800cacc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cace:	445a      	add	r2, fp
 800cad0:	9209      	str	r2, [sp, #36]	; 0x24
 800cad2:	f89a 3000 	ldrb.w	r3, [sl]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f000 80a2 	beq.w	800cc20 <_svfiprintf_r+0x1c8>
 800cadc:	2300      	movs	r3, #0
 800cade:	f04f 32ff 	mov.w	r2, #4294967295
 800cae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cae6:	f10a 0a01 	add.w	sl, sl, #1
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	9307      	str	r3, [sp, #28]
 800caee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caf2:	931a      	str	r3, [sp, #104]	; 0x68
 800caf4:	4654      	mov	r4, sl
 800caf6:	2205      	movs	r2, #5
 800caf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cafc:	4851      	ldr	r0, [pc, #324]	; (800cc44 <_svfiprintf_r+0x1ec>)
 800cafe:	f7f3 fb6f 	bl	80001e0 <memchr>
 800cb02:	9a04      	ldr	r2, [sp, #16]
 800cb04:	b9d8      	cbnz	r0, 800cb3e <_svfiprintf_r+0xe6>
 800cb06:	06d0      	lsls	r0, r2, #27
 800cb08:	bf44      	itt	mi
 800cb0a:	2320      	movmi	r3, #32
 800cb0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb10:	0711      	lsls	r1, r2, #28
 800cb12:	bf44      	itt	mi
 800cb14:	232b      	movmi	r3, #43	; 0x2b
 800cb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb20:	d015      	beq.n	800cb4e <_svfiprintf_r+0xf6>
 800cb22:	9a07      	ldr	r2, [sp, #28]
 800cb24:	4654      	mov	r4, sl
 800cb26:	2000      	movs	r0, #0
 800cb28:	f04f 0c0a 	mov.w	ip, #10
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb32:	3b30      	subs	r3, #48	; 0x30
 800cb34:	2b09      	cmp	r3, #9
 800cb36:	d94e      	bls.n	800cbd6 <_svfiprintf_r+0x17e>
 800cb38:	b1b0      	cbz	r0, 800cb68 <_svfiprintf_r+0x110>
 800cb3a:	9207      	str	r2, [sp, #28]
 800cb3c:	e014      	b.n	800cb68 <_svfiprintf_r+0x110>
 800cb3e:	eba0 0308 	sub.w	r3, r0, r8
 800cb42:	fa09 f303 	lsl.w	r3, r9, r3
 800cb46:	4313      	orrs	r3, r2
 800cb48:	9304      	str	r3, [sp, #16]
 800cb4a:	46a2      	mov	sl, r4
 800cb4c:	e7d2      	b.n	800caf4 <_svfiprintf_r+0x9c>
 800cb4e:	9b03      	ldr	r3, [sp, #12]
 800cb50:	1d19      	adds	r1, r3, #4
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	9103      	str	r1, [sp, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	bfbb      	ittet	lt
 800cb5a:	425b      	neglt	r3, r3
 800cb5c:	f042 0202 	orrlt.w	r2, r2, #2
 800cb60:	9307      	strge	r3, [sp, #28]
 800cb62:	9307      	strlt	r3, [sp, #28]
 800cb64:	bfb8      	it	lt
 800cb66:	9204      	strlt	r2, [sp, #16]
 800cb68:	7823      	ldrb	r3, [r4, #0]
 800cb6a:	2b2e      	cmp	r3, #46	; 0x2e
 800cb6c:	d10c      	bne.n	800cb88 <_svfiprintf_r+0x130>
 800cb6e:	7863      	ldrb	r3, [r4, #1]
 800cb70:	2b2a      	cmp	r3, #42	; 0x2a
 800cb72:	d135      	bne.n	800cbe0 <_svfiprintf_r+0x188>
 800cb74:	9b03      	ldr	r3, [sp, #12]
 800cb76:	1d1a      	adds	r2, r3, #4
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	9203      	str	r2, [sp, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	bfb8      	it	lt
 800cb80:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb84:	3402      	adds	r4, #2
 800cb86:	9305      	str	r3, [sp, #20]
 800cb88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc54 <_svfiprintf_r+0x1fc>
 800cb8c:	7821      	ldrb	r1, [r4, #0]
 800cb8e:	2203      	movs	r2, #3
 800cb90:	4650      	mov	r0, sl
 800cb92:	f7f3 fb25 	bl	80001e0 <memchr>
 800cb96:	b140      	cbz	r0, 800cbaa <_svfiprintf_r+0x152>
 800cb98:	2340      	movs	r3, #64	; 0x40
 800cb9a:	eba0 000a 	sub.w	r0, r0, sl
 800cb9e:	fa03 f000 	lsl.w	r0, r3, r0
 800cba2:	9b04      	ldr	r3, [sp, #16]
 800cba4:	4303      	orrs	r3, r0
 800cba6:	3401      	adds	r4, #1
 800cba8:	9304      	str	r3, [sp, #16]
 800cbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbae:	4826      	ldr	r0, [pc, #152]	; (800cc48 <_svfiprintf_r+0x1f0>)
 800cbb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbb4:	2206      	movs	r2, #6
 800cbb6:	f7f3 fb13 	bl	80001e0 <memchr>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d038      	beq.n	800cc30 <_svfiprintf_r+0x1d8>
 800cbbe:	4b23      	ldr	r3, [pc, #140]	; (800cc4c <_svfiprintf_r+0x1f4>)
 800cbc0:	bb1b      	cbnz	r3, 800cc0a <_svfiprintf_r+0x1b2>
 800cbc2:	9b03      	ldr	r3, [sp, #12]
 800cbc4:	3307      	adds	r3, #7
 800cbc6:	f023 0307 	bic.w	r3, r3, #7
 800cbca:	3308      	adds	r3, #8
 800cbcc:	9303      	str	r3, [sp, #12]
 800cbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd0:	4433      	add	r3, r6
 800cbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800cbd4:	e767      	b.n	800caa6 <_svfiprintf_r+0x4e>
 800cbd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbda:	460c      	mov	r4, r1
 800cbdc:	2001      	movs	r0, #1
 800cbde:	e7a5      	b.n	800cb2c <_svfiprintf_r+0xd4>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	3401      	adds	r4, #1
 800cbe4:	9305      	str	r3, [sp, #20]
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	f04f 0c0a 	mov.w	ip, #10
 800cbec:	4620      	mov	r0, r4
 800cbee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbf2:	3a30      	subs	r2, #48	; 0x30
 800cbf4:	2a09      	cmp	r2, #9
 800cbf6:	d903      	bls.n	800cc00 <_svfiprintf_r+0x1a8>
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d0c5      	beq.n	800cb88 <_svfiprintf_r+0x130>
 800cbfc:	9105      	str	r1, [sp, #20]
 800cbfe:	e7c3      	b.n	800cb88 <_svfiprintf_r+0x130>
 800cc00:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc04:	4604      	mov	r4, r0
 800cc06:	2301      	movs	r3, #1
 800cc08:	e7f0      	b.n	800cbec <_svfiprintf_r+0x194>
 800cc0a:	ab03      	add	r3, sp, #12
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	462a      	mov	r2, r5
 800cc10:	4b0f      	ldr	r3, [pc, #60]	; (800cc50 <_svfiprintf_r+0x1f8>)
 800cc12:	a904      	add	r1, sp, #16
 800cc14:	4638      	mov	r0, r7
 800cc16:	f7fc f919 	bl	8008e4c <_printf_float>
 800cc1a:	1c42      	adds	r2, r0, #1
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	d1d6      	bne.n	800cbce <_svfiprintf_r+0x176>
 800cc20:	89ab      	ldrh	r3, [r5, #12]
 800cc22:	065b      	lsls	r3, r3, #25
 800cc24:	f53f af2c 	bmi.w	800ca80 <_svfiprintf_r+0x28>
 800cc28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc2a:	b01d      	add	sp, #116	; 0x74
 800cc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc30:	ab03      	add	r3, sp, #12
 800cc32:	9300      	str	r3, [sp, #0]
 800cc34:	462a      	mov	r2, r5
 800cc36:	4b06      	ldr	r3, [pc, #24]	; (800cc50 <_svfiprintf_r+0x1f8>)
 800cc38:	a904      	add	r1, sp, #16
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	f7fc fbaa 	bl	8009394 <_printf_i>
 800cc40:	e7eb      	b.n	800cc1a <_svfiprintf_r+0x1c2>
 800cc42:	bf00      	nop
 800cc44:	0800f458 	.word	0x0800f458
 800cc48:	0800f462 	.word	0x0800f462
 800cc4c:	08008e4d 	.word	0x08008e4d
 800cc50:	0800c9a1 	.word	0x0800c9a1
 800cc54:	0800f45e 	.word	0x0800f45e

0800cc58 <_read_r>:
 800cc58:	b538      	push	{r3, r4, r5, lr}
 800cc5a:	4d07      	ldr	r5, [pc, #28]	; (800cc78 <_read_r+0x20>)
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	4608      	mov	r0, r1
 800cc60:	4611      	mov	r1, r2
 800cc62:	2200      	movs	r2, #0
 800cc64:	602a      	str	r2, [r5, #0]
 800cc66:	461a      	mov	r2, r3
 800cc68:	f7f4 fb28 	bl	80012bc <_read>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d102      	bne.n	800cc76 <_read_r+0x1e>
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	b103      	cbz	r3, 800cc76 <_read_r+0x1e>
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	20000eec 	.word	0x20000eec
 800cc7c:	00000000 	.word	0x00000000

0800cc80 <nan>:
 800cc80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc88 <nan+0x8>
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	00000000 	.word	0x00000000
 800cc8c:	7ff80000 	.word	0x7ff80000

0800cc90 <_raise_r>:
 800cc90:	291f      	cmp	r1, #31
 800cc92:	b538      	push	{r3, r4, r5, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	460d      	mov	r5, r1
 800cc98:	d904      	bls.n	800cca4 <_raise_r+0x14>
 800cc9a:	2316      	movs	r3, #22
 800cc9c:	6003      	str	r3, [r0, #0]
 800cc9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cca2:	bd38      	pop	{r3, r4, r5, pc}
 800cca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cca6:	b112      	cbz	r2, 800ccae <_raise_r+0x1e>
 800cca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccac:	b94b      	cbnz	r3, 800ccc2 <_raise_r+0x32>
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f000 f830 	bl	800cd14 <_getpid_r>
 800ccb4:	462a      	mov	r2, r5
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	4620      	mov	r0, r4
 800ccba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccbe:	f000 b817 	b.w	800ccf0 <_kill_r>
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d00a      	beq.n	800ccdc <_raise_r+0x4c>
 800ccc6:	1c59      	adds	r1, r3, #1
 800ccc8:	d103      	bne.n	800ccd2 <_raise_r+0x42>
 800ccca:	2316      	movs	r3, #22
 800cccc:	6003      	str	r3, [r0, #0]
 800ccce:	2001      	movs	r0, #1
 800ccd0:	e7e7      	b.n	800cca2 <_raise_r+0x12>
 800ccd2:	2400      	movs	r4, #0
 800ccd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ccd8:	4628      	mov	r0, r5
 800ccda:	4798      	blx	r3
 800ccdc:	2000      	movs	r0, #0
 800ccde:	e7e0      	b.n	800cca2 <_raise_r+0x12>

0800cce0 <raise>:
 800cce0:	4b02      	ldr	r3, [pc, #8]	; (800ccec <raise+0xc>)
 800cce2:	4601      	mov	r1, r0
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	f7ff bfd3 	b.w	800cc90 <_raise_r>
 800ccea:	bf00      	nop
 800ccec:	2000000c 	.word	0x2000000c

0800ccf0 <_kill_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	4d07      	ldr	r5, [pc, #28]	; (800cd10 <_kill_r+0x20>)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	4608      	mov	r0, r1
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	602b      	str	r3, [r5, #0]
 800ccfe:	f7f4 fac3 	bl	8001288 <_kill>
 800cd02:	1c43      	adds	r3, r0, #1
 800cd04:	d102      	bne.n	800cd0c <_kill_r+0x1c>
 800cd06:	682b      	ldr	r3, [r5, #0]
 800cd08:	b103      	cbz	r3, 800cd0c <_kill_r+0x1c>
 800cd0a:	6023      	str	r3, [r4, #0]
 800cd0c:	bd38      	pop	{r3, r4, r5, pc}
 800cd0e:	bf00      	nop
 800cd10:	20000eec 	.word	0x20000eec

0800cd14 <_getpid_r>:
 800cd14:	f7f4 bab0 	b.w	8001278 <_getpid>

0800cd18 <strncmp>:
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	b17a      	cbz	r2, 800cd3c <strncmp+0x24>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	3901      	subs	r1, #1
 800cd20:	1884      	adds	r4, r0, r2
 800cd22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd2a:	4290      	cmp	r0, r2
 800cd2c:	d101      	bne.n	800cd32 <strncmp+0x1a>
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	d101      	bne.n	800cd36 <strncmp+0x1e>
 800cd32:	1a80      	subs	r0, r0, r2
 800cd34:	bd10      	pop	{r4, pc}
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d1f3      	bne.n	800cd22 <strncmp+0xa>
 800cd3a:	e7fa      	b.n	800cd32 <strncmp+0x1a>
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	e7f9      	b.n	800cd34 <strncmp+0x1c>

0800cd40 <__ascii_wctomb>:
 800cd40:	b149      	cbz	r1, 800cd56 <__ascii_wctomb+0x16>
 800cd42:	2aff      	cmp	r2, #255	; 0xff
 800cd44:	bf85      	ittet	hi
 800cd46:	238a      	movhi	r3, #138	; 0x8a
 800cd48:	6003      	strhi	r3, [r0, #0]
 800cd4a:	700a      	strbls	r2, [r1, #0]
 800cd4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd50:	bf98      	it	ls
 800cd52:	2001      	movls	r0, #1
 800cd54:	4770      	bx	lr
 800cd56:	4608      	mov	r0, r1
 800cd58:	4770      	bx	lr
	...

0800cd5c <_fstat_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d07      	ldr	r5, [pc, #28]	; (800cd7c <_fstat_r+0x20>)
 800cd60:	2300      	movs	r3, #0
 800cd62:	4604      	mov	r4, r0
 800cd64:	4608      	mov	r0, r1
 800cd66:	4611      	mov	r1, r2
 800cd68:	602b      	str	r3, [r5, #0]
 800cd6a:	f7f4 faec 	bl	8001346 <_fstat>
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	d102      	bne.n	800cd78 <_fstat_r+0x1c>
 800cd72:	682b      	ldr	r3, [r5, #0]
 800cd74:	b103      	cbz	r3, 800cd78 <_fstat_r+0x1c>
 800cd76:	6023      	str	r3, [r4, #0]
 800cd78:	bd38      	pop	{r3, r4, r5, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20000eec 	.word	0x20000eec

0800cd80 <_isatty_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4d06      	ldr	r5, [pc, #24]	; (800cd9c <_isatty_r+0x1c>)
 800cd84:	2300      	movs	r3, #0
 800cd86:	4604      	mov	r4, r0
 800cd88:	4608      	mov	r0, r1
 800cd8a:	602b      	str	r3, [r5, #0]
 800cd8c:	f7f4 faeb 	bl	8001366 <_isatty>
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	d102      	bne.n	800cd9a <_isatty_r+0x1a>
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	b103      	cbz	r3, 800cd9a <_isatty_r+0x1a>
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	bd38      	pop	{r3, r4, r5, pc}
 800cd9c:	20000eec 	.word	0x20000eec

0800cda0 <_malloc_usable_size_r>:
 800cda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda4:	1f18      	subs	r0, r3, #4
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bfbc      	itt	lt
 800cdaa:	580b      	ldrlt	r3, [r1, r0]
 800cdac:	18c0      	addlt	r0, r0, r3
 800cdae:	4770      	bx	lr

0800cdb0 <_init>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	bf00      	nop
 800cdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb6:	bc08      	pop	{r3}
 800cdb8:	469e      	mov	lr, r3
 800cdba:	4770      	bx	lr

0800cdbc <_fini>:
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbe:	bf00      	nop
 800cdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc2:	bc08      	pop	{r3}
 800cdc4:	469e      	mov	lr, r3
 800cdc6:	4770      	bx	lr
